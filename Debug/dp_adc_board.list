
dp_adc_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017b30  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  08017de0  08017de0  00027de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018680  08018680  00028680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018688  08018688  00028688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801868c  0801868c  0002868c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  24000000  08018690  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008cd8  240001f0  08018880  000301f0  2**2
                  ALLOC
  8 .sdram_section 01dc1300  c0000000  c0000000  00040000  2**2
                  ALLOC
  9 ._user_heap_stack 00000c00  24008ec8  24008ec8  00038ec8  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00027a02  00000000  00000000  0003021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000044b6  00000000  00000000  00057c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001dd8  00000000  00000000  0005c0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001c10  00000000  00000000  0005deb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003692b  00000000  00000000  0005fac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000290e3  00000000  00000000  000963eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00151cc5  00000000  00000000  000bf4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00211193  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009174  00000000  00000000  002111e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001f0 	.word	0x240001f0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08017dc8 	.word	0x08017dc8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001f4 	.word	0x240001f4
 80002ec:	08017dc8 	.word	0x08017dc8

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <SDRAM_Startup_Sequence>:
uint32_t aTxBuffer[BUFFER_SIZE];
uint32_t aRxBuffer[BUFFER_SIZE];
uint32_t uwIndex = 0;
__IO uint32_t uwWriteReadStatus = 0;

void SDRAM_Startup_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  /* Program the SDRAM external device */
  SDRAM_Initialization_Sequence(hsdram, Command);
 8000ab6:	6839      	ldr	r1, [r7, #0]
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 f875 	bl	8000ba8 <SDRAM_Initialization_Sequence>

  /*##-2- SDRAM memory read/write access #####################################*/
  //*(__IO uint32_t*) (TEST_WRITE) = 0x1;

  /* Fill the buffer to write */
  Fill_Buffer(aTxBuffer, BUFFER_SIZE, 0xA244250F);
 8000abe:	4a34      	ldr	r2, [pc, #208]	; (8000b90 <SDRAM_Startup_Sequence+0xe4>)
 8000ac0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac4:	4833      	ldr	r0, [pc, #204]	; (8000b94 <SDRAM_Startup_Sequence+0xe8>)
 8000ac6:	f000 f8cc 	bl	8000c62 <Fill_Buffer>

    /* Fill the Read buffer */
  Fill_Buffer(aRxBuffer, BUFFER_SIZE, 0xBBBBBBBB);
 8000aca:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8000ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad2:	4831      	ldr	r0, [pc, #196]	; (8000b98 <SDRAM_Startup_Sequence+0xec>)
 8000ad4:	f000 f8c5 	bl	8000c62 <Fill_Buffer>

  /* Write data to the SDRAM memory */
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000ad8:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	e010      	b.n	8000b02 <SDRAM_Startup_Sequence+0x56>
  {
    *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uwIndex) = aTxBuffer[uwIndex];
 8000ae0:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000ae6:	6819      	ldr	r1, [r3, #0]
 8000ae8:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <SDRAM_Startup_Sequence+0xf4>)
 8000aea:	440b      	add	r3, r1
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4619      	mov	r1, r3
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <SDRAM_Startup_Sequence+0xe8>)
 8000af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af6:	600b      	str	r3, [r1, #0]
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000af8:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	4a27      	ldr	r2, [pc, #156]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b0a:	d3e9      	bcc.n	8000ae0 <SDRAM_Startup_Sequence+0x34>
  }

  /* Read back data from the SDRAM memory */
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000b0c:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	e010      	b.n	8000b36 <SDRAM_Startup_Sequence+0x8a>
  {
    aRxBuffer[uwIndex] = *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uwIndex);
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <SDRAM_Startup_Sequence+0xf4>)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6812      	ldr	r2, [r2, #0]
 8000b26:	491c      	ldr	r1, [pc, #112]	; (8000b98 <SDRAM_Startup_Sequence+0xec>)
 8000b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	4a1a      	ldr	r2, [pc, #104]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b3e:	d3e9      	bcc.n	8000b14 <SDRAM_Startup_Sequence+0x68>
  }

  /*##-3- Checking data integrity ############################################*/

  for (uwIndex = 0; (uwIndex < BUFFER_SIZE) && (uwWriteReadStatus == 0); uwIndex++)
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	e015      	b.n	8000b74 <SDRAM_Startup_Sequence+0xc8>
  {
    if (aRxBuffer[uwIndex] != aTxBuffer[uwIndex])
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <SDRAM_Startup_Sequence+0xec>)
 8000b4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	490f      	ldr	r1, [pc, #60]	; (8000b94 <SDRAM_Startup_Sequence+0xe8>)
 8000b58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d004      	beq.n	8000b6a <SDRAM_Startup_Sequence+0xbe>
    {
      uwWriteReadStatus++;
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <SDRAM_Startup_Sequence+0xf8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <SDRAM_Startup_Sequence+0xf8>)
 8000b68:	6013      	str	r3, [r2, #0]
  for (uwIndex = 0; (uwIndex < BUFFER_SIZE) && (uwWriteReadStatus == 0); uwIndex++)
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b7c:	d203      	bcs.n	8000b86 <SDRAM_Startup_Sequence+0xda>
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <SDRAM_Startup_Sequence+0xf8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0e0      	beq.n	8000b48 <SDRAM_Startup_Sequence+0x9c>
    }
  }
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	a244250f 	.word	0xa244250f
 8000b94:	2400020c 	.word	0x2400020c
 8000b98:	2400420c 	.word	0x2400420c
 8000b9c:	2400820c 	.word	0x2400820c
 8000ba0:	30000200 	.word	0x30000200
 8000ba4:	24008210 	.word	0x24008210

08000ba8 <SDRAM_Initialization_Sequence>:



void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f00b f919 	bl	800be0c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f003 f9b2 	bl	8003f44 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	2202      	movs	r2, #2
 8000be4:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	2210      	movs	r2, #16
 8000bea:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bfc:	6839      	ldr	r1, [r7, #0]
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f00b f904 	bl	800be0c <HAL_SDRAM_SendCommand>

  /* Step 4 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2203      	movs	r2, #3
 8000c08:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	2210      	movs	r2, #16
 8000c0e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	2208      	movs	r2, #8
 8000c14:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c20:	6839      	ldr	r1, [r7, #0]
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f00b f8f2 	bl	800be0c <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000c28:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000c2c:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2204      	movs	r2, #4
 8000c32:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2210      	movs	r2, #16
 8000c38:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c4a:	6839      	ldr	r1, [r7, #0]
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f00b f8dd 	bl	800be0c <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, 230);
 8000c52:	21e6      	movs	r1, #230	; 0xe6
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f00b f90e 	bl	800be76 <HAL_SDRAM_ProgramRefreshRate>
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <Fill_Buffer>:

void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b087      	sub	sp, #28
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	e00a      	b.n	8000c8e <Fill_Buffer+0x2c>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	6979      	ldr	r1, [r7, #20]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	440a      	add	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d3f0      	bcc.n	8000c78 <Fill_Buffer+0x16>
  }
}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	371c      	adds	r7, #28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	b08f      	sub	sp, #60	; 0x3c
 8000ca8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000caa:	f003 f8b9 	bl	8003e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cae:	f000 fa71 	bl	8001194 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000cb2:	f000 faeb 	bl	800128c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */
//TODO: need to move DMA init everytime up after GPIO init!!
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb6:	f000 fed5 	bl	8001a64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cba:	f000 fe21 	bl	8001900 <MX_DMA_Init>
  MX_SPI1_Init();
 8000cbe:	f000 fb35 	bl	800132c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000cc2:	f000 fc3b 	bl	800153c <MX_TIM1_Init>
  MX_UART4_Init();
 8000cc6:	f000 fd7f 	bl	80017c8 <MX_UART4_Init>
  MX_FMC_Init();
 8000cca:	f000 fe79 	bl	80019c0 <MX_FMC_Init>
  MX_SPI2_Init();
 8000cce:	f000 fb85 	bl	80013dc <MX_SPI2_Init>
  MX_SPI4_Init();
 8000cd2:	f000 fbdb 	bl	800148c <MX_SPI4_Init>
  MX_TIM2_Init();
 8000cd6:	f000 fcdd 	bl	8001694 <MX_TIM2_Init>
  MX_SDMMC1_SD_Init();
 8000cda:	f000 fb09 	bl	80012f0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000cde:	f011 f9b1 	bl	8012044 <MX_FATFS_Init>
  MX_TIM16_Init();
 8000ce2:	f000 fd49 	bl	8001778 <MX_TIM16_Init>
  MX_UART5_Init();
 8000ce6:	f000 fdbd 	bl	8001864 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  // setting up timer for time measuring
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000cea:	4b83      	ldr	r3, [pc, #524]	; (8000ef8 <main+0x254>)
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	4a82      	ldr	r2, [pc, #520]	; (8000ef8 <main+0x254>)
 8000cf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cf4:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8000cf6:	4b81      	ldr	r3, [pc, #516]	; (8000efc <main+0x258>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000cfc:	4b7f      	ldr	r3, [pc, #508]	; (8000efc <main+0x258>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a7e      	ldr	r2, [pc, #504]	; (8000efc <main+0x258>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6013      	str	r3, [r2, #0]
  HAL_Delay(500);
 8000d08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d0c:	f003 f91a 	bl	8003f44 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SDRAM_Startup_Sequence(&hsdram1, &fmc_command);
 8000d10:	497b      	ldr	r1, [pc, #492]	; (8000f00 <main+0x25c>)
 8000d12:	487c      	ldr	r0, [pc, #496]	; (8000f04 <main+0x260>)
 8000d14:	f7ff feca 	bl	8000aac <SDRAM_Startup_Sequence>
  sdCardInitError = sd_card_init();
 8000d18:	f001 fb6a 	bl	80023f0 <sd_card_init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b79      	ldr	r3, [pc, #484]	; (8000f08 <main+0x264>)
 8000d22:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8000d24:	2064      	movs	r0, #100	; 0x64
 8000d26:	f003 f90d 	bl	8003f44 <HAL_Delay>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 4);
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	2017      	movs	r0, #23
 8000d30:	f003 fa2b 	bl	800418a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 1);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2101      	movs	r1, #1
 8000d38:	2028      	movs	r0, #40	; 0x28
 8000d3a:	f003 fa26 	bl	800418a <HAL_NVIC_SetPriority>
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000d3e:	2017      	movs	r0, #23
 8000d40:	f003 fa4b 	bl	80041da <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000d44:	2028      	movs	r0, #40	; 0x28
 8000d46:	f003 fa48 	bl	80041da <HAL_NVIC_DisableIRQ>

  // uart4 and uart5 IT enable
  HAL_UART_Receive_IT (&huart4, rxUart4Buffer, 1);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	496f      	ldr	r1, [pc, #444]	; (8000f0c <main+0x268>)
 8000d4e:	4870      	ldr	r0, [pc, #448]	; (8000f10 <main+0x26c>)
 8000d50:	f00d ff26 	bl	800eba0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT (&huart5, rxUart5Buffer, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	496f      	ldr	r1, [pc, #444]	; (8000f14 <main+0x270>)
 8000d58:	486f      	ldr	r0, [pc, #444]	; (8000f18 <main+0x274>)
 8000d5a:	f00d ff21 	bl	800eba0 <HAL_UART_Receive_IT>

  // LED timer enable
  HAL_TIM_Base_Start_IT(&htim16);
 8000d5e:	486f      	ldr	r0, [pc, #444]	; (8000f1c <main+0x278>)
 8000d60:	f00c f95e 	bl	800d020 <HAL_TIM_Base_Start_IT>

  if (sdCardInitError == true){
 8000d64:	4b68      	ldr	r3, [pc, #416]	; (8000f08 <main+0x264>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <main+0xd0>
    setColorLED(red);
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f001 f8f9 	bl	8001f64 <setColorLED>
 8000d72:	e005      	b.n	8000d80 <main+0xdc>
  }else{
    setColorLED(blue);
 8000d74:	2002      	movs	r0, #2
 8000d76:	f001 f8f5 	bl	8001f64 <setColorLED>
    readConfigFile("config.txt");
 8000d7a:	4869      	ldr	r0, [pc, #420]	; (8000f20 <main+0x27c>)
 8000d7c:	f001 f93e 	bl	8001ffc <readConfigFile>
  }

  spi1_soft_reset();
 8000d80:	f001 fe58 	bl	8002a34 <spi1_soft_reset>
  spi2_soft_reset();
 8000d84:	f001 fe7c 	bl	8002a80 <spi2_soft_reset>
  spi4_soft_reset();
 8000d88:	f001 fea0 	bl	8002acc <spi4_soft_reset>
  spi1_adc_init(SPS_VALUE_5);
 8000d8c:	4b65      	ldr	r3, [pc, #404]	; (8000f24 <main+0x280>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 fbcb 	bl	800252c <spi1_adc_init>
  spi2_adc_init(SPS_VALUE_5);
 8000d96:	4b63      	ldr	r3, [pc, #396]	; (8000f24 <main+0x280>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 fc9e 	bl	80026dc <spi2_adc_init>
  spi4_adc_init(SPS_VALUE_5);
 8000da0:	4b60      	ldr	r3, [pc, #384]	; (8000f24 <main+0x280>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f001 fd71 	bl	800288c <spi4_adc_init>

  //initial setup:
  initialSetupADC();
 8000daa:	f001 fa6f 	bl	800228c <initialSetupADC>
  HAL_Delay(500);
 8000dae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db2:	f003 f8c7 	bl	8003f44 <HAL_Delay>

  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8000db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dba:	2220      	movs	r2, #32
 8000dbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8000dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc4:	2240      	movs	r2, #64	; 0x40
 8000dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8000dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000dd6:	2017      	movs	r0, #23
 8000dd8:	f003 f9f1 	bl	80041be <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ddc:	2028      	movs	r0, #40	; 0x28
 8000dde:	f003 f9ee 	bl	80041be <HAL_NVIC_EnableIRQ>

  //run all before main loop
  run_all_adc();
 8000de2:	f001 fe0b 	bl	80029fc <run_all_adc>

  char stringBufferValues[39];

  floating_point_values = true;
 8000de6:	4b50      	ldr	r3, [pc, #320]	; (8000f28 <main+0x284>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
    while (1){
      if(spiCommonBufferCounter < findMin(spi1ValuesBufferCounter,spi2ValuesBufferCounter,spi4ValuesBufferCounter)){
 8000dec:	4b4f      	ldr	r3, [pc, #316]	; (8000f2c <main+0x288>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a4f      	ldr	r2, [pc, #316]	; (8000f30 <main+0x28c>)
 8000df2:	6811      	ldr	r1, [r2, #0]
 8000df4:	4a4f      	ldr	r2, [pc, #316]	; (8000f34 <main+0x290>)
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 f897 	bl	8001f2c <findMin>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	4b4d      	ldr	r3, [pc, #308]	; (8000f38 <main+0x294>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	f240 80b5 	bls.w	8000f74 <main+0x2d0>
        if (floating_point_values == true){
 8000e0a:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <main+0x284>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d02e      	beq.n	8000e70 <main+0x1cc>
          getStringFromValuesFloat(spi1ValuesStorage[spiCommonBufferCounter],spi2ValuesStorage[spiCommonBufferCounter],spi4ValuesStorage[spiCommonBufferCounter],stringBufferValues, range_x_value, range_y_value, range_z_value);
 8000e12:	4b49      	ldr	r3, [pc, #292]	; (8000f38 <main+0x294>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a49      	ldr	r2, [pc, #292]	; (8000f3c <main+0x298>)
 8000e18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e1c:	4b46      	ldr	r3, [pc, #280]	; (8000f38 <main+0x294>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a47      	ldr	r2, [pc, #284]	; (8000f40 <main+0x29c>)
 8000e22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000e26:	4b44      	ldr	r3, [pc, #272]	; (8000f38 <main+0x294>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a46      	ldr	r2, [pc, #280]	; (8000f44 <main+0x2a0>)
 8000e2c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8000e30:	4b45      	ldr	r3, [pc, #276]	; (8000f48 <main+0x2a4>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4a45      	ldr	r2, [pc, #276]	; (8000f4c <main+0x2a8>)
 8000e36:	7812      	ldrb	r2, [r2, #0]
 8000e38:	4945      	ldr	r1, [pc, #276]	; (8000f50 <main+0x2ac>)
 8000e3a:	7809      	ldrb	r1, [r1, #0]
 8000e3c:	463e      	mov	r6, r7
 8000e3e:	9102      	str	r1, [sp, #8]
 8000e40:	9201      	str	r2, [sp, #4]
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	4633      	mov	r3, r6
 8000e46:	462a      	mov	r2, r5
 8000e48:	4621      	mov	r1, r4
 8000e4a:	f001 fe95 	bl	8002b78 <getStringFromValuesFloat>
          if (sending_over_uart ==  true){
 8000e4e:	4b41      	ldr	r3, [pc, #260]	; (8000f54 <main+0x2b0>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d02e      	beq.n	8000eb4 <main+0x210>
            HAL_UART_Transmit(&huart4, stringBufferValues, 33,100);
 8000e56:	4639      	mov	r1, r7
 8000e58:	2364      	movs	r3, #100	; 0x64
 8000e5a:	2221      	movs	r2, #33	; 0x21
 8000e5c:	482c      	ldr	r0, [pc, #176]	; (8000f10 <main+0x26c>)
 8000e5e:	f00d fe09 	bl	800ea74 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart5, stringBufferValues, 33,100);
 8000e62:	4639      	mov	r1, r7
 8000e64:	2364      	movs	r3, #100	; 0x64
 8000e66:	2221      	movs	r2, #33	; 0x21
 8000e68:	482b      	ldr	r0, [pc, #172]	; (8000f18 <main+0x274>)
 8000e6a:	f00d fe03 	bl	800ea74 <HAL_UART_Transmit>
 8000e6e:	e021      	b.n	8000eb4 <main+0x210>
          }
        }else{
          getStringFromValues(spi1ValuesStorage[spiCommonBufferCounter],spi2ValuesStorage[spiCommonBufferCounter],spi4ValuesStorage[spiCommonBufferCounter],stringBufferValues);
 8000e70:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <main+0x294>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a31      	ldr	r2, [pc, #196]	; (8000f3c <main+0x298>)
 8000e76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <main+0x294>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a30      	ldr	r2, [pc, #192]	; (8000f40 <main+0x29c>)
 8000e80:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000e84:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <main+0x294>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a2e      	ldr	r2, [pc, #184]	; (8000f44 <main+0x2a0>)
 8000e8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e8e:	463b      	mov	r3, r7
 8000e90:	f001 fe40 	bl	8002b14 <getStringFromValues>
          if (sending_over_uart == true){
 8000e94:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <main+0x2b0>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00b      	beq.n	8000eb4 <main+0x210>
            HAL_UART_Transmit(&huart4, stringBufferValues, 33,100);
 8000e9c:	4639      	mov	r1, r7
 8000e9e:	2364      	movs	r3, #100	; 0x64
 8000ea0:	2221      	movs	r2, #33	; 0x21
 8000ea2:	481b      	ldr	r0, [pc, #108]	; (8000f10 <main+0x26c>)
 8000ea4:	f00d fde6 	bl	800ea74 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart5, stringBufferValues, 33,100);
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	2364      	movs	r3, #100	; 0x64
 8000eac:	2221      	movs	r2, #33	; 0x21
 8000eae:	481a      	ldr	r0, [pc, #104]	; (8000f18 <main+0x274>)
 8000eb0:	f00d fde0 	bl	800ea74 <HAL_UART_Transmit>
          }
        }

        if((sdCardWriteEnable == true) && (sdCardInitError == false) && (sdCardOpenFileError == false)){
 8000eb4:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <main+0x2b4>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d056      	beq.n	8000f6a <main+0x2c6>
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <main+0x264>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	f083 0301 	eor.w	r3, r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d04f      	beq.n	8000f6a <main+0x2c6>
 8000eca:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <main+0x2b8>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	f083 0301 	eor.w	r3, r3, #1
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d048      	beq.n	8000f6a <main+0x2c6>
          sdCardWriteError = sd_card_write_to_opened_file(stringBufferValues);
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 faf4 	bl	80024c8 <sd_card_write_to_opened_file>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <main+0x2bc>)
 8000ee6:	701a      	strb	r2, [r3, #0]
          if (sdCardWriteError == true){
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <main+0x2bc>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d039      	beq.n	8000f64 <main+0x2c0>
            setColorLED(red);
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f001 f837 	bl	8001f64 <setColorLED>
 8000ef6:	e038      	b.n	8000f6a <main+0x2c6>
 8000ef8:	e000edf0 	.word	0xe000edf0
 8000efc:	e0001000 	.word	0xe0001000
 8000f00:	240089a8 	.word	0x240089a8
 8000f04:	24008974 	.word	0x24008974
 8000f08:	240089b9 	.word	0x240089b9
 8000f0c:	240089dc 	.word	0x240089dc
 8000f10:	240087dc 	.word	0x240087dc
 8000f14:	240089e0 	.word	0x240089e0
 8000f18:	2400886c 	.word	0x2400886c
 8000f1c:	24008790 	.word	0x24008790
 8000f20:	08017de0 	.word	0x08017de0
 8000f24:	24000000 	.word	0x24000000
 8000f28:	240089e3 	.word	0x240089e3
 8000f2c:	240089c0 	.word	0x240089c0
 8000f30:	240089c4 	.word	0x240089c4
 8000f34:	240089c8 	.word	0x240089c8
 8000f38:	240089cc 	.word	0x240089cc
 8000f3c:	c0000000 	.word	0xc0000000
 8000f40:	c09eb100 	.word	0xc09eb100
 8000f44:	c13d6200 	.word	0xc13d6200
 8000f48:	24000005 	.word	0x24000005
 8000f4c:	24000006 	.word	0x24000006
 8000f50:	24000007 	.word	0x24000007
 8000f54:	2400000a 	.word	0x2400000a
 8000f58:	240089b8 	.word	0x240089b8
 8000f5c:	240089bb 	.word	0x240089bb
 8000f60:	240089ba 	.word	0x240089ba
          }else{
            setColorLED(green);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f000 fffd 	bl	8001f64 <setColorLED>
          }
        }
      spiCommonBufferCounter++;
 8000f6a:	4b7d      	ldr	r3, [pc, #500]	; (8001160 <main+0x4bc>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	4a7b      	ldr	r2, [pc, #492]	; (8001160 <main+0x4bc>)
 8000f72:	6013      	str	r3, [r2, #0]
      }


      if (uartNewCommand == true){
 8000f74:	4b7b      	ldr	r3, [pc, #492]	; (8001164 <main+0x4c0>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f43f af37 	beq.w	8000dec <main+0x148>
        switch (uartCommand) {
 8000f7e:	4b7a      	ldr	r3, [pc, #488]	; (8001168 <main+0x4c4>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	3b30      	subs	r3, #48	; 0x30
 8000f84:	2b44      	cmp	r3, #68	; 0x44
 8000f86:	f200 80e5 	bhi.w	8001154 <main+0x4b0>
 8000f8a:	a201      	add	r2, pc, #4	; (adr r2, 8000f90 <main+0x2ec>)
 8000f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f90:	08001119 	.word	0x08001119
 8000f94:	08001125 	.word	0x08001125
 8000f98:	08001131 	.word	0x08001131
 8000f9c:	0800113d 	.word	0x0800113d
 8000fa0:	08001149 	.word	0x08001149
 8000fa4:	08001155 	.word	0x08001155
 8000fa8:	08001155 	.word	0x08001155
 8000fac:	08001155 	.word	0x08001155
 8000fb0:	08001155 	.word	0x08001155
 8000fb4:	08001155 	.word	0x08001155
 8000fb8:	08001155 	.word	0x08001155
 8000fbc:	08001155 	.word	0x08001155
 8000fc0:	08001155 	.word	0x08001155
 8000fc4:	08001155 	.word	0x08001155
 8000fc8:	08001155 	.word	0x08001155
 8000fcc:	0800110d 	.word	0x0800110d
 8000fd0:	08001155 	.word	0x08001155
 8000fd4:	08001155 	.word	0x08001155
 8000fd8:	08001155 	.word	0x08001155
 8000fdc:	08001155 	.word	0x08001155
 8000fe0:	08001155 	.word	0x08001155
 8000fe4:	08001155 	.word	0x08001155
 8000fe8:	08001155 	.word	0x08001155
 8000fec:	08001155 	.word	0x08001155
 8000ff0:	08001155 	.word	0x08001155
 8000ff4:	08001155 	.word	0x08001155
 8000ff8:	08001155 	.word	0x08001155
 8000ffc:	08001155 	.word	0x08001155
 8001000:	08001155 	.word	0x08001155
 8001004:	08001155 	.word	0x08001155
 8001008:	08001155 	.word	0x08001155
 800100c:	08001155 	.word	0x08001155
 8001010:	08001155 	.word	0x08001155
 8001014:	08001155 	.word	0x08001155
 8001018:	08001155 	.word	0x08001155
 800101c:	08001155 	.word	0x08001155
 8001020:	08001155 	.word	0x08001155
 8001024:	08001155 	.word	0x08001155
 8001028:	08001155 	.word	0x08001155
 800102c:	08001155 	.word	0x08001155
 8001030:	08001155 	.word	0x08001155
 8001034:	08001155 	.word	0x08001155
 8001038:	08001155 	.word	0x08001155
 800103c:	08001155 	.word	0x08001155
 8001040:	08001155 	.word	0x08001155
 8001044:	08001155 	.word	0x08001155
 8001048:	08001155 	.word	0x08001155
 800104c:	08001155 	.word	0x08001155
 8001050:	08001155 	.word	0x08001155
 8001054:	080010a5 	.word	0x080010a5
 8001058:	080010b1 	.word	0x080010b1
 800105c:	080010bd 	.word	0x080010bd
 8001060:	080010c9 	.word	0x080010c9
 8001064:	080010d5 	.word	0x080010d5
 8001068:	080010e1 	.word	0x080010e1
 800106c:	08001155 	.word	0x08001155
 8001070:	0800110d 	.word	0x0800110d
 8001074:	08001155 	.word	0x08001155
 8001078:	08001155 	.word	0x08001155
 800107c:	08001155 	.word	0x08001155
 8001080:	08001155 	.word	0x08001155
 8001084:	08001155 	.word	0x08001155
 8001088:	08001155 	.word	0x08001155
 800108c:	08001155 	.word	0x08001155
 8001090:	080010ed 	.word	0x080010ed
 8001094:	08001155 	.word	0x08001155
 8001098:	080010f5 	.word	0x080010f5
 800109c:	080010fd 	.word	0x080010fd
 80010a0:	08001105 	.word	0x08001105
          case 'a': // multiplexer X -> 0
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2120      	movs	r1, #32
 80010a8:	4830      	ldr	r0, [pc, #192]	; (800116c <main+0x4c8>)
 80010aa:	f006 f94d 	bl	8007348 <HAL_GPIO_WritePin>
            break;
 80010ae:	e052      	b.n	8001156 <main+0x4b2>
          case 'b': // multiplexer X -> 1
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2120      	movs	r1, #32
 80010b4:	482d      	ldr	r0, [pc, #180]	; (800116c <main+0x4c8>)
 80010b6:	f006 f947 	bl	8007348 <HAL_GPIO_WritePin>
            break;
 80010ba:	e04c      	b.n	8001156 <main+0x4b2>

          case 'c': // multiplexer Y -> 0
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2110      	movs	r1, #16
 80010c0:	482b      	ldr	r0, [pc, #172]	; (8001170 <main+0x4cc>)
 80010c2:	f006 f941 	bl	8007348 <HAL_GPIO_WritePin>
            break;
 80010c6:	e046      	b.n	8001156 <main+0x4b2>

          case 'd': // multiplexer Y -> 1
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2110      	movs	r1, #16
 80010cc:	4828      	ldr	r0, [pc, #160]	; (8001170 <main+0x4cc>)
 80010ce:	f006 f93b 	bl	8007348 <HAL_GPIO_WritePin>
            break;
 80010d2:	e040      	b.n	8001156 <main+0x4b2>

          case 'e': // multiplexer Z -> 0
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2101      	movs	r1, #1
 80010d8:	4826      	ldr	r0, [pc, #152]	; (8001174 <main+0x4d0>)
 80010da:	f006 f935 	bl	8007348 <HAL_GPIO_WritePin>
            break;
 80010de:	e03a      	b.n	8001156 <main+0x4b2>

          case 'f': // multiplexer Z -> 1
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2101      	movs	r1, #1
 80010e4:	4823      	ldr	r0, [pc, #140]	; (8001174 <main+0x4d0>)
 80010e6:	f006 f92f 	bl	8007348 <HAL_GPIO_WritePin>
            break;
 80010ea:	e034      	b.n	8001156 <main+0x4b2>

          case 'p':
            floating_point_values = true;
 80010ec:	4b22      	ldr	r3, [pc, #136]	; (8001178 <main+0x4d4>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
            break;
 80010f2:	e030      	b.n	8001156 <main+0x4b2>

          case 'r':
            floating_point_values = false;
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <main+0x4d4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
            break;
 80010fa:	e02c      	b.n	8001156 <main+0x4b2>

          case 's':
            sending_over_uart = true;
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <main+0x4d8>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
            break;
 8001102:	e028      	b.n	8001156 <main+0x4b2>

          case 't':
            sending_over_uart = false;
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <main+0x4d8>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
            break;
 800110a:	e024      	b.n	8001156 <main+0x4b2>

          case 'h':
          case '?':
            sending_over_uart = false;
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <main+0x4d8>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
            print_help_uart();
 8001112:	f001 f943 	bl	800239c <print_help_uart>
            break;
 8001116:	e01e      	b.n	8001156 <main+0x4b2>


         // Numbers reserved for SPS values
          case '0':
            //set SPS to 5
            setNewSPStoAllADCs(SPS_VALUE_5);
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <main+0x4dc>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f001 fde1 	bl	8002ce4 <setNewSPStoAllADCs>
            break;
 8001122:	e018      	b.n	8001156 <main+0x4b2>
          case '1':
            //set SPS to 20
            setNewSPStoAllADCs(SPS_VALUE_20);
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <main+0x4e0>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f001 fddb 	bl	8002ce4 <setNewSPStoAllADCs>
            break;
 800112e:	e012      	b.n	8001156 <main+0x4b2>
          case '2':
            //set SPS to 100
            setNewSPStoAllADCs(SPS_VALUE_100);
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <main+0x4e4>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f001 fdd5 	bl	8002ce4 <setNewSPStoAllADCs>
            break;
 800113a:	e00c      	b.n	8001156 <main+0x4b2>
          case '3':
            //set SPS to 500
            setNewSPStoAllADCs(SPS_VALUE_500);
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <main+0x4e8>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fdcf 	bl	8002ce4 <setNewSPStoAllADCs>
            break;
 8001146:	e006      	b.n	8001156 <main+0x4b2>
          case '4':
            //set SPS to 1000
            setNewSPStoAllADCs(SPS_VALUE_1000);
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <main+0x4ec>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f001 fdc9 	bl	8002ce4 <setNewSPStoAllADCs>
            break;
 8001152:	e000      	b.n	8001156 <main+0x4b2>
          default:
            break;
 8001154:	bf00      	nop
        }
        uartNewCommand = false;
 8001156:	4b03      	ldr	r3, [pc, #12]	; (8001164 <main+0x4c0>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
      if(spiCommonBufferCounter < findMin(spi1ValuesBufferCounter,spi2ValuesBufferCounter,spi4ValuesBufferCounter)){
 800115c:	e646      	b.n	8000dec <main+0x148>
 800115e:	bf00      	nop
 8001160:	240089cc 	.word	0x240089cc
 8001164:	240089e2 	.word	0x240089e2
 8001168:	240089e1 	.word	0x240089e1
 800116c:	58020000 	.word	0x58020000
 8001170:	58020800 	.word	0x58020800
 8001174:	58020400 	.word	0x58020400
 8001178:	240089e3 	.word	0x240089e3
 800117c:	2400000a 	.word	0x2400000a
 8001180:	24000000 	.word	0x24000000
 8001184:	24000001 	.word	0x24000001
 8001188:	24000002 	.word	0x24000002
 800118c:	24000003 	.word	0x24000003
 8001190:	24000004 	.word	0x24000004

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b09c      	sub	sp, #112	; 0x70
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	224c      	movs	r2, #76	; 0x4c
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f013 fcf8 	bl	8014b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2220      	movs	r2, #32
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f013 fcf2 	bl	8014b98 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80011b4:	4b33      	ldr	r3, [pc, #204]	; (8001284 <SystemClock_Config+0xf0>)
 80011b6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011be:	2002      	movs	r0, #2
 80011c0:	f006 f910 	bl	80073e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011c4:	2300      	movs	r3, #0
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <SystemClock_Config+0xf4>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a2e      	ldr	r2, [pc, #184]	; (8001288 <SystemClock_Config+0xf4>)
 80011ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <SystemClock_Config+0xf4>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011e0:	bf00      	nop
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <SystemClock_Config+0xf4>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011ee:	d1f8      	bne.n	80011e2 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <SystemClock_Config+0xf0>)
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	4a23      	ldr	r2, [pc, #140]	; (8001284 <SystemClock_Config+0xf0>)
 80011f6:	f023 0303 	bic.w	r3, r3, #3
 80011fa:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011fc:	2302      	movs	r3, #2
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001200:	2301      	movs	r3, #1
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001204:	2340      	movs	r3, #64	; 0x40
 8001206:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001208:	2302      	movs	r3, #2
 800120a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800120c:	2300      	movs	r3, #0
 800120e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001210:	2304      	movs	r3, #4
 8001212:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8001214:	2323      	movs	r3, #35	; 0x23
 8001216:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001218:	2302      	movs	r3, #2
 800121a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 800121c:	2301      	movs	r3, #1
 800121e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001220:	2302      	movs	r3, #2
 8001222:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001224:	230c      	movs	r3, #12
 8001226:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001228:	2300      	movs	r3, #0
 800122a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	4618      	mov	r0, r3
 8001236:	f006 f90f 	bl	8007458 <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001240:	f001 f8d0 	bl	80023e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001244:	233f      	movs	r3, #63	; 0x3f
 8001246:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001248:	2303      	movs	r3, #3
 800124a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001254:	2340      	movs	r3, #64	; 0x40
 8001256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001258:	2340      	movs	r3, #64	; 0x40
 800125a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800125c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001260:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001262:	2340      	movs	r3, #64	; 0x40
 8001264:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2107      	movs	r1, #7
 800126a:	4618      	mov	r0, r3
 800126c:	f006 fcfa 	bl	8007c64 <HAL_RCC_ClockConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001276:	f001 f8b5 	bl	80023e4 <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	3770      	adds	r7, #112	; 0x70
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	58024400 	.word	0x58024400
 8001288:	58024800 	.word	0x58024800

0800128c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0ae      	sub	sp, #184	; 0xb8
 8001290:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001292:	463b      	mov	r3, r7
 8001294:	22b8      	movs	r2, #184	; 0xb8
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f013 fc7d 	bl	8014b98 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <PeriphCommonClock_Config+0x60>)
 80012a0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80012a2:	2304      	movs	r3, #4
 80012a4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 8;
 80012a6:	2308      	movs	r3, #8
 80012a8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012ae:	2302      	movs	r3, #2
 80012b0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012b2:	2302      	movs	r3, #2
 80012b4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80012b6:	23c0      	movs	r3, #192	; 0xc0
 80012b8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 80012c2:	2302      	movs	r3, #2
 80012c4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80012c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80012cc:	2300      	movs	r3, #0
 80012ce:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	4618      	mov	r0, r3
 80012d4:	f007 f852 	bl	800837c <HAL_RCCEx_PeriphCLKConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80012de:	f001 f881 	bl	80023e4 <Error_Handler>
  }
}
 80012e2:	bf00      	nop
 80012e4:	37b8      	adds	r7, #184	; 0xb8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	81010000 	.word	0x81010000

080012f0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_SDMMC1_SD_Init+0x34>)
 80012f6:	4a0c      	ldr	r2, [pc, #48]	; (8001328 <MX_SDMMC1_SD_Init+0x38>)
 80012f8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <MX_SDMMC1_SD_Init+0x34>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <MX_SDMMC1_SD_Init+0x34>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <MX_SDMMC1_SD_Init+0x34>)
 8001308:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <MX_SDMMC1_SD_Init+0x34>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 64;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <MX_SDMMC1_SD_Init+0x34>)
 8001316:	2240      	movs	r2, #64	; 0x40
 8001318:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	24008214 	.word	0x24008214
 8001328:	52007000 	.word	0x52007000

0800132c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001332:	4a29      	ldr	r2, [pc, #164]	; (80013d8 <MX_SPI1_Init+0xac>)
 8001334:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001336:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001338:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800133c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001344:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001346:	2207      	movs	r2, #7
 8001348:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <MX_SPI1_Init+0xa8>)
 800134c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001350:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001358:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800135a:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <MX_SPI1_Init+0xa8>)
 800135c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001360:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001364:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001368:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_SPI1_Init+0xa8>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001378:	2200      	movs	r2, #0
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <MX_SPI1_Init+0xa8>)
 800137e:	2200      	movs	r2, #0
 8001380:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001384:	2200      	movs	r2, #0
 8001386:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <MX_SPI1_Init+0xa8>)
 800138a:	2200      	movs	r2, #0
 800138c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001390:	2200      	movs	r2, #0
 8001392:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_SPI1_Init+0xa8>)
 8001396:	2200      	movs	r2, #0
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_SPI1_Init+0xa8>)
 800139c:	2200      	movs	r2, #0
 800139e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_SPI1_Init+0xa8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_SPI1_Init+0xa8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_SPI1_Init+0xa8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_SPI1_Init+0xa8>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_SPI1_Init+0xa8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_SPI1_Init+0xa8>)
 80013c0:	f00a fd82 	bl	800bec8 <HAL_SPI_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80013ca:	f001 f80b 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	24008290 	.word	0x24008290
 80013d8:	40013000 	.word	0x40013000

080013dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <MX_SPI2_Init+0xa8>)
 80013e2:	4a29      	ldr	r2, [pc, #164]	; (8001488 <MX_SPI2_Init+0xac>)
 80013e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013e6:	4b27      	ldr	r3, [pc, #156]	; (8001484 <MX_SPI2_Init+0xa8>)
 80013e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80013ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <MX_SPI2_Init+0xa8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <MX_SPI2_Init+0xa8>)
 80013f6:	2207      	movs	r2, #7
 80013f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <MX_SPI2_Init+0xa8>)
 80013fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001400:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <MX_SPI2_Init+0xa8>)
 8001404:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001408:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800140a:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <MX_SPI2_Init+0xa8>)
 800140c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001410:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <MX_SPI2_Init+0xa8>)
 8001414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001418:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_SPI2_Init+0xa8>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_SPI2_Init+0xa8>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_SPI2_Init+0xa8>)
 8001428:	2200      	movs	r2, #0
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_SPI2_Init+0xa8>)
 800142e:	2200      	movs	r2, #0
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_SPI2_Init+0xa8>)
 8001434:	2200      	movs	r2, #0
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_SPI2_Init+0xa8>)
 800143a:	2200      	movs	r2, #0
 800143c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_SPI2_Init+0xa8>)
 8001440:	2200      	movs	r2, #0
 8001442:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_SPI2_Init+0xa8>)
 8001446:	2200      	movs	r2, #0
 8001448:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_SPI2_Init+0xa8>)
 800144c:	2200      	movs	r2, #0
 800144e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_SPI2_Init+0xa8>)
 8001452:	2200      	movs	r2, #0
 8001454:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_SPI2_Init+0xa8>)
 8001458:	2200      	movs	r2, #0
 800145a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_SPI2_Init+0xa8>)
 800145e:	2200      	movs	r2, #0
 8001460:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_SPI2_Init+0xa8>)
 8001464:	2200      	movs	r2, #0
 8001466:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_SPI2_Init+0xa8>)
 800146a:	2200      	movs	r2, #0
 800146c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_SPI2_Init+0xa8>)
 8001470:	f00a fd2a 	bl	800bec8 <HAL_SPI_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800147a:	f000 ffb3 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	24008318 	.word	0x24008318
 8001488:	40003800 	.word	0x40003800

0800148c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001490:	4b28      	ldr	r3, [pc, #160]	; (8001534 <MX_SPI4_Init+0xa8>)
 8001492:	4a29      	ldr	r2, [pc, #164]	; (8001538 <MX_SPI4_Init+0xac>)
 8001494:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <MX_SPI4_Init+0xa8>)
 8001498:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800149c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800149e:	4b25      	ldr	r3, [pc, #148]	; (8001534 <MX_SPI4_Init+0xa8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80014a4:	4b23      	ldr	r3, [pc, #140]	; (8001534 <MX_SPI4_Init+0xa8>)
 80014a6:	2207      	movs	r2, #7
 80014a8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014aa:	4b22      	ldr	r3, [pc, #136]	; (8001534 <MX_SPI4_Init+0xa8>)
 80014ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014b0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <MX_SPI4_Init+0xa8>)
 80014b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014b8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <MX_SPI4_Init+0xa8>)
 80014bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014c0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <MX_SPI4_Init+0xa8>)
 80014c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014c8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <MX_SPI4_Init+0xa8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <MX_SPI4_Init+0xa8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <MX_SPI4_Init+0xa8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <MX_SPI4_Init+0xa8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_SPI4_Init+0xa8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_SPI4_Init+0xa8>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_SPI4_Init+0xa8>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_SPI4_Init+0xa8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_SPI4_Init+0xa8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_SPI4_Init+0xa8>)
 8001502:	2200      	movs	r2, #0
 8001504:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_SPI4_Init+0xa8>)
 8001508:	2200      	movs	r2, #0
 800150a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_SPI4_Init+0xa8>)
 800150e:	2200      	movs	r2, #0
 8001510:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_SPI4_Init+0xa8>)
 8001514:	2200      	movs	r2, #0
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_SPI4_Init+0xa8>)
 800151a:	2200      	movs	r2, #0
 800151c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_SPI4_Init+0xa8>)
 8001520:	f00a fcd2 	bl	800bec8 <HAL_SPI_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 800152a:	f000 ff5b 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	240083a0 	.word	0x240083a0
 8001538:	40013400 	.word	0x40013400

0800153c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b09c      	sub	sp, #112	; 0x70
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001542:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800155c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
 800156c:	615a      	str	r2, [r3, #20]
 800156e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2234      	movs	r2, #52	; 0x34
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f013 fb0e 	bl	8014b98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800157c:	4b43      	ldr	r3, [pc, #268]	; (800168c <MX_TIM1_Init+0x150>)
 800157e:	4a44      	ldr	r2, [pc, #272]	; (8001690 <MX_TIM1_Init+0x154>)
 8001580:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001582:	4b42      	ldr	r3, [pc, #264]	; (800168c <MX_TIM1_Init+0x150>)
 8001584:	2200      	movs	r2, #0
 8001586:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001588:	4b40      	ldr	r3, [pc, #256]	; (800168c <MX_TIM1_Init+0x150>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800158e:	4b3f      	ldr	r3, [pc, #252]	; (800168c <MX_TIM1_Init+0x150>)
 8001590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001594:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001596:	4b3d      	ldr	r3, [pc, #244]	; (800168c <MX_TIM1_Init+0x150>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800159c:	4b3b      	ldr	r3, [pc, #236]	; (800168c <MX_TIM1_Init+0x150>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a2:	4b3a      	ldr	r3, [pc, #232]	; (800168c <MX_TIM1_Init+0x150>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015a8:	4838      	ldr	r0, [pc, #224]	; (800168c <MX_TIM1_Init+0x150>)
 80015aa:	f00b fce2 	bl	800cf72 <HAL_TIM_Base_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80015b4:	f000 ff16 	bl	80023e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015c2:	4619      	mov	r1, r3
 80015c4:	4831      	ldr	r0, [pc, #196]	; (800168c <MX_TIM1_Init+0x150>)
 80015c6:	f00c f935 	bl	800d834 <HAL_TIM_ConfigClockSource>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80015d0:	f000 ff08 	bl	80023e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015d4:	482d      	ldr	r0, [pc, #180]	; (800168c <MX_TIM1_Init+0x150>)
 80015d6:	f00b fd9b 	bl	800d110 <HAL_TIM_PWM_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80015e0:	f000 ff00 	bl	80023e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015f4:	4619      	mov	r1, r3
 80015f6:	4825      	ldr	r0, [pc, #148]	; (800168c <MX_TIM1_Init+0x150>)
 80015f8:	f00d f8a0 	bl	800e73c <HAL_TIMEx_MasterConfigSynchronization>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001602:	f000 feef 	bl	80023e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001606:	2360      	movs	r3, #96	; 0x60
 8001608:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800160e:	2300      	movs	r3, #0
 8001610:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001612:	2300      	movs	r3, #0
 8001614:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001622:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001626:	2200      	movs	r2, #0
 8001628:	4619      	mov	r1, r3
 800162a:	4818      	ldr	r0, [pc, #96]	; (800168c <MX_TIM1_Init+0x150>)
 800162c:	f00b ffee 	bl	800d60c <HAL_TIM_PWM_ConfigChannel>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001636:	f000 fed5 	bl	80023e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800164e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001652:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800165c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4619      	mov	r1, r3
 800166e:	4807      	ldr	r0, [pc, #28]	; (800168c <MX_TIM1_Init+0x150>)
 8001670:	f00d f8f2 	bl	800e858 <HAL_TIMEx_ConfigBreakDeadTime>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800167a:	f000 feb3 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800167e:	4803      	ldr	r0, [pc, #12]	; (800168c <MX_TIM1_Init+0x150>)
 8001680:	f001 ffde 	bl	8003640 <HAL_TIM_MspPostInit>

}
 8001684:	bf00      	nop
 8001686:	3770      	adds	r7, #112	; 0x70
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	240086f8 	.word	0x240086f8
 8001690:	40010000 	.word	0x40010000

08001694 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	; 0x30
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016b6:	463b      	mov	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016c2:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <MX_TIM2_Init+0xe0>)
 80016c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <MX_TIM2_Init+0xe0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b28      	ldr	r3, [pc, #160]	; (8001774 <MX_TIM2_Init+0xe0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016d6:	4b27      	ldr	r3, [pc, #156]	; (8001774 <MX_TIM2_Init+0xe0>)
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295
 80016dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b25      	ldr	r3, [pc, #148]	; (8001774 <MX_TIM2_Init+0xe0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <MX_TIM2_Init+0xe0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ea:	4822      	ldr	r0, [pc, #136]	; (8001774 <MX_TIM2_Init+0xe0>)
 80016ec:	f00b fc41 	bl	800cf72 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80016f6:	f000 fe75 	bl	80023e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80016fa:	481e      	ldr	r0, [pc, #120]	; (8001774 <MX_TIM2_Init+0xe0>)
 80016fc:	f00b fd69 	bl	800d1d2 <HAL_TIM_IC_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001706:	f000 fe6d 	bl	80023e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800170a:	2307      	movs	r3, #7
 800170c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	4816      	ldr	r0, [pc, #88]	; (8001774 <MX_TIM2_Init+0xe0>)
 800171a:	f00c f983 	bl	800da24 <HAL_TIM_SlaveConfigSynchro>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001724:	f000 fe5e 	bl	80023e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4619      	mov	r1, r3
 8001736:	480f      	ldr	r0, [pc, #60]	; (8001774 <MX_TIM2_Init+0xe0>)
 8001738:	f00d f800 	bl	800e73c <HAL_TIMEx_MasterConfigSynchronization>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001742:	f000 fe4f 	bl	80023e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800174a:	2301      	movs	r3, #1
 800174c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001756:	463b      	mov	r3, r7
 8001758:	2200      	movs	r2, #0
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_TIM2_Init+0xe0>)
 800175e:	f00b feb8 	bl	800d4d2 <HAL_TIM_IC_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001768:	f000 fe3c 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	3730      	adds	r7, #48	; 0x30
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	24008744 	.word	0x24008744

08001778 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800177c:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <MX_TIM16_Init+0x48>)
 800177e:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <MX_TIM16_Init+0x4c>)
 8001780:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 28000-1;
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_TIM16_Init+0x48>)
 8001784:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8001788:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <MX_TIM16_Init+0x48>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_TIM16_Init+0x48>)
 8001792:	f242 720f 	movw	r2, #9999	; 0x270f
 8001796:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_TIM16_Init+0x48>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_TIM16_Init+0x48>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_TIM16_Init+0x48>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_TIM16_Init+0x48>)
 80017ac:	f00b fbe1 	bl	800cf72 <HAL_TIM_Base_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80017b6:	f000 fe15 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	24008790 	.word	0x24008790
 80017c4:	40014400 	.word	0x40014400

080017c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <MX_UART4_Init+0x90>)
 80017ce:	4a23      	ldr	r2, [pc, #140]	; (800185c <MX_UART4_Init+0x94>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 3000000;
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <MX_UART4_Init+0x90>)
 80017d4:	4a22      	ldr	r2, [pc, #136]	; (8001860 <MX_UART4_Init+0x98>)
 80017d6:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <MX_UART4_Init+0x90>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <MX_UART4_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80017e4:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <MX_UART4_Init+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <MX_UART4_Init+0x90>)
 80017ec:	220c      	movs	r2, #12
 80017ee:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <MX_UART4_Init+0x90>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f6:	4b18      	ldr	r3, [pc, #96]	; (8001858 <MX_UART4_Init+0x90>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <MX_UART4_Init+0x90>)
 80017fe:	2200      	movs	r2, #0
 8001800:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <MX_UART4_Init+0x90>)
 8001804:	2200      	movs	r2, #0
 8001806:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <MX_UART4_Init+0x90>)
 800180a:	2200      	movs	r2, #0
 800180c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800180e:	4812      	ldr	r0, [pc, #72]	; (8001858 <MX_UART4_Init+0x90>)
 8001810:	f00d f8e0 	bl	800e9d4 <HAL_UART_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_UART4_Init+0x56>
  {
    Error_Handler();
 800181a:	f000 fde3 	bl	80023e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800181e:	2100      	movs	r1, #0
 8001820:	480d      	ldr	r0, [pc, #52]	; (8001858 <MX_UART4_Init+0x90>)
 8001822:	f00f fc78 	bl	8011116 <HAL_UARTEx_SetTxFifoThreshold>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 800182c:	f000 fdda 	bl	80023e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001830:	2100      	movs	r1, #0
 8001832:	4809      	ldr	r0, [pc, #36]	; (8001858 <MX_UART4_Init+0x90>)
 8001834:	f00f fcad 	bl	8011192 <HAL_UARTEx_SetRxFifoThreshold>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 800183e:	f000 fdd1 	bl	80023e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_UART4_Init+0x90>)
 8001844:	f00f fc2e 	bl	80110a4 <HAL_UARTEx_DisableFifoMode>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 800184e:	f000 fdc9 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	240087dc 	.word	0x240087dc
 800185c:	40004c00 	.word	0x40004c00
 8001860:	002dc6c0 	.word	0x002dc6c0

08001864 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001868:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <MX_UART5_Init+0x90>)
 800186a:	4a23      	ldr	r2, [pc, #140]	; (80018f8 <MX_UART5_Init+0x94>)
 800186c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 3000000;
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <MX_UART5_Init+0x90>)
 8001870:	4a22      	ldr	r2, [pc, #136]	; (80018fc <MX_UART5_Init+0x98>)
 8001872:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <MX_UART5_Init+0x90>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <MX_UART5_Init+0x90>)
 800187c:	2200      	movs	r2, #0
 800187e:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001880:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <MX_UART5_Init+0x90>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <MX_UART5_Init+0x90>)
 8001888:	220c      	movs	r2, #12
 800188a:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <MX_UART5_Init+0x90>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <MX_UART5_Init+0x90>)
 8001894:	2200      	movs	r2, #0
 8001896:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <MX_UART5_Init+0x90>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <MX_UART5_Init+0x90>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <MX_UART5_Init+0x90>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80018aa:	4812      	ldr	r0, [pc, #72]	; (80018f4 <MX_UART5_Init+0x90>)
 80018ac:	f00d f892 	bl	800e9d4 <HAL_UART_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_UART5_Init+0x56>
  {
    Error_Handler();
 80018b6:	f000 fd95 	bl	80023e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ba:	2100      	movs	r1, #0
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <MX_UART5_Init+0x90>)
 80018be:	f00f fc2a 	bl	8011116 <HAL_UARTEx_SetTxFifoThreshold>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_UART5_Init+0x68>
  {
    Error_Handler();
 80018c8:	f000 fd8c 	bl	80023e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018cc:	2100      	movs	r1, #0
 80018ce:	4809      	ldr	r0, [pc, #36]	; (80018f4 <MX_UART5_Init+0x90>)
 80018d0:	f00f fc5f 	bl	8011192 <HAL_UARTEx_SetRxFifoThreshold>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_UART5_Init+0x7a>
  {
    Error_Handler();
 80018da:	f000 fd83 	bl	80023e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_UART5_Init+0x90>)
 80018e0:	f00f fbe0 	bl	80110a4 <HAL_UARTEx_DisableFifoMode>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_UART5_Init+0x8a>
  {
    Error_Handler();
 80018ea:	f000 fd7b 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2400886c 	.word	0x2400886c
 80018f8:	40005000 	.word	0x40005000
 80018fc:	002dc6c0 	.word	0x002dc6c0

08001900 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001906:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <MX_DMA_Init+0xbc>)
 8001908:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800190c:	4a2b      	ldr	r2, [pc, #172]	; (80019bc <MX_DMA_Init+0xbc>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001916:	4b29      	ldr	r3, [pc, #164]	; (80019bc <MX_DMA_Init+0xbc>)
 8001918:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001924:	4b25      	ldr	r3, [pc, #148]	; (80019bc <MX_DMA_Init+0xbc>)
 8001926:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800192a:	4a24      	ldr	r2, [pc, #144]	; (80019bc <MX_DMA_Init+0xbc>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <MX_DMA_Init+0xbc>)
 8001936:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	200b      	movs	r0, #11
 8001948:	f002 fc1f 	bl	800418a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800194c:	200b      	movs	r0, #11
 800194e:	f002 fc36 	bl	80041be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	200c      	movs	r0, #12
 8001958:	f002 fc17 	bl	800418a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800195c:	200c      	movs	r0, #12
 800195e:	f002 fc2e 	bl	80041be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	200d      	movs	r0, #13
 8001968:	f002 fc0f 	bl	800418a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800196c:	200d      	movs	r0, #13
 800196e:	f002 fc26 	bl	80041be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	200e      	movs	r0, #14
 8001978:	f002 fc07 	bl	800418a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800197c:	200e      	movs	r0, #14
 800197e:	f002 fc1e 	bl	80041be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	200f      	movs	r0, #15
 8001988:	f002 fbff 	bl	800418a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800198c:	200f      	movs	r0, #15
 800198e:	f002 fc16 	bl	80041be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	202f      	movs	r0, #47	; 0x2f
 8001998:	f002 fbf7 	bl	800418a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800199c:	202f      	movs	r0, #47	; 0x2f
 800199e:	f002 fc0e 	bl	80041be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	2038      	movs	r0, #56	; 0x38
 80019a8:	f002 fbef 	bl	800418a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80019ac:	2038      	movs	r0, #56	; 0x38
 80019ae:	f002 fc06 	bl	80041be <HAL_NVIC_EnableIRQ>

}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	58024400 	.word	0x58024400

080019c0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
 80019d4:	615a      	str	r2, [r3, #20]
 80019d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <MX_FMC_Init+0x9c>)
 80019da:	4a21      	ldr	r2, [pc, #132]	; (8001a60 <MX_FMC_Init+0xa0>)
 80019dc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <MX_FMC_Init+0x9c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <MX_FMC_Init+0x9c>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <MX_FMC_Init+0x9c>)
 80019ec:	2208      	movs	r2, #8
 80019ee:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_FMC_Init+0x9c>)
 80019f2:	2210      	movs	r2, #16
 80019f4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <MX_FMC_Init+0x9c>)
 80019f8:	2240      	movs	r2, #64	; 0x40
 80019fa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <MX_FMC_Init+0x9c>)
 80019fe:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001a02:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <MX_FMC_Init+0x9c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <MX_FMC_Init+0x9c>)
 8001a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a10:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <MX_FMC_Init+0x9c>)
 8001a14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <MX_FMC_Init+0x9c>)
 8001a1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001a22:	2302      	movs	r3, #2
 8001a24:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 8001a26:	2309      	movs	r3, #9
 8001a28:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 8001a2e:	2309      	movs	r3, #9
 8001a30:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
 8001a32:	2304      	movs	r3, #4
 8001a34:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 8001a36:	2303      	movs	r3, #3
 8001a38:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <MX_FMC_Init+0x9c>)
 8001a44:	f00a f9a6 	bl	800bd94 <HAL_SDRAM_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8001a4e:	f000 fcc9 	bl	80023e4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001a52:	bf00      	nop
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	24008974 	.word	0x24008974
 8001a60:	52004140 	.word	0x52004140

08001a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08e      	sub	sp, #56	; 0x38
 8001a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a7a:	4b7d      	ldr	r3, [pc, #500]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001a7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a80:	4a7b      	ldr	r2, [pc, #492]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001a82:	f043 0310 	orr.w	r3, r3, #16
 8001a86:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a8a:	4b79      	ldr	r3, [pc, #484]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001a8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	623b      	str	r3, [r7, #32]
 8001a96:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a98:	4b75      	ldr	r3, [pc, #468]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001a9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a9e:	4a74      	ldr	r2, [pc, #464]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001aa8:	4b71      	ldr	r3, [pc, #452]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001aaa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	61fb      	str	r3, [r7, #28]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ab6:	4b6e      	ldr	r3, [pc, #440]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001ab8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001abc:	4a6c      	ldr	r2, [pc, #432]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001abe:	f043 0320 	orr.w	r3, r3, #32
 8001ac2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ac6:	4b6a      	ldr	r3, [pc, #424]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001ac8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad4:	4b66      	ldr	r3, [pc, #408]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001ad6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ada:	4a65      	ldr	r2, [pc, #404]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ae4:	4b62      	ldr	r3, [pc, #392]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001ae6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	4b5f      	ldr	r3, [pc, #380]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001af4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001af8:	4a5d      	ldr	r2, [pc, #372]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b02:	4b5b      	ldr	r3, [pc, #364]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001b04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b10:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001b12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b16:	4a56      	ldr	r2, [pc, #344]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b20:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001b22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b2e:	4b50      	ldr	r3, [pc, #320]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001b30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b34:	4a4e      	ldr	r2, [pc, #312]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b3a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b3e:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001b40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4c:	4b48      	ldr	r3, [pc, #288]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001b4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b52:	4a47      	ldr	r2, [pc, #284]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001b54:	f043 0308 	orr.w	r3, r3, #8
 8001b58:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b5c:	4b44      	ldr	r3, [pc, #272]	; (8001c70 <MX_GPIO_Init+0x20c>)
 8001b5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2110      	movs	r1, #16
 8001b6e:	4841      	ldr	r0, [pc, #260]	; (8001c74 <MX_GPIO_Init+0x210>)
 8001b70:	f005 fbea 	bl	8007348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MULT_IN_X_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b74:	2200      	movs	r2, #0
 8001b76:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 8001b7a:	483f      	ldr	r0, [pc, #252]	; (8001c78 <MX_GPIO_Init+0x214>)
 8001b7c:	f005 fbe4 	bl	8007348 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MULT_IN_Y_GPIO_Port, MULT_IN_Y_Pin, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2110      	movs	r1, #16
 8001b84:	483d      	ldr	r0, [pc, #244]	; (8001c7c <MX_GPIO_Init+0x218>)
 8001b86:	f005 fbdf 	bl	8007348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MULT_IN_Z_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f241 0101 	movw	r1, #4097	; 0x1001
 8001b90:	483b      	ldr	r0, [pc, #236]	; (8001c80 <MX_GPIO_Init+0x21c>)
 8001b92:	f005 fbd9 	bl	8007348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10|USB_C_Reset_Pin|USB_C_Alert_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 8001b9c:	4839      	ldr	r0, [pc, #228]	; (8001c84 <MX_GPIO_Init+0x220>)
 8001b9e:	f005 fbd3 	bl	8007348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ba2:	2310      	movs	r3, #16
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	482e      	ldr	r0, [pc, #184]	; (8001c74 <MX_GPIO_Init+0x210>)
 8001bba:	f005 fa15 	bl	8006fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001bbe:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bc4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	482c      	ldr	r0, [pc, #176]	; (8001c88 <MX_GPIO_Init+0x224>)
 8001bd6:	f005 fa07 	bl	8006fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MULT_IN_X_Pin PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = MULT_IN_X_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001bda:	f44f 53f1 	mov.w	r3, #7712	; 0x1e20
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4821      	ldr	r0, [pc, #132]	; (8001c78 <MX_GPIO_Init+0x214>)
 8001bf4:	f005 f9f8 	bl	8006fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MULT_IN_Y_Pin */
  GPIO_InitStruct.Pin = MULT_IN_Y_Pin;
 8001bf8:	2310      	movs	r3, #16
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MULT_IN_Y_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	481b      	ldr	r0, [pc, #108]	; (8001c7c <MX_GPIO_Init+0x218>)
 8001c10:	f005 f9ea 	bl	8006fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MULT_IN_Z_Pin PB12 */
  GPIO_InitStruct.Pin = MULT_IN_Z_Pin|GPIO_PIN_12;
 8001c14:	f241 0301 	movw	r3, #4097	; 0x1001
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4814      	ldr	r0, [pc, #80]	; (8001c80 <MX_GPIO_Init+0x21c>)
 8001c2e:	f005 f9db 	bl	8006fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c42:	4619      	mov	r1, r3
 8001c44:	4811      	ldr	r0, [pc, #68]	; (8001c8c <MX_GPIO_Init+0x228>)
 8001c46:	f005 f9cf 	bl	8006fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 USB_C_Reset_Pin USB_C_Alert_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|USB_C_Reset_Pin|USB_C_Alert_Pin;
 8001c4a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c50:	2301      	movs	r3, #1
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c60:	4619      	mov	r1, r3
 8001c62:	4808      	ldr	r0, [pc, #32]	; (8001c84 <MX_GPIO_Init+0x220>)
 8001c64:	f005 f9c0 	bl	8006fe8 <HAL_GPIO_Init>

}
 8001c68:	bf00      	nop
 8001c6a:	3738      	adds	r7, #56	; 0x38
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	58024400 	.word	0x58024400
 8001c74:	58021000 	.word	0x58021000
 8001c78:	58020000 	.word	0x58020000
 8001c7c:	58020800 	.word	0x58020800
 8001c80:	58020400 	.word	0x58020400
 8001c84:	58021800 	.word	0x58021800
 8001c88:	58021400 	.word	0x58021400
 8001c8c:	58020c00 	.word	0x58020c00

08001c90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// TODO:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]

  //SPI1 MISO
  if (GPIO_Pin == GPIO_PIN_6){
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	2b40      	cmp	r3, #64	; 0x40
 8001c9e:	d109      	bne.n	8001cb4 <HAL_GPIO_EXTI_Callback+0x24>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001ca0:	2017      	movs	r0, #23
 8001ca2:	f002 fa9a 	bl	80041da <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi1, pTxData, spi1Buffer, 4);
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	4a27      	ldr	r2, [pc, #156]	; (8001d48 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001caa:	4928      	ldr	r1, [pc, #160]	; (8001d4c <HAL_GPIO_EXTI_Callback+0xbc>)
 8001cac:	4828      	ldr	r0, [pc, #160]	; (8001d50 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001cae:	f00a fc03 	bl	800c4b8 <HAL_SPI_TransmitReceive_DMA>
  }
  else if (GPIO_Pin == GPIO_PIN_9){
    __NOP();
    //sendToSDcard = true;
  }
}
 8001cb2:	e044      	b.n	8001d3e <HAL_GPIO_EXTI_Callback+0xae>
  else if (GPIO_Pin == GPIO_PIN_14){
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cba:	d109      	bne.n	8001cd0 <HAL_GPIO_EXTI_Callback+0x40>
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001cbc:	2028      	movs	r0, #40	; 0x28
 8001cbe:	f002 fa8c 	bl	80041da <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi2, pTxData, spi2Buffer, 4);
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001cc6:	4921      	ldr	r1, [pc, #132]	; (8001d4c <HAL_GPIO_EXTI_Callback+0xbc>)
 8001cc8:	4823      	ldr	r0, [pc, #140]	; (8001d58 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001cca:	f00a fbf5 	bl	800c4b8 <HAL_SPI_TransmitReceive_DMA>
}
 8001cce:	e036      	b.n	8001d3e <HAL_GPIO_EXTI_Callback+0xae>
  else if (GPIO_Pin == GPIO_PIN_5){
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	2b20      	cmp	r3, #32
 8001cd4:	d109      	bne.n	8001cea <HAL_GPIO_EXTI_Callback+0x5a>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001cd6:	2017      	movs	r0, #23
 8001cd8:	f002 fa7f 	bl	80041da <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi4, pTxData, spi4Buffer, 4);
 8001cdc:	2304      	movs	r3, #4
 8001cde:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <HAL_GPIO_EXTI_Callback+0xcc>)
 8001ce0:	491a      	ldr	r1, [pc, #104]	; (8001d4c <HAL_GPIO_EXTI_Callback+0xbc>)
 8001ce2:	481f      	ldr	r0, [pc, #124]	; (8001d60 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001ce4:	f00a fbe8 	bl	800c4b8 <HAL_SPI_TransmitReceive_DMA>
}
 8001ce8:	e029      	b.n	8001d3e <HAL_GPIO_EXTI_Callback+0xae>
  else if (GPIO_Pin == GPIO_PIN_7){
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	2b80      	cmp	r3, #128	; 0x80
 8001cee:	d121      	bne.n	8001d34 <HAL_GPIO_EXTI_Callback+0xa4>
    if(sdCardWriteEnable == false){
 8001cf0:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	f083 0301 	eor.w	r3, r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d011      	beq.n	8001d22 <HAL_GPIO_EXTI_Callback+0x92>
      sdCardOpenFileError = sd_card_open_file();
 8001cfe:	f000 fb97 	bl	8002430 <sd_card_open_file>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001d08:	701a      	strb	r2, [r3, #0]
      if (sdCardOpenFileError == true){
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_EXTI_Callback+0x8a>
        setColorLED(red);
 8001d12:	2000      	movs	r0, #0
 8001d14:	f000 f926 	bl	8001f64 <setColorLED>
}
 8001d18:	e011      	b.n	8001d3e <HAL_GPIO_EXTI_Callback+0xae>
        sdCardWriteEnable = true;
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]
}
 8001d20:	e00d      	b.n	8001d3e <HAL_GPIO_EXTI_Callback+0xae>
      sdCardWriteEnable = false;
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
      sd_card_close_file();
 8001d28:	f000 fbf6 	bl	8002518 <sd_card_close_file>
      setColorLED(blue);
 8001d2c:	2002      	movs	r0, #2
 8001d2e:	f000 f919 	bl	8001f64 <setColorLED>
}
 8001d32:	e004      	b.n	8001d3e <HAL_GPIO_EXTI_Callback+0xae>
  else if (GPIO_Pin == GPIO_PIN_9){
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d3a:	d100      	bne.n	8001d3e <HAL_GPIO_EXTI_Callback+0xae>
    __NOP();
 8001d3c:	bf00      	nop
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	240089d0 	.word	0x240089d0
 8001d4c:	240089bc 	.word	0x240089bc
 8001d50:	24008290 	.word	0x24008290
 8001d54:	240089d4 	.word	0x240089d4
 8001d58:	24008318 	.word	0x24008318
 8001d5c:	240089d8 	.word	0x240089d8
 8001d60:	240083a0 	.word	0x240083a0
 8001d64:	240089b8 	.word	0x240089b8
 8001d68:	240089bb 	.word	0x240089bb

08001d6c <HAL_SPI_TxRxCpltCallback>:

//FIXME: changed here from TxRx to Rx
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if (hspi == &hspi1){
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a3b      	ldr	r2, [pc, #236]	; (8001e64 <HAL_SPI_TxRxCpltCallback+0xf8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d121      	bne.n	8001dc0 <HAL_SPI_TxRxCpltCallback+0x54>
    spi1ValuesStorage[spi1ValuesBufferCounter] = (uint32_t)spi1Buffer[3] | ((uint32_t)spi1Buffer[2] << 8) | ((uint32_t)spi1Buffer[1] << 16) | ((uint32_t)spi1Buffer[0] << 24);;
 8001d7c:	4b3a      	ldr	r3, [pc, #232]	; (8001e68 <HAL_SPI_TxRxCpltCallback+0xfc>)
 8001d7e:	78db      	ldrb	r3, [r3, #3]
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <HAL_SPI_TxRxCpltCallback+0xfc>)
 8001d84:	789b      	ldrb	r3, [r3, #2]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	4b37      	ldr	r3, [pc, #220]	; (8001e68 <HAL_SPI_TxRxCpltCallback+0xfc>)
 8001d8c:	785b      	ldrb	r3, [r3, #1]
 8001d8e:	041b      	lsls	r3, r3, #16
 8001d90:	ea42 0103 	orr.w	r1, r2, r3
 8001d94:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <HAL_SPI_TxRxCpltCallback+0xfc>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	061a      	lsls	r2, r3, #24
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <HAL_SPI_TxRxCpltCallback+0x100>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	4933      	ldr	r1, [pc, #204]	; (8001e70 <HAL_SPI_TxRxCpltCallback+0x104>)
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8001da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001daa:	2240      	movs	r2, #64	; 0x40
 8001dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001db0:	2017      	movs	r0, #23
 8001db2:	f002 fa04 	bl	80041be <HAL_NVIC_EnableIRQ>
    spi1ValuesBufferCounter++;
 8001db6:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <HAL_SPI_TxRxCpltCallback+0x100>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	4a2b      	ldr	r2, [pc, #172]	; (8001e6c <HAL_SPI_TxRxCpltCallback+0x100>)
 8001dbe:	6013      	str	r3, [r2, #0]
  }

  if (hspi == &hspi2){
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a2c      	ldr	r2, [pc, #176]	; (8001e74 <HAL_SPI_TxRxCpltCallback+0x108>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d122      	bne.n	8001e0e <HAL_SPI_TxRxCpltCallback+0xa2>
    spi2ValuesStorage[spi2ValuesBufferCounter] = (uint32_t)spi2Buffer[3] | ((uint32_t)spi2Buffer[2] << 8) | ((uint32_t)spi2Buffer[1] << 16) | ((uint32_t)spi2Buffer[0] << 24);
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <HAL_SPI_TxRxCpltCallback+0x10c>)
 8001dca:	78db      	ldrb	r3, [r3, #3]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <HAL_SPI_TxRxCpltCallback+0x10c>)
 8001dd0:	789b      	ldrb	r3, [r3, #2]
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <HAL_SPI_TxRxCpltCallback+0x10c>)
 8001dd8:	785b      	ldrb	r3, [r3, #1]
 8001dda:	041b      	lsls	r3, r3, #16
 8001ddc:	ea42 0103 	orr.w	r1, r2, r3
 8001de0:	4b25      	ldr	r3, [pc, #148]	; (8001e78 <HAL_SPI_TxRxCpltCallback+0x10c>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	061a      	lsls	r2, r3, #24
 8001de6:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <HAL_SPI_TxRxCpltCallback+0x110>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	4924      	ldr	r1, [pc, #144]	; (8001e80 <HAL_SPI_TxRxCpltCallback+0x114>)
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8001df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dfe:	2028      	movs	r0, #40	; 0x28
 8001e00:	f002 f9dd 	bl	80041be <HAL_NVIC_EnableIRQ>
    spi2ValuesBufferCounter++;
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_SPI_TxRxCpltCallback+0x110>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <HAL_SPI_TxRxCpltCallback+0x110>)
 8001e0c:	6013      	str	r3, [r2, #0]
  }

  if (hspi == &hspi4){
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <HAL_SPI_TxRxCpltCallback+0x118>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d121      	bne.n	8001e5a <HAL_SPI_TxRxCpltCallback+0xee>
    spi4ValuesStorage[spi4ValuesBufferCounter] = (uint32_t)spi4Buffer[3] | ((uint32_t)spi4Buffer[2] << 8) | ((uint32_t)spi4Buffer[1] << 16) | ((uint32_t)spi4Buffer[0] << 24);
 8001e16:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <HAL_SPI_TxRxCpltCallback+0x11c>)
 8001e18:	78db      	ldrb	r3, [r3, #3]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <HAL_SPI_TxRxCpltCallback+0x11c>)
 8001e1e:	789b      	ldrb	r3, [r3, #2]
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	431a      	orrs	r2, r3
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_SPI_TxRxCpltCallback+0x11c>)
 8001e26:	785b      	ldrb	r3, [r3, #1]
 8001e28:	041b      	lsls	r3, r3, #16
 8001e2a:	ea42 0103 	orr.w	r1, r2, r3
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <HAL_SPI_TxRxCpltCallback+0x11c>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	061a      	lsls	r2, r3, #24
 8001e34:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <HAL_SPI_TxRxCpltCallback+0x120>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	4915      	ldr	r1, [pc, #84]	; (8001e90 <HAL_SPI_TxRxCpltCallback+0x124>)
 8001e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e44:	2220      	movs	r2, #32
 8001e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e4a:	2017      	movs	r0, #23
 8001e4c:	f002 f9b7 	bl	80041be <HAL_NVIC_EnableIRQ>
    spi4ValuesBufferCounter++;
 8001e50:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_SPI_TxRxCpltCallback+0x120>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <HAL_SPI_TxRxCpltCallback+0x120>)
 8001e58:	6013      	str	r3, [r2, #0]
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	24008290 	.word	0x24008290
 8001e68:	240089d0 	.word	0x240089d0
 8001e6c:	240089c0 	.word	0x240089c0
 8001e70:	c0000000 	.word	0xc0000000
 8001e74:	24008318 	.word	0x24008318
 8001e78:	240089d4 	.word	0x240089d4
 8001e7c:	240089c4 	.word	0x240089c4
 8001e80:	c09eb100 	.word	0xc09eb100
 8001e84:	240083a0 	.word	0x240083a0
 8001e88:	240089d8 	.word	0x240089d8
 8001e8c:	240089c8 	.word	0x240089c8
 8001e90:	c13d6200 	.word	0xc13d6200

08001e94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if (huart == &huart4){
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <HAL_UART_RxCpltCallback+0x54>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d10c      	bne.n	8001ebe <HAL_UART_RxCpltCallback+0x2a>
    HAL_UART_Receive_IT (&huart4, rxUart4Buffer, 1);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4911      	ldr	r1, [pc, #68]	; (8001eec <HAL_UART_RxCpltCallback+0x58>)
 8001ea8:	480f      	ldr	r0, [pc, #60]	; (8001ee8 <HAL_UART_RxCpltCallback+0x54>)
 8001eaa:	f00c fe79 	bl	800eba0 <HAL_UART_Receive_IT>
    uartCommand = rxUart4Buffer[0];
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_UART_RxCpltCallback+0x58>)
 8001eb0:	781a      	ldrb	r2, [r3, #0]
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <HAL_UART_RxCpltCallback+0x5c>)
 8001eb4:	701a      	strb	r2, [r3, #0]
    uartNewCommand = true;
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HAL_UART_RxCpltCallback+0x60>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
  else if (huart == &huart5){
      HAL_UART_Receive_IT (&huart5, rxUart5Buffer, 1);
      uartCommand = rxUart5Buffer[0];
      uartNewCommand = true;
  }
}
 8001ebc:	e00f      	b.n	8001ede <HAL_UART_RxCpltCallback+0x4a>
  else if (huart == &huart5){
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <HAL_UART_RxCpltCallback+0x64>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d10b      	bne.n	8001ede <HAL_UART_RxCpltCallback+0x4a>
      HAL_UART_Receive_IT (&huart5, rxUart5Buffer, 1);
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	490c      	ldr	r1, [pc, #48]	; (8001efc <HAL_UART_RxCpltCallback+0x68>)
 8001eca:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <HAL_UART_RxCpltCallback+0x64>)
 8001ecc:	f00c fe68 	bl	800eba0 <HAL_UART_Receive_IT>
      uartCommand = rxUart5Buffer[0];
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_UART_RxCpltCallback+0x68>)
 8001ed2:	781a      	ldrb	r2, [r3, #0]
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_UART_RxCpltCallback+0x5c>)
 8001ed6:	701a      	strb	r2, [r3, #0]
      uartNewCommand = true;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_UART_RxCpltCallback+0x60>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	240087dc 	.word	0x240087dc
 8001eec:	240089dc 	.word	0x240089dc
 8001ef0:	240089e1 	.word	0x240089e1
 8001ef4:	240089e2 	.word	0x240089e2
 8001ef8:	2400886c 	.word	0x2400886c
 8001efc:	240089e0 	.word	0x240089e0

08001f00 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if(htim == &htim16){
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d104      	bne.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8001f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001f16:	f005 fa30 	bl	800737a <HAL_GPIO_TogglePin>
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	24008790 	.word	0x24008790
 8001f28:	58020000 	.word	0x58020000

08001f2c <findMin>:

uint32_t findMin(uint32_t a, uint32_t b, uint32_t c) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
    uint32_t min = a;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	617b      	str	r3, [r7, #20]
    if (b < min) {
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d201      	bcs.n	8001f48 <findMin+0x1c>
        min = b;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	617b      	str	r3, [r7, #20]
    }
    if (c < min) {
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d201      	bcs.n	8001f54 <findMin+0x28>
        min = c;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	617b      	str	r3, [r7, #20]
    }
    return min;
 8001f54:	697b      	ldr	r3, [r7, #20]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	371c      	adds	r7, #28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <setColorLED>:

void setColorLED(colorLED color){
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  if(color == red){
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d112      	bne.n	8001f9a <setColorLED+0x36>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001f74:	2201      	movs	r2, #1
 8001f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f7a:	481f      	ldr	r0, [pc, #124]	; (8001ff8 <setColorLED+0x94>)
 8001f7c:	f005 f9e4 	bl	8007348 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f86:	481c      	ldr	r0, [pc, #112]	; (8001ff8 <setColorLED+0x94>)
 8001f88:	f005 f9de 	bl	8007348 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f92:	4819      	ldr	r0, [pc, #100]	; (8001ff8 <setColorLED+0x94>)
 8001f94:	f005 f9d8 	bl	8007348 <HAL_GPIO_WritePin>
  } else if (color == green){
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
  }
}
 8001f98:	e02a      	b.n	8001ff0 <setColorLED+0x8c>
  }else if(color == blue){
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d112      	bne.n	8001fc6 <setColorLED+0x62>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fa6:	4814      	ldr	r0, [pc, #80]	; (8001ff8 <setColorLED+0x94>)
 8001fa8:	f005 f9ce 	bl	8007348 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fac:	2201      	movs	r2, #1
 8001fae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb2:	4811      	ldr	r0, [pc, #68]	; (8001ff8 <setColorLED+0x94>)
 8001fb4:	f005 f9c8 	bl	8007348 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fbe:	480e      	ldr	r0, [pc, #56]	; (8001ff8 <setColorLED+0x94>)
 8001fc0:	f005 f9c2 	bl	8007348 <HAL_GPIO_WritePin>
}
 8001fc4:	e014      	b.n	8001ff0 <setColorLED+0x8c>
  } else if (color == green){
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d111      	bne.n	8001ff0 <setColorLED+0x8c>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd2:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <setColorLED+0x94>)
 8001fd4:	f005 f9b8 	bl	8007348 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fde:	4806      	ldr	r0, [pc, #24]	; (8001ff8 <setColorLED+0x94>)
 8001fe0:	f005 f9b2 	bl	8007348 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fea:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <setColorLED+0x94>)
 8001fec:	f005 f9ac 	bl	8007348 <HAL_GPIO_WritePin>
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	58020000 	.word	0x58020000

08001ffc <readConfigFile>:

void readConfigFile(const char* filename) {
 8001ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002000:	b088      	sub	sp, #32
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	466b      	mov	r3, sp
 8002008:	469a      	mov	sl, r3
  uint8_t bufferSize =128;
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	77fb      	strb	r3, [r7, #31]
  FRESULT result;
  char buffer[bufferSize];
 800200e:	7ffe      	ldrb	r6, [r7, #31]
 8002010:	4633      	mov	r3, r6
 8002012:	3b01      	subs	r3, #1
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	b2f3      	uxtb	r3, r6
 8002018:	2200      	movs	r2, #0
 800201a:	4698      	mov	r8, r3
 800201c:	4691      	mov	r9, r2
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800202a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800202e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002032:	b2f3      	uxtb	r3, r6
 8002034:	2200      	movs	r2, #0
 8002036:	461c      	mov	r4, r3
 8002038:	4615      	mov	r5, r2
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	00eb      	lsls	r3, r5, #3
 8002044:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002048:	00e2      	lsls	r2, r4, #3
 800204a:	4633      	mov	r3, r6
 800204c:	3307      	adds	r3, #7
 800204e:	08db      	lsrs	r3, r3, #3
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	ebad 0d03 	sub.w	sp, sp, r3
 8002056:	466b      	mov	r3, sp
 8002058:	3300      	adds	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  // Open the file
  result = f_open(&SDFile, filename, FA_READ);
 800205c:	2201      	movs	r2, #1
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4870      	ldr	r0, [pc, #448]	; (8002224 <readConfigFile+0x228>)
 8002062:	f011 ffa7 	bl	8013fb4 <f_open>
 8002066:	4603      	mov	r3, r0
 8002068:	74fb      	strb	r3, [r7, #19]
  if (result != FR_OK) {
      // Handle file open error
  }

  // Read and parse each line
  while (f_gets(buffer, sizeof(buffer), &SDFile) != NULL) {
 800206a:	e0c7      	b.n	80021fc <readConfigFile+0x200>
      // Split the line into key and value
      char* key = strtok(buffer, ": ");
 800206c:	496e      	ldr	r1, [pc, #440]	; (8002228 <readConfigFile+0x22c>)
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f013 fb98 	bl	80157a4 <strtok>
 8002074:	60f8      	str	r0, [r7, #12]
      char* value = strtok(NULL, ": ");
 8002076:	496c      	ldr	r1, [pc, #432]	; (8002228 <readConfigFile+0x22c>)
 8002078:	2000      	movs	r0, #0
 800207a:	f013 fb93 	bl	80157a4 <strtok>
 800207e:	60b8      	str	r0, [r7, #8]

      // Handle each key-value pair
      if (strcmp(key, "range_x") == 0) {
 8002080:	496a      	ldr	r1, [pc, #424]	; (800222c <readConfigFile+0x230>)
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7fe f934 	bl	80002f0 <strcmp>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d104      	bne.n	8002098 <readConfigFile+0x9c>
        // Save value for range_x
        range_x_value = value[0];
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	4b67      	ldr	r3, [pc, #412]	; (8002230 <readConfigFile+0x234>)
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	e0ab      	b.n	80021f0 <readConfigFile+0x1f4>
      } else if (strcmp(key, "range_y") == 0) {
 8002098:	4966      	ldr	r1, [pc, #408]	; (8002234 <readConfigFile+0x238>)
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f7fe f928 	bl	80002f0 <strcmp>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d104      	bne.n	80020b0 <readConfigFile+0xb4>
        // Save value for range_y
        range_y_value = value[0];
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	781a      	ldrb	r2, [r3, #0]
 80020aa:	4b63      	ldr	r3, [pc, #396]	; (8002238 <readConfigFile+0x23c>)
 80020ac:	701a      	strb	r2, [r3, #0]
 80020ae:	e09f      	b.n	80021f0 <readConfigFile+0x1f4>
      } else if (strcmp(key, "range_z") == 0) {
 80020b0:	4962      	ldr	r1, [pc, #392]	; (800223c <readConfigFile+0x240>)
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f7fe f91c 	bl	80002f0 <strcmp>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d104      	bne.n	80020c8 <readConfigFile+0xcc>
        // Save value for range_z
        range_z_value = value[0];
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	781a      	ldrb	r2, [r3, #0]
 80020c2:	4b5f      	ldr	r3, [pc, #380]	; (8002240 <readConfigFile+0x244>)
 80020c4:	701a      	strb	r2, [r3, #0]
 80020c6:	e093      	b.n	80021f0 <readConfigFile+0x1f4>
      } else if (strcmp(key, "sps") == 0) {
 80020c8:	495e      	ldr	r1, [pc, #376]	; (8002244 <readConfigFile+0x248>)
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f7fe f910 	bl	80002f0 <strcmp>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d107      	bne.n	80020e6 <readConfigFile+0xea>
        // Save value for sps
        sps = atoi(value);
 80020d6:	68b8      	ldr	r0, [r7, #8]
 80020d8:	f012 fd22 	bl	8014b20 <atoi>
 80020dc:	4603      	mov	r3, r0
 80020de:	b29a      	uxth	r2, r3
 80020e0:	4b59      	ldr	r3, [pc, #356]	; (8002248 <readConfigFile+0x24c>)
 80020e2:	801a      	strh	r2, [r3, #0]
 80020e4:	e084      	b.n	80021f0 <readConfigFile+0x1f4>
      } else if (strcmp(key, "floating_point_values") == 0) {
 80020e6:	4959      	ldr	r1, [pc, #356]	; (800224c <readConfigFile+0x250>)
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f7fe f901 	bl	80002f0 <strcmp>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10b      	bne.n	800210c <readConfigFile+0x110>
        // Save value for floating_point_values
        floating_point_values = atoi(value) != 0;
 80020f4:	68b8      	ldr	r0, [r7, #8]
 80020f6:	f012 fd13 	bl	8014b20 <atoi>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4b52      	ldr	r3, [pc, #328]	; (8002250 <readConfigFile+0x254>)
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e071      	b.n	80021f0 <readConfigFile+0x1f4>
      } else if (strcmp(key, "saving_to_sd_card") == 0) {
 800210c:	4951      	ldr	r1, [pc, #324]	; (8002254 <readConfigFile+0x258>)
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f7fe f8ee 	bl	80002f0 <strcmp>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10b      	bne.n	8002132 <readConfigFile+0x136>
        // Save value for saving_to_sd_card
        saving_to_sd_card =  atoi(value) != 0;
 800211a:	68b8      	ldr	r0, [r7, #8]
 800211c:	f012 fd00 	bl	8014b20 <atoi>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf14      	ite	ne
 8002126:	2301      	movne	r3, #1
 8002128:	2300      	moveq	r3, #0
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <readConfigFile+0x25c>)
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	e05e      	b.n	80021f0 <readConfigFile+0x1f4>
      } else if (strcmp(key, "gain_x") == 0) {
 8002132:	494a      	ldr	r1, [pc, #296]	; (800225c <readConfigFile+0x260>)
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7fe f8db 	bl	80002f0 <strcmp>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <readConfigFile+0x15a>
        // Save value for gain_x
        gain_x = atof(value);
 8002140:	68b8      	ldr	r0, [r7, #8]
 8002142:	f012 fcea 	bl	8014b1a <atof>
 8002146:	eeb0 7b40 	vmov.f64	d7, d0
 800214a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800214e:	4b44      	ldr	r3, [pc, #272]	; (8002260 <readConfigFile+0x264>)
 8002150:	edc3 7a00 	vstr	s15, [r3]
 8002154:	e04c      	b.n	80021f0 <readConfigFile+0x1f4>
      } else if (strcmp(key, "gain_y") == 0) {
 8002156:	4943      	ldr	r1, [pc, #268]	; (8002264 <readConfigFile+0x268>)
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f7fe f8c9 	bl	80002f0 <strcmp>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10a      	bne.n	800217a <readConfigFile+0x17e>
        // Save value for gain_y
        gain_y = atof(value);
 8002164:	68b8      	ldr	r0, [r7, #8]
 8002166:	f012 fcd8 	bl	8014b1a <atof>
 800216a:	eeb0 7b40 	vmov.f64	d7, d0
 800216e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002172:	4b3d      	ldr	r3, [pc, #244]	; (8002268 <readConfigFile+0x26c>)
 8002174:	edc3 7a00 	vstr	s15, [r3]
 8002178:	e03a      	b.n	80021f0 <readConfigFile+0x1f4>
      } else if (strcmp(key, "gain_z") == 0) {
 800217a:	493c      	ldr	r1, [pc, #240]	; (800226c <readConfigFile+0x270>)
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7fe f8b7 	bl	80002f0 <strcmp>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10a      	bne.n	800219e <readConfigFile+0x1a2>
        // Save value for gain_z
        gain_z = atof(value);
 8002188:	68b8      	ldr	r0, [r7, #8]
 800218a:	f012 fcc6 	bl	8014b1a <atof>
 800218e:	eeb0 7b40 	vmov.f64	d7, d0
 8002192:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002196:	4b36      	ldr	r3, [pc, #216]	; (8002270 <readConfigFile+0x274>)
 8002198:	edc3 7a00 	vstr	s15, [r3]
 800219c:	e028      	b.n	80021f0 <readConfigFile+0x1f4>
      } else if (strcmp(key, "offset_x") == 0) {
 800219e:	4935      	ldr	r1, [pc, #212]	; (8002274 <readConfigFile+0x278>)
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f7fe f8a5 	bl	80002f0 <strcmp>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d106      	bne.n	80021ba <readConfigFile+0x1be>
        // Save value for offset_x
        offset_x = atoi(value);
 80021ac:	68b8      	ldr	r0, [r7, #8]
 80021ae:	f012 fcb7 	bl	8014b20 <atoi>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4a30      	ldr	r2, [pc, #192]	; (8002278 <readConfigFile+0x27c>)
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	e01a      	b.n	80021f0 <readConfigFile+0x1f4>
      } else if (strcmp(key, "offset_y") == 0) {
 80021ba:	4930      	ldr	r1, [pc, #192]	; (800227c <readConfigFile+0x280>)
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f7fe f897 	bl	80002f0 <strcmp>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d106      	bne.n	80021d6 <readConfigFile+0x1da>
        // Save value for offset_y
        offset_y = atoi(value);
 80021c8:	68b8      	ldr	r0, [r7, #8]
 80021ca:	f012 fca9 	bl	8014b20 <atoi>
 80021ce:	4603      	mov	r3, r0
 80021d0:	4a2b      	ldr	r2, [pc, #172]	; (8002280 <readConfigFile+0x284>)
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	e00c      	b.n	80021f0 <readConfigFile+0x1f4>
      } else if (strcmp(key, "offset_z") == 0) {
 80021d6:	492b      	ldr	r1, [pc, #172]	; (8002284 <readConfigFile+0x288>)
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f7fe f889 	bl	80002f0 <strcmp>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <readConfigFile+0x1f4>
        // Save value for offset_z
        offset_z = atoi(value);
 80021e4:	68b8      	ldr	r0, [r7, #8]
 80021e6:	f012 fc9b 	bl	8014b20 <atoi>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4a26      	ldr	r2, [pc, #152]	; (8002288 <readConfigFile+0x28c>)
 80021ee:	6013      	str	r3, [r2, #0]
      }
      // Add more key comparisons as needed

      // Clear buffer for the next line
      memset(buffer, 0, sizeof(buffer));
 80021f0:	4633      	mov	r3, r6
 80021f2:	461a      	mov	r2, r3
 80021f4:	2100      	movs	r1, #0
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f012 fcce 	bl	8014b98 <memset>
  while (f_gets(buffer, sizeof(buffer), &SDFile) != NULL) {
 80021fc:	4633      	mov	r3, r6
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <readConfigFile+0x228>)
 8002200:	4619      	mov	r1, r3
 8002202:	6978      	ldr	r0, [r7, #20]
 8002204:	f012 fbf0 	bl	80149e8 <f_gets>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	f47f af2e 	bne.w	800206c <readConfigFile+0x70>
  }

  // Close the file
  f_close(&SDFile);
 8002210:	4804      	ldr	r0, [pc, #16]	; (8002224 <readConfigFile+0x228>)
 8002212:	f012 fbbf 	bl	8014994 <f_close>
 8002216:	46d5      	mov	sp, sl
}
 8002218:	bf00      	nop
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002222:	bf00      	nop
 8002224:	24008c4c 	.word	0x24008c4c
 8002228:	08017dec 	.word	0x08017dec
 800222c:	08017df0 	.word	0x08017df0
 8002230:	24000005 	.word	0x24000005
 8002234:	08017df8 	.word	0x08017df8
 8002238:	24000006 	.word	0x24000006
 800223c:	08017e00 	.word	0x08017e00
 8002240:	24000007 	.word	0x24000007
 8002244:	08017e08 	.word	0x08017e08
 8002248:	24000008 	.word	0x24000008
 800224c:	08017e0c 	.word	0x08017e0c
 8002250:	240089e3 	.word	0x240089e3
 8002254:	08017e24 	.word	0x08017e24
 8002258:	240089e4 	.word	0x240089e4
 800225c:	08017e38 	.word	0x08017e38
 8002260:	240089e8 	.word	0x240089e8
 8002264:	08017e40 	.word	0x08017e40
 8002268:	240089ec 	.word	0x240089ec
 800226c:	08017e48 	.word	0x08017e48
 8002270:	240089f0 	.word	0x240089f0
 8002274:	08017e50 	.word	0x08017e50
 8002278:	240089f4 	.word	0x240089f4
 800227c:	08017e5c 	.word	0x08017e5c
 8002280:	240089f8 	.word	0x240089f8
 8002284:	08017e68 	.word	0x08017e68
 8002288:	240089fc 	.word	0x240089fc

0800228c <initialSetupADC>:

void initialSetupADC(void){
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
  if(range_x_value == 'H'){
 8002292:	4b37      	ldr	r3, [pc, #220]	; (8002370 <initialSetupADC+0xe4>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b48      	cmp	r3, #72	; 0x48
 8002298:	d105      	bne.n	80022a6 <initialSetupADC+0x1a>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	2120      	movs	r1, #32
 800229e:	4835      	ldr	r0, [pc, #212]	; (8002374 <initialSetupADC+0xe8>)
 80022a0:	f005 f852 	bl	8007348 <HAL_GPIO_WritePin>
 80022a4:	e004      	b.n	80022b0 <initialSetupADC+0x24>
  }else{
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80022a6:	2201      	movs	r2, #1
 80022a8:	2120      	movs	r1, #32
 80022aa:	4832      	ldr	r0, [pc, #200]	; (8002374 <initialSetupADC+0xe8>)
 80022ac:	f005 f84c 	bl	8007348 <HAL_GPIO_WritePin>
  }
  if(range_y_value == 'H'){
 80022b0:	4b31      	ldr	r3, [pc, #196]	; (8002378 <initialSetupADC+0xec>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b48      	cmp	r3, #72	; 0x48
 80022b6:	d105      	bne.n	80022c4 <initialSetupADC+0x38>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80022b8:	2200      	movs	r2, #0
 80022ba:	2110      	movs	r1, #16
 80022bc:	482f      	ldr	r0, [pc, #188]	; (800237c <initialSetupADC+0xf0>)
 80022be:	f005 f843 	bl	8007348 <HAL_GPIO_WritePin>
 80022c2:	e004      	b.n	80022ce <initialSetupADC+0x42>
  }else{
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80022c4:	2201      	movs	r2, #1
 80022c6:	2110      	movs	r1, #16
 80022c8:	482c      	ldr	r0, [pc, #176]	; (800237c <initialSetupADC+0xf0>)
 80022ca:	f005 f83d 	bl	8007348 <HAL_GPIO_WritePin>
  }
  if(range_y_value == 'H'){
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <initialSetupADC+0xec>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b48      	cmp	r3, #72	; 0x48
 80022d4:	d105      	bne.n	80022e2 <initialSetupADC+0x56>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2101      	movs	r1, #1
 80022da:	4829      	ldr	r0, [pc, #164]	; (8002380 <initialSetupADC+0xf4>)
 80022dc:	f005 f834 	bl	8007348 <HAL_GPIO_WritePin>
 80022e0:	e004      	b.n	80022ec <initialSetupADC+0x60>
  }else{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80022e2:	2201      	movs	r2, #1
 80022e4:	2101      	movs	r1, #1
 80022e6:	4826      	ldr	r0, [pc, #152]	; (8002380 <initialSetupADC+0xf4>)
 80022e8:	f005 f82e 	bl	8007348 <HAL_GPIO_WritePin>
  }


  spi1_soft_reset();
 80022ec:	f000 fba2 	bl	8002a34 <spi1_soft_reset>
  spi2_soft_reset();
 80022f0:	f000 fbc6 	bl	8002a80 <spi2_soft_reset>
  spi4_soft_reset();
 80022f4:	f000 fbea 	bl	8002acc <spi4_soft_reset>
  uint8_t spsHex = SPS_VALUE_5;
 80022f8:	4b22      	ldr	r3, [pc, #136]	; (8002384 <initialSetupADC+0xf8>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	71fb      	strb	r3, [r7, #7]
  if (sps == 5){
 80022fe:	4b22      	ldr	r3, [pc, #136]	; (8002388 <initialSetupADC+0xfc>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	2b05      	cmp	r3, #5
 8002304:	d103      	bne.n	800230e <initialSetupADC+0x82>
    spsHex = SPS_VALUE_5;
 8002306:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <initialSetupADC+0xf8>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
 800230c:	e020      	b.n	8002350 <initialSetupADC+0xc4>
  }else if(sps == 20){
 800230e:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <initialSetupADC+0xfc>)
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	2b14      	cmp	r3, #20
 8002314:	d103      	bne.n	800231e <initialSetupADC+0x92>
    spsHex = SPS_VALUE_20;
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <initialSetupADC+0x100>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	71fb      	strb	r3, [r7, #7]
 800231c:	e018      	b.n	8002350 <initialSetupADC+0xc4>
  }else if(sps == 100){
 800231e:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <initialSetupADC+0xfc>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d103      	bne.n	800232e <initialSetupADC+0xa2>
    spsHex = SPS_VALUE_100;
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <initialSetupADC+0x104>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	71fb      	strb	r3, [r7, #7]
 800232c:	e010      	b.n	8002350 <initialSetupADC+0xc4>
  }else if(sps == 500){
 800232e:	4b16      	ldr	r3, [pc, #88]	; (8002388 <initialSetupADC+0xfc>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002336:	d103      	bne.n	8002340 <initialSetupADC+0xb4>
    spsHex = SPS_VALUE_500;
 8002338:	4b16      	ldr	r3, [pc, #88]	; (8002394 <initialSetupADC+0x108>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	71fb      	strb	r3, [r7, #7]
 800233e:	e007      	b.n	8002350 <initialSetupADC+0xc4>
  }else if(sps == 1000){
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <initialSetupADC+0xfc>)
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002348:	d102      	bne.n	8002350 <initialSetupADC+0xc4>
    spsHex = SPS_VALUE_1000;
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <initialSetupADC+0x10c>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  }

  spi1_adc_init(spsHex);
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f8ea 	bl	800252c <spi1_adc_init>
  spi2_adc_init(spsHex);
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f9be 	bl	80026dc <spi2_adc_init>
  spi4_adc_init(spsHex);
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fa92 	bl	800288c <spi4_adc_init>


}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	24000005 	.word	0x24000005
 8002374:	58020000 	.word	0x58020000
 8002378:	24000006 	.word	0x24000006
 800237c:	58020800 	.word	0x58020800
 8002380:	58020400 	.word	0x58020400
 8002384:	24000000 	.word	0x24000000
 8002388:	24000008 	.word	0x24000008
 800238c:	24000001 	.word	0x24000001
 8002390:	24000002 	.word	0x24000002
 8002394:	24000003 	.word	0x24000003
 8002398:	24000004 	.word	0x24000004

0800239c <print_help_uart>:

void print_help_uart(void){
 800239c:	b580      	push	{r7, lr}
 800239e:	b0fc      	sub	sp, #496	; 0x1f0
 80023a0:	af00      	add	r7, sp, #0
  char message[] = "Napoveda pro ovladani modulu:\r\n"
 80023a2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80023a6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80023aa:	4a0c      	ldr	r2, [pc, #48]	; (80023dc <print_help_uart+0x40>)
 80023ac:	4618      	mov	r0, r3
 80023ae:	4611      	mov	r1, r2
 80023b0:	f240 13eb 	movw	r3, #491	; 0x1eb
 80023b4:	461a      	mov	r2, r3
 80023b6:	f012 fbe1 	bl	8014b7c <memcpy>
                   "1 - nastaveni SPS na 20\r\n"
                   "2 - nastaveni SPS na 100\r\n"
                   "3 - nastaveni SPS na 500\r\n"
                   "4 - nastaveni SPS na 1000\r\n";

  HAL_UART_Transmit(&huart4, message, strlen(message),100);
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fd ffa1 	bl	8000304 <strlen>
 80023c2:	4603      	mov	r3, r0
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	1d39      	adds	r1, r7, #4
 80023c8:	2364      	movs	r3, #100	; 0x64
 80023ca:	4805      	ldr	r0, [pc, #20]	; (80023e0 <print_help_uart+0x44>)
 80023cc:	f00c fb52 	bl	800ea74 <HAL_UART_Transmit>

}
 80023d0:	bf00      	nop
 80023d2:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	08017e74 	.word	0x08017e74
 80023e0:	240087dc 	.word	0x240087dc

080023e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023e8:	b672      	cpsid	i
}
 80023ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023ec:	e7fe      	b.n	80023ec <Error_Handler+0x8>
	...

080023f0 <sd_card_init>:
FILINFO fno;
uint8_t nameFileNumber = 1;
bool newMeasurement = false;

bool sd_card_init (void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
  bool initError = false;
 80023f6:	2300      	movs	r3, #0
 80023f8:	71fb      	strb	r3, [r7, #7]
  res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	4909      	ldr	r1, [pc, #36]	; (8002424 <sd_card_init+0x34>)
 80023fe:	480a      	ldr	r0, [pc, #40]	; (8002428 <sd_card_init+0x38>)
 8002400:	f011 fd92 	bl	8013f28 <f_mount>
 8002404:	4603      	mov	r3, r0
 8002406:	461a      	mov	r2, r3
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <sd_card_init+0x3c>)
 800240a:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK){
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <sd_card_init+0x3c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <sd_card_init+0x28>
    initError = true;
 8002414:	2301      	movs	r3, #1
 8002416:	71fb      	strb	r3, [r7, #7]
  }
  return initError;
 8002418:	79fb      	ldrb	r3, [r7, #7]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	24008a18 	.word	0x24008a18
 8002428:	24008a1c 	.word	0x24008a1c
 800242c:	24008a00 	.word	0x24008a00

08002430 <sd_card_open_file>:
   f_close(&SDFile);

}


bool sd_card_open_file(void){
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
  FRESULT localRes;
  uint8_t fileNumber = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	75bb      	strb	r3, [r7, #22]
  char filename0[] = {'a', 'd', 'c', '.', 't', 'x', 't', '\0'};
 800243a:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <sd_card_open_file+0x88>)
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002444:	e883 0003 	stmia.w	r3, {r0, r1}
  char filename1[] = {'a', 'd', 'c', '1', '.', 't', 'x', 't', '\0'};
 8002448:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <sd_card_open_file+0x8c>)
 800244a:	463b      	mov	r3, r7
 800244c:	ca07      	ldmia	r2, {r0, r1, r2}
 800244e:	c303      	stmia	r3!, {r0, r1}
 8002450:	701a      	strb	r2, [r3, #0]
  bool openFileError = false;
 8002452:	2300      	movs	r3, #0
 8002454:	757b      	strb	r3, [r7, #21]
  do {
      if (fileNumber == 0) {
 8002456:	7dbb      	ldrb	r3, [r7, #22]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <sd_card_open_file+0x40>
        localRes = f_open(&SDFile, filename0, FA_WRITE | FA_CREATE_NEW); // Create the file if it doesn't exist
 800245c:	f107 030c 	add.w	r3, r7, #12
 8002460:	2206      	movs	r2, #6
 8002462:	4619      	mov	r1, r3
 8002464:	4816      	ldr	r0, [pc, #88]	; (80024c0 <sd_card_open_file+0x90>)
 8002466:	f011 fda5 	bl	8013fb4 <f_open>
 800246a:	4603      	mov	r3, r0
 800246c:	75fb      	strb	r3, [r7, #23]
 800246e:	e00c      	b.n	800248a <sd_card_open_file+0x5a>
      } else{
        filename1[3] = nameFileNumber + '0';
 8002470:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <sd_card_open_file+0x94>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	3330      	adds	r3, #48	; 0x30
 8002476:	b2db      	uxtb	r3, r3
 8002478:	70fb      	strb	r3, [r7, #3]
        localRes = f_open(&SDFile, filename1, FA_WRITE | FA_CREATE_NEW); // Create the file if it doesn't exist
 800247a:	463b      	mov	r3, r7
 800247c:	2206      	movs	r2, #6
 800247e:	4619      	mov	r1, r3
 8002480:	480f      	ldr	r0, [pc, #60]	; (80024c0 <sd_card_open_file+0x90>)
 8002482:	f011 fd97 	bl	8013fb4 <f_open>
 8002486:	4603      	mov	r3, r0
 8002488:	75fb      	strb	r3, [r7, #23]
      }

      if (localRes == FR_EXIST) {
 800248a:	7dfb      	ldrb	r3, [r7, #23]
 800248c:	2b08      	cmp	r3, #8
 800248e:	d105      	bne.n	800249c <sd_card_open_file+0x6c>
          f_close(&SDFile); // Close the file if it already exists
 8002490:	480b      	ldr	r0, [pc, #44]	; (80024c0 <sd_card_open_file+0x90>)
 8002492:	f012 fa7f 	bl	8014994 <f_close>
          fileNumber++;   // Increment the file number to create a new name
 8002496:	7dbb      	ldrb	r3, [r7, #22]
 8002498:	3301      	adds	r3, #1
 800249a:	75bb      	strb	r3, [r7, #22]
      }
  } while (localRes == FR_EXIST);
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d0d9      	beq.n	8002456 <sd_card_open_file+0x26>

  if (localRes != FR_OK){
 80024a2:	7dfb      	ldrb	r3, [r7, #23]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <sd_card_open_file+0x7c>
    openFileError = true;
 80024a8:	2301      	movs	r3, #1
 80024aa:	757b      	strb	r3, [r7, #21]
  }

  return openFileError;
 80024ac:	7d7b      	ldrb	r3, [r7, #21]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	08018060 	.word	0x08018060
 80024bc:	08018068 	.word	0x08018068
 80024c0:	24008c4c 	.word	0x24008c4c
 80024c4:	2400000b 	.word	0x2400000b

080024c8 <sd_card_write_to_opened_file>:



bool sd_card_write_to_opened_file(char * buffer){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  bool writeToFileError = false;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]
  res = f_write(&SDFile, buffer, strlen((char *)buffer), (void *)&byteswritten);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7fd ff15 	bl	8000304 <strlen>
 80024da:	4602      	mov	r2, r0
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <sd_card_write_to_opened_file+0x44>)
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	480b      	ldr	r0, [pc, #44]	; (8002510 <sd_card_write_to_opened_file+0x48>)
 80024e2:	f012 f864 	bl	80145ae <f_write>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <sd_card_write_to_opened_file+0x4c>)
 80024ec:	701a      	strb	r2, [r3, #0]

   if((byteswritten == 0) || (res != FR_OK))
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <sd_card_write_to_opened_file+0x44>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <sd_card_write_to_opened_file+0x36>
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <sd_card_write_to_opened_file+0x4c>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <sd_card_write_to_opened_file+0x3a>
   {
     writeToFileError = true;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
   }
   return writeToFileError;
 8002502:	7bfb      	ldrb	r3, [r7, #15]

}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	24008a04 	.word	0x24008a04
 8002510:	24008c4c 	.word	0x24008c4c
 8002514:	24008a00 	.word	0x24008a00

08002518 <sd_card_close_file>:

void sd_card_close_file(void){
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0

  f_close(&SDFile);
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <sd_card_close_file+0x10>)
 800251e:	f012 fa39 	bl	8014994 <f_close>
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	24008c4c 	.word	0x24008c4c

0800252c <spi1_adc_init>:


uint32_t readIndex=0;
uint8_t adc_values[80];

void spi1_adc_init(uint8_t spsValue){
 800252c:	b580      	push	{r7, lr}
 800252e:	b08e      	sub	sp, #56	; 0x38
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  //GPIOG->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8002536:	2320      	movs	r3, #32
 8002538:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 800253c:	2310      	movs	r3, #16
 800253e:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8002540:	2301      	movs	r3, #1
 8002542:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 8002546:	2300      	movs	r3, #0
 8002548:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 800254a:	2310      	movs	r3, #16
 800254c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8002550:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8002554:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8002556:	2302      	movs	r3, #2
 8002558:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 800255a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 800255e:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 8002560:	2328      	movs	r3, #40	; 0x28
 8002562:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 8002564:	2305      	movs	r3, #5
 8002566:	743b      	strb	r3, [r7, #16]
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 800256c:	2306      	movs	r3, #6
 800256e:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 8002570:	2300      	movs	r3, #0
 8002572:	813b      	strh	r3, [r7, #8]

  /*Start init ADC1*/
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8002574:	2200      	movs	r2, #0
 8002576:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800257a:	4856      	ldr	r0, [pc, #344]	; (80026d4 <spi1_adc_init+0x1a8>)
 800257c:	f004 fee4 	bl	8007348 <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi1, adcChannelRegister, 1, 100);
 8002580:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002584:	2364      	movs	r3, #100	; 0x64
 8002586:	2201      	movs	r2, #1
 8002588:	4853      	ldr	r0, [pc, #332]	; (80026d8 <spi1_adc_init+0x1ac>)
 800258a:	f009 fda3 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, adcChannel, 2, 100);
 800258e:	f107 0120 	add.w	r1, r7, #32
 8002592:	2364      	movs	r3, #100	; 0x64
 8002594:	2202      	movs	r2, #2
 8002596:	4850      	ldr	r0, [pc, #320]	; (80026d8 <spi1_adc_init+0x1ac>)
 8002598:	f009 fd9c 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 800259c:	2201      	movs	r2, #1
 800259e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025a2:	484c      	ldr	r0, [pc, #304]	; (80026d4 <spi1_adc_init+0x1a8>)
 80025a4:	f004 fed0 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f001 fccb 	bl	8003f44 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025b4:	4847      	ldr	r0, [pc, #284]	; (80026d4 <spi1_adc_init+0x1a8>)
 80025b6:	f004 fec7 	bl	8007348 <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi1, setupConfigurationRegister, 1, 100);
 80025ba:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80025be:	2364      	movs	r3, #100	; 0x64
 80025c0:	2201      	movs	r2, #1
 80025c2:	4845      	ldr	r0, [pc, #276]	; (80026d8 <spi1_adc_init+0x1ac>)
 80025c4:	f009 fd86 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, setupConfiguration, 2, 100);
 80025c8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80025cc:	2364      	movs	r3, #100	; 0x64
 80025ce:	2202      	movs	r2, #2
 80025d0:	4841      	ldr	r0, [pc, #260]	; (80026d8 <spi1_adc_init+0x1ac>)
 80025d2:	f009 fd7f 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 80025d6:	2201      	movs	r2, #1
 80025d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025dc:	483d      	ldr	r0, [pc, #244]	; (80026d4 <spi1_adc_init+0x1a8>)
 80025de:	f004 feb3 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80025e2:	2001      	movs	r0, #1
 80025e4:	f001 fcae 	bl	8003f44 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80025e8:	2200      	movs	r2, #0
 80025ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025ee:	4839      	ldr	r0, [pc, #228]	; (80026d4 <spi1_adc_init+0x1a8>)
 80025f0:	f004 feaa 	bl	8007348 <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi1, adcModeRegister, 1, 100);
 80025f4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80025f8:	2364      	movs	r3, #100	; 0x64
 80025fa:	2201      	movs	r2, #1
 80025fc:	4836      	ldr	r0, [pc, #216]	; (80026d8 <spi1_adc_init+0x1ac>)
 80025fe:	f009 fd69 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, adcMode, 2, 100);
 8002602:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002606:	2364      	movs	r3, #100	; 0x64
 8002608:	2202      	movs	r2, #2
 800260a:	4833      	ldr	r0, [pc, #204]	; (80026d8 <spi1_adc_init+0x1ac>)
 800260c:	f009 fd62 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8002610:	2201      	movs	r2, #1
 8002612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002616:	482f      	ldr	r0, [pc, #188]	; (80026d4 <spi1_adc_init+0x1a8>)
 8002618:	f004 fe96 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800261c:	2001      	movs	r0, #1
 800261e:	f001 fc91 	bl	8003f44 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002628:	482a      	ldr	r0, [pc, #168]	; (80026d4 <spi1_adc_init+0x1a8>)
 800262a:	f004 fe8d 	bl	8007348 <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi1, dataWriteSPS_REGISTER, 1, 100);
 800262e:	f107 0114 	add.w	r1, r7, #20
 8002632:	2364      	movs	r3, #100	; 0x64
 8002634:	2201      	movs	r2, #1
 8002636:	4828      	ldr	r0, [pc, #160]	; (80026d8 <spi1_adc_init+0x1ac>)
 8002638:	f009 fd4c 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, dataWriteSPS, 2, 100);
 800263c:	f107 0110 	add.w	r1, r7, #16
 8002640:	2364      	movs	r3, #100	; 0x64
 8002642:	2202      	movs	r2, #2
 8002644:	4824      	ldr	r0, [pc, #144]	; (80026d8 <spi1_adc_init+0x1ac>)
 8002646:	f009 fd45 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 800264a:	2201      	movs	r2, #1
 800264c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002650:	4820      	ldr	r0, [pc, #128]	; (80026d4 <spi1_adc_init+0x1a8>)
 8002652:	f004 fe79 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002656:	2001      	movs	r0, #1
 8002658:	f001 fc74 	bl	8003f44 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 800265c:	2200      	movs	r2, #0
 800265e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002662:	481c      	ldr	r0, [pc, #112]	; (80026d4 <spi1_adc_init+0x1a8>)
 8002664:	f004 fe70 	bl	8007348 <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi1, dataWriteSyncError_REGISTER, 1, 100);
 8002668:	f107 010c 	add.w	r1, r7, #12
 800266c:	2364      	movs	r3, #100	; 0x64
 800266e:	2201      	movs	r2, #1
 8002670:	4819      	ldr	r0, [pc, #100]	; (80026d8 <spi1_adc_init+0x1ac>)
 8002672:	f009 fd2f 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, dataWriteSyncError, 2, 100);
 8002676:	f107 0108 	add.w	r1, r7, #8
 800267a:	2364      	movs	r3, #100	; 0x64
 800267c:	2202      	movs	r2, #2
 800267e:	4816      	ldr	r0, [pc, #88]	; (80026d8 <spi1_adc_init+0x1ac>)
 8002680:	f009 fd28 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8002684:	2201      	movs	r2, #1
 8002686:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800268a:	4812      	ldr	r0, [pc, #72]	; (80026d4 <spi1_adc_init+0x1a8>)
 800268c:	f004 fe5c 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002690:	2001      	movs	r0, #1
 8002692:	f001 fc57 	bl	8003f44 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800269c:	480d      	ldr	r0, [pc, #52]	; (80026d4 <spi1_adc_init+0x1a8>)
 800269e:	f004 fe53 	bl	8007348 <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi1, continuousConvEnableRegister, 1, 100);
 80026a2:	f107 011c 	add.w	r1, r7, #28
 80026a6:	2364      	movs	r3, #100	; 0x64
 80026a8:	2201      	movs	r2, #1
 80026aa:	480b      	ldr	r0, [pc, #44]	; (80026d8 <spi1_adc_init+0x1ac>)
 80026ac:	f009 fd12 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, continuousConvEnable, 2, 100);
 80026b0:	f107 0118 	add.w	r1, r7, #24
 80026b4:	2364      	movs	r3, #100	; 0x64
 80026b6:	2202      	movs	r2, #2
 80026b8:	4807      	ldr	r0, [pc, #28]	; (80026d8 <spi1_adc_init+0x1ac>)
 80026ba:	f009 fd0b 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 80026be:	2201      	movs	r2, #1
 80026c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026c4:	4803      	ldr	r0, [pc, #12]	; (80026d4 <spi1_adc_init+0x1a8>)
 80026c6:	f004 fe3f 	bl	8007348 <HAL_GPIO_WritePin>
}
 80026ca:	bf00      	nop
 80026cc:	3738      	adds	r7, #56	; 0x38
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	58021800 	.word	0x58021800
 80026d8:	24008290 	.word	0x24008290

080026dc <spi2_adc_init>:

void spi2_adc_init(uint8_t spsValue){
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08e      	sub	sp, #56	; 0x38
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
//  GPIOC->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 80026e6:	2320      	movs	r3, #32
 80026e8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 80026ec:	2310      	movs	r3, #16
 80026ee:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 80026f0:	2301      	movs	r3, #1
 80026f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 80026f6:	2300      	movs	r3, #0
 80026f8:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 80026fa:	2310      	movs	r3, #16
 80026fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8002700:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8002704:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8002706:	2302      	movs	r3, #2
 8002708:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 800270a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 800270e:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 8002710:	2328      	movs	r3, #40	; 0x28
 8002712:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 8002714:	2305      	movs	r3, #5
 8002716:	743b      	strb	r3, [r7, #16]
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 800271c:	2306      	movs	r3, #6
 800271e:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 8002720:	2300      	movs	r3, #0
 8002722:	813b      	strh	r3, [r7, #8]

  /*Start init ADC2*/
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8002724:	2200      	movs	r2, #0
 8002726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800272a:	4856      	ldr	r0, [pc, #344]	; (8002884 <spi2_adc_init+0x1a8>)
 800272c:	f004 fe0c 	bl	8007348 <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi2, adcChannelRegister, 1, 100);
 8002730:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002734:	2364      	movs	r3, #100	; 0x64
 8002736:	2201      	movs	r2, #1
 8002738:	4853      	ldr	r0, [pc, #332]	; (8002888 <spi2_adc_init+0x1ac>)
 800273a:	f009 fccb 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, adcChannel, 2, 100);
 800273e:	f107 0120 	add.w	r1, r7, #32
 8002742:	2364      	movs	r3, #100	; 0x64
 8002744:	2202      	movs	r2, #2
 8002746:	4850      	ldr	r0, [pc, #320]	; (8002888 <spi2_adc_init+0x1ac>)
 8002748:	f009 fcc4 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 800274c:	2201      	movs	r2, #1
 800274e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002752:	484c      	ldr	r0, [pc, #304]	; (8002884 <spi2_adc_init+0x1a8>)
 8002754:	f004 fdf8 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002758:	2001      	movs	r0, #1
 800275a:	f001 fbf3 	bl	8003f44 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002764:	4847      	ldr	r0, [pc, #284]	; (8002884 <spi2_adc_init+0x1a8>)
 8002766:	f004 fdef 	bl	8007348 <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi2, setupConfigurationRegister, 1, 100);
 800276a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800276e:	2364      	movs	r3, #100	; 0x64
 8002770:	2201      	movs	r2, #1
 8002772:	4845      	ldr	r0, [pc, #276]	; (8002888 <spi2_adc_init+0x1ac>)
 8002774:	f009 fcae 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, setupConfiguration, 2, 100);
 8002778:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800277c:	2364      	movs	r3, #100	; 0x64
 800277e:	2202      	movs	r2, #2
 8002780:	4841      	ldr	r0, [pc, #260]	; (8002888 <spi2_adc_init+0x1ac>)
 8002782:	f009 fca7 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8002786:	2201      	movs	r2, #1
 8002788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800278c:	483d      	ldr	r0, [pc, #244]	; (8002884 <spi2_adc_init+0x1a8>)
 800278e:	f004 fddb 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002792:	2001      	movs	r0, #1
 8002794:	f001 fbd6 	bl	8003f44 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8002798:	2200      	movs	r2, #0
 800279a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800279e:	4839      	ldr	r0, [pc, #228]	; (8002884 <spi2_adc_init+0x1a8>)
 80027a0:	f004 fdd2 	bl	8007348 <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi2, adcModeRegister, 1, 100);
 80027a4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80027a8:	2364      	movs	r3, #100	; 0x64
 80027aa:	2201      	movs	r2, #1
 80027ac:	4836      	ldr	r0, [pc, #216]	; (8002888 <spi2_adc_init+0x1ac>)
 80027ae:	f009 fc91 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, adcMode, 2, 100);
 80027b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80027b6:	2364      	movs	r3, #100	; 0x64
 80027b8:	2202      	movs	r2, #2
 80027ba:	4833      	ldr	r0, [pc, #204]	; (8002888 <spi2_adc_init+0x1ac>)
 80027bc:	f009 fc8a 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 80027c0:	2201      	movs	r2, #1
 80027c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027c6:	482f      	ldr	r0, [pc, #188]	; (8002884 <spi2_adc_init+0x1a8>)
 80027c8:	f004 fdbe 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80027cc:	2001      	movs	r0, #1
 80027ce:	f001 fbb9 	bl	8003f44 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027d8:	482a      	ldr	r0, [pc, #168]	; (8002884 <spi2_adc_init+0x1a8>)
 80027da:	f004 fdb5 	bl	8007348 <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi2, dataWriteSPS_REGISTER, 1, 100);
 80027de:	f107 0114 	add.w	r1, r7, #20
 80027e2:	2364      	movs	r3, #100	; 0x64
 80027e4:	2201      	movs	r2, #1
 80027e6:	4828      	ldr	r0, [pc, #160]	; (8002888 <spi2_adc_init+0x1ac>)
 80027e8:	f009 fc74 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, dataWriteSPS, 2, 100);
 80027ec:	f107 0110 	add.w	r1, r7, #16
 80027f0:	2364      	movs	r3, #100	; 0x64
 80027f2:	2202      	movs	r2, #2
 80027f4:	4824      	ldr	r0, [pc, #144]	; (8002888 <spi2_adc_init+0x1ac>)
 80027f6:	f009 fc6d 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 80027fa:	2201      	movs	r2, #1
 80027fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002800:	4820      	ldr	r0, [pc, #128]	; (8002884 <spi2_adc_init+0x1a8>)
 8002802:	f004 fda1 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002806:	2001      	movs	r0, #1
 8002808:	f001 fb9c 	bl	8003f44 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 800280c:	2200      	movs	r2, #0
 800280e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002812:	481c      	ldr	r0, [pc, #112]	; (8002884 <spi2_adc_init+0x1a8>)
 8002814:	f004 fd98 	bl	8007348 <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi2, dataWriteSyncError_REGISTER, 1, 100);
 8002818:	f107 010c 	add.w	r1, r7, #12
 800281c:	2364      	movs	r3, #100	; 0x64
 800281e:	2201      	movs	r2, #1
 8002820:	4819      	ldr	r0, [pc, #100]	; (8002888 <spi2_adc_init+0x1ac>)
 8002822:	f009 fc57 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, dataWriteSyncError, 2, 100);
 8002826:	f107 0108 	add.w	r1, r7, #8
 800282a:	2364      	movs	r3, #100	; 0x64
 800282c:	2202      	movs	r2, #2
 800282e:	4816      	ldr	r0, [pc, #88]	; (8002888 <spi2_adc_init+0x1ac>)
 8002830:	f009 fc50 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8002834:	2201      	movs	r2, #1
 8002836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800283a:	4812      	ldr	r0, [pc, #72]	; (8002884 <spi2_adc_init+0x1a8>)
 800283c:	f004 fd84 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002840:	2001      	movs	r0, #1
 8002842:	f001 fb7f 	bl	8003f44 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800284c:	480d      	ldr	r0, [pc, #52]	; (8002884 <spi2_adc_init+0x1a8>)
 800284e:	f004 fd7b 	bl	8007348 <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi2, continuousConvEnableRegister, 1, 100);
 8002852:	f107 011c 	add.w	r1, r7, #28
 8002856:	2364      	movs	r3, #100	; 0x64
 8002858:	2201      	movs	r2, #1
 800285a:	480b      	ldr	r0, [pc, #44]	; (8002888 <spi2_adc_init+0x1ac>)
 800285c:	f009 fc3a 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, continuousConvEnable, 2, 100);
 8002860:	f107 0118 	add.w	r1, r7, #24
 8002864:	2364      	movs	r3, #100	; 0x64
 8002866:	2202      	movs	r2, #2
 8002868:	4807      	ldr	r0, [pc, #28]	; (8002888 <spi2_adc_init+0x1ac>)
 800286a:	f009 fc33 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 800286e:	2201      	movs	r2, #1
 8002870:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002874:	4803      	ldr	r0, [pc, #12]	; (8002884 <spi2_adc_init+0x1a8>)
 8002876:	f004 fd67 	bl	8007348 <HAL_GPIO_WritePin>
}
 800287a:	bf00      	nop
 800287c:	3738      	adds	r7, #56	; 0x38
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	58020400 	.word	0x58020400
 8002888:	24008318 	.word	0x24008318

0800288c <spi4_adc_init>:

void spi4_adc_init(uint8_t spsValue){
 800288c:	b580      	push	{r7, lr}
 800288e:	b08e      	sub	sp, #56	; 0x38
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
//  GPIOC->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8002896:	2320      	movs	r3, #32
 8002898:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 800289c:	2310      	movs	r3, #16
 800289e:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 80028a0:	2301      	movs	r3, #1
 80028a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 80028a6:	2300      	movs	r3, #0
 80028a8:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 80028aa:	2310      	movs	r3, #16
 80028ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 80028b0:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 80028b4:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 80028b6:	2302      	movs	r3, #2
 80028b8:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 80028ba:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80028be:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 80028c0:	2328      	movs	r3, #40	; 0x28
 80028c2:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 80028c4:	2305      	movs	r3, #5
 80028c6:	743b      	strb	r3, [r7, #16]
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 80028cc:	2306      	movs	r3, #6
 80028ce:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 80028d0:	2300      	movs	r3, #0
 80028d2:	813b      	strh	r3, [r7, #8]
//
//  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
//  HAL_SPI_Transmit(&hspi4, adcChannelRegister, 1, 100);
//  HAL_SPI_Transmit(&hspi4, adcChannel, 2, 100);

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 80028d4:	2201      	movs	r2, #1
 80028d6:	2110      	movs	r1, #16
 80028d8:	4846      	ldr	r0, [pc, #280]	; (80029f4 <spi4_adc_init+0x168>)
 80028da:	f004 fd35 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80028de:	2001      	movs	r0, #1
 80028e0:	f001 fb30 	bl	8003f44 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 80028e4:	2200      	movs	r2, #0
 80028e6:	2110      	movs	r1, #16
 80028e8:	4842      	ldr	r0, [pc, #264]	; (80029f4 <spi4_adc_init+0x168>)
 80028ea:	f004 fd2d 	bl	8007348 <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi4, setupConfigurationRegister, 1, 100);
 80028ee:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80028f2:	2364      	movs	r3, #100	; 0x64
 80028f4:	2201      	movs	r2, #1
 80028f6:	4840      	ldr	r0, [pc, #256]	; (80029f8 <spi4_adc_init+0x16c>)
 80028f8:	f009 fbec 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, setupConfiguration, 2, 100);
 80028fc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002900:	2364      	movs	r3, #100	; 0x64
 8002902:	2202      	movs	r2, #2
 8002904:	483c      	ldr	r0, [pc, #240]	; (80029f8 <spi4_adc_init+0x16c>)
 8002906:	f009 fbe5 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 800290a:	2201      	movs	r2, #1
 800290c:	2110      	movs	r1, #16
 800290e:	4839      	ldr	r0, [pc, #228]	; (80029f4 <spi4_adc_init+0x168>)
 8002910:	f004 fd1a 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002914:	2001      	movs	r0, #1
 8002916:	f001 fb15 	bl	8003f44 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2110      	movs	r1, #16
 800291e:	4835      	ldr	r0, [pc, #212]	; (80029f4 <spi4_adc_init+0x168>)
 8002920:	f004 fd12 	bl	8007348 <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi4, adcModeRegister, 1, 100);
 8002924:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002928:	2364      	movs	r3, #100	; 0x64
 800292a:	2201      	movs	r2, #1
 800292c:	4832      	ldr	r0, [pc, #200]	; (80029f8 <spi4_adc_init+0x16c>)
 800292e:	f009 fbd1 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, adcMode, 2, 100);
 8002932:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002936:	2364      	movs	r3, #100	; 0x64
 8002938:	2202      	movs	r2, #2
 800293a:	482f      	ldr	r0, [pc, #188]	; (80029f8 <spi4_adc_init+0x16c>)
 800293c:	f009 fbca 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002940:	2201      	movs	r2, #1
 8002942:	2110      	movs	r1, #16
 8002944:	482b      	ldr	r0, [pc, #172]	; (80029f4 <spi4_adc_init+0x168>)
 8002946:	f004 fcff 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800294a:	2001      	movs	r0, #1
 800294c:	f001 fafa 	bl	8003f44 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8002950:	2200      	movs	r2, #0
 8002952:	2110      	movs	r1, #16
 8002954:	4827      	ldr	r0, [pc, #156]	; (80029f4 <spi4_adc_init+0x168>)
 8002956:	f004 fcf7 	bl	8007348 <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi4, dataWriteSPS_REGISTER, 1, 100);
 800295a:	f107 0114 	add.w	r1, r7, #20
 800295e:	2364      	movs	r3, #100	; 0x64
 8002960:	2201      	movs	r2, #1
 8002962:	4825      	ldr	r0, [pc, #148]	; (80029f8 <spi4_adc_init+0x16c>)
 8002964:	f009 fbb6 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, dataWriteSPS, 2, 100);
 8002968:	f107 0110 	add.w	r1, r7, #16
 800296c:	2364      	movs	r3, #100	; 0x64
 800296e:	2202      	movs	r2, #2
 8002970:	4821      	ldr	r0, [pc, #132]	; (80029f8 <spi4_adc_init+0x16c>)
 8002972:	f009 fbaf 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002976:	2201      	movs	r2, #1
 8002978:	2110      	movs	r1, #16
 800297a:	481e      	ldr	r0, [pc, #120]	; (80029f4 <spi4_adc_init+0x168>)
 800297c:	f004 fce4 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002980:	2001      	movs	r0, #1
 8002982:	f001 fadf 	bl	8003f44 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2110      	movs	r1, #16
 800298a:	481a      	ldr	r0, [pc, #104]	; (80029f4 <spi4_adc_init+0x168>)
 800298c:	f004 fcdc 	bl	8007348 <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi4, dataWriteSyncError_REGISTER, 1, 100);
 8002990:	f107 010c 	add.w	r1, r7, #12
 8002994:	2364      	movs	r3, #100	; 0x64
 8002996:	2201      	movs	r2, #1
 8002998:	4817      	ldr	r0, [pc, #92]	; (80029f8 <spi4_adc_init+0x16c>)
 800299a:	f009 fb9b 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, dataWriteSyncError, 2, 100);
 800299e:	f107 0108 	add.w	r1, r7, #8
 80029a2:	2364      	movs	r3, #100	; 0x64
 80029a4:	2202      	movs	r2, #2
 80029a6:	4814      	ldr	r0, [pc, #80]	; (80029f8 <spi4_adc_init+0x16c>)
 80029a8:	f009 fb94 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 80029ac:	2201      	movs	r2, #1
 80029ae:	2110      	movs	r1, #16
 80029b0:	4810      	ldr	r0, [pc, #64]	; (80029f4 <spi4_adc_init+0x168>)
 80029b2:	f004 fcc9 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80029b6:	2001      	movs	r0, #1
 80029b8:	f001 fac4 	bl	8003f44 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 80029bc:	2200      	movs	r2, #0
 80029be:	2110      	movs	r1, #16
 80029c0:	480c      	ldr	r0, [pc, #48]	; (80029f4 <spi4_adc_init+0x168>)
 80029c2:	f004 fcc1 	bl	8007348 <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi4, continuousConvEnableRegister, 1, 100);
 80029c6:	f107 011c 	add.w	r1, r7, #28
 80029ca:	2364      	movs	r3, #100	; 0x64
 80029cc:	2201      	movs	r2, #1
 80029ce:	480a      	ldr	r0, [pc, #40]	; (80029f8 <spi4_adc_init+0x16c>)
 80029d0:	f009 fb80 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, continuousConvEnable, 2, 100);
 80029d4:	f107 0118 	add.w	r1, r7, #24
 80029d8:	2364      	movs	r3, #100	; 0x64
 80029da:	2202      	movs	r2, #2
 80029dc:	4806      	ldr	r0, [pc, #24]	; (80029f8 <spi4_adc_init+0x16c>)
 80029de:	f009 fb79 	bl	800c0d4 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 80029e2:	2201      	movs	r2, #1
 80029e4:	2110      	movs	r1, #16
 80029e6:	4803      	ldr	r0, [pc, #12]	; (80029f4 <spi4_adc_init+0x168>)
 80029e8:	f004 fcae 	bl	8007348 <HAL_GPIO_WritePin>
}
 80029ec:	bf00      	nop
 80029ee:	3738      	adds	r7, #56	; 0x38
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	58021000 	.word	0x58021000
 80029f8:	240083a0 	.word	0x240083a0

080029fc <run_all_adc>:


void run_all_adc(void){
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8002a00:	2200      	movs	r2, #0
 8002a02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a06:	4808      	ldr	r0, [pc, #32]	; (8002a28 <run_all_adc+0x2c>)
 8002a08:	f004 fc9e 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a12:	4806      	ldr	r0, [pc, #24]	; (8002a2c <run_all_adc+0x30>)
 8002a14:	f004 fc98 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2110      	movs	r1, #16
 8002a1c:	4804      	ldr	r0, [pc, #16]	; (8002a30 <run_all_adc+0x34>)
 8002a1e:	f004 fc93 	bl	8007348 <HAL_GPIO_WritePin>
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	58021800 	.word	0x58021800
 8002a2c:	58020400 	.word	0x58020400
 8002a30:	58021000 	.word	0x58021000

08002a34 <spi1_soft_reset>:
      HAL_UART_Transmit(&huart5, (uint8_t*)", ", 2, 10);
      HAL_Delay(10);
  }
}

void spi1_soft_reset(void){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <spi1_soft_reset+0x40>)
 8002a3c:	463b      	mov	r3, r7
 8002a3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a42:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a4c:	480a      	ldr	r0, [pc, #40]	; (8002a78 <spi1_soft_reset+0x44>)
 8002a4e:	f004 fc7b 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, softResetValue, 8, 100);
 8002a52:	4639      	mov	r1, r7
 8002a54:	2364      	movs	r3, #100	; 0x64
 8002a56:	2208      	movs	r2, #8
 8002a58:	4808      	ldr	r0, [pc, #32]	; (8002a7c <spi1_soft_reset+0x48>)
 8002a5a:	f009 fb3b 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a64:	4804      	ldr	r0, [pc, #16]	; (8002a78 <spi1_soft_reset+0x44>)
 8002a66:	f004 fc6f 	bl	8007348 <HAL_GPIO_WritePin>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	08018088 	.word	0x08018088
 8002a78:	58021800 	.word	0x58021800
 8002a7c:	24008290 	.word	0x24008290

08002a80 <spi2_soft_reset>:

void spi2_soft_reset(void){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8002a86:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <spi2_soft_reset+0x40>)
 8002a88:	463b      	mov	r3, r7
 8002a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a8e:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a98:	480a      	ldr	r0, [pc, #40]	; (8002ac4 <spi2_soft_reset+0x44>)
 8002a9a:	f004 fc55 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, softResetValue, 8, 100);
 8002a9e:	4639      	mov	r1, r7
 8002aa0:	2364      	movs	r3, #100	; 0x64
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	4808      	ldr	r0, [pc, #32]	; (8002ac8 <spi2_soft_reset+0x48>)
 8002aa6:	f009 fb15 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ab0:	4804      	ldr	r0, [pc, #16]	; (8002ac4 <spi2_soft_reset+0x44>)
 8002ab2:	f004 fc49 	bl	8007348 <HAL_GPIO_WritePin>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	08018088 	.word	0x08018088
 8002ac4:	58020400 	.word	0x58020400
 8002ac8:	24008318 	.word	0x24008318

08002acc <spi4_soft_reset>:

void spi4_soft_reset(void){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8002ad2:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <spi4_soft_reset+0x3c>)
 8002ad4:	463b      	mov	r3, r7
 8002ad6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ada:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2110      	movs	r1, #16
 8002ae2:	480a      	ldr	r0, [pc, #40]	; (8002b0c <spi4_soft_reset+0x40>)
 8002ae4:	f004 fc30 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi4, softResetValue, 8, 100);
 8002ae8:	4639      	mov	r1, r7
 8002aea:	2364      	movs	r3, #100	; 0x64
 8002aec:	2208      	movs	r2, #8
 8002aee:	4808      	ldr	r0, [pc, #32]	; (8002b10 <spi4_soft_reset+0x44>)
 8002af0:	f009 faf0 	bl	800c0d4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002af4:	2201      	movs	r2, #1
 8002af6:	2110      	movs	r1, #16
 8002af8:	4804      	ldr	r0, [pc, #16]	; (8002b0c <spi4_soft_reset+0x40>)
 8002afa:	f004 fc25 	bl	8007348 <HAL_GPIO_WritePin>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	08018088 	.word	0x08018088
 8002b0c:	58021000 	.word	0x58021000
 8002b10:	240083a0 	.word	0x240083a0

08002b14 <getStringFromValues>:
  }
  HAL_UART_Transmit(&huart4, (uint8_t*)"\n\r", 2, 10);
}


void getStringFromValues(uint32_t adcRawValue_x, uint32_t adcRawValue_y, uint32_t adcRawValue_z, char* concatenatedBuffer){
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b092      	sub	sp, #72	; 0x48
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
  uint8_t uartBuffer_x[14];
  uint8_t uartBuffer_y[14];
  uint8_t uartBuffer_z[14];

  (void)sprintf((char *)uartBuffer_x, "%10lu", adcRawValue_x);
 8002b22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4910      	ldr	r1, [pc, #64]	; (8002b6c <getStringFromValues+0x58>)
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f012 f83c 	bl	8014ba8 <siprintf>
  (void)sprintf((char *)uartBuffer_y, "%10lu", adcRawValue_y);
 8002b30:	f107 0320 	add.w	r3, r7, #32
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	490d      	ldr	r1, [pc, #52]	; (8002b6c <getStringFromValues+0x58>)
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f012 f835 	bl	8014ba8 <siprintf>
  (void)sprintf((char *)uartBuffer_z, "%10lu", adcRawValue_z);
 8002b3e:	f107 0310 	add.w	r3, r7, #16
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4909      	ldr	r1, [pc, #36]	; (8002b6c <getStringFromValues+0x58>)
 8002b46:	4618      	mov	r0, r3
 8002b48:	f012 f82e 	bl	8014ba8 <siprintf>

  (void)sprintf((char *)concatenatedBuffer, "%s %s %s\n", (char*)uartBuffer_x, (char*)uartBuffer_y, (char*)uartBuffer_z);
 8002b4c:	f107 0120 	add.w	r1, r7, #32
 8002b50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002b54:	f107 0310 	add.w	r3, r7, #16
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4904      	ldr	r1, [pc, #16]	; (8002b70 <getStringFromValues+0x5c>)
 8002b5e:	6838      	ldr	r0, [r7, #0]
 8002b60:	f012 f822 	bl	8014ba8 <siprintf>

//  HAL_UART_Transmit(&huart4, concatenatedBuffer, 34,100);
}
 8002b64:	bf00      	nop
 8002b66:	3740      	adds	r7, #64	; 0x40
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	080180b0 	.word	0x080180b0
 8002b70:	080180b8 	.word	0x080180b8
 8002b74:	00000000 	.word	0x00000000

08002b78 <getStringFromValuesFloat>:

void getStringFromValuesFloat(uint32_t adcRawValue_x, uint32_t adcRawValue_y, uint32_t adcRawValue_z, char* concatenatedBuffer, char resolutionX, char resolutionY, char resolutionZ){
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b098      	sub	sp, #96	; 0x60
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  char uartBuffer_y[20];
  char uartBuffer_z[20];
  float convertedValueX;
  float convertedValueY;
  float convertedValueZ;
  if(resolutionX == 'H'){
 8002b86:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002b8a:	2b48      	cmp	r3, #72	; 0x48
 8002b8c:	d115      	bne.n	8002bba <getStringFromValuesFloat+0x42>
    convertedValueX = (20* (double)adcRawValue_x / (pow(2,32))) - 10 ;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	ee07 3a90 	vmov	s15, r3
 8002b94:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002b98:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002b9c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002ba0:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8002cd8 <getStringFromValuesFloat+0x160>
 8002ba4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002ba8:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002bac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002bb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bb4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 8002bb8:	e010      	b.n	8002bdc <getStringFromValuesFloat+0x64>
  }else{
    convertedValueX = ((double)adcRawValue_x / (pow(2,32))) - 0.5 ;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	ee07 3a90 	vmov	s15, r3
 8002bc0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002bc4:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8002cd8 <getStringFromValuesFloat+0x160>
 8002bc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002bcc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002bd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002bd4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bd8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  }

  if(resolutionY == 'H'){
 8002bdc:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8002be0:	2b48      	cmp	r3, #72	; 0x48
 8002be2:	d115      	bne.n	8002c10 <getStringFromValuesFloat+0x98>
    convertedValueY = (20* (double)adcRawValue_y / (pow(2,32))) - 10 ;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	ee07 3a90 	vmov	s15, r3
 8002bea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002bee:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002bf2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002bf6:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8002cd8 <getStringFromValuesFloat+0x160>
 8002bfa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002bfe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002c02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c06:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c0a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002c0e:	e010      	b.n	8002c32 <getStringFromValuesFloat+0xba>
  }else{
    convertedValueY = ((double)adcRawValue_y / (pow(2,32))) - 0.5 ;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002c1a:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8002cd8 <getStringFromValuesFloat+0x160>
 8002c1e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002c22:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002c26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c2e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
  }

  if(resolutionZ == 'H'){
 8002c32:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002c36:	2b48      	cmp	r3, #72	; 0x48
 8002c38:	d115      	bne.n	8002c66 <getStringFromValuesFloat+0xee>
    convertedValueZ = (20* (double)adcRawValue_z / (pow(2,32))) - 10 ;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	ee07 3a90 	vmov	s15, r3
 8002c40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002c44:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002c48:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002c4c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8002cd8 <getStringFromValuesFloat+0x160>
 8002c50:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002c54:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002c58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c5c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c60:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8002c64:	e010      	b.n	8002c88 <getStringFromValuesFloat+0x110>
  }else{
    convertedValueZ = ((double)adcRawValue_z / (pow(2,32))) - 0.5 ;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	ee07 3a90 	vmov	s15, r3
 8002c6c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002c70:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8002cd8 <getStringFromValuesFloat+0x160>
 8002c74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002c78:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002c7c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c84:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
  }

  formatFloatString(uartBuffer_x,convertedValueX);
 8002c88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c8c:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 f87b 	bl	8002d8c <formatFloatString>
  formatFloatString(uartBuffer_y,convertedValueY);
 8002c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9a:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f874 	bl	8002d8c <formatFloatString>
  formatFloatString(uartBuffer_z,convertedValueZ);
 8002ca4:	f107 0310 	add.w	r3, r7, #16
 8002ca8:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 f86d 	bl	8002d8c <formatFloatString>
  //(void)sprintf(uartBuffer_x, "%6.3f", convertedValueX);
//  (void)snprintf((char *)uartBuffer_x, 10, "%f", convertedValueX);
//  (void)sprintf((char *)uartBuffer_y, "%.10f", convertedValueY);
//  (void)sprintf((char *)uartBuffer_z, "%.10f", convertedValueZ);

  (void)sprintf((char *)concatenatedBuffer, "%s %s %s\n", (char*)uartBuffer_x, (char*)uartBuffer_y, (char*)uartBuffer_z);
 8002cb2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002cb6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002cba:	f107 0310 	add.w	r3, r7, #16
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4907      	ldr	r1, [pc, #28]	; (8002ce0 <getStringFromValuesFloat+0x168>)
 8002cc4:	6838      	ldr	r0, [r7, #0]
 8002cc6:	f011 ff6f 	bl	8014ba8 <siprintf>

}
 8002cca:	bf00      	nop
 8002ccc:	3758      	adds	r7, #88	; 0x58
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	f3af 8000 	nop.w
 8002cd8:	00000000 	.word	0x00000000
 8002cdc:	41f00000 	.word	0x41f00000
 8002ce0:	080180b8 	.word	0x080180b8

08002ce4 <setNewSPStoAllADCs>:
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}



void setNewSPStoAllADCs(uint8_t spsValue){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002cee:	2017      	movs	r0, #23
 8002cf0:	f001 fa73 	bl	80041da <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8002cf4:	2028      	movs	r0, #40	; 0x28
 8002cf6:	f001 fa70 	bl	80041da <HAL_NVIC_DisableIRQ>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d00:	481f      	ldr	r0, [pc, #124]	; (8002d80 <setNewSPStoAllADCs+0x9c>)
 8002d02:	f004 fb21 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8002d06:	2201      	movs	r2, #1
 8002d08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d0c:	481d      	ldr	r0, [pc, #116]	; (8002d84 <setNewSPStoAllADCs+0xa0>)
 8002d0e:	f004 fb1b 	bl	8007348 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002d12:	2201      	movs	r2, #1
 8002d14:	2110      	movs	r1, #16
 8002d16:	481c      	ldr	r0, [pc, #112]	; (8002d88 <setNewSPStoAllADCs+0xa4>)
 8002d18:	f004 fb16 	bl	8007348 <HAL_GPIO_WritePin>
  spi1_soft_reset();
 8002d1c:	f7ff fe8a 	bl	8002a34 <spi1_soft_reset>
  spi2_soft_reset();
 8002d20:	f7ff feae 	bl	8002a80 <spi2_soft_reset>
  spi4_soft_reset();
 8002d24:	f7ff fed2 	bl	8002acc <spi4_soft_reset>
  spi1_adc_init(spsValue);
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fbfe 	bl	800252c <spi1_adc_init>
  spi2_adc_init(spsValue);
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fcd2 	bl	80026dc <spi2_adc_init>
  spi4_adc_init(spsValue);
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fda6 	bl	800288c <spi4_adc_init>
  run_all_adc();
 8002d40:	f7ff fe5c 	bl	80029fc <run_all_adc>
  HAL_Delay(1);
 8002d44:	2001      	movs	r0, #1
 8002d46:	f001 f8fd 	bl	8003f44 <HAL_Delay>
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8002d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8002d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d58:	2240      	movs	r2, #64	; 0x40
 8002d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d6a:	2017      	movs	r0, #23
 8002d6c:	f001 fa27 	bl	80041be <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d70:	2028      	movs	r0, #40	; 0x28
 8002d72:	f001 fa24 	bl	80041be <HAL_NVIC_EnableIRQ>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	58021800 	.word	0x58021800
 8002d84:	58020400 	.word	0x58020400
 8002d88:	58021000 	.word	0x58021000

08002d8c <formatFloatString>:
  HAL_SPI_TransmitReceive(&hspi4, pTxData, pRxData,3,100);
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
  __NOP();
}

void formatFloatString(char* str, float floatValue) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	; 0x28
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	ed87 0a00 	vstr	s0, [r7]
    char *tmpSign = (floatValue < 0) ? "-" : "+";
 8002d98:	edd7 7a00 	vldr	s15, [r7]
 8002d9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da4:	d501      	bpl.n	8002daa <formatFloatString+0x1e>
 8002da6:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <formatFloatString+0x94>)
 8002da8:	e000      	b.n	8002dac <formatFloatString+0x20>
 8002daa:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <formatFloatString+0x98>)
 8002dac:	61fb      	str	r3, [r7, #28]
    float tmpVal = (floatValue < 0) ? -floatValue : floatValue;
 8002dae:	edd7 7a00 	vldr	s15, [r7]
 8002db2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dba:	d504      	bpl.n	8002dc6 <formatFloatString+0x3a>
 8002dbc:	edd7 7a00 	vldr	s15, [r7]
 8002dc0:	eef1 7a67 	vneg.f32	s15, s15
 8002dc4:	e001      	b.n	8002dca <formatFloatString+0x3e>
 8002dc6:	edd7 7a00 	vldr	s15, [r7]
 8002dca:	edc7 7a06 	vstr	s15, [r7, #24]
    int tmpInt1 = (int)tmpVal;                  // Get the integer part.
 8002dce:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dd6:	ee17 3a90 	vmov	r3, s15
 8002dda:	617b      	str	r3, [r7, #20]
    float tmpFrac = tmpVal - tmpInt1;           // Get the fractional part.
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	ee07 3a90 	vmov	s15, r3
 8002de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002de6:	ed97 7a06 	vldr	s14, [r7, #24]
 8002dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dee:	edc7 7a04 	vstr	s15, [r7, #16]
    int tmpInt2 = (int)(tmpFrac * 10000000);    // Turn into integer.
 8002df2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002df6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002e28 <formatFloatString+0x9c>
 8002dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e02:	ee17 3a90 	vmov	r3, s15
 8002e06:	60fb      	str	r3, [r7, #12]
    sprintf(str, "%s%d.%07d", tmpSign, tmpInt1, tmpInt2);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	4906      	ldr	r1, [pc, #24]	; (8002e2c <formatFloatString+0xa0>)
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f011 fec8 	bl	8014ba8 <siprintf>

}
 8002e18:	bf00      	nop
 8002e1a:	3720      	adds	r7, #32
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	080180cc 	.word	0x080180cc
 8002e24:	080180d0 	.word	0x080180d0
 8002e28:	4b189680 	.word	0x4b189680
 8002e2c:	080180d4 	.word	0x080180d4

08002e30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_MspInit+0x30>)
 8002e38:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002e3c:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <HAL_MspInit+0x30>)
 8002e3e:	f043 0302 	orr.w	r3, r3, #2
 8002e42:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_MspInit+0x30>)
 8002e48:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	58024400 	.word	0x58024400

08002e64 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08c      	sub	sp, #48	; 0x30
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6c:	f107 031c 	add.w	r3, r7, #28
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a3e      	ldr	r2, [pc, #248]	; (8002f7c <HAL_SD_MspInit+0x118>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d175      	bne.n	8002f72 <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002e86:	4b3e      	ldr	r3, [pc, #248]	; (8002f80 <HAL_SD_MspInit+0x11c>)
 8002e88:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002e8c:	4a3c      	ldr	r2, [pc, #240]	; (8002f80 <HAL_SD_MspInit+0x11c>)
 8002e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e92:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8002e96:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <HAL_SD_MspInit+0x11c>)
 8002e98:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea4:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <HAL_SD_MspInit+0x11c>)
 8002ea6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002eaa:	4a35      	ldr	r2, [pc, #212]	; (8002f80 <HAL_SD_MspInit+0x11c>)
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002eb4:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <HAL_SD_MspInit+0x11c>)
 8002eb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec2:	4b2f      	ldr	r3, [pc, #188]	; (8002f80 <HAL_SD_MspInit+0x11c>)
 8002ec4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ec8:	4a2d      	ldr	r2, [pc, #180]	; (8002f80 <HAL_SD_MspInit+0x11c>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002ed2:	4b2b      	ldr	r3, [pc, #172]	; (8002f80 <HAL_SD_MspInit+0x11c>)
 8002ed4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ee0:	4b27      	ldr	r3, [pc, #156]	; (8002f80 <HAL_SD_MspInit+0x11c>)
 8002ee2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ee6:	4a26      	ldr	r2, [pc, #152]	; (8002f80 <HAL_SD_MspInit+0x11c>)
 8002ee8:	f043 0308 	orr.w	r3, r3, #8
 8002eec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002ef0:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <HAL_SD_MspInit+0x11c>)
 8002ef2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f04:	2302      	movs	r3, #2
 8002f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002f10:	230c      	movs	r3, #12
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f14:	f107 031c 	add.w	r3, r7, #28
 8002f18:	4619      	mov	r1, r3
 8002f1a:	481a      	ldr	r0, [pc, #104]	; (8002f84 <HAL_SD_MspInit+0x120>)
 8002f1c:	f004 f864 	bl	8006fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002f20:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f26:	2302      	movs	r3, #2
 8002f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002f32:	230c      	movs	r3, #12
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f36:	f107 031c 	add.w	r3, r7, #28
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4812      	ldr	r0, [pc, #72]	; (8002f88 <HAL_SD_MspInit+0x124>)
 8002f3e:	f004 f853 	bl	8006fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f42:	2304      	movs	r3, #4
 8002f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002f52:	230c      	movs	r3, #12
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f56:	f107 031c 	add.w	r3, r7, #28
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	480b      	ldr	r0, [pc, #44]	; (8002f8c <HAL_SD_MspInit+0x128>)
 8002f5e:	f004 f843 	bl	8006fe8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2100      	movs	r1, #0
 8002f66:	2031      	movs	r0, #49	; 0x31
 8002f68:	f001 f90f 	bl	800418a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002f6c:	2031      	movs	r0, #49	; 0x31
 8002f6e:	f001 f926 	bl	80041be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002f72:	bf00      	nop
 8002f74:	3730      	adds	r7, #48	; 0x30
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	52007000 	.word	0x52007000
 8002f80:	58024400 	.word	0x58024400
 8002f84:	58020400 	.word	0x58020400
 8002f88:	58020800 	.word	0x58020800
 8002f8c:	58020c00 	.word	0x58020c00

08002f90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b0be      	sub	sp, #248	; 0xf8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f98:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fac:	22b8      	movs	r2, #184	; 0xb8
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f011 fdf1 	bl	8014b98 <memset>
  if(hspi->Instance==SPI1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a72      	ldr	r2, [pc, #456]	; (8003184 <HAL_SPI_MspInit+0x1f4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	f040 80f3 	bne.w	80031a8 <HAL_SPI_MspInit+0x218>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002fc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f005 f9d1 	bl	800837c <HAL_RCCEx_PeriphCLKConfig>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002fe0:	f7ff fa00 	bl	80023e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fe4:	4b68      	ldr	r3, [pc, #416]	; (8003188 <HAL_SPI_MspInit+0x1f8>)
 8002fe6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002fea:	4a67      	ldr	r2, [pc, #412]	; (8003188 <HAL_SPI_MspInit+0x1f8>)
 8002fec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ff0:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002ff4:	4b64      	ldr	r3, [pc, #400]	; (8003188 <HAL_SPI_MspInit+0x1f8>)
 8002ff6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003000:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	4b61      	ldr	r3, [pc, #388]	; (8003188 <HAL_SPI_MspInit+0x1f8>)
 8003004:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003008:	4a5f      	ldr	r2, [pc, #380]	; (8003188 <HAL_SPI_MspInit+0x1f8>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003012:	4b5d      	ldr	r3, [pc, #372]	; (8003188 <HAL_SPI_MspInit+0x1f8>)
 8003014:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003020:	4b59      	ldr	r3, [pc, #356]	; (8003188 <HAL_SPI_MspInit+0x1f8>)
 8003022:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003026:	4a58      	ldr	r2, [pc, #352]	; (8003188 <HAL_SPI_MspInit+0x1f8>)
 8003028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800302c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003030:	4b55      	ldr	r3, [pc, #340]	; (8003188 <HAL_SPI_MspInit+0x1f8>)
 8003032:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303a:	623b      	str	r3, [r7, #32]
 800303c:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800303e:	23c0      	movs	r3, #192	; 0xc0
 8003040:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003044:	2302      	movs	r3, #2
 8003046:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003056:	2305      	movs	r3, #5
 8003058:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003060:	4619      	mov	r1, r3
 8003062:	484a      	ldr	r0, [pc, #296]	; (800318c <HAL_SPI_MspInit+0x1fc>)
 8003064:	f003 ffc0 	bl	8006fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003068:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800306c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003070:	2302      	movs	r3, #2
 8003072:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	2300      	movs	r3, #0
 8003078:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003082:	2305      	movs	r3, #5
 8003084:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003088:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800308c:	4619      	mov	r1, r3
 800308e:	4840      	ldr	r0, [pc, #256]	; (8003190 <HAL_SPI_MspInit+0x200>)
 8003090:	f003 ffaa 	bl	8006fe8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8003094:	4b3f      	ldr	r3, [pc, #252]	; (8003194 <HAL_SPI_MspInit+0x204>)
 8003096:	4a40      	ldr	r2, [pc, #256]	; (8003198 <HAL_SPI_MspInit+0x208>)
 8003098:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800309a:	4b3e      	ldr	r3, [pc, #248]	; (8003194 <HAL_SPI_MspInit+0x204>)
 800309c:	2225      	movs	r2, #37	; 0x25
 800309e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030a0:	4b3c      	ldr	r3, [pc, #240]	; (8003194 <HAL_SPI_MspInit+0x204>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a6:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <HAL_SPI_MspInit+0x204>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030ac:	4b39      	ldr	r3, [pc, #228]	; (8003194 <HAL_SPI_MspInit+0x204>)
 80030ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030b2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030b4:	4b37      	ldr	r3, [pc, #220]	; (8003194 <HAL_SPI_MspInit+0x204>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030ba:	4b36      	ldr	r3, [pc, #216]	; (8003194 <HAL_SPI_MspInit+0x204>)
 80030bc:	2200      	movs	r2, #0
 80030be:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80030c0:	4b34      	ldr	r3, [pc, #208]	; (8003194 <HAL_SPI_MspInit+0x204>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030c6:	4b33      	ldr	r3, [pc, #204]	; (8003194 <HAL_SPI_MspInit+0x204>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030cc:	4b31      	ldr	r3, [pc, #196]	; (8003194 <HAL_SPI_MspInit+0x204>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80030d2:	4830      	ldr	r0, [pc, #192]	; (8003194 <HAL_SPI_MspInit+0x204>)
 80030d4:	f001 f89c 	bl	8004210 <HAL_DMA_Init>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_SPI_MspInit+0x152>
    {
      Error_Handler();
 80030de:	f7ff f981 	bl	80023e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a2b      	ldr	r2, [pc, #172]	; (8003194 <HAL_SPI_MspInit+0x204>)
 80030e6:	67da      	str	r2, [r3, #124]	; 0x7c
 80030e8:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <HAL_SPI_MspInit+0x204>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 80030ee:	4b2b      	ldr	r3, [pc, #172]	; (800319c <HAL_SPI_MspInit+0x20c>)
 80030f0:	4a2b      	ldr	r2, [pc, #172]	; (80031a0 <HAL_SPI_MspInit+0x210>)
 80030f2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80030f4:	4b29      	ldr	r3, [pc, #164]	; (800319c <HAL_SPI_MspInit+0x20c>)
 80030f6:	2226      	movs	r2, #38	; 0x26
 80030f8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030fa:	4b28      	ldr	r3, [pc, #160]	; (800319c <HAL_SPI_MspInit+0x20c>)
 80030fc:	2240      	movs	r2, #64	; 0x40
 80030fe:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003100:	4b26      	ldr	r3, [pc, #152]	; (800319c <HAL_SPI_MspInit+0x20c>)
 8003102:	2200      	movs	r2, #0
 8003104:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003106:	4b25      	ldr	r3, [pc, #148]	; (800319c <HAL_SPI_MspInit+0x20c>)
 8003108:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800310c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <HAL_SPI_MspInit+0x20c>)
 8003110:	2200      	movs	r2, #0
 8003112:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003114:	4b21      	ldr	r3, [pc, #132]	; (800319c <HAL_SPI_MspInit+0x20c>)
 8003116:	2200      	movs	r2, #0
 8003118:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <HAL_SPI_MspInit+0x20c>)
 800311c:	2200      	movs	r2, #0
 800311e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003120:	4b1e      	ldr	r3, [pc, #120]	; (800319c <HAL_SPI_MspInit+0x20c>)
 8003122:	2200      	movs	r2, #0
 8003124:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003126:	4b1d      	ldr	r3, [pc, #116]	; (800319c <HAL_SPI_MspInit+0x20c>)
 8003128:	2200      	movs	r2, #0
 800312a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800312c:	481b      	ldr	r0, [pc, #108]	; (800319c <HAL_SPI_MspInit+0x20c>)
 800312e:	f001 f86f 	bl	8004210 <HAL_DMA_Init>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 8003138:	f7ff f954 	bl	80023e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a17      	ldr	r2, [pc, #92]	; (800319c <HAL_SPI_MspInit+0x20c>)
 8003140:	679a      	str	r2, [r3, #120]	; 0x78
 8003142:	4a16      	ldr	r2, [pc, #88]	; (800319c <HAL_SPI_MspInit+0x20c>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003148:	2200      	movs	r2, #0
 800314a:	2100      	movs	r1, #0
 800314c:	2023      	movs	r0, #35	; 0x23
 800314e:	f001 f81c 	bl	800418a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003152:	2023      	movs	r0, #35	; 0x23
 8003154:	f001 f833 	bl	80041be <HAL_NVIC_EnableIRQ>
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
//    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

    // SPI1 MISO interrupt setting FIXME
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003158:	2340      	movs	r3, #64	; 0x40
 800315a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING; //GPIO_MODE_AF_PP  | TRIGGER_RISING | TRIGGER_FALLING;
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_SPI_MspInit+0x214>)
 8003160:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316a:	2300      	movs	r3, #0
 800316c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003170:	2305      	movs	r3, #5
 8003172:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003176:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800317a:	4619      	mov	r1, r3
 800317c:	4803      	ldr	r0, [pc, #12]	; (800318c <HAL_SPI_MspInit+0x1fc>)
 800317e:	f003 ff33 	bl	8006fe8 <HAL_GPIO_Init>


  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003182:	e1cb      	b.n	800351c <HAL_SPI_MspInit+0x58c>
 8003184:	40013000 	.word	0x40013000
 8003188:	58024400 	.word	0x58024400
 800318c:	58020000 	.word	0x58020000
 8003190:	58021800 	.word	0x58021800
 8003194:	24008428 	.word	0x24008428
 8003198:	40020010 	.word	0x40020010
 800319c:	240084a0 	.word	0x240084a0
 80031a0:	40020028 	.word	0x40020028
 80031a4:	00210002 	.word	0x00210002
  else if(hspi->Instance==SPI2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a72      	ldr	r2, [pc, #456]	; (8003378 <HAL_SPI_MspInit+0x3e8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	f040 80f4 	bne.w	800339c <HAL_SPI_MspInit+0x40c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80031b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80031ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031c6:	4618      	mov	r0, r3
 80031c8:	f005 f8d8 	bl	800837c <HAL_RCCEx_PeriphCLKConfig>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_SPI_MspInit+0x246>
      Error_Handler();
 80031d2:	f7ff f907 	bl	80023e4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031d6:	4b69      	ldr	r3, [pc, #420]	; (800337c <HAL_SPI_MspInit+0x3ec>)
 80031d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80031dc:	4a67      	ldr	r2, [pc, #412]	; (800337c <HAL_SPI_MspInit+0x3ec>)
 80031de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80031e6:	4b65      	ldr	r3, [pc, #404]	; (800337c <HAL_SPI_MspInit+0x3ec>)
 80031e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80031ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f4:	4b61      	ldr	r3, [pc, #388]	; (800337c <HAL_SPI_MspInit+0x3ec>)
 80031f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031fa:	4a60      	ldr	r2, [pc, #384]	; (800337c <HAL_SPI_MspInit+0x3ec>)
 80031fc:	f043 0304 	orr.w	r3, r3, #4
 8003200:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003204:	4b5d      	ldr	r3, [pc, #372]	; (800337c <HAL_SPI_MspInit+0x3ec>)
 8003206:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	61bb      	str	r3, [r7, #24]
 8003210:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003212:	4b5a      	ldr	r3, [pc, #360]	; (800337c <HAL_SPI_MspInit+0x3ec>)
 8003214:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003218:	4a58      	ldr	r2, [pc, #352]	; (800337c <HAL_SPI_MspInit+0x3ec>)
 800321a:	f043 0302 	orr.w	r3, r3, #2
 800321e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003222:	4b56      	ldr	r3, [pc, #344]	; (800337c <HAL_SPI_MspInit+0x3ec>)
 8003224:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003230:	2302      	movs	r3, #2
 8003232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	2302      	movs	r3, #2
 8003238:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323c:	2300      	movs	r3, #0
 800323e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003242:	2300      	movs	r3, #0
 8003244:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003248:	2305      	movs	r3, #5
 800324a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800324e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003252:	4619      	mov	r1, r3
 8003254:	484a      	ldr	r0, [pc, #296]	; (8003380 <HAL_SPI_MspInit+0x3f0>)
 8003256:	f003 fec7 	bl	8006fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 800325a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800325e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326e:	2300      	movs	r3, #0
 8003270:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003274:	2305      	movs	r3, #5
 8003276:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800327a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800327e:	4619      	mov	r1, r3
 8003280:	4840      	ldr	r0, [pc, #256]	; (8003384 <HAL_SPI_MspInit+0x3f4>)
 8003282:	f003 feb1 	bl	8006fe8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream7;
 8003286:	4b40      	ldr	r3, [pc, #256]	; (8003388 <HAL_SPI_MspInit+0x3f8>)
 8003288:	4a40      	ldr	r2, [pc, #256]	; (800338c <HAL_SPI_MspInit+0x3fc>)
 800328a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800328c:	4b3e      	ldr	r3, [pc, #248]	; (8003388 <HAL_SPI_MspInit+0x3f8>)
 800328e:	2227      	movs	r2, #39	; 0x27
 8003290:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003292:	4b3d      	ldr	r3, [pc, #244]	; (8003388 <HAL_SPI_MspInit+0x3f8>)
 8003294:	2200      	movs	r2, #0
 8003296:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003298:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <HAL_SPI_MspInit+0x3f8>)
 800329a:	2200      	movs	r2, #0
 800329c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800329e:	4b3a      	ldr	r3, [pc, #232]	; (8003388 <HAL_SPI_MspInit+0x3f8>)
 80032a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032a4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032a6:	4b38      	ldr	r3, [pc, #224]	; (8003388 <HAL_SPI_MspInit+0x3f8>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032ac:	4b36      	ldr	r3, [pc, #216]	; (8003388 <HAL_SPI_MspInit+0x3f8>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80032b2:	4b35      	ldr	r3, [pc, #212]	; (8003388 <HAL_SPI_MspInit+0x3f8>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032b8:	4b33      	ldr	r3, [pc, #204]	; (8003388 <HAL_SPI_MspInit+0x3f8>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032be:	4b32      	ldr	r3, [pc, #200]	; (8003388 <HAL_SPI_MspInit+0x3f8>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80032c4:	4830      	ldr	r0, [pc, #192]	; (8003388 <HAL_SPI_MspInit+0x3f8>)
 80032c6:	f000 ffa3 	bl	8004210 <HAL_DMA_Init>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_SPI_MspInit+0x344>
      Error_Handler();
 80032d0:	f7ff f888 	bl	80023e4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a2c      	ldr	r2, [pc, #176]	; (8003388 <HAL_SPI_MspInit+0x3f8>)
 80032d8:	67da      	str	r2, [r3, #124]	; 0x7c
 80032da:	4a2b      	ldr	r2, [pc, #172]	; (8003388 <HAL_SPI_MspInit+0x3f8>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA2_Stream0;
 80032e0:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <HAL_SPI_MspInit+0x400>)
 80032e2:	4a2c      	ldr	r2, [pc, #176]	; (8003394 <HAL_SPI_MspInit+0x404>)
 80032e4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80032e6:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <HAL_SPI_MspInit+0x400>)
 80032e8:	2228      	movs	r2, #40	; 0x28
 80032ea:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032ec:	4b28      	ldr	r3, [pc, #160]	; (8003390 <HAL_SPI_MspInit+0x400>)
 80032ee:	2240      	movs	r2, #64	; 0x40
 80032f0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f2:	4b27      	ldr	r3, [pc, #156]	; (8003390 <HAL_SPI_MspInit+0x400>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032f8:	4b25      	ldr	r3, [pc, #148]	; (8003390 <HAL_SPI_MspInit+0x400>)
 80032fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032fe:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003300:	4b23      	ldr	r3, [pc, #140]	; (8003390 <HAL_SPI_MspInit+0x400>)
 8003302:	2200      	movs	r2, #0
 8003304:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003306:	4b22      	ldr	r3, [pc, #136]	; (8003390 <HAL_SPI_MspInit+0x400>)
 8003308:	2200      	movs	r2, #0
 800330a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800330c:	4b20      	ldr	r3, [pc, #128]	; (8003390 <HAL_SPI_MspInit+0x400>)
 800330e:	2200      	movs	r2, #0
 8003310:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003312:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <HAL_SPI_MspInit+0x400>)
 8003314:	2200      	movs	r2, #0
 8003316:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003318:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <HAL_SPI_MspInit+0x400>)
 800331a:	2200      	movs	r2, #0
 800331c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800331e:	481c      	ldr	r0, [pc, #112]	; (8003390 <HAL_SPI_MspInit+0x400>)
 8003320:	f000 ff76 	bl	8004210 <HAL_DMA_Init>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_SPI_MspInit+0x39e>
      Error_Handler();
 800332a:	f7ff f85b 	bl	80023e4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a17      	ldr	r2, [pc, #92]	; (8003390 <HAL_SPI_MspInit+0x400>)
 8003332:	679a      	str	r2, [r3, #120]	; 0x78
 8003334:	4a16      	ldr	r2, [pc, #88]	; (8003390 <HAL_SPI_MspInit+0x400>)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800333a:	2200      	movs	r2, #0
 800333c:	2100      	movs	r1, #0
 800333e:	2024      	movs	r0, #36	; 0x24
 8003340:	f000 ff23 	bl	800418a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003344:	2024      	movs	r0, #36	; 0x24
 8003346:	f000 ff3a 	bl	80041be <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800334a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800334e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING;// | EXTI_IT | TRIGGER_FALLING;
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <HAL_SPI_MspInit+0x408>)
 8003354:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335e:	2300      	movs	r3, #0
 8003360:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003364:	2305      	movs	r3, #5
 8003366:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800336e:	4619      	mov	r1, r3
 8003370:	4804      	ldr	r0, [pc, #16]	; (8003384 <HAL_SPI_MspInit+0x3f4>)
 8003372:	f003 fe39 	bl	8006fe8 <HAL_GPIO_Init>
}
 8003376:	e0d1      	b.n	800351c <HAL_SPI_MspInit+0x58c>
 8003378:	40003800 	.word	0x40003800
 800337c:	58024400 	.word	0x58024400
 8003380:	58020800 	.word	0x58020800
 8003384:	58020400 	.word	0x58020400
 8003388:	24008518 	.word	0x24008518
 800338c:	400200b8 	.word	0x400200b8
 8003390:	24008590 	.word	0x24008590
 8003394:	40020410 	.word	0x40020410
 8003398:	00210002 	.word	0x00210002
  else if(hspi->Instance==SPI4)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a60      	ldr	r2, [pc, #384]	; (8003524 <HAL_SPI_MspInit+0x594>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	f040 80ba 	bne.w	800351c <HAL_SPI_MspInit+0x58c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80033a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033b8:	4618      	mov	r0, r3
 80033ba:	f004 ffdf 	bl	800837c <HAL_RCCEx_PeriphCLKConfig>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_SPI_MspInit+0x438>
      Error_Handler();
 80033c4:	f7ff f80e 	bl	80023e4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80033c8:	4b57      	ldr	r3, [pc, #348]	; (8003528 <HAL_SPI_MspInit+0x598>)
 80033ca:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80033ce:	4a56      	ldr	r2, [pc, #344]	; (8003528 <HAL_SPI_MspInit+0x598>)
 80033d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033d4:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80033d8:	4b53      	ldr	r3, [pc, #332]	; (8003528 <HAL_SPI_MspInit+0x598>)
 80033da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80033de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033e6:	4b50      	ldr	r3, [pc, #320]	; (8003528 <HAL_SPI_MspInit+0x598>)
 80033e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033ec:	4a4e      	ldr	r2, [pc, #312]	; (8003528 <HAL_SPI_MspInit+0x598>)
 80033ee:	f043 0310 	orr.w	r3, r3, #16
 80033f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80033f6:	4b4c      	ldr	r3, [pc, #304]	; (8003528 <HAL_SPI_MspInit+0x598>)
 80033f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8003404:	2364      	movs	r3, #100	; 0x64
 8003406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	2300      	movs	r3, #0
 8003412:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003416:	2300      	movs	r3, #0
 8003418:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800341c:	2305      	movs	r3, #5
 800341e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003422:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003426:	4619      	mov	r1, r3
 8003428:	4840      	ldr	r0, [pc, #256]	; (800352c <HAL_SPI_MspInit+0x59c>)
 800342a:	f003 fddd 	bl	8006fe8 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA1_Stream2;
 800342e:	4b40      	ldr	r3, [pc, #256]	; (8003530 <HAL_SPI_MspInit+0x5a0>)
 8003430:	4a40      	ldr	r2, [pc, #256]	; (8003534 <HAL_SPI_MspInit+0x5a4>)
 8003432:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8003434:	4b3e      	ldr	r3, [pc, #248]	; (8003530 <HAL_SPI_MspInit+0x5a0>)
 8003436:	2253      	movs	r2, #83	; 0x53
 8003438:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800343a:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <HAL_SPI_MspInit+0x5a0>)
 800343c:	2200      	movs	r2, #0
 800343e:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003440:	4b3b      	ldr	r3, [pc, #236]	; (8003530 <HAL_SPI_MspInit+0x5a0>)
 8003442:	2200      	movs	r2, #0
 8003444:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003446:	4b3a      	ldr	r3, [pc, #232]	; (8003530 <HAL_SPI_MspInit+0x5a0>)
 8003448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800344c:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800344e:	4b38      	ldr	r3, [pc, #224]	; (8003530 <HAL_SPI_MspInit+0x5a0>)
 8003450:	2200      	movs	r2, #0
 8003452:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003454:	4b36      	ldr	r3, [pc, #216]	; (8003530 <HAL_SPI_MspInit+0x5a0>)
 8003456:	2200      	movs	r2, #0
 8003458:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800345a:	4b35      	ldr	r3, [pc, #212]	; (8003530 <HAL_SPI_MspInit+0x5a0>)
 800345c:	2200      	movs	r2, #0
 800345e:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003460:	4b33      	ldr	r3, [pc, #204]	; (8003530 <HAL_SPI_MspInit+0x5a0>)
 8003462:	2200      	movs	r2, #0
 8003464:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003466:	4b32      	ldr	r3, [pc, #200]	; (8003530 <HAL_SPI_MspInit+0x5a0>)
 8003468:	2200      	movs	r2, #0
 800346a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800346c:	4830      	ldr	r0, [pc, #192]	; (8003530 <HAL_SPI_MspInit+0x5a0>)
 800346e:	f000 fecf 	bl	8004210 <HAL_DMA_Init>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_SPI_MspInit+0x4ec>
      Error_Handler();
 8003478:	f7fe ffb4 	bl	80023e4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a2c      	ldr	r2, [pc, #176]	; (8003530 <HAL_SPI_MspInit+0x5a0>)
 8003480:	67da      	str	r2, [r3, #124]	; 0x7c
 8003482:	4a2b      	ldr	r2, [pc, #172]	; (8003530 <HAL_SPI_MspInit+0x5a0>)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA1_Stream3;
 8003488:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <HAL_SPI_MspInit+0x5a8>)
 800348a:	4a2c      	ldr	r2, [pc, #176]	; (800353c <HAL_SPI_MspInit+0x5ac>)
 800348c:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 800348e:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <HAL_SPI_MspInit+0x5a8>)
 8003490:	2254      	movs	r2, #84	; 0x54
 8003492:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003494:	4b28      	ldr	r3, [pc, #160]	; (8003538 <HAL_SPI_MspInit+0x5a8>)
 8003496:	2240      	movs	r2, #64	; 0x40
 8003498:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800349a:	4b27      	ldr	r3, [pc, #156]	; (8003538 <HAL_SPI_MspInit+0x5a8>)
 800349c:	2200      	movs	r2, #0
 800349e:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034a0:	4b25      	ldr	r3, [pc, #148]	; (8003538 <HAL_SPI_MspInit+0x5a8>)
 80034a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034a6:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034a8:	4b23      	ldr	r3, [pc, #140]	; (8003538 <HAL_SPI_MspInit+0x5a8>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034ae:	4b22      	ldr	r3, [pc, #136]	; (8003538 <HAL_SPI_MspInit+0x5a8>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80034b4:	4b20      	ldr	r3, [pc, #128]	; (8003538 <HAL_SPI_MspInit+0x5a8>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034ba:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <HAL_SPI_MspInit+0x5a8>)
 80034bc:	2200      	movs	r2, #0
 80034be:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034c0:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <HAL_SPI_MspInit+0x5a8>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80034c6:	481c      	ldr	r0, [pc, #112]	; (8003538 <HAL_SPI_MspInit+0x5a8>)
 80034c8:	f000 fea2 	bl	8004210 <HAL_DMA_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_SPI_MspInit+0x546>
      Error_Handler();
 80034d2:	f7fe ff87 	bl	80023e4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a17      	ldr	r2, [pc, #92]	; (8003538 <HAL_SPI_MspInit+0x5a8>)
 80034da:	679a      	str	r2, [r3, #120]	; 0x78
 80034dc:	4a16      	ldr	r2, [pc, #88]	; (8003538 <HAL_SPI_MspInit+0x5a8>)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80034e2:	2200      	movs	r2, #0
 80034e4:	2100      	movs	r1, #0
 80034e6:	2054      	movs	r0, #84	; 0x54
 80034e8:	f000 fe4f 	bl	800418a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80034ec:	2054      	movs	r0, #84	; 0x54
 80034ee:	f000 fe66 	bl	80041be <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80034f2:	2320      	movs	r3, #32
 80034f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING;// | EXTI_IT | TRIGGER_FALLING;
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_SPI_MspInit+0x5b0>)
 80034fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800350a:	2305      	movs	r3, #5
 800350c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003510:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003514:	4619      	mov	r1, r3
 8003516:	4805      	ldr	r0, [pc, #20]	; (800352c <HAL_SPI_MspInit+0x59c>)
 8003518:	f003 fd66 	bl	8006fe8 <HAL_GPIO_Init>
}
 800351c:	bf00      	nop
 800351e:	37f8      	adds	r7, #248	; 0xf8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40013400 	.word	0x40013400
 8003528:	58024400 	.word	0x58024400
 800352c:	58021000 	.word	0x58021000
 8003530:	24008608 	.word	0x24008608
 8003534:	40020040 	.word	0x40020040
 8003538:	24008680 	.word	0x24008680
 800353c:	40020058 	.word	0x40020058
 8003540:	00210002 	.word	0x00210002

08003544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08c      	sub	sp, #48	; 0x30
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a33      	ldr	r2, [pc, #204]	; (8003630 <HAL_TIM_Base_MspInit+0xec>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d10f      	bne.n	8003586 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003566:	4b33      	ldr	r3, [pc, #204]	; (8003634 <HAL_TIM_Base_MspInit+0xf0>)
 8003568:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800356c:	4a31      	ldr	r2, [pc, #196]	; (8003634 <HAL_TIM_Base_MspInit+0xf0>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8003576:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <HAL_TIM_Base_MspInit+0xf0>)
 8003578:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003584:	e050      	b.n	8003628 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358e:	d12f      	bne.n	80035f0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003590:	4b28      	ldr	r3, [pc, #160]	; (8003634 <HAL_TIM_Base_MspInit+0xf0>)
 8003592:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003596:	4a27      	ldr	r2, [pc, #156]	; (8003634 <HAL_TIM_Base_MspInit+0xf0>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80035a0:	4b24      	ldr	r3, [pc, #144]	; (8003634 <HAL_TIM_Base_MspInit+0xf0>)
 80035a2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ae:	4b21      	ldr	r3, [pc, #132]	; (8003634 <HAL_TIM_Base_MspInit+0xf0>)
 80035b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80035b4:	4a1f      	ldr	r2, [pc, #124]	; (8003634 <HAL_TIM_Base_MspInit+0xf0>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80035be:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <HAL_TIM_Base_MspInit+0xf0>)
 80035c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80035cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d2:	2302      	movs	r3, #2
 80035d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035da:	2300      	movs	r3, #0
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035de:	2301      	movs	r3, #1
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e2:	f107 031c 	add.w	r3, r7, #28
 80035e6:	4619      	mov	r1, r3
 80035e8:	4813      	ldr	r0, [pc, #76]	; (8003638 <HAL_TIM_Base_MspInit+0xf4>)
 80035ea:	f003 fcfd 	bl	8006fe8 <HAL_GPIO_Init>
}
 80035ee:	e01b      	b.n	8003628 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM16)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a11      	ldr	r2, [pc, #68]	; (800363c <HAL_TIM_Base_MspInit+0xf8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d116      	bne.n	8003628 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80035fa:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <HAL_TIM_Base_MspInit+0xf0>)
 80035fc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003600:	4a0c      	ldr	r2, [pc, #48]	; (8003634 <HAL_TIM_Base_MspInit+0xf0>)
 8003602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003606:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800360a:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <HAL_TIM_Base_MspInit+0xf0>)
 800360c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003618:	2200      	movs	r2, #0
 800361a:	2100      	movs	r1, #0
 800361c:	2075      	movs	r0, #117	; 0x75
 800361e:	f000 fdb4 	bl	800418a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003622:	2075      	movs	r0, #117	; 0x75
 8003624:	f000 fdcb 	bl	80041be <HAL_NVIC_EnableIRQ>
}
 8003628:	bf00      	nop
 800362a:	3730      	adds	r7, #48	; 0x30
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40010000 	.word	0x40010000
 8003634:	58024400 	.word	0x58024400
 8003638:	58020000 	.word	0x58020000
 800363c:	40014400 	.word	0x40014400

08003640 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003648:	f107 030c 	add.w	r3, r7, #12
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	609a      	str	r2, [r3, #8]
 8003654:	60da      	str	r2, [r3, #12]
 8003656:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a13      	ldr	r2, [pc, #76]	; (80036ac <HAL_TIM_MspPostInit+0x6c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d11f      	bne.n	80036a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003662:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <HAL_TIM_MspPostInit+0x70>)
 8003664:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003668:	4a11      	ldr	r2, [pc, #68]	; (80036b0 <HAL_TIM_MspPostInit+0x70>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003672:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <HAL_TIM_MspPostInit+0x70>)
 8003674:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003684:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003686:	2302      	movs	r3, #2
 8003688:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003692:	2301      	movs	r3, #1
 8003694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003696:	f107 030c 	add.w	r3, r7, #12
 800369a:	4619      	mov	r1, r3
 800369c:	4805      	ldr	r0, [pc, #20]	; (80036b4 <HAL_TIM_MspPostInit+0x74>)
 800369e:	f003 fca3 	bl	8006fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80036a2:	bf00      	nop
 80036a4:	3720      	adds	r7, #32
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40010000 	.word	0x40010000
 80036b0:	58024400 	.word	0x58024400
 80036b4:	58020000 	.word	0x58020000

080036b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b0ba      	sub	sp, #232	; 0xe8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036d0:	f107 031c 	add.w	r3, r7, #28
 80036d4:	22b8      	movs	r2, #184	; 0xb8
 80036d6:	2100      	movs	r1, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	f011 fa5d 	bl	8014b98 <memset>
  if(huart->Instance==UART4)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a67      	ldr	r2, [pc, #412]	; (8003880 <HAL_UART_MspInit+0x1c8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d177      	bne.n	80037d8 <HAL_UART_MspInit+0x120>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80036e8:	2302      	movs	r3, #2
 80036ea:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036f2:	f107 031c 	add.w	r3, r7, #28
 80036f6:	4618      	mov	r0, r3
 80036f8:	f004 fe40 	bl	800837c <HAL_RCCEx_PeriphCLKConfig>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003702:	f7fe fe6f 	bl	80023e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003706:	4b5f      	ldr	r3, [pc, #380]	; (8003884 <HAL_UART_MspInit+0x1cc>)
 8003708:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800370c:	4a5d      	ldr	r2, [pc, #372]	; (8003884 <HAL_UART_MspInit+0x1cc>)
 800370e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003712:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8003716:	4b5b      	ldr	r3, [pc, #364]	; (8003884 <HAL_UART_MspInit+0x1cc>)
 8003718:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800371c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003724:	4b57      	ldr	r3, [pc, #348]	; (8003884 <HAL_UART_MspInit+0x1cc>)
 8003726:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800372a:	4a56      	ldr	r2, [pc, #344]	; (8003884 <HAL_UART_MspInit+0x1cc>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003734:	4b53      	ldr	r3, [pc, #332]	; (8003884 <HAL_UART_MspInit+0x1cc>)
 8003736:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003742:	2303      	movs	r3, #3
 8003744:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003748:	2302      	movs	r3, #2
 800374a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374e:	2300      	movs	r3, #0
 8003750:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003754:	2300      	movs	r3, #0
 8003756:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800375a:	2308      	movs	r3, #8
 800375c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003760:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003764:	4619      	mov	r1, r3
 8003766:	4848      	ldr	r0, [pc, #288]	; (8003888 <HAL_UART_MspInit+0x1d0>)
 8003768:	f003 fc3e 	bl	8006fe8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800376c:	4b47      	ldr	r3, [pc, #284]	; (800388c <HAL_UART_MspInit+0x1d4>)
 800376e:	4a48      	ldr	r2, [pc, #288]	; (8003890 <HAL_UART_MspInit+0x1d8>)
 8003770:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8003772:	4b46      	ldr	r3, [pc, #280]	; (800388c <HAL_UART_MspInit+0x1d4>)
 8003774:	2240      	movs	r2, #64	; 0x40
 8003776:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003778:	4b44      	ldr	r3, [pc, #272]	; (800388c <HAL_UART_MspInit+0x1d4>)
 800377a:	2240      	movs	r2, #64	; 0x40
 800377c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800377e:	4b43      	ldr	r3, [pc, #268]	; (800388c <HAL_UART_MspInit+0x1d4>)
 8003780:	2200      	movs	r2, #0
 8003782:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003784:	4b41      	ldr	r3, [pc, #260]	; (800388c <HAL_UART_MspInit+0x1d4>)
 8003786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800378a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800378c:	4b3f      	ldr	r3, [pc, #252]	; (800388c <HAL_UART_MspInit+0x1d4>)
 800378e:	2200      	movs	r2, #0
 8003790:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003792:	4b3e      	ldr	r3, [pc, #248]	; (800388c <HAL_UART_MspInit+0x1d4>)
 8003794:	2200      	movs	r2, #0
 8003796:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003798:	4b3c      	ldr	r3, [pc, #240]	; (800388c <HAL_UART_MspInit+0x1d4>)
 800379a:	2200      	movs	r2, #0
 800379c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800379e:	4b3b      	ldr	r3, [pc, #236]	; (800388c <HAL_UART_MspInit+0x1d4>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037a4:	4b39      	ldr	r3, [pc, #228]	; (800388c <HAL_UART_MspInit+0x1d4>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80037aa:	4838      	ldr	r0, [pc, #224]	; (800388c <HAL_UART_MspInit+0x1d4>)
 80037ac:	f000 fd30 	bl	8004210 <HAL_DMA_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 80037b6:	f7fe fe15 	bl	80023e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a33      	ldr	r2, [pc, #204]	; (800388c <HAL_UART_MspInit+0x1d4>)
 80037be:	679a      	str	r2, [r3, #120]	; 0x78
 80037c0:	4a32      	ldr	r2, [pc, #200]	; (800388c <HAL_UART_MspInit+0x1d4>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80037c6:	2200      	movs	r2, #0
 80037c8:	2100      	movs	r1, #0
 80037ca:	2034      	movs	r0, #52	; 0x34
 80037cc:	f000 fcdd 	bl	800418a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80037d0:	2034      	movs	r0, #52	; 0x34
 80037d2:	f000 fcf4 	bl	80041be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80037d6:	e04e      	b.n	8003876 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==UART5)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a2d      	ldr	r2, [pc, #180]	; (8003894 <HAL_UART_MspInit+0x1dc>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d149      	bne.n	8003876 <HAL_UART_MspInit+0x1be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80037e2:	2302      	movs	r3, #2
 80037e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80037e6:	2300      	movs	r3, #0
 80037e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037ec:	f107 031c 	add.w	r3, r7, #28
 80037f0:	4618      	mov	r0, r3
 80037f2:	f004 fdc3 	bl	800837c <HAL_RCCEx_PeriphCLKConfig>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_UART_MspInit+0x148>
      Error_Handler();
 80037fc:	f7fe fdf2 	bl	80023e4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003800:	4b20      	ldr	r3, [pc, #128]	; (8003884 <HAL_UART_MspInit+0x1cc>)
 8003802:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003806:	4a1f      	ldr	r2, [pc, #124]	; (8003884 <HAL_UART_MspInit+0x1cc>)
 8003808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800380c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8003810:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <HAL_UART_MspInit+0x1cc>)
 8003812:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800381e:	4b19      	ldr	r3, [pc, #100]	; (8003884 <HAL_UART_MspInit+0x1cc>)
 8003820:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003824:	4a17      	ldr	r2, [pc, #92]	; (8003884 <HAL_UART_MspInit+0x1cc>)
 8003826:	f043 0302 	orr.w	r3, r3, #2
 800382a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800382e:	4b15      	ldr	r3, [pc, #84]	; (8003884 <HAL_UART_MspInit+0x1cc>)
 8003830:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800383c:	2360      	movs	r3, #96	; 0x60
 800383e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003842:	2302      	movs	r3, #2
 8003844:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384e:	2300      	movs	r3, #0
 8003850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8003854:	230e      	movs	r3, #14
 8003856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800385e:	4619      	mov	r1, r3
 8003860:	480d      	ldr	r0, [pc, #52]	; (8003898 <HAL_UART_MspInit+0x1e0>)
 8003862:	f003 fbc1 	bl	8006fe8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003866:	2200      	movs	r2, #0
 8003868:	2100      	movs	r1, #0
 800386a:	2035      	movs	r0, #53	; 0x35
 800386c:	f000 fc8d 	bl	800418a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003870:	2035      	movs	r0, #53	; 0x35
 8003872:	f000 fca4 	bl	80041be <HAL_NVIC_EnableIRQ>
}
 8003876:	bf00      	nop
 8003878:	37e8      	adds	r7, #232	; 0xe8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40004c00 	.word	0x40004c00
 8003884:	58024400 	.word	0x58024400
 8003888:	58020000 	.word	0x58020000
 800388c:	240088fc 	.word	0x240088fc
 8003890:	40020070 	.word	0x40020070
 8003894:	40005000 	.word	0x40005000
 8003898:	58020400 	.word	0x58020400

0800389c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80038a2:	1d3b      	adds	r3, r7, #4
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	609a      	str	r2, [r3, #8]
 80038ac:	60da      	str	r2, [r3, #12]
 80038ae:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80038b0:	4b34      	ldr	r3, [pc, #208]	; (8003984 <HAL_FMC_MspInit+0xe8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d161      	bne.n	800397c <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 80038b8:	4b32      	ldr	r3, [pc, #200]	; (8003984 <HAL_FMC_MspInit+0xe8>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80038be:	4b32      	ldr	r3, [pc, #200]	; (8003988 <HAL_FMC_MspInit+0xec>)
 80038c0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80038c4:	4a30      	ldr	r2, [pc, #192]	; (8003988 <HAL_FMC_MspInit+0xec>)
 80038c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038ca:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80038ce:	4b2e      	ldr	r3, [pc, #184]	; (8003988 <HAL_FMC_MspInit+0xec>)
 80038d0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80038d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80038dc:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80038e0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e2:	2302      	movs	r3, #2
 80038e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ea:	2303      	movs	r3, #3
 80038ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038ee:	230c      	movs	r3, #12
 80038f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038f2:	1d3b      	adds	r3, r7, #4
 80038f4:	4619      	mov	r1, r3
 80038f6:	4825      	ldr	r0, [pc, #148]	; (800398c <HAL_FMC_MspInit+0xf0>)
 80038f8:	f003 fb76 	bl	8006fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80038fc:	230d      	movs	r3, #13
 80038fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003900:	2302      	movs	r3, #2
 8003902:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003908:	2303      	movs	r3, #3
 800390a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800390c:	230c      	movs	r3, #12
 800390e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003910:	1d3b      	adds	r3, r7, #4
 8003912:	4619      	mov	r1, r3
 8003914:	481e      	ldr	r0, [pc, #120]	; (8003990 <HAL_FMC_MspInit+0xf4>)
 8003916:	f003 fb67 	bl	8006fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 800391a:	f248 1337 	movw	r3, #33079	; 0x8137
 800391e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003920:	2302      	movs	r3, #2
 8003922:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003928:	2303      	movs	r3, #3
 800392a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800392c:	230c      	movs	r3, #12
 800392e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003930:	1d3b      	adds	r3, r7, #4
 8003932:	4619      	mov	r1, r3
 8003934:	4817      	ldr	r0, [pc, #92]	; (8003994 <HAL_FMC_MspInit+0xf8>)
 8003936:	f003 fb57 	bl	8006fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800393a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800393e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003940:	2302      	movs	r3, #2
 8003942:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003948:	2303      	movs	r3, #3
 800394a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800394c:	230c      	movs	r3, #12
 800394e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003950:	1d3b      	adds	r3, r7, #4
 8003952:	4619      	mov	r1, r3
 8003954:	4810      	ldr	r0, [pc, #64]	; (8003998 <HAL_FMC_MspInit+0xfc>)
 8003956:	f003 fb47 	bl	8006fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800395a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800395e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003960:	2302      	movs	r3, #2
 8003962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003968:	2303      	movs	r3, #3
 800396a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800396c:	230c      	movs	r3, #12
 800396e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003970:	1d3b      	adds	r3, r7, #4
 8003972:	4619      	mov	r1, r3
 8003974:	4809      	ldr	r0, [pc, #36]	; (800399c <HAL_FMC_MspInit+0x100>)
 8003976:	f003 fb37 	bl	8006fe8 <HAL_GPIO_Init>
 800397a:	e000      	b.n	800397e <HAL_FMC_MspInit+0xe2>
    return;
 800397c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	24008a08 	.word	0x24008a08
 8003988:	58024400 	.word	0x58024400
 800398c:	58021400 	.word	0x58021400
 8003990:	58020800 	.word	0x58020800
 8003994:	58021800 	.word	0x58021800
 8003998:	58021000 	.word	0x58021000
 800399c:	58020c00 	.word	0x58020c00

080039a0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80039a8:	f7ff ff78 	bl	800389c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039b8:	e7fe      	b.n	80039b8 <NMI_Handler+0x4>

080039ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039ba:	b480      	push	{r7}
 80039bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039be:	e7fe      	b.n	80039be <HardFault_Handler+0x4>

080039c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039c4:	e7fe      	b.n	80039c4 <MemManage_Handler+0x4>

080039c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039c6:	b480      	push	{r7}
 80039c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039ca:	e7fe      	b.n	80039ca <BusFault_Handler+0x4>

080039cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039d0:	e7fe      	b.n	80039d0 <UsageFault_Handler+0x4>

080039d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039d2:	b480      	push	{r7}
 80039d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039e4:	bf00      	nop
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ee:	b480      	push	{r7}
 80039f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a00:	f000 fa80 	bl	8003f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a04:	bf00      	nop
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003a0c:	4802      	ldr	r0, [pc, #8]	; (8003a18 <DMA1_Stream0_IRQHandler+0x10>)
 8003a0e:	f001 ff5d 	bl	80058cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	24008428 	.word	0x24008428

08003a1c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003a20:	4802      	ldr	r0, [pc, #8]	; (8003a2c <DMA1_Stream1_IRQHandler+0x10>)
 8003a22:	f001 ff53 	bl	80058cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	240084a0 	.word	0x240084a0

08003a30 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8003a34:	4802      	ldr	r0, [pc, #8]	; (8003a40 <DMA1_Stream2_IRQHandler+0x10>)
 8003a36:	f001 ff49 	bl	80058cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	24008608 	.word	0x24008608

08003a44 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8003a48:	4802      	ldr	r0, [pc, #8]	; (8003a54 <DMA1_Stream3_IRQHandler+0x10>)
 8003a4a:	f001 ff3f 	bl	80058cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	24008680 	.word	0x24008680

08003a58 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003a5c:	4802      	ldr	r0, [pc, #8]	; (8003a68 <DMA1_Stream4_IRQHandler+0x10>)
 8003a5e:	f001 ff35 	bl	80058cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	240088fc 	.word	0x240088fc

08003a6c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003a70:	4802      	ldr	r0, [pc, #8]	; (8003a7c <SPI1_IRQHandler+0x10>)
 8003a72:	f008 fef7 	bl	800c864 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	24008290 	.word	0x24008290

08003a80 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003a84:	4802      	ldr	r0, [pc, #8]	; (8003a90 <SPI2_IRQHandler+0x10>)
 8003a86:	f008 feed 	bl	800c864 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	24008318 	.word	0x24008318

08003a94 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003a98:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <DMA1_Stream7_IRQHandler+0x10>)
 8003a9a:	f001 ff17 	bl	80058cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	24008518 	.word	0x24008518

08003aa8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003aac:	4802      	ldr	r0, [pc, #8]	; (8003ab8 <SDMMC1_IRQHandler+0x10>)
 8003aae:	f006 ff7d 	bl	800a9ac <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	24008214 	.word	0x24008214

08003abc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003ac0:	4802      	ldr	r0, [pc, #8]	; (8003acc <UART4_IRQHandler+0x10>)
 8003ac2:	f00b f8c3 	bl	800ec4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	240087dc 	.word	0x240087dc

08003ad0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003ad4:	4802      	ldr	r0, [pc, #8]	; (8003ae0 <UART5_IRQHandler+0x10>)
 8003ad6:	f00b f8b9 	bl	800ec4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	2400886c 	.word	0x2400886c

08003ae4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003ae8:	4802      	ldr	r0, [pc, #8]	; (8003af4 <DMA2_Stream0_IRQHandler+0x10>)
 8003aea:	f001 feef 	bl	80058cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	24008590 	.word	0x24008590

08003af8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8003afc:	4802      	ldr	r0, [pc, #8]	; (8003b08 <SPI4_IRQHandler+0x10>)
 8003afe:	f008 feb1 	bl	800c864 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	240083a0 	.word	0x240083a0

08003b0c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003b10:	4802      	ldr	r0, [pc, #8]	; (8003b1c <TIM16_IRQHandler+0x10>)
 8003b12:	f009 fbbf 	bl	800d294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	24008790 	.word	0x24008790

08003b20 <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI9_5_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003b24:	2020      	movs	r0, #32
 8003b26:	f003 fc42 	bl	80073ae <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003b2a:	2040      	movs	r0, #64	; 0x40
 8003b2c:	f003 fc3f 	bl	80073ae <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003b30:	2080      	movs	r0, #128	; 0x80
 8003b32:	f003 fc3c 	bl	80073ae <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003b36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b3a:	f003 fc38 	bl	80073ae <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003b46:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b4a:	f003 fc30 	bl	80073ae <HAL_GPIO_EXTI_IRQHandler>

}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b52:	b480      	push	{r7}
 8003b54:	af00      	add	r7, sp, #0
	return 1;
 8003b56:	2301      	movs	r3, #1
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <_kill>:

int _kill(int pid, int sig)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b6c:	f010 ffdc 	bl	8014b28 <__errno>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2216      	movs	r2, #22
 8003b74:	601a      	str	r2, [r3, #0]
	return -1;
 8003b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <_exit>:

void _exit (int status)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b8a:	f04f 31ff 	mov.w	r1, #4294967295
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff ffe7 	bl	8003b62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b94:	e7fe      	b.n	8003b94 <_exit+0x12>

08003b96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b086      	sub	sp, #24
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	e00a      	b.n	8003bbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ba8:	f3af 8000 	nop.w
 8003bac:	4601      	mov	r1, r0
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	60ba      	str	r2, [r7, #8]
 8003bb4:	b2ca      	uxtb	r2, r1
 8003bb6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	dbf0      	blt.n	8003ba8 <_read+0x12>
	}

return len;
 8003bc6:	687b      	ldr	r3, [r7, #4]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	e009      	b.n	8003bf6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	60ba      	str	r2, [r7, #8]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	dbf1      	blt.n	8003be2 <_write+0x12>
	}
	return len;
 8003bfe:	687b      	ldr	r3, [r7, #4]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <_close>:

int _close(int file)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	return -1;
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c30:	605a      	str	r2, [r3, #4]
	return 0;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <_isatty>:

int _isatty(int file)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	return 1;
 8003c48:	2301      	movs	r3, #1
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
	return 0;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <_sbrk+0x5c>)
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <_sbrk+0x60>)
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c84:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <_sbrk+0x64>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <_sbrk+0x64>)
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <_sbrk+0x68>)
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <_sbrk+0x64>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d207      	bcs.n	8003cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ca0:	f010 ff42 	bl	8014b28 <__errno>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	220c      	movs	r2, #12
 8003ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cae:	e009      	b.n	8003cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cb0:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <_sbrk+0x64>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <_sbrk+0x64>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <_sbrk+0x64>)
 8003cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	24100000 	.word	0x24100000
 8003cd0:	00000800 	.word	0x00000800
 8003cd4:	24008a0c 	.word	0x24008a0c
 8003cd8:	24008ec8 	.word	0x24008ec8

08003cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ce0:	4b32      	ldr	r3, [pc, #200]	; (8003dac <SystemInit+0xd0>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce6:	4a31      	ldr	r2, [pc, #196]	; (8003dac <SystemInit+0xd0>)
 8003ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003cf0:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <SystemInit+0xd4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d807      	bhi.n	8003d0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003cfc:	4b2c      	ldr	r3, [pc, #176]	; (8003db0 <SystemInit+0xd4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f023 030f 	bic.w	r3, r3, #15
 8003d04:	4a2a      	ldr	r2, [pc, #168]	; (8003db0 <SystemInit+0xd4>)
 8003d06:	f043 0303 	orr.w	r3, r3, #3
 8003d0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003d0c:	4b29      	ldr	r3, [pc, #164]	; (8003db4 <SystemInit+0xd8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a28      	ldr	r2, [pc, #160]	; (8003db4 <SystemInit+0xd8>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d18:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <SystemInit+0xd8>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003d1e:	4b25      	ldr	r3, [pc, #148]	; (8003db4 <SystemInit+0xd8>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4924      	ldr	r1, [pc, #144]	; (8003db4 <SystemInit+0xd8>)
 8003d24:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <SystemInit+0xdc>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d2a:	4b21      	ldr	r3, [pc, #132]	; (8003db0 <SystemInit+0xd4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d36:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <SystemInit+0xd4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 030f 	bic.w	r3, r3, #15
 8003d3e:	4a1c      	ldr	r2, [pc, #112]	; (8003db0 <SystemInit+0xd4>)
 8003d40:	f043 0303 	orr.w	r3, r3, #3
 8003d44:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003d46:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <SystemInit+0xd8>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <SystemInit+0xd8>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003d52:	4b18      	ldr	r3, [pc, #96]	; (8003db4 <SystemInit+0xd8>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003d58:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <SystemInit+0xd8>)
 8003d5a:	4a18      	ldr	r2, [pc, #96]	; (8003dbc <SystemInit+0xe0>)
 8003d5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <SystemInit+0xd8>)
 8003d60:	4a17      	ldr	r2, [pc, #92]	; (8003dc0 <SystemInit+0xe4>)
 8003d62:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003d64:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <SystemInit+0xd8>)
 8003d66:	4a17      	ldr	r2, [pc, #92]	; (8003dc4 <SystemInit+0xe8>)
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003d6a:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <SystemInit+0xd8>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003d70:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <SystemInit+0xd8>)
 8003d72:	4a14      	ldr	r2, [pc, #80]	; (8003dc4 <SystemInit+0xe8>)
 8003d74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003d76:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <SystemInit+0xd8>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003d7c:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <SystemInit+0xd8>)
 8003d7e:	4a11      	ldr	r2, [pc, #68]	; (8003dc4 <SystemInit+0xe8>)
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <SystemInit+0xd8>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <SystemInit+0xd8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a09      	ldr	r2, [pc, #36]	; (8003db4 <SystemInit+0xd8>)
 8003d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d94:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <SystemInit+0xd8>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <SystemInit+0xec>)
 8003d9c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003da0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003da2:	bf00      	nop
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	e000ed00 	.word	0xe000ed00
 8003db0:	52002000 	.word	0x52002000
 8003db4:	58024400 	.word	0x58024400
 8003db8:	eaf6ed7f 	.word	0xeaf6ed7f
 8003dbc:	02020200 	.word	0x02020200
 8003dc0:	01ff0000 	.word	0x01ff0000
 8003dc4:	01010280 	.word	0x01010280
 8003dc8:	52004000 	.word	0x52004000

08003dcc <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 8003dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003dd0:	f7ff ff84 	bl	8003cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003dd4:	480c      	ldr	r0, [pc, #48]	; (8003e08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003dd6:	490d      	ldr	r1, [pc, #52]	; (8003e0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003dd8:	4a0d      	ldr	r2, [pc, #52]	; (8003e10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ddc:	e002      	b.n	8003de4 <LoopCopyDataInit>

08003dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003de2:	3304      	adds	r3, #4

08003de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003de8:	d3f9      	bcc.n	8003dde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dea:	4a0a      	ldr	r2, [pc, #40]	; (8003e14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003dec:	4c0a      	ldr	r4, [pc, #40]	; (8003e18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003df0:	e001      	b.n	8003df6 <LoopFillZerobss>

08003df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003df4:	3204      	adds	r2, #4

08003df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003df8:	d3fb      	bcc.n	8003df2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003dfa:	f010 fe9b 	bl	8014b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dfe:	f7fc ff51 	bl	8000ca4 <main>
  bx  lr
 8003e02:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 8003e04:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003e08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003e0c:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8003e10:	08018690 	.word	0x08018690
  ldr r2, =_sbss
 8003e14:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8003e18:	24008ec8 	.word	0x24008ec8

08003e1c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e1c:	e7fe      	b.n	8003e1c <ADC_IRQHandler>
	...

08003e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e26:	2003      	movs	r0, #3
 8003e28:	f000 f9a4 	bl	8004174 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003e2c:	f004 f8d0 	bl	8007fd0 <HAL_RCC_GetSysClockFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <HAL_Init+0x68>)
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	0a1b      	lsrs	r3, r3, #8
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	4913      	ldr	r1, [pc, #76]	; (8003e8c <HAL_Init+0x6c>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
 8003e48:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003e4a:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <HAL_Init+0x68>)
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	4a0e      	ldr	r2, [pc, #56]	; (8003e8c <HAL_Init+0x6c>)
 8003e54:	5cd3      	ldrb	r3, [r2, r3]
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e60:	4a0b      	ldr	r2, [pc, #44]	; (8003e90 <HAL_Init+0x70>)
 8003e62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e64:	4a0b      	ldr	r2, [pc, #44]	; (8003e94 <HAL_Init+0x74>)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e6a:	200e      	movs	r0, #14
 8003e6c:	f000 f814 	bl	8003e98 <HAL_InitTick>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e002      	b.n	8003e80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e7a:	f7fe ffd9 	bl	8002e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	58024400 	.word	0x58024400
 8003e8c:	08018124 	.word	0x08018124
 8003e90:	24000010 	.word	0x24000010
 8003e94:	2400000c 	.word	0x2400000c

08003e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003ea0:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <HAL_InitTick+0x60>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e021      	b.n	8003ef0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003eac:	4b13      	ldr	r3, [pc, #76]	; (8003efc <HAL_InitTick+0x64>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <HAL_InitTick+0x60>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f997 	bl	80041f6 <HAL_SYSTICK_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e00e      	b.n	8003ef0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b0f      	cmp	r3, #15
 8003ed6:	d80a      	bhi.n	8003eee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ed8:	2200      	movs	r2, #0
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee0:	f000 f953 	bl	800418a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ee4:	4a06      	ldr	r2, [pc, #24]	; (8003f00 <HAL_InitTick+0x68>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e000      	b.n	8003ef0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	24000018 	.word	0x24000018
 8003efc:	2400000c 	.word	0x2400000c
 8003f00:	24000014 	.word	0x24000014

08003f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_IncTick+0x20>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_IncTick+0x24>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4413      	add	r3, r2
 8003f14:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <HAL_IncTick+0x24>)
 8003f16:	6013      	str	r3, [r2, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	24000018 	.word	0x24000018
 8003f28:	24008a10 	.word	0x24008a10

08003f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <HAL_GetTick+0x14>)
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	24008a10 	.word	0x24008a10

08003f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f4c:	f7ff ffee 	bl	8003f2c <HAL_GetTick>
 8003f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d005      	beq.n	8003f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <HAL_Delay+0x44>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f6a:	bf00      	nop
 8003f6c:	f7ff ffde 	bl	8003f2c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d8f7      	bhi.n	8003f6c <HAL_Delay+0x28>
  {
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	24000018 	.word	0x24000018

08003f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <__NVIC_SetPriorityGrouping+0x40>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fa8:	4013      	ands	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fba:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <__NVIC_SetPriorityGrouping+0x40>)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	60d3      	str	r3, [r2, #12]
}
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	e000ed00 	.word	0xe000ed00
 8003fd0:	05fa0000 	.word	0x05fa0000

08003fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fd8:	4b04      	ldr	r3, [pc, #16]	; (8003fec <__NVIC_GetPriorityGrouping+0x18>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	0a1b      	lsrs	r3, r3, #8
 8003fde:	f003 0307 	and.w	r3, r3, #7
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	e000ed00 	.word	0xe000ed00

08003ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	db0b      	blt.n	800401a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	f003 021f 	and.w	r2, r3, #31
 8004008:	4907      	ldr	r1, [pc, #28]	; (8004028 <__NVIC_EnableIRQ+0x38>)
 800400a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	2001      	movs	r0, #1
 8004012:	fa00 f202 	lsl.w	r2, r0, r2
 8004016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	e000e100 	.word	0xe000e100

0800402c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800403a:	2b00      	cmp	r3, #0
 800403c:	db12      	blt.n	8004064 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	f003 021f 	and.w	r2, r3, #31
 8004044:	490a      	ldr	r1, [pc, #40]	; (8004070 <__NVIC_DisableIRQ+0x44>)
 8004046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	2001      	movs	r0, #1
 800404e:	fa00 f202 	lsl.w	r2, r0, r2
 8004052:	3320      	adds	r3, #32
 8004054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004058:	f3bf 8f4f 	dsb	sy
}
 800405c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800405e:	f3bf 8f6f 	isb	sy
}
 8004062:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	e000e100 	.word	0xe000e100

08004074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	6039      	str	r1, [r7, #0]
 800407e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004084:	2b00      	cmp	r3, #0
 8004086:	db0a      	blt.n	800409e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	b2da      	uxtb	r2, r3
 800408c:	490c      	ldr	r1, [pc, #48]	; (80040c0 <__NVIC_SetPriority+0x4c>)
 800408e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004092:	0112      	lsls	r2, r2, #4
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	440b      	add	r3, r1
 8004098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800409c:	e00a      	b.n	80040b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	4908      	ldr	r1, [pc, #32]	; (80040c4 <__NVIC_SetPriority+0x50>)
 80040a4:	88fb      	ldrh	r3, [r7, #6]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	3b04      	subs	r3, #4
 80040ac:	0112      	lsls	r2, r2, #4
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	440b      	add	r3, r1
 80040b2:	761a      	strb	r2, [r3, #24]
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	e000e100 	.word	0xe000e100
 80040c4:	e000ed00 	.word	0xe000ed00

080040c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	; 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f1c3 0307 	rsb	r3, r3, #7
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	bf28      	it	cs
 80040e6:	2304      	movcs	r3, #4
 80040e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3304      	adds	r3, #4
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d902      	bls.n	80040f8 <NVIC_EncodePriority+0x30>
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	3b03      	subs	r3, #3
 80040f6:	e000      	b.n	80040fa <NVIC_EncodePriority+0x32>
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43da      	mvns	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	401a      	ands	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004110:	f04f 31ff 	mov.w	r1, #4294967295
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	fa01 f303 	lsl.w	r3, r1, r3
 800411a:	43d9      	mvns	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004120:	4313      	orrs	r3, r2
         );
}
 8004122:	4618      	mov	r0, r3
 8004124:	3724      	adds	r7, #36	; 0x24
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3b01      	subs	r3, #1
 800413c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004140:	d301      	bcc.n	8004146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004142:	2301      	movs	r3, #1
 8004144:	e00f      	b.n	8004166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004146:	4a0a      	ldr	r2, [pc, #40]	; (8004170 <SysTick_Config+0x40>)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3b01      	subs	r3, #1
 800414c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800414e:	210f      	movs	r1, #15
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	f7ff ff8e 	bl	8004074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <SysTick_Config+0x40>)
 800415a:	2200      	movs	r2, #0
 800415c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800415e:	4b04      	ldr	r3, [pc, #16]	; (8004170 <SysTick_Config+0x40>)
 8004160:	2207      	movs	r2, #7
 8004162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	e000e010 	.word	0xe000e010

08004174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff ff05 	bl	8003f8c <__NVIC_SetPriorityGrouping>
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b086      	sub	sp, #24
 800418e:	af00      	add	r7, sp, #0
 8004190:	4603      	mov	r3, r0
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004198:	f7ff ff1c 	bl	8003fd4 <__NVIC_GetPriorityGrouping>
 800419c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	6978      	ldr	r0, [r7, #20]
 80041a4:	f7ff ff90 	bl	80040c8 <NVIC_EncodePriority>
 80041a8:	4602      	mov	r2, r0
 80041aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff ff5f 	bl	8004074 <__NVIC_SetPriority>
}
 80041b6:	bf00      	nop
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b082      	sub	sp, #8
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	4603      	mov	r3, r0
 80041c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff ff0f 	bl	8003ff0 <__NVIC_EnableIRQ>
}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	4603      	mov	r3, r0
 80041e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80041e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff ff1f 	bl	800402c <__NVIC_DisableIRQ>
}
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff ff96 	bl	8004130 <SysTick_Config>
 8004204:	4603      	mov	r3, r0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004218:	f7ff fe88 	bl	8003f2c <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e37f      	b.n	8004928 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a66      	ldr	r2, [pc, #408]	; (80043c8 <HAL_DMA_Init+0x1b8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d04a      	beq.n	80042c8 <HAL_DMA_Init+0xb8>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a65      	ldr	r2, [pc, #404]	; (80043cc <HAL_DMA_Init+0x1bc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d045      	beq.n	80042c8 <HAL_DMA_Init+0xb8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a63      	ldr	r2, [pc, #396]	; (80043d0 <HAL_DMA_Init+0x1c0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d040      	beq.n	80042c8 <HAL_DMA_Init+0xb8>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a62      	ldr	r2, [pc, #392]	; (80043d4 <HAL_DMA_Init+0x1c4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d03b      	beq.n	80042c8 <HAL_DMA_Init+0xb8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a60      	ldr	r2, [pc, #384]	; (80043d8 <HAL_DMA_Init+0x1c8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d036      	beq.n	80042c8 <HAL_DMA_Init+0xb8>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a5f      	ldr	r2, [pc, #380]	; (80043dc <HAL_DMA_Init+0x1cc>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d031      	beq.n	80042c8 <HAL_DMA_Init+0xb8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a5d      	ldr	r2, [pc, #372]	; (80043e0 <HAL_DMA_Init+0x1d0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d02c      	beq.n	80042c8 <HAL_DMA_Init+0xb8>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a5c      	ldr	r2, [pc, #368]	; (80043e4 <HAL_DMA_Init+0x1d4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d027      	beq.n	80042c8 <HAL_DMA_Init+0xb8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a5a      	ldr	r2, [pc, #360]	; (80043e8 <HAL_DMA_Init+0x1d8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d022      	beq.n	80042c8 <HAL_DMA_Init+0xb8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a59      	ldr	r2, [pc, #356]	; (80043ec <HAL_DMA_Init+0x1dc>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d01d      	beq.n	80042c8 <HAL_DMA_Init+0xb8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a57      	ldr	r2, [pc, #348]	; (80043f0 <HAL_DMA_Init+0x1e0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d018      	beq.n	80042c8 <HAL_DMA_Init+0xb8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a56      	ldr	r2, [pc, #344]	; (80043f4 <HAL_DMA_Init+0x1e4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d013      	beq.n	80042c8 <HAL_DMA_Init+0xb8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a54      	ldr	r2, [pc, #336]	; (80043f8 <HAL_DMA_Init+0x1e8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00e      	beq.n	80042c8 <HAL_DMA_Init+0xb8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a53      	ldr	r2, [pc, #332]	; (80043fc <HAL_DMA_Init+0x1ec>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d009      	beq.n	80042c8 <HAL_DMA_Init+0xb8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a51      	ldr	r2, [pc, #324]	; (8004400 <HAL_DMA_Init+0x1f0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d004      	beq.n	80042c8 <HAL_DMA_Init+0xb8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a50      	ldr	r2, [pc, #320]	; (8004404 <HAL_DMA_Init+0x1f4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d101      	bne.n	80042cc <HAL_DMA_Init+0xbc>
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <HAL_DMA_Init+0xbe>
 80042cc:	2300      	movs	r3, #0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 813c 	beq.w	800454c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a37      	ldr	r2, [pc, #220]	; (80043c8 <HAL_DMA_Init+0x1b8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d04a      	beq.n	8004384 <HAL_DMA_Init+0x174>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a36      	ldr	r2, [pc, #216]	; (80043cc <HAL_DMA_Init+0x1bc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d045      	beq.n	8004384 <HAL_DMA_Init+0x174>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a34      	ldr	r2, [pc, #208]	; (80043d0 <HAL_DMA_Init+0x1c0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d040      	beq.n	8004384 <HAL_DMA_Init+0x174>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a33      	ldr	r2, [pc, #204]	; (80043d4 <HAL_DMA_Init+0x1c4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d03b      	beq.n	8004384 <HAL_DMA_Init+0x174>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a31      	ldr	r2, [pc, #196]	; (80043d8 <HAL_DMA_Init+0x1c8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d036      	beq.n	8004384 <HAL_DMA_Init+0x174>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a30      	ldr	r2, [pc, #192]	; (80043dc <HAL_DMA_Init+0x1cc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d031      	beq.n	8004384 <HAL_DMA_Init+0x174>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a2e      	ldr	r2, [pc, #184]	; (80043e0 <HAL_DMA_Init+0x1d0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d02c      	beq.n	8004384 <HAL_DMA_Init+0x174>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a2d      	ldr	r2, [pc, #180]	; (80043e4 <HAL_DMA_Init+0x1d4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d027      	beq.n	8004384 <HAL_DMA_Init+0x174>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a2b      	ldr	r2, [pc, #172]	; (80043e8 <HAL_DMA_Init+0x1d8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d022      	beq.n	8004384 <HAL_DMA_Init+0x174>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a2a      	ldr	r2, [pc, #168]	; (80043ec <HAL_DMA_Init+0x1dc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d01d      	beq.n	8004384 <HAL_DMA_Init+0x174>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a28      	ldr	r2, [pc, #160]	; (80043f0 <HAL_DMA_Init+0x1e0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d018      	beq.n	8004384 <HAL_DMA_Init+0x174>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a27      	ldr	r2, [pc, #156]	; (80043f4 <HAL_DMA_Init+0x1e4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d013      	beq.n	8004384 <HAL_DMA_Init+0x174>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <HAL_DMA_Init+0x1e8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00e      	beq.n	8004384 <HAL_DMA_Init+0x174>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a24      	ldr	r2, [pc, #144]	; (80043fc <HAL_DMA_Init+0x1ec>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d009      	beq.n	8004384 <HAL_DMA_Init+0x174>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a22      	ldr	r2, [pc, #136]	; (8004400 <HAL_DMA_Init+0x1f0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d004      	beq.n	8004384 <HAL_DMA_Init+0x174>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a21      	ldr	r2, [pc, #132]	; (8004404 <HAL_DMA_Init+0x1f4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d108      	bne.n	8004396 <HAL_DMA_Init+0x186>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0201 	bic.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	e007      	b.n	80043a6 <HAL_DMA_Init+0x196>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0201 	bic.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043a6:	e02f      	b.n	8004408 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043a8:	f7ff fdc0 	bl	8003f2c <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b05      	cmp	r3, #5
 80043b4:	d928      	bls.n	8004408 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2203      	movs	r2, #3
 80043c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e2af      	b.n	8004928 <HAL_DMA_Init+0x718>
 80043c8:	40020010 	.word	0x40020010
 80043cc:	40020028 	.word	0x40020028
 80043d0:	40020040 	.word	0x40020040
 80043d4:	40020058 	.word	0x40020058
 80043d8:	40020070 	.word	0x40020070
 80043dc:	40020088 	.word	0x40020088
 80043e0:	400200a0 	.word	0x400200a0
 80043e4:	400200b8 	.word	0x400200b8
 80043e8:	40020410 	.word	0x40020410
 80043ec:	40020428 	.word	0x40020428
 80043f0:	40020440 	.word	0x40020440
 80043f4:	40020458 	.word	0x40020458
 80043f8:	40020470 	.word	0x40020470
 80043fc:	40020488 	.word	0x40020488
 8004400:	400204a0 	.word	0x400204a0
 8004404:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1c8      	bne.n	80043a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4b73      	ldr	r3, [pc, #460]	; (80045f0 <HAL_DMA_Init+0x3e0>)
 8004422:	4013      	ands	r3, r2
 8004424:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800442e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800443a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004446:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	2b04      	cmp	r3, #4
 800445a:	d107      	bne.n	800446c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	4313      	orrs	r3, r2
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b28      	cmp	r3, #40	; 0x28
 8004472:	d903      	bls.n	800447c <HAL_DMA_Init+0x26c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b2e      	cmp	r3, #46	; 0x2e
 800447a:	d91f      	bls.n	80044bc <HAL_DMA_Init+0x2ac>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b3e      	cmp	r3, #62	; 0x3e
 8004482:	d903      	bls.n	800448c <HAL_DMA_Init+0x27c>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b42      	cmp	r3, #66	; 0x42
 800448a:	d917      	bls.n	80044bc <HAL_DMA_Init+0x2ac>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b46      	cmp	r3, #70	; 0x46
 8004492:	d903      	bls.n	800449c <HAL_DMA_Init+0x28c>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b48      	cmp	r3, #72	; 0x48
 800449a:	d90f      	bls.n	80044bc <HAL_DMA_Init+0x2ac>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b4e      	cmp	r3, #78	; 0x4e
 80044a2:	d903      	bls.n	80044ac <HAL_DMA_Init+0x29c>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b52      	cmp	r3, #82	; 0x52
 80044aa:	d907      	bls.n	80044bc <HAL_DMA_Init+0x2ac>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b73      	cmp	r3, #115	; 0x73
 80044b2:	d905      	bls.n	80044c0 <HAL_DMA_Init+0x2b0>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b77      	cmp	r3, #119	; 0x77
 80044ba:	d801      	bhi.n	80044c0 <HAL_DMA_Init+0x2b0>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <HAL_DMA_Init+0x2b2>
 80044c0:	2300      	movs	r3, #0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044cc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f023 0307 	bic.w	r3, r3, #7
 80044e4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d117      	bne.n	8004528 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00e      	beq.n	8004528 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f002 fbe2 	bl	8006cd4 <DMA_CheckFifoParam>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d008      	beq.n	8004528 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2240      	movs	r2, #64	; 0x40
 800451a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e1ff      	b.n	8004928 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f002 fb1d 	bl	8006b70 <DMA_CalcBaseAndBitshift>
 8004536:	4603      	mov	r3, r0
 8004538:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	223f      	movs	r2, #63	; 0x3f
 8004544:	409a      	lsls	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	609a      	str	r2, [r3, #8]
 800454a:	e0fe      	b.n	800474a <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a28      	ldr	r2, [pc, #160]	; (80045f4 <HAL_DMA_Init+0x3e4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d04a      	beq.n	80045ec <HAL_DMA_Init+0x3dc>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a27      	ldr	r2, [pc, #156]	; (80045f8 <HAL_DMA_Init+0x3e8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d045      	beq.n	80045ec <HAL_DMA_Init+0x3dc>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a25      	ldr	r2, [pc, #148]	; (80045fc <HAL_DMA_Init+0x3ec>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d040      	beq.n	80045ec <HAL_DMA_Init+0x3dc>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a24      	ldr	r2, [pc, #144]	; (8004600 <HAL_DMA_Init+0x3f0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d03b      	beq.n	80045ec <HAL_DMA_Init+0x3dc>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a22      	ldr	r2, [pc, #136]	; (8004604 <HAL_DMA_Init+0x3f4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d036      	beq.n	80045ec <HAL_DMA_Init+0x3dc>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a21      	ldr	r2, [pc, #132]	; (8004608 <HAL_DMA_Init+0x3f8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d031      	beq.n	80045ec <HAL_DMA_Init+0x3dc>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a1f      	ldr	r2, [pc, #124]	; (800460c <HAL_DMA_Init+0x3fc>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d02c      	beq.n	80045ec <HAL_DMA_Init+0x3dc>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a1e      	ldr	r2, [pc, #120]	; (8004610 <HAL_DMA_Init+0x400>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d027      	beq.n	80045ec <HAL_DMA_Init+0x3dc>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1c      	ldr	r2, [pc, #112]	; (8004614 <HAL_DMA_Init+0x404>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d022      	beq.n	80045ec <HAL_DMA_Init+0x3dc>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a1b      	ldr	r2, [pc, #108]	; (8004618 <HAL_DMA_Init+0x408>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d01d      	beq.n	80045ec <HAL_DMA_Init+0x3dc>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a19      	ldr	r2, [pc, #100]	; (800461c <HAL_DMA_Init+0x40c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d018      	beq.n	80045ec <HAL_DMA_Init+0x3dc>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a18      	ldr	r2, [pc, #96]	; (8004620 <HAL_DMA_Init+0x410>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d013      	beq.n	80045ec <HAL_DMA_Init+0x3dc>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a16      	ldr	r2, [pc, #88]	; (8004624 <HAL_DMA_Init+0x414>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00e      	beq.n	80045ec <HAL_DMA_Init+0x3dc>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a15      	ldr	r2, [pc, #84]	; (8004628 <HAL_DMA_Init+0x418>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d009      	beq.n	80045ec <HAL_DMA_Init+0x3dc>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a13      	ldr	r2, [pc, #76]	; (800462c <HAL_DMA_Init+0x41c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_DMA_Init+0x3dc>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a12      	ldr	r2, [pc, #72]	; (8004630 <HAL_DMA_Init+0x420>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d123      	bne.n	8004634 <HAL_DMA_Init+0x424>
 80045ec:	2301      	movs	r3, #1
 80045ee:	e022      	b.n	8004636 <HAL_DMA_Init+0x426>
 80045f0:	fe10803f 	.word	0xfe10803f
 80045f4:	48022c08 	.word	0x48022c08
 80045f8:	48022c1c 	.word	0x48022c1c
 80045fc:	48022c30 	.word	0x48022c30
 8004600:	48022c44 	.word	0x48022c44
 8004604:	48022c58 	.word	0x48022c58
 8004608:	48022c6c 	.word	0x48022c6c
 800460c:	48022c80 	.word	0x48022c80
 8004610:	48022c94 	.word	0x48022c94
 8004614:	58025408 	.word	0x58025408
 8004618:	5802541c 	.word	0x5802541c
 800461c:	58025430 	.word	0x58025430
 8004620:	58025444 	.word	0x58025444
 8004624:	58025458 	.word	0x58025458
 8004628:	5802546c 	.word	0x5802546c
 800462c:	58025480 	.word	0x58025480
 8004630:	58025494 	.word	0x58025494
 8004634:	2300      	movs	r3, #0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d07e      	beq.n	8004738 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a80      	ldr	r2, [pc, #512]	; (8004840 <HAL_DMA_Init+0x630>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d021      	beq.n	8004688 <HAL_DMA_Init+0x478>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a7e      	ldr	r2, [pc, #504]	; (8004844 <HAL_DMA_Init+0x634>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d01c      	beq.n	8004688 <HAL_DMA_Init+0x478>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a7d      	ldr	r2, [pc, #500]	; (8004848 <HAL_DMA_Init+0x638>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d017      	beq.n	8004688 <HAL_DMA_Init+0x478>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a7b      	ldr	r2, [pc, #492]	; (800484c <HAL_DMA_Init+0x63c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d012      	beq.n	8004688 <HAL_DMA_Init+0x478>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a7a      	ldr	r2, [pc, #488]	; (8004850 <HAL_DMA_Init+0x640>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00d      	beq.n	8004688 <HAL_DMA_Init+0x478>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a78      	ldr	r2, [pc, #480]	; (8004854 <HAL_DMA_Init+0x644>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d008      	beq.n	8004688 <HAL_DMA_Init+0x478>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a77      	ldr	r2, [pc, #476]	; (8004858 <HAL_DMA_Init+0x648>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <HAL_DMA_Init+0x478>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a75      	ldr	r2, [pc, #468]	; (800485c <HAL_DMA_Init+0x64c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4b6e      	ldr	r3, [pc, #440]	; (8004860 <HAL_DMA_Init+0x650>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b40      	cmp	r3, #64	; 0x40
 80046b0:	d008      	beq.n	80046c4 <HAL_DMA_Init+0x4b4>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b80      	cmp	r3, #128	; 0x80
 80046b8:	d102      	bne.n	80046c0 <HAL_DMA_Init+0x4b0>
 80046ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046be:	e002      	b.n	80046c6 <HAL_DMA_Init+0x4b6>
 80046c0:	2300      	movs	r3, #0
 80046c2:	e000      	b.n	80046c6 <HAL_DMA_Init+0x4b6>
 80046c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68d2      	ldr	r2, [r2, #12]
 80046ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80046d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80046dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80046e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80046ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80046f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	4b56      	ldr	r3, [pc, #344]	; (8004864 <HAL_DMA_Init+0x654>)
 800470c:	4413      	add	r3, r2
 800470e:	4a56      	ldr	r2, [pc, #344]	; (8004868 <HAL_DMA_Init+0x658>)
 8004710:	fba2 2303 	umull	r2, r3, r2, r3
 8004714:	091b      	lsrs	r3, r3, #4
 8004716:	009a      	lsls	r2, r3, #2
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f002 fa27 	bl	8006b70 <DMA_CalcBaseAndBitshift>
 8004722:	4603      	mov	r3, r0
 8004724:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	2201      	movs	r2, #1
 8004730:	409a      	lsls	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	e008      	b.n	800474a <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2240      	movs	r2, #64	; 0x40
 800473c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2203      	movs	r2, #3
 8004742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e0ee      	b.n	8004928 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a47      	ldr	r2, [pc, #284]	; (800486c <HAL_DMA_Init+0x65c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d072      	beq.n	800483a <HAL_DMA_Init+0x62a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a45      	ldr	r2, [pc, #276]	; (8004870 <HAL_DMA_Init+0x660>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d06d      	beq.n	800483a <HAL_DMA_Init+0x62a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a44      	ldr	r2, [pc, #272]	; (8004874 <HAL_DMA_Init+0x664>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d068      	beq.n	800483a <HAL_DMA_Init+0x62a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a42      	ldr	r2, [pc, #264]	; (8004878 <HAL_DMA_Init+0x668>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d063      	beq.n	800483a <HAL_DMA_Init+0x62a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a41      	ldr	r2, [pc, #260]	; (800487c <HAL_DMA_Init+0x66c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d05e      	beq.n	800483a <HAL_DMA_Init+0x62a>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a3f      	ldr	r2, [pc, #252]	; (8004880 <HAL_DMA_Init+0x670>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d059      	beq.n	800483a <HAL_DMA_Init+0x62a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a3e      	ldr	r2, [pc, #248]	; (8004884 <HAL_DMA_Init+0x674>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d054      	beq.n	800483a <HAL_DMA_Init+0x62a>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a3c      	ldr	r2, [pc, #240]	; (8004888 <HAL_DMA_Init+0x678>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d04f      	beq.n	800483a <HAL_DMA_Init+0x62a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a3b      	ldr	r2, [pc, #236]	; (800488c <HAL_DMA_Init+0x67c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d04a      	beq.n	800483a <HAL_DMA_Init+0x62a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a39      	ldr	r2, [pc, #228]	; (8004890 <HAL_DMA_Init+0x680>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d045      	beq.n	800483a <HAL_DMA_Init+0x62a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a38      	ldr	r2, [pc, #224]	; (8004894 <HAL_DMA_Init+0x684>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d040      	beq.n	800483a <HAL_DMA_Init+0x62a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a36      	ldr	r2, [pc, #216]	; (8004898 <HAL_DMA_Init+0x688>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d03b      	beq.n	800483a <HAL_DMA_Init+0x62a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a35      	ldr	r2, [pc, #212]	; (800489c <HAL_DMA_Init+0x68c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d036      	beq.n	800483a <HAL_DMA_Init+0x62a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a33      	ldr	r2, [pc, #204]	; (80048a0 <HAL_DMA_Init+0x690>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d031      	beq.n	800483a <HAL_DMA_Init+0x62a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a32      	ldr	r2, [pc, #200]	; (80048a4 <HAL_DMA_Init+0x694>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d02c      	beq.n	800483a <HAL_DMA_Init+0x62a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a30      	ldr	r2, [pc, #192]	; (80048a8 <HAL_DMA_Init+0x698>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d027      	beq.n	800483a <HAL_DMA_Init+0x62a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a14      	ldr	r2, [pc, #80]	; (8004840 <HAL_DMA_Init+0x630>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d022      	beq.n	800483a <HAL_DMA_Init+0x62a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a12      	ldr	r2, [pc, #72]	; (8004844 <HAL_DMA_Init+0x634>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01d      	beq.n	800483a <HAL_DMA_Init+0x62a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a11      	ldr	r2, [pc, #68]	; (8004848 <HAL_DMA_Init+0x638>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d018      	beq.n	800483a <HAL_DMA_Init+0x62a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a0f      	ldr	r2, [pc, #60]	; (800484c <HAL_DMA_Init+0x63c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <HAL_DMA_Init+0x62a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <HAL_DMA_Init+0x640>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00e      	beq.n	800483a <HAL_DMA_Init+0x62a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a0c      	ldr	r2, [pc, #48]	; (8004854 <HAL_DMA_Init+0x644>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d009      	beq.n	800483a <HAL_DMA_Init+0x62a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a0b      	ldr	r2, [pc, #44]	; (8004858 <HAL_DMA_Init+0x648>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_DMA_Init+0x62a>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a09      	ldr	r2, [pc, #36]	; (800485c <HAL_DMA_Init+0x64c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d138      	bne.n	80048ac <HAL_DMA_Init+0x69c>
 800483a:	2301      	movs	r3, #1
 800483c:	e037      	b.n	80048ae <HAL_DMA_Init+0x69e>
 800483e:	bf00      	nop
 8004840:	58025408 	.word	0x58025408
 8004844:	5802541c 	.word	0x5802541c
 8004848:	58025430 	.word	0x58025430
 800484c:	58025444 	.word	0x58025444
 8004850:	58025458 	.word	0x58025458
 8004854:	5802546c 	.word	0x5802546c
 8004858:	58025480 	.word	0x58025480
 800485c:	58025494 	.word	0x58025494
 8004860:	fffe000f 	.word	0xfffe000f
 8004864:	a7fdabf8 	.word	0xa7fdabf8
 8004868:	cccccccd 	.word	0xcccccccd
 800486c:	40020010 	.word	0x40020010
 8004870:	40020028 	.word	0x40020028
 8004874:	40020040 	.word	0x40020040
 8004878:	40020058 	.word	0x40020058
 800487c:	40020070 	.word	0x40020070
 8004880:	40020088 	.word	0x40020088
 8004884:	400200a0 	.word	0x400200a0
 8004888:	400200b8 	.word	0x400200b8
 800488c:	40020410 	.word	0x40020410
 8004890:	40020428 	.word	0x40020428
 8004894:	40020440 	.word	0x40020440
 8004898:	40020458 	.word	0x40020458
 800489c:	40020470 	.word	0x40020470
 80048a0:	40020488 	.word	0x40020488
 80048a4:	400204a0 	.word	0x400204a0
 80048a8:	400204b8 	.word	0x400204b8
 80048ac:	2300      	movs	r3, #0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d032      	beq.n	8004918 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f002 fa8a 	bl	8006dcc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b80      	cmp	r3, #128	; 0x80
 80048be:	d102      	bne.n	80048c6 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80048da:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d010      	beq.n	8004906 <HAL_DMA_Init+0x6f6>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d80c      	bhi.n	8004906 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f002 fb07 	bl	8006f00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004902:	605a      	str	r2, [r3, #4]
 8004904:	e008      	b.n	8004918 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e226      	b.n	8004d9a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_DMA_Start_IT+0x2a>
 8004956:	2302      	movs	r3, #2
 8004958:	e21f      	b.n	8004d9a <HAL_DMA_Start_IT+0x46a>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b01      	cmp	r3, #1
 800496c:	f040 820a 	bne.w	8004d84 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a68      	ldr	r2, [pc, #416]	; (8004b24 <HAL_DMA_Start_IT+0x1f4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d04a      	beq.n	8004a1e <HAL_DMA_Start_IT+0xee>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a66      	ldr	r2, [pc, #408]	; (8004b28 <HAL_DMA_Start_IT+0x1f8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d045      	beq.n	8004a1e <HAL_DMA_Start_IT+0xee>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a65      	ldr	r2, [pc, #404]	; (8004b2c <HAL_DMA_Start_IT+0x1fc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d040      	beq.n	8004a1e <HAL_DMA_Start_IT+0xee>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a63      	ldr	r2, [pc, #396]	; (8004b30 <HAL_DMA_Start_IT+0x200>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d03b      	beq.n	8004a1e <HAL_DMA_Start_IT+0xee>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a62      	ldr	r2, [pc, #392]	; (8004b34 <HAL_DMA_Start_IT+0x204>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d036      	beq.n	8004a1e <HAL_DMA_Start_IT+0xee>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a60      	ldr	r2, [pc, #384]	; (8004b38 <HAL_DMA_Start_IT+0x208>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d031      	beq.n	8004a1e <HAL_DMA_Start_IT+0xee>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a5f      	ldr	r2, [pc, #380]	; (8004b3c <HAL_DMA_Start_IT+0x20c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d02c      	beq.n	8004a1e <HAL_DMA_Start_IT+0xee>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a5d      	ldr	r2, [pc, #372]	; (8004b40 <HAL_DMA_Start_IT+0x210>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d027      	beq.n	8004a1e <HAL_DMA_Start_IT+0xee>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a5c      	ldr	r2, [pc, #368]	; (8004b44 <HAL_DMA_Start_IT+0x214>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d022      	beq.n	8004a1e <HAL_DMA_Start_IT+0xee>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a5a      	ldr	r2, [pc, #360]	; (8004b48 <HAL_DMA_Start_IT+0x218>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d01d      	beq.n	8004a1e <HAL_DMA_Start_IT+0xee>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a59      	ldr	r2, [pc, #356]	; (8004b4c <HAL_DMA_Start_IT+0x21c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d018      	beq.n	8004a1e <HAL_DMA_Start_IT+0xee>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a57      	ldr	r2, [pc, #348]	; (8004b50 <HAL_DMA_Start_IT+0x220>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d013      	beq.n	8004a1e <HAL_DMA_Start_IT+0xee>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a56      	ldr	r2, [pc, #344]	; (8004b54 <HAL_DMA_Start_IT+0x224>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00e      	beq.n	8004a1e <HAL_DMA_Start_IT+0xee>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a54      	ldr	r2, [pc, #336]	; (8004b58 <HAL_DMA_Start_IT+0x228>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d009      	beq.n	8004a1e <HAL_DMA_Start_IT+0xee>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a53      	ldr	r2, [pc, #332]	; (8004b5c <HAL_DMA_Start_IT+0x22c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d004      	beq.n	8004a1e <HAL_DMA_Start_IT+0xee>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a51      	ldr	r2, [pc, #324]	; (8004b60 <HAL_DMA_Start_IT+0x230>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d108      	bne.n	8004a30 <HAL_DMA_Start_IT+0x100>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	e007      	b.n	8004a40 <HAL_DMA_Start_IT+0x110>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0201 	bic.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f001 feae 	bl	80067a8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a34      	ldr	r2, [pc, #208]	; (8004b24 <HAL_DMA_Start_IT+0x1f4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d04a      	beq.n	8004aec <HAL_DMA_Start_IT+0x1bc>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a33      	ldr	r2, [pc, #204]	; (8004b28 <HAL_DMA_Start_IT+0x1f8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d045      	beq.n	8004aec <HAL_DMA_Start_IT+0x1bc>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a31      	ldr	r2, [pc, #196]	; (8004b2c <HAL_DMA_Start_IT+0x1fc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d040      	beq.n	8004aec <HAL_DMA_Start_IT+0x1bc>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a30      	ldr	r2, [pc, #192]	; (8004b30 <HAL_DMA_Start_IT+0x200>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d03b      	beq.n	8004aec <HAL_DMA_Start_IT+0x1bc>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a2e      	ldr	r2, [pc, #184]	; (8004b34 <HAL_DMA_Start_IT+0x204>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d036      	beq.n	8004aec <HAL_DMA_Start_IT+0x1bc>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a2d      	ldr	r2, [pc, #180]	; (8004b38 <HAL_DMA_Start_IT+0x208>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d031      	beq.n	8004aec <HAL_DMA_Start_IT+0x1bc>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a2b      	ldr	r2, [pc, #172]	; (8004b3c <HAL_DMA_Start_IT+0x20c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d02c      	beq.n	8004aec <HAL_DMA_Start_IT+0x1bc>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a2a      	ldr	r2, [pc, #168]	; (8004b40 <HAL_DMA_Start_IT+0x210>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d027      	beq.n	8004aec <HAL_DMA_Start_IT+0x1bc>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a28      	ldr	r2, [pc, #160]	; (8004b44 <HAL_DMA_Start_IT+0x214>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d022      	beq.n	8004aec <HAL_DMA_Start_IT+0x1bc>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a27      	ldr	r2, [pc, #156]	; (8004b48 <HAL_DMA_Start_IT+0x218>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d01d      	beq.n	8004aec <HAL_DMA_Start_IT+0x1bc>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a25      	ldr	r2, [pc, #148]	; (8004b4c <HAL_DMA_Start_IT+0x21c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d018      	beq.n	8004aec <HAL_DMA_Start_IT+0x1bc>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a24      	ldr	r2, [pc, #144]	; (8004b50 <HAL_DMA_Start_IT+0x220>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d013      	beq.n	8004aec <HAL_DMA_Start_IT+0x1bc>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a22      	ldr	r2, [pc, #136]	; (8004b54 <HAL_DMA_Start_IT+0x224>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00e      	beq.n	8004aec <HAL_DMA_Start_IT+0x1bc>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a21      	ldr	r2, [pc, #132]	; (8004b58 <HAL_DMA_Start_IT+0x228>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_DMA_Start_IT+0x1bc>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1f      	ldr	r2, [pc, #124]	; (8004b5c <HAL_DMA_Start_IT+0x22c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <HAL_DMA_Start_IT+0x1bc>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1e      	ldr	r2, [pc, #120]	; (8004b60 <HAL_DMA_Start_IT+0x230>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d101      	bne.n	8004af0 <HAL_DMA_Start_IT+0x1c0>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <HAL_DMA_Start_IT+0x1c2>
 8004af0:	2300      	movs	r3, #0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d036      	beq.n	8004b64 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f023 021e 	bic.w	r2, r3, #30
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0216 	orr.w	r2, r2, #22
 8004b08:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d03e      	beq.n	8004b90 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0208 	orr.w	r2, r2, #8
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	e035      	b.n	8004b90 <HAL_DMA_Start_IT+0x260>
 8004b24:	40020010 	.word	0x40020010
 8004b28:	40020028 	.word	0x40020028
 8004b2c:	40020040 	.word	0x40020040
 8004b30:	40020058 	.word	0x40020058
 8004b34:	40020070 	.word	0x40020070
 8004b38:	40020088 	.word	0x40020088
 8004b3c:	400200a0 	.word	0x400200a0
 8004b40:	400200b8 	.word	0x400200b8
 8004b44:	40020410 	.word	0x40020410
 8004b48:	40020428 	.word	0x40020428
 8004b4c:	40020440 	.word	0x40020440
 8004b50:	40020458 	.word	0x40020458
 8004b54:	40020470 	.word	0x40020470
 8004b58:	40020488 	.word	0x40020488
 8004b5c:	400204a0 	.word	0x400204a0
 8004b60:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 020e 	bic.w	r2, r3, #14
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 020a 	orr.w	r2, r2, #10
 8004b76:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d007      	beq.n	8004b90 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0204 	orr.w	r2, r2, #4
 8004b8e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a83      	ldr	r2, [pc, #524]	; (8004da4 <HAL_DMA_Start_IT+0x474>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d072      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a82      	ldr	r2, [pc, #520]	; (8004da8 <HAL_DMA_Start_IT+0x478>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d06d      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a80      	ldr	r2, [pc, #512]	; (8004dac <HAL_DMA_Start_IT+0x47c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d068      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a7f      	ldr	r2, [pc, #508]	; (8004db0 <HAL_DMA_Start_IT+0x480>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d063      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a7d      	ldr	r2, [pc, #500]	; (8004db4 <HAL_DMA_Start_IT+0x484>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d05e      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a7c      	ldr	r2, [pc, #496]	; (8004db8 <HAL_DMA_Start_IT+0x488>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d059      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a7a      	ldr	r2, [pc, #488]	; (8004dbc <HAL_DMA_Start_IT+0x48c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d054      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a79      	ldr	r2, [pc, #484]	; (8004dc0 <HAL_DMA_Start_IT+0x490>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d04f      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a77      	ldr	r2, [pc, #476]	; (8004dc4 <HAL_DMA_Start_IT+0x494>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d04a      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a76      	ldr	r2, [pc, #472]	; (8004dc8 <HAL_DMA_Start_IT+0x498>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d045      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a74      	ldr	r2, [pc, #464]	; (8004dcc <HAL_DMA_Start_IT+0x49c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d040      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a73      	ldr	r2, [pc, #460]	; (8004dd0 <HAL_DMA_Start_IT+0x4a0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d03b      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a71      	ldr	r2, [pc, #452]	; (8004dd4 <HAL_DMA_Start_IT+0x4a4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d036      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a70      	ldr	r2, [pc, #448]	; (8004dd8 <HAL_DMA_Start_IT+0x4a8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d031      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a6e      	ldr	r2, [pc, #440]	; (8004ddc <HAL_DMA_Start_IT+0x4ac>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d02c      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a6d      	ldr	r2, [pc, #436]	; (8004de0 <HAL_DMA_Start_IT+0x4b0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d027      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a6b      	ldr	r2, [pc, #428]	; (8004de4 <HAL_DMA_Start_IT+0x4b4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d022      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a6a      	ldr	r2, [pc, #424]	; (8004de8 <HAL_DMA_Start_IT+0x4b8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d01d      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a68      	ldr	r2, [pc, #416]	; (8004dec <HAL_DMA_Start_IT+0x4bc>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d018      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a67      	ldr	r2, [pc, #412]	; (8004df0 <HAL_DMA_Start_IT+0x4c0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d013      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a65      	ldr	r2, [pc, #404]	; (8004df4 <HAL_DMA_Start_IT+0x4c4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00e      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a64      	ldr	r2, [pc, #400]	; (8004df8 <HAL_DMA_Start_IT+0x4c8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d009      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a62      	ldr	r2, [pc, #392]	; (8004dfc <HAL_DMA_Start_IT+0x4cc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d004      	beq.n	8004c80 <HAL_DMA_Start_IT+0x350>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a61      	ldr	r2, [pc, #388]	; (8004e00 <HAL_DMA_Start_IT+0x4d0>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d101      	bne.n	8004c84 <HAL_DMA_Start_IT+0x354>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <HAL_DMA_Start_IT+0x356>
 8004c84:	2300      	movs	r3, #0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d01a      	beq.n	8004cc0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ca6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d007      	beq.n	8004cc0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cbe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a37      	ldr	r2, [pc, #220]	; (8004da4 <HAL_DMA_Start_IT+0x474>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d04a      	beq.n	8004d60 <HAL_DMA_Start_IT+0x430>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a36      	ldr	r2, [pc, #216]	; (8004da8 <HAL_DMA_Start_IT+0x478>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d045      	beq.n	8004d60 <HAL_DMA_Start_IT+0x430>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a34      	ldr	r2, [pc, #208]	; (8004dac <HAL_DMA_Start_IT+0x47c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d040      	beq.n	8004d60 <HAL_DMA_Start_IT+0x430>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a33      	ldr	r2, [pc, #204]	; (8004db0 <HAL_DMA_Start_IT+0x480>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d03b      	beq.n	8004d60 <HAL_DMA_Start_IT+0x430>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a31      	ldr	r2, [pc, #196]	; (8004db4 <HAL_DMA_Start_IT+0x484>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d036      	beq.n	8004d60 <HAL_DMA_Start_IT+0x430>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a30      	ldr	r2, [pc, #192]	; (8004db8 <HAL_DMA_Start_IT+0x488>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d031      	beq.n	8004d60 <HAL_DMA_Start_IT+0x430>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a2e      	ldr	r2, [pc, #184]	; (8004dbc <HAL_DMA_Start_IT+0x48c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d02c      	beq.n	8004d60 <HAL_DMA_Start_IT+0x430>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a2d      	ldr	r2, [pc, #180]	; (8004dc0 <HAL_DMA_Start_IT+0x490>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d027      	beq.n	8004d60 <HAL_DMA_Start_IT+0x430>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a2b      	ldr	r2, [pc, #172]	; (8004dc4 <HAL_DMA_Start_IT+0x494>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d022      	beq.n	8004d60 <HAL_DMA_Start_IT+0x430>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a2a      	ldr	r2, [pc, #168]	; (8004dc8 <HAL_DMA_Start_IT+0x498>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d01d      	beq.n	8004d60 <HAL_DMA_Start_IT+0x430>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a28      	ldr	r2, [pc, #160]	; (8004dcc <HAL_DMA_Start_IT+0x49c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d018      	beq.n	8004d60 <HAL_DMA_Start_IT+0x430>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a27      	ldr	r2, [pc, #156]	; (8004dd0 <HAL_DMA_Start_IT+0x4a0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d013      	beq.n	8004d60 <HAL_DMA_Start_IT+0x430>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a25      	ldr	r2, [pc, #148]	; (8004dd4 <HAL_DMA_Start_IT+0x4a4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00e      	beq.n	8004d60 <HAL_DMA_Start_IT+0x430>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a24      	ldr	r2, [pc, #144]	; (8004dd8 <HAL_DMA_Start_IT+0x4a8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d009      	beq.n	8004d60 <HAL_DMA_Start_IT+0x430>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a22      	ldr	r2, [pc, #136]	; (8004ddc <HAL_DMA_Start_IT+0x4ac>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d004      	beq.n	8004d60 <HAL_DMA_Start_IT+0x430>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a21      	ldr	r2, [pc, #132]	; (8004de0 <HAL_DMA_Start_IT+0x4b0>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d108      	bne.n	8004d72 <HAL_DMA_Start_IT+0x442>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	e012      	b.n	8004d98 <HAL_DMA_Start_IT+0x468>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0201 	orr.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	e009      	b.n	8004d98 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	40020010 	.word	0x40020010
 8004da8:	40020028 	.word	0x40020028
 8004dac:	40020040 	.word	0x40020040
 8004db0:	40020058 	.word	0x40020058
 8004db4:	40020070 	.word	0x40020070
 8004db8:	40020088 	.word	0x40020088
 8004dbc:	400200a0 	.word	0x400200a0
 8004dc0:	400200b8 	.word	0x400200b8
 8004dc4:	40020410 	.word	0x40020410
 8004dc8:	40020428 	.word	0x40020428
 8004dcc:	40020440 	.word	0x40020440
 8004dd0:	40020458 	.word	0x40020458
 8004dd4:	40020470 	.word	0x40020470
 8004dd8:	40020488 	.word	0x40020488
 8004ddc:	400204a0 	.word	0x400204a0
 8004de0:	400204b8 	.word	0x400204b8
 8004de4:	58025408 	.word	0x58025408
 8004de8:	5802541c 	.word	0x5802541c
 8004dec:	58025430 	.word	0x58025430
 8004df0:	58025444 	.word	0x58025444
 8004df4:	58025458 	.word	0x58025458
 8004df8:	5802546c 	.word	0x5802546c
 8004dfc:	58025480 	.word	0x58025480
 8004e00:	58025494 	.word	0x58025494

08004e04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004e0c:	f7ff f88e 	bl	8003f2c <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e2dc      	b.n	80053d6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d008      	beq.n	8004e3a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2280      	movs	r2, #128	; 0x80
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e2cd      	b.n	80053d6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a76      	ldr	r2, [pc, #472]	; (8005018 <HAL_DMA_Abort+0x214>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d04a      	beq.n	8004eda <HAL_DMA_Abort+0xd6>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a74      	ldr	r2, [pc, #464]	; (800501c <HAL_DMA_Abort+0x218>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d045      	beq.n	8004eda <HAL_DMA_Abort+0xd6>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a73      	ldr	r2, [pc, #460]	; (8005020 <HAL_DMA_Abort+0x21c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d040      	beq.n	8004eda <HAL_DMA_Abort+0xd6>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a71      	ldr	r2, [pc, #452]	; (8005024 <HAL_DMA_Abort+0x220>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d03b      	beq.n	8004eda <HAL_DMA_Abort+0xd6>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a70      	ldr	r2, [pc, #448]	; (8005028 <HAL_DMA_Abort+0x224>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d036      	beq.n	8004eda <HAL_DMA_Abort+0xd6>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a6e      	ldr	r2, [pc, #440]	; (800502c <HAL_DMA_Abort+0x228>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d031      	beq.n	8004eda <HAL_DMA_Abort+0xd6>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a6d      	ldr	r2, [pc, #436]	; (8005030 <HAL_DMA_Abort+0x22c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d02c      	beq.n	8004eda <HAL_DMA_Abort+0xd6>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a6b      	ldr	r2, [pc, #428]	; (8005034 <HAL_DMA_Abort+0x230>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d027      	beq.n	8004eda <HAL_DMA_Abort+0xd6>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a6a      	ldr	r2, [pc, #424]	; (8005038 <HAL_DMA_Abort+0x234>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d022      	beq.n	8004eda <HAL_DMA_Abort+0xd6>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a68      	ldr	r2, [pc, #416]	; (800503c <HAL_DMA_Abort+0x238>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01d      	beq.n	8004eda <HAL_DMA_Abort+0xd6>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a67      	ldr	r2, [pc, #412]	; (8005040 <HAL_DMA_Abort+0x23c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d018      	beq.n	8004eda <HAL_DMA_Abort+0xd6>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a65      	ldr	r2, [pc, #404]	; (8005044 <HAL_DMA_Abort+0x240>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <HAL_DMA_Abort+0xd6>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a64      	ldr	r2, [pc, #400]	; (8005048 <HAL_DMA_Abort+0x244>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00e      	beq.n	8004eda <HAL_DMA_Abort+0xd6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a62      	ldr	r2, [pc, #392]	; (800504c <HAL_DMA_Abort+0x248>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_DMA_Abort+0xd6>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a61      	ldr	r2, [pc, #388]	; (8005050 <HAL_DMA_Abort+0x24c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d004      	beq.n	8004eda <HAL_DMA_Abort+0xd6>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a5f      	ldr	r2, [pc, #380]	; (8005054 <HAL_DMA_Abort+0x250>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d101      	bne.n	8004ede <HAL_DMA_Abort+0xda>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_DMA_Abort+0xdc>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d013      	beq.n	8004f0c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 021e 	bic.w	r2, r2, #30
 8004ef2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695a      	ldr	r2, [r3, #20]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f02:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	e00a      	b.n	8004f22 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 020e 	bic.w	r2, r2, #14
 8004f1a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a3c      	ldr	r2, [pc, #240]	; (8005018 <HAL_DMA_Abort+0x214>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d072      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a3a      	ldr	r2, [pc, #232]	; (800501c <HAL_DMA_Abort+0x218>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d06d      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a39      	ldr	r2, [pc, #228]	; (8005020 <HAL_DMA_Abort+0x21c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d068      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a37      	ldr	r2, [pc, #220]	; (8005024 <HAL_DMA_Abort+0x220>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d063      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a36      	ldr	r2, [pc, #216]	; (8005028 <HAL_DMA_Abort+0x224>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d05e      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a34      	ldr	r2, [pc, #208]	; (800502c <HAL_DMA_Abort+0x228>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d059      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a33      	ldr	r2, [pc, #204]	; (8005030 <HAL_DMA_Abort+0x22c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d054      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a31      	ldr	r2, [pc, #196]	; (8005034 <HAL_DMA_Abort+0x230>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d04f      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a30      	ldr	r2, [pc, #192]	; (8005038 <HAL_DMA_Abort+0x234>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d04a      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a2e      	ldr	r2, [pc, #184]	; (800503c <HAL_DMA_Abort+0x238>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d045      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a2d      	ldr	r2, [pc, #180]	; (8005040 <HAL_DMA_Abort+0x23c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d040      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2b      	ldr	r2, [pc, #172]	; (8005044 <HAL_DMA_Abort+0x240>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d03b      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2a      	ldr	r2, [pc, #168]	; (8005048 <HAL_DMA_Abort+0x244>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d036      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a28      	ldr	r2, [pc, #160]	; (800504c <HAL_DMA_Abort+0x248>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d031      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a27      	ldr	r2, [pc, #156]	; (8005050 <HAL_DMA_Abort+0x24c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d02c      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a25      	ldr	r2, [pc, #148]	; (8005054 <HAL_DMA_Abort+0x250>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d027      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a24      	ldr	r2, [pc, #144]	; (8005058 <HAL_DMA_Abort+0x254>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d022      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a22      	ldr	r2, [pc, #136]	; (800505c <HAL_DMA_Abort+0x258>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d01d      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a21      	ldr	r2, [pc, #132]	; (8005060 <HAL_DMA_Abort+0x25c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d018      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1f      	ldr	r2, [pc, #124]	; (8005064 <HAL_DMA_Abort+0x260>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d013      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1e      	ldr	r2, [pc, #120]	; (8005068 <HAL_DMA_Abort+0x264>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00e      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1c      	ldr	r2, [pc, #112]	; (800506c <HAL_DMA_Abort+0x268>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d009      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1b      	ldr	r2, [pc, #108]	; (8005070 <HAL_DMA_Abort+0x26c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d004      	beq.n	8005012 <HAL_DMA_Abort+0x20e>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a19      	ldr	r2, [pc, #100]	; (8005074 <HAL_DMA_Abort+0x270>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d132      	bne.n	8005078 <HAL_DMA_Abort+0x274>
 8005012:	2301      	movs	r3, #1
 8005014:	e031      	b.n	800507a <HAL_DMA_Abort+0x276>
 8005016:	bf00      	nop
 8005018:	40020010 	.word	0x40020010
 800501c:	40020028 	.word	0x40020028
 8005020:	40020040 	.word	0x40020040
 8005024:	40020058 	.word	0x40020058
 8005028:	40020070 	.word	0x40020070
 800502c:	40020088 	.word	0x40020088
 8005030:	400200a0 	.word	0x400200a0
 8005034:	400200b8 	.word	0x400200b8
 8005038:	40020410 	.word	0x40020410
 800503c:	40020428 	.word	0x40020428
 8005040:	40020440 	.word	0x40020440
 8005044:	40020458 	.word	0x40020458
 8005048:	40020470 	.word	0x40020470
 800504c:	40020488 	.word	0x40020488
 8005050:	400204a0 	.word	0x400204a0
 8005054:	400204b8 	.word	0x400204b8
 8005058:	58025408 	.word	0x58025408
 800505c:	5802541c 	.word	0x5802541c
 8005060:	58025430 	.word	0x58025430
 8005064:	58025444 	.word	0x58025444
 8005068:	58025458 	.word	0x58025458
 800506c:	5802546c 	.word	0x5802546c
 8005070:	58025480 	.word	0x58025480
 8005074:	58025494 	.word	0x58025494
 8005078:	2300      	movs	r3, #0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800508c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a6d      	ldr	r2, [pc, #436]	; (8005248 <HAL_DMA_Abort+0x444>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d04a      	beq.n	800512e <HAL_DMA_Abort+0x32a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a6b      	ldr	r2, [pc, #428]	; (800524c <HAL_DMA_Abort+0x448>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d045      	beq.n	800512e <HAL_DMA_Abort+0x32a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a6a      	ldr	r2, [pc, #424]	; (8005250 <HAL_DMA_Abort+0x44c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d040      	beq.n	800512e <HAL_DMA_Abort+0x32a>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a68      	ldr	r2, [pc, #416]	; (8005254 <HAL_DMA_Abort+0x450>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d03b      	beq.n	800512e <HAL_DMA_Abort+0x32a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a67      	ldr	r2, [pc, #412]	; (8005258 <HAL_DMA_Abort+0x454>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d036      	beq.n	800512e <HAL_DMA_Abort+0x32a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a65      	ldr	r2, [pc, #404]	; (800525c <HAL_DMA_Abort+0x458>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d031      	beq.n	800512e <HAL_DMA_Abort+0x32a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a64      	ldr	r2, [pc, #400]	; (8005260 <HAL_DMA_Abort+0x45c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d02c      	beq.n	800512e <HAL_DMA_Abort+0x32a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a62      	ldr	r2, [pc, #392]	; (8005264 <HAL_DMA_Abort+0x460>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d027      	beq.n	800512e <HAL_DMA_Abort+0x32a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a61      	ldr	r2, [pc, #388]	; (8005268 <HAL_DMA_Abort+0x464>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d022      	beq.n	800512e <HAL_DMA_Abort+0x32a>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a5f      	ldr	r2, [pc, #380]	; (800526c <HAL_DMA_Abort+0x468>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d01d      	beq.n	800512e <HAL_DMA_Abort+0x32a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a5e      	ldr	r2, [pc, #376]	; (8005270 <HAL_DMA_Abort+0x46c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d018      	beq.n	800512e <HAL_DMA_Abort+0x32a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a5c      	ldr	r2, [pc, #368]	; (8005274 <HAL_DMA_Abort+0x470>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <HAL_DMA_Abort+0x32a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a5b      	ldr	r2, [pc, #364]	; (8005278 <HAL_DMA_Abort+0x474>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00e      	beq.n	800512e <HAL_DMA_Abort+0x32a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a59      	ldr	r2, [pc, #356]	; (800527c <HAL_DMA_Abort+0x478>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d009      	beq.n	800512e <HAL_DMA_Abort+0x32a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a58      	ldr	r2, [pc, #352]	; (8005280 <HAL_DMA_Abort+0x47c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d004      	beq.n	800512e <HAL_DMA_Abort+0x32a>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a56      	ldr	r2, [pc, #344]	; (8005284 <HAL_DMA_Abort+0x480>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d108      	bne.n	8005140 <HAL_DMA_Abort+0x33c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0201 	bic.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	e007      	b.n	8005150 <HAL_DMA_Abort+0x34c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005150:	e013      	b.n	800517a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005152:	f7fe feeb 	bl	8003f2c <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b05      	cmp	r3, #5
 800515e:	d90c      	bls.n	800517a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2203      	movs	r2, #3
 800516a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e12d      	b.n	80053d6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e5      	bne.n	8005152 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a2f      	ldr	r2, [pc, #188]	; (8005248 <HAL_DMA_Abort+0x444>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d04a      	beq.n	8005226 <HAL_DMA_Abort+0x422>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a2d      	ldr	r2, [pc, #180]	; (800524c <HAL_DMA_Abort+0x448>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d045      	beq.n	8005226 <HAL_DMA_Abort+0x422>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a2c      	ldr	r2, [pc, #176]	; (8005250 <HAL_DMA_Abort+0x44c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d040      	beq.n	8005226 <HAL_DMA_Abort+0x422>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a2a      	ldr	r2, [pc, #168]	; (8005254 <HAL_DMA_Abort+0x450>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d03b      	beq.n	8005226 <HAL_DMA_Abort+0x422>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a29      	ldr	r2, [pc, #164]	; (8005258 <HAL_DMA_Abort+0x454>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d036      	beq.n	8005226 <HAL_DMA_Abort+0x422>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a27      	ldr	r2, [pc, #156]	; (800525c <HAL_DMA_Abort+0x458>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d031      	beq.n	8005226 <HAL_DMA_Abort+0x422>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a26      	ldr	r2, [pc, #152]	; (8005260 <HAL_DMA_Abort+0x45c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d02c      	beq.n	8005226 <HAL_DMA_Abort+0x422>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a24      	ldr	r2, [pc, #144]	; (8005264 <HAL_DMA_Abort+0x460>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d027      	beq.n	8005226 <HAL_DMA_Abort+0x422>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a23      	ldr	r2, [pc, #140]	; (8005268 <HAL_DMA_Abort+0x464>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d022      	beq.n	8005226 <HAL_DMA_Abort+0x422>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a21      	ldr	r2, [pc, #132]	; (800526c <HAL_DMA_Abort+0x468>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d01d      	beq.n	8005226 <HAL_DMA_Abort+0x422>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a20      	ldr	r2, [pc, #128]	; (8005270 <HAL_DMA_Abort+0x46c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d018      	beq.n	8005226 <HAL_DMA_Abort+0x422>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1e      	ldr	r2, [pc, #120]	; (8005274 <HAL_DMA_Abort+0x470>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <HAL_DMA_Abort+0x422>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1d      	ldr	r2, [pc, #116]	; (8005278 <HAL_DMA_Abort+0x474>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00e      	beq.n	8005226 <HAL_DMA_Abort+0x422>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1b      	ldr	r2, [pc, #108]	; (800527c <HAL_DMA_Abort+0x478>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d009      	beq.n	8005226 <HAL_DMA_Abort+0x422>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1a      	ldr	r2, [pc, #104]	; (8005280 <HAL_DMA_Abort+0x47c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d004      	beq.n	8005226 <HAL_DMA_Abort+0x422>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a18      	ldr	r2, [pc, #96]	; (8005284 <HAL_DMA_Abort+0x480>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d101      	bne.n	800522a <HAL_DMA_Abort+0x426>
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <HAL_DMA_Abort+0x428>
 800522a:	2300      	movs	r3, #0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d02b      	beq.n	8005288 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005234:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	223f      	movs	r2, #63	; 0x3f
 8005240:	409a      	lsls	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	609a      	str	r2, [r3, #8]
 8005246:	e02a      	b.n	800529e <HAL_DMA_Abort+0x49a>
 8005248:	40020010 	.word	0x40020010
 800524c:	40020028 	.word	0x40020028
 8005250:	40020040 	.word	0x40020040
 8005254:	40020058 	.word	0x40020058
 8005258:	40020070 	.word	0x40020070
 800525c:	40020088 	.word	0x40020088
 8005260:	400200a0 	.word	0x400200a0
 8005264:	400200b8 	.word	0x400200b8
 8005268:	40020410 	.word	0x40020410
 800526c:	40020428 	.word	0x40020428
 8005270:	40020440 	.word	0x40020440
 8005274:	40020458 	.word	0x40020458
 8005278:	40020470 	.word	0x40020470
 800527c:	40020488 	.word	0x40020488
 8005280:	400204a0 	.word	0x400204a0
 8005284:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	2201      	movs	r2, #1
 8005298:	409a      	lsls	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a4f      	ldr	r2, [pc, #316]	; (80053e0 <HAL_DMA_Abort+0x5dc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d072      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a4d      	ldr	r2, [pc, #308]	; (80053e4 <HAL_DMA_Abort+0x5e0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d06d      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a4c      	ldr	r2, [pc, #304]	; (80053e8 <HAL_DMA_Abort+0x5e4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d068      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a4a      	ldr	r2, [pc, #296]	; (80053ec <HAL_DMA_Abort+0x5e8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d063      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a49      	ldr	r2, [pc, #292]	; (80053f0 <HAL_DMA_Abort+0x5ec>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d05e      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a47      	ldr	r2, [pc, #284]	; (80053f4 <HAL_DMA_Abort+0x5f0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d059      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a46      	ldr	r2, [pc, #280]	; (80053f8 <HAL_DMA_Abort+0x5f4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d054      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a44      	ldr	r2, [pc, #272]	; (80053fc <HAL_DMA_Abort+0x5f8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d04f      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a43      	ldr	r2, [pc, #268]	; (8005400 <HAL_DMA_Abort+0x5fc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d04a      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a41      	ldr	r2, [pc, #260]	; (8005404 <HAL_DMA_Abort+0x600>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d045      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a40      	ldr	r2, [pc, #256]	; (8005408 <HAL_DMA_Abort+0x604>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d040      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a3e      	ldr	r2, [pc, #248]	; (800540c <HAL_DMA_Abort+0x608>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d03b      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a3d      	ldr	r2, [pc, #244]	; (8005410 <HAL_DMA_Abort+0x60c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d036      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a3b      	ldr	r2, [pc, #236]	; (8005414 <HAL_DMA_Abort+0x610>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d031      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a3a      	ldr	r2, [pc, #232]	; (8005418 <HAL_DMA_Abort+0x614>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d02c      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a38      	ldr	r2, [pc, #224]	; (800541c <HAL_DMA_Abort+0x618>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d027      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a37      	ldr	r2, [pc, #220]	; (8005420 <HAL_DMA_Abort+0x61c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d022      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a35      	ldr	r2, [pc, #212]	; (8005424 <HAL_DMA_Abort+0x620>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d01d      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a34      	ldr	r2, [pc, #208]	; (8005428 <HAL_DMA_Abort+0x624>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d018      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a32      	ldr	r2, [pc, #200]	; (800542c <HAL_DMA_Abort+0x628>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a31      	ldr	r2, [pc, #196]	; (8005430 <HAL_DMA_Abort+0x62c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00e      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2f      	ldr	r2, [pc, #188]	; (8005434 <HAL_DMA_Abort+0x630>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d009      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a2e      	ldr	r2, [pc, #184]	; (8005438 <HAL_DMA_Abort+0x634>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d004      	beq.n	800538e <HAL_DMA_Abort+0x58a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a2c      	ldr	r2, [pc, #176]	; (800543c <HAL_DMA_Abort+0x638>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d101      	bne.n	8005392 <HAL_DMA_Abort+0x58e>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <HAL_DMA_Abort+0x590>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d015      	beq.n	80053c4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80053a0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00c      	beq.n	80053c4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053b8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80053c2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40020010 	.word	0x40020010
 80053e4:	40020028 	.word	0x40020028
 80053e8:	40020040 	.word	0x40020040
 80053ec:	40020058 	.word	0x40020058
 80053f0:	40020070 	.word	0x40020070
 80053f4:	40020088 	.word	0x40020088
 80053f8:	400200a0 	.word	0x400200a0
 80053fc:	400200b8 	.word	0x400200b8
 8005400:	40020410 	.word	0x40020410
 8005404:	40020428 	.word	0x40020428
 8005408:	40020440 	.word	0x40020440
 800540c:	40020458 	.word	0x40020458
 8005410:	40020470 	.word	0x40020470
 8005414:	40020488 	.word	0x40020488
 8005418:	400204a0 	.word	0x400204a0
 800541c:	400204b8 	.word	0x400204b8
 8005420:	58025408 	.word	0x58025408
 8005424:	5802541c 	.word	0x5802541c
 8005428:	58025430 	.word	0x58025430
 800542c:	58025444 	.word	0x58025444
 8005430:	58025458 	.word	0x58025458
 8005434:	5802546c 	.word	0x5802546c
 8005438:	58025480 	.word	0x58025480
 800543c:	58025494 	.word	0x58025494

08005440 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e237      	b.n	80058c2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d004      	beq.n	8005468 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2280      	movs	r2, #128	; 0x80
 8005462:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e22c      	b.n	80058c2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a5c      	ldr	r2, [pc, #368]	; (80055e0 <HAL_DMA_Abort_IT+0x1a0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d04a      	beq.n	8005508 <HAL_DMA_Abort_IT+0xc8>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a5b      	ldr	r2, [pc, #364]	; (80055e4 <HAL_DMA_Abort_IT+0x1a4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d045      	beq.n	8005508 <HAL_DMA_Abort_IT+0xc8>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a59      	ldr	r2, [pc, #356]	; (80055e8 <HAL_DMA_Abort_IT+0x1a8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d040      	beq.n	8005508 <HAL_DMA_Abort_IT+0xc8>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a58      	ldr	r2, [pc, #352]	; (80055ec <HAL_DMA_Abort_IT+0x1ac>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d03b      	beq.n	8005508 <HAL_DMA_Abort_IT+0xc8>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a56      	ldr	r2, [pc, #344]	; (80055f0 <HAL_DMA_Abort_IT+0x1b0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d036      	beq.n	8005508 <HAL_DMA_Abort_IT+0xc8>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a55      	ldr	r2, [pc, #340]	; (80055f4 <HAL_DMA_Abort_IT+0x1b4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d031      	beq.n	8005508 <HAL_DMA_Abort_IT+0xc8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a53      	ldr	r2, [pc, #332]	; (80055f8 <HAL_DMA_Abort_IT+0x1b8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d02c      	beq.n	8005508 <HAL_DMA_Abort_IT+0xc8>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a52      	ldr	r2, [pc, #328]	; (80055fc <HAL_DMA_Abort_IT+0x1bc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d027      	beq.n	8005508 <HAL_DMA_Abort_IT+0xc8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a50      	ldr	r2, [pc, #320]	; (8005600 <HAL_DMA_Abort_IT+0x1c0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d022      	beq.n	8005508 <HAL_DMA_Abort_IT+0xc8>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a4f      	ldr	r2, [pc, #316]	; (8005604 <HAL_DMA_Abort_IT+0x1c4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d01d      	beq.n	8005508 <HAL_DMA_Abort_IT+0xc8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a4d      	ldr	r2, [pc, #308]	; (8005608 <HAL_DMA_Abort_IT+0x1c8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d018      	beq.n	8005508 <HAL_DMA_Abort_IT+0xc8>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a4c      	ldr	r2, [pc, #304]	; (800560c <HAL_DMA_Abort_IT+0x1cc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d013      	beq.n	8005508 <HAL_DMA_Abort_IT+0xc8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a4a      	ldr	r2, [pc, #296]	; (8005610 <HAL_DMA_Abort_IT+0x1d0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00e      	beq.n	8005508 <HAL_DMA_Abort_IT+0xc8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a49      	ldr	r2, [pc, #292]	; (8005614 <HAL_DMA_Abort_IT+0x1d4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d009      	beq.n	8005508 <HAL_DMA_Abort_IT+0xc8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a47      	ldr	r2, [pc, #284]	; (8005618 <HAL_DMA_Abort_IT+0x1d8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d004      	beq.n	8005508 <HAL_DMA_Abort_IT+0xc8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a46      	ldr	r2, [pc, #280]	; (800561c <HAL_DMA_Abort_IT+0x1dc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d101      	bne.n	800550c <HAL_DMA_Abort_IT+0xcc>
 8005508:	2301      	movs	r3, #1
 800550a:	e000      	b.n	800550e <HAL_DMA_Abort_IT+0xce>
 800550c:	2300      	movs	r3, #0
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 8086 	beq.w	8005620 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2204      	movs	r2, #4
 8005518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a2f      	ldr	r2, [pc, #188]	; (80055e0 <HAL_DMA_Abort_IT+0x1a0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d04a      	beq.n	80055bc <HAL_DMA_Abort_IT+0x17c>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a2e      	ldr	r2, [pc, #184]	; (80055e4 <HAL_DMA_Abort_IT+0x1a4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d045      	beq.n	80055bc <HAL_DMA_Abort_IT+0x17c>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a2c      	ldr	r2, [pc, #176]	; (80055e8 <HAL_DMA_Abort_IT+0x1a8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d040      	beq.n	80055bc <HAL_DMA_Abort_IT+0x17c>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a2b      	ldr	r2, [pc, #172]	; (80055ec <HAL_DMA_Abort_IT+0x1ac>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d03b      	beq.n	80055bc <HAL_DMA_Abort_IT+0x17c>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a29      	ldr	r2, [pc, #164]	; (80055f0 <HAL_DMA_Abort_IT+0x1b0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d036      	beq.n	80055bc <HAL_DMA_Abort_IT+0x17c>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a28      	ldr	r2, [pc, #160]	; (80055f4 <HAL_DMA_Abort_IT+0x1b4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d031      	beq.n	80055bc <HAL_DMA_Abort_IT+0x17c>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a26      	ldr	r2, [pc, #152]	; (80055f8 <HAL_DMA_Abort_IT+0x1b8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d02c      	beq.n	80055bc <HAL_DMA_Abort_IT+0x17c>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a25      	ldr	r2, [pc, #148]	; (80055fc <HAL_DMA_Abort_IT+0x1bc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d027      	beq.n	80055bc <HAL_DMA_Abort_IT+0x17c>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a23      	ldr	r2, [pc, #140]	; (8005600 <HAL_DMA_Abort_IT+0x1c0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d022      	beq.n	80055bc <HAL_DMA_Abort_IT+0x17c>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a22      	ldr	r2, [pc, #136]	; (8005604 <HAL_DMA_Abort_IT+0x1c4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d01d      	beq.n	80055bc <HAL_DMA_Abort_IT+0x17c>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a20      	ldr	r2, [pc, #128]	; (8005608 <HAL_DMA_Abort_IT+0x1c8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d018      	beq.n	80055bc <HAL_DMA_Abort_IT+0x17c>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1f      	ldr	r2, [pc, #124]	; (800560c <HAL_DMA_Abort_IT+0x1cc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d013      	beq.n	80055bc <HAL_DMA_Abort_IT+0x17c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a1d      	ldr	r2, [pc, #116]	; (8005610 <HAL_DMA_Abort_IT+0x1d0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00e      	beq.n	80055bc <HAL_DMA_Abort_IT+0x17c>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a1c      	ldr	r2, [pc, #112]	; (8005614 <HAL_DMA_Abort_IT+0x1d4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d009      	beq.n	80055bc <HAL_DMA_Abort_IT+0x17c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a1a      	ldr	r2, [pc, #104]	; (8005618 <HAL_DMA_Abort_IT+0x1d8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d004      	beq.n	80055bc <HAL_DMA_Abort_IT+0x17c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a19      	ldr	r2, [pc, #100]	; (800561c <HAL_DMA_Abort_IT+0x1dc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d108      	bne.n	80055ce <HAL_DMA_Abort_IT+0x18e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0201 	bic.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	e178      	b.n	80058c0 <HAL_DMA_Abort_IT+0x480>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0201 	bic.w	r2, r2, #1
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	e16f      	b.n	80058c0 <HAL_DMA_Abort_IT+0x480>
 80055e0:	40020010 	.word	0x40020010
 80055e4:	40020028 	.word	0x40020028
 80055e8:	40020040 	.word	0x40020040
 80055ec:	40020058 	.word	0x40020058
 80055f0:	40020070 	.word	0x40020070
 80055f4:	40020088 	.word	0x40020088
 80055f8:	400200a0 	.word	0x400200a0
 80055fc:	400200b8 	.word	0x400200b8
 8005600:	40020410 	.word	0x40020410
 8005604:	40020428 	.word	0x40020428
 8005608:	40020440 	.word	0x40020440
 800560c:	40020458 	.word	0x40020458
 8005610:	40020470 	.word	0x40020470
 8005614:	40020488 	.word	0x40020488
 8005618:	400204a0 	.word	0x400204a0
 800561c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 020e 	bic.w	r2, r2, #14
 800562e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a6c      	ldr	r2, [pc, #432]	; (80057e8 <HAL_DMA_Abort_IT+0x3a8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d04a      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x290>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a6b      	ldr	r2, [pc, #428]	; (80057ec <HAL_DMA_Abort_IT+0x3ac>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d045      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x290>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a69      	ldr	r2, [pc, #420]	; (80057f0 <HAL_DMA_Abort_IT+0x3b0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d040      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x290>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a68      	ldr	r2, [pc, #416]	; (80057f4 <HAL_DMA_Abort_IT+0x3b4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d03b      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x290>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a66      	ldr	r2, [pc, #408]	; (80057f8 <HAL_DMA_Abort_IT+0x3b8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d036      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x290>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a65      	ldr	r2, [pc, #404]	; (80057fc <HAL_DMA_Abort_IT+0x3bc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d031      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x290>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a63      	ldr	r2, [pc, #396]	; (8005800 <HAL_DMA_Abort_IT+0x3c0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d02c      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x290>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a62      	ldr	r2, [pc, #392]	; (8005804 <HAL_DMA_Abort_IT+0x3c4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d027      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x290>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a60      	ldr	r2, [pc, #384]	; (8005808 <HAL_DMA_Abort_IT+0x3c8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d022      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x290>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a5f      	ldr	r2, [pc, #380]	; (800580c <HAL_DMA_Abort_IT+0x3cc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d01d      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x290>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a5d      	ldr	r2, [pc, #372]	; (8005810 <HAL_DMA_Abort_IT+0x3d0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d018      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x290>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a5c      	ldr	r2, [pc, #368]	; (8005814 <HAL_DMA_Abort_IT+0x3d4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d013      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x290>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a5a      	ldr	r2, [pc, #360]	; (8005818 <HAL_DMA_Abort_IT+0x3d8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00e      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x290>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a59      	ldr	r2, [pc, #356]	; (800581c <HAL_DMA_Abort_IT+0x3dc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d009      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x290>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a57      	ldr	r2, [pc, #348]	; (8005820 <HAL_DMA_Abort_IT+0x3e0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x290>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a56      	ldr	r2, [pc, #344]	; (8005824 <HAL_DMA_Abort_IT+0x3e4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d108      	bne.n	80056e2 <HAL_DMA_Abort_IT+0x2a2>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0201 	bic.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	e007      	b.n	80056f2 <HAL_DMA_Abort_IT+0x2b2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0201 	bic.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a3c      	ldr	r2, [pc, #240]	; (80057e8 <HAL_DMA_Abort_IT+0x3a8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d072      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a3a      	ldr	r2, [pc, #232]	; (80057ec <HAL_DMA_Abort_IT+0x3ac>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d06d      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a39      	ldr	r2, [pc, #228]	; (80057f0 <HAL_DMA_Abort_IT+0x3b0>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d068      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a37      	ldr	r2, [pc, #220]	; (80057f4 <HAL_DMA_Abort_IT+0x3b4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d063      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a36      	ldr	r2, [pc, #216]	; (80057f8 <HAL_DMA_Abort_IT+0x3b8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d05e      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a34      	ldr	r2, [pc, #208]	; (80057fc <HAL_DMA_Abort_IT+0x3bc>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d059      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a33      	ldr	r2, [pc, #204]	; (8005800 <HAL_DMA_Abort_IT+0x3c0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d054      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a31      	ldr	r2, [pc, #196]	; (8005804 <HAL_DMA_Abort_IT+0x3c4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d04f      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a30      	ldr	r2, [pc, #192]	; (8005808 <HAL_DMA_Abort_IT+0x3c8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d04a      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a2e      	ldr	r2, [pc, #184]	; (800580c <HAL_DMA_Abort_IT+0x3cc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d045      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a2d      	ldr	r2, [pc, #180]	; (8005810 <HAL_DMA_Abort_IT+0x3d0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d040      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a2b      	ldr	r2, [pc, #172]	; (8005814 <HAL_DMA_Abort_IT+0x3d4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d03b      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a2a      	ldr	r2, [pc, #168]	; (8005818 <HAL_DMA_Abort_IT+0x3d8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d036      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a28      	ldr	r2, [pc, #160]	; (800581c <HAL_DMA_Abort_IT+0x3dc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d031      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a27      	ldr	r2, [pc, #156]	; (8005820 <HAL_DMA_Abort_IT+0x3e0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d02c      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a25      	ldr	r2, [pc, #148]	; (8005824 <HAL_DMA_Abort_IT+0x3e4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d027      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a24      	ldr	r2, [pc, #144]	; (8005828 <HAL_DMA_Abort_IT+0x3e8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d022      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a22      	ldr	r2, [pc, #136]	; (800582c <HAL_DMA_Abort_IT+0x3ec>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01d      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a21      	ldr	r2, [pc, #132]	; (8005830 <HAL_DMA_Abort_IT+0x3f0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d018      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1f      	ldr	r2, [pc, #124]	; (8005834 <HAL_DMA_Abort_IT+0x3f4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1e      	ldr	r2, [pc, #120]	; (8005838 <HAL_DMA_Abort_IT+0x3f8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00e      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1c      	ldr	r2, [pc, #112]	; (800583c <HAL_DMA_Abort_IT+0x3fc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d009      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1b      	ldr	r2, [pc, #108]	; (8005840 <HAL_DMA_Abort_IT+0x400>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d004      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x3a2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a19      	ldr	r2, [pc, #100]	; (8005844 <HAL_DMA_Abort_IT+0x404>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d132      	bne.n	8005848 <HAL_DMA_Abort_IT+0x408>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e031      	b.n	800584a <HAL_DMA_Abort_IT+0x40a>
 80057e6:	bf00      	nop
 80057e8:	40020010 	.word	0x40020010
 80057ec:	40020028 	.word	0x40020028
 80057f0:	40020040 	.word	0x40020040
 80057f4:	40020058 	.word	0x40020058
 80057f8:	40020070 	.word	0x40020070
 80057fc:	40020088 	.word	0x40020088
 8005800:	400200a0 	.word	0x400200a0
 8005804:	400200b8 	.word	0x400200b8
 8005808:	40020410 	.word	0x40020410
 800580c:	40020428 	.word	0x40020428
 8005810:	40020440 	.word	0x40020440
 8005814:	40020458 	.word	0x40020458
 8005818:	40020470 	.word	0x40020470
 800581c:	40020488 	.word	0x40020488
 8005820:	400204a0 	.word	0x400204a0
 8005824:	400204b8 	.word	0x400204b8
 8005828:	58025408 	.word	0x58025408
 800582c:	5802541c 	.word	0x5802541c
 8005830:	58025430 	.word	0x58025430
 8005834:	58025444 	.word	0x58025444
 8005838:	58025458 	.word	0x58025458
 800583c:	5802546c 	.word	0x5802546c
 8005840:	58025480 	.word	0x58025480
 8005844:	58025494 	.word	0x58025494
 8005848:	2300      	movs	r3, #0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d028      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800585c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005862:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005868:	f003 031f 	and.w	r3, r3, #31
 800586c:	2201      	movs	r2, #1
 800586e:	409a      	lsls	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800587c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00c      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005894:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800589e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop

080058cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08a      	sub	sp, #40	; 0x28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058d8:	4b67      	ldr	r3, [pc, #412]	; (8005a78 <HAL_DMA_IRQHandler+0x1ac>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a67      	ldr	r2, [pc, #412]	; (8005a7c <HAL_DMA_IRQHandler+0x1b0>)
 80058de:	fba2 2303 	umull	r2, r3, r2, r3
 80058e2:	0a9b      	lsrs	r3, r3, #10
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a5f      	ldr	r2, [pc, #380]	; (8005a80 <HAL_DMA_IRQHandler+0x1b4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d04a      	beq.n	800599e <HAL_DMA_IRQHandler+0xd2>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a5d      	ldr	r2, [pc, #372]	; (8005a84 <HAL_DMA_IRQHandler+0x1b8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d045      	beq.n	800599e <HAL_DMA_IRQHandler+0xd2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a5c      	ldr	r2, [pc, #368]	; (8005a88 <HAL_DMA_IRQHandler+0x1bc>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d040      	beq.n	800599e <HAL_DMA_IRQHandler+0xd2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a5a      	ldr	r2, [pc, #360]	; (8005a8c <HAL_DMA_IRQHandler+0x1c0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d03b      	beq.n	800599e <HAL_DMA_IRQHandler+0xd2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a59      	ldr	r2, [pc, #356]	; (8005a90 <HAL_DMA_IRQHandler+0x1c4>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d036      	beq.n	800599e <HAL_DMA_IRQHandler+0xd2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a57      	ldr	r2, [pc, #348]	; (8005a94 <HAL_DMA_IRQHandler+0x1c8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d031      	beq.n	800599e <HAL_DMA_IRQHandler+0xd2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a56      	ldr	r2, [pc, #344]	; (8005a98 <HAL_DMA_IRQHandler+0x1cc>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d02c      	beq.n	800599e <HAL_DMA_IRQHandler+0xd2>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a54      	ldr	r2, [pc, #336]	; (8005a9c <HAL_DMA_IRQHandler+0x1d0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d027      	beq.n	800599e <HAL_DMA_IRQHandler+0xd2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a53      	ldr	r2, [pc, #332]	; (8005aa0 <HAL_DMA_IRQHandler+0x1d4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d022      	beq.n	800599e <HAL_DMA_IRQHandler+0xd2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a51      	ldr	r2, [pc, #324]	; (8005aa4 <HAL_DMA_IRQHandler+0x1d8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d01d      	beq.n	800599e <HAL_DMA_IRQHandler+0xd2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a50      	ldr	r2, [pc, #320]	; (8005aa8 <HAL_DMA_IRQHandler+0x1dc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d018      	beq.n	800599e <HAL_DMA_IRQHandler+0xd2>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a4e      	ldr	r2, [pc, #312]	; (8005aac <HAL_DMA_IRQHandler+0x1e0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d013      	beq.n	800599e <HAL_DMA_IRQHandler+0xd2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a4d      	ldr	r2, [pc, #308]	; (8005ab0 <HAL_DMA_IRQHandler+0x1e4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00e      	beq.n	800599e <HAL_DMA_IRQHandler+0xd2>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a4b      	ldr	r2, [pc, #300]	; (8005ab4 <HAL_DMA_IRQHandler+0x1e8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d009      	beq.n	800599e <HAL_DMA_IRQHandler+0xd2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a4a      	ldr	r2, [pc, #296]	; (8005ab8 <HAL_DMA_IRQHandler+0x1ec>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d004      	beq.n	800599e <HAL_DMA_IRQHandler+0xd2>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a48      	ldr	r2, [pc, #288]	; (8005abc <HAL_DMA_IRQHandler+0x1f0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d101      	bne.n	80059a2 <HAL_DMA_IRQHandler+0xd6>
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <HAL_DMA_IRQHandler+0xd8>
 80059a2:	2300      	movs	r3, #0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 842b 	beq.w	8006200 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	2208      	movs	r2, #8
 80059b4:	409a      	lsls	r2, r3
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	4013      	ands	r3, r2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 80a2 	beq.w	8005b04 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a2e      	ldr	r2, [pc, #184]	; (8005a80 <HAL_DMA_IRQHandler+0x1b4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d04a      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x194>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a2d      	ldr	r2, [pc, #180]	; (8005a84 <HAL_DMA_IRQHandler+0x1b8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d045      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x194>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a2b      	ldr	r2, [pc, #172]	; (8005a88 <HAL_DMA_IRQHandler+0x1bc>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d040      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x194>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a2a      	ldr	r2, [pc, #168]	; (8005a8c <HAL_DMA_IRQHandler+0x1c0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d03b      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x194>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a28      	ldr	r2, [pc, #160]	; (8005a90 <HAL_DMA_IRQHandler+0x1c4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d036      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x194>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a27      	ldr	r2, [pc, #156]	; (8005a94 <HAL_DMA_IRQHandler+0x1c8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d031      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x194>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a25      	ldr	r2, [pc, #148]	; (8005a98 <HAL_DMA_IRQHandler+0x1cc>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d02c      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x194>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a24      	ldr	r2, [pc, #144]	; (8005a9c <HAL_DMA_IRQHandler+0x1d0>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d027      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x194>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a22      	ldr	r2, [pc, #136]	; (8005aa0 <HAL_DMA_IRQHandler+0x1d4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d022      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x194>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a21      	ldr	r2, [pc, #132]	; (8005aa4 <HAL_DMA_IRQHandler+0x1d8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d01d      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x194>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a1f      	ldr	r2, [pc, #124]	; (8005aa8 <HAL_DMA_IRQHandler+0x1dc>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d018      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x194>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a1e      	ldr	r2, [pc, #120]	; (8005aac <HAL_DMA_IRQHandler+0x1e0>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d013      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x194>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1c      	ldr	r2, [pc, #112]	; (8005ab0 <HAL_DMA_IRQHandler+0x1e4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00e      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x194>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1b      	ldr	r2, [pc, #108]	; (8005ab4 <HAL_DMA_IRQHandler+0x1e8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d009      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x194>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a19      	ldr	r2, [pc, #100]	; (8005ab8 <HAL_DMA_IRQHandler+0x1ec>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d004      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x194>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a18      	ldr	r2, [pc, #96]	; (8005abc <HAL_DMA_IRQHandler+0x1f0>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d12f      	bne.n	8005ac0 <HAL_DMA_IRQHandler+0x1f4>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	bf14      	ite	ne
 8005a6e:	2301      	movne	r3, #1
 8005a70:	2300      	moveq	r3, #0
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	e02e      	b.n	8005ad4 <HAL_DMA_IRQHandler+0x208>
 8005a76:	bf00      	nop
 8005a78:	2400000c 	.word	0x2400000c
 8005a7c:	1b4e81b5 	.word	0x1b4e81b5
 8005a80:	40020010 	.word	0x40020010
 8005a84:	40020028 	.word	0x40020028
 8005a88:	40020040 	.word	0x40020040
 8005a8c:	40020058 	.word	0x40020058
 8005a90:	40020070 	.word	0x40020070
 8005a94:	40020088 	.word	0x40020088
 8005a98:	400200a0 	.word	0x400200a0
 8005a9c:	400200b8 	.word	0x400200b8
 8005aa0:	40020410 	.word	0x40020410
 8005aa4:	40020428 	.word	0x40020428
 8005aa8:	40020440 	.word	0x40020440
 8005aac:	40020458 	.word	0x40020458
 8005ab0:	40020470 	.word	0x40020470
 8005ab4:	40020488 	.word	0x40020488
 8005ab8:	400204a0 	.word	0x400204a0
 8005abc:	400204b8 	.word	0x400204b8
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	bf14      	ite	ne
 8005ace:	2301      	movne	r3, #1
 8005ad0:	2300      	moveq	r3, #0
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d015      	beq.n	8005b04 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0204 	bic.w	r2, r2, #4
 8005ae6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	2208      	movs	r2, #8
 8005af2:	409a      	lsls	r2, r3
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afc:	f043 0201 	orr.w	r2, r3, #1
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b08:	f003 031f 	and.w	r3, r3, #31
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d06e      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a69      	ldr	r2, [pc, #420]	; (8005cc4 <HAL_DMA_IRQHandler+0x3f8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d04a      	beq.n	8005bba <HAL_DMA_IRQHandler+0x2ee>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a67      	ldr	r2, [pc, #412]	; (8005cc8 <HAL_DMA_IRQHandler+0x3fc>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d045      	beq.n	8005bba <HAL_DMA_IRQHandler+0x2ee>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a66      	ldr	r2, [pc, #408]	; (8005ccc <HAL_DMA_IRQHandler+0x400>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d040      	beq.n	8005bba <HAL_DMA_IRQHandler+0x2ee>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a64      	ldr	r2, [pc, #400]	; (8005cd0 <HAL_DMA_IRQHandler+0x404>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d03b      	beq.n	8005bba <HAL_DMA_IRQHandler+0x2ee>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a63      	ldr	r2, [pc, #396]	; (8005cd4 <HAL_DMA_IRQHandler+0x408>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d036      	beq.n	8005bba <HAL_DMA_IRQHandler+0x2ee>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a61      	ldr	r2, [pc, #388]	; (8005cd8 <HAL_DMA_IRQHandler+0x40c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d031      	beq.n	8005bba <HAL_DMA_IRQHandler+0x2ee>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a60      	ldr	r2, [pc, #384]	; (8005cdc <HAL_DMA_IRQHandler+0x410>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d02c      	beq.n	8005bba <HAL_DMA_IRQHandler+0x2ee>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a5e      	ldr	r2, [pc, #376]	; (8005ce0 <HAL_DMA_IRQHandler+0x414>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d027      	beq.n	8005bba <HAL_DMA_IRQHandler+0x2ee>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a5d      	ldr	r2, [pc, #372]	; (8005ce4 <HAL_DMA_IRQHandler+0x418>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d022      	beq.n	8005bba <HAL_DMA_IRQHandler+0x2ee>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a5b      	ldr	r2, [pc, #364]	; (8005ce8 <HAL_DMA_IRQHandler+0x41c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d01d      	beq.n	8005bba <HAL_DMA_IRQHandler+0x2ee>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a5a      	ldr	r2, [pc, #360]	; (8005cec <HAL_DMA_IRQHandler+0x420>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d018      	beq.n	8005bba <HAL_DMA_IRQHandler+0x2ee>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a58      	ldr	r2, [pc, #352]	; (8005cf0 <HAL_DMA_IRQHandler+0x424>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <HAL_DMA_IRQHandler+0x2ee>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a57      	ldr	r2, [pc, #348]	; (8005cf4 <HAL_DMA_IRQHandler+0x428>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00e      	beq.n	8005bba <HAL_DMA_IRQHandler+0x2ee>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a55      	ldr	r2, [pc, #340]	; (8005cf8 <HAL_DMA_IRQHandler+0x42c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d009      	beq.n	8005bba <HAL_DMA_IRQHandler+0x2ee>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a54      	ldr	r2, [pc, #336]	; (8005cfc <HAL_DMA_IRQHandler+0x430>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <HAL_DMA_IRQHandler+0x2ee>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a52      	ldr	r2, [pc, #328]	; (8005d00 <HAL_DMA_IRQHandler+0x434>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d10a      	bne.n	8005bd0 <HAL_DMA_IRQHandler+0x304>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bf14      	ite	ne
 8005bc8:	2301      	movne	r3, #1
 8005bca:	2300      	moveq	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	e003      	b.n	8005bd8 <HAL_DMA_IRQHandler+0x30c>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00d      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	2201      	movs	r2, #1
 8005be6:	409a      	lsls	r2, r3
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf0:	f043 0202 	orr.w	r2, r3, #2
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	2204      	movs	r2, #4
 8005c02:	409a      	lsls	r2, r3
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 808f 	beq.w	8005d2c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2c      	ldr	r2, [pc, #176]	; (8005cc4 <HAL_DMA_IRQHandler+0x3f8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d04a      	beq.n	8005cae <HAL_DMA_IRQHandler+0x3e2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2a      	ldr	r2, [pc, #168]	; (8005cc8 <HAL_DMA_IRQHandler+0x3fc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d045      	beq.n	8005cae <HAL_DMA_IRQHandler+0x3e2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a29      	ldr	r2, [pc, #164]	; (8005ccc <HAL_DMA_IRQHandler+0x400>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d040      	beq.n	8005cae <HAL_DMA_IRQHandler+0x3e2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a27      	ldr	r2, [pc, #156]	; (8005cd0 <HAL_DMA_IRQHandler+0x404>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d03b      	beq.n	8005cae <HAL_DMA_IRQHandler+0x3e2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a26      	ldr	r2, [pc, #152]	; (8005cd4 <HAL_DMA_IRQHandler+0x408>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d036      	beq.n	8005cae <HAL_DMA_IRQHandler+0x3e2>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a24      	ldr	r2, [pc, #144]	; (8005cd8 <HAL_DMA_IRQHandler+0x40c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d031      	beq.n	8005cae <HAL_DMA_IRQHandler+0x3e2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a23      	ldr	r2, [pc, #140]	; (8005cdc <HAL_DMA_IRQHandler+0x410>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d02c      	beq.n	8005cae <HAL_DMA_IRQHandler+0x3e2>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a21      	ldr	r2, [pc, #132]	; (8005ce0 <HAL_DMA_IRQHandler+0x414>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d027      	beq.n	8005cae <HAL_DMA_IRQHandler+0x3e2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a20      	ldr	r2, [pc, #128]	; (8005ce4 <HAL_DMA_IRQHandler+0x418>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d022      	beq.n	8005cae <HAL_DMA_IRQHandler+0x3e2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1e      	ldr	r2, [pc, #120]	; (8005ce8 <HAL_DMA_IRQHandler+0x41c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d01d      	beq.n	8005cae <HAL_DMA_IRQHandler+0x3e2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a1d      	ldr	r2, [pc, #116]	; (8005cec <HAL_DMA_IRQHandler+0x420>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d018      	beq.n	8005cae <HAL_DMA_IRQHandler+0x3e2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1b      	ldr	r2, [pc, #108]	; (8005cf0 <HAL_DMA_IRQHandler+0x424>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d013      	beq.n	8005cae <HAL_DMA_IRQHandler+0x3e2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1a      	ldr	r2, [pc, #104]	; (8005cf4 <HAL_DMA_IRQHandler+0x428>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00e      	beq.n	8005cae <HAL_DMA_IRQHandler+0x3e2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a18      	ldr	r2, [pc, #96]	; (8005cf8 <HAL_DMA_IRQHandler+0x42c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d009      	beq.n	8005cae <HAL_DMA_IRQHandler+0x3e2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a17      	ldr	r2, [pc, #92]	; (8005cfc <HAL_DMA_IRQHandler+0x430>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d004      	beq.n	8005cae <HAL_DMA_IRQHandler+0x3e2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a15      	ldr	r2, [pc, #84]	; (8005d00 <HAL_DMA_IRQHandler+0x434>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d12a      	bne.n	8005d04 <HAL_DMA_IRQHandler+0x438>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	bf14      	ite	ne
 8005cbc:	2301      	movne	r3, #1
 8005cbe:	2300      	moveq	r3, #0
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	e023      	b.n	8005d0c <HAL_DMA_IRQHandler+0x440>
 8005cc4:	40020010 	.word	0x40020010
 8005cc8:	40020028 	.word	0x40020028
 8005ccc:	40020040 	.word	0x40020040
 8005cd0:	40020058 	.word	0x40020058
 8005cd4:	40020070 	.word	0x40020070
 8005cd8:	40020088 	.word	0x40020088
 8005cdc:	400200a0 	.word	0x400200a0
 8005ce0:	400200b8 	.word	0x400200b8
 8005ce4:	40020410 	.word	0x40020410
 8005ce8:	40020428 	.word	0x40020428
 8005cec:	40020440 	.word	0x40020440
 8005cf0:	40020458 	.word	0x40020458
 8005cf4:	40020470 	.word	0x40020470
 8005cf8:	40020488 	.word	0x40020488
 8005cfc:	400204a0 	.word	0x400204a0
 8005d00:	400204b8 	.word	0x400204b8
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00d      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d14:	f003 031f 	and.w	r3, r3, #31
 8005d18:	2204      	movs	r2, #4
 8005d1a:	409a      	lsls	r2, r3
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d24:	f043 0204 	orr.w	r2, r3, #4
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	2210      	movs	r2, #16
 8005d36:	409a      	lsls	r2, r3
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80a6 	beq.w	8005e8e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a85      	ldr	r2, [pc, #532]	; (8005f5c <HAL_DMA_IRQHandler+0x690>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d04a      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x516>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a83      	ldr	r2, [pc, #524]	; (8005f60 <HAL_DMA_IRQHandler+0x694>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d045      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x516>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a82      	ldr	r2, [pc, #520]	; (8005f64 <HAL_DMA_IRQHandler+0x698>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d040      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x516>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a80      	ldr	r2, [pc, #512]	; (8005f68 <HAL_DMA_IRQHandler+0x69c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d03b      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x516>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a7f      	ldr	r2, [pc, #508]	; (8005f6c <HAL_DMA_IRQHandler+0x6a0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d036      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x516>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a7d      	ldr	r2, [pc, #500]	; (8005f70 <HAL_DMA_IRQHandler+0x6a4>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d031      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x516>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a7c      	ldr	r2, [pc, #496]	; (8005f74 <HAL_DMA_IRQHandler+0x6a8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d02c      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x516>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a7a      	ldr	r2, [pc, #488]	; (8005f78 <HAL_DMA_IRQHandler+0x6ac>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d027      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x516>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a79      	ldr	r2, [pc, #484]	; (8005f7c <HAL_DMA_IRQHandler+0x6b0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d022      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x516>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a77      	ldr	r2, [pc, #476]	; (8005f80 <HAL_DMA_IRQHandler+0x6b4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d01d      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x516>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a76      	ldr	r2, [pc, #472]	; (8005f84 <HAL_DMA_IRQHandler+0x6b8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d018      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x516>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a74      	ldr	r2, [pc, #464]	; (8005f88 <HAL_DMA_IRQHandler+0x6bc>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d013      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x516>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a73      	ldr	r2, [pc, #460]	; (8005f8c <HAL_DMA_IRQHandler+0x6c0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d00e      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x516>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a71      	ldr	r2, [pc, #452]	; (8005f90 <HAL_DMA_IRQHandler+0x6c4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d009      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x516>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a70      	ldr	r2, [pc, #448]	; (8005f94 <HAL_DMA_IRQHandler+0x6c8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d004      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x516>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a6e      	ldr	r2, [pc, #440]	; (8005f98 <HAL_DMA_IRQHandler+0x6cc>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d10a      	bne.n	8005df8 <HAL_DMA_IRQHandler+0x52c>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0308 	and.w	r3, r3, #8
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	bf14      	ite	ne
 8005df0:	2301      	movne	r3, #1
 8005df2:	2300      	moveq	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	e009      	b.n	8005e0c <HAL_DMA_IRQHandler+0x540>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	bf14      	ite	ne
 8005e06:	2301      	movne	r3, #1
 8005e08:	2300      	moveq	r3, #0
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d03e      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e14:	f003 031f 	and.w	r3, r3, #31
 8005e18:	2210      	movs	r2, #16
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d018      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d108      	bne.n	8005e4e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d024      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	4798      	blx	r3
 8005e4c:	e01f      	b.n	8005e8e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d01b      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	4798      	blx	r3
 8005e5e:	e016      	b.n	8005e8e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d107      	bne.n	8005e7e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0208 	bic.w	r2, r2, #8
 8005e7c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e92:	f003 031f 	and.w	r3, r3, #31
 8005e96:	2220      	movs	r2, #32
 8005e98:	409a      	lsls	r2, r3
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 8110 	beq.w	80060c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a2c      	ldr	r2, [pc, #176]	; (8005f5c <HAL_DMA_IRQHandler+0x690>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d04a      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x678>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a2b      	ldr	r2, [pc, #172]	; (8005f60 <HAL_DMA_IRQHandler+0x694>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d045      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x678>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a29      	ldr	r2, [pc, #164]	; (8005f64 <HAL_DMA_IRQHandler+0x698>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d040      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x678>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a28      	ldr	r2, [pc, #160]	; (8005f68 <HAL_DMA_IRQHandler+0x69c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d03b      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x678>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a26      	ldr	r2, [pc, #152]	; (8005f6c <HAL_DMA_IRQHandler+0x6a0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d036      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x678>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a25      	ldr	r2, [pc, #148]	; (8005f70 <HAL_DMA_IRQHandler+0x6a4>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d031      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x678>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a23      	ldr	r2, [pc, #140]	; (8005f74 <HAL_DMA_IRQHandler+0x6a8>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d02c      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x678>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a22      	ldr	r2, [pc, #136]	; (8005f78 <HAL_DMA_IRQHandler+0x6ac>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d027      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x678>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a20      	ldr	r2, [pc, #128]	; (8005f7c <HAL_DMA_IRQHandler+0x6b0>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d022      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x678>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1f      	ldr	r2, [pc, #124]	; (8005f80 <HAL_DMA_IRQHandler+0x6b4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d01d      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x678>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1d      	ldr	r2, [pc, #116]	; (8005f84 <HAL_DMA_IRQHandler+0x6b8>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d018      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x678>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1c      	ldr	r2, [pc, #112]	; (8005f88 <HAL_DMA_IRQHandler+0x6bc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d013      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x678>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1a      	ldr	r2, [pc, #104]	; (8005f8c <HAL_DMA_IRQHandler+0x6c0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00e      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x678>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a19      	ldr	r2, [pc, #100]	; (8005f90 <HAL_DMA_IRQHandler+0x6c4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d009      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x678>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a17      	ldr	r2, [pc, #92]	; (8005f94 <HAL_DMA_IRQHandler+0x6c8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d004      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x678>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a16      	ldr	r2, [pc, #88]	; (8005f98 <HAL_DMA_IRQHandler+0x6cc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d12b      	bne.n	8005f9c <HAL_DMA_IRQHandler+0x6d0>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	bf14      	ite	ne
 8005f52:	2301      	movne	r3, #1
 8005f54:	2300      	moveq	r3, #0
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	e02a      	b.n	8005fb0 <HAL_DMA_IRQHandler+0x6e4>
 8005f5a:	bf00      	nop
 8005f5c:	40020010 	.word	0x40020010
 8005f60:	40020028 	.word	0x40020028
 8005f64:	40020040 	.word	0x40020040
 8005f68:	40020058 	.word	0x40020058
 8005f6c:	40020070 	.word	0x40020070
 8005f70:	40020088 	.word	0x40020088
 8005f74:	400200a0 	.word	0x400200a0
 8005f78:	400200b8 	.word	0x400200b8
 8005f7c:	40020410 	.word	0x40020410
 8005f80:	40020428 	.word	0x40020428
 8005f84:	40020440 	.word	0x40020440
 8005f88:	40020458 	.word	0x40020458
 8005f8c:	40020470 	.word	0x40020470
 8005f90:	40020488 	.word	0x40020488
 8005f94:	400204a0 	.word	0x400204a0
 8005f98:	400204b8 	.word	0x400204b8
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	bf14      	ite	ne
 8005faa:	2301      	movne	r3, #1
 8005fac:	2300      	moveq	r3, #0
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 8087 	beq.w	80060c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fba:	f003 031f 	and.w	r3, r3, #31
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	409a      	lsls	r2, r3
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d139      	bne.n	8006046 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0216 	bic.w	r2, r2, #22
 8005fe0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695a      	ldr	r2, [r3, #20]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ff0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d103      	bne.n	8006002 <HAL_DMA_IRQHandler+0x736>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d007      	beq.n	8006012 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0208 	bic.w	r2, r2, #8
 8006010:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	223f      	movs	r2, #63	; 0x3f
 800601c:	409a      	lsls	r2, r3
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 8382 	beq.w	8006740 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	4798      	blx	r3
          }
          return;
 8006044:	e37c      	b.n	8006740 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d018      	beq.n	8006086 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d108      	bne.n	8006074 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006066:	2b00      	cmp	r3, #0
 8006068:	d02c      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	4798      	blx	r3
 8006072:	e027      	b.n	80060c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d023      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4798      	blx	r3
 8006084:	e01e      	b.n	80060c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10f      	bne.n	80060b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0210 	bic.w	r2, r2, #16
 80060a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 833e 	beq.w	800674a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 8088 	beq.w	80061ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2204      	movs	r2, #4
 80060e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a89      	ldr	r2, [pc, #548]	; (8006310 <HAL_DMA_IRQHandler+0xa44>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d04a      	beq.n	8006184 <HAL_DMA_IRQHandler+0x8b8>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a88      	ldr	r2, [pc, #544]	; (8006314 <HAL_DMA_IRQHandler+0xa48>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d045      	beq.n	8006184 <HAL_DMA_IRQHandler+0x8b8>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a86      	ldr	r2, [pc, #536]	; (8006318 <HAL_DMA_IRQHandler+0xa4c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d040      	beq.n	8006184 <HAL_DMA_IRQHandler+0x8b8>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a85      	ldr	r2, [pc, #532]	; (800631c <HAL_DMA_IRQHandler+0xa50>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d03b      	beq.n	8006184 <HAL_DMA_IRQHandler+0x8b8>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a83      	ldr	r2, [pc, #524]	; (8006320 <HAL_DMA_IRQHandler+0xa54>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d036      	beq.n	8006184 <HAL_DMA_IRQHandler+0x8b8>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a82      	ldr	r2, [pc, #520]	; (8006324 <HAL_DMA_IRQHandler+0xa58>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d031      	beq.n	8006184 <HAL_DMA_IRQHandler+0x8b8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a80      	ldr	r2, [pc, #512]	; (8006328 <HAL_DMA_IRQHandler+0xa5c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d02c      	beq.n	8006184 <HAL_DMA_IRQHandler+0x8b8>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a7f      	ldr	r2, [pc, #508]	; (800632c <HAL_DMA_IRQHandler+0xa60>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d027      	beq.n	8006184 <HAL_DMA_IRQHandler+0x8b8>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a7d      	ldr	r2, [pc, #500]	; (8006330 <HAL_DMA_IRQHandler+0xa64>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d022      	beq.n	8006184 <HAL_DMA_IRQHandler+0x8b8>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a7c      	ldr	r2, [pc, #496]	; (8006334 <HAL_DMA_IRQHandler+0xa68>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d01d      	beq.n	8006184 <HAL_DMA_IRQHandler+0x8b8>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a7a      	ldr	r2, [pc, #488]	; (8006338 <HAL_DMA_IRQHandler+0xa6c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d018      	beq.n	8006184 <HAL_DMA_IRQHandler+0x8b8>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a79      	ldr	r2, [pc, #484]	; (800633c <HAL_DMA_IRQHandler+0xa70>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d013      	beq.n	8006184 <HAL_DMA_IRQHandler+0x8b8>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a77      	ldr	r2, [pc, #476]	; (8006340 <HAL_DMA_IRQHandler+0xa74>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d00e      	beq.n	8006184 <HAL_DMA_IRQHandler+0x8b8>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a76      	ldr	r2, [pc, #472]	; (8006344 <HAL_DMA_IRQHandler+0xa78>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d009      	beq.n	8006184 <HAL_DMA_IRQHandler+0x8b8>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a74      	ldr	r2, [pc, #464]	; (8006348 <HAL_DMA_IRQHandler+0xa7c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d004      	beq.n	8006184 <HAL_DMA_IRQHandler+0x8b8>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a73      	ldr	r2, [pc, #460]	; (800634c <HAL_DMA_IRQHandler+0xa80>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d108      	bne.n	8006196 <HAL_DMA_IRQHandler+0x8ca>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0201 	bic.w	r2, r2, #1
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	e007      	b.n	80061a6 <HAL_DMA_IRQHandler+0x8da>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0201 	bic.w	r2, r2, #1
 80061a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3301      	adds	r3, #1
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d307      	bcc.n	80061c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1f2      	bne.n	80061a6 <HAL_DMA_IRQHandler+0x8da>
 80061c0:	e000      	b.n	80061c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80061c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d004      	beq.n	80061dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2203      	movs	r2, #3
 80061d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80061da:	e003      	b.n	80061e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 82aa 	beq.w	800674a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	4798      	blx	r3
 80061fe:	e2a4      	b.n	800674a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a52      	ldr	r2, [pc, #328]	; (8006350 <HAL_DMA_IRQHandler+0xa84>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d04a      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x9d4>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a51      	ldr	r2, [pc, #324]	; (8006354 <HAL_DMA_IRQHandler+0xa88>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d045      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x9d4>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a4f      	ldr	r2, [pc, #316]	; (8006358 <HAL_DMA_IRQHandler+0xa8c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d040      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x9d4>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a4e      	ldr	r2, [pc, #312]	; (800635c <HAL_DMA_IRQHandler+0xa90>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d03b      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x9d4>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a4c      	ldr	r2, [pc, #304]	; (8006360 <HAL_DMA_IRQHandler+0xa94>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d036      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x9d4>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a4b      	ldr	r2, [pc, #300]	; (8006364 <HAL_DMA_IRQHandler+0xa98>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d031      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x9d4>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a49      	ldr	r2, [pc, #292]	; (8006368 <HAL_DMA_IRQHandler+0xa9c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d02c      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x9d4>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a48      	ldr	r2, [pc, #288]	; (800636c <HAL_DMA_IRQHandler+0xaa0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d027      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x9d4>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a46      	ldr	r2, [pc, #280]	; (8006370 <HAL_DMA_IRQHandler+0xaa4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d022      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x9d4>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a45      	ldr	r2, [pc, #276]	; (8006374 <HAL_DMA_IRQHandler+0xaa8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d01d      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x9d4>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a43      	ldr	r2, [pc, #268]	; (8006378 <HAL_DMA_IRQHandler+0xaac>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d018      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x9d4>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a42      	ldr	r2, [pc, #264]	; (800637c <HAL_DMA_IRQHandler+0xab0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d013      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x9d4>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a40      	ldr	r2, [pc, #256]	; (8006380 <HAL_DMA_IRQHandler+0xab4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00e      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x9d4>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a3f      	ldr	r2, [pc, #252]	; (8006384 <HAL_DMA_IRQHandler+0xab8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d009      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x9d4>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a3d      	ldr	r2, [pc, #244]	; (8006388 <HAL_DMA_IRQHandler+0xabc>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d004      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x9d4>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a3c      	ldr	r2, [pc, #240]	; (800638c <HAL_DMA_IRQHandler+0xac0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d101      	bne.n	80062a4 <HAL_DMA_IRQHandler+0x9d8>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <HAL_DMA_IRQHandler+0x9da>
 80062a4:	2300      	movs	r3, #0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 824f 	beq.w	800674a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	2204      	movs	r2, #4
 80062be:	409a      	lsls	r2, r3
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	4013      	ands	r3, r2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80dd 	beq.w	8006484 <HAL_DMA_IRQHandler+0xbb8>
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 80d7 	beq.w	8006484 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062da:	f003 031f 	and.w	r3, r3, #31
 80062de:	2204      	movs	r2, #4
 80062e0:	409a      	lsls	r2, r3
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d059      	beq.n	80063a4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d14a      	bne.n	8006390 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 8220 	beq.w	8006744 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800630c:	e21a      	b.n	8006744 <HAL_DMA_IRQHandler+0xe78>
 800630e:	bf00      	nop
 8006310:	40020010 	.word	0x40020010
 8006314:	40020028 	.word	0x40020028
 8006318:	40020040 	.word	0x40020040
 800631c:	40020058 	.word	0x40020058
 8006320:	40020070 	.word	0x40020070
 8006324:	40020088 	.word	0x40020088
 8006328:	400200a0 	.word	0x400200a0
 800632c:	400200b8 	.word	0x400200b8
 8006330:	40020410 	.word	0x40020410
 8006334:	40020428 	.word	0x40020428
 8006338:	40020440 	.word	0x40020440
 800633c:	40020458 	.word	0x40020458
 8006340:	40020470 	.word	0x40020470
 8006344:	40020488 	.word	0x40020488
 8006348:	400204a0 	.word	0x400204a0
 800634c:	400204b8 	.word	0x400204b8
 8006350:	48022c08 	.word	0x48022c08
 8006354:	48022c1c 	.word	0x48022c1c
 8006358:	48022c30 	.word	0x48022c30
 800635c:	48022c44 	.word	0x48022c44
 8006360:	48022c58 	.word	0x48022c58
 8006364:	48022c6c 	.word	0x48022c6c
 8006368:	48022c80 	.word	0x48022c80
 800636c:	48022c94 	.word	0x48022c94
 8006370:	58025408 	.word	0x58025408
 8006374:	5802541c 	.word	0x5802541c
 8006378:	58025430 	.word	0x58025430
 800637c:	58025444 	.word	0x58025444
 8006380:	58025458 	.word	0x58025458
 8006384:	5802546c 	.word	0x5802546c
 8006388:	58025480 	.word	0x58025480
 800638c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 81d5 	beq.w	8006744 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063a2:	e1cf      	b.n	8006744 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f003 0320 	and.w	r3, r3, #32
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d160      	bne.n	8006470 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a7f      	ldr	r2, [pc, #508]	; (80065b0 <HAL_DMA_IRQHandler+0xce4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d04a      	beq.n	800644e <HAL_DMA_IRQHandler+0xb82>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a7d      	ldr	r2, [pc, #500]	; (80065b4 <HAL_DMA_IRQHandler+0xce8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d045      	beq.n	800644e <HAL_DMA_IRQHandler+0xb82>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a7c      	ldr	r2, [pc, #496]	; (80065b8 <HAL_DMA_IRQHandler+0xcec>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d040      	beq.n	800644e <HAL_DMA_IRQHandler+0xb82>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a7a      	ldr	r2, [pc, #488]	; (80065bc <HAL_DMA_IRQHandler+0xcf0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d03b      	beq.n	800644e <HAL_DMA_IRQHandler+0xb82>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a79      	ldr	r2, [pc, #484]	; (80065c0 <HAL_DMA_IRQHandler+0xcf4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d036      	beq.n	800644e <HAL_DMA_IRQHandler+0xb82>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a77      	ldr	r2, [pc, #476]	; (80065c4 <HAL_DMA_IRQHandler+0xcf8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d031      	beq.n	800644e <HAL_DMA_IRQHandler+0xb82>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a76      	ldr	r2, [pc, #472]	; (80065c8 <HAL_DMA_IRQHandler+0xcfc>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d02c      	beq.n	800644e <HAL_DMA_IRQHandler+0xb82>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a74      	ldr	r2, [pc, #464]	; (80065cc <HAL_DMA_IRQHandler+0xd00>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d027      	beq.n	800644e <HAL_DMA_IRQHandler+0xb82>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a73      	ldr	r2, [pc, #460]	; (80065d0 <HAL_DMA_IRQHandler+0xd04>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d022      	beq.n	800644e <HAL_DMA_IRQHandler+0xb82>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a71      	ldr	r2, [pc, #452]	; (80065d4 <HAL_DMA_IRQHandler+0xd08>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d01d      	beq.n	800644e <HAL_DMA_IRQHandler+0xb82>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a70      	ldr	r2, [pc, #448]	; (80065d8 <HAL_DMA_IRQHandler+0xd0c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d018      	beq.n	800644e <HAL_DMA_IRQHandler+0xb82>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a6e      	ldr	r2, [pc, #440]	; (80065dc <HAL_DMA_IRQHandler+0xd10>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d013      	beq.n	800644e <HAL_DMA_IRQHandler+0xb82>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a6d      	ldr	r2, [pc, #436]	; (80065e0 <HAL_DMA_IRQHandler+0xd14>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00e      	beq.n	800644e <HAL_DMA_IRQHandler+0xb82>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a6b      	ldr	r2, [pc, #428]	; (80065e4 <HAL_DMA_IRQHandler+0xd18>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d009      	beq.n	800644e <HAL_DMA_IRQHandler+0xb82>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a6a      	ldr	r2, [pc, #424]	; (80065e8 <HAL_DMA_IRQHandler+0xd1c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d004      	beq.n	800644e <HAL_DMA_IRQHandler+0xb82>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a68      	ldr	r2, [pc, #416]	; (80065ec <HAL_DMA_IRQHandler+0xd20>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d108      	bne.n	8006460 <HAL_DMA_IRQHandler+0xb94>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0208 	bic.w	r2, r2, #8
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	e007      	b.n	8006470 <HAL_DMA_IRQHandler+0xba4>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0204 	bic.w	r2, r2, #4
 800646e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 8165 	beq.w	8006744 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006482:	e15f      	b.n	8006744 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006488:	f003 031f 	and.w	r3, r3, #31
 800648c:	2202      	movs	r2, #2
 800648e:	409a      	lsls	r2, r3
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	4013      	ands	r3, r2
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 80c5 	beq.w	8006624 <HAL_DMA_IRQHandler+0xd58>
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80bf 	beq.w	8006624 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064aa:	f003 031f 	and.w	r3, r3, #31
 80064ae:	2202      	movs	r2, #2
 80064b0:	409a      	lsls	r2, r3
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d018      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d109      	bne.n	80064de <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 813a 	beq.w	8006748 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064dc:	e134      	b.n	8006748 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 8130 	beq.w	8006748 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064f0:	e12a      	b.n	8006748 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f040 8089 	bne.w	8006610 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a2b      	ldr	r2, [pc, #172]	; (80065b0 <HAL_DMA_IRQHandler+0xce4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d04a      	beq.n	800659e <HAL_DMA_IRQHandler+0xcd2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a29      	ldr	r2, [pc, #164]	; (80065b4 <HAL_DMA_IRQHandler+0xce8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d045      	beq.n	800659e <HAL_DMA_IRQHandler+0xcd2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a28      	ldr	r2, [pc, #160]	; (80065b8 <HAL_DMA_IRQHandler+0xcec>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d040      	beq.n	800659e <HAL_DMA_IRQHandler+0xcd2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a26      	ldr	r2, [pc, #152]	; (80065bc <HAL_DMA_IRQHandler+0xcf0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d03b      	beq.n	800659e <HAL_DMA_IRQHandler+0xcd2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a25      	ldr	r2, [pc, #148]	; (80065c0 <HAL_DMA_IRQHandler+0xcf4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d036      	beq.n	800659e <HAL_DMA_IRQHandler+0xcd2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a23      	ldr	r2, [pc, #140]	; (80065c4 <HAL_DMA_IRQHandler+0xcf8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d031      	beq.n	800659e <HAL_DMA_IRQHandler+0xcd2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a22      	ldr	r2, [pc, #136]	; (80065c8 <HAL_DMA_IRQHandler+0xcfc>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d02c      	beq.n	800659e <HAL_DMA_IRQHandler+0xcd2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a20      	ldr	r2, [pc, #128]	; (80065cc <HAL_DMA_IRQHandler+0xd00>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d027      	beq.n	800659e <HAL_DMA_IRQHandler+0xcd2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a1f      	ldr	r2, [pc, #124]	; (80065d0 <HAL_DMA_IRQHandler+0xd04>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d022      	beq.n	800659e <HAL_DMA_IRQHandler+0xcd2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a1d      	ldr	r2, [pc, #116]	; (80065d4 <HAL_DMA_IRQHandler+0xd08>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d01d      	beq.n	800659e <HAL_DMA_IRQHandler+0xcd2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a1c      	ldr	r2, [pc, #112]	; (80065d8 <HAL_DMA_IRQHandler+0xd0c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d018      	beq.n	800659e <HAL_DMA_IRQHandler+0xcd2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1a      	ldr	r2, [pc, #104]	; (80065dc <HAL_DMA_IRQHandler+0xd10>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d013      	beq.n	800659e <HAL_DMA_IRQHandler+0xcd2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a19      	ldr	r2, [pc, #100]	; (80065e0 <HAL_DMA_IRQHandler+0xd14>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00e      	beq.n	800659e <HAL_DMA_IRQHandler+0xcd2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a17      	ldr	r2, [pc, #92]	; (80065e4 <HAL_DMA_IRQHandler+0xd18>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d009      	beq.n	800659e <HAL_DMA_IRQHandler+0xcd2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a16      	ldr	r2, [pc, #88]	; (80065e8 <HAL_DMA_IRQHandler+0xd1c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d004      	beq.n	800659e <HAL_DMA_IRQHandler+0xcd2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a14      	ldr	r2, [pc, #80]	; (80065ec <HAL_DMA_IRQHandler+0xd20>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d128      	bne.n	80065f0 <HAL_DMA_IRQHandler+0xd24>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0214 	bic.w	r2, r2, #20
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	e027      	b.n	8006600 <HAL_DMA_IRQHandler+0xd34>
 80065b0:	40020010 	.word	0x40020010
 80065b4:	40020028 	.word	0x40020028
 80065b8:	40020040 	.word	0x40020040
 80065bc:	40020058 	.word	0x40020058
 80065c0:	40020070 	.word	0x40020070
 80065c4:	40020088 	.word	0x40020088
 80065c8:	400200a0 	.word	0x400200a0
 80065cc:	400200b8 	.word	0x400200b8
 80065d0:	40020410 	.word	0x40020410
 80065d4:	40020428 	.word	0x40020428
 80065d8:	40020440 	.word	0x40020440
 80065dc:	40020458 	.word	0x40020458
 80065e0:	40020470 	.word	0x40020470
 80065e4:	40020488 	.word	0x40020488
 80065e8:	400204a0 	.word	0x400204a0
 80065ec:	400204b8 	.word	0x400204b8
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 020a 	bic.w	r2, r2, #10
 80065fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 8097 	beq.w	8006748 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006622:	e091      	b.n	8006748 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006628:	f003 031f 	and.w	r3, r3, #31
 800662c:	2208      	movs	r2, #8
 800662e:	409a      	lsls	r2, r3
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	4013      	ands	r3, r2
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 8088 	beq.w	800674a <HAL_DMA_IRQHandler+0xe7e>
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f003 0308 	and.w	r3, r3, #8
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 8082 	beq.w	800674a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a41      	ldr	r2, [pc, #260]	; (8006750 <HAL_DMA_IRQHandler+0xe84>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d04a      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xe1a>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a3f      	ldr	r2, [pc, #252]	; (8006754 <HAL_DMA_IRQHandler+0xe88>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d045      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xe1a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a3e      	ldr	r2, [pc, #248]	; (8006758 <HAL_DMA_IRQHandler+0xe8c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d040      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xe1a>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a3c      	ldr	r2, [pc, #240]	; (800675c <HAL_DMA_IRQHandler+0xe90>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d03b      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xe1a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a3b      	ldr	r2, [pc, #236]	; (8006760 <HAL_DMA_IRQHandler+0xe94>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d036      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xe1a>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a39      	ldr	r2, [pc, #228]	; (8006764 <HAL_DMA_IRQHandler+0xe98>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d031      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xe1a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a38      	ldr	r2, [pc, #224]	; (8006768 <HAL_DMA_IRQHandler+0xe9c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d02c      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xe1a>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a36      	ldr	r2, [pc, #216]	; (800676c <HAL_DMA_IRQHandler+0xea0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d027      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xe1a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a35      	ldr	r2, [pc, #212]	; (8006770 <HAL_DMA_IRQHandler+0xea4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d022      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xe1a>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a33      	ldr	r2, [pc, #204]	; (8006774 <HAL_DMA_IRQHandler+0xea8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01d      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xe1a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a32      	ldr	r2, [pc, #200]	; (8006778 <HAL_DMA_IRQHandler+0xeac>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d018      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xe1a>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a30      	ldr	r2, [pc, #192]	; (800677c <HAL_DMA_IRQHandler+0xeb0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d013      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xe1a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a2f      	ldr	r2, [pc, #188]	; (8006780 <HAL_DMA_IRQHandler+0xeb4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00e      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xe1a>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a2d      	ldr	r2, [pc, #180]	; (8006784 <HAL_DMA_IRQHandler+0xeb8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d009      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xe1a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a2c      	ldr	r2, [pc, #176]	; (8006788 <HAL_DMA_IRQHandler+0xebc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d004      	beq.n	80066e6 <HAL_DMA_IRQHandler+0xe1a>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a2a      	ldr	r2, [pc, #168]	; (800678c <HAL_DMA_IRQHandler+0xec0>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d108      	bne.n	80066f8 <HAL_DMA_IRQHandler+0xe2c>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 021c 	bic.w	r2, r2, #28
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	e007      	b.n	8006708 <HAL_DMA_IRQHandler+0xe3c>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 020e 	bic.w	r2, r2, #14
 8006706:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800670c:	f003 031f 	and.w	r3, r3, #31
 8006710:	2201      	movs	r2, #1
 8006712:	409a      	lsls	r2, r3
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006732:	2b00      	cmp	r3, #0
 8006734:	d009      	beq.n	800674a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	4798      	blx	r3
 800673e:	e004      	b.n	800674a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006740:	bf00      	nop
 8006742:	e002      	b.n	800674a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006744:	bf00      	nop
 8006746:	e000      	b.n	800674a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006748:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800674a:	3728      	adds	r7, #40	; 0x28
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	40020010 	.word	0x40020010
 8006754:	40020028 	.word	0x40020028
 8006758:	40020040 	.word	0x40020040
 800675c:	40020058 	.word	0x40020058
 8006760:	40020070 	.word	0x40020070
 8006764:	40020088 	.word	0x40020088
 8006768:	400200a0 	.word	0x400200a0
 800676c:	400200b8 	.word	0x400200b8
 8006770:	40020410 	.word	0x40020410
 8006774:	40020428 	.word	0x40020428
 8006778:	40020440 	.word	0x40020440
 800677c:	40020458 	.word	0x40020458
 8006780:	40020470 	.word	0x40020470
 8006784:	40020488 	.word	0x40020488
 8006788:	400204a0 	.word	0x400204a0
 800678c:	400204b8 	.word	0x400204b8

08006790 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800679c:	4618      	mov	r0, r3
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a7f      	ldr	r2, [pc, #508]	; (80069c4 <DMA_SetConfig+0x21c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d072      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a7d      	ldr	r2, [pc, #500]	; (80069c8 <DMA_SetConfig+0x220>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d06d      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a7c      	ldr	r2, [pc, #496]	; (80069cc <DMA_SetConfig+0x224>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d068      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a7a      	ldr	r2, [pc, #488]	; (80069d0 <DMA_SetConfig+0x228>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d063      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a79      	ldr	r2, [pc, #484]	; (80069d4 <DMA_SetConfig+0x22c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d05e      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a77      	ldr	r2, [pc, #476]	; (80069d8 <DMA_SetConfig+0x230>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d059      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a76      	ldr	r2, [pc, #472]	; (80069dc <DMA_SetConfig+0x234>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d054      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a74      	ldr	r2, [pc, #464]	; (80069e0 <DMA_SetConfig+0x238>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d04f      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a73      	ldr	r2, [pc, #460]	; (80069e4 <DMA_SetConfig+0x23c>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d04a      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a71      	ldr	r2, [pc, #452]	; (80069e8 <DMA_SetConfig+0x240>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d045      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a70      	ldr	r2, [pc, #448]	; (80069ec <DMA_SetConfig+0x244>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d040      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a6e      	ldr	r2, [pc, #440]	; (80069f0 <DMA_SetConfig+0x248>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d03b      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a6d      	ldr	r2, [pc, #436]	; (80069f4 <DMA_SetConfig+0x24c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d036      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a6b      	ldr	r2, [pc, #428]	; (80069f8 <DMA_SetConfig+0x250>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d031      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a6a      	ldr	r2, [pc, #424]	; (80069fc <DMA_SetConfig+0x254>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d02c      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a68      	ldr	r2, [pc, #416]	; (8006a00 <DMA_SetConfig+0x258>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d027      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a67      	ldr	r2, [pc, #412]	; (8006a04 <DMA_SetConfig+0x25c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d022      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a65      	ldr	r2, [pc, #404]	; (8006a08 <DMA_SetConfig+0x260>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d01d      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a64      	ldr	r2, [pc, #400]	; (8006a0c <DMA_SetConfig+0x264>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d018      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a62      	ldr	r2, [pc, #392]	; (8006a10 <DMA_SetConfig+0x268>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d013      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a61      	ldr	r2, [pc, #388]	; (8006a14 <DMA_SetConfig+0x26c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00e      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a5f      	ldr	r2, [pc, #380]	; (8006a18 <DMA_SetConfig+0x270>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d009      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a5e      	ldr	r2, [pc, #376]	; (8006a1c <DMA_SetConfig+0x274>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d004      	beq.n	80068b2 <DMA_SetConfig+0x10a>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a5c      	ldr	r2, [pc, #368]	; (8006a20 <DMA_SetConfig+0x278>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d101      	bne.n	80068b6 <DMA_SetConfig+0x10e>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e000      	b.n	80068b8 <DMA_SetConfig+0x110>
 80068b6:	2300      	movs	r3, #0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00d      	beq.n	80068d8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80068c4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d004      	beq.n	80068d8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80068d6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a39      	ldr	r2, [pc, #228]	; (80069c4 <DMA_SetConfig+0x21c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d04a      	beq.n	8006978 <DMA_SetConfig+0x1d0>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a38      	ldr	r2, [pc, #224]	; (80069c8 <DMA_SetConfig+0x220>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d045      	beq.n	8006978 <DMA_SetConfig+0x1d0>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a36      	ldr	r2, [pc, #216]	; (80069cc <DMA_SetConfig+0x224>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d040      	beq.n	8006978 <DMA_SetConfig+0x1d0>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a35      	ldr	r2, [pc, #212]	; (80069d0 <DMA_SetConfig+0x228>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d03b      	beq.n	8006978 <DMA_SetConfig+0x1d0>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a33      	ldr	r2, [pc, #204]	; (80069d4 <DMA_SetConfig+0x22c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d036      	beq.n	8006978 <DMA_SetConfig+0x1d0>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a32      	ldr	r2, [pc, #200]	; (80069d8 <DMA_SetConfig+0x230>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d031      	beq.n	8006978 <DMA_SetConfig+0x1d0>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a30      	ldr	r2, [pc, #192]	; (80069dc <DMA_SetConfig+0x234>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d02c      	beq.n	8006978 <DMA_SetConfig+0x1d0>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a2f      	ldr	r2, [pc, #188]	; (80069e0 <DMA_SetConfig+0x238>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d027      	beq.n	8006978 <DMA_SetConfig+0x1d0>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a2d      	ldr	r2, [pc, #180]	; (80069e4 <DMA_SetConfig+0x23c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d022      	beq.n	8006978 <DMA_SetConfig+0x1d0>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a2c      	ldr	r2, [pc, #176]	; (80069e8 <DMA_SetConfig+0x240>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d01d      	beq.n	8006978 <DMA_SetConfig+0x1d0>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a2a      	ldr	r2, [pc, #168]	; (80069ec <DMA_SetConfig+0x244>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d018      	beq.n	8006978 <DMA_SetConfig+0x1d0>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a29      	ldr	r2, [pc, #164]	; (80069f0 <DMA_SetConfig+0x248>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d013      	beq.n	8006978 <DMA_SetConfig+0x1d0>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a27      	ldr	r2, [pc, #156]	; (80069f4 <DMA_SetConfig+0x24c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00e      	beq.n	8006978 <DMA_SetConfig+0x1d0>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a26      	ldr	r2, [pc, #152]	; (80069f8 <DMA_SetConfig+0x250>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d009      	beq.n	8006978 <DMA_SetConfig+0x1d0>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a24      	ldr	r2, [pc, #144]	; (80069fc <DMA_SetConfig+0x254>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d004      	beq.n	8006978 <DMA_SetConfig+0x1d0>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a23      	ldr	r2, [pc, #140]	; (8006a00 <DMA_SetConfig+0x258>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d101      	bne.n	800697c <DMA_SetConfig+0x1d4>
 8006978:	2301      	movs	r3, #1
 800697a:	e000      	b.n	800697e <DMA_SetConfig+0x1d6>
 800697c:	2300      	movs	r3, #0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d059      	beq.n	8006a36 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006986:	f003 031f 	and.w	r3, r3, #31
 800698a:	223f      	movs	r2, #63	; 0x3f
 800698c:	409a      	lsls	r2, r3
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80069a0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	2b40      	cmp	r3, #64	; 0x40
 80069b0:	d138      	bne.n	8006a24 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80069c2:	e0ae      	b.n	8006b22 <DMA_SetConfig+0x37a>
 80069c4:	40020010 	.word	0x40020010
 80069c8:	40020028 	.word	0x40020028
 80069cc:	40020040 	.word	0x40020040
 80069d0:	40020058 	.word	0x40020058
 80069d4:	40020070 	.word	0x40020070
 80069d8:	40020088 	.word	0x40020088
 80069dc:	400200a0 	.word	0x400200a0
 80069e0:	400200b8 	.word	0x400200b8
 80069e4:	40020410 	.word	0x40020410
 80069e8:	40020428 	.word	0x40020428
 80069ec:	40020440 	.word	0x40020440
 80069f0:	40020458 	.word	0x40020458
 80069f4:	40020470 	.word	0x40020470
 80069f8:	40020488 	.word	0x40020488
 80069fc:	400204a0 	.word	0x400204a0
 8006a00:	400204b8 	.word	0x400204b8
 8006a04:	58025408 	.word	0x58025408
 8006a08:	5802541c 	.word	0x5802541c
 8006a0c:	58025430 	.word	0x58025430
 8006a10:	58025444 	.word	0x58025444
 8006a14:	58025458 	.word	0x58025458
 8006a18:	5802546c 	.word	0x5802546c
 8006a1c:	58025480 	.word	0x58025480
 8006a20:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	60da      	str	r2, [r3, #12]
}
 8006a34:	e075      	b.n	8006b22 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a3d      	ldr	r2, [pc, #244]	; (8006b30 <DMA_SetConfig+0x388>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d04a      	beq.n	8006ad6 <DMA_SetConfig+0x32e>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a3b      	ldr	r2, [pc, #236]	; (8006b34 <DMA_SetConfig+0x38c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d045      	beq.n	8006ad6 <DMA_SetConfig+0x32e>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a3a      	ldr	r2, [pc, #232]	; (8006b38 <DMA_SetConfig+0x390>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d040      	beq.n	8006ad6 <DMA_SetConfig+0x32e>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a38      	ldr	r2, [pc, #224]	; (8006b3c <DMA_SetConfig+0x394>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d03b      	beq.n	8006ad6 <DMA_SetConfig+0x32e>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a37      	ldr	r2, [pc, #220]	; (8006b40 <DMA_SetConfig+0x398>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d036      	beq.n	8006ad6 <DMA_SetConfig+0x32e>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a35      	ldr	r2, [pc, #212]	; (8006b44 <DMA_SetConfig+0x39c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d031      	beq.n	8006ad6 <DMA_SetConfig+0x32e>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a34      	ldr	r2, [pc, #208]	; (8006b48 <DMA_SetConfig+0x3a0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d02c      	beq.n	8006ad6 <DMA_SetConfig+0x32e>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a32      	ldr	r2, [pc, #200]	; (8006b4c <DMA_SetConfig+0x3a4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d027      	beq.n	8006ad6 <DMA_SetConfig+0x32e>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a31      	ldr	r2, [pc, #196]	; (8006b50 <DMA_SetConfig+0x3a8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d022      	beq.n	8006ad6 <DMA_SetConfig+0x32e>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a2f      	ldr	r2, [pc, #188]	; (8006b54 <DMA_SetConfig+0x3ac>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d01d      	beq.n	8006ad6 <DMA_SetConfig+0x32e>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a2e      	ldr	r2, [pc, #184]	; (8006b58 <DMA_SetConfig+0x3b0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d018      	beq.n	8006ad6 <DMA_SetConfig+0x32e>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a2c      	ldr	r2, [pc, #176]	; (8006b5c <DMA_SetConfig+0x3b4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d013      	beq.n	8006ad6 <DMA_SetConfig+0x32e>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a2b      	ldr	r2, [pc, #172]	; (8006b60 <DMA_SetConfig+0x3b8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00e      	beq.n	8006ad6 <DMA_SetConfig+0x32e>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a29      	ldr	r2, [pc, #164]	; (8006b64 <DMA_SetConfig+0x3bc>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d009      	beq.n	8006ad6 <DMA_SetConfig+0x32e>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a28      	ldr	r2, [pc, #160]	; (8006b68 <DMA_SetConfig+0x3c0>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d004      	beq.n	8006ad6 <DMA_SetConfig+0x32e>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a26      	ldr	r2, [pc, #152]	; (8006b6c <DMA_SetConfig+0x3c4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d101      	bne.n	8006ada <DMA_SetConfig+0x332>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e000      	b.n	8006adc <DMA_SetConfig+0x334>
 8006ada:	2300      	movs	r3, #0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d020      	beq.n	8006b22 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae4:	f003 031f 	and.w	r3, r3, #31
 8006ae8:	2201      	movs	r2, #1
 8006aea:	409a      	lsls	r2, r3
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b40      	cmp	r3, #64	; 0x40
 8006afe:	d108      	bne.n	8006b12 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	60da      	str	r2, [r3, #12]
}
 8006b10:	e007      	b.n	8006b22 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	60da      	str	r2, [r3, #12]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	48022c08 	.word	0x48022c08
 8006b34:	48022c1c 	.word	0x48022c1c
 8006b38:	48022c30 	.word	0x48022c30
 8006b3c:	48022c44 	.word	0x48022c44
 8006b40:	48022c58 	.word	0x48022c58
 8006b44:	48022c6c 	.word	0x48022c6c
 8006b48:	48022c80 	.word	0x48022c80
 8006b4c:	48022c94 	.word	0x48022c94
 8006b50:	58025408 	.word	0x58025408
 8006b54:	5802541c 	.word	0x5802541c
 8006b58:	58025430 	.word	0x58025430
 8006b5c:	58025444 	.word	0x58025444
 8006b60:	58025458 	.word	0x58025458
 8006b64:	5802546c 	.word	0x5802546c
 8006b68:	58025480 	.word	0x58025480
 8006b6c:	58025494 	.word	0x58025494

08006b70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a42      	ldr	r2, [pc, #264]	; (8006c88 <DMA_CalcBaseAndBitshift+0x118>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d04a      	beq.n	8006c18 <DMA_CalcBaseAndBitshift+0xa8>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a41      	ldr	r2, [pc, #260]	; (8006c8c <DMA_CalcBaseAndBitshift+0x11c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d045      	beq.n	8006c18 <DMA_CalcBaseAndBitshift+0xa8>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a3f      	ldr	r2, [pc, #252]	; (8006c90 <DMA_CalcBaseAndBitshift+0x120>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d040      	beq.n	8006c18 <DMA_CalcBaseAndBitshift+0xa8>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a3e      	ldr	r2, [pc, #248]	; (8006c94 <DMA_CalcBaseAndBitshift+0x124>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d03b      	beq.n	8006c18 <DMA_CalcBaseAndBitshift+0xa8>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a3c      	ldr	r2, [pc, #240]	; (8006c98 <DMA_CalcBaseAndBitshift+0x128>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d036      	beq.n	8006c18 <DMA_CalcBaseAndBitshift+0xa8>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a3b      	ldr	r2, [pc, #236]	; (8006c9c <DMA_CalcBaseAndBitshift+0x12c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d031      	beq.n	8006c18 <DMA_CalcBaseAndBitshift+0xa8>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a39      	ldr	r2, [pc, #228]	; (8006ca0 <DMA_CalcBaseAndBitshift+0x130>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d02c      	beq.n	8006c18 <DMA_CalcBaseAndBitshift+0xa8>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a38      	ldr	r2, [pc, #224]	; (8006ca4 <DMA_CalcBaseAndBitshift+0x134>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d027      	beq.n	8006c18 <DMA_CalcBaseAndBitshift+0xa8>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a36      	ldr	r2, [pc, #216]	; (8006ca8 <DMA_CalcBaseAndBitshift+0x138>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d022      	beq.n	8006c18 <DMA_CalcBaseAndBitshift+0xa8>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a35      	ldr	r2, [pc, #212]	; (8006cac <DMA_CalcBaseAndBitshift+0x13c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d01d      	beq.n	8006c18 <DMA_CalcBaseAndBitshift+0xa8>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a33      	ldr	r2, [pc, #204]	; (8006cb0 <DMA_CalcBaseAndBitshift+0x140>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d018      	beq.n	8006c18 <DMA_CalcBaseAndBitshift+0xa8>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a32      	ldr	r2, [pc, #200]	; (8006cb4 <DMA_CalcBaseAndBitshift+0x144>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d013      	beq.n	8006c18 <DMA_CalcBaseAndBitshift+0xa8>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a30      	ldr	r2, [pc, #192]	; (8006cb8 <DMA_CalcBaseAndBitshift+0x148>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d00e      	beq.n	8006c18 <DMA_CalcBaseAndBitshift+0xa8>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a2f      	ldr	r2, [pc, #188]	; (8006cbc <DMA_CalcBaseAndBitshift+0x14c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d009      	beq.n	8006c18 <DMA_CalcBaseAndBitshift+0xa8>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a2d      	ldr	r2, [pc, #180]	; (8006cc0 <DMA_CalcBaseAndBitshift+0x150>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d004      	beq.n	8006c18 <DMA_CalcBaseAndBitshift+0xa8>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a2c      	ldr	r2, [pc, #176]	; (8006cc4 <DMA_CalcBaseAndBitshift+0x154>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d101      	bne.n	8006c1c <DMA_CalcBaseAndBitshift+0xac>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e000      	b.n	8006c1e <DMA_CalcBaseAndBitshift+0xae>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d024      	beq.n	8006c6c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	3b10      	subs	r3, #16
 8006c2a:	4a27      	ldr	r2, [pc, #156]	; (8006cc8 <DMA_CalcBaseAndBitshift+0x158>)
 8006c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c30:	091b      	lsrs	r3, r3, #4
 8006c32:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	4a24      	ldr	r2, [pc, #144]	; (8006ccc <DMA_CalcBaseAndBitshift+0x15c>)
 8006c3c:	5cd3      	ldrb	r3, [r2, r3]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d908      	bls.n	8006c5c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	4b1f      	ldr	r3, [pc, #124]	; (8006cd0 <DMA_CalcBaseAndBitshift+0x160>)
 8006c52:	4013      	ands	r3, r2
 8006c54:	1d1a      	adds	r2, r3, #4
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	659a      	str	r2, [r3, #88]	; 0x58
 8006c5a:	e00d      	b.n	8006c78 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	4b1b      	ldr	r3, [pc, #108]	; (8006cd0 <DMA_CalcBaseAndBitshift+0x160>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	6593      	str	r3, [r2, #88]	; 0x58
 8006c6a:	e005      	b.n	8006c78 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	40020010 	.word	0x40020010
 8006c8c:	40020028 	.word	0x40020028
 8006c90:	40020040 	.word	0x40020040
 8006c94:	40020058 	.word	0x40020058
 8006c98:	40020070 	.word	0x40020070
 8006c9c:	40020088 	.word	0x40020088
 8006ca0:	400200a0 	.word	0x400200a0
 8006ca4:	400200b8 	.word	0x400200b8
 8006ca8:	40020410 	.word	0x40020410
 8006cac:	40020428 	.word	0x40020428
 8006cb0:	40020440 	.word	0x40020440
 8006cb4:	40020458 	.word	0x40020458
 8006cb8:	40020470 	.word	0x40020470
 8006cbc:	40020488 	.word	0x40020488
 8006cc0:	400204a0 	.word	0x400204a0
 8006cc4:	400204b8 	.word	0x400204b8
 8006cc8:	aaaaaaab 	.word	0xaaaaaaab
 8006ccc:	08018134 	.word	0x08018134
 8006cd0:	fffffc00 	.word	0xfffffc00

08006cd4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d120      	bne.n	8006d2a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d858      	bhi.n	8006da2 <DMA_CheckFifoParam+0xce>
 8006cf0:	a201      	add	r2, pc, #4	; (adr r2, 8006cf8 <DMA_CheckFifoParam+0x24>)
 8006cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf6:	bf00      	nop
 8006cf8:	08006d09 	.word	0x08006d09
 8006cfc:	08006d1b 	.word	0x08006d1b
 8006d00:	08006d09 	.word	0x08006d09
 8006d04:	08006da3 	.word	0x08006da3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d048      	beq.n	8006da6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d18:	e045      	b.n	8006da6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d22:	d142      	bne.n	8006daa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d28:	e03f      	b.n	8006daa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d32:	d123      	bne.n	8006d7c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d838      	bhi.n	8006dae <DMA_CheckFifoParam+0xda>
 8006d3c:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <DMA_CheckFifoParam+0x70>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08006d55 	.word	0x08006d55
 8006d48:	08006d5b 	.word	0x08006d5b
 8006d4c:	08006d55 	.word	0x08006d55
 8006d50:	08006d6d 	.word	0x08006d6d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	73fb      	strb	r3, [r7, #15]
        break;
 8006d58:	e030      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d025      	beq.n	8006db2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d6a:	e022      	b.n	8006db2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d74:	d11f      	bne.n	8006db6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d7a:	e01c      	b.n	8006db6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d902      	bls.n	8006d8a <DMA_CheckFifoParam+0xb6>
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d003      	beq.n	8006d90 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006d88:	e018      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	73fb      	strb	r3, [r7, #15]
        break;
 8006d8e:	e015      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00e      	beq.n	8006dba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8006da0:	e00b      	b.n	8006dba <DMA_CheckFifoParam+0xe6>
        break;
 8006da2:	bf00      	nop
 8006da4:	e00a      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
        break;
 8006da6:	bf00      	nop
 8006da8:	e008      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
        break;
 8006daa:	bf00      	nop
 8006dac:	e006      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
        break;
 8006dae:	bf00      	nop
 8006db0:	e004      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
        break;
 8006db2:	bf00      	nop
 8006db4:	e002      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
        break;
 8006db6:	bf00      	nop
 8006db8:	e000      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
    break;
 8006dba:	bf00      	nop
    }
  }

  return status;
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop

08006dcc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a38      	ldr	r2, [pc, #224]	; (8006ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d022      	beq.n	8006e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a36      	ldr	r2, [pc, #216]	; (8006ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d01d      	beq.n	8006e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a35      	ldr	r2, [pc, #212]	; (8006ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d018      	beq.n	8006e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a33      	ldr	r2, [pc, #204]	; (8006ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a32      	ldr	r2, [pc, #200]	; (8006ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00e      	beq.n	8006e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a30      	ldr	r2, [pc, #192]	; (8006ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d009      	beq.n	8006e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a2f      	ldr	r2, [pc, #188]	; (8006ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a2d      	ldr	r2, [pc, #180]	; (8006edc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d101      	bne.n	8006e2e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e000      	b.n	8006e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d01a      	beq.n	8006e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	3b08      	subs	r3, #8
 8006e3c:	4a28      	ldr	r2, [pc, #160]	; (8006ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e42:	091b      	lsrs	r3, r3, #4
 8006e44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	4b26      	ldr	r3, [pc, #152]	; (8006ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006e4a:	4413      	add	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	461a      	mov	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a24      	ldr	r2, [pc, #144]	; (8006ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006e58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f003 031f 	and.w	r3, r3, #31
 8006e60:	2201      	movs	r2, #1
 8006e62:	409a      	lsls	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006e68:	e024      	b.n	8006eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	3b10      	subs	r3, #16
 8006e72:	4a1e      	ldr	r2, [pc, #120]	; (8006eec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006e74:	fba2 2303 	umull	r2, r3, r2, r3
 8006e78:	091b      	lsrs	r3, r3, #4
 8006e7a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	4a1c      	ldr	r2, [pc, #112]	; (8006ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d806      	bhi.n	8006e92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	4a1b      	ldr	r2, [pc, #108]	; (8006ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d902      	bls.n	8006e92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3308      	adds	r3, #8
 8006e90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	4b18      	ldr	r3, [pc, #96]	; (8006ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a16      	ldr	r2, [pc, #88]	; (8006efc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006ea4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	2201      	movs	r2, #1
 8006eae:	409a      	lsls	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006eb4:	bf00      	nop
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	58025408 	.word	0x58025408
 8006ec4:	5802541c 	.word	0x5802541c
 8006ec8:	58025430 	.word	0x58025430
 8006ecc:	58025444 	.word	0x58025444
 8006ed0:	58025458 	.word	0x58025458
 8006ed4:	5802546c 	.word	0x5802546c
 8006ed8:	58025480 	.word	0x58025480
 8006edc:	58025494 	.word	0x58025494
 8006ee0:	cccccccd 	.word	0xcccccccd
 8006ee4:	16009600 	.word	0x16009600
 8006ee8:	58025880 	.word	0x58025880
 8006eec:	aaaaaaab 	.word	0xaaaaaaab
 8006ef0:	400204b8 	.word	0x400204b8
 8006ef4:	4002040f 	.word	0x4002040f
 8006ef8:	10008200 	.word	0x10008200
 8006efc:	40020880 	.word	0x40020880

08006f00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d04a      	beq.n	8006fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d847      	bhi.n	8006fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a25      	ldr	r2, [pc, #148]	; (8006fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d022      	beq.n	8006f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a24      	ldr	r2, [pc, #144]	; (8006fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d01d      	beq.n	8006f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a22      	ldr	r2, [pc, #136]	; (8006fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d018      	beq.n	8006f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a21      	ldr	r2, [pc, #132]	; (8006fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d013      	beq.n	8006f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a1f      	ldr	r2, [pc, #124]	; (8006fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d00e      	beq.n	8006f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a1e      	ldr	r2, [pc, #120]	; (8006fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d009      	beq.n	8006f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a1c      	ldr	r2, [pc, #112]	; (8006fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d004      	beq.n	8006f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a1b      	ldr	r2, [pc, #108]	; (8006fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d101      	bne.n	8006f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e000      	b.n	8006f72 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006f70:	2300      	movs	r3, #0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	4b17      	ldr	r3, [pc, #92]	; (8006fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006f7a:	4413      	add	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	461a      	mov	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a15      	ldr	r2, [pc, #84]	; (8006fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006f88:	671a      	str	r2, [r3, #112]	; 0x70
 8006f8a:	e009      	b.n	8006fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	4b14      	ldr	r3, [pc, #80]	; (8006fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006f90:	4413      	add	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	461a      	mov	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a11      	ldr	r2, [pc, #68]	; (8006fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006f9e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	409a      	lsls	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006fac:	bf00      	nop
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	58025408 	.word	0x58025408
 8006fbc:	5802541c 	.word	0x5802541c
 8006fc0:	58025430 	.word	0x58025430
 8006fc4:	58025444 	.word	0x58025444
 8006fc8:	58025458 	.word	0x58025458
 8006fcc:	5802546c 	.word	0x5802546c
 8006fd0:	58025480 	.word	0x58025480
 8006fd4:	58025494 	.word	0x58025494
 8006fd8:	1600963f 	.word	0x1600963f
 8006fdc:	58025940 	.word	0x58025940
 8006fe0:	1000823f 	.word	0x1000823f
 8006fe4:	40020940 	.word	0x40020940

08006fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b089      	sub	sp, #36	; 0x24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006ff6:	4b89      	ldr	r3, [pc, #548]	; (800721c <HAL_GPIO_Init+0x234>)
 8006ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ffa:	e194      	b.n	8007326 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	2101      	movs	r1, #1
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	fa01 f303 	lsl.w	r3, r1, r3
 8007008:	4013      	ands	r3, r2
 800700a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 8186 	beq.w	8007320 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f003 0303 	and.w	r3, r3, #3
 800701c:	2b01      	cmp	r3, #1
 800701e:	d005      	beq.n	800702c <HAL_GPIO_Init+0x44>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f003 0303 	and.w	r3, r3, #3
 8007028:	2b02      	cmp	r3, #2
 800702a:	d130      	bne.n	800708e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	2203      	movs	r2, #3
 8007038:	fa02 f303 	lsl.w	r3, r2, r3
 800703c:	43db      	mvns	r3, r3
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	4013      	ands	r3, r2
 8007042:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	fa02 f303 	lsl.w	r3, r2, r3
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	4313      	orrs	r3, r2
 8007054:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007062:	2201      	movs	r2, #1
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	fa02 f303 	lsl.w	r3, r2, r3
 800706a:	43db      	mvns	r3, r3
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	4013      	ands	r3, r2
 8007070:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	091b      	lsrs	r3, r3, #4
 8007078:	f003 0201 	and.w	r2, r3, #1
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	fa02 f303 	lsl.w	r3, r2, r3
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	4313      	orrs	r3, r2
 8007086:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f003 0303 	and.w	r3, r3, #3
 8007096:	2b03      	cmp	r3, #3
 8007098:	d017      	beq.n	80070ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	2203      	movs	r2, #3
 80070a6:	fa02 f303 	lsl.w	r3, r2, r3
 80070aa:	43db      	mvns	r3, r3
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	4013      	ands	r3, r2
 80070b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	689a      	ldr	r2, [r3, #8]
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	005b      	lsls	r3, r3, #1
 80070ba:	fa02 f303 	lsl.w	r3, r2, r3
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f003 0303 	and.w	r3, r3, #3
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d123      	bne.n	800711e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	08da      	lsrs	r2, r3, #3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3208      	adds	r2, #8
 80070de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	220f      	movs	r2, #15
 80070ee:	fa02 f303 	lsl.w	r3, r2, r3
 80070f2:	43db      	mvns	r3, r3
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	4013      	ands	r3, r2
 80070f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	691a      	ldr	r2, [r3, #16]
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	fa02 f303 	lsl.w	r3, r2, r3
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	4313      	orrs	r3, r2
 800710e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	08da      	lsrs	r2, r3, #3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	3208      	adds	r2, #8
 8007118:	69b9      	ldr	r1, [r7, #24]
 800711a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	005b      	lsls	r3, r3, #1
 8007128:	2203      	movs	r2, #3
 800712a:	fa02 f303 	lsl.w	r3, r2, r3
 800712e:	43db      	mvns	r3, r3
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	4013      	ands	r3, r2
 8007134:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f003 0203 	and.w	r2, r3, #3
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	fa02 f303 	lsl.w	r3, r2, r3
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	4313      	orrs	r3, r2
 800714a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 80e0 	beq.w	8007320 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007160:	4b2f      	ldr	r3, [pc, #188]	; (8007220 <HAL_GPIO_Init+0x238>)
 8007162:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007166:	4a2e      	ldr	r2, [pc, #184]	; (8007220 <HAL_GPIO_Init+0x238>)
 8007168:	f043 0302 	orr.w	r3, r3, #2
 800716c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8007170:	4b2b      	ldr	r3, [pc, #172]	; (8007220 <HAL_GPIO_Init+0x238>)
 8007172:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800717e:	4a29      	ldr	r2, [pc, #164]	; (8007224 <HAL_GPIO_Init+0x23c>)
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	089b      	lsrs	r3, r3, #2
 8007184:	3302      	adds	r3, #2
 8007186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800718a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	f003 0303 	and.w	r3, r3, #3
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	220f      	movs	r2, #15
 8007196:	fa02 f303 	lsl.w	r3, r2, r3
 800719a:	43db      	mvns	r3, r3
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	4013      	ands	r3, r2
 80071a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a20      	ldr	r2, [pc, #128]	; (8007228 <HAL_GPIO_Init+0x240>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d052      	beq.n	8007250 <HAL_GPIO_Init+0x268>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a1f      	ldr	r2, [pc, #124]	; (800722c <HAL_GPIO_Init+0x244>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d031      	beq.n	8007216 <HAL_GPIO_Init+0x22e>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a1e      	ldr	r2, [pc, #120]	; (8007230 <HAL_GPIO_Init+0x248>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d02b      	beq.n	8007212 <HAL_GPIO_Init+0x22a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a1d      	ldr	r2, [pc, #116]	; (8007234 <HAL_GPIO_Init+0x24c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d025      	beq.n	800720e <HAL_GPIO_Init+0x226>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a1c      	ldr	r2, [pc, #112]	; (8007238 <HAL_GPIO_Init+0x250>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d01f      	beq.n	800720a <HAL_GPIO_Init+0x222>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a1b      	ldr	r2, [pc, #108]	; (800723c <HAL_GPIO_Init+0x254>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d019      	beq.n	8007206 <HAL_GPIO_Init+0x21e>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a1a      	ldr	r2, [pc, #104]	; (8007240 <HAL_GPIO_Init+0x258>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d013      	beq.n	8007202 <HAL_GPIO_Init+0x21a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a19      	ldr	r2, [pc, #100]	; (8007244 <HAL_GPIO_Init+0x25c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00d      	beq.n	80071fe <HAL_GPIO_Init+0x216>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a18      	ldr	r2, [pc, #96]	; (8007248 <HAL_GPIO_Init+0x260>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d007      	beq.n	80071fa <HAL_GPIO_Init+0x212>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a17      	ldr	r2, [pc, #92]	; (800724c <HAL_GPIO_Init+0x264>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d101      	bne.n	80071f6 <HAL_GPIO_Init+0x20e>
 80071f2:	2309      	movs	r3, #9
 80071f4:	e02d      	b.n	8007252 <HAL_GPIO_Init+0x26a>
 80071f6:	230a      	movs	r3, #10
 80071f8:	e02b      	b.n	8007252 <HAL_GPIO_Init+0x26a>
 80071fa:	2308      	movs	r3, #8
 80071fc:	e029      	b.n	8007252 <HAL_GPIO_Init+0x26a>
 80071fe:	2307      	movs	r3, #7
 8007200:	e027      	b.n	8007252 <HAL_GPIO_Init+0x26a>
 8007202:	2306      	movs	r3, #6
 8007204:	e025      	b.n	8007252 <HAL_GPIO_Init+0x26a>
 8007206:	2305      	movs	r3, #5
 8007208:	e023      	b.n	8007252 <HAL_GPIO_Init+0x26a>
 800720a:	2304      	movs	r3, #4
 800720c:	e021      	b.n	8007252 <HAL_GPIO_Init+0x26a>
 800720e:	2303      	movs	r3, #3
 8007210:	e01f      	b.n	8007252 <HAL_GPIO_Init+0x26a>
 8007212:	2302      	movs	r3, #2
 8007214:	e01d      	b.n	8007252 <HAL_GPIO_Init+0x26a>
 8007216:	2301      	movs	r3, #1
 8007218:	e01b      	b.n	8007252 <HAL_GPIO_Init+0x26a>
 800721a:	bf00      	nop
 800721c:	58000080 	.word	0x58000080
 8007220:	58024400 	.word	0x58024400
 8007224:	58000400 	.word	0x58000400
 8007228:	58020000 	.word	0x58020000
 800722c:	58020400 	.word	0x58020400
 8007230:	58020800 	.word	0x58020800
 8007234:	58020c00 	.word	0x58020c00
 8007238:	58021000 	.word	0x58021000
 800723c:	58021400 	.word	0x58021400
 8007240:	58021800 	.word	0x58021800
 8007244:	58021c00 	.word	0x58021c00
 8007248:	58022000 	.word	0x58022000
 800724c:	58022400 	.word	0x58022400
 8007250:	2300      	movs	r3, #0
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	f002 0203 	and.w	r2, r2, #3
 8007258:	0092      	lsls	r2, r2, #2
 800725a:	4093      	lsls	r3, r2
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	4313      	orrs	r3, r2
 8007260:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007262:	4938      	ldr	r1, [pc, #224]	; (8007344 <HAL_GPIO_Init+0x35c>)
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	089b      	lsrs	r3, r3, #2
 8007268:	3302      	adds	r3, #2
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	43db      	mvns	r3, r3
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	4013      	ands	r3, r2
 8007280:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007296:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800729e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	43db      	mvns	r3, r3
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	4013      	ands	r3, r2
 80072ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80072c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	43db      	mvns	r3, r3
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	4013      	ands	r3, r2
 80072da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	43db      	mvns	r3, r3
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	4013      	ands	r3, r2
 8007304:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	4313      	orrs	r3, r2
 8007318:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	3301      	adds	r3, #1
 8007324:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	fa22 f303 	lsr.w	r3, r2, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	f47f ae63 	bne.w	8006ffc <HAL_GPIO_Init+0x14>
  }
}
 8007336:	bf00      	nop
 8007338:	bf00      	nop
 800733a:	3724      	adds	r7, #36	; 0x24
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	58000400 	.word	0x58000400

08007348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	460b      	mov	r3, r1
 8007352:	807b      	strh	r3, [r7, #2]
 8007354:	4613      	mov	r3, r2
 8007356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007358:	787b      	ldrb	r3, [r7, #1]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800735e:	887a      	ldrh	r2, [r7, #2]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007364:	e003      	b.n	800736e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007366:	887b      	ldrh	r3, [r7, #2]
 8007368:	041a      	lsls	r2, r3, #16
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	619a      	str	r2, [r3, #24]
}
 800736e:	bf00      	nop
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800737a:	b480      	push	{r7}
 800737c:	b085      	sub	sp, #20
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	460b      	mov	r3, r1
 8007384:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800738c:	887a      	ldrh	r2, [r7, #2]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4013      	ands	r3, r2
 8007392:	041a      	lsls	r2, r3, #16
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	43d9      	mvns	r1, r3
 8007398:	887b      	ldrh	r3, [r7, #2]
 800739a:	400b      	ands	r3, r1
 800739c:	431a      	orrs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	619a      	str	r2, [r3, #24]
}
 80073a2:	bf00      	nop
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b082      	sub	sp, #8
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	4603      	mov	r3, r0
 80073b6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80073b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	4013      	ands	r3, r2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d008      	beq.n	80073da <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80073c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073cc:	88fb      	ldrh	r3, [r7, #6]
 80073ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80073d2:	88fb      	ldrh	r3, [r7, #6]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fa fc5b 	bl	8001c90 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80073ec:	4b19      	ldr	r3, [pc, #100]	; (8007454 <HAL_PWREx_ConfigSupply+0x70>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f003 0304 	and.w	r3, r3, #4
 80073f4:	2b04      	cmp	r3, #4
 80073f6:	d00a      	beq.n	800740e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80073f8:	4b16      	ldr	r3, [pc, #88]	; (8007454 <HAL_PWREx_ConfigSupply+0x70>)
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f003 0307 	and.w	r3, r3, #7
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	429a      	cmp	r2, r3
 8007404:	d001      	beq.n	800740a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e01f      	b.n	800744a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	e01d      	b.n	800744a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800740e:	4b11      	ldr	r3, [pc, #68]	; (8007454 <HAL_PWREx_ConfigSupply+0x70>)
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f023 0207 	bic.w	r2, r3, #7
 8007416:	490f      	ldr	r1, [pc, #60]	; (8007454 <HAL_PWREx_ConfigSupply+0x70>)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4313      	orrs	r3, r2
 800741c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800741e:	f7fc fd85 	bl	8003f2c <HAL_GetTick>
 8007422:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007424:	e009      	b.n	800743a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007426:	f7fc fd81 	bl	8003f2c <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007434:	d901      	bls.n	800743a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e007      	b.n	800744a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800743a:	4b06      	ldr	r3, [pc, #24]	; (8007454 <HAL_PWREx_ConfigSupply+0x70>)
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007446:	d1ee      	bne.n	8007426 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	58024800 	.word	0x58024800

08007458 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08c      	sub	sp, #48	; 0x30
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e3f6      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 80b5 	beq.w	80075e2 <HAL_RCC_OscConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007478:	4b96      	ldr	r3, [pc, #600]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007480:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007482:	4b94      	ldr	r3, [pc, #592]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007486:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748a:	2b10      	cmp	r3, #16
 800748c:	d007      	beq.n	800749e <HAL_RCC_OscConfig+0x46>
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007490:	2b18      	cmp	r3, #24
 8007492:	d112      	bne.n	80074ba <HAL_RCC_OscConfig+0x62>
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	2b02      	cmp	r3, #2
 800749c:	d10d      	bne.n	80074ba <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800749e:	4b8d      	ldr	r3, [pc, #564]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 809a 	beq.w	80075e0 <HAL_RCC_OscConfig+0x188>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f040 8095 	bne.w	80075e0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e3ce      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c2:	d106      	bne.n	80074d2 <HAL_RCC_OscConfig+0x7a>
 80074c4:	4b83      	ldr	r3, [pc, #524]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a82      	ldr	r2, [pc, #520]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 80074ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	e058      	b.n	8007584 <HAL_RCC_OscConfig+0x12c>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d112      	bne.n	8007500 <HAL_RCC_OscConfig+0xa8>
 80074da:	4b7e      	ldr	r3, [pc, #504]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a7d      	ldr	r2, [pc, #500]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 80074e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	4b7b      	ldr	r3, [pc, #492]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a7a      	ldr	r2, [pc, #488]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 80074ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	4b78      	ldr	r3, [pc, #480]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a77      	ldr	r2, [pc, #476]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 80074f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	e041      	b.n	8007584 <HAL_RCC_OscConfig+0x12c>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007508:	d112      	bne.n	8007530 <HAL_RCC_OscConfig+0xd8>
 800750a:	4b72      	ldr	r3, [pc, #456]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a71      	ldr	r2, [pc, #452]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007514:	6013      	str	r3, [r2, #0]
 8007516:	4b6f      	ldr	r3, [pc, #444]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a6e      	ldr	r2, [pc, #440]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 800751c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007520:	6013      	str	r3, [r2, #0]
 8007522:	4b6c      	ldr	r3, [pc, #432]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a6b      	ldr	r2, [pc, #428]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800752c:	6013      	str	r3, [r2, #0]
 800752e:	e029      	b.n	8007584 <HAL_RCC_OscConfig+0x12c>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8007538:	d112      	bne.n	8007560 <HAL_RCC_OscConfig+0x108>
 800753a:	4b66      	ldr	r3, [pc, #408]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a65      	ldr	r2, [pc, #404]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	4b63      	ldr	r3, [pc, #396]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a62      	ldr	r2, [pc, #392]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 800754c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	4b60      	ldr	r3, [pc, #384]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a5f      	ldr	r2, [pc, #380]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	e011      	b.n	8007584 <HAL_RCC_OscConfig+0x12c>
 8007560:	4b5c      	ldr	r3, [pc, #368]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a5b      	ldr	r2, [pc, #364]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800756a:	6013      	str	r3, [r2, #0]
 800756c:	4b59      	ldr	r3, [pc, #356]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a58      	ldr	r2, [pc, #352]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	4b56      	ldr	r3, [pc, #344]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a55      	ldr	r2, [pc, #340]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 800757e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d014      	beq.n	80075b6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800758c:	f7fc fcce 	bl	8003f2c <HAL_GetTick>
 8007590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007592:	e009      	b.n	80075a8 <HAL_RCC_OscConfig+0x150>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007594:	f7fc fcca 	bl	8003f2c <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075a2:	d901      	bls.n	80075a8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e357      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075a8:	4b4a      	ldr	r3, [pc, #296]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d0ef      	beq.n	8007594 <HAL_RCC_OscConfig+0x13c>
 80075b4:	e015      	b.n	80075e2 <HAL_RCC_OscConfig+0x18a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b6:	f7fc fcb9 	bl	8003f2c <HAL_GetTick>
 80075ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80075bc:	e009      	b.n	80075d2 <HAL_RCC_OscConfig+0x17a>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075be:	f7fc fcb5 	bl	8003f2c <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_OscConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e342      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80075d2:	4b40      	ldr	r3, [pc, #256]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1ef      	bne.n	80075be <HAL_RCC_OscConfig+0x166>
 80075de:	e000      	b.n	80075e2 <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 808d 	beq.w	800770a <HAL_RCC_OscConfig+0x2b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075f0:	4b38      	ldr	r3, [pc, #224]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80075fa:	4b36      	ldr	r3, [pc, #216]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 80075fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d007      	beq.n	8007616 <HAL_RCC_OscConfig+0x1be>
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	2b18      	cmp	r3, #24
 800760a:	d137      	bne.n	800767c <HAL_RCC_OscConfig+0x224>
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	f003 0303 	and.w	r3, r3, #3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d132      	bne.n	800767c <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007616:	4b2f      	ldr	r3, [pc, #188]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b00      	cmp	r3, #0
 8007620:	d005      	beq.n	800762e <HAL_RCC_OscConfig+0x1d6>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e314      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800762e:	4b29      	ldr	r3, [pc, #164]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f023 0219 	bic.w	r2, r3, #25
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	4926      	ldr	r1, [pc, #152]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 800763c:	4313      	orrs	r3, r2
 800763e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007640:	f7fc fc74 	bl	8003f2c <HAL_GetTick>
 8007644:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007646:	e008      	b.n	800765a <HAL_RCC_OscConfig+0x202>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007648:	f7fc fc70 	bl	8003f2c <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	2b02      	cmp	r3, #2
 8007654:	d901      	bls.n	800765a <HAL_RCC_OscConfig+0x202>
            {
              return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e2fe      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800765a:	4b1e      	ldr	r3, [pc, #120]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0304 	and.w	r3, r3, #4
 8007662:	2b00      	cmp	r3, #0
 8007664:	d0f0      	beq.n	8007648 <HAL_RCC_OscConfig+0x1f0>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007666:	4b1b      	ldr	r3, [pc, #108]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	061b      	lsls	r3, r3, #24
 8007674:	4917      	ldr	r1, [pc, #92]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007676:	4313      	orrs	r3, r2
 8007678:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800767a:	e046      	b.n	800770a <HAL_RCC_OscConfig+0x2b2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d029      	beq.n	80076d8 <HAL_RCC_OscConfig+0x280>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007684:	4b13      	ldr	r3, [pc, #76]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f023 0219 	bic.w	r2, r3, #25
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	4910      	ldr	r1, [pc, #64]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 8007692:	4313      	orrs	r3, r2
 8007694:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007696:	f7fc fc49 	bl	8003f2c <HAL_GetTick>
 800769a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800769c:	e008      	b.n	80076b0 <HAL_RCC_OscConfig+0x258>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800769e:	f7fc fc45 	bl	8003f2c <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d901      	bls.n	80076b0 <HAL_RCC_OscConfig+0x258>
          {
            return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e2d3      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076b0:	4b08      	ldr	r3, [pc, #32]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d0f0      	beq.n	800769e <HAL_RCC_OscConfig+0x246>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076bc:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	061b      	lsls	r3, r3, #24
 80076ca:	4902      	ldr	r1, [pc, #8]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	604b      	str	r3, [r1, #4]
 80076d0:	e01b      	b.n	800770a <HAL_RCC_OscConfig+0x2b2>
 80076d2:	bf00      	nop
 80076d4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076d8:	4b97      	ldr	r3, [pc, #604]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a96      	ldr	r2, [pc, #600]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 80076de:	f023 0301 	bic.w	r3, r3, #1
 80076e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e4:	f7fc fc22 	bl	8003f2c <HAL_GetTick>
 80076e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076ea:	e008      	b.n	80076fe <HAL_RCC_OscConfig+0x2a6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076ec:	f7fc fc1e 	bl	8003f2c <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e2ac      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076fe:	4b8e      	ldr	r3, [pc, #568]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0304 	and.w	r3, r3, #4
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1f0      	bne.n	80076ec <HAL_RCC_OscConfig+0x294>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0310 	and.w	r3, r3, #16
 8007712:	2b00      	cmp	r3, #0
 8007714:	d06a      	beq.n	80077ec <HAL_RCC_OscConfig+0x394>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007716:	4b88      	ldr	r3, [pc, #544]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800771e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007720:	4b85      	ldr	r3, [pc, #532]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 8007722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007724:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	2b08      	cmp	r3, #8
 800772a:	d007      	beq.n	800773c <HAL_RCC_OscConfig+0x2e4>
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	2b18      	cmp	r3, #24
 8007730:	d11b      	bne.n	800776a <HAL_RCC_OscConfig+0x312>
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f003 0303 	and.w	r3, r3, #3
 8007738:	2b01      	cmp	r3, #1
 800773a:	d116      	bne.n	800776a <HAL_RCC_OscConfig+0x312>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800773c:	4b7e      	ldr	r3, [pc, #504]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007744:	2b00      	cmp	r3, #0
 8007746:	d005      	beq.n	8007754 <HAL_RCC_OscConfig+0x2fc>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	2b80      	cmp	r3, #128	; 0x80
 800774e:	d001      	beq.n	8007754 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e281      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007754:	4b78      	ldr	r3, [pc, #480]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	061b      	lsls	r3, r3, #24
 8007762:	4975      	ldr	r1, [pc, #468]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 8007764:	4313      	orrs	r3, r2
 8007766:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007768:	e040      	b.n	80077ec <HAL_RCC_OscConfig+0x394>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d023      	beq.n	80077ba <HAL_RCC_OscConfig+0x362>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007772:	4b71      	ldr	r3, [pc, #452]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a70      	ldr	r2, [pc, #448]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 8007778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800777c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800777e:	f7fc fbd5 	bl	8003f2c <HAL_GetTick>
 8007782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007784:	e008      	b.n	8007798 <HAL_RCC_OscConfig+0x340>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007786:	f7fc fbd1 	bl	8003f2c <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d901      	bls.n	8007798 <HAL_RCC_OscConfig+0x340>
          {
            return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e25f      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007798:	4b67      	ldr	r3, [pc, #412]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0f0      	beq.n	8007786 <HAL_RCC_OscConfig+0x32e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077a4:	4b64      	ldr	r3, [pc, #400]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	061b      	lsls	r3, r3, #24
 80077b2:	4961      	ldr	r1, [pc, #388]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60cb      	str	r3, [r1, #12]
 80077b8:	e018      	b.n	80077ec <HAL_RCC_OscConfig+0x394>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80077ba:	4b5f      	ldr	r3, [pc, #380]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a5e      	ldr	r2, [pc, #376]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 80077c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077c6:	f7fc fbb1 	bl	8003f2c <HAL_GetTick>
 80077ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80077cc:	e008      	b.n	80077e0 <HAL_RCC_OscConfig+0x388>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80077ce:	f7fc fbad 	bl	8003f2c <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d901      	bls.n	80077e0 <HAL_RCC_OscConfig+0x388>
          {
            return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e23b      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80077e0:	4b55      	ldr	r3, [pc, #340]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1f0      	bne.n	80077ce <HAL_RCC_OscConfig+0x376>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0308 	and.w	r3, r3, #8
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d036      	beq.n	8007866 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d019      	beq.n	8007834 <HAL_RCC_OscConfig+0x3dc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007800:	4b4d      	ldr	r3, [pc, #308]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 8007802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007804:	4a4c      	ldr	r2, [pc, #304]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 8007806:	f043 0301 	orr.w	r3, r3, #1
 800780a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800780c:	f7fc fb8e 	bl	8003f2c <HAL_GetTick>
 8007810:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007812:	e008      	b.n	8007826 <HAL_RCC_OscConfig+0x3ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007814:	f7fc fb8a 	bl	8003f2c <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	2b02      	cmp	r3, #2
 8007820:	d901      	bls.n	8007826 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e218      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007826:	4b44      	ldr	r3, [pc, #272]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 8007828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0f0      	beq.n	8007814 <HAL_RCC_OscConfig+0x3bc>
 8007832:	e018      	b.n	8007866 <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007834:	4b40      	ldr	r3, [pc, #256]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 8007836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007838:	4a3f      	ldr	r2, [pc, #252]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 800783a:	f023 0301 	bic.w	r3, r3, #1
 800783e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007840:	f7fc fb74 	bl	8003f2c <HAL_GetTick>
 8007844:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007846:	e008      	b.n	800785a <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007848:	f7fc fb70 	bl	8003f2c <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	2b02      	cmp	r3, #2
 8007854:	d901      	bls.n	800785a <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e1fe      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800785a:	4b37      	ldr	r3, [pc, #220]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 800785c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1f0      	bne.n	8007848 <HAL_RCC_OscConfig+0x3f0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0320 	and.w	r3, r3, #32
 800786e:	2b00      	cmp	r3, #0
 8007870:	d036      	beq.n	80078e0 <HAL_RCC_OscConfig+0x488>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d019      	beq.n	80078ae <HAL_RCC_OscConfig+0x456>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800787a:	4b2f      	ldr	r3, [pc, #188]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a2e      	ldr	r2, [pc, #184]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 8007880:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007884:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007886:	f7fc fb51 	bl	8003f2c <HAL_GetTick>
 800788a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800788c:	e008      	b.n	80078a0 <HAL_RCC_OscConfig+0x448>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800788e:	f7fc fb4d 	bl	8003f2c <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	2b02      	cmp	r3, #2
 800789a:	d901      	bls.n	80078a0 <HAL_RCC_OscConfig+0x448>
        {
          return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e1db      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078a0:	4b25      	ldr	r3, [pc, #148]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d0f0      	beq.n	800788e <HAL_RCC_OscConfig+0x436>
 80078ac:	e018      	b.n	80078e0 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078ae:	4b22      	ldr	r3, [pc, #136]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a21      	ldr	r2, [pc, #132]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 80078b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078ba:	f7fc fb37 	bl	8003f2c <HAL_GetTick>
 80078be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078c0:	e008      	b.n	80078d4 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80078c2:	f7fc fb33 	bl	8003f2c <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d901      	bls.n	80078d4 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e1c1      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078d4:	4b18      	ldr	r3, [pc, #96]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1f0      	bne.n	80078c2 <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 80af 	beq.w	8007a4c <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80078ee:	4b13      	ldr	r3, [pc, #76]	; (800793c <HAL_RCC_OscConfig+0x4e4>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a12      	ldr	r2, [pc, #72]	; (800793c <HAL_RCC_OscConfig+0x4e4>)
 80078f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078fa:	f7fc fb17 	bl	8003f2c <HAL_GetTick>
 80078fe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007900:	e008      	b.n	8007914 <HAL_RCC_OscConfig+0x4bc>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007902:	f7fc fb13 	bl	8003f2c <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	2b64      	cmp	r3, #100	; 0x64
 800790e:	d901      	bls.n	8007914 <HAL_RCC_OscConfig+0x4bc>
      {
        return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e1a1      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007914:	4b09      	ldr	r3, [pc, #36]	; (800793c <HAL_RCC_OscConfig+0x4e4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0f0      	beq.n	8007902 <HAL_RCC_OscConfig+0x4aa>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d10b      	bne.n	8007940 <HAL_RCC_OscConfig+0x4e8>
 8007928:	4b03      	ldr	r3, [pc, #12]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 800792a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792c:	4a02      	ldr	r2, [pc, #8]	; (8007938 <HAL_RCC_OscConfig+0x4e0>)
 800792e:	f043 0301 	orr.w	r3, r3, #1
 8007932:	6713      	str	r3, [r2, #112]	; 0x70
 8007934:	e05b      	b.n	80079ee <HAL_RCC_OscConfig+0x596>
 8007936:	bf00      	nop
 8007938:	58024400 	.word	0x58024400
 800793c:	58024800 	.word	0x58024800
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d112      	bne.n	800796e <HAL_RCC_OscConfig+0x516>
 8007948:	4b9d      	ldr	r3, [pc, #628]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 800794a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794c:	4a9c      	ldr	r2, [pc, #624]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 800794e:	f023 0301 	bic.w	r3, r3, #1
 8007952:	6713      	str	r3, [r2, #112]	; 0x70
 8007954:	4b9a      	ldr	r3, [pc, #616]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007958:	4a99      	ldr	r2, [pc, #612]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 800795a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800795e:	6713      	str	r3, [r2, #112]	; 0x70
 8007960:	4b97      	ldr	r3, [pc, #604]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007964:	4a96      	ldr	r2, [pc, #600]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007966:	f023 0304 	bic.w	r3, r3, #4
 800796a:	6713      	str	r3, [r2, #112]	; 0x70
 800796c:	e03f      	b.n	80079ee <HAL_RCC_OscConfig+0x596>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	2b05      	cmp	r3, #5
 8007974:	d112      	bne.n	800799c <HAL_RCC_OscConfig+0x544>
 8007976:	4b92      	ldr	r3, [pc, #584]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797a:	4a91      	ldr	r2, [pc, #580]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 800797c:	f043 0304 	orr.w	r3, r3, #4
 8007980:	6713      	str	r3, [r2, #112]	; 0x70
 8007982:	4b8f      	ldr	r3, [pc, #572]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007986:	4a8e      	ldr	r2, [pc, #568]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800798c:	6713      	str	r3, [r2, #112]	; 0x70
 800798e:	4b8c      	ldr	r3, [pc, #560]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007992:	4a8b      	ldr	r2, [pc, #556]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007994:	f043 0301 	orr.w	r3, r3, #1
 8007998:	6713      	str	r3, [r2, #112]	; 0x70
 800799a:	e028      	b.n	80079ee <HAL_RCC_OscConfig+0x596>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	2b85      	cmp	r3, #133	; 0x85
 80079a2:	d112      	bne.n	80079ca <HAL_RCC_OscConfig+0x572>
 80079a4:	4b86      	ldr	r3, [pc, #536]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 80079a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a8:	4a85      	ldr	r2, [pc, #532]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 80079aa:	f043 0304 	orr.w	r3, r3, #4
 80079ae:	6713      	str	r3, [r2, #112]	; 0x70
 80079b0:	4b83      	ldr	r3, [pc, #524]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 80079b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b4:	4a82      	ldr	r2, [pc, #520]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 80079b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ba:	6713      	str	r3, [r2, #112]	; 0x70
 80079bc:	4b80      	ldr	r3, [pc, #512]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 80079be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c0:	4a7f      	ldr	r2, [pc, #508]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 80079c2:	f043 0301 	orr.w	r3, r3, #1
 80079c6:	6713      	str	r3, [r2, #112]	; 0x70
 80079c8:	e011      	b.n	80079ee <HAL_RCC_OscConfig+0x596>
 80079ca:	4b7d      	ldr	r3, [pc, #500]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 80079cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ce:	4a7c      	ldr	r2, [pc, #496]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 80079d0:	f023 0301 	bic.w	r3, r3, #1
 80079d4:	6713      	str	r3, [r2, #112]	; 0x70
 80079d6:	4b7a      	ldr	r3, [pc, #488]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 80079d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079da:	4a79      	ldr	r2, [pc, #484]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 80079dc:	f023 0304 	bic.w	r3, r3, #4
 80079e0:	6713      	str	r3, [r2, #112]	; 0x70
 80079e2:	4b77      	ldr	r3, [pc, #476]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 80079e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e6:	4a76      	ldr	r2, [pc, #472]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 80079e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d015      	beq.n	8007a22 <HAL_RCC_OscConfig+0x5ca>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079f6:	f7fc fa99 	bl	8003f2c <HAL_GetTick>
 80079fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079fc:	e00a      	b.n	8007a14 <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079fe:	f7fc fa95 	bl	8003f2c <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d901      	bls.n	8007a14 <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e121      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a14:	4b6a      	ldr	r3, [pc, #424]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d0ee      	beq.n	80079fe <HAL_RCC_OscConfig+0x5a6>
 8007a20:	e014      	b.n	8007a4c <HAL_RCC_OscConfig+0x5f4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a22:	f7fc fa83 	bl	8003f2c <HAL_GetTick>
 8007a26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a28:	e00a      	b.n	8007a40 <HAL_RCC_OscConfig+0x5e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a2a:	f7fc fa7f 	bl	8003f2c <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d901      	bls.n	8007a40 <HAL_RCC_OscConfig+0x5e8>
        {
          return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e10b      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a40:	4b5f      	ldr	r3, [pc, #380]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a44:	f003 0302 	and.w	r3, r3, #2
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1ee      	bne.n	8007a2a <HAL_RCC_OscConfig+0x5d2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 8100 	beq.w	8007c56 <HAL_RCC_OscConfig+0x7fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007a56:	4b5a      	ldr	r3, [pc, #360]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a5e:	2b18      	cmp	r3, #24
 8007a60:	f000 80bb 	beq.w	8007bda <HAL_RCC_OscConfig+0x782>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	f040 8095 	bne.w	8007b98 <HAL_RCC_OscConfig+0x740>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a6e:	4b54      	ldr	r3, [pc, #336]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a53      	ldr	r2, [pc, #332]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007a74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7a:	f7fc fa57 	bl	8003f2c <HAL_GetTick>
 8007a7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a80:	e008      	b.n	8007a94 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a82:	f7fc fa53 	bl	8003f2c <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d901      	bls.n	8007a94 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e0e1      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a94:	4b4a      	ldr	r3, [pc, #296]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1f0      	bne.n	8007a82 <HAL_RCC_OscConfig+0x62a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007aa0:	4b47      	ldr	r3, [pc, #284]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007aa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007aa4:	4b47      	ldr	r3, [pc, #284]	; (8007bc4 <HAL_RCC_OscConfig+0x76c>)
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007ab0:	0112      	lsls	r2, r2, #4
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	4942      	ldr	r1, [pc, #264]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	628b      	str	r3, [r1, #40]	; 0x28
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	025b      	lsls	r3, r3, #9
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	041b      	lsls	r3, r3, #16
 8007ad8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007adc:	431a      	orrs	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	061b      	lsls	r3, r3, #24
 8007ae6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007aea:	4935      	ldr	r1, [pc, #212]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007af0:	4b33      	ldr	r3, [pc, #204]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	4a32      	ldr	r2, [pc, #200]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007af6:	f023 0301 	bic.w	r3, r3, #1
 8007afa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007afc:	4b30      	ldr	r3, [pc, #192]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b00:	4b31      	ldr	r3, [pc, #196]	; (8007bc8 <HAL_RCC_OscConfig+0x770>)
 8007b02:	4013      	ands	r3, r2
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007b08:	00d2      	lsls	r2, r2, #3
 8007b0a:	492d      	ldr	r1, [pc, #180]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007b10:	4b2b      	ldr	r3, [pc, #172]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	f023 020c 	bic.w	r2, r3, #12
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1c:	4928      	ldr	r1, [pc, #160]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007b22:	4b27      	ldr	r3, [pc, #156]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b26:	f023 0202 	bic.w	r2, r3, #2
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2e:	4924      	ldr	r1, [pc, #144]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b34:	4b22      	ldr	r3, [pc, #136]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b38:	4a21      	ldr	r2, [pc, #132]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b40:	4b1f      	ldr	r3, [pc, #124]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	4a1e      	ldr	r2, [pc, #120]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007b4c:	4b1c      	ldr	r3, [pc, #112]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	4a1b      	ldr	r2, [pc, #108]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007b58:	4b19      	ldr	r3, [pc, #100]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5c:	4a18      	ldr	r2, [pc, #96]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b5e:	f043 0301 	orr.w	r3, r3, #1
 8007b62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b64:	4b16      	ldr	r3, [pc, #88]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a15      	ldr	r2, [pc, #84]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b70:	f7fc f9dc 	bl	8003f2c <HAL_GetTick>
 8007b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b76:	e008      	b.n	8007b8a <HAL_RCC_OscConfig+0x732>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b78:	f7fc f9d8 	bl	8003f2c <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d901      	bls.n	8007b8a <HAL_RCC_OscConfig+0x732>
          {
            return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e066      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b8a:	4b0d      	ldr	r3, [pc, #52]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d0f0      	beq.n	8007b78 <HAL_RCC_OscConfig+0x720>
 8007b96:	e05e      	b.n	8007c56 <HAL_RCC_OscConfig+0x7fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b98:	4b09      	ldr	r3, [pc, #36]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a08      	ldr	r2, [pc, #32]	; (8007bc0 <HAL_RCC_OscConfig+0x768>)
 8007b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba4:	f7fc f9c2 	bl	8003f2c <HAL_GetTick>
 8007ba8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007baa:	e00f      	b.n	8007bcc <HAL_RCC_OscConfig+0x774>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bac:	f7fc f9be 	bl	8003f2c <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d908      	bls.n	8007bcc <HAL_RCC_OscConfig+0x774>
          {
            return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e04c      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
 8007bbe:	bf00      	nop
 8007bc0:	58024400 	.word	0x58024400
 8007bc4:	fffffc0c 	.word	0xfffffc0c
 8007bc8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bcc:	4b24      	ldr	r3, [pc, #144]	; (8007c60 <HAL_RCC_OscConfig+0x808>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e9      	bne.n	8007bac <HAL_RCC_OscConfig+0x754>
 8007bd8:	e03d      	b.n	8007c56 <HAL_RCC_OscConfig+0x7fe>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007bda:	4b21      	ldr	r3, [pc, #132]	; (8007c60 <HAL_RCC_OscConfig+0x808>)
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bde:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007be0:	4b1f      	ldr	r3, [pc, #124]	; (8007c60 <HAL_RCC_OscConfig+0x808>)
 8007be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d031      	beq.n	8007c52 <HAL_RCC_OscConfig+0x7fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f003 0203 	and.w	r2, r3, #3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d12a      	bne.n	8007c52 <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	091b      	lsrs	r3, r3, #4
 8007c00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d122      	bne.n	8007c52 <HAL_RCC_OscConfig+0x7fa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c16:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d11a      	bne.n	8007c52 <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	0a5b      	lsrs	r3, r3, #9
 8007c20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c28:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d111      	bne.n	8007c52 <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	0c1b      	lsrs	r3, r3, #16
 8007c32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d108      	bne.n	8007c52 <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	0e1b      	lsrs	r3, r3, #24
 8007c44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d001      	beq.n	8007c56 <HAL_RCC_OscConfig+0x7fe>
      {
        return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e000      	b.n	8007c58 <HAL_RCC_OscConfig+0x800>
      }
    }
  }
  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3730      	adds	r7, #48	; 0x30
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	58024400 	.word	0x58024400

08007c64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e19c      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c78:	4b8a      	ldr	r3, [pc, #552]	; (8007ea4 <HAL_RCC_ClockConfig+0x240>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 030f 	and.w	r3, r3, #15
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d910      	bls.n	8007ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c86:	4b87      	ldr	r3, [pc, #540]	; (8007ea4 <HAL_RCC_ClockConfig+0x240>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f023 020f 	bic.w	r2, r3, #15
 8007c8e:	4985      	ldr	r1, [pc, #532]	; (8007ea4 <HAL_RCC_ClockConfig+0x240>)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c96:	4b83      	ldr	r3, [pc, #524]	; (8007ea4 <HAL_RCC_ClockConfig+0x240>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 030f 	and.w	r3, r3, #15
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d001      	beq.n	8007ca8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e184      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0304 	and.w	r3, r3, #4
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d010      	beq.n	8007cd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	691a      	ldr	r2, [r3, #16]
 8007cb8:	4b7b      	ldr	r3, [pc, #492]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d908      	bls.n	8007cd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007cc4:	4b78      	ldr	r3, [pc, #480]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	4975      	ldr	r1, [pc, #468]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0308 	and.w	r3, r3, #8
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d010      	beq.n	8007d04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	695a      	ldr	r2, [r3, #20]
 8007ce6:	4b70      	ldr	r3, [pc, #448]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d908      	bls.n	8007d04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cf2:	4b6d      	ldr	r3, [pc, #436]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	496a      	ldr	r1, [pc, #424]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0310 	and.w	r3, r3, #16
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d010      	beq.n	8007d32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	699a      	ldr	r2, [r3, #24]
 8007d14:	4b64      	ldr	r3, [pc, #400]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007d16:	69db      	ldr	r3, [r3, #28]
 8007d18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d908      	bls.n	8007d32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d20:	4b61      	ldr	r3, [pc, #388]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007d22:	69db      	ldr	r3, [r3, #28]
 8007d24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	495e      	ldr	r1, [pc, #376]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0320 	and.w	r3, r3, #32
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d010      	beq.n	8007d60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	69da      	ldr	r2, [r3, #28]
 8007d42:	4b59      	ldr	r3, [pc, #356]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d908      	bls.n	8007d60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007d4e:	4b56      	ldr	r3, [pc, #344]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	4953      	ldr	r1, [pc, #332]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d010      	beq.n	8007d8e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68da      	ldr	r2, [r3, #12]
 8007d70:	4b4d      	ldr	r3, [pc, #308]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	f003 030f 	and.w	r3, r3, #15
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d908      	bls.n	8007d8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d7c:	4b4a      	ldr	r3, [pc, #296]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	f023 020f 	bic.w	r2, r3, #15
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	4947      	ldr	r1, [pc, #284]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d055      	beq.n	8007e46 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007d9a:	4b43      	ldr	r3, [pc, #268]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	4940      	ldr	r1, [pc, #256]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d107      	bne.n	8007dc4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007db4:	4b3c      	ldr	r3, [pc, #240]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d121      	bne.n	8007e04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e0f6      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d107      	bne.n	8007ddc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007dcc:	4b36      	ldr	r3, [pc, #216]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d115      	bne.n	8007e04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e0ea      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d107      	bne.n	8007df4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007de4:	4b30      	ldr	r3, [pc, #192]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d109      	bne.n	8007e04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e0de      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007df4:	4b2c      	ldr	r3, [pc, #176]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e0d6      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e04:	4b28      	ldr	r3, [pc, #160]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	f023 0207 	bic.w	r2, r3, #7
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	4925      	ldr	r1, [pc, #148]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e16:	f7fc f889 	bl	8003f2c <HAL_GetTick>
 8007e1a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e1c:	e00a      	b.n	8007e34 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e1e:	f7fc f885 	bl	8003f2c <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d901      	bls.n	8007e34 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e0be      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e34:	4b1c      	ldr	r3, [pc, #112]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d1eb      	bne.n	8007e1e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0302 	and.w	r3, r3, #2
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d010      	beq.n	8007e74 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	4b14      	ldr	r3, [pc, #80]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	f003 030f 	and.w	r3, r3, #15
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d208      	bcs.n	8007e74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e62:	4b11      	ldr	r3, [pc, #68]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	f023 020f 	bic.w	r2, r3, #15
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	490e      	ldr	r1, [pc, #56]	; (8007ea8 <HAL_RCC_ClockConfig+0x244>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e74:	4b0b      	ldr	r3, [pc, #44]	; (8007ea4 <HAL_RCC_ClockConfig+0x240>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 030f 	and.w	r3, r3, #15
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d214      	bcs.n	8007eac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e82:	4b08      	ldr	r3, [pc, #32]	; (8007ea4 <HAL_RCC_ClockConfig+0x240>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f023 020f 	bic.w	r2, r3, #15
 8007e8a:	4906      	ldr	r1, [pc, #24]	; (8007ea4 <HAL_RCC_ClockConfig+0x240>)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e92:	4b04      	ldr	r3, [pc, #16]	; (8007ea4 <HAL_RCC_ClockConfig+0x240>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 030f 	and.w	r3, r3, #15
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d005      	beq.n	8007eac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e086      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x34e>
 8007ea4:	52002000 	.word	0x52002000
 8007ea8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0304 	and.w	r3, r3, #4
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d010      	beq.n	8007eda <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	691a      	ldr	r2, [r3, #16]
 8007ebc:	4b3f      	ldr	r3, [pc, #252]	; (8007fbc <HAL_RCC_ClockConfig+0x358>)
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d208      	bcs.n	8007eda <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ec8:	4b3c      	ldr	r3, [pc, #240]	; (8007fbc <HAL_RCC_ClockConfig+0x358>)
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	4939      	ldr	r1, [pc, #228]	; (8007fbc <HAL_RCC_ClockConfig+0x358>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0308 	and.w	r3, r3, #8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d010      	beq.n	8007f08 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	695a      	ldr	r2, [r3, #20]
 8007eea:	4b34      	ldr	r3, [pc, #208]	; (8007fbc <HAL_RCC_ClockConfig+0x358>)
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d208      	bcs.n	8007f08 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ef6:	4b31      	ldr	r3, [pc, #196]	; (8007fbc <HAL_RCC_ClockConfig+0x358>)
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	492e      	ldr	r1, [pc, #184]	; (8007fbc <HAL_RCC_ClockConfig+0x358>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0310 	and.w	r3, r3, #16
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d010      	beq.n	8007f36 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	699a      	ldr	r2, [r3, #24]
 8007f18:	4b28      	ldr	r3, [pc, #160]	; (8007fbc <HAL_RCC_ClockConfig+0x358>)
 8007f1a:	69db      	ldr	r3, [r3, #28]
 8007f1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d208      	bcs.n	8007f36 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f24:	4b25      	ldr	r3, [pc, #148]	; (8007fbc <HAL_RCC_ClockConfig+0x358>)
 8007f26:	69db      	ldr	r3, [r3, #28]
 8007f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	4922      	ldr	r1, [pc, #136]	; (8007fbc <HAL_RCC_ClockConfig+0x358>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0320 	and.w	r3, r3, #32
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d010      	beq.n	8007f64 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	69da      	ldr	r2, [r3, #28]
 8007f46:	4b1d      	ldr	r3, [pc, #116]	; (8007fbc <HAL_RCC_ClockConfig+0x358>)
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d208      	bcs.n	8007f64 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007f52:	4b1a      	ldr	r3, [pc, #104]	; (8007fbc <HAL_RCC_ClockConfig+0x358>)
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	4917      	ldr	r1, [pc, #92]	; (8007fbc <HAL_RCC_ClockConfig+0x358>)
 8007f60:	4313      	orrs	r3, r2
 8007f62:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007f64:	f000 f834 	bl	8007fd0 <HAL_RCC_GetSysClockFreq>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	4b14      	ldr	r3, [pc, #80]	; (8007fbc <HAL_RCC_ClockConfig+0x358>)
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	0a1b      	lsrs	r3, r3, #8
 8007f70:	f003 030f 	and.w	r3, r3, #15
 8007f74:	4912      	ldr	r1, [pc, #72]	; (8007fc0 <HAL_RCC_ClockConfig+0x35c>)
 8007f76:	5ccb      	ldrb	r3, [r1, r3]
 8007f78:	f003 031f 	and.w	r3, r3, #31
 8007f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f80:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007f82:	4b0e      	ldr	r3, [pc, #56]	; (8007fbc <HAL_RCC_ClockConfig+0x358>)
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	f003 030f 	and.w	r3, r3, #15
 8007f8a:	4a0d      	ldr	r2, [pc, #52]	; (8007fc0 <HAL_RCC_ClockConfig+0x35c>)
 8007f8c:	5cd3      	ldrb	r3, [r2, r3]
 8007f8e:	f003 031f 	and.w	r3, r3, #31
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	fa22 f303 	lsr.w	r3, r2, r3
 8007f98:	4a0a      	ldr	r2, [pc, #40]	; (8007fc4 <HAL_RCC_ClockConfig+0x360>)
 8007f9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f9c:	4a0a      	ldr	r2, [pc, #40]	; (8007fc8 <HAL_RCC_ClockConfig+0x364>)
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007fa2:	4b0a      	ldr	r3, [pc, #40]	; (8007fcc <HAL_RCC_ClockConfig+0x368>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fb ff76 	bl	8003e98 <HAL_InitTick>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	58024400 	.word	0x58024400
 8007fc0:	08018124 	.word	0x08018124
 8007fc4:	24000010 	.word	0x24000010
 8007fc8:	2400000c 	.word	0x2400000c
 8007fcc:	24000014 	.word	0x24000014

08007fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b089      	sub	sp, #36	; 0x24
 8007fd4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fd6:	4bb3      	ldr	r3, [pc, #716]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fde:	2b18      	cmp	r3, #24
 8007fe0:	f200 8155 	bhi.w	800828e <HAL_RCC_GetSysClockFreq+0x2be>
 8007fe4:	a201      	add	r2, pc, #4	; (adr r2, 8007fec <HAL_RCC_GetSysClockFreq+0x1c>)
 8007fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fea:	bf00      	nop
 8007fec:	08008051 	.word	0x08008051
 8007ff0:	0800828f 	.word	0x0800828f
 8007ff4:	0800828f 	.word	0x0800828f
 8007ff8:	0800828f 	.word	0x0800828f
 8007ffc:	0800828f 	.word	0x0800828f
 8008000:	0800828f 	.word	0x0800828f
 8008004:	0800828f 	.word	0x0800828f
 8008008:	0800828f 	.word	0x0800828f
 800800c:	08008077 	.word	0x08008077
 8008010:	0800828f 	.word	0x0800828f
 8008014:	0800828f 	.word	0x0800828f
 8008018:	0800828f 	.word	0x0800828f
 800801c:	0800828f 	.word	0x0800828f
 8008020:	0800828f 	.word	0x0800828f
 8008024:	0800828f 	.word	0x0800828f
 8008028:	0800828f 	.word	0x0800828f
 800802c:	0800807d 	.word	0x0800807d
 8008030:	0800828f 	.word	0x0800828f
 8008034:	0800828f 	.word	0x0800828f
 8008038:	0800828f 	.word	0x0800828f
 800803c:	0800828f 	.word	0x0800828f
 8008040:	0800828f 	.word	0x0800828f
 8008044:	0800828f 	.word	0x0800828f
 8008048:	0800828f 	.word	0x0800828f
 800804c:	08008083 	.word	0x08008083
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008050:	4b94      	ldr	r3, [pc, #592]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0320 	and.w	r3, r3, #32
 8008058:	2b00      	cmp	r3, #0
 800805a:	d009      	beq.n	8008070 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800805c:	4b91      	ldr	r3, [pc, #580]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	08db      	lsrs	r3, r3, #3
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	4a90      	ldr	r2, [pc, #576]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008068:	fa22 f303 	lsr.w	r3, r2, r3
 800806c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800806e:	e111      	b.n	8008294 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008070:	4b8d      	ldr	r3, [pc, #564]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008072:	61bb      	str	r3, [r7, #24]
    break;
 8008074:	e10e      	b.n	8008294 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008076:	4b8d      	ldr	r3, [pc, #564]	; (80082ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008078:	61bb      	str	r3, [r7, #24]
    break;
 800807a:	e10b      	b.n	8008294 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800807c:	4b8c      	ldr	r3, [pc, #560]	; (80082b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800807e:	61bb      	str	r3, [r7, #24]
    break;
 8008080:	e108      	b.n	8008294 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008082:	4b88      	ldr	r3, [pc, #544]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008086:	f003 0303 	and.w	r3, r3, #3
 800808a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800808c:	4b85      	ldr	r3, [pc, #532]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	091b      	lsrs	r3, r3, #4
 8008092:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008096:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008098:	4b82      	ldr	r3, [pc, #520]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80080a2:	4b80      	ldr	r3, [pc, #512]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a6:	08db      	lsrs	r3, r3, #3
 80080a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	fb02 f303 	mul.w	r3, r2, r3
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 80e1 	beq.w	8008288 <HAL_RCC_GetSysClockFreq+0x2b8>
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	f000 8083 	beq.w	80081d4 <HAL_RCC_GetSysClockFreq+0x204>
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	f200 80a1 	bhi.w	8008218 <HAL_RCC_GetSysClockFreq+0x248>
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d003      	beq.n	80080e4 <HAL_RCC_GetSysClockFreq+0x114>
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d056      	beq.n	8008190 <HAL_RCC_GetSysClockFreq+0x1c0>
 80080e2:	e099      	b.n	8008218 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080e4:	4b6f      	ldr	r3, [pc, #444]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0320 	and.w	r3, r3, #32
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d02d      	beq.n	800814c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080f0:	4b6c      	ldr	r3, [pc, #432]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	08db      	lsrs	r3, r3, #3
 80080f6:	f003 0303 	and.w	r3, r3, #3
 80080fa:	4a6b      	ldr	r2, [pc, #428]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008100:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	ee07 3a90 	vmov	s15, r3
 8008108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	ee07 3a90 	vmov	s15, r3
 8008112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800811a:	4b62      	ldr	r3, [pc, #392]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800811c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008122:	ee07 3a90 	vmov	s15, r3
 8008126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800812a:	ed97 6a02 	vldr	s12, [r7, #8]
 800812e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80082b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800813a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800813e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008146:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800814a:	e087      	b.n	800825c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	ee07 3a90 	vmov	s15, r3
 8008152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008156:	eddf 6a58 	vldr	s13, [pc, #352]	; 80082b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800815a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800815e:	4b51      	ldr	r3, [pc, #324]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008166:	ee07 3a90 	vmov	s15, r3
 800816a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800816e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008172:	eddf 5a50 	vldr	s11, [pc, #320]	; 80082b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800817a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800817e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800818a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800818e:	e065      	b.n	800825c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	ee07 3a90 	vmov	s15, r3
 8008196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800819a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80082bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800819e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081a2:	4b40      	ldr	r3, [pc, #256]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081aa:	ee07 3a90 	vmov	s15, r3
 80081ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80081b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80082b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081d2:	e043      	b.n	800825c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	ee07 3a90 	vmov	s15, r3
 80081da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80082c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80081e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081e6:	4b2f      	ldr	r3, [pc, #188]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80081fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80082b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800820a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800820e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008216:	e021      	b.n	800825c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	ee07 3a90 	vmov	s15, r3
 800821e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008222:	eddf 6a26 	vldr	s13, [pc, #152]	; 80082bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800822a:	4b1e      	ldr	r3, [pc, #120]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800822c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008232:	ee07 3a90 	vmov	s15, r3
 8008236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800823a:	ed97 6a02 	vldr	s12, [r7, #8]
 800823e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80082b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800824a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800824e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800825a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800825c:	4b11      	ldr	r3, [pc, #68]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800825e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008260:	0a5b      	lsrs	r3, r3, #9
 8008262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008266:	3301      	adds	r3, #1
 8008268:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	ee07 3a90 	vmov	s15, r3
 8008270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008274:	edd7 6a07 	vldr	s13, [r7, #28]
 8008278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800827c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008280:	ee17 3a90 	vmov	r3, s15
 8008284:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008286:	e005      	b.n	8008294 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008288:	2300      	movs	r3, #0
 800828a:	61bb      	str	r3, [r7, #24]
    break;
 800828c:	e002      	b.n	8008294 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800828e:	4b07      	ldr	r3, [pc, #28]	; (80082ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008290:	61bb      	str	r3, [r7, #24]
    break;
 8008292:	bf00      	nop
  }

  return sysclockfreq;
 8008294:	69bb      	ldr	r3, [r7, #24]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3724      	adds	r7, #36	; 0x24
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	58024400 	.word	0x58024400
 80082a8:	03d09000 	.word	0x03d09000
 80082ac:	003d0900 	.word	0x003d0900
 80082b0:	016e3600 	.word	0x016e3600
 80082b4:	46000000 	.word	0x46000000
 80082b8:	4c742400 	.word	0x4c742400
 80082bc:	4a742400 	.word	0x4a742400
 80082c0:	4bb71b00 	.word	0x4bb71b00

080082c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80082ca:	f7ff fe81 	bl	8007fd0 <HAL_RCC_GetSysClockFreq>
 80082ce:	4602      	mov	r2, r0
 80082d0:	4b10      	ldr	r3, [pc, #64]	; (8008314 <HAL_RCC_GetHCLKFreq+0x50>)
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	0a1b      	lsrs	r3, r3, #8
 80082d6:	f003 030f 	and.w	r3, r3, #15
 80082da:	490f      	ldr	r1, [pc, #60]	; (8008318 <HAL_RCC_GetHCLKFreq+0x54>)
 80082dc:	5ccb      	ldrb	r3, [r1, r3]
 80082de:	f003 031f 	and.w	r3, r3, #31
 80082e2:	fa22 f303 	lsr.w	r3, r2, r3
 80082e6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80082e8:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <HAL_RCC_GetHCLKFreq+0x50>)
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	4a09      	ldr	r2, [pc, #36]	; (8008318 <HAL_RCC_GetHCLKFreq+0x54>)
 80082f2:	5cd3      	ldrb	r3, [r2, r3]
 80082f4:	f003 031f 	and.w	r3, r3, #31
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	fa22 f303 	lsr.w	r3, r2, r3
 80082fe:	4a07      	ldr	r2, [pc, #28]	; (800831c <HAL_RCC_GetHCLKFreq+0x58>)
 8008300:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008302:	4a07      	ldr	r2, [pc, #28]	; (8008320 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008308:	4b04      	ldr	r3, [pc, #16]	; (800831c <HAL_RCC_GetHCLKFreq+0x58>)
 800830a:	681b      	ldr	r3, [r3, #0]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	58024400 	.word	0x58024400
 8008318:	08018124 	.word	0x08018124
 800831c:	24000010 	.word	0x24000010
 8008320:	2400000c 	.word	0x2400000c

08008324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8008328:	f7ff ffcc 	bl	80082c4 <HAL_RCC_GetHCLKFreq>
 800832c:	4602      	mov	r2, r0
 800832e:	4b06      	ldr	r3, [pc, #24]	; (8008348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	091b      	lsrs	r3, r3, #4
 8008334:	f003 0307 	and.w	r3, r3, #7
 8008338:	4904      	ldr	r1, [pc, #16]	; (800834c <HAL_RCC_GetPCLK1Freq+0x28>)
 800833a:	5ccb      	ldrb	r3, [r1, r3]
 800833c:	f003 031f 	and.w	r3, r3, #31
 8008340:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008344:	4618      	mov	r0, r3
 8008346:	bd80      	pop	{r7, pc}
 8008348:	58024400 	.word	0x58024400
 800834c:	08018124 	.word	0x08018124

08008350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8008354:	f7ff ffb6 	bl	80082c4 <HAL_RCC_GetHCLKFreq>
 8008358:	4602      	mov	r2, r0
 800835a:	4b06      	ldr	r3, [pc, #24]	; (8008374 <HAL_RCC_GetPCLK2Freq+0x24>)
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	0a1b      	lsrs	r3, r3, #8
 8008360:	f003 0307 	and.w	r3, r3, #7
 8008364:	4904      	ldr	r1, [pc, #16]	; (8008378 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008366:	5ccb      	ldrb	r3, [r1, r3]
 8008368:	f003 031f 	and.w	r3, r3, #31
 800836c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008370:	4618      	mov	r0, r3
 8008372:	bd80      	pop	{r7, pc}
 8008374:	58024400 	.word	0x58024400
 8008378:	08018124 	.word	0x08018124

0800837c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008384:	2300      	movs	r3, #0
 8008386:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008388:	2300      	movs	r3, #0
 800838a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d03f      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800839c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083a0:	d02a      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80083a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083a6:	d824      	bhi.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80083a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083ac:	d018      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80083ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083b2:	d81e      	bhi.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80083b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083bc:	d007      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80083be:	e018      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083c0:	4b9f      	ldr	r3, [pc, #636]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	4a9e      	ldr	r2, [pc, #632]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80083c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80083cc:	e015      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	3304      	adds	r3, #4
 80083d2:	2102      	movs	r1, #2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f001 ff1b 	bl	800a210 <RCCEx_PLL2_Config>
 80083da:	4603      	mov	r3, r0
 80083dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80083de:	e00c      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3324      	adds	r3, #36	; 0x24
 80083e4:	2102      	movs	r1, #2
 80083e6:	4618      	mov	r0, r3
 80083e8:	f001 ffc4 	bl	800a374 <RCCEx_PLL3_Config>
 80083ec:	4603      	mov	r3, r0
 80083ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80083f0:	e003      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	75fb      	strb	r3, [r7, #23]
      break;
 80083f6:	e000      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80083f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d109      	bne.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008400:	4b8f      	ldr	r3, [pc, #572]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008404:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800840c:	498c      	ldr	r1, [pc, #560]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800840e:	4313      	orrs	r3, r2
 8008410:	650b      	str	r3, [r1, #80]	; 0x50
 8008412:	e001      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008414:	7dfb      	ldrb	r3, [r7, #23]
 8008416:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008420:	2b00      	cmp	r3, #0
 8008422:	d03d      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008428:	2b04      	cmp	r3, #4
 800842a:	d826      	bhi.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800842c:	a201      	add	r2, pc, #4	; (adr r2, 8008434 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800842e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008432:	bf00      	nop
 8008434:	08008449 	.word	0x08008449
 8008438:	08008457 	.word	0x08008457
 800843c:	08008469 	.word	0x08008469
 8008440:	08008481 	.word	0x08008481
 8008444:	08008481 	.word	0x08008481
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008448:	4b7d      	ldr	r3, [pc, #500]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	4a7c      	ldr	r2, [pc, #496]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800844e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008452:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008454:	e015      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	3304      	adds	r3, #4
 800845a:	2100      	movs	r1, #0
 800845c:	4618      	mov	r0, r3
 800845e:	f001 fed7 	bl	800a210 <RCCEx_PLL2_Config>
 8008462:	4603      	mov	r3, r0
 8008464:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008466:	e00c      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3324      	adds	r3, #36	; 0x24
 800846c:	2100      	movs	r1, #0
 800846e:	4618      	mov	r0, r3
 8008470:	f001 ff80 	bl	800a374 <RCCEx_PLL3_Config>
 8008474:	4603      	mov	r3, r0
 8008476:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008478:	e003      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	75fb      	strb	r3, [r7, #23]
      break;
 800847e:	e000      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008482:	7dfb      	ldrb	r3, [r7, #23]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d109      	bne.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008488:	4b6d      	ldr	r3, [pc, #436]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800848a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800848c:	f023 0207 	bic.w	r2, r3, #7
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008494:	496a      	ldr	r1, [pc, #424]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008496:	4313      	orrs	r3, r2
 8008498:	650b      	str	r3, [r1, #80]	; 0x50
 800849a:	e001      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800849c:	7dfb      	ldrb	r3, [r7, #23]
 800849e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d04a      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80084b4:	d031      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80084b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80084ba:	d82b      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80084bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084c0:	d02d      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80084c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084c6:	d825      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80084c8:	2bc0      	cmp	r3, #192	; 0xc0
 80084ca:	d02a      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80084cc:	2bc0      	cmp	r3, #192	; 0xc0
 80084ce:	d821      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80084d0:	2b80      	cmp	r3, #128	; 0x80
 80084d2:	d016      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80084d4:	2b80      	cmp	r3, #128	; 0x80
 80084d6:	d81d      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80084dc:	2b40      	cmp	r3, #64	; 0x40
 80084de:	d007      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80084e0:	e018      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084e2:	4b57      	ldr	r3, [pc, #348]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80084e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e6:	4a56      	ldr	r2, [pc, #344]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80084e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80084ee:	e019      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3304      	adds	r3, #4
 80084f4:	2100      	movs	r1, #0
 80084f6:	4618      	mov	r0, r3
 80084f8:	f001 fe8a 	bl	800a210 <RCCEx_PLL2_Config>
 80084fc:	4603      	mov	r3, r0
 80084fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8008500:	e010      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	3324      	adds	r3, #36	; 0x24
 8008506:	2100      	movs	r1, #0
 8008508:	4618      	mov	r0, r3
 800850a:	f001 ff33 	bl	800a374 <RCCEx_PLL3_Config>
 800850e:	4603      	mov	r3, r0
 8008510:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8008512:	e007      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	75fb      	strb	r3, [r7, #23]
      break;
 8008518:	e004      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800851a:	bf00      	nop
 800851c:	e002      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800851e:	bf00      	nop
 8008520:	e000      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8008522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008524:	7dfb      	ldrb	r3, [r7, #23]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d109      	bne.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800852a:	4b45      	ldr	r3, [pc, #276]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800852c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800852e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008536:	4942      	ldr	r1, [pc, #264]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008538:	4313      	orrs	r3, r2
 800853a:	650b      	str	r3, [r1, #80]	; 0x50
 800853c:	e001      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800853e:	7dfb      	ldrb	r3, [r7, #23]
 8008540:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800854a:	2b00      	cmp	r3, #0
 800854c:	d04f      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008552:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008556:	d036      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8008558:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800855c:	d830      	bhi.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800855e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008562:	d032      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8008564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008568:	d82a      	bhi.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800856a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800856e:	d02e      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x252>
 8008570:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008574:	d824      	bhi.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8008576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800857a:	d018      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x232>
 800857c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008580:	d81e      	bhi.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8008586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800858a:	d007      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x220>
 800858c:	e018      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800858e:	4b2c      	ldr	r3, [pc, #176]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008592:	4a2b      	ldr	r2, [pc, #172]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008598:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800859a:	e019      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3304      	adds	r3, #4
 80085a0:	2100      	movs	r1, #0
 80085a2:	4618      	mov	r0, r3
 80085a4:	f001 fe34 	bl	800a210 <RCCEx_PLL2_Config>
 80085a8:	4603      	mov	r3, r0
 80085aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80085ac:	e010      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3324      	adds	r3, #36	; 0x24
 80085b2:	2100      	movs	r1, #0
 80085b4:	4618      	mov	r0, r3
 80085b6:	f001 fedd 	bl	800a374 <RCCEx_PLL3_Config>
 80085ba:	4603      	mov	r3, r0
 80085bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80085be:	e007      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	75fb      	strb	r3, [r7, #23]
      break;
 80085c4:	e004      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80085c6:	bf00      	nop
 80085c8:	e002      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80085ca:	bf00      	nop
 80085cc:	e000      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80085ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d109      	bne.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80085d6:	4b1a      	ldr	r3, [pc, #104]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80085d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085da:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085e2:	4917      	ldr	r1, [pc, #92]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	650b      	str	r3, [r1, #80]	; 0x50
 80085e8:	e001      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
 80085ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d034      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085fe:	2b30      	cmp	r3, #48	; 0x30
 8008600:	d01c      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8008602:	2b30      	cmp	r3, #48	; 0x30
 8008604:	d817      	bhi.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008606:	2b20      	cmp	r3, #32
 8008608:	d00c      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800860a:	2b20      	cmp	r3, #32
 800860c:	d813      	bhi.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800860e:	2b00      	cmp	r3, #0
 8008610:	d018      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8008612:	2b10      	cmp	r3, #16
 8008614:	d10f      	bne.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008616:	4b0a      	ldr	r3, [pc, #40]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861a:	4a09      	ldr	r2, [pc, #36]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800861c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008620:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008622:	e010      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3304      	adds	r3, #4
 8008628:	2102      	movs	r1, #2
 800862a:	4618      	mov	r0, r3
 800862c:	f001 fdf0 	bl	800a210 <RCCEx_PLL2_Config>
 8008630:	4603      	mov	r3, r0
 8008632:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008634:	e007      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	75fb      	strb	r3, [r7, #23]
      break;
 800863a:	e004      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 800863c:	bf00      	nop
 800863e:	e002      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008640:	58024400 	.word	0x58024400
      break;
 8008644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008646:	7dfb      	ldrb	r3, [r7, #23]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d109      	bne.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800864c:	4b9b      	ldr	r3, [pc, #620]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800864e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008650:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008658:	4998      	ldr	r1, [pc, #608]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800865a:	4313      	orrs	r3, r2
 800865c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800865e:	e001      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d047      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008678:	d030      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800867a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800867e:	d82a      	bhi.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8008680:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008684:	d02c      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8008686:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800868a:	d824      	bhi.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800868c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008690:	d018      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008696:	d81e      	bhi.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800869c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a0:	d007      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80086a2:	e018      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086a4:	4b85      	ldr	r3, [pc, #532]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	4a84      	ldr	r2, [pc, #528]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80086aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086b0:	e017      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	3304      	adds	r3, #4
 80086b6:	2100      	movs	r1, #0
 80086b8:	4618      	mov	r0, r3
 80086ba:	f001 fda9 	bl	800a210 <RCCEx_PLL2_Config>
 80086be:	4603      	mov	r3, r0
 80086c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086c2:	e00e      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	3324      	adds	r3, #36	; 0x24
 80086c8:	2100      	movs	r1, #0
 80086ca:	4618      	mov	r0, r3
 80086cc:	f001 fe52 	bl	800a374 <RCCEx_PLL3_Config>
 80086d0:	4603      	mov	r3, r0
 80086d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086d4:	e005      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	75fb      	strb	r3, [r7, #23]
      break;
 80086da:	e002      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80086dc:	bf00      	nop
 80086de:	e000      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80086e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d109      	bne.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80086e8:	4b74      	ldr	r3, [pc, #464]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80086ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f4:	4971      	ldr	r1, [pc, #452]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	650b      	str	r3, [r1, #80]	; 0x50
 80086fa:	e001      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
 80086fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d049      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008714:	d02e      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008716:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800871a:	d828      	bhi.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800871c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008720:	d02a      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008722:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008726:	d822      	bhi.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008728:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800872c:	d026      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x400>
 800872e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008732:	d81c      	bhi.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008734:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008738:	d010      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800873a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800873e:	d816      	bhi.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008740:	2b00      	cmp	r3, #0
 8008742:	d01d      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8008744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008748:	d111      	bne.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	3304      	adds	r3, #4
 800874e:	2101      	movs	r1, #1
 8008750:	4618      	mov	r0, r3
 8008752:	f001 fd5d 	bl	800a210 <RCCEx_PLL2_Config>
 8008756:	4603      	mov	r3, r0
 8008758:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800875a:	e012      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3324      	adds	r3, #36	; 0x24
 8008760:	2101      	movs	r1, #1
 8008762:	4618      	mov	r0, r3
 8008764:	f001 fe06 	bl	800a374 <RCCEx_PLL3_Config>
 8008768:	4603      	mov	r3, r0
 800876a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800876c:	e009      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	75fb      	strb	r3, [r7, #23]
      break;
 8008772:	e006      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8008774:	bf00      	nop
 8008776:	e004      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8008778:	bf00      	nop
 800877a:	e002      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800877c:	bf00      	nop
 800877e:	e000      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8008780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008782:	7dfb      	ldrb	r3, [r7, #23]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d109      	bne.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008788:	4b4c      	ldr	r3, [pc, #304]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800878a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800878c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008794:	4949      	ldr	r1, [pc, #292]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008796:	4313      	orrs	r3, r2
 8008798:	650b      	str	r3, [r1, #80]	; 0x50
 800879a:	e001      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d053      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087b2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80087b6:	d034      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80087b8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80087bc:	d82e      	bhi.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80087be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087c2:	d030      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80087c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087c8:	d828      	bhi.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80087ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ce:	d02c      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80087d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d4:	d822      	bhi.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80087d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087da:	d028      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80087dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087e0:	d81c      	bhi.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80087e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087e6:	d010      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80087e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087ec:	d816      	bhi.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d01f      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80087f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087f6:	d111      	bne.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3304      	adds	r3, #4
 80087fc:	2101      	movs	r1, #1
 80087fe:	4618      	mov	r0, r3
 8008800:	f001 fd06 	bl	800a210 <RCCEx_PLL2_Config>
 8008804:	4603      	mov	r3, r0
 8008806:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008808:	e014      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	3324      	adds	r3, #36	; 0x24
 800880e:	2101      	movs	r1, #1
 8008810:	4618      	mov	r0, r3
 8008812:	f001 fdaf 	bl	800a374 <RCCEx_PLL3_Config>
 8008816:	4603      	mov	r3, r0
 8008818:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800881a:	e00b      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	75fb      	strb	r3, [r7, #23]
      break;
 8008820:	e008      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008822:	bf00      	nop
 8008824:	e006      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008826:	bf00      	nop
 8008828:	e004      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800882a:	bf00      	nop
 800882c:	e002      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800882e:	bf00      	nop
 8008830:	e000      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10a      	bne.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800883a:	4b20      	ldr	r3, [pc, #128]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800883c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800883e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008848:	491c      	ldr	r1, [pc, #112]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800884a:	4313      	orrs	r3, r2
 800884c:	658b      	str	r3, [r1, #88]	; 0x58
 800884e:	e001      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008850:	7dfb      	ldrb	r3, [r7, #23]
 8008852:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d031      	beq.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008868:	d00e      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800886a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800886e:	d814      	bhi.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008870:	2b00      	cmp	r3, #0
 8008872:	d015      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008874:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008878:	d10f      	bne.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800887a:	4b10      	ldr	r3, [pc, #64]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800887c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887e:	4a0f      	ldr	r2, [pc, #60]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008884:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008886:	e00c      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3304      	adds	r3, #4
 800888c:	2101      	movs	r1, #1
 800888e:	4618      	mov	r0, r3
 8008890:	f001 fcbe 	bl	800a210 <RCCEx_PLL2_Config>
 8008894:	4603      	mov	r3, r0
 8008896:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008898:	e003      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	75fb      	strb	r3, [r7, #23]
      break;
 800889e:	e000      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80088a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088a2:	7dfb      	ldrb	r3, [r7, #23]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10b      	bne.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80088a8:	4b04      	ldr	r3, [pc, #16]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80088aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088b4:	4901      	ldr	r1, [pc, #4]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	650b      	str	r3, [r1, #80]	; 0x50
 80088ba:	e003      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x548>
 80088bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c0:	7dfb      	ldrb	r3, [r7, #23]
 80088c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d032      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d81b      	bhi.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80088d8:	a201      	add	r2, pc, #4	; (adr r2, 80088e0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80088da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088de:	bf00      	nop
 80088e0:	08008917 	.word	0x08008917
 80088e4:	080088f1 	.word	0x080088f1
 80088e8:	080088ff 	.word	0x080088ff
 80088ec:	08008917 	.word	0x08008917
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088f0:	4bb2      	ldr	r3, [pc, #712]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	4ab1      	ldr	r2, [pc, #708]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80088f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80088fc:	e00c      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	3304      	adds	r3, #4
 8008902:	2102      	movs	r1, #2
 8008904:	4618      	mov	r0, r3
 8008906:	f001 fc83 	bl	800a210 <RCCEx_PLL2_Config>
 800890a:	4603      	mov	r3, r0
 800890c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800890e:	e003      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	75fb      	strb	r3, [r7, #23]
      break;
 8008914:	e000      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008918:	7dfb      	ldrb	r3, [r7, #23]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d109      	bne.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800891e:	4ba7      	ldr	r3, [pc, #668]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008922:	f023 0203 	bic.w	r2, r3, #3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800892a:	49a4      	ldr	r1, [pc, #656]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800892c:	4313      	orrs	r3, r2
 800892e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008930:	e001      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008932:	7dfb      	ldrb	r3, [r7, #23]
 8008934:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800893e:	2b00      	cmp	r3, #0
 8008940:	f000 8086 	beq.w	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008944:	4b9e      	ldr	r3, [pc, #632]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a9d      	ldr	r2, [pc, #628]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800894a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800894e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008950:	f7fb faec 	bl	8003f2c <HAL_GetTick>
 8008954:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008956:	e009      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008958:	f7fb fae8 	bl	8003f2c <HAL_GetTick>
 800895c:	4602      	mov	r2, r0
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	2b64      	cmp	r3, #100	; 0x64
 8008964:	d902      	bls.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	75fb      	strb	r3, [r7, #23]
        break;
 800896a:	e005      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800896c:	4b94      	ldr	r3, [pc, #592]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008974:	2b00      	cmp	r3, #0
 8008976:	d0ef      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8008978:	7dfb      	ldrb	r3, [r7, #23]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d166      	bne.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800897e:	4b8f      	ldr	r3, [pc, #572]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008980:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008988:	4053      	eors	r3, r2
 800898a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800898e:	2b00      	cmp	r3, #0
 8008990:	d013      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008992:	4b8a      	ldr	r3, [pc, #552]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800899a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800899c:	4b87      	ldr	r3, [pc, #540]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800899e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a0:	4a86      	ldr	r2, [pc, #536]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80089a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089a8:	4b84      	ldr	r3, [pc, #528]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80089aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ac:	4a83      	ldr	r2, [pc, #524]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80089ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80089b4:	4a81      	ldr	r2, [pc, #516]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089c4:	d115      	bne.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c6:	f7fb fab1 	bl	8003f2c <HAL_GetTick>
 80089ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089cc:	e00b      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089ce:	f7fb faad 	bl	8003f2c <HAL_GetTick>
 80089d2:	4602      	mov	r2, r0
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089dc:	4293      	cmp	r3, r2
 80089de:	d902      	bls.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	75fb      	strb	r3, [r7, #23]
            break;
 80089e4:	e005      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089e6:	4b75      	ldr	r3, [pc, #468]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80089e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ea:	f003 0302 	and.w	r3, r3, #2
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d0ed      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d126      	bne.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a06:	d10d      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8008a08:	4b6c      	ldr	r3, [pc, #432]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a16:	0919      	lsrs	r1, r3, #4
 8008a18:	4b6a      	ldr	r3, [pc, #424]	; (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008a1a:	400b      	ands	r3, r1
 8008a1c:	4967      	ldr	r1, [pc, #412]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	610b      	str	r3, [r1, #16]
 8008a22:	e005      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8008a24:	4b65      	ldr	r3, [pc, #404]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	4a64      	ldr	r2, [pc, #400]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a2e:	6113      	str	r3, [r2, #16]
 8008a30:	4b62      	ldr	r3, [pc, #392]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a3e:	495f      	ldr	r1, [pc, #380]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008a40:	4313      	orrs	r3, r2
 8008a42:	670b      	str	r3, [r1, #112]	; 0x70
 8008a44:	e004      	b.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	75bb      	strb	r3, [r7, #22]
 8008a4a:	e001      	b.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a4c:	7dfb      	ldrb	r3, [r7, #23]
 8008a4e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0301 	and.w	r3, r3, #1
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d07f      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a62:	2b28      	cmp	r3, #40	; 0x28
 8008a64:	d866      	bhi.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8008a66:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8008a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6c:	08008b3b 	.word	0x08008b3b
 8008a70:	08008b35 	.word	0x08008b35
 8008a74:	08008b35 	.word	0x08008b35
 8008a78:	08008b35 	.word	0x08008b35
 8008a7c:	08008b35 	.word	0x08008b35
 8008a80:	08008b35 	.word	0x08008b35
 8008a84:	08008b35 	.word	0x08008b35
 8008a88:	08008b35 	.word	0x08008b35
 8008a8c:	08008b11 	.word	0x08008b11
 8008a90:	08008b35 	.word	0x08008b35
 8008a94:	08008b35 	.word	0x08008b35
 8008a98:	08008b35 	.word	0x08008b35
 8008a9c:	08008b35 	.word	0x08008b35
 8008aa0:	08008b35 	.word	0x08008b35
 8008aa4:	08008b35 	.word	0x08008b35
 8008aa8:	08008b35 	.word	0x08008b35
 8008aac:	08008b23 	.word	0x08008b23
 8008ab0:	08008b35 	.word	0x08008b35
 8008ab4:	08008b35 	.word	0x08008b35
 8008ab8:	08008b35 	.word	0x08008b35
 8008abc:	08008b35 	.word	0x08008b35
 8008ac0:	08008b35 	.word	0x08008b35
 8008ac4:	08008b35 	.word	0x08008b35
 8008ac8:	08008b35 	.word	0x08008b35
 8008acc:	08008b3b 	.word	0x08008b3b
 8008ad0:	08008b35 	.word	0x08008b35
 8008ad4:	08008b35 	.word	0x08008b35
 8008ad8:	08008b35 	.word	0x08008b35
 8008adc:	08008b35 	.word	0x08008b35
 8008ae0:	08008b35 	.word	0x08008b35
 8008ae4:	08008b35 	.word	0x08008b35
 8008ae8:	08008b35 	.word	0x08008b35
 8008aec:	08008b3b 	.word	0x08008b3b
 8008af0:	08008b35 	.word	0x08008b35
 8008af4:	08008b35 	.word	0x08008b35
 8008af8:	08008b35 	.word	0x08008b35
 8008afc:	08008b35 	.word	0x08008b35
 8008b00:	08008b35 	.word	0x08008b35
 8008b04:	08008b35 	.word	0x08008b35
 8008b08:	08008b35 	.word	0x08008b35
 8008b0c:	08008b3b 	.word	0x08008b3b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	3304      	adds	r3, #4
 8008b14:	2101      	movs	r1, #1
 8008b16:	4618      	mov	r0, r3
 8008b18:	f001 fb7a 	bl	800a210 <RCCEx_PLL2_Config>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b20:	e00c      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3324      	adds	r3, #36	; 0x24
 8008b26:	2101      	movs	r1, #1
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f001 fc23 	bl	800a374 <RCCEx_PLL3_Config>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b32:	e003      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	75fb      	strb	r3, [r7, #23]
      break;
 8008b38:	e000      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8008b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b3c:	7dfb      	ldrb	r3, [r7, #23]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10a      	bne.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b42:	4b1e      	ldr	r3, [pc, #120]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b46:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b50:	491a      	ldr	r1, [pc, #104]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b52:	4313      	orrs	r3, r2
 8008b54:	654b      	str	r3, [r1, #84]	; 0x54
 8008b56:	e001      	b.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
 8008b5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0302 	and.w	r3, r3, #2
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d03f      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b6c:	2b05      	cmp	r3, #5
 8008b6e:	d821      	bhi.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8008b70:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b76:	bf00      	nop
 8008b78:	08008bc9 	.word	0x08008bc9
 8008b7c:	08008b91 	.word	0x08008b91
 8008b80:	08008ba3 	.word	0x08008ba3
 8008b84:	08008bc9 	.word	0x08008bc9
 8008b88:	08008bc9 	.word	0x08008bc9
 8008b8c:	08008bc9 	.word	0x08008bc9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	3304      	adds	r3, #4
 8008b94:	2101      	movs	r1, #1
 8008b96:	4618      	mov	r0, r3
 8008b98:	f001 fb3a 	bl	800a210 <RCCEx_PLL2_Config>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008ba0:	e013      	b.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	3324      	adds	r3, #36	; 0x24
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f001 fbe3 	bl	800a374 <RCCEx_PLL3_Config>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008bb2:	e00a      	b.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8008bb8:	e007      	b.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8008bba:	bf00      	nop
 8008bbc:	58024400 	.word	0x58024400
 8008bc0:	58024800 	.word	0x58024800
 8008bc4:	00ffffcf 	.word	0x00ffffcf
      break;
 8008bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d109      	bne.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008bd0:	4b9f      	ldr	r3, [pc, #636]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bd4:	f023 0207 	bic.w	r2, r3, #7
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bdc:	499c      	ldr	r1, [pc, #624]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008bde:	4313      	orrs	r3, r2
 8008be0:	654b      	str	r3, [r1, #84]	; 0x54
 8008be2:	e001      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0304 	and.w	r3, r3, #4
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d039      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008bfa:	2b05      	cmp	r3, #5
 8008bfc:	d820      	bhi.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8008bfe:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8008c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c04:	08008c47 	.word	0x08008c47
 8008c08:	08008c1d 	.word	0x08008c1d
 8008c0c:	08008c2f 	.word	0x08008c2f
 8008c10:	08008c47 	.word	0x08008c47
 8008c14:	08008c47 	.word	0x08008c47
 8008c18:	08008c47 	.word	0x08008c47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3304      	adds	r3, #4
 8008c20:	2101      	movs	r1, #1
 8008c22:	4618      	mov	r0, r3
 8008c24:	f001 faf4 	bl	800a210 <RCCEx_PLL2_Config>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008c2c:	e00c      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	3324      	adds	r3, #36	; 0x24
 8008c32:	2101      	movs	r1, #1
 8008c34:	4618      	mov	r0, r3
 8008c36:	f001 fb9d 	bl	800a374 <RCCEx_PLL3_Config>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008c3e:	e003      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	75fb      	strb	r3, [r7, #23]
      break;
 8008c44:	e000      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8008c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10a      	bne.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c4e:	4b80      	ldr	r3, [pc, #512]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c52:	f023 0207 	bic.w	r2, r3, #7
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c5c:	497c      	ldr	r1, [pc, #496]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	658b      	str	r3, [r1, #88]	; 0x58
 8008c62:	e001      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c64:	7dfb      	ldrb	r3, [r7, #23]
 8008c66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0320 	and.w	r3, r3, #32
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d04b      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c7e:	d02e      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x962>
 8008c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c84:	d828      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c8a:	d02a      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c90:	d822      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008c92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c96:	d026      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008c98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c9c:	d81c      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ca2:	d010      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8008ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ca8:	d816      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d01d      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cb2:	d111      	bne.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	2100      	movs	r1, #0
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f001 faa8 	bl	800a210 <RCCEx_PLL2_Config>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008cc4:	e012      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3324      	adds	r3, #36	; 0x24
 8008cca:	2102      	movs	r1, #2
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f001 fb51 	bl	800a374 <RCCEx_PLL3_Config>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008cd6:	e009      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	75fb      	strb	r3, [r7, #23]
      break;
 8008cdc:	e006      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008cde:	bf00      	nop
 8008ce0:	e004      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008ce2:	bf00      	nop
 8008ce4:	e002      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008ce6:	bf00      	nop
 8008ce8:	e000      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cec:	7dfb      	ldrb	r3, [r7, #23]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10a      	bne.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cf2:	4b57      	ldr	r3, [pc, #348]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d00:	4953      	ldr	r1, [pc, #332]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	654b      	str	r3, [r1, #84]	; 0x54
 8008d06:	e001      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
 8008d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d04b      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d22:	d02e      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8008d24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d28:	d828      	bhi.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2e:	d02a      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d34:	d822      	bhi.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008d36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d3a:	d026      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008d3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d40:	d81c      	bhi.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d46:	d010      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8008d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d4c:	d816      	bhi.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d01d      	beq.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d56:	d111      	bne.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f001 fa56 	bl	800a210 <RCCEx_PLL2_Config>
 8008d64:	4603      	mov	r3, r0
 8008d66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d68:	e012      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3324      	adds	r3, #36	; 0x24
 8008d6e:	2102      	movs	r1, #2
 8008d70:	4618      	mov	r0, r3
 8008d72:	f001 faff 	bl	800a374 <RCCEx_PLL3_Config>
 8008d76:	4603      	mov	r3, r0
 8008d78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d7a:	e009      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d80:	e006      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008d82:	bf00      	nop
 8008d84:	e004      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008d86:	bf00      	nop
 8008d88:	e002      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008d8a:	bf00      	nop
 8008d8c:	e000      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10a      	bne.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d96:	4b2e      	ldr	r3, [pc, #184]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008da4:	492a      	ldr	r1, [pc, #168]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	658b      	str	r3, [r1, #88]	; 0x58
 8008daa:	e001      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
 8008dae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d04d      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008dc2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008dc6:	d02e      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8008dc8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008dcc:	d828      	bhi.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dd2:	d02a      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dd8:	d822      	bhi.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008dda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008dde:	d026      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008de0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008de4:	d81c      	bhi.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dea:	d010      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8008dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008df0:	d816      	bhi.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d01d      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dfa:	d111      	bne.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	3304      	adds	r3, #4
 8008e00:	2100      	movs	r1, #0
 8008e02:	4618      	mov	r0, r3
 8008e04:	f001 fa04 	bl	800a210 <RCCEx_PLL2_Config>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008e0c:	e012      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	3324      	adds	r3, #36	; 0x24
 8008e12:	2102      	movs	r1, #2
 8008e14:	4618      	mov	r0, r3
 8008e16:	f001 faad 	bl	800a374 <RCCEx_PLL3_Config>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008e1e:	e009      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	75fb      	strb	r3, [r7, #23]
      break;
 8008e24:	e006      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008e26:	bf00      	nop
 8008e28:	e004      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008e2a:	bf00      	nop
 8008e2c:	e002      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008e2e:	bf00      	nop
 8008e30:	e000      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10c      	bne.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008e3a:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e48:	4901      	ldr	r1, [pc, #4]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	658b      	str	r3, [r1, #88]	; 0x58
 8008e4e:	e003      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008e50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
 8008e56:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0308 	and.w	r3, r3, #8
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d01a      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e6e:	d10a      	bne.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3324      	adds	r3, #36	; 0x24
 8008e74:	2102      	movs	r1, #2
 8008e76:	4618      	mov	r0, r3
 8008e78:	f001 fa7c 	bl	800a374 <RCCEx_PLL3_Config>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008e86:	4b8c      	ldr	r3, [pc, #560]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e94:	4988      	ldr	r1, [pc, #544]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0310 	and.w	r3, r3, #16
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d01a      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eb0:	d10a      	bne.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	3324      	adds	r3, #36	; 0x24
 8008eb6:	2102      	movs	r1, #2
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f001 fa5b 	bl	800a374 <RCCEx_PLL3_Config>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ec8:	4b7b      	ldr	r3, [pc, #492]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ed6:	4978      	ldr	r1, [pc, #480]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d034      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ef2:	d01d      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8008ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ef8:	d817      	bhi.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8008efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f02:	d009      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008f04:	e011      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	3304      	adds	r3, #4
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f001 f97f 	bl	800a210 <RCCEx_PLL2_Config>
 8008f12:	4603      	mov	r3, r0
 8008f14:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008f16:	e00c      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3324      	adds	r3, #36	; 0x24
 8008f1c:	2102      	movs	r1, #2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f001 fa28 	bl	800a374 <RCCEx_PLL3_Config>
 8008f24:	4603      	mov	r3, r0
 8008f26:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008f28:	e003      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f2e:	e000      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8008f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10a      	bne.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f38:	4b5f      	ldr	r3, [pc, #380]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f46:	495c      	ldr	r1, [pc, #368]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	658b      	str	r3, [r1, #88]	; 0x58
 8008f4c:	e001      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d033      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f68:	d01c      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008f6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f6e:	d816      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f74:	d003      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8008f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f7a:	d007      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008f7c:	e00f      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f7e:	4b4e      	ldr	r3, [pc, #312]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f82:	4a4d      	ldr	r2, [pc, #308]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f8a:	e00c      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3324      	adds	r3, #36	; 0x24
 8008f90:	2101      	movs	r1, #1
 8008f92:	4618      	mov	r0, r3
 8008f94:	f001 f9ee 	bl	800a374 <RCCEx_PLL3_Config>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f9c:	e003      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8008fa2:	e000      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fa6:	7dfb      	ldrb	r3, [r7, #23]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10a      	bne.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008fac:	4b42      	ldr	r3, [pc, #264]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fba:	493f      	ldr	r1, [pc, #252]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	654b      	str	r3, [r1, #84]	; 0x54
 8008fc0:	e001      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d029      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8008fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fde:	d007      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008fe0:	e00f      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fe2:	4b35      	ldr	r3, [pc, #212]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe6:	4a34      	ldr	r2, [pc, #208]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008fee:	e00b      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	2102      	movs	r1, #2
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f001 f90a 	bl	800a210 <RCCEx_PLL2_Config>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009000:	e002      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	75fb      	strb	r3, [r7, #23]
      break;
 8009006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009008:	7dfb      	ldrb	r3, [r7, #23]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d109      	bne.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800900e:	4b2a      	ldr	r3, [pc, #168]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009012:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800901a:	4927      	ldr	r1, [pc, #156]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800901c:	4313      	orrs	r3, r2
 800901e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009020:	e001      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009022:	7dfb      	ldrb	r3, [r7, #23]
 8009024:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00a      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	3324      	adds	r3, #36	; 0x24
 8009036:	2102      	movs	r1, #2
 8009038:	4618      	mov	r0, r3
 800903a:	f001 f99b 	bl	800a374 <RCCEx_PLL3_Config>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d035      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800905a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800905e:	d017      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009060:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009064:	d811      	bhi.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800906a:	d013      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800906c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009070:	d80b      	bhi.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009072:	2b00      	cmp	r3, #0
 8009074:	d010      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8009076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800907a:	d106      	bne.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800907c:	4b0e      	ldr	r3, [pc, #56]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009080:	4a0d      	ldr	r2, [pc, #52]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009086:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009088:	e007      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	75fb      	strb	r3, [r7, #23]
      break;
 800908e:	e004      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009090:	bf00      	nop
 8009092:	e002      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009094:	bf00      	nop
 8009096:	e000      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800909a:	7dfb      	ldrb	r3, [r7, #23]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10d      	bne.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80090a0:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80090a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ae:	4902      	ldr	r1, [pc, #8]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	654b      	str	r3, [r1, #84]	; 0x54
 80090b4:	e004      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80090b6:	bf00      	nop
 80090b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
 80090be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d008      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80090cc:	4b30      	ldr	r3, [pc, #192]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80090ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090d8:	492d      	ldr	r1, [pc, #180]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d008      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80090ea:	4b29      	ldr	r3, [pc, #164]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80090ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090f6:	4926      	ldr	r1, [pc, #152]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80090f8:	4313      	orrs	r3, r2
 80090fa:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009104:	2b00      	cmp	r3, #0
 8009106:	d008      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009108:	4b21      	ldr	r3, [pc, #132]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800910a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800910c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009114:	491e      	ldr	r1, [pc, #120]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009116:	4313      	orrs	r3, r2
 8009118:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00d      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009126:	4b1a      	ldr	r3, [pc, #104]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	4a19      	ldr	r2, [pc, #100]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800912c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009130:	6113      	str	r3, [r2, #16]
 8009132:	4b17      	ldr	r3, [pc, #92]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009134:	691a      	ldr	r2, [r3, #16]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800913c:	4914      	ldr	r1, [pc, #80]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800913e:	4313      	orrs	r3, r2
 8009140:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	da08      	bge.n	800915c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800914a:	4b11      	ldr	r3, [pc, #68]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800914c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800914e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009156:	490e      	ldr	r1, [pc, #56]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009158:	4313      	orrs	r3, r2
 800915a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d009      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009168:	4b09      	ldr	r3, [pc, #36]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800916a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800916c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009176:	4906      	ldr	r1, [pc, #24]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009178:	4313      	orrs	r3, r2
 800917a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800917c:	7dbb      	ldrb	r3, [r7, #22]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	e000      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
}
 8009188:	4618      	mov	r0, r3
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	58024400 	.word	0x58024400

08009194 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b090      	sub	sp, #64	; 0x40
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091a2:	f040 8089 	bne.w	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80091a6:	4b91      	ldr	r3, [pc, #580]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80091a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091aa:	f003 0307 	and.w	r3, r3, #7
 80091ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80091b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	d87d      	bhi.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80091b6:	a201      	add	r2, pc, #4	; (adr r2, 80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80091b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091bc:	080091d1 	.word	0x080091d1
 80091c0:	080091f5 	.word	0x080091f5
 80091c4:	08009219 	.word	0x08009219
 80091c8:	080092ad 	.word	0x080092ad
 80091cc:	0800923d 	.word	0x0800923d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091d0:	4b86      	ldr	r3, [pc, #536]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091dc:	d107      	bne.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 fec2 	bl	8009f6c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80091e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091ec:	e3f4      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091f2:	e3f1      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091f4:	4b7d      	ldr	r3, [pc, #500]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009200:	d107      	bne.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009202:	f107 0318 	add.w	r3, r7, #24
 8009206:	4618      	mov	r0, r3
 8009208:	f000 fc08 	bl	8009a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009210:	e3e2      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009216:	e3df      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009218:	4b74      	ldr	r3, [pc, #464]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009224:	d107      	bne.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009226:	f107 030c 	add.w	r3, r7, #12
 800922a:	4618      	mov	r0, r3
 800922c:	f000 fd4a 	bl	8009cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009234:	e3d0      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009236:	2300      	movs	r3, #0
 8009238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800923a:	e3cd      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800923c:	4b6b      	ldr	r3, [pc, #428]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800923e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009240:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009244:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009246:	4b69      	ldr	r3, [pc, #420]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 0304 	and.w	r3, r3, #4
 800924e:	2b04      	cmp	r3, #4
 8009250:	d10c      	bne.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8009252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009254:	2b00      	cmp	r3, #0
 8009256:	d109      	bne.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009258:	4b64      	ldr	r3, [pc, #400]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	08db      	lsrs	r3, r3, #3
 800925e:	f003 0303 	and.w	r3, r3, #3
 8009262:	4a63      	ldr	r2, [pc, #396]	; (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009264:	fa22 f303 	lsr.w	r3, r2, r3
 8009268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800926a:	e01e      	b.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800926c:	4b5f      	ldr	r3, [pc, #380]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009278:	d106      	bne.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800927a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800927c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009280:	d102      	bne.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009282:	4b5c      	ldr	r3, [pc, #368]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009286:	e010      	b.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009288:	4b58      	ldr	r3, [pc, #352]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009290:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009294:	d106      	bne.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800929c:	d102      	bne.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800929e:	4b56      	ldr	r3, [pc, #344]	; (80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80092a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a2:	e002      	b.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80092a4:	2300      	movs	r3, #0
 80092a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80092a8:	e396      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80092aa:	e395      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80092ac:	4b53      	ldr	r3, [pc, #332]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80092ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092b0:	e392      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092b6:	e38f      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092be:	f040 809f 	bne.w	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80092c2:	4b4a      	ldr	r3, [pc, #296]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80092c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092c6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80092ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80092cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d2:	d04d      	beq.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80092d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092da:	f200 8084 	bhi.w	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80092de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e0:	2bc0      	cmp	r3, #192	; 0xc0
 80092e2:	d07d      	beq.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	2bc0      	cmp	r3, #192	; 0xc0
 80092e8:	d87d      	bhi.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ec:	2b80      	cmp	r3, #128	; 0x80
 80092ee:	d02d      	beq.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80092f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f2:	2b80      	cmp	r3, #128	; 0x80
 80092f4:	d877      	bhi.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80092f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d003      	beq.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80092fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fe:	2b40      	cmp	r3, #64	; 0x40
 8009300:	d012      	beq.n	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8009302:	e070      	b.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009304:	4b39      	ldr	r3, [pc, #228]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800930c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009310:	d107      	bne.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009316:	4618      	mov	r0, r3
 8009318:	f000 fe28 	bl	8009f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009320:	e35a      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009322:	2300      	movs	r3, #0
 8009324:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009326:	e357      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009328:	4b30      	ldr	r3, [pc, #192]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009334:	d107      	bne.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009336:	f107 0318 	add.w	r3, r7, #24
 800933a:	4618      	mov	r0, r3
 800933c:	f000 fb6e 	bl	8009a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009344:	e348      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800934a:	e345      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800934c:	4b27      	ldr	r3, [pc, #156]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009358:	d107      	bne.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800935a:	f107 030c 	add.w	r3, r7, #12
 800935e:	4618      	mov	r0, r3
 8009360:	f000 fcb0 	bl	8009cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009368:	e336      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800936e:	e333      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009370:	4b1e      	ldr	r3, [pc, #120]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009374:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009378:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800937a:	4b1c      	ldr	r3, [pc, #112]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0304 	and.w	r3, r3, #4
 8009382:	2b04      	cmp	r3, #4
 8009384:	d10c      	bne.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8009386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009388:	2b00      	cmp	r3, #0
 800938a:	d109      	bne.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800938c:	4b17      	ldr	r3, [pc, #92]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	08db      	lsrs	r3, r3, #3
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	4a16      	ldr	r2, [pc, #88]	; (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009398:	fa22 f303 	lsr.w	r3, r2, r3
 800939c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800939e:	e01e      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093a0:	4b12      	ldr	r3, [pc, #72]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ac:	d106      	bne.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80093ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093b4:	d102      	bne.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80093b6:	4b0f      	ldr	r3, [pc, #60]	; (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80093b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ba:	e010      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093bc:	4b0b      	ldr	r3, [pc, #44]	; (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093c8:	d106      	bne.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80093ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093d0:	d102      	bne.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80093d2:	4b09      	ldr	r3, [pc, #36]	; (80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80093d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093d6:	e002      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80093dc:	e2fc      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80093de:	e2fb      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80093e0:	4b06      	ldr	r3, [pc, #24]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80093e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093e4:	e2f8      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80093e6:	2300      	movs	r3, #0
 80093e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093ea:	e2f5      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80093ec:	58024400 	.word	0x58024400
 80093f0:	03d09000 	.word	0x03d09000
 80093f4:	003d0900 	.word	0x003d0900
 80093f8:	016e3600 	.word	0x016e3600
 80093fc:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009406:	f040 809c 	bne.w	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 800940a:	4b9d      	ldr	r3, [pc, #628]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800940c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800940e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8009412:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800941a:	d054      	beq.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800941c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009422:	f200 808b 	bhi.w	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800942c:	f000 8083 	beq.w	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009432:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009436:	f200 8081 	bhi.w	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009440:	d02f      	beq.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8009442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009448:	d878      	bhi.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	2b00      	cmp	r3, #0
 800944e:	d004      	beq.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8009450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009456:	d012      	beq.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8009458:	e070      	b.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800945a:	4b89      	ldr	r3, [pc, #548]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009462:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009466:	d107      	bne.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800946c:	4618      	mov	r0, r3
 800946e:	f000 fd7d 	bl	8009f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009474:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009476:	e2af      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800947c:	e2ac      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800947e:	4b80      	ldr	r3, [pc, #512]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009486:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800948a:	d107      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800948c:	f107 0318 	add.w	r3, r7, #24
 8009490:	4618      	mov	r0, r3
 8009492:	f000 fac3 	bl	8009a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800949a:	e29d      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800949c:	2300      	movs	r3, #0
 800949e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094a0:	e29a      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094a2:	4b77      	ldr	r3, [pc, #476]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094ae:	d107      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094b0:	f107 030c 	add.w	r3, r7, #12
 80094b4:	4618      	mov	r0, r3
 80094b6:	f000 fc05 	bl	8009cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094be:	e28b      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80094c0:	2300      	movs	r3, #0
 80094c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094c4:	e288      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80094c6:	4b6e      	ldr	r3, [pc, #440]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80094c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094ce:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094d0:	4b6b      	ldr	r3, [pc, #428]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0304 	and.w	r3, r3, #4
 80094d8:	2b04      	cmp	r3, #4
 80094da:	d10c      	bne.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 80094dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d109      	bne.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094e2:	4b67      	ldr	r3, [pc, #412]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	08db      	lsrs	r3, r3, #3
 80094e8:	f003 0303 	and.w	r3, r3, #3
 80094ec:	4a65      	ldr	r2, [pc, #404]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 80094ee:	fa22 f303 	lsr.w	r3, r2, r3
 80094f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094f4:	e01e      	b.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094f6:	4b62      	ldr	r3, [pc, #392]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009502:	d106      	bne.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8009504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800950a:	d102      	bne.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800950c:	4b5e      	ldr	r3, [pc, #376]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800950e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009510:	e010      	b.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009512:	4b5b      	ldr	r3, [pc, #364]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800951a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800951e:	d106      	bne.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8009520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009526:	d102      	bne.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009528:	4b58      	ldr	r3, [pc, #352]	; (800968c <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 800952a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800952c:	e002      	b.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800952e:	2300      	movs	r3, #0
 8009530:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8009532:	e251      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009534:	e250      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009536:	4b56      	ldr	r3, [pc, #344]	; (8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009538:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800953a:	e24d      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009540:	e24a      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009548:	f040 80a7 	bne.w	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800954c:	4b4c      	ldr	r3, [pc, #304]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800954e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009550:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009554:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800955c:	d055      	beq.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009564:	f200 8096 	bhi.w	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8009568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800956e:	f000 8084 	beq.w	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8009572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009574:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009578:	f200 808c 	bhi.w	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 800957c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009582:	d030      	beq.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8009584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800958a:	f200 8083 	bhi.w	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 800958e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009590:	2b00      	cmp	r3, #0
 8009592:	d004      	beq.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8009594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800959a:	d012      	beq.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 800959c:	e07a      	b.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800959e:	4b38      	ldr	r3, [pc, #224]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095aa:	d107      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 fcdb 	bl	8009f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095ba:	e20d      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095c0:	e20a      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095c2:	4b2f      	ldr	r3, [pc, #188]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095ce:	d107      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095d0:	f107 0318 	add.w	r3, r7, #24
 80095d4:	4618      	mov	r0, r3
 80095d6:	f000 fa21 	bl	8009a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095de:	e1fb      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095e4:	e1f8      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095e6:	4b26      	ldr	r3, [pc, #152]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095f2:	d107      	bne.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095f4:	f107 030c 	add.w	r3, r7, #12
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 fb63 	bl	8009cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009602:	e1e9      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009604:	2300      	movs	r3, #0
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009608:	e1e6      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800960a:	4b1d      	ldr	r3, [pc, #116]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800960c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800960e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009612:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009614:	4b1a      	ldr	r3, [pc, #104]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0304 	and.w	r3, r3, #4
 800961c:	2b04      	cmp	r3, #4
 800961e:	d10c      	bne.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8009620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009622:	2b00      	cmp	r3, #0
 8009624:	d109      	bne.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009626:	4b16      	ldr	r3, [pc, #88]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	08db      	lsrs	r3, r3, #3
 800962c:	f003 0303 	and.w	r3, r3, #3
 8009630:	4a14      	ldr	r2, [pc, #80]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8009632:	fa22 f303 	lsr.w	r3, r2, r3
 8009636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009638:	e01e      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800963a:	4b11      	ldr	r3, [pc, #68]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009646:	d106      	bne.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8009648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800964a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800964e:	d102      	bne.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009650:	4b0d      	ldr	r3, [pc, #52]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8009652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009654:	e010      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009656:	4b0a      	ldr	r3, [pc, #40]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800965e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009662:	d106      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800966a:	d102      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800966c:	4b07      	ldr	r3, [pc, #28]	; (800968c <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 800966e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009670:	e002      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009676:	e1af      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009678:	e1ae      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800967a:	4b05      	ldr	r3, [pc, #20]	; (8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800967c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800967e:	e1ab      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009680:	58024400 	.word	0x58024400
 8009684:	03d09000 	.word	0x03d09000
 8009688:	003d0900 	.word	0x003d0900
 800968c:	016e3600 	.word	0x016e3600
 8009690:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8009694:	2300      	movs	r3, #0
 8009696:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009698:	e19e      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80096a0:	d173      	bne.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80096a2:	4b9d      	ldr	r3, [pc, #628]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80096a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80096aa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80096ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096b2:	d02f      	beq.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80096b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096ba:	d863      	bhi.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80096bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d004      	beq.n	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80096c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096c8:	d012      	beq.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 80096ca:	e05b      	b.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096cc:	4b92      	ldr	r3, [pc, #584]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096d8:	d107      	bne.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096da:	f107 0318 	add.w	r3, r7, #24
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 f99c 	bl	8009a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096e8:	e176      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80096ea:	2300      	movs	r3, #0
 80096ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096ee:	e173      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096f0:	4b89      	ldr	r3, [pc, #548]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096fc:	d107      	bne.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096fe:	f107 030c 	add.w	r3, r7, #12
 8009702:	4618      	mov	r0, r3
 8009704:	f000 fade 	bl	8009cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800970c:	e164      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800970e:	2300      	movs	r3, #0
 8009710:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009712:	e161      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009714:	4b80      	ldr	r3, [pc, #512]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009718:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800971c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800971e:	4b7e      	ldr	r3, [pc, #504]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0304 	and.w	r3, r3, #4
 8009726:	2b04      	cmp	r3, #4
 8009728:	d10c      	bne.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 800972a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800972c:	2b00      	cmp	r3, #0
 800972e:	d109      	bne.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009730:	4b79      	ldr	r3, [pc, #484]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	08db      	lsrs	r3, r3, #3
 8009736:	f003 0303 	and.w	r3, r3, #3
 800973a:	4a78      	ldr	r2, [pc, #480]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800973c:	fa22 f303 	lsr.w	r3, r2, r3
 8009740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009742:	e01e      	b.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009744:	4b74      	ldr	r3, [pc, #464]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800974c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009750:	d106      	bne.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009758:	d102      	bne.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800975a:	4b71      	ldr	r3, [pc, #452]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800975c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800975e:	e010      	b.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009760:	4b6d      	ldr	r3, [pc, #436]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009768:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800976c:	d106      	bne.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800976e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009774:	d102      	bne.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009776:	4b6b      	ldr	r3, [pc, #428]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800977a:	e002      	b.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800977c:	2300      	movs	r3, #0
 800977e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009780:	e12a      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009782:	e129      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8009784:	2300      	movs	r3, #0
 8009786:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009788:	e126      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009790:	d133      	bne.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009792:	4b61      	ldr	r3, [pc, #388]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800979a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d004      	beq.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80097a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097a8:	d012      	beq.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80097aa:	e023      	b.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80097ac:	4b5a      	ldr	r3, [pc, #360]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097b8:	d107      	bne.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 fbd4 	bl	8009f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80097c8:	e106      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80097ca:	2300      	movs	r3, #0
 80097cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097ce:	e103      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097d0:	4b51      	ldr	r3, [pc, #324]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097dc:	d107      	bne.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097de:	f107 0318 	add.w	r3, r7, #24
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 f91a 	bl	8009a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80097e8:	6a3b      	ldr	r3, [r7, #32]
 80097ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80097ec:	e0f4      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80097ee:	2300      	movs	r3, #0
 80097f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097f2:	e0f1      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80097f4:	2300      	movs	r3, #0
 80097f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097f8:	e0ee      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009800:	f040 809b 	bne.w	800993a <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009804:	4b44      	ldr	r3, [pc, #272]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009808:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800980c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800980e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009810:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8009814:	f000 808b 	beq.w	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800981e:	f200 8089 	bhi.w	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009828:	d06c      	beq.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800982a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009830:	f200 8080 	bhi.w	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800983a:	d056      	beq.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 800983c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009842:	d877      	bhi.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800984a:	d03b      	beq.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 800984c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009852:	d86f      	bhi.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800985a:	d021      	beq.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 800985c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009862:	d867      	bhi.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009866:	2b00      	cmp	r3, #0
 8009868:	d004      	beq.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800986a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009870:	d004      	beq.n	800987c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8009872:	e05f      	b.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009874:	f000 f8bc 	bl	80099f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009878:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800987a:	e0ad      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800987c:	4b26      	ldr	r3, [pc, #152]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009888:	d107      	bne.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800988a:	f107 0318 	add.w	r3, r7, #24
 800988e:	4618      	mov	r0, r3
 8009890:	f000 f8c4 	bl	8009a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009898:	e09e      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800989a:	2300      	movs	r3, #0
 800989c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800989e:	e09b      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098a0:	4b1d      	ldr	r3, [pc, #116]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098ac:	d107      	bne.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098ae:	f107 030c 	add.w	r3, r7, #12
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 fa06 	bl	8009cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80098bc:	e08c      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80098be:	2300      	movs	r3, #0
 80098c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098c2:	e089      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098c4:	4b14      	ldr	r3, [pc, #80]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b04      	cmp	r3, #4
 80098ce:	d109      	bne.n	80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098d0:	4b11      	ldr	r3, [pc, #68]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	08db      	lsrs	r3, r3, #3
 80098d6:	f003 0303 	and.w	r3, r3, #3
 80098da:	4a10      	ldr	r2, [pc, #64]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80098dc:	fa22 f303 	lsr.w	r3, r2, r3
 80098e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80098e2:	e079      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098e8:	e076      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80098ea:	4b0b      	ldr	r3, [pc, #44]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098f6:	d102      	bne.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 80098f8:	4b09      	ldr	r3, [pc, #36]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80098fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098fc:	e06c      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009902:	e069      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009904:	4b04      	ldr	r3, [pc, #16]	; (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800990c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009910:	d10a      	bne.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 8009912:	4b04      	ldr	r3, [pc, #16]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009914:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009916:	e05f      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009918:	58024400 	.word	0x58024400
 800991c:	03d09000 	.word	0x03d09000
 8009920:	003d0900 	.word	0x003d0900
 8009924:	016e3600 	.word	0x016e3600
          frequency = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800992c:	e054      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800992e:	4b2d      	ldr	r3, [pc, #180]	; (80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009932:	e051      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009934:	2300      	movs	r3, #0
 8009936:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009938:	e04e      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009940:	d148      	bne.n	80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009942:	4b29      	ldr	r3, [pc, #164]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009946:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800994a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800994c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009952:	d02a      	beq.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009956:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800995a:	d838      	bhi.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800995c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995e:	2b00      	cmp	r3, #0
 8009960:	d004      	beq.n	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8009962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009964:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009968:	d00d      	beq.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800996a:	e030      	b.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800996c:	4b1e      	ldr	r3, [pc, #120]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009978:	d102      	bne.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 800997a:	4b1c      	ldr	r3, [pc, #112]	; (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800997c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800997e:	e02b      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009980:	2300      	movs	r3, #0
 8009982:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009984:	e028      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009986:	4b18      	ldr	r3, [pc, #96]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800998e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009992:	d107      	bne.n	80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009998:	4618      	mov	r0, r3
 800999a:	f000 fae7 	bl	8009f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800999e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80099a2:	e019      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80099a4:	2300      	movs	r3, #0
 80099a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099a8:	e016      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099aa:	4b0f      	ldr	r3, [pc, #60]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099b6:	d107      	bne.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099b8:	f107 0318 	add.w	r3, r7, #24
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 f82d 	bl	8009a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80099c6:	e007      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099cc:	e004      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 80099ce:	2300      	movs	r3, #0
 80099d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099d2:	e001      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80099d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3740      	adds	r7, #64	; 0x40
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	00bb8000 	.word	0x00bb8000
 80099e8:	58024400 	.word	0x58024400
 80099ec:	016e3600 	.word	0x016e3600

080099f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80099f4:	f7fe fc66 	bl	80082c4 <HAL_RCC_GetHCLKFreq>
 80099f8:	4602      	mov	r2, r0
 80099fa:	4b06      	ldr	r3, [pc, #24]	; (8009a14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80099fc:	6a1b      	ldr	r3, [r3, #32]
 80099fe:	091b      	lsrs	r3, r3, #4
 8009a00:	f003 0307 	and.w	r3, r3, #7
 8009a04:	4904      	ldr	r1, [pc, #16]	; (8009a18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009a06:	5ccb      	ldrb	r3, [r1, r3]
 8009a08:	f003 031f 	and.w	r3, r3, #31
 8009a0c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	58024400 	.word	0x58024400
 8009a18:	08018124 	.word	0x08018124

08009a1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b089      	sub	sp, #36	; 0x24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a24:	4ba1      	ldr	r3, [pc, #644]	; (8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a28:	f003 0303 	and.w	r3, r3, #3
 8009a2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009a2e:	4b9f      	ldr	r3, [pc, #636]	; (8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a32:	0b1b      	lsrs	r3, r3, #12
 8009a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009a3a:	4b9c      	ldr	r3, [pc, #624]	; (8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3e:	091b      	lsrs	r3, r3, #4
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009a46:	4b99      	ldr	r3, [pc, #612]	; (8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a4a:	08db      	lsrs	r3, r3, #3
 8009a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	fb02 f303 	mul.w	r3, r2, r3
 8009a56:	ee07 3a90 	vmov	s15, r3
 8009a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 8111 	beq.w	8009c8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	f000 8083 	beq.w	8009b78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	f200 80a1 	bhi.w	8009bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d003      	beq.n	8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d056      	beq.n	8009b34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009a86:	e099      	b.n	8009bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a88:	4b88      	ldr	r3, [pc, #544]	; (8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0320 	and.w	r3, r3, #32
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d02d      	beq.n	8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a94:	4b85      	ldr	r3, [pc, #532]	; (8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	08db      	lsrs	r3, r3, #3
 8009a9a:	f003 0303 	and.w	r3, r3, #3
 8009a9e:	4a84      	ldr	r2, [pc, #528]	; (8009cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	ee07 3a90 	vmov	s15, r3
 8009aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	ee07 3a90 	vmov	s15, r3
 8009ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009abe:	4b7b      	ldr	r3, [pc, #492]	; (8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac6:	ee07 3a90 	vmov	s15, r3
 8009aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ad2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009aee:	e087      	b.n	8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009afa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b02:	4b6a      	ldr	r3, [pc, #424]	; (8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b0a:	ee07 3a90 	vmov	s15, r3
 8009b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b16:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b32:	e065      	b.n	8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	ee07 3a90 	vmov	s15, r3
 8009b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b46:	4b59      	ldr	r3, [pc, #356]	; (8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4e:	ee07 3a90 	vmov	s15, r3
 8009b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b76:	e043      	b.n	8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	ee07 3a90 	vmov	s15, r3
 8009b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b8a:	4b48      	ldr	r3, [pc, #288]	; (8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b92:	ee07 3a90 	vmov	s15, r3
 8009b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bba:	e021      	b.n	8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	ee07 3a90 	vmov	s15, r3
 8009bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bce:	4b37      	ldr	r3, [pc, #220]	; (8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd6:	ee07 3a90 	vmov	s15, r3
 8009bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8009be2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bfe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009c00:	4b2a      	ldr	r3, [pc, #168]	; (8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c04:	0a5b      	lsrs	r3, r3, #9
 8009c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c0a:	ee07 3a90 	vmov	s15, r3
 8009c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c26:	ee17 2a90 	vmov	r2, s15
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009c2e:	4b1f      	ldr	r3, [pc, #124]	; (8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c32:	0c1b      	lsrs	r3, r3, #16
 8009c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c38:	ee07 3a90 	vmov	s15, r3
 8009c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c48:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c54:	ee17 2a90 	vmov	r2, s15
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009c5c:	4b13      	ldr	r3, [pc, #76]	; (8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c60:	0e1b      	lsrs	r3, r3, #24
 8009c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c66:	ee07 3a90 	vmov	s15, r3
 8009c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c82:	ee17 2a90 	vmov	r2, s15
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c8a:	e008      	b.n	8009c9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	609a      	str	r2, [r3, #8]
}
 8009c9e:	bf00      	nop
 8009ca0:	3724      	adds	r7, #36	; 0x24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	58024400 	.word	0x58024400
 8009cb0:	03d09000 	.word	0x03d09000
 8009cb4:	46000000 	.word	0x46000000
 8009cb8:	4c742400 	.word	0x4c742400
 8009cbc:	4a742400 	.word	0x4a742400
 8009cc0:	4bb71b00 	.word	0x4bb71b00

08009cc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b089      	sub	sp, #36	; 0x24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ccc:	4ba1      	ldr	r3, [pc, #644]	; (8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd0:	f003 0303 	and.w	r3, r3, #3
 8009cd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009cd6:	4b9f      	ldr	r3, [pc, #636]	; (8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cda:	0d1b      	lsrs	r3, r3, #20
 8009cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ce0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009ce2:	4b9c      	ldr	r3, [pc, #624]	; (8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce6:	0a1b      	lsrs	r3, r3, #8
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009cee:	4b99      	ldr	r3, [pc, #612]	; (8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cf2:	08db      	lsrs	r3, r3, #3
 8009cf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cf8:	693a      	ldr	r2, [r7, #16]
 8009cfa:	fb02 f303 	mul.w	r3, r2, r3
 8009cfe:	ee07 3a90 	vmov	s15, r3
 8009d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 8111 	beq.w	8009f34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	f000 8083 	beq.w	8009e20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	f200 80a1 	bhi.w	8009e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d003      	beq.n	8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d056      	beq.n	8009ddc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009d2e:	e099      	b.n	8009e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d30:	4b88      	ldr	r3, [pc, #544]	; (8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 0320 	and.w	r3, r3, #32
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d02d      	beq.n	8009d98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d3c:	4b85      	ldr	r3, [pc, #532]	; (8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	08db      	lsrs	r3, r3, #3
 8009d42:	f003 0303 	and.w	r3, r3, #3
 8009d46:	4a84      	ldr	r2, [pc, #528]	; (8009f58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009d48:	fa22 f303 	lsr.w	r3, r2, r3
 8009d4c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	ee07 3a90 	vmov	s15, r3
 8009d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	ee07 3a90 	vmov	s15, r3
 8009d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d66:	4b7b      	ldr	r3, [pc, #492]	; (8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d6e:	ee07 3a90 	vmov	s15, r3
 8009d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009d96:	e087      	b.n	8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	ee07 3a90 	vmov	s15, r3
 8009d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009da2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009daa:	4b6a      	ldr	r3, [pc, #424]	; (8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009db2:	ee07 3a90 	vmov	s15, r3
 8009db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dda:	e065      	b.n	8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	ee07 3a90 	vmov	s15, r3
 8009de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009de6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dee:	4b59      	ldr	r3, [pc, #356]	; (8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009df6:	ee07 3a90 	vmov	s15, r3
 8009dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e1e:	e043      	b.n	8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	ee07 3a90 	vmov	s15, r3
 8009e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e32:	4b48      	ldr	r3, [pc, #288]	; (8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e3a:	ee07 3a90 	vmov	s15, r3
 8009e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e62:	e021      	b.n	8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	ee07 3a90 	vmov	s15, r3
 8009e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e76:	4b37      	ldr	r3, [pc, #220]	; (8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e7e:	ee07 3a90 	vmov	s15, r3
 8009e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ea2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ea6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009ea8:	4b2a      	ldr	r3, [pc, #168]	; (8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eac:	0a5b      	lsrs	r3, r3, #9
 8009eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ece:	ee17 2a90 	vmov	r2, s15
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009ed6:	4b1f      	ldr	r3, [pc, #124]	; (8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eda:	0c1b      	lsrs	r3, r3, #16
 8009edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ee0:	ee07 3a90 	vmov	s15, r3
 8009ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009eec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ef0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009efc:	ee17 2a90 	vmov	r2, s15
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009f04:	4b13      	ldr	r3, [pc, #76]	; (8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f08:	0e1b      	lsrs	r3, r3, #24
 8009f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f0e:	ee07 3a90 	vmov	s15, r3
 8009f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f2a:	ee17 2a90 	vmov	r2, s15
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009f32:	e008      	b.n	8009f46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	609a      	str	r2, [r3, #8]
}
 8009f46:	bf00      	nop
 8009f48:	3724      	adds	r7, #36	; 0x24
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	58024400 	.word	0x58024400
 8009f58:	03d09000 	.word	0x03d09000
 8009f5c:	46000000 	.word	0x46000000
 8009f60:	4c742400 	.word	0x4c742400
 8009f64:	4a742400 	.word	0x4a742400
 8009f68:	4bb71b00 	.word	0x4bb71b00

08009f6c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b089      	sub	sp, #36	; 0x24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f74:	4ba0      	ldr	r3, [pc, #640]	; (800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f78:	f003 0303 	and.w	r3, r3, #3
 8009f7c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009f7e:	4b9e      	ldr	r3, [pc, #632]	; (800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f82:	091b      	lsrs	r3, r3, #4
 8009f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f88:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009f8a:	4b9b      	ldr	r3, [pc, #620]	; (800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8e:	f003 0301 	and.w	r3, r3, #1
 8009f92:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009f94:	4b98      	ldr	r3, [pc, #608]	; (800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f98:	08db      	lsrs	r3, r3, #3
 8009f9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	fb02 f303 	mul.w	r3, r2, r3
 8009fa4:	ee07 3a90 	vmov	s15, r3
 8009fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 8111 	beq.w	800a1da <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	f000 8083 	beq.w	800a0c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	f200 80a1 	bhi.w	800a10a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d056      	beq.n	800a082 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009fd4:	e099      	b.n	800a10a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fd6:	4b88      	ldr	r3, [pc, #544]	; (800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 0320 	and.w	r3, r3, #32
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d02d      	beq.n	800a03e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009fe2:	4b85      	ldr	r3, [pc, #532]	; (800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	08db      	lsrs	r3, r3, #3
 8009fe8:	f003 0303 	and.w	r3, r3, #3
 8009fec:	4a83      	ldr	r2, [pc, #524]	; (800a1fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009fee:	fa22 f303 	lsr.w	r3, r2, r3
 8009ff2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	ee07 3a90 	vmov	s15, r3
 8009ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	ee07 3a90 	vmov	s15, r3
 800a004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a00c:	4b7a      	ldr	r3, [pc, #488]	; (800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a014:	ee07 3a90 	vmov	s15, r3
 800a018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a01c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a020:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a200 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a024:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a028:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a02c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a030:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a034:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a038:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a03c:	e087      	b.n	800a14e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	ee07 3a90 	vmov	s15, r3
 800a044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a048:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a204 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a04c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a050:	4b69      	ldr	r3, [pc, #420]	; (800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a058:	ee07 3a90 	vmov	s15, r3
 800a05c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a060:	ed97 6a03 	vldr	s12, [r7, #12]
 800a064:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a200 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a068:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a06c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a070:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a074:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a07c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a080:	e065      	b.n	800a14e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	ee07 3a90 	vmov	s15, r3
 800a088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a08c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a208 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a094:	4b58      	ldr	r3, [pc, #352]	; (800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a09c:	ee07 3a90 	vmov	s15, r3
 800a0a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0a8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a200 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0c4:	e043      	b.n	800a14e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	ee07 3a90 	vmov	s15, r3
 800a0cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a20c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a0d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0d8:	4b47      	ldr	r3, [pc, #284]	; (800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0e0:	ee07 3a90 	vmov	s15, r3
 800a0e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0ec:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a200 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a100:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a104:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a108:	e021      	b.n	800a14e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	ee07 3a90 	vmov	s15, r3
 800a110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a114:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a204 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a11c:	4b36      	ldr	r3, [pc, #216]	; (800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a124:	ee07 3a90 	vmov	s15, r3
 800a128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a12c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a130:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a200 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a134:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a13c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a144:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a148:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a14c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a14e:	4b2a      	ldr	r3, [pc, #168]	; (800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a152:	0a5b      	lsrs	r3, r3, #9
 800a154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a158:	ee07 3a90 	vmov	s15, r3
 800a15c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a164:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a168:	edd7 6a07 	vldr	s13, [r7, #28]
 800a16c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a174:	ee17 2a90 	vmov	r2, s15
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a17c:	4b1e      	ldr	r3, [pc, #120]	; (800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a180:	0c1b      	lsrs	r3, r3, #16
 800a182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a186:	ee07 3a90 	vmov	s15, r3
 800a18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a18e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a192:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a196:	edd7 6a07 	vldr	s13, [r7, #28]
 800a19a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a19e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1a2:	ee17 2a90 	vmov	r2, s15
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a1aa:	4b13      	ldr	r3, [pc, #76]	; (800a1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ae:	0e1b      	lsrs	r3, r3, #24
 800a1b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1b4:	ee07 3a90 	vmov	s15, r3
 800a1b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1d0:	ee17 2a90 	vmov	r2, s15
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a1d8:	e008      	b.n	800a1ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	609a      	str	r2, [r3, #8]
}
 800a1ec:	bf00      	nop
 800a1ee:	3724      	adds	r7, #36	; 0x24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	58024400 	.word	0x58024400
 800a1fc:	03d09000 	.word	0x03d09000
 800a200:	46000000 	.word	0x46000000
 800a204:	4c742400 	.word	0x4c742400
 800a208:	4a742400 	.word	0x4a742400
 800a20c:	4bb71b00 	.word	0x4bb71b00

0800a210 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a21e:	4b53      	ldr	r3, [pc, #332]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a222:	f003 0303 	and.w	r3, r3, #3
 800a226:	2b03      	cmp	r3, #3
 800a228:	d101      	bne.n	800a22e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e099      	b.n	800a362 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a22e:	4b4f      	ldr	r3, [pc, #316]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a4e      	ldr	r2, [pc, #312]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a234:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a23a:	f7f9 fe77 	bl	8003f2c <HAL_GetTick>
 800a23e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a240:	e008      	b.n	800a254 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a242:	f7f9 fe73 	bl	8003f2c <HAL_GetTick>
 800a246:	4602      	mov	r2, r0
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d901      	bls.n	800a254 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e086      	b.n	800a362 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a254:	4b45      	ldr	r3, [pc, #276]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1f0      	bne.n	800a242 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a260:	4b42      	ldr	r3, [pc, #264]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a264:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	031b      	lsls	r3, r3, #12
 800a26e:	493f      	ldr	r1, [pc, #252]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a270:	4313      	orrs	r3, r2
 800a272:	628b      	str	r3, [r1, #40]	; 0x28
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	3b01      	subs	r3, #1
 800a27a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	3b01      	subs	r3, #1
 800a284:	025b      	lsls	r3, r3, #9
 800a286:	b29b      	uxth	r3, r3
 800a288:	431a      	orrs	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	3b01      	subs	r3, #1
 800a290:	041b      	lsls	r3, r3, #16
 800a292:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a296:	431a      	orrs	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	3b01      	subs	r3, #1
 800a29e:	061b      	lsls	r3, r3, #24
 800a2a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a2a4:	4931      	ldr	r1, [pc, #196]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a2aa:	4b30      	ldr	r3, [pc, #192]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	492d      	ldr	r1, [pc, #180]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a2bc:	4b2b      	ldr	r3, [pc, #172]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c0:	f023 0220 	bic.w	r2, r3, #32
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	699b      	ldr	r3, [r3, #24]
 800a2c8:	4928      	ldr	r1, [pc, #160]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a2ce:	4b27      	ldr	r3, [pc, #156]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d2:	4a26      	ldr	r2, [pc, #152]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a2d4:	f023 0310 	bic.w	r3, r3, #16
 800a2d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a2da:	4b24      	ldr	r3, [pc, #144]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a2dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2de:	4b24      	ldr	r3, [pc, #144]	; (800a370 <RCCEx_PLL2_Config+0x160>)
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	69d2      	ldr	r2, [r2, #28]
 800a2e6:	00d2      	lsls	r2, r2, #3
 800a2e8:	4920      	ldr	r1, [pc, #128]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a2ee:	4b1f      	ldr	r3, [pc, #124]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f2:	4a1e      	ldr	r2, [pc, #120]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a2f4:	f043 0310 	orr.w	r3, r3, #16
 800a2f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d106      	bne.n	800a30e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a300:	4b1a      	ldr	r3, [pc, #104]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a304:	4a19      	ldr	r2, [pc, #100]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a30a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a30c:	e00f      	b.n	800a32e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d106      	bne.n	800a322 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a314:	4b15      	ldr	r3, [pc, #84]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a318:	4a14      	ldr	r2, [pc, #80]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a31a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a31e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a320:	e005      	b.n	800a32e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a322:	4b12      	ldr	r3, [pc, #72]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a326:	4a11      	ldr	r2, [pc, #68]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a328:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a32c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a32e:	4b0f      	ldr	r3, [pc, #60]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a0e      	ldr	r2, [pc, #56]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a334:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a33a:	f7f9 fdf7 	bl	8003f2c <HAL_GetTick>
 800a33e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a340:	e008      	b.n	800a354 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a342:	f7f9 fdf3 	bl	8003f2c <HAL_GetTick>
 800a346:	4602      	mov	r2, r0
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d901      	bls.n	800a354 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a350:	2303      	movs	r3, #3
 800a352:	e006      	b.n	800a362 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a354:	4b05      	ldr	r3, [pc, #20]	; (800a36c <RCCEx_PLL2_Config+0x15c>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d0f0      	beq.n	800a342 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a360:	7bfb      	ldrb	r3, [r7, #15]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	58024400 	.word	0x58024400
 800a370:	ffff0007 	.word	0xffff0007

0800a374 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a382:	4b53      	ldr	r3, [pc, #332]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a386:	f003 0303 	and.w	r3, r3, #3
 800a38a:	2b03      	cmp	r3, #3
 800a38c:	d101      	bne.n	800a392 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	e099      	b.n	800a4c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a392:	4b4f      	ldr	r3, [pc, #316]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a4e      	ldr	r2, [pc, #312]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a39c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a39e:	f7f9 fdc5 	bl	8003f2c <HAL_GetTick>
 800a3a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3a4:	e008      	b.n	800a3b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a3a6:	f7f9 fdc1 	bl	8003f2c <HAL_GetTick>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d901      	bls.n	800a3b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e086      	b.n	800a4c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3b8:	4b45      	ldr	r3, [pc, #276]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1f0      	bne.n	800a3a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a3c4:	4b42      	ldr	r3, [pc, #264]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	051b      	lsls	r3, r3, #20
 800a3d2:	493f      	ldr	r1, [pc, #252]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	628b      	str	r3, [r1, #40]	; 0x28
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	025b      	lsls	r3, r3, #9
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	431a      	orrs	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	041b      	lsls	r3, r3, #16
 800a3f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a3fa:	431a      	orrs	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	691b      	ldr	r3, [r3, #16]
 800a400:	3b01      	subs	r3, #1
 800a402:	061b      	lsls	r3, r3, #24
 800a404:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a408:	4931      	ldr	r1, [pc, #196]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a40a:	4313      	orrs	r3, r2
 800a40c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a40e:	4b30      	ldr	r3, [pc, #192]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a412:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	492d      	ldr	r1, [pc, #180]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a41c:	4313      	orrs	r3, r2
 800a41e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a420:	4b2b      	ldr	r3, [pc, #172]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a424:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	4928      	ldr	r1, [pc, #160]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a42e:	4313      	orrs	r3, r2
 800a430:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a432:	4b27      	ldr	r3, [pc, #156]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a436:	4a26      	ldr	r2, [pc, #152]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a43c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a43e:	4b24      	ldr	r3, [pc, #144]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a442:	4b24      	ldr	r3, [pc, #144]	; (800a4d4 <RCCEx_PLL3_Config+0x160>)
 800a444:	4013      	ands	r3, r2
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	69d2      	ldr	r2, [r2, #28]
 800a44a:	00d2      	lsls	r2, r2, #3
 800a44c:	4920      	ldr	r1, [pc, #128]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a44e:	4313      	orrs	r3, r2
 800a450:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a452:	4b1f      	ldr	r3, [pc, #124]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a456:	4a1e      	ldr	r2, [pc, #120]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a45c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d106      	bne.n	800a472 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a464:	4b1a      	ldr	r3, [pc, #104]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a468:	4a19      	ldr	r2, [pc, #100]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a46a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a46e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a470:	e00f      	b.n	800a492 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	2b01      	cmp	r3, #1
 800a476:	d106      	bne.n	800a486 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a478:	4b15      	ldr	r3, [pc, #84]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47c:	4a14      	ldr	r2, [pc, #80]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a47e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a482:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a484:	e005      	b.n	800a492 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a486:	4b12      	ldr	r3, [pc, #72]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48a:	4a11      	ldr	r2, [pc, #68]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a48c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a490:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a492:	4b0f      	ldr	r3, [pc, #60]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a0e      	ldr	r2, [pc, #56]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a49c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a49e:	f7f9 fd45 	bl	8003f2c <HAL_GetTick>
 800a4a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4a4:	e008      	b.n	800a4b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a4a6:	f7f9 fd41 	bl	8003f2c <HAL_GetTick>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d901      	bls.n	800a4b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	e006      	b.n	800a4c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4b8:	4b05      	ldr	r3, [pc, #20]	; (800a4d0 <RCCEx_PLL3_Config+0x15c>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d0f0      	beq.n	800a4a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	58024400 	.word	0x58024400
 800a4d4:	ffff0007 	.word	0xffff0007

0800a4d8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08a      	sub	sp, #40	; 0x28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e075      	b.n	800a5d6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d105      	bne.n	800a502 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7f8 fcb1 	bl	8002e64 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2204      	movs	r2, #4
 800a506:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f868 	bl	800a5e0 <HAL_SD_InitCard>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	e05d      	b.n	800a5d6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a51a:	f107 0308 	add.w	r3, r7, #8
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fda9 	bl	800b078 <HAL_SD_GetCardStatus>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d001      	beq.n	800a530 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e052      	b.n	800a5d6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a530:	7e3b      	ldrb	r3, [r7, #24]
 800a532:	b2db      	uxtb	r3, r3
 800a534:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a536:	7e7b      	ldrb	r3, [r7, #25]
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a540:	2b01      	cmp	r3, #1
 800a542:	d10a      	bne.n	800a55a <HAL_SD_Init+0x82>
 800a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a546:	2b00      	cmp	r3, #0
 800a548:	d102      	bne.n	800a550 <HAL_SD_Init+0x78>
 800a54a:	6a3b      	ldr	r3, [r7, #32]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d004      	beq.n	800a55a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a556:	659a      	str	r2, [r3, #88]	; 0x58
 800a558:	e00b      	b.n	800a572 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d104      	bne.n	800a56c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a568:	659a      	str	r2, [r3, #88]	; 0x58
 800a56a:	e002      	b.n	800a572 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	4619      	mov	r1, r3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 fe67 	bl	800b24c <HAL_SD_ConfigWideBusOperation>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e026      	b.n	800a5d6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a588:	f7f9 fcd0 	bl	8003f2c <HAL_GetTick>
 800a58c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a58e:	e011      	b.n	800a5b4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a590:	f7f9 fccc 	bl	8003f2c <HAL_GetTick>
 800a594:	4602      	mov	r2, r0
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a59e:	d109      	bne.n	800a5b4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a5a6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	e010      	b.n	800a5d6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 ff5b 	bl	800b470 <HAL_SD_GetCardState>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b04      	cmp	r3, #4
 800a5be:	d1e7      	bne.n	800a590 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3728      	adds	r7, #40	; 0x28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
	...

0800a5e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a5e0:	b590      	push	{r4, r7, lr}
 800a5e2:	b08d      	sub	sp, #52	; 0x34
 800a5e4:	af02      	add	r7, sp, #8
 800a5e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a5fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a600:	f7fe fdc8 	bl	8009194 <HAL_RCCEx_GetPeriphCLKFreq>
 800a604:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d109      	bne.n	800a620 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a61a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e06a      	b.n	800a6f6 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a622:	0a1b      	lsrs	r3, r3, #8
 800a624:	4a36      	ldr	r2, [pc, #216]	; (800a700 <HAL_SD_InitCard+0x120>)
 800a626:	fba2 2303 	umull	r2, r3, r2, r3
 800a62a:	091b      	lsrs	r3, r3, #4
 800a62c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681c      	ldr	r4, [r3, #0]
 800a632:	466a      	mov	r2, sp
 800a634:	f107 0318 	add.w	r3, r7, #24
 800a638:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a63c:	e882 0003 	stmia.w	r2, {r0, r1}
 800a640:	f107 030c 	add.w	r3, r7, #12
 800a644:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a646:	4620      	mov	r0, r4
 800a648:	f006 ff32 	bl	80114b0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4618      	mov	r0, r3
 800a652:	f006 ff75 	bl	8011540 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	005b      	lsls	r3, r3, #1
 800a65a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a65c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a660:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a662:	4a28      	ldr	r2, [pc, #160]	; (800a704 <HAL_SD_InitCard+0x124>)
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	fbb2 f3f3 	udiv	r3, r2, r3
 800a66a:	3301      	adds	r3, #1
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7f9 fc69 	bl	8003f44 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 ffea 	bl	800b64c <SD_PowerON>
 800a678:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a67a:	6a3b      	ldr	r3, [r7, #32]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00b      	beq.n	800a698 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	431a      	orrs	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	e02e      	b.n	800a6f6 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 ff09 	bl	800b4b0 <SD_InitCard>
 800a69e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6a0:	6a3b      	ldr	r3, [r7, #32]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00b      	beq.n	800a6be <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6b2:	6a3b      	ldr	r3, [r7, #32]
 800a6b4:	431a      	orrs	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e01b      	b.n	800a6f6 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f006 ffd0 	bl	801166c <SDMMC_CmdBlockLength>
 800a6cc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6ce:	6a3b      	ldr	r3, [r7, #32]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00f      	beq.n	800a6f4 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a0b      	ldr	r2, [pc, #44]	; (800a708 <HAL_SD_InitCard+0x128>)
 800a6da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	431a      	orrs	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e000      	b.n	800a6f6 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	372c      	adds	r7, #44	; 0x2c
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd90      	pop	{r4, r7, pc}
 800a6fe:	bf00      	nop
 800a700:	014f8b59 	.word	0x014f8b59
 800a704:	00012110 	.word	0x00012110
 800a708:	1fe00fff 	.word	0x1fe00fff

0800a70c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b08c      	sub	sp, #48	; 0x30
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
 800a718:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d107      	bne.n	800a734 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a728:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	e08d      	b.n	800a850 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	f040 8086 	bne.w	800a84e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	441a      	add	r2, r3
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a752:	429a      	cmp	r2, r3
 800a754:	d907      	bls.n	800a766 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a75a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	e074      	b.n	800a850 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2203      	movs	r2, #3
 800a76a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2200      	movs	r2, #0
 800a774:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	025a      	lsls	r2, r3, #9
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d002      	beq.n	800a792 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800a78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78e:	025b      	lsls	r3, r3, #9
 800a790:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a792:	f04f 33ff 	mov.w	r3, #4294967295
 800a796:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	025b      	lsls	r3, r3, #9
 800a79c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a79e:	2390      	movs	r3, #144	; 0x90
 800a7a0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a7a2:	2302      	movs	r3, #2
 800a7a4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f107 0210 	add.w	r2, r7, #16
 800a7b6:	4611      	mov	r1, r2
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f006 ff2b 	bl	8011614 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68da      	ldr	r2, [r3, #12]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7cc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d90a      	bls.n	800a7fa <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2282      	movs	r2, #130	; 0x82
 800a7e8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f006 ff81 	bl	80116f8 <SDMMC_CmdReadMultiBlock>
 800a7f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a7f8:	e009      	b.n	800a80e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2281      	movs	r2, #129	; 0x81
 800a7fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a806:	4618      	mov	r0, r3
 800a808:	f006 ff53 	bl	80116b2 <SDMMC_CmdReadSingleBlock>
 800a80c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a810:	2b00      	cmp	r3, #0
 800a812:	d012      	beq.n	800a83a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a0f      	ldr	r2, [pc, #60]	; (800a858 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a81a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a822:	431a      	orrs	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	e00a      	b.n	800a850 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a848:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800a84a:	2300      	movs	r3, #0
 800a84c:	e000      	b.n	800a850 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a84e:	2302      	movs	r3, #2
  }
}
 800a850:	4618      	mov	r0, r3
 800a852:	3730      	adds	r7, #48	; 0x30
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	1fe00fff 	.word	0x1fe00fff

0800a85c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08c      	sub	sp, #48	; 0x30
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	607a      	str	r2, [r7, #4]
 800a868:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d107      	bne.n	800a884 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a878:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	e08d      	b.n	800a9a0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	f040 8086 	bne.w	800a99e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	441a      	add	r2, r3
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d907      	bls.n	800a8b6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e074      	b.n	800a9a0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2203      	movs	r2, #3
 800a8ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	68ba      	ldr	r2, [r7, #8]
 800a8ca:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	025a      	lsls	r2, r3, #9
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d002      	beq.n	800a8e2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8de:	025b      	lsls	r3, r3, #9
 800a8e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a8e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	025b      	lsls	r3, r3, #9
 800a8ec:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a8ee:	2390      	movs	r3, #144	; 0x90
 800a8f0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f107 0210 	add.w	r2, r7, #16
 800a906:	4611      	mov	r1, r2
 800a908:	4618      	mov	r0, r3
 800a90a:	f006 fe83 	bl	8011614 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68da      	ldr	r2, [r3, #12]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a91c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2201      	movs	r2, #1
 800a92c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d90a      	bls.n	800a94a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	22a0      	movs	r2, #160	; 0xa0
 800a938:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a940:	4618      	mov	r0, r3
 800a942:	f006 ff1f 	bl	8011784 <SDMMC_CmdWriteMultiBlock>
 800a946:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a948:	e009      	b.n	800a95e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2290      	movs	r2, #144	; 0x90
 800a94e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a956:	4618      	mov	r0, r3
 800a958:	f006 fef1 	bl	801173e <SDMMC_CmdWriteSingleBlock>
 800a95c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a960:	2b00      	cmp	r3, #0
 800a962:	d012      	beq.n	800a98a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a0f      	ldr	r2, [pc, #60]	; (800a9a8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a96a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a972:	431a      	orrs	r2, r3
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e00a      	b.n	800a9a0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a998:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	e000      	b.n	800a9a0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a99e:	2302      	movs	r3, #2
  }
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3730      	adds	r7, #48	; 0x30
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	1fe00fff 	.word	0x1fe00fff

0800a9ac <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d008      	beq.n	800a9da <HAL_SD_IRQHandler+0x2e>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f003 0308 	and.w	r3, r3, #8
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f001 f926 	bl	800bc24 <SD_Read_IT>
 800a9d8:	e19a      	b.n	800ad10 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f000 80ac 	beq.w	800ab42 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9f2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	4b59      	ldr	r3, [pc, #356]	; (800ab64 <HAL_SD_IRQHandler+0x1b8>)
 800aa00:	400b      	ands	r3, r1
 800aa02:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800aa12:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68da      	ldr	r2, [r3, #12]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa22:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f003 0308 	and.w	r3, r3, #8
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d038      	beq.n	800aaa0 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f003 0302 	and.w	r3, r3, #2
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d104      	bne.n	800aa42 <HAL_SD_IRQHandler+0x96>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f003 0320 	and.w	r3, r3, #32
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d011      	beq.n	800aa66 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f006 fec0 	bl	80117cc <SDMMC_CmdStopTransfer>
 800aa4c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d008      	beq.n	800aa66 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	431a      	orrs	r2, r3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f95b 	bl	800ad1c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a3f      	ldr	r2, [pc, #252]	; (800ab68 <HAL_SD_IRQHandler+0x1bc>)
 800aa6c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2201      	movs	r2, #1
 800aa72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f003 0301 	and.w	r3, r3, #1
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d104      	bne.n	800aa90 <HAL_SD_IRQHandler+0xe4>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f003 0302 	and.w	r3, r3, #2
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d003      	beq.n	800aa98 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f007 fb73 	bl	801217c <HAL_SD_RxCpltCallback>
 800aa96:	e13b      	b.n	800ad10 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f007 fb65 	bl	8012168 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800aa9e:	e137      	b.n	800ad10 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f000 8132 	beq.w	800ad10 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2200      	movs	r2, #0
 800aab2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2200      	movs	r2, #0
 800aaba:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2200      	movs	r2, #0
 800aac2:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f003 0302 	and.w	r3, r3, #2
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d104      	bne.n	800aad8 <HAL_SD_IRQHandler+0x12c>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f003 0320 	and.w	r3, r3, #32
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d011      	beq.n	800aafc <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4618      	mov	r0, r3
 800aade:	f006 fe75 	bl	80117cc <SDMMC_CmdStopTransfer>
 800aae2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d008      	beq.n	800aafc <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	431a      	orrs	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f910 	bl	800ad1c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f003 0310 	and.w	r3, r3, #16
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d104      	bne.n	800ab1e <HAL_SD_IRQHandler+0x172>
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f003 0320 	and.w	r3, r3, #32
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d002      	beq.n	800ab24 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f007 fb22 	bl	8012168 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f003 0301 	and.w	r3, r3, #1
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d105      	bne.n	800ab3a <HAL_SD_IRQHandler+0x18e>
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f003 0302 	and.w	r3, r3, #2
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f000 80eb 	beq.w	800ad10 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f007 fb1e 	bl	801217c <HAL_SD_RxCpltCallback>
}
 800ab40:	e0e6      	b.n	800ad10 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00d      	beq.n	800ab6c <HAL_SD_IRQHandler+0x1c0>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f003 0308 	and.w	r3, r3, #8
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d008      	beq.n	800ab6c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f001 f8a8 	bl	800bcb0 <SD_Write_IT>
 800ab60:	e0d6      	b.n	800ad10 <HAL_SD_IRQHandler+0x364>
 800ab62:	bf00      	nop
 800ab64:	ffff3ec5 	.word	0xffff3ec5
 800ab68:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab72:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f000 809d 	beq.w	800acb6 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab82:	f003 0302 	and.w	r3, r3, #2
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d005      	beq.n	800ab96 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab8e:	f043 0202 	orr.w	r2, r3, #2
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab9c:	f003 0308 	and.w	r3, r3, #8
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d005      	beq.n	800abb0 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aba8:	f043 0208 	orr.w	r2, r3, #8
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb6:	f003 0320 	and.w	r3, r3, #32
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d005      	beq.n	800abca <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc2:	f043 0220 	orr.w	r2, r3, #32
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abd0:	f003 0310 	and.w	r3, r3, #16
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d005      	beq.n	800abe4 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abdc:	f043 0210 	orr.w	r2, r3, #16
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a4b      	ldr	r2, [pc, #300]	; (800ad18 <HAL_SD_IRQHandler+0x36c>)
 800abea:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800abfa:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68da      	ldr	r2, [r3, #12]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac0a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68da      	ldr	r2, [r3, #12]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ac2a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f006 fdcb 	bl	80117cc <SDMMC_CmdStopTransfer>
 800ac36:	4602      	mov	r2, r0
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac3c:	431a      	orrs	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	68da      	ldr	r2, [r3, #12]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac50:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac5a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f003 0308 	and.w	r3, r3, #8
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00a      	beq.n	800ac7c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f851 	bl	800ad1c <HAL_SD_ErrorCallback>
}
 800ac7a:	e049      	b.n	800ad10 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d044      	beq.n	800ad10 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d040      	beq.n	800ad10 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ac9c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2200      	movs	r2, #0
 800aca4:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2201      	movs	r2, #1
 800acaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 f834 	bl	800ad1c <HAL_SD_ErrorCallback>
}
 800acb4:	e02c      	b.n	800ad10 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d025      	beq.n	800ad10 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800accc:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd4:	f003 0304 	and.w	r3, r3, #4
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10c      	bne.n	800acf6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f003 0320 	and.w	r3, r3, #32
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d003      	beq.n	800acee <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f001 f84a 	bl	800bd80 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800acec:	e010      	b.n	800ad10 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f001 f832 	bl	800bd58 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800acf4:	e00c      	b.n	800ad10 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f003 0320 	and.w	r3, r3, #32
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d003      	beq.n	800ad08 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f001 f833 	bl	800bd6c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800ad06:	e003      	b.n	800ad10 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f001 f81b 	bl	800bd44 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800ad0e:	e7ff      	b.n	800ad10 <HAL_SD_IRQHandler+0x364>
 800ad10:	bf00      	nop
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	18000f3a 	.word	0x18000f3a

0800ad1c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad3e:	0f9b      	lsrs	r3, r3, #30
 800ad40:	b2da      	uxtb	r2, r3
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad4a:	0e9b      	lsrs	r3, r3, #26
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	f003 030f 	and.w	r3, r3, #15
 800ad52:	b2da      	uxtb	r2, r3
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad5c:	0e1b      	lsrs	r3, r3, #24
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	f003 0303 	and.w	r3, r3, #3
 800ad64:	b2da      	uxtb	r2, r3
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad6e:	0c1b      	lsrs	r3, r3, #16
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad7a:	0a1b      	lsrs	r3, r3, #8
 800ad7c:	b2da      	uxtb	r2, r3
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad90:	0d1b      	lsrs	r3, r3, #20
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad9c:	0c1b      	lsrs	r3, r3, #16
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	f003 030f 	and.w	r3, r3, #15
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adae:	0bdb      	lsrs	r3, r3, #15
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adc0:	0b9b      	lsrs	r3, r3, #14
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	b2da      	uxtb	r2, r3
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800add2:	0b5b      	lsrs	r3, r3, #13
 800add4:	b2db      	uxtb	r3, r3
 800add6:	f003 0301 	and.w	r3, r3, #1
 800adda:	b2da      	uxtb	r2, r3
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ade4:	0b1b      	lsrs	r3, r3, #12
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	f003 0301 	and.w	r3, r3, #1
 800adec:	b2da      	uxtb	r2, r3
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	2200      	movs	r2, #0
 800adf6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d163      	bne.n	800aec8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae04:	009a      	lsls	r2, r3, #2
 800ae06:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ae10:	0f92      	lsrs	r2, r2, #30
 800ae12:	431a      	orrs	r2, r3
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae1c:	0edb      	lsrs	r3, r3, #27
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	f003 0307 	and.w	r3, r3, #7
 800ae24:	b2da      	uxtb	r2, r3
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae2e:	0e1b      	lsrs	r3, r3, #24
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	f003 0307 	and.w	r3, r3, #7
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae40:	0d5b      	lsrs	r3, r3, #21
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	f003 0307 	and.w	r3, r3, #7
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae52:	0c9b      	lsrs	r3, r3, #18
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	f003 0307 	and.w	r3, r3, #7
 800ae5a:	b2da      	uxtb	r2, r3
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae64:	0bdb      	lsrs	r3, r3, #15
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	f003 0307 	and.w	r3, r3, #7
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	1c5a      	adds	r2, r3, #1
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	7e1b      	ldrb	r3, [r3, #24]
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	f003 0307 	and.w	r3, r3, #7
 800ae86:	3302      	adds	r3, #2
 800ae88:	2201      	movs	r2, #1
 800ae8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ae92:	fb03 f202 	mul.w	r2, r3, r2
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	7a1b      	ldrb	r3, [r3, #8]
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	f003 030f 	and.w	r3, r3, #15
 800aea4:	2201      	movs	r2, #1
 800aea6:	409a      	lsls	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800aeb4:	0a52      	lsrs	r2, r2, #9
 800aeb6:	fb03 f202 	mul.w	r2, r3, r2
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aec4:	655a      	str	r2, [r3, #84]	; 0x54
 800aec6:	e031      	b.n	800af2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d11d      	bne.n	800af0c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aed4:	041b      	lsls	r3, r3, #16
 800aed6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aede:	0c1b      	lsrs	r3, r3, #16
 800aee0:	431a      	orrs	r2, r3
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	3301      	adds	r3, #1
 800aeec:	029a      	lsls	r2, r3, #10
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af00:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	655a      	str	r2, [r3, #84]	; 0x54
 800af0a:	e00f      	b.n	800af2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a58      	ldr	r2, [pc, #352]	; (800b074 <HAL_SD_GetCardCSD+0x344>)
 800af12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	e09d      	b.n	800b068 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af30:	0b9b      	lsrs	r3, r3, #14
 800af32:	b2db      	uxtb	r3, r3
 800af34:	f003 0301 	and.w	r3, r3, #1
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af42:	09db      	lsrs	r3, r3, #7
 800af44:	b2db      	uxtb	r3, r3
 800af46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af54:	b2db      	uxtb	r3, r3
 800af56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af64:	0fdb      	lsrs	r3, r3, #31
 800af66:	b2da      	uxtb	r2, r3
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af70:	0f5b      	lsrs	r3, r3, #29
 800af72:	b2db      	uxtb	r3, r3
 800af74:	f003 0303 	and.w	r3, r3, #3
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af82:	0e9b      	lsrs	r3, r3, #26
 800af84:	b2db      	uxtb	r3, r3
 800af86:	f003 0307 	and.w	r3, r3, #7
 800af8a:	b2da      	uxtb	r2, r3
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af94:	0d9b      	lsrs	r3, r3, #22
 800af96:	b2db      	uxtb	r3, r3
 800af98:	f003 030f 	and.w	r3, r3, #15
 800af9c:	b2da      	uxtb	r2, r3
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afa6:	0d5b      	lsrs	r3, r3, #21
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	f003 0301 	and.w	r3, r3, #1
 800afae:	b2da      	uxtb	r2, r3
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afc2:	0c1b      	lsrs	r3, r3, #16
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	f003 0301 	and.w	r3, r3, #1
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afd6:	0bdb      	lsrs	r3, r3, #15
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afea:	0b9b      	lsrs	r3, r3, #14
 800afec:	b2db      	uxtb	r3, r3
 800afee:	f003 0301 	and.w	r3, r3, #1
 800aff2:	b2da      	uxtb	r2, r3
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800affe:	0b5b      	lsrs	r3, r3, #13
 800b000:	b2db      	uxtb	r3, r3
 800b002:	f003 0301 	and.w	r3, r3, #1
 800b006:	b2da      	uxtb	r2, r3
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b012:	0b1b      	lsrs	r3, r3, #12
 800b014:	b2db      	uxtb	r3, r3
 800b016:	f003 0301 	and.w	r3, r3, #1
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b026:	0a9b      	lsrs	r3, r3, #10
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	f003 0303 	and.w	r3, r3, #3
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b03a:	0a1b      	lsrs	r3, r3, #8
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	f003 0303 	and.w	r3, r3, #3
 800b042:	b2da      	uxtb	r2, r3
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b04e:	085b      	lsrs	r3, r3, #1
 800b050:	b2db      	uxtb	r3, r3
 800b052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b056:	b2da      	uxtb	r2, r3
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	2201      	movs	r2, #1
 800b062:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr
 800b074:	1fe00fff 	.word	0x1fe00fff

0800b078 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b094      	sub	sp, #80	; 0x50
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	2b03      	cmp	r3, #3
 800b092:	d101      	bne.n	800b098 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	e0a7      	b.n	800b1e8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800b098:	f107 0308 	add.w	r3, r7, #8
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fb62 	bl	800b768 <SD_SendSDStatus>
 800b0a4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d011      	beq.n	800b0d0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a4f      	ldr	r2, [pc, #316]	; (800b1f0 <HAL_SD_GetCardStatus+0x178>)
 800b0b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b0ce:	e070      	b.n	800b1b2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	099b      	lsrs	r3, r3, #6
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	f003 0303 	and.w	r3, r3, #3
 800b0da:	b2da      	uxtb	r2, r3
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	095b      	lsrs	r3, r3, #5
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	f003 0301 	and.w	r3, r3, #1
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	0a1b      	lsrs	r3, r3, #8
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	0e1b      	lsrs	r3, r3, #24
 800b100:	b29b      	uxth	r3, r3
 800b102:	4313      	orrs	r3, r2
 800b104:	b29a      	uxth	r2, r3
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	061a      	lsls	r2, r3, #24
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	021b      	lsls	r3, r3, #8
 800b112:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b116:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	0a1b      	lsrs	r3, r3, #8
 800b11c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b120:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	0e1b      	lsrs	r3, r3, #24
 800b126:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	b2da      	uxtb	r2, r3
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	0a1b      	lsrs	r3, r3, #8
 800b138:	b2da      	uxtb	r2, r3
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	0d1b      	lsrs	r3, r3, #20
 800b142:	b2db      	uxtb	r3, r3
 800b144:	f003 030f 	and.w	r3, r3, #15
 800b148:	b2da      	uxtb	r2, r3
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	0c1b      	lsrs	r3, r3, #16
 800b152:	b29b      	uxth	r3, r3
 800b154:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b158:	b29a      	uxth	r2, r3
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	b29b      	uxth	r3, r3
 800b162:	4313      	orrs	r3, r2
 800b164:	b29a      	uxth	r2, r3
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	0a9b      	lsrs	r3, r3, #10
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b174:	b2da      	uxtb	r2, r3
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	0a1b      	lsrs	r3, r3, #8
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	f003 0303 	and.w	r3, r3, #3
 800b184:	b2da      	uxtb	r2, r3
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	091b      	lsrs	r3, r3, #4
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	f003 030f 	and.w	r3, r3, #15
 800b194:	b2da      	uxtb	r2, r3
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	f003 030f 	and.w	r3, r3, #15
 800b1a2:	b2da      	uxtb	r2, r3
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	0e1b      	lsrs	r3, r3, #24
 800b1ac:	b2da      	uxtb	r2, r3
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f006 fa56 	bl	801166c <SDMMC_CmdBlockLength>
 800b1c0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00d      	beq.n	800b1e4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a08      	ldr	r2, [pc, #32]	; (800b1f0 <HAL_SD_GetCardStatus+0x178>)
 800b1ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1d4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800b1e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3750      	adds	r7, #80	; 0x50
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	1fe00fff 	.word	0x1fe00fff

0800b1f4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b24c:	b590      	push	{r4, r7, lr}
 800b24e:	b08d      	sub	sp, #52	; 0x34
 800b250:	af02      	add	r7, sp, #8
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800b256:	2300      	movs	r3, #0
 800b258:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800b25a:	2300      	movs	r3, #0
 800b25c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2203      	movs	r2, #3
 800b264:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b26c:	2b03      	cmp	r3, #3
 800b26e:	d02e      	beq.n	800b2ce <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b276:	d106      	bne.n	800b286 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b27c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	635a      	str	r2, [r3, #52]	; 0x34
 800b284:	e029      	b.n	800b2da <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b28c:	d10a      	bne.n	800b2a4 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fb62 	bl	800b958 <SD_WideBus_Enable>
 800b294:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	431a      	orrs	r2, r3
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	635a      	str	r2, [r3, #52]	; 0x34
 800b2a2:	e01a      	b.n	800b2da <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d10a      	bne.n	800b2c0 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fb9f 	bl	800b9ee <SD_WideBus_Disable>
 800b2b0:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	431a      	orrs	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	635a      	str	r2, [r3, #52]	; 0x34
 800b2be:	e00c      	b.n	800b2da <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	635a      	str	r2, [r3, #52]	; 0x34
 800b2cc:	e005      	b.n	800b2da <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d007      	beq.n	800b2f2 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a5e      	ldr	r2, [pc, #376]	; (800b460 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b2e8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b2f0:	e094      	b.n	800b41c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b2f2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b2f6:	f7fd ff4d 	bl	8009194 <HAL_RCCEx_GetPeriphCLKFreq>
 800b2fa:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 8083 	beq.w	800b40a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	695a      	ldr	r2, [r3, #20]
 800b31e:	6a3b      	ldr	r3, [r7, #32]
 800b320:	4950      	ldr	r1, [pc, #320]	; (800b464 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b322:	fba1 1303 	umull	r1, r3, r1, r3
 800b326:	0e1b      	lsrs	r3, r3, #24
 800b328:	429a      	cmp	r2, r3
 800b32a:	d303      	bcc.n	800b334 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	695b      	ldr	r3, [r3, #20]
 800b330:	61bb      	str	r3, [r7, #24]
 800b332:	e05a      	b.n	800b3ea <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b33c:	d103      	bne.n	800b346 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	695b      	ldr	r3, [r3, #20]
 800b342:	61bb      	str	r3, [r7, #24]
 800b344:	e051      	b.n	800b3ea <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b34a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b34e:	d126      	bne.n	800b39e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	695b      	ldr	r3, [r3, #20]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10e      	bne.n	800b376 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800b358:	6a3b      	ldr	r3, [r7, #32]
 800b35a:	4a43      	ldr	r2, [pc, #268]	; (800b468 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d906      	bls.n	800b36e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b360:	6a3b      	ldr	r3, [r7, #32]
 800b362:	4a40      	ldr	r2, [pc, #256]	; (800b464 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b364:	fba2 2303 	umull	r2, r3, r2, r3
 800b368:	0e5b      	lsrs	r3, r3, #25
 800b36a:	61bb      	str	r3, [r7, #24]
 800b36c:	e03d      	b.n	800b3ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	695b      	ldr	r3, [r3, #20]
 800b372:	61bb      	str	r3, [r7, #24]
 800b374:	e039      	b.n	800b3ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	005b      	lsls	r3, r3, #1
 800b37c:	6a3a      	ldr	r2, [r7, #32]
 800b37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b382:	4a39      	ldr	r2, [pc, #228]	; (800b468 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d906      	bls.n	800b396 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b388:	6a3b      	ldr	r3, [r7, #32]
 800b38a:	4a36      	ldr	r2, [pc, #216]	; (800b464 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b38c:	fba2 2303 	umull	r2, r3, r2, r3
 800b390:	0e5b      	lsrs	r3, r3, #25
 800b392:	61bb      	str	r3, [r7, #24]
 800b394:	e029      	b.n	800b3ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	61bb      	str	r3, [r7, #24]
 800b39c:	e025      	b.n	800b3ea <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d10e      	bne.n	800b3c4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800b3a6:	6a3b      	ldr	r3, [r7, #32]
 800b3a8:	4a30      	ldr	r2, [pc, #192]	; (800b46c <HAL_SD_ConfigWideBusOperation+0x220>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d906      	bls.n	800b3bc <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b3ae:	6a3b      	ldr	r3, [r7, #32]
 800b3b0:	4a2c      	ldr	r2, [pc, #176]	; (800b464 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3b6:	0e1b      	lsrs	r3, r3, #24
 800b3b8:	61bb      	str	r3, [r7, #24]
 800b3ba:	e016      	b.n	800b3ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	695b      	ldr	r3, [r3, #20]
 800b3c0:	61bb      	str	r3, [r7, #24]
 800b3c2:	e012      	b.n	800b3ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	695b      	ldr	r3, [r3, #20]
 800b3c8:	005b      	lsls	r3, r3, #1
 800b3ca:	6a3a      	ldr	r2, [r7, #32]
 800b3cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3d0:	4a26      	ldr	r2, [pc, #152]	; (800b46c <HAL_SD_ConfigWideBusOperation+0x220>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d906      	bls.n	800b3e4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b3d6:	6a3b      	ldr	r3, [r7, #32]
 800b3d8:	4a22      	ldr	r2, [pc, #136]	; (800b464 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b3da:	fba2 2303 	umull	r2, r3, r2, r3
 800b3de:	0e1b      	lsrs	r3, r3, #24
 800b3e0:	61bb      	str	r3, [r7, #24]
 800b3e2:	e002      	b.n	800b3ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	695b      	ldr	r3, [r3, #20]
 800b3e8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681c      	ldr	r4, [r3, #0]
 800b3ee:	466a      	mov	r2, sp
 800b3f0:	f107 0314 	add.w	r3, r7, #20
 800b3f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b3f8:	e882 0003 	stmia.w	r2, {r0, r1}
 800b3fc:	f107 0308 	add.w	r3, r7, #8
 800b400:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b402:	4620      	mov	r0, r4
 800b404:	f006 f854 	bl	80114b0 <SDMMC_Init>
 800b408:	e008      	b.n	800b41c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b40e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b424:	4618      	mov	r0, r3
 800b426:	f006 f921 	bl	801166c <SDMMC_CmdBlockLength>
 800b42a:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d00c      	beq.n	800b44c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a0a      	ldr	r2, [pc, #40]	; (800b460 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b438:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	431a      	orrs	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b446:	2301      	movs	r3, #1
 800b448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2201      	movs	r2, #1
 800b450:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b458:	4618      	mov	r0, r3
 800b45a:	372c      	adds	r7, #44	; 0x2c
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd90      	pop	{r4, r7, pc}
 800b460:	1fe00fff 	.word	0x1fe00fff
 800b464:	55e63b89 	.word	0x55e63b89
 800b468:	02faf080 	.word	0x02faf080
 800b46c:	017d7840 	.word	0x017d7840

0800b470 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b47c:	f107 030c 	add.w	r3, r7, #12
 800b480:	4619      	mov	r1, r3
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fa40 	bl	800b908 <SD_SendStatus>
 800b488:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d005      	beq.n	800b49c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	431a      	orrs	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	0a5b      	lsrs	r3, r3, #9
 800b4a0:	f003 030f 	and.w	r3, r3, #15
 800b4a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b4a6:	693b      	ldr	r3, [r7, #16]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3718      	adds	r7, #24
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b090      	sub	sp, #64	; 0x40
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800b4bc:	f7f8 fd36 	bl	8003f2c <HAL_GetTick>
 800b4c0:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f006 f84b 	bl	8011562 <SDMMC_GetPowerState>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d102      	bne.n	800b4d8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b4d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b4d6:	e0b5      	b.n	800b644 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4dc:	2b03      	cmp	r3, #3
 800b4de:	d02e      	beq.n	800b53e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f006 fa96 	bl	8011a16 <SDMMC_CmdSendCID>
 800b4ea:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d001      	beq.n	800b4f6 <SD_InitCard+0x46>
    {
      return errorstate;
 800b4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f4:	e0a6      	b.n	800b644 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f006 f876 	bl	80115ee <SDMMC_GetResponse>
 800b502:	4602      	mov	r2, r0
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2104      	movs	r1, #4
 800b50e:	4618      	mov	r0, r3
 800b510:	f006 f86d 	bl	80115ee <SDMMC_GetResponse>
 800b514:	4602      	mov	r2, r0
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2108      	movs	r1, #8
 800b520:	4618      	mov	r0, r3
 800b522:	f006 f864 	bl	80115ee <SDMMC_GetResponse>
 800b526:	4602      	mov	r2, r0
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	210c      	movs	r1, #12
 800b532:	4618      	mov	r0, r3
 800b534:	f006 f85b 	bl	80115ee <SDMMC_GetResponse>
 800b538:	4602      	mov	r2, r0
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b542:	2b03      	cmp	r3, #3
 800b544:	d01d      	beq.n	800b582 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800b546:	e019      	b.n	800b57c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f107 020a 	add.w	r2, r7, #10
 800b550:	4611      	mov	r1, r2
 800b552:	4618      	mov	r0, r3
 800b554:	f006 fa9e 	bl	8011a94 <SDMMC_CmdSetRelAdd>
 800b558:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800b55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d001      	beq.n	800b564 <SD_InitCard+0xb4>
      {
        return errorstate;
 800b560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b562:	e06f      	b.n	800b644 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800b564:	f7f8 fce2 	bl	8003f2c <HAL_GetTick>
 800b568:	4602      	mov	r2, r0
 800b56a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b56c:	1ad3      	subs	r3, r2, r3
 800b56e:	f241 3287 	movw	r2, #4999	; 0x1387
 800b572:	4293      	cmp	r3, r2
 800b574:	d902      	bls.n	800b57c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800b576:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b57a:	e063      	b.n	800b644 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800b57c:	897b      	ldrh	r3, [r7, #10]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d0e2      	beq.n	800b548 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b586:	2b03      	cmp	r3, #3
 800b588:	d036      	beq.n	800b5f8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b58a:	897b      	ldrh	r3, [r7, #10]
 800b58c:	461a      	mov	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b59a:	041b      	lsls	r3, r3, #16
 800b59c:	4619      	mov	r1, r3
 800b59e:	4610      	mov	r0, r2
 800b5a0:	f006 fa58 	bl	8011a54 <SDMMC_CmdSendCSD>
 800b5a4:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d001      	beq.n	800b5b0 <SD_InitCard+0x100>
    {
      return errorstate;
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ae:	e049      	b.n	800b644 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f006 f819 	bl	80115ee <SDMMC_GetResponse>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2104      	movs	r1, #4
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f006 f810 	bl	80115ee <SDMMC_GetResponse>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2108      	movs	r1, #8
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f006 f807 	bl	80115ee <SDMMC_GetResponse>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	210c      	movs	r1, #12
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f005 fffe 	bl	80115ee <SDMMC_GetResponse>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2104      	movs	r1, #4
 800b5fe:	4618      	mov	r0, r3
 800b600:	f005 fff5 	bl	80115ee <SDMMC_GetResponse>
 800b604:	4603      	mov	r3, r0
 800b606:	0d1a      	lsrs	r2, r3, #20
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b60c:	f107 030c 	add.w	r3, r7, #12
 800b610:	4619      	mov	r1, r3
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f7ff fb8c 	bl	800ad30 <HAL_SD_GetCardCSD>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d002      	beq.n	800b624 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b61e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b622:	e00f      	b.n	800b644 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b62c:	041b      	lsls	r3, r3, #16
 800b62e:	4619      	mov	r1, r3
 800b630:	4610      	mov	r0, r2
 800b632:	f006 f907 	bl	8011844 <SDMMC_CmdSelDesel>
 800b636:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800b638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d001      	beq.n	800b642 <SD_InitCard+0x192>
  {
    return errorstate;
 800b63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b640:	e000      	b.n	800b644 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	3740      	adds	r7, #64	; 0x40
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b086      	sub	sp, #24
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b654:	2300      	movs	r3, #0
 800b656:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b658:	2300      	movs	r3, #0
 800b65a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b65c:	2300      	movs	r3, #0
 800b65e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4618      	mov	r0, r3
 800b666:	f006 f910 	bl	801188a <SDMMC_CmdGoIdleState>
 800b66a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d001      	beq.n	800b676 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	e072      	b.n	800b75c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f006 f923 	bl	80118c6 <SDMMC_CmdOperCond>
 800b680:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b688:	d10d      	bne.n	800b6a6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4618      	mov	r0, r3
 800b696:	f006 f8f8 	bl	801188a <SDMMC_CmdGoIdleState>
 800b69a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d004      	beq.n	800b6ac <SD_PowerON+0x60>
    {
      return errorstate;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	e05a      	b.n	800b75c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d137      	bne.n	800b724 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f006 f923 	bl	8011906 <SDMMC_CmdAppCommand>
 800b6c0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d02d      	beq.n	800b724 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b6c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b6cc:	e046      	b.n	800b75c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f006 f916 	bl	8011906 <SDMMC_CmdAppCommand>
 800b6da:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d001      	beq.n	800b6e6 <SD_PowerON+0x9a>
    {
      return errorstate;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	e03a      	b.n	800b75c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	491e      	ldr	r1, [pc, #120]	; (800b764 <SD_PowerON+0x118>)
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f006 f92d 	bl	801194c <SDMMC_CmdAppOperCommand>
 800b6f2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d002      	beq.n	800b700 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b6fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b6fe:	e02d      	b.n	800b75c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2100      	movs	r1, #0
 800b706:	4618      	mov	r0, r3
 800b708:	f005 ff71 	bl	80115ee <SDMMC_GetResponse>
 800b70c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	0fdb      	lsrs	r3, r3, #31
 800b712:	2b01      	cmp	r3, #1
 800b714:	d101      	bne.n	800b71a <SD_PowerON+0xce>
 800b716:	2301      	movs	r3, #1
 800b718:	e000      	b.n	800b71c <SD_PowerON+0xd0>
 800b71a:	2300      	movs	r3, #0
 800b71c:	613b      	str	r3, [r7, #16]

    count++;
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	3301      	adds	r3, #1
 800b722:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d802      	bhi.n	800b734 <SD_PowerON+0xe8>
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d0cc      	beq.n	800b6ce <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d902      	bls.n	800b744 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b73e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b742:	e00b      	b.n	800b75c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2201      	movs	r2, #1
 800b758:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3718      	adds	r7, #24
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	c1100000 	.word	0xc1100000

0800b768 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b08c      	sub	sp, #48	; 0x30
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b772:	f7f8 fbdb 	bl	8003f2c <HAL_GetTick>
 800b776:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2100      	movs	r1, #0
 800b782:	4618      	mov	r0, r3
 800b784:	f005 ff33 	bl	80115ee <SDMMC_GetResponse>
 800b788:	4603      	mov	r3, r0
 800b78a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b78e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b792:	d102      	bne.n	800b79a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b794:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b798:	e0b0      	b.n	800b8fc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2140      	movs	r1, #64	; 0x40
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f005 ff63 	bl	801166c <SDMMC_CmdBlockLength>
 800b7a6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b7a8:	6a3b      	ldr	r3, [r7, #32]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d005      	beq.n	800b7ba <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	e0a0      	b.n	800b8fc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7c2:	041b      	lsls	r3, r3, #16
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4610      	mov	r0, r2
 800b7c8:	f006 f89d 	bl	8011906 <SDMMC_CmdAppCommand>
 800b7cc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b7ce:	6a3b      	ldr	r3, [r7, #32]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d005      	beq.n	800b7e0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b7dc:	6a3b      	ldr	r3, [r7, #32]
 800b7de:	e08d      	b.n	800b8fc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7e4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b7e6:	2340      	movs	r3, #64	; 0x40
 800b7e8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b7ea:	2360      	movs	r3, #96	; 0x60
 800b7ec:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f107 0208 	add.w	r2, r7, #8
 800b802:	4611      	mov	r1, r2
 800b804:	4618      	mov	r0, r3
 800b806:	f005 ff05 	bl	8011614 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4618      	mov	r0, r3
 800b810:	f006 f985 	bl	8011b1e <SDMMC_CmdStatusRegister>
 800b814:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b816:	6a3b      	ldr	r3, [r7, #32]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d02b      	beq.n	800b874 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b824:	6a3b      	ldr	r3, [r7, #32]
 800b826:	e069      	b.n	800b8fc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b82e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b832:	2b00      	cmp	r3, #0
 800b834:	d013      	beq.n	800b85e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b836:	2300      	movs	r3, #0
 800b838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b83a:	e00d      	b.n	800b858 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4618      	mov	r0, r3
 800b842:	f005 fe5f 	bl	8011504 <SDMMC_ReadFIFO>
 800b846:	4602      	mov	r2, r0
 800b848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84a:	601a      	str	r2, [r3, #0]
        pData++;
 800b84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84e:	3304      	adds	r3, #4
 800b850:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b854:	3301      	adds	r3, #1
 800b856:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85a:	2b07      	cmp	r3, #7
 800b85c:	d9ee      	bls.n	800b83c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b85e:	f7f8 fb65 	bl	8003f2c <HAL_GetTick>
 800b862:	4602      	mov	r2, r0
 800b864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b866:	1ad3      	subs	r3, r2, r3
 800b868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b86c:	d102      	bne.n	800b874 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b86e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b872:	e043      	b.n	800b8fc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b87a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d0d2      	beq.n	800b828 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b888:	f003 0308 	and.w	r3, r3, #8
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d001      	beq.n	800b894 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b890:	2308      	movs	r3, #8
 800b892:	e033      	b.n	800b8fc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b89a:	f003 0302 	and.w	r3, r3, #2
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d001      	beq.n	800b8a6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b8a2:	2302      	movs	r3, #2
 800b8a4:	e02a      	b.n	800b8fc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ac:	f003 0320 	and.w	r3, r3, #32
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d017      	beq.n	800b8e4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b8b4:	2320      	movs	r3, #32
 800b8b6:	e021      	b.n	800b8fc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f005 fe21 	bl	8011504 <SDMMC_ReadFIFO>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c6:	601a      	str	r2, [r3, #0]
    pData++;
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	3304      	adds	r3, #4
 800b8cc:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b8ce:	f7f8 fb2d 	bl	8003f2c <HAL_GetTick>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8dc:	d102      	bne.n	800b8e4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b8de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8e2:	e00b      	b.n	800b8fc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1e2      	bne.n	800b8b8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a03      	ldr	r2, [pc, #12]	; (800b904 <SD_SendSDStatus+0x19c>)
 800b8f8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3730      	adds	r7, #48	; 0x30
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	18000f3a 	.word	0x18000f3a

0800b908 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d102      	bne.n	800b91e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b918:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b91c:	e018      	b.n	800b950 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b926:	041b      	lsls	r3, r3, #16
 800b928:	4619      	mov	r1, r3
 800b92a:	4610      	mov	r0, r2
 800b92c:	f006 f8d4 	bl	8011ad8 <SDMMC_CmdSendStatus>
 800b930:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d001      	beq.n	800b93c <SD_SendStatus+0x34>
  {
    return errorstate;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	e009      	b.n	800b950 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2100      	movs	r1, #0
 800b942:	4618      	mov	r0, r3
 800b944:	f005 fe53 	bl	80115ee <SDMMC_GetResponse>
 800b948:	4602      	mov	r2, r0
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b086      	sub	sp, #24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b960:	2300      	movs	r3, #0
 800b962:	60fb      	str	r3, [r7, #12]
 800b964:	2300      	movs	r3, #0
 800b966:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2100      	movs	r1, #0
 800b96e:	4618      	mov	r0, r3
 800b970:	f005 fe3d 	bl	80115ee <SDMMC_GetResponse>
 800b974:	4603      	mov	r3, r0
 800b976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b97a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b97e:	d102      	bne.n	800b986 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b980:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b984:	e02f      	b.n	800b9e6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b986:	f107 030c 	add.w	r3, r7, #12
 800b98a:	4619      	mov	r1, r3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 f879 	bl	800ba84 <SD_FindSCR>
 800b992:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d001      	beq.n	800b99e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	e023      	b.n	800b9e6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d01c      	beq.n	800b9e2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9b0:	041b      	lsls	r3, r3, #16
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	4610      	mov	r0, r2
 800b9b6:	f005 ffa6 	bl	8011906 <SDMMC_CmdAppCommand>
 800b9ba:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	e00f      	b.n	800b9e6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2102      	movs	r1, #2
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f005 ffdd 	bl	801198c <SDMMC_CmdBusWidth>
 800b9d2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	e003      	b.n	800b9e6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	e001      	b.n	800b9e6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b9e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3718      	adds	r7, #24
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b086      	sub	sp, #24
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	60fb      	str	r3, [r7, #12]
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2100      	movs	r1, #0
 800ba04:	4618      	mov	r0, r3
 800ba06:	f005 fdf2 	bl	80115ee <SDMMC_GetResponse>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba14:	d102      	bne.n	800ba1c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ba16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba1a:	e02f      	b.n	800ba7c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ba1c:	f107 030c 	add.w	r3, r7, #12
 800ba20:	4619      	mov	r1, r3
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f82e 	bl	800ba84 <SD_FindSCR>
 800ba28:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	e023      	b.n	800ba7c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d01c      	beq.n	800ba78 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba46:	041b      	lsls	r3, r3, #16
 800ba48:	4619      	mov	r1, r3
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	f005 ff5b 	bl	8011906 <SDMMC_CmdAppCommand>
 800ba50:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d001      	beq.n	800ba5c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	e00f      	b.n	800ba7c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2100      	movs	r1, #0
 800ba62:	4618      	mov	r0, r3
 800ba64:	f005 ff92 	bl	801198c <SDMMC_CmdBusWidth>
 800ba68:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	e003      	b.n	800ba7c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ba74:	2300      	movs	r3, #0
 800ba76:	e001      	b.n	800ba7c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ba78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b08e      	sub	sp, #56	; 0x38
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ba8e:	f7f8 fa4d 	bl	8003f2c <HAL_GetTick>
 800ba92:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ba94:	2300      	movs	r3, #0
 800ba96:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ba98:	2300      	movs	r3, #0
 800ba9a:	60bb      	str	r3, [r7, #8]
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	2108      	movs	r1, #8
 800baaa:	4618      	mov	r0, r3
 800baac:	f005 fdde 	bl	801166c <SDMMC_CmdBlockLength>
 800bab0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800bab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <SD_FindSCR+0x38>
  {
    return errorstate;
 800bab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baba:	e0ad      	b.n	800bc18 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bac4:	041b      	lsls	r3, r3, #16
 800bac6:	4619      	mov	r1, r3
 800bac8:	4610      	mov	r0, r2
 800baca:	f005 ff1c 	bl	8011906 <SDMMC_CmdAppCommand>
 800bace:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800bad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d001      	beq.n	800bada <SD_FindSCR+0x56>
  {
    return errorstate;
 800bad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad8:	e09e      	b.n	800bc18 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bada:	f04f 33ff 	mov.w	r3, #4294967295
 800bade:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bae0:	2308      	movs	r3, #8
 800bae2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800bae4:	2330      	movs	r3, #48	; 0x30
 800bae6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bae8:	2302      	movs	r3, #2
 800baea:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800baec:	2300      	movs	r3, #0
 800baee:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800baf0:	2301      	movs	r3, #1
 800baf2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f107 0210 	add.w	r2, r7, #16
 800bafc:	4611      	mov	r1, r2
 800bafe:	4618      	mov	r0, r3
 800bb00:	f005 fd88 	bl	8011614 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f005 ff62 	bl	80119d2 <SDMMC_CmdSendSCR>
 800bb0e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800bb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d027      	beq.n	800bb66 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800bb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb18:	e07e      	b.n	800bc18 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d113      	bne.n	800bb50 <SD_FindSCR+0xcc>
 800bb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d110      	bne.n	800bb50 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f005 fce6 	bl	8011504 <SDMMC_ReadFIFO>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4618      	mov	r0, r3
 800bb42:	f005 fcdf 	bl	8011504 <SDMMC_ReadFIFO>
 800bb46:	4603      	mov	r3, r0
 800bb48:	60fb      	str	r3, [r7, #12]
      index++;
 800bb4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bb50:	f7f8 f9ec 	bl	8003f2c <HAL_GetTick>
 800bb54:	4602      	mov	r2, r0
 800bb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb58:	1ad3      	subs	r3, r2, r3
 800bb5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb5e:	d102      	bne.n	800bb66 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bb60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb64:	e058      	b.n	800bc18 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb6c:	f240 532a 	movw	r3, #1322	; 0x52a
 800bb70:	4013      	ands	r3, r2
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d0d1      	beq.n	800bb1a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb7c:	f003 0308 	and.w	r3, r3, #8
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d005      	beq.n	800bb90 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2208      	movs	r2, #8
 800bb8a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bb8c:	2308      	movs	r3, #8
 800bb8e:	e043      	b.n	800bc18 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb96:	f003 0302 	and.w	r3, r3, #2
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d005      	beq.n	800bbaa <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2202      	movs	r2, #2
 800bba4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bba6:	2302      	movs	r3, #2
 800bba8:	e036      	b.n	800bc18 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbb0:	f003 0320 	and.w	r3, r3, #32
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d005      	beq.n	800bbc4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2220      	movs	r2, #32
 800bbbe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bbc0:	2320      	movs	r3, #32
 800bbc2:	e029      	b.n	800bc18 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a15      	ldr	r2, [pc, #84]	; (800bc20 <SD_FindSCR+0x19c>)
 800bbca:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	061a      	lsls	r2, r3, #24
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	021b      	lsls	r3, r3, #8
 800bbd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bbd8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	0a1b      	lsrs	r3, r3, #8
 800bbde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800bbe2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	0e1b      	lsrs	r3, r3, #24
 800bbe8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800bbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbec:	601a      	str	r2, [r3, #0]
    scr++;
 800bbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	061a      	lsls	r2, r3, #24
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	021b      	lsls	r3, r3, #8
 800bbfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bc00:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	0a1b      	lsrs	r3, r3, #8
 800bc06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800bc0a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	0e1b      	lsrs	r3, r3, #24
 800bc10:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800bc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc14:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bc16:	2300      	movs	r3, #0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3738      	adds	r7, #56	; 0x38
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	18000f3a 	.word	0x18000f3a

0800bc24 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b086      	sub	sp, #24
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc30:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc36:	2b1f      	cmp	r3, #31
 800bc38:	d936      	bls.n	800bca8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	617b      	str	r3, [r7, #20]
 800bc3e:	e027      	b.n	800bc90 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4618      	mov	r0, r3
 800bc46:	f005 fc5d 	bl	8011504 <SDMMC_ReadFIFO>
 800bc4a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	b2da      	uxtb	r2, r3
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	3301      	adds	r3, #1
 800bc58:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	0a1b      	lsrs	r3, r3, #8
 800bc5e:	b2da      	uxtb	r2, r3
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	3301      	adds	r3, #1
 800bc68:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	0c1b      	lsrs	r3, r3, #16
 800bc6e:	b2da      	uxtb	r2, r3
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	3301      	adds	r3, #1
 800bc78:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	0e1b      	lsrs	r3, r3, #24
 800bc7e:	b2da      	uxtb	r2, r3
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	3301      	adds	r3, #1
 800bc88:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	617b      	str	r3, [r7, #20]
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	2b07      	cmp	r3, #7
 800bc94:	d9d4      	bls.n	800bc40 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	693a      	ldr	r2, [r7, #16]
 800bc9a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca0:	f1a3 0220 	sub.w	r2, r3, #32
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800bca8:	bf00      	nop
 800bcaa:	3718      	adds	r7, #24
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b086      	sub	sp, #24
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	69db      	ldr	r3, [r3, #28]
 800bcbc:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6a1b      	ldr	r3, [r3, #32]
 800bcc2:	2b1f      	cmp	r3, #31
 800bcc4:	d93a      	bls.n	800bd3c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	617b      	str	r3, [r7, #20]
 800bcca:	e02b      	b.n	800bd24 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	021a      	lsls	r2, r3, #8
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	4313      	orrs	r3, r2
 800bce2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	3301      	adds	r3, #1
 800bce8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	041a      	lsls	r2, r3, #16
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	061a      	lsls	r2, r3, #24
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	4313      	orrs	r3, r2
 800bd06:	60fb      	str	r3, [r7, #12]
      tmp++;
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f107 020c 	add.w	r2, r7, #12
 800bd16:	4611      	mov	r1, r2
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f005 fc00 	bl	801151e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	3301      	adds	r3, #1
 800bd22:	617b      	str	r3, [r7, #20]
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	2b07      	cmp	r3, #7
 800bd28:	d9d0      	bls.n	800bccc <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	693a      	ldr	r2, [r7, #16]
 800bd2e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a1b      	ldr	r3, [r3, #32]
 800bd34:	f1a3 0220 	sub.w	r2, r3, #32
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	621a      	str	r2, [r3, #32]
  }
}
 800bd3c:	bf00      	nop
 800bd3e:	3718      	adds	r7, #24
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800bd4c:	bf00      	nop
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800bd74:	bf00      	nop
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d101      	bne.n	800bda8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	e02b      	b.n	800be00 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d106      	bne.n	800bdc2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f7f7 fdef 	bl	80039a0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2202      	movs	r2, #2
 800bdc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	f005 fa69 	bl	80112ac <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6818      	ldr	r0, [r3, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	461a      	mov	r2, r3
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	f005 fabd 	bl	8011364 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800bdea:	4b07      	ldr	r3, [pc, #28]	; (800be08 <HAL_SDRAM_Init+0x74>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a06      	ldr	r2, [pc, #24]	; (800be08 <HAL_SDRAM_Init+0x74>)
 800bdf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bdf4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	52004000 	.word	0x52004000

0800be0c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800be1e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800be20:	7dfb      	ldrb	r3, [r7, #23]
 800be22:	2b02      	cmp	r3, #2
 800be24:	d101      	bne.n	800be2a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800be26:	2302      	movs	r3, #2
 800be28:	e021      	b.n	800be6e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800be2a:	7dfb      	ldrb	r3, [r7, #23]
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d002      	beq.n	800be36 <HAL_SDRAM_SendCommand+0x2a>
 800be30:	7dfb      	ldrb	r3, [r7, #23]
 800be32:	2b05      	cmp	r3, #5
 800be34:	d118      	bne.n	800be68 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2202      	movs	r2, #2
 800be3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	68b9      	ldr	r1, [r7, #8]
 800be46:	4618      	mov	r0, r3
 800be48:	f005 faf6 	bl	8011438 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b02      	cmp	r3, #2
 800be52:	d104      	bne.n	800be5e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2205      	movs	r2, #5
 800be58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800be5c:	e006      	b.n	800be6c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2201      	movs	r2, #1
 800be62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800be66:	e001      	b.n	800be6c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	e000      	b.n	800be6e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3718      	adds	r7, #24
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b082      	sub	sp, #8
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
 800be7e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800be86:	b2db      	uxtb	r3, r3
 800be88:	2b02      	cmp	r3, #2
 800be8a:	d101      	bne.n	800be90 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800be8c:	2302      	movs	r3, #2
 800be8e:	e016      	b.n	800bebe <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800be96:	b2db      	uxtb	r3, r3
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d10f      	bne.n	800bebc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2202      	movs	r2, #2
 800bea0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6839      	ldr	r1, [r7, #0]
 800beaa:	4618      	mov	r0, r3
 800beac:	f005 fae8 	bl	8011480 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800beb8:	2300      	movs	r3, #0
 800beba:	e000      	b.n	800bebe <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800bebc:	2301      	movs	r3, #1
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
	...

0800bec8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d101      	bne.n	800beda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	e0f1      	b.n	800c0be <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a78      	ldr	r2, [pc, #480]	; (800c0c8 <HAL_SPI_Init+0x200>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d00f      	beq.n	800bf0a <HAL_SPI_Init+0x42>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a77      	ldr	r2, [pc, #476]	; (800c0cc <HAL_SPI_Init+0x204>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d00a      	beq.n	800bf0a <HAL_SPI_Init+0x42>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a75      	ldr	r2, [pc, #468]	; (800c0d0 <HAL_SPI_Init+0x208>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d005      	beq.n	800bf0a <HAL_SPI_Init+0x42>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	2b0f      	cmp	r3, #15
 800bf04:	d901      	bls.n	800bf0a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	e0d9      	b.n	800c0be <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f001 f816 	bl	800cf3c <SPI_GetPacketSize>
 800bf10:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a6c      	ldr	r2, [pc, #432]	; (800c0c8 <HAL_SPI_Init+0x200>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d00c      	beq.n	800bf36 <HAL_SPI_Init+0x6e>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a6a      	ldr	r2, [pc, #424]	; (800c0cc <HAL_SPI_Init+0x204>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d007      	beq.n	800bf36 <HAL_SPI_Init+0x6e>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a69      	ldr	r2, [pc, #420]	; (800c0d0 <HAL_SPI_Init+0x208>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d002      	beq.n	800bf36 <HAL_SPI_Init+0x6e>
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2b08      	cmp	r3, #8
 800bf34:	d811      	bhi.n	800bf5a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bf3a:	4a63      	ldr	r2, [pc, #396]	; (800c0c8 <HAL_SPI_Init+0x200>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d009      	beq.n	800bf54 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a61      	ldr	r2, [pc, #388]	; (800c0cc <HAL_SPI_Init+0x204>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d004      	beq.n	800bf54 <HAL_SPI_Init+0x8c>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a60      	ldr	r2, [pc, #384]	; (800c0d0 <HAL_SPI_Init+0x208>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d104      	bne.n	800bf5e <HAL_SPI_Init+0x96>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b10      	cmp	r3, #16
 800bf58:	d901      	bls.n	800bf5e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e0af      	b.n	800c0be <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d106      	bne.n	800bf78 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7f7 f80c 	bl	8002f90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2202      	movs	r2, #2
 800bf7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f022 0201 	bic.w	r2, r2, #1
 800bf8e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800bf9a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	699b      	ldr	r3, [r3, #24]
 800bfa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bfa4:	d119      	bne.n	800bfda <HAL_SPI_Init+0x112>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfae:	d103      	bne.n	800bfb8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d008      	beq.n	800bfca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d10c      	bne.n	800bfda <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bfc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfc8:	d107      	bne.n	800bfda <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bfd8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	69da      	ldr	r2, [r3, #28]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe2:	431a      	orrs	r2, r3
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	431a      	orrs	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfec:	ea42 0103 	orr.w	r1, r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	68da      	ldr	r2, [r3, #12]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	430a      	orrs	r2, r1
 800bffa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c004:	431a      	orrs	r2, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c00a:	431a      	orrs	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	699b      	ldr	r3, [r3, #24]
 800c010:	431a      	orrs	r2, r3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	431a      	orrs	r2, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	695b      	ldr	r3, [r3, #20]
 800c01c:	431a      	orrs	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a1b      	ldr	r3, [r3, #32]
 800c022:	431a      	orrs	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	431a      	orrs	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c02e:	431a      	orrs	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	431a      	orrs	r2, r3
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c03a:	ea42 0103 	orr.w	r1, r2, r3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	430a      	orrs	r2, r1
 800c048:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d113      	bne.n	800c07a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c064:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c078:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f022 0201 	bic.w	r2, r2, #1
 800c088:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c092:	2b00      	cmp	r3, #0
 800c094:	d00a      	beq.n	800c0ac <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	430a      	orrs	r2, r1
 800c0aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	40013000 	.word	0x40013000
 800c0cc:	40003800 	.word	0x40003800
 800c0d0:	40003c00 	.word	0x40003c00

0800c0d4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b08a      	sub	sp, #40	; 0x28
 800c0d8:	af02      	add	r7, sp, #8
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	603b      	str	r3, [r7, #0]
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3320      	adds	r3, #32
 800c0ea:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d101      	bne.n	800c0fe <HAL_SPI_Transmit+0x2a>
 800c0fa:	2302      	movs	r3, #2
 800c0fc:	e1d7      	b.n	800c4ae <HAL_SPI_Transmit+0x3da>
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2201      	movs	r2, #1
 800c102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c106:	f7f7 ff11 	bl	8003f2c <HAL_GetTick>
 800c10a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c112:	b2db      	uxtb	r3, r3
 800c114:	2b01      	cmp	r3, #1
 800c116:	d007      	beq.n	800c128 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800c118:	2302      	movs	r3, #2
 800c11a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2200      	movs	r2, #0
 800c120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c124:	7efb      	ldrb	r3, [r7, #27]
 800c126:	e1c2      	b.n	800c4ae <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d002      	beq.n	800c134 <HAL_SPI_Transmit+0x60>
 800c12e:	88fb      	ldrh	r3, [r7, #6]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d107      	bne.n	800c144 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800c134:	2301      	movs	r3, #1
 800c136:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2200      	movs	r2, #0
 800c13c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c140:	7efb      	ldrb	r3, [r7, #27]
 800c142:	e1b4      	b.n	800c4ae <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2203      	movs	r2, #3
 800c148:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2200      	movs	r2, #0
 800c150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	68ba      	ldr	r2, [r7, #8]
 800c158:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	88fa      	ldrh	r2, [r7, #6]
 800c15e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	88fa      	ldrh	r2, [r7, #6]
 800c166:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2200      	movs	r2, #0
 800c16e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2200      	movs	r2, #0
 800c174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2200      	movs	r2, #0
 800c17c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2200      	movs	r2, #0
 800c184:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2200      	movs	r2, #0
 800c18a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c194:	d107      	bne.n	800c1a6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	685a      	ldr	r2, [r3, #4]
 800c1ac:	4b96      	ldr	r3, [pc, #600]	; (800c408 <HAL_SPI_Transmit+0x334>)
 800c1ae:	4013      	ands	r3, r2
 800c1b0:	88f9      	ldrh	r1, [r7, #6]
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	6812      	ldr	r2, [r2, #0]
 800c1b6:	430b      	orrs	r3, r1
 800c1b8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f042 0201 	orr.w	r2, r2, #1
 800c1c8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1d2:	d107      	bne.n	800c1e4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c1e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	2b0f      	cmp	r3, #15
 800c1ea:	d947      	bls.n	800c27c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c1ec:	e03f      	b.n	800c26e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	f003 0302 	and.w	r3, r3, #2
 800c1f8:	2b02      	cmp	r3, #2
 800c1fa:	d114      	bne.n	800c226 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6812      	ldr	r2, [r2, #0]
 800c206:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c20c:	1d1a      	adds	r2, r3, #4
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c218:	b29b      	uxth	r3, r3
 800c21a:	3b01      	subs	r3, #1
 800c21c:	b29a      	uxth	r2, r3
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c224:	e023      	b.n	800c26e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c226:	f7f7 fe81 	bl	8003f2c <HAL_GetTick>
 800c22a:	4602      	mov	r2, r0
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	1ad3      	subs	r3, r2, r3
 800c230:	683a      	ldr	r2, [r7, #0]
 800c232:	429a      	cmp	r2, r3
 800c234:	d803      	bhi.n	800c23e <HAL_SPI_Transmit+0x16a>
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c23c:	d102      	bne.n	800c244 <HAL_SPI_Transmit+0x170>
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d114      	bne.n	800c26e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f000 fdab 	bl	800cda0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2200      	movs	r2, #0
 800c24e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c258:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c26a:	2303      	movs	r3, #3
 800c26c:	e11f      	b.n	800c4ae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c274:	b29b      	uxth	r3, r3
 800c276:	2b00      	cmp	r3, #0
 800c278:	d1b9      	bne.n	800c1ee <HAL_SPI_Transmit+0x11a>
 800c27a:	e0f2      	b.n	800c462 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	2b07      	cmp	r3, #7
 800c282:	f240 80e7 	bls.w	800c454 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c286:	e05d      	b.n	800c344 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	695b      	ldr	r3, [r3, #20]
 800c28e:	f003 0302 	and.w	r3, r3, #2
 800c292:	2b02      	cmp	r3, #2
 800c294:	d132      	bne.n	800c2fc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d918      	bls.n	800c2d4 <HAL_SPI_Transmit+0x200>
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d014      	beq.n	800c2d4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	6812      	ldr	r2, [r2, #0]
 800c2b4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2ba:	1d1a      	adds	r2, r3, #4
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	3b02      	subs	r3, #2
 800c2ca:	b29a      	uxth	r2, r3
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c2d2:	e037      	b.n	800c344 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2d8:	881a      	ldrh	r2, [r3, #0]
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2e2:	1c9a      	adds	r2, r3, #2
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	b29a      	uxth	r2, r3
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c2fa:	e023      	b.n	800c344 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2fc:	f7f7 fe16 	bl	8003f2c <HAL_GetTick>
 800c300:	4602      	mov	r2, r0
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	1ad3      	subs	r3, r2, r3
 800c306:	683a      	ldr	r2, [r7, #0]
 800c308:	429a      	cmp	r2, r3
 800c30a:	d803      	bhi.n	800c314 <HAL_SPI_Transmit+0x240>
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c312:	d102      	bne.n	800c31a <HAL_SPI_Transmit+0x246>
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d114      	bne.n	800c344 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f000 fd40 	bl	800cda0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2200      	movs	r2, #0
 800c324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c32e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2201      	movs	r2, #1
 800c33c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c340:	2303      	movs	r3, #3
 800c342:	e0b4      	b.n	800c4ae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d19b      	bne.n	800c288 <HAL_SPI_Transmit+0x1b4>
 800c350:	e087      	b.n	800c462 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	695b      	ldr	r3, [r3, #20]
 800c358:	f003 0302 	and.w	r3, r3, #2
 800c35c:	2b02      	cmp	r3, #2
 800c35e:	d155      	bne.n	800c40c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c366:	b29b      	uxth	r3, r3
 800c368:	2b03      	cmp	r3, #3
 800c36a:	d918      	bls.n	800c39e <HAL_SPI_Transmit+0x2ca>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c370:	2b40      	cmp	r3, #64	; 0x40
 800c372:	d914      	bls.n	800c39e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	6812      	ldr	r2, [r2, #0]
 800c37e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c384:	1d1a      	adds	r2, r3, #4
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c390:	b29b      	uxth	r3, r3
 800c392:	3b04      	subs	r3, #4
 800c394:	b29a      	uxth	r2, r3
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c39c:	e05a      	b.n	800c454 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d917      	bls.n	800c3da <HAL_SPI_Transmit+0x306>
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d013      	beq.n	800c3da <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3b6:	881a      	ldrh	r2, [r3, #0]
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3c0:	1c9a      	adds	r2, r3, #2
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	3b02      	subs	r3, #2
 800c3d0:	b29a      	uxth	r2, r3
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c3d8:	e03c      	b.n	800c454 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	3320      	adds	r3, #32
 800c3e4:	7812      	ldrb	r2, [r2, #0]
 800c3e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3ec:	1c5a      	adds	r2, r3, #1
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c404:	e026      	b.n	800c454 <HAL_SPI_Transmit+0x380>
 800c406:	bf00      	nop
 800c408:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c40c:	f7f7 fd8e 	bl	8003f2c <HAL_GetTick>
 800c410:	4602      	mov	r2, r0
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	1ad3      	subs	r3, r2, r3
 800c416:	683a      	ldr	r2, [r7, #0]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d803      	bhi.n	800c424 <HAL_SPI_Transmit+0x350>
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c422:	d102      	bne.n	800c42a <HAL_SPI_Transmit+0x356>
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d114      	bne.n	800c454 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	f000 fcb8 	bl	800cda0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2200      	movs	r2, #0
 800c434:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c43e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2201      	movs	r2, #1
 800c44c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c450:	2303      	movs	r3, #3
 800c452:	e02c      	b.n	800c4ae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f47f af78 	bne.w	800c352 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	9300      	str	r3, [sp, #0]
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	2200      	movs	r2, #0
 800c46a:	2108      	movs	r1, #8
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f000 fd37 	bl	800cee0 <SPI_WaitOnFlagUntilTimeout>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d007      	beq.n	800c488 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c47e:	f043 0220 	orr.w	r2, r3, #32
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f000 fc89 	bl	800cda0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2200      	movs	r2, #0
 800c492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2201      	movs	r2, #1
 800c49a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d001      	beq.n	800c4ac <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	e000      	b.n	800c4ae <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800c4ac:	7efb      	ldrb	r3, [r7, #27]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3720      	adds	r7, #32
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop

0800c4b8 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b086      	sub	sp, #24
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	60f8      	str	r0, [r7, #12]
 800c4c0:	60b9      	str	r1, [r7, #8]
 800c4c2:	607a      	str	r2, [r7, #4]
 800c4c4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d101      	bne.n	800c4d8 <HAL_SPI_TransmitReceive_DMA+0x20>
 800c4d4:	2302      	movs	r3, #2
 800c4d6:	e1b4      	b.n	800c842 <HAL_SPI_TransmitReceive_DMA+0x38a>
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c4e6:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c4ee:	7dbb      	ldrb	r3, [r7, #22]
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d012      	beq.n	800c51a <HAL_SPI_TransmitReceive_DMA+0x62>
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4fa:	d106      	bne.n	800c50a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800c500:	2b00      	cmp	r3, #0
 800c502:	d102      	bne.n	800c50a <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800c504:	7dbb      	ldrb	r3, [r7, #22]
 800c506:	2b04      	cmp	r3, #4
 800c508:	d007      	beq.n	800c51a <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800c50a:	2302      	movs	r3, #2
 800c50c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2200      	movs	r2, #0
 800c512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c516:	7dfb      	ldrb	r3, [r7, #23]
 800c518:	e193      	b.n	800c842 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d005      	beq.n	800c52c <HAL_SPI_TransmitReceive_DMA+0x74>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d002      	beq.n	800c52c <HAL_SPI_TransmitReceive_DMA+0x74>
 800c526:	887b      	ldrh	r3, [r7, #2]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d107      	bne.n	800c53c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2200      	movs	r2, #0
 800c534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c538:	7dfb      	ldrb	r3, [r7, #23]
 800c53a:	e182      	b.n	800c842 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c542:	b2db      	uxtb	r3, r3
 800c544:	2b04      	cmp	r3, #4
 800c546:	d003      	beq.n	800c550 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2205      	movs	r2, #5
 800c54c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2200      	movs	r2, #0
 800c554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	68ba      	ldr	r2, [r7, #8]
 800c55c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	887a      	ldrh	r2, [r7, #2]
 800c562:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	887a      	ldrh	r2, [r7, #2]
 800c56a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	887a      	ldrh	r2, [r7, #2]
 800c578:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	887a      	ldrh	r2, [r7, #2]
 800c580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2200      	movs	r2, #0
 800c588:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2200      	movs	r2, #0
 800c58e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	689a      	ldr	r2, [r3, #8]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c59e:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	2b0f      	cmp	r3, #15
 800c5a6:	d905      	bls.n	800c5b4 <HAL_SPI_TransmitReceive_DMA+0xfc>
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5ac:	699b      	ldr	r3, [r3, #24]
 800c5ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5b2:	d10f      	bne.n	800c5d4 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800c5b8:	2b07      	cmp	r3, #7
 800c5ba:	d913      	bls.n	800c5e4 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5c0:	699b      	ldr	r3, [r3, #24]
 800c5c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5c6:	d00d      	beq.n	800c5e4 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5cc:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c5ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5d2:	d007      	beq.n	800c5e4 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c5e0:	7dfb      	ldrb	r3, [r7, #23]
 800c5e2:	e12e      	b.n	800c842 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	2b07      	cmp	r3, #7
 800c5ea:	d840      	bhi.n	800c66e <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5f0:	699b      	ldr	r3, [r3, #24]
 800c5f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5f6:	d109      	bne.n	800c60c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	3301      	adds	r3, #1
 800c602:	105b      	asrs	r3, r3, #1
 800c604:	b29a      	uxth	r2, r3
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c610:	699b      	ldr	r3, [r3, #24]
 800c612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c616:	d109      	bne.n	800c62c <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c61e:	b29b      	uxth	r3, r3
 800c620:	3303      	adds	r3, #3
 800c622:	109b      	asrs	r3, r3, #2
 800c624:	b29a      	uxth	r2, r3
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c630:	699b      	ldr	r3, [r3, #24]
 800c632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c636:	d109      	bne.n	800c64c <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c63e:	b29b      	uxth	r3, r3
 800c640:	3301      	adds	r3, #1
 800c642:	105b      	asrs	r3, r3, #1
 800c644:	b29a      	uxth	r2, r3
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c650:	699b      	ldr	r3, [r3, #24]
 800c652:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c656:	d12e      	bne.n	800c6b6 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c65e:	b29b      	uxth	r3, r3
 800c660:	3303      	adds	r3, #3
 800c662:	109b      	asrs	r3, r3, #2
 800c664:	b29a      	uxth	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c66c:	e023      	b.n	800c6b6 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	68db      	ldr	r3, [r3, #12]
 800c672:	2b0f      	cmp	r3, #15
 800c674:	d81f      	bhi.n	800c6b6 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c67a:	699b      	ldr	r3, [r3, #24]
 800c67c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c680:	d109      	bne.n	800c696 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c688:	b29b      	uxth	r3, r3
 800c68a:	3301      	adds	r3, #1
 800c68c:	105b      	asrs	r3, r3, #1
 800c68e:	b29a      	uxth	r2, r3
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c69a:	699b      	ldr	r3, [r3, #24]
 800c69c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6a0:	d109      	bne.n	800c6b6 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	105b      	asrs	r3, r3, #1
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	2b04      	cmp	r3, #4
 800c6c0:	d108      	bne.n	800c6d4 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6c6:	4a61      	ldr	r2, [pc, #388]	; (800c84c <HAL_SPI_TransmitReceive_DMA+0x394>)
 800c6c8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6ce:	4a60      	ldr	r2, [pc, #384]	; (800c850 <HAL_SPI_TransmitReceive_DMA+0x398>)
 800c6d0:	63da      	str	r2, [r3, #60]	; 0x3c
 800c6d2:	e007      	b.n	800c6e4 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6d8:	4a5e      	ldr	r2, [pc, #376]	; (800c854 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 800c6da:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6e0:	4a5d      	ldr	r2, [pc, #372]	; (800c858 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 800c6e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6e8:	4a5c      	ldr	r2, [pc, #368]	; (800c85c <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 800c6ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	3330      	adds	r3, #48	; 0x30
 800c6fe:	4619      	mov	r1, r3
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c704:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c70c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800c70e:	f7f8 f90f 	bl	8004930 <HAL_DMA_Start_IT>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d013      	beq.n	800c740 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c71e:	f043 0210 	orr.w	r2, r3, #16
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	2201      	movs	r2, #1
 800c734:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800c73c:	7dfb      	ldrb	r3, [r7, #23]
 800c73e:	e080      	b.n	800c842 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	689a      	ldr	r2, [r3, #8]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c74e:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c754:	2200      	movs	r2, #0
 800c756:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c75c:	2200      	movs	r2, #0
 800c75e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c764:	2200      	movs	r2, #0
 800c766:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c76c:	2200      	movs	r2, #0
 800c76e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c778:	4619      	mov	r1, r3
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	3320      	adds	r3, #32
 800c780:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c788:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800c78a:	f7f8 f8d1 	bl	8004930 <HAL_DMA_Start_IT>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d013      	beq.n	800c7bc <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c79a:	f043 0210 	orr.w	r2, r3, #16
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800c7b8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ba:	e042      	b.n	800c842 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7c0:	69db      	ldr	r3, [r3, #28]
 800c7c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7c6:	d108      	bne.n	800c7da <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	6859      	ldr	r1, [r3, #4]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	4b23      	ldr	r3, [pc, #140]	; (800c860 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800c7d4:	400b      	ands	r3, r1
 800c7d6:	6053      	str	r3, [r2, #4]
 800c7d8:	e009      	b.n	800c7ee <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	685a      	ldr	r2, [r3, #4]
 800c7e0:	4b1f      	ldr	r3, [pc, #124]	; (800c860 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800c7e2:	4013      	ands	r3, r2
 800c7e4:	8879      	ldrh	r1, [r7, #2]
 800c7e6:	68fa      	ldr	r2, [r7, #12]
 800c7e8:	6812      	ldr	r2, [r2, #0]
 800c7ea:	430b      	orrs	r3, r1
 800c7ec:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	689a      	ldr	r2, [r3, #8]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c7fc:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	691a      	ldr	r2, [r3, #16]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800c80c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f042 0201 	orr.w	r2, r2, #1
 800c81c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c826:	d107      	bne.n	800c838 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c836:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2200      	movs	r2, #0
 800c83c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800c840:	7dfb      	ldrb	r3, [r7, #23]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3718      	adds	r7, #24
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	0800cced 	.word	0x0800cced
 800c850:	0800cc61 	.word	0x0800cc61
 800c854:	0800cd09 	.word	0x0800cd09
 800c858:	0800cca7 	.word	0x0800cca7
 800c85c:	0800cd25 	.word	0x0800cd25
 800c860:	ffff0000 	.word	0xffff0000

0800c864 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b08a      	sub	sp, #40	; 0x28
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	691b      	ldr	r3, [r3, #16]
 800c872:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	695b      	ldr	r3, [r3, #20]
 800c87a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800c87c:	6a3a      	ldr	r2, [r7, #32]
 800c87e:	69fb      	ldr	r3, [r7, #28]
 800c880:	4013      	ands	r3, r2
 800c882:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800c88c:	2300      	movs	r3, #0
 800c88e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c896:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	3330      	adds	r3, #48	; 0x30
 800c89e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d113      	bne.n	800c8d2 <HAL_SPI_IRQHandler+0x6e>
 800c8aa:	69bb      	ldr	r3, [r7, #24]
 800c8ac:	f003 0320 	and.w	r3, r3, #32
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d10e      	bne.n	800c8d2 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d009      	beq.n	800c8d2 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	4798      	blx	r3
    handled = 1UL;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d10f      	bne.n	800c8fc <HAL_SPI_IRQHandler+0x98>
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	f003 0301 	and.w	r3, r3, #1
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00a      	beq.n	800c8fc <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c8e6:	69bb      	ldr	r3, [r7, #24]
 800c8e8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d105      	bne.n	800c8fc <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	4798      	blx	r3
    handled = 1UL;
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c8fc:	69bb      	ldr	r3, [r7, #24]
 800c8fe:	f003 0320 	and.w	r3, r3, #32
 800c902:	2b00      	cmp	r3, #0
 800c904:	d10f      	bne.n	800c926 <HAL_SPI_IRQHandler+0xc2>
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	f003 0302 	and.w	r3, r3, #2
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d00a      	beq.n	800c926 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c916:	2b00      	cmp	r3, #0
 800c918:	d105      	bne.n	800c926 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	4798      	blx	r3
    handled = 1UL;
 800c922:	2301      	movs	r3, #1
 800c924:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800c926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f040 815a 	bne.w	800cbe2 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	f003 0308 	and.w	r3, r3, #8
 800c934:	2b00      	cmp	r3, #0
 800c936:	f000 808b 	beq.w	800ca50 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	699a      	ldr	r2, [r3, #24]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f042 0208 	orr.w	r2, r2, #8
 800c948:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	699a      	ldr	r2, [r3, #24]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f042 0210 	orr.w	r2, r2, #16
 800c958:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	699a      	ldr	r2, [r3, #24]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c968:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	691a      	ldr	r2, [r3, #16]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f022 0208 	bic.w	r2, r2, #8
 800c978:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c984:	2b00      	cmp	r3, #0
 800c986:	d13d      	bne.n	800ca04 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800c988:	e036      	b.n	800c9f8 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	2b0f      	cmp	r3, #15
 800c990:	d90b      	bls.n	800c9aa <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c99a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c99c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9a2:	1d1a      	adds	r2, r3, #4
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	665a      	str	r2, [r3, #100]	; 0x64
 800c9a8:	e01d      	b.n	800c9e6 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	2b07      	cmp	r3, #7
 800c9b0:	d90b      	bls.n	800c9ca <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	8812      	ldrh	r2, [r2, #0]
 800c9ba:	b292      	uxth	r2, r2
 800c9bc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9c2:	1c9a      	adds	r2, r3, #2
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	665a      	str	r2, [r3, #100]	; 0x64
 800c9c8:	e00d      	b.n	800c9e6 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9d6:	7812      	ldrb	r2, [r2, #0]
 800c9d8:	b2d2      	uxtb	r2, r2
 800c9da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9e0:	1c5a      	adds	r2, r3, #1
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	3b01      	subs	r3, #1
 800c9f0:	b29a      	uxth	r2, r3
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1c2      	bne.n	800c98a <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 f9cb 	bl	800cda0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d003      	beq.n	800ca24 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 f915 	bl	800cc4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ca22:	e0e3      	b.n	800cbec <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ca24:	7cfb      	ldrb	r3, [r7, #19]
 800ca26:	2b05      	cmp	r3, #5
 800ca28:	d103      	bne.n	800ca32 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f7f5 f99e 	bl	8001d6c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ca30:	e0d9      	b.n	800cbe6 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ca32:	7cfb      	ldrb	r3, [r7, #19]
 800ca34:	2b04      	cmp	r3, #4
 800ca36:	d103      	bne.n	800ca40 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 f8e9 	bl	800cc10 <HAL_SPI_RxCpltCallback>
    return;
 800ca3e:	e0d2      	b.n	800cbe6 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ca40:	7cfb      	ldrb	r3, [r7, #19]
 800ca42:	2b03      	cmp	r3, #3
 800ca44:	f040 80cf 	bne.w	800cbe6 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 f8d7 	bl	800cbfc <HAL_SPI_TxCpltCallback>
    return;
 800ca4e:	e0ca      	b.n	800cbe6 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d00d      	beq.n	800ca76 <HAL_SPI_IRQHandler+0x212>
 800ca5a:	6a3b      	ldr	r3, [r7, #32]
 800ca5c:	f003 0308 	and.w	r3, r3, #8
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d008      	beq.n	800ca76 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	699a      	ldr	r2, [r3, #24]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca72:	619a      	str	r2, [r3, #24]

    return;
 800ca74:	e0ba      	b.n	800cbec <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f000 80b5 	beq.w	800cbec <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d00f      	beq.n	800caac <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca92:	f043 0204 	orr.w	r2, r3, #4
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	699a      	ldr	r2, [r3, #24]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800caaa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00f      	beq.n	800cad6 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cabc:	f043 0201 	orr.w	r2, r3, #1
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	699a      	ldr	r2, [r3, #24]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cad4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d00f      	beq.n	800cb00 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cae6:	f043 0208 	orr.w	r2, r3, #8
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	699a      	ldr	r2, [r3, #24]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cafe:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800cb00:	69bb      	ldr	r3, [r7, #24]
 800cb02:	f003 0320 	and.w	r3, r3, #32
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00f      	beq.n	800cb2a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	699a      	ldr	r2, [r3, #24]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f042 0220 	orr.w	r2, r2, #32
 800cb28:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d05a      	beq.n	800cbea <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f022 0201 	bic.w	r2, r2, #1
 800cb42:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	6919      	ldr	r1, [r3, #16]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681a      	ldr	r2, [r3, #0]
 800cb4e:	4b29      	ldr	r3, [pc, #164]	; (800cbf4 <HAL_SPI_IRQHandler+0x390>)
 800cb50:	400b      	ands	r3, r1
 800cb52:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cb5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cb5e:	d138      	bne.n	800cbd2 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	689a      	ldr	r2, [r3, #8]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cb6e:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d013      	beq.n	800cba0 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb7c:	4a1e      	ldr	r2, [pc, #120]	; (800cbf8 <HAL_SPI_IRQHandler+0x394>)
 800cb7e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7f8 fc5b 	bl	8005440 <HAL_DMA_Abort_IT>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d007      	beq.n	800cba0 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d020      	beq.n	800cbea <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbac:	4a12      	ldr	r2, [pc, #72]	; (800cbf8 <HAL_SPI_IRQHandler+0x394>)
 800cbae:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7f8 fc43 	bl	8005440 <HAL_DMA_Abort_IT>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d014      	beq.n	800cbea <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cbd0:	e00b      	b.n	800cbea <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 f836 	bl	800cc4c <HAL_SPI_ErrorCallback>
    return;
 800cbe0:	e003      	b.n	800cbea <HAL_SPI_IRQHandler+0x386>
    return;
 800cbe2:	bf00      	nop
 800cbe4:	e002      	b.n	800cbec <HAL_SPI_IRQHandler+0x388>
    return;
 800cbe6:	bf00      	nop
 800cbe8:	e000      	b.n	800cbec <HAL_SPI_IRQHandler+0x388>
    return;
 800cbea:	bf00      	nop
  }
}
 800cbec:	3728      	adds	r7, #40	; 0x28
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	fffffc94 	.word	0xfffffc94
 800cbf8:	0800cd6b 	.word	0x0800cd6b

0800cbfc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b083      	sub	sp, #12
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cc04:	bf00      	nop
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800cc18:	bf00      	nop
 800cc1a:	370c      	adds	r7, #12
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800cc2c:	bf00      	nop
 800cc2e:	370c      	adds	r7, #12
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b083      	sub	sp, #12
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800cc40:	bf00      	nop
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cc54:	bf00      	nop
 800cc56:	370c      	adds	r7, #12
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc6c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	2b07      	cmp	r3, #7
 800cc78:	d011      	beq.n	800cc9e <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc7e:	69db      	ldr	r3, [r3, #28]
 800cc80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc84:	d103      	bne.n	800cc8e <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f7ff ffc2 	bl	800cc10 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800cc8c:	e007      	b.n	800cc9e <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	691a      	ldr	r2, [r3, #16]
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f042 0208 	orr.w	r2, r2, #8
 800cc9c:	611a      	str	r2, [r3, #16]
}
 800cc9e:	bf00      	nop
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b084      	sub	sp, #16
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccb2:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b07      	cmp	r3, #7
 800ccbe:	d011      	beq.n	800cce4 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccc4:	69db      	ldr	r3, [r3, #28]
 800ccc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccca:	d103      	bne.n	800ccd4 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800cccc:	68f8      	ldr	r0, [r7, #12]
 800ccce:	f7f5 f84d 	bl	8001d6c <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800ccd2:	e007      	b.n	800cce4 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	691a      	ldr	r2, [r3, #16]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f042 0208 	orr.w	r2, r2, #8
 800cce2:	611a      	str	r2, [r3, #16]
}
 800cce4:	bf00      	nop
 800cce6:	3710      	adds	r7, #16
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ccfa:	68f8      	ldr	r0, [r7, #12]
 800ccfc:	f7ff ff92 	bl	800cc24 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cd00:	bf00      	nop
 800cd02:	3710      	adds	r7, #16
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd14:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f7ff ff8e 	bl	800cc38 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cd1c:	bf00      	nop
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd30:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7f9 fd2c 	bl	8006790 <HAL_DMA_GetError>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	d011      	beq.n	800cd62 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800cd3e:	68f8      	ldr	r0, [r7, #12]
 800cd40:	f000 f82e 	bl	800cda0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd4a:	f043 0210 	orr.w	r2, r3, #16
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2201      	movs	r2, #1
 800cd58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f7ff ff75 	bl	800cc4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800cd62:	bf00      	nop
 800cd64:	3710      	adds	r7, #16
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}

0800cd6a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b084      	sub	sp, #16
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd76:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2200      	movs	r2, #0
 800cd84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	f7ff ff5b 	bl	800cc4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cd96:	bf00      	nop
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
	...

0800cda0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	695b      	ldr	r3, [r3, #20]
 800cdae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	699a      	ldr	r2, [r3, #24]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f042 0208 	orr.w	r2, r2, #8
 800cdbe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	699a      	ldr	r2, [r3, #24]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f042 0210 	orr.w	r2, r2, #16
 800cdce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f022 0201 	bic.w	r2, r2, #1
 800cdde:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	6919      	ldr	r1, [r3, #16]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	4b3c      	ldr	r3, [pc, #240]	; (800cedc <SPI_CloseTransfer+0x13c>)
 800cdec:	400b      	ands	r3, r1
 800cdee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	689a      	ldr	r2, [r3, #8]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cdfe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	2b04      	cmp	r3, #4
 800ce0a:	d014      	beq.n	800ce36 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f003 0320 	and.w	r3, r3, #32
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d00f      	beq.n	800ce36 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	699a      	ldr	r2, [r3, #24]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f042 0220 	orr.w	r2, r2, #32
 800ce34:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	2b03      	cmp	r3, #3
 800ce40:	d014      	beq.n	800ce6c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00f      	beq.n	800ce6c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce52:	f043 0204 	orr.w	r2, r3, #4
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	699a      	ldr	r2, [r3, #24]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce6a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00f      	beq.n	800ce96 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce7c:	f043 0201 	orr.w	r2, r3, #1
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	699a      	ldr	r2, [r3, #24]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce94:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00f      	beq.n	800cec0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cea6:	f043 0208 	orr.w	r2, r3, #8
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	699a      	ldr	r2, [r3, #24]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cebe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ced0:	bf00      	nop
 800ced2:	3714      	adds	r7, #20
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr
 800cedc:	fffffc90 	.word	0xfffffc90

0800cee0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	60b9      	str	r1, [r7, #8]
 800ceea:	603b      	str	r3, [r7, #0]
 800ceec:	4613      	mov	r3, r2
 800ceee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cef0:	e010      	b.n	800cf14 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cef2:	f7f7 f81b 	bl	8003f2c <HAL_GetTick>
 800cef6:	4602      	mov	r2, r0
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	1ad3      	subs	r3, r2, r3
 800cefc:	69ba      	ldr	r2, [r7, #24]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d803      	bhi.n	800cf0a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf08:	d102      	bne.n	800cf10 <SPI_WaitOnFlagUntilTimeout+0x30>
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d101      	bne.n	800cf14 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800cf10:	2303      	movs	r3, #3
 800cf12:	e00f      	b.n	800cf34 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	695a      	ldr	r2, [r3, #20]
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	4013      	ands	r3, r2
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	bf0c      	ite	eq
 800cf24:	2301      	moveq	r3, #1
 800cf26:	2300      	movne	r3, #0
 800cf28:	b2db      	uxtb	r3, r3
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	79fb      	ldrb	r3, [r7, #7]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d0df      	beq.n	800cef2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800cf32:	2300      	movs	r3, #0
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3710      	adds	r7, #16
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf48:	095b      	lsrs	r3, r3, #5
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	68db      	ldr	r3, [r3, #12]
 800cf52:	3301      	adds	r3, #1
 800cf54:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	3307      	adds	r3, #7
 800cf5a:	08db      	lsrs	r3, r3, #3
 800cf5c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	68fa      	ldr	r2, [r7, #12]
 800cf62:	fb02 f303 	mul.w	r3, r2, r3
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3714      	adds	r7, #20
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b082      	sub	sp, #8
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d101      	bne.n	800cf84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf80:	2301      	movs	r3, #1
 800cf82:	e049      	b.n	800d018 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d106      	bne.n	800cf9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f7f6 fad3 	bl	8003544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2202      	movs	r2, #2
 800cfa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	3304      	adds	r3, #4
 800cfae:	4619      	mov	r1, r3
 800cfb0:	4610      	mov	r0, r2
 800cfb2:	f000 fda1 	bl	800daf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2201      	movs	r2, #1
 800cfea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2201      	movs	r2, #1
 800cff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2201      	movs	r2, #1
 800cffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2201      	movs	r2, #1
 800d002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2201      	movs	r2, #1
 800d00a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2201      	movs	r2, #1
 800d012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d016:	2300      	movs	r3, #0
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3708      	adds	r7, #8
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	2b01      	cmp	r3, #1
 800d032:	d001      	beq.n	800d038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d034:	2301      	movs	r3, #1
 800d036:	e054      	b.n	800d0e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2202      	movs	r2, #2
 800d03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	68da      	ldr	r2, [r3, #12]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f042 0201 	orr.w	r2, r2, #1
 800d04e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a26      	ldr	r2, [pc, #152]	; (800d0f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d022      	beq.n	800d0a0 <HAL_TIM_Base_Start_IT+0x80>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d062:	d01d      	beq.n	800d0a0 <HAL_TIM_Base_Start_IT+0x80>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a22      	ldr	r2, [pc, #136]	; (800d0f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d018      	beq.n	800d0a0 <HAL_TIM_Base_Start_IT+0x80>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4a21      	ldr	r2, [pc, #132]	; (800d0f8 <HAL_TIM_Base_Start_IT+0xd8>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d013      	beq.n	800d0a0 <HAL_TIM_Base_Start_IT+0x80>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a1f      	ldr	r2, [pc, #124]	; (800d0fc <HAL_TIM_Base_Start_IT+0xdc>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d00e      	beq.n	800d0a0 <HAL_TIM_Base_Start_IT+0x80>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4a1e      	ldr	r2, [pc, #120]	; (800d100 <HAL_TIM_Base_Start_IT+0xe0>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d009      	beq.n	800d0a0 <HAL_TIM_Base_Start_IT+0x80>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a1c      	ldr	r2, [pc, #112]	; (800d104 <HAL_TIM_Base_Start_IT+0xe4>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d004      	beq.n	800d0a0 <HAL_TIM_Base_Start_IT+0x80>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a1b      	ldr	r2, [pc, #108]	; (800d108 <HAL_TIM_Base_Start_IT+0xe8>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d115      	bne.n	800d0cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	689a      	ldr	r2, [r3, #8]
 800d0a6:	4b19      	ldr	r3, [pc, #100]	; (800d10c <HAL_TIM_Base_Start_IT+0xec>)
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2b06      	cmp	r3, #6
 800d0b0:	d015      	beq.n	800d0de <HAL_TIM_Base_Start_IT+0xbe>
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0b8:	d011      	beq.n	800d0de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f042 0201 	orr.w	r2, r2, #1
 800d0c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0ca:	e008      	b.n	800d0de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f042 0201 	orr.w	r2, r2, #1
 800d0da:	601a      	str	r2, [r3, #0]
 800d0dc:	e000      	b.n	800d0e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3714      	adds	r7, #20
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	40010000 	.word	0x40010000
 800d0f4:	40000400 	.word	0x40000400
 800d0f8:	40000800 	.word	0x40000800
 800d0fc:	40000c00 	.word	0x40000c00
 800d100:	40010400 	.word	0x40010400
 800d104:	40001800 	.word	0x40001800
 800d108:	40014000 	.word	0x40014000
 800d10c:	00010007 	.word	0x00010007

0800d110 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d101      	bne.n	800d122 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	e049      	b.n	800d1b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d106      	bne.n	800d13c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2200      	movs	r2, #0
 800d132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 f841 	bl	800d1be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2202      	movs	r2, #2
 800d140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	3304      	adds	r3, #4
 800d14c:	4619      	mov	r1, r3
 800d14e:	4610      	mov	r0, r2
 800d150:	f000 fcd2 	bl	800daf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2201      	movs	r2, #1
 800d158:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2201      	movs	r2, #1
 800d170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2201      	movs	r2, #1
 800d178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2201      	movs	r2, #1
 800d180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2201      	movs	r2, #1
 800d188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2201      	movs	r2, #1
 800d190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d1b4:	2300      	movs	r3, #0
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3708      	adds	r7, #8
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d1be:	b480      	push	{r7}
 800d1c0:	b083      	sub	sp, #12
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d1c6:	bf00      	nop
 800d1c8:	370c      	adds	r7, #12
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr

0800d1d2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800d1d2:	b580      	push	{r7, lr}
 800d1d4:	b082      	sub	sp, #8
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d101      	bne.n	800d1e4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e049      	b.n	800d278 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d106      	bne.n	800d1fe <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 f841 	bl	800d280 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2202      	movs	r2, #2
 800d202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	3304      	adds	r3, #4
 800d20e:	4619      	mov	r1, r3
 800d210:	4610      	mov	r0, r2
 800d212:	f000 fc71 	bl	800daf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2201      	movs	r2, #1
 800d21a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2201      	movs	r2, #1
 800d222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2201      	movs	r2, #1
 800d22a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2201      	movs	r2, #1
 800d232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2201      	movs	r2, #1
 800d23a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2201      	movs	r2, #1
 800d242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2201      	movs	r2, #1
 800d24a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2201      	movs	r2, #1
 800d252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2201      	movs	r2, #1
 800d25a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2201      	movs	r2, #1
 800d262:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2201      	movs	r2, #1
 800d26a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2201      	movs	r2, #1
 800d272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800d288:	bf00      	nop
 800d28a:	370c      	adds	r7, #12
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr

0800d294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	691b      	ldr	r3, [r3, #16]
 800d2a2:	f003 0302 	and.w	r3, r3, #2
 800d2a6:	2b02      	cmp	r3, #2
 800d2a8:	d122      	bne.n	800d2f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	f003 0302 	and.w	r3, r3, #2
 800d2b4:	2b02      	cmp	r3, #2
 800d2b6:	d11b      	bne.n	800d2f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f06f 0202 	mvn.w	r2, #2
 800d2c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	699b      	ldr	r3, [r3, #24]
 800d2ce:	f003 0303 	and.w	r3, r3, #3
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d003      	beq.n	800d2de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f000 fbf0 	bl	800dabc <HAL_TIM_IC_CaptureCallback>
 800d2dc:	e005      	b.n	800d2ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 fbe2 	bl	800daa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 fbf3 	bl	800dad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	691b      	ldr	r3, [r3, #16]
 800d2f6:	f003 0304 	and.w	r3, r3, #4
 800d2fa:	2b04      	cmp	r3, #4
 800d2fc:	d122      	bne.n	800d344 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	f003 0304 	and.w	r3, r3, #4
 800d308:	2b04      	cmp	r3, #4
 800d30a:	d11b      	bne.n	800d344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f06f 0204 	mvn.w	r2, #4
 800d314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2202      	movs	r2, #2
 800d31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	699b      	ldr	r3, [r3, #24]
 800d322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d326:	2b00      	cmp	r3, #0
 800d328:	d003      	beq.n	800d332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 fbc6 	bl	800dabc <HAL_TIM_IC_CaptureCallback>
 800d330:	e005      	b.n	800d33e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 fbb8 	bl	800daa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f000 fbc9 	bl	800dad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2200      	movs	r2, #0
 800d342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	691b      	ldr	r3, [r3, #16]
 800d34a:	f003 0308 	and.w	r3, r3, #8
 800d34e:	2b08      	cmp	r3, #8
 800d350:	d122      	bne.n	800d398 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	68db      	ldr	r3, [r3, #12]
 800d358:	f003 0308 	and.w	r3, r3, #8
 800d35c:	2b08      	cmp	r3, #8
 800d35e:	d11b      	bne.n	800d398 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f06f 0208 	mvn.w	r2, #8
 800d368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2204      	movs	r2, #4
 800d36e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	69db      	ldr	r3, [r3, #28]
 800d376:	f003 0303 	and.w	r3, r3, #3
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d003      	beq.n	800d386 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 fb9c 	bl	800dabc <HAL_TIM_IC_CaptureCallback>
 800d384:	e005      	b.n	800d392 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 fb8e 	bl	800daa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 fb9f 	bl	800dad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2200      	movs	r2, #0
 800d396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	691b      	ldr	r3, [r3, #16]
 800d39e:	f003 0310 	and.w	r3, r3, #16
 800d3a2:	2b10      	cmp	r3, #16
 800d3a4:	d122      	bne.n	800d3ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	f003 0310 	and.w	r3, r3, #16
 800d3b0:	2b10      	cmp	r3, #16
 800d3b2:	d11b      	bne.n	800d3ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f06f 0210 	mvn.w	r2, #16
 800d3bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2208      	movs	r2, #8
 800d3c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	69db      	ldr	r3, [r3, #28]
 800d3ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d003      	beq.n	800d3da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 fb72 	bl	800dabc <HAL_TIM_IC_CaptureCallback>
 800d3d8:	e005      	b.n	800d3e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 fb64 	bl	800daa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 fb75 	bl	800dad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	691b      	ldr	r3, [r3, #16]
 800d3f2:	f003 0301 	and.w	r3, r3, #1
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d10e      	bne.n	800d418 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	68db      	ldr	r3, [r3, #12]
 800d400:	f003 0301 	and.w	r3, r3, #1
 800d404:	2b01      	cmp	r3, #1
 800d406:	d107      	bne.n	800d418 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f06f 0201 	mvn.w	r2, #1
 800d410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f7f4 fd74 	bl	8001f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	691b      	ldr	r3, [r3, #16]
 800d41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d422:	2b80      	cmp	r3, #128	; 0x80
 800d424:	d10e      	bne.n	800d444 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d430:	2b80      	cmp	r3, #128	; 0x80
 800d432:	d107      	bne.n	800d444 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d43c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f001 fab4 	bl	800e9ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	691b      	ldr	r3, [r3, #16]
 800d44a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d44e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d452:	d10e      	bne.n	800d472 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d45e:	2b80      	cmp	r3, #128	; 0x80
 800d460:	d107      	bne.n	800d472 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d46a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f001 faa7 	bl	800e9c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	691b      	ldr	r3, [r3, #16]
 800d478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d47c:	2b40      	cmp	r3, #64	; 0x40
 800d47e:	d10e      	bne.n	800d49e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	68db      	ldr	r3, [r3, #12]
 800d486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d48a:	2b40      	cmp	r3, #64	; 0x40
 800d48c:	d107      	bne.n	800d49e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 fb23 	bl	800dae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	691b      	ldr	r3, [r3, #16]
 800d4a4:	f003 0320 	and.w	r3, r3, #32
 800d4a8:	2b20      	cmp	r3, #32
 800d4aa:	d10e      	bne.n	800d4ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	f003 0320 	and.w	r3, r3, #32
 800d4b6:	2b20      	cmp	r3, #32
 800d4b8:	d107      	bne.n	800d4ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f06f 0220 	mvn.w	r2, #32
 800d4c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f001 fa67 	bl	800e998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d4ca:	bf00      	nop
 800d4cc:	3708      	adds	r7, #8
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b086      	sub	sp, #24
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	60f8      	str	r0, [r7, #12]
 800d4da:	60b9      	str	r1, [r7, #8]
 800d4dc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d101      	bne.n	800d4f0 <HAL_TIM_IC_ConfigChannel+0x1e>
 800d4ec:	2302      	movs	r3, #2
 800d4ee:	e088      	b.n	800d602 <HAL_TIM_IC_ConfigChannel+0x130>
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d11b      	bne.n	800d536 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	6818      	ldr	r0, [r3, #0]
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	6819      	ldr	r1, [r3, #0]
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	685a      	ldr	r2, [r3, #4]
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	68db      	ldr	r3, [r3, #12]
 800d50e:	f000 ff4d 	bl	800e3ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	699a      	ldr	r2, [r3, #24]
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f022 020c 	bic.w	r2, r2, #12
 800d520:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	6999      	ldr	r1, [r3, #24]
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	689a      	ldr	r2, [r3, #8]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	430a      	orrs	r2, r1
 800d532:	619a      	str	r2, [r3, #24]
 800d534:	e060      	b.n	800d5f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2b04      	cmp	r3, #4
 800d53a:	d11c      	bne.n	800d576 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	6818      	ldr	r0, [r3, #0]
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	6819      	ldr	r1, [r3, #0]
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	685a      	ldr	r2, [r3, #4]
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	68db      	ldr	r3, [r3, #12]
 800d54c:	f000 ffd1 	bl	800e4f2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	699a      	ldr	r2, [r3, #24]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d55e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	6999      	ldr	r1, [r3, #24]
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	689b      	ldr	r3, [r3, #8]
 800d56a:	021a      	lsls	r2, r3, #8
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	430a      	orrs	r2, r1
 800d572:	619a      	str	r2, [r3, #24]
 800d574:	e040      	b.n	800d5f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2b08      	cmp	r3, #8
 800d57a:	d11b      	bne.n	800d5b4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6818      	ldr	r0, [r3, #0]
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	6819      	ldr	r1, [r3, #0]
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	685a      	ldr	r2, [r3, #4]
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	f001 f81e 	bl	800e5cc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	69da      	ldr	r2, [r3, #28]
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f022 020c 	bic.w	r2, r2, #12
 800d59e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	69d9      	ldr	r1, [r3, #28]
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	689a      	ldr	r2, [r3, #8]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	430a      	orrs	r2, r1
 800d5b0:	61da      	str	r2, [r3, #28]
 800d5b2:	e021      	b.n	800d5f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2b0c      	cmp	r3, #12
 800d5b8:	d11c      	bne.n	800d5f4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	6818      	ldr	r0, [r3, #0]
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	6819      	ldr	r1, [r3, #0]
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	685a      	ldr	r2, [r3, #4]
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	f001 f83b 	bl	800e644 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	69da      	ldr	r2, [r3, #28]
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d5dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	69d9      	ldr	r1, [r3, #28]
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	689b      	ldr	r3, [r3, #8]
 800d5e8:	021a      	lsls	r2, r3, #8
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	430a      	orrs	r2, r1
 800d5f0:	61da      	str	r2, [r3, #28]
 800d5f2:	e001      	b.n	800d5f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d600:	7dfb      	ldrb	r3, [r7, #23]
}
 800d602:	4618      	mov	r0, r3
 800d604:	3718      	adds	r7, #24
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
	...

0800d60c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b086      	sub	sp, #24
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d618:	2300      	movs	r3, #0
 800d61a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d622:	2b01      	cmp	r3, #1
 800d624:	d101      	bne.n	800d62a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d626:	2302      	movs	r3, #2
 800d628:	e0ff      	b.n	800d82a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2201      	movs	r2, #1
 800d62e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2b14      	cmp	r3, #20
 800d636:	f200 80f0 	bhi.w	800d81a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d63a:	a201      	add	r2, pc, #4	; (adr r2, 800d640 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d640:	0800d695 	.word	0x0800d695
 800d644:	0800d81b 	.word	0x0800d81b
 800d648:	0800d81b 	.word	0x0800d81b
 800d64c:	0800d81b 	.word	0x0800d81b
 800d650:	0800d6d5 	.word	0x0800d6d5
 800d654:	0800d81b 	.word	0x0800d81b
 800d658:	0800d81b 	.word	0x0800d81b
 800d65c:	0800d81b 	.word	0x0800d81b
 800d660:	0800d717 	.word	0x0800d717
 800d664:	0800d81b 	.word	0x0800d81b
 800d668:	0800d81b 	.word	0x0800d81b
 800d66c:	0800d81b 	.word	0x0800d81b
 800d670:	0800d757 	.word	0x0800d757
 800d674:	0800d81b 	.word	0x0800d81b
 800d678:	0800d81b 	.word	0x0800d81b
 800d67c:	0800d81b 	.word	0x0800d81b
 800d680:	0800d799 	.word	0x0800d799
 800d684:	0800d81b 	.word	0x0800d81b
 800d688:	0800d81b 	.word	0x0800d81b
 800d68c:	0800d81b 	.word	0x0800d81b
 800d690:	0800d7d9 	.word	0x0800d7d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	68b9      	ldr	r1, [r7, #8]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f000 fac6 	bl	800dc2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	699a      	ldr	r2, [r3, #24]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f042 0208 	orr.w	r2, r2, #8
 800d6ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	699a      	ldr	r2, [r3, #24]
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f022 0204 	bic.w	r2, r2, #4
 800d6be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	6999      	ldr	r1, [r3, #24]
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	691a      	ldr	r2, [r3, #16]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	430a      	orrs	r2, r1
 800d6d0:	619a      	str	r2, [r3, #24]
      break;
 800d6d2:	e0a5      	b.n	800d820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	68b9      	ldr	r1, [r7, #8]
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f000 fb36 	bl	800dd4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	699a      	ldr	r2, [r3, #24]
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d6ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	699a      	ldr	r2, [r3, #24]
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d6fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	6999      	ldr	r1, [r3, #24]
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	691b      	ldr	r3, [r3, #16]
 800d70a:	021a      	lsls	r2, r3, #8
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	430a      	orrs	r2, r1
 800d712:	619a      	str	r2, [r3, #24]
      break;
 800d714:	e084      	b.n	800d820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	68b9      	ldr	r1, [r7, #8]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f000 fb9f 	bl	800de60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	69da      	ldr	r2, [r3, #28]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f042 0208 	orr.w	r2, r2, #8
 800d730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	69da      	ldr	r2, [r3, #28]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f022 0204 	bic.w	r2, r2, #4
 800d740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	69d9      	ldr	r1, [r3, #28]
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	691a      	ldr	r2, [r3, #16]
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	430a      	orrs	r2, r1
 800d752:	61da      	str	r2, [r3, #28]
      break;
 800d754:	e064      	b.n	800d820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	68b9      	ldr	r1, [r7, #8]
 800d75c:	4618      	mov	r0, r3
 800d75e:	f000 fc07 	bl	800df70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	69da      	ldr	r2, [r3, #28]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	69da      	ldr	r2, [r3, #28]
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	69d9      	ldr	r1, [r3, #28]
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	021a      	lsls	r2, r3, #8
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	430a      	orrs	r2, r1
 800d794:	61da      	str	r2, [r3, #28]
      break;
 800d796:	e043      	b.n	800d820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	68b9      	ldr	r1, [r7, #8]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 fc50 	bl	800e044 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f042 0208 	orr.w	r2, r2, #8
 800d7b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f022 0204 	bic.w	r2, r2, #4
 800d7c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	691a      	ldr	r2, [r3, #16]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	430a      	orrs	r2, r1
 800d7d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d7d6:	e023      	b.n	800d820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	68b9      	ldr	r1, [r7, #8]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f000 fc94 	bl	800e10c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d7f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d802:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	691b      	ldr	r3, [r3, #16]
 800d80e:	021a      	lsls	r2, r3, #8
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	430a      	orrs	r2, r1
 800d816:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d818:	e002      	b.n	800d820 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d81a:	2301      	movs	r3, #1
 800d81c:	75fb      	strb	r3, [r7, #23]
      break;
 800d81e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2200      	movs	r2, #0
 800d824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d828:	7dfb      	ldrb	r3, [r7, #23]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3718      	adds	r7, #24
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop

0800d834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d83e:	2300      	movs	r3, #0
 800d840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d101      	bne.n	800d850 <HAL_TIM_ConfigClockSource+0x1c>
 800d84c:	2302      	movs	r3, #2
 800d84e:	e0dc      	b.n	800da0a <HAL_TIM_ConfigClockSource+0x1d6>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2201      	movs	r2, #1
 800d854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2202      	movs	r2, #2
 800d85c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d868:	68ba      	ldr	r2, [r7, #8]
 800d86a:	4b6a      	ldr	r3, [pc, #424]	; (800da14 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d86c:	4013      	ands	r3, r2
 800d86e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d876:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68ba      	ldr	r2, [r7, #8]
 800d87e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a64      	ldr	r2, [pc, #400]	; (800da18 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d886:	4293      	cmp	r3, r2
 800d888:	f000 80a9 	beq.w	800d9de <HAL_TIM_ConfigClockSource+0x1aa>
 800d88c:	4a62      	ldr	r2, [pc, #392]	; (800da18 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	f200 80ae 	bhi.w	800d9f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d894:	4a61      	ldr	r2, [pc, #388]	; (800da1c <HAL_TIM_ConfigClockSource+0x1e8>)
 800d896:	4293      	cmp	r3, r2
 800d898:	f000 80a1 	beq.w	800d9de <HAL_TIM_ConfigClockSource+0x1aa>
 800d89c:	4a5f      	ldr	r2, [pc, #380]	; (800da1c <HAL_TIM_ConfigClockSource+0x1e8>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	f200 80a6 	bhi.w	800d9f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d8a4:	4a5e      	ldr	r2, [pc, #376]	; (800da20 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	f000 8099 	beq.w	800d9de <HAL_TIM_ConfigClockSource+0x1aa>
 800d8ac:	4a5c      	ldr	r2, [pc, #368]	; (800da20 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	f200 809e 	bhi.w	800d9f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d8b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d8b8:	f000 8091 	beq.w	800d9de <HAL_TIM_ConfigClockSource+0x1aa>
 800d8bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d8c0:	f200 8096 	bhi.w	800d9f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d8c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8c8:	f000 8089 	beq.w	800d9de <HAL_TIM_ConfigClockSource+0x1aa>
 800d8cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8d0:	f200 808e 	bhi.w	800d9f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d8d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8d8:	d03e      	beq.n	800d958 <HAL_TIM_ConfigClockSource+0x124>
 800d8da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8de:	f200 8087 	bhi.w	800d9f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d8e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8e6:	f000 8086 	beq.w	800d9f6 <HAL_TIM_ConfigClockSource+0x1c2>
 800d8ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8ee:	d87f      	bhi.n	800d9f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d8f0:	2b70      	cmp	r3, #112	; 0x70
 800d8f2:	d01a      	beq.n	800d92a <HAL_TIM_ConfigClockSource+0xf6>
 800d8f4:	2b70      	cmp	r3, #112	; 0x70
 800d8f6:	d87b      	bhi.n	800d9f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d8f8:	2b60      	cmp	r3, #96	; 0x60
 800d8fa:	d050      	beq.n	800d99e <HAL_TIM_ConfigClockSource+0x16a>
 800d8fc:	2b60      	cmp	r3, #96	; 0x60
 800d8fe:	d877      	bhi.n	800d9f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d900:	2b50      	cmp	r3, #80	; 0x50
 800d902:	d03c      	beq.n	800d97e <HAL_TIM_ConfigClockSource+0x14a>
 800d904:	2b50      	cmp	r3, #80	; 0x50
 800d906:	d873      	bhi.n	800d9f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d908:	2b40      	cmp	r3, #64	; 0x40
 800d90a:	d058      	beq.n	800d9be <HAL_TIM_ConfigClockSource+0x18a>
 800d90c:	2b40      	cmp	r3, #64	; 0x40
 800d90e:	d86f      	bhi.n	800d9f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d910:	2b30      	cmp	r3, #48	; 0x30
 800d912:	d064      	beq.n	800d9de <HAL_TIM_ConfigClockSource+0x1aa>
 800d914:	2b30      	cmp	r3, #48	; 0x30
 800d916:	d86b      	bhi.n	800d9f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d918:	2b20      	cmp	r3, #32
 800d91a:	d060      	beq.n	800d9de <HAL_TIM_ConfigClockSource+0x1aa>
 800d91c:	2b20      	cmp	r3, #32
 800d91e:	d867      	bhi.n	800d9f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d920:	2b00      	cmp	r3, #0
 800d922:	d05c      	beq.n	800d9de <HAL_TIM_ConfigClockSource+0x1aa>
 800d924:	2b10      	cmp	r3, #16
 800d926:	d05a      	beq.n	800d9de <HAL_TIM_ConfigClockSource+0x1aa>
 800d928:	e062      	b.n	800d9f0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6818      	ldr	r0, [r3, #0]
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	6899      	ldr	r1, [r3, #8]
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	685a      	ldr	r2, [r3, #4]
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	68db      	ldr	r3, [r3, #12]
 800d93a:	f000 fedf 	bl	800e6fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	689b      	ldr	r3, [r3, #8]
 800d944:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d94c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	68ba      	ldr	r2, [r7, #8]
 800d954:	609a      	str	r2, [r3, #8]
      break;
 800d956:	e04f      	b.n	800d9f8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6818      	ldr	r0, [r3, #0]
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	6899      	ldr	r1, [r3, #8]
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	685a      	ldr	r2, [r3, #4]
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	f000 fec8 	bl	800e6fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	689a      	ldr	r2, [r3, #8]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d97a:	609a      	str	r2, [r3, #8]
      break;
 800d97c:	e03c      	b.n	800d9f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6818      	ldr	r0, [r3, #0]
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	6859      	ldr	r1, [r3, #4]
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	461a      	mov	r2, r3
 800d98c:	f000 fd82 	bl	800e494 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2150      	movs	r1, #80	; 0x50
 800d996:	4618      	mov	r0, r3
 800d998:	f000 fe92 	bl	800e6c0 <TIM_ITRx_SetConfig>
      break;
 800d99c:	e02c      	b.n	800d9f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6818      	ldr	r0, [r3, #0]
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	6859      	ldr	r1, [r3, #4]
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	f000 fdde 	bl	800e56c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2160      	movs	r1, #96	; 0x60
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f000 fe82 	bl	800e6c0 <TIM_ITRx_SetConfig>
      break;
 800d9bc:	e01c      	b.n	800d9f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6818      	ldr	r0, [r3, #0]
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	6859      	ldr	r1, [r3, #4]
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	68db      	ldr	r3, [r3, #12]
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	f000 fd62 	bl	800e494 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2140      	movs	r1, #64	; 0x40
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f000 fe72 	bl	800e6c0 <TIM_ITRx_SetConfig>
      break;
 800d9dc:	e00c      	b.n	800d9f8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	4610      	mov	r0, r2
 800d9ea:	f000 fe69 	bl	800e6c0 <TIM_ITRx_SetConfig>
      break;
 800d9ee:	e003      	b.n	800d9f8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	73fb      	strb	r3, [r7, #15]
      break;
 800d9f4:	e000      	b.n	800d9f8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d9f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800da08:	7bfb      	ldrb	r3, [r7, #15]
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	ffceff88 	.word	0xffceff88
 800da18:	00100040 	.word	0x00100040
 800da1c:	00100030 	.word	0x00100030
 800da20:	00100020 	.word	0x00100020

0800da24 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da34:	2b01      	cmp	r3, #1
 800da36:	d101      	bne.n	800da3c <HAL_TIM_SlaveConfigSynchro+0x18>
 800da38:	2302      	movs	r3, #2
 800da3a:	e031      	b.n	800daa0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2201      	movs	r2, #1
 800da40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2202      	movs	r2, #2
 800da48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800da4c:	6839      	ldr	r1, [r7, #0]
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f000 fbc2 	bl	800e1d8 <TIM_SlaveTimer_SetConfig>
 800da54:	4603      	mov	r3, r0
 800da56:	2b00      	cmp	r3, #0
 800da58:	d009      	beq.n	800da6e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2201      	movs	r2, #1
 800da5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2200      	movs	r2, #0
 800da66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800da6a:	2301      	movs	r3, #1
 800da6c:	e018      	b.n	800daa0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	68da      	ldr	r2, [r3, #12]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da7c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	68da      	ldr	r2, [r3, #12]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800da8c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2201      	movs	r2, #1
 800da92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3708      	adds	r7, #8
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dab0:	bf00      	nop
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b083      	sub	sp, #12
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dac4:	bf00      	nop
 800dac6:	370c      	adds	r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dad8:	bf00      	nop
 800dada:	370c      	adds	r7, #12
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr

0800dae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800daec:	bf00      	nop
 800daee:	370c      	adds	r7, #12
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr

0800daf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b085      	sub	sp, #20
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	4a40      	ldr	r2, [pc, #256]	; (800dc0c <TIM_Base_SetConfig+0x114>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d013      	beq.n	800db38 <TIM_Base_SetConfig+0x40>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db16:	d00f      	beq.n	800db38 <TIM_Base_SetConfig+0x40>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	4a3d      	ldr	r2, [pc, #244]	; (800dc10 <TIM_Base_SetConfig+0x118>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d00b      	beq.n	800db38 <TIM_Base_SetConfig+0x40>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	4a3c      	ldr	r2, [pc, #240]	; (800dc14 <TIM_Base_SetConfig+0x11c>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d007      	beq.n	800db38 <TIM_Base_SetConfig+0x40>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	4a3b      	ldr	r2, [pc, #236]	; (800dc18 <TIM_Base_SetConfig+0x120>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d003      	beq.n	800db38 <TIM_Base_SetConfig+0x40>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4a3a      	ldr	r2, [pc, #232]	; (800dc1c <TIM_Base_SetConfig+0x124>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d108      	bne.n	800db4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	68fa      	ldr	r2, [r7, #12]
 800db46:	4313      	orrs	r3, r2
 800db48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	4a2f      	ldr	r2, [pc, #188]	; (800dc0c <TIM_Base_SetConfig+0x114>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d01f      	beq.n	800db92 <TIM_Base_SetConfig+0x9a>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db58:	d01b      	beq.n	800db92 <TIM_Base_SetConfig+0x9a>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	4a2c      	ldr	r2, [pc, #176]	; (800dc10 <TIM_Base_SetConfig+0x118>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d017      	beq.n	800db92 <TIM_Base_SetConfig+0x9a>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	4a2b      	ldr	r2, [pc, #172]	; (800dc14 <TIM_Base_SetConfig+0x11c>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d013      	beq.n	800db92 <TIM_Base_SetConfig+0x9a>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	4a2a      	ldr	r2, [pc, #168]	; (800dc18 <TIM_Base_SetConfig+0x120>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d00f      	beq.n	800db92 <TIM_Base_SetConfig+0x9a>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	4a29      	ldr	r2, [pc, #164]	; (800dc1c <TIM_Base_SetConfig+0x124>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d00b      	beq.n	800db92 <TIM_Base_SetConfig+0x9a>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	4a28      	ldr	r2, [pc, #160]	; (800dc20 <TIM_Base_SetConfig+0x128>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d007      	beq.n	800db92 <TIM_Base_SetConfig+0x9a>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	4a27      	ldr	r2, [pc, #156]	; (800dc24 <TIM_Base_SetConfig+0x12c>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d003      	beq.n	800db92 <TIM_Base_SetConfig+0x9a>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	4a26      	ldr	r2, [pc, #152]	; (800dc28 <TIM_Base_SetConfig+0x130>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d108      	bne.n	800dba4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	68fa      	ldr	r2, [r7, #12]
 800dba0:	4313      	orrs	r3, r2
 800dba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	695b      	ldr	r3, [r3, #20]
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	68fa      	ldr	r2, [r7, #12]
 800dbb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	689a      	ldr	r2, [r3, #8]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a10      	ldr	r2, [pc, #64]	; (800dc0c <TIM_Base_SetConfig+0x114>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d00f      	beq.n	800dbf0 <TIM_Base_SetConfig+0xf8>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	4a12      	ldr	r2, [pc, #72]	; (800dc1c <TIM_Base_SetConfig+0x124>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d00b      	beq.n	800dbf0 <TIM_Base_SetConfig+0xf8>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4a11      	ldr	r2, [pc, #68]	; (800dc20 <TIM_Base_SetConfig+0x128>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d007      	beq.n	800dbf0 <TIM_Base_SetConfig+0xf8>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	4a10      	ldr	r2, [pc, #64]	; (800dc24 <TIM_Base_SetConfig+0x12c>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d003      	beq.n	800dbf0 <TIM_Base_SetConfig+0xf8>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4a0f      	ldr	r2, [pc, #60]	; (800dc28 <TIM_Base_SetConfig+0x130>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d103      	bne.n	800dbf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	691a      	ldr	r2, [r3, #16]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	615a      	str	r2, [r3, #20]
}
 800dbfe:	bf00      	nop
 800dc00:	3714      	adds	r7, #20
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	40010000 	.word	0x40010000
 800dc10:	40000400 	.word	0x40000400
 800dc14:	40000800 	.word	0x40000800
 800dc18:	40000c00 	.word	0x40000c00
 800dc1c:	40010400 	.word	0x40010400
 800dc20:	40014000 	.word	0x40014000
 800dc24:	40014400 	.word	0x40014400
 800dc28:	40014800 	.word	0x40014800

0800dc2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b087      	sub	sp, #28
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6a1b      	ldr	r3, [r3, #32]
 800dc3a:	f023 0201 	bic.w	r2, r3, #1
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6a1b      	ldr	r3, [r3, #32]
 800dc46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	699b      	ldr	r3, [r3, #24]
 800dc52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	4b37      	ldr	r3, [pc, #220]	; (800dd34 <TIM_OC1_SetConfig+0x108>)
 800dc58:	4013      	ands	r3, r2
 800dc5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f023 0303 	bic.w	r3, r3, #3
 800dc62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	4313      	orrs	r3, r2
 800dc6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	f023 0302 	bic.w	r3, r3, #2
 800dc74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	697a      	ldr	r2, [r7, #20]
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	4a2d      	ldr	r2, [pc, #180]	; (800dd38 <TIM_OC1_SetConfig+0x10c>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d00f      	beq.n	800dca8 <TIM_OC1_SetConfig+0x7c>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	4a2c      	ldr	r2, [pc, #176]	; (800dd3c <TIM_OC1_SetConfig+0x110>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d00b      	beq.n	800dca8 <TIM_OC1_SetConfig+0x7c>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	4a2b      	ldr	r2, [pc, #172]	; (800dd40 <TIM_OC1_SetConfig+0x114>)
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d007      	beq.n	800dca8 <TIM_OC1_SetConfig+0x7c>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	4a2a      	ldr	r2, [pc, #168]	; (800dd44 <TIM_OC1_SetConfig+0x118>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d003      	beq.n	800dca8 <TIM_OC1_SetConfig+0x7c>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	4a29      	ldr	r2, [pc, #164]	; (800dd48 <TIM_OC1_SetConfig+0x11c>)
 800dca4:	4293      	cmp	r3, r2
 800dca6:	d10c      	bne.n	800dcc2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	f023 0308 	bic.w	r3, r3, #8
 800dcae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	697a      	ldr	r2, [r7, #20]
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	f023 0304 	bic.w	r3, r3, #4
 800dcc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	4a1c      	ldr	r2, [pc, #112]	; (800dd38 <TIM_OC1_SetConfig+0x10c>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d00f      	beq.n	800dcea <TIM_OC1_SetConfig+0xbe>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	4a1b      	ldr	r2, [pc, #108]	; (800dd3c <TIM_OC1_SetConfig+0x110>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d00b      	beq.n	800dcea <TIM_OC1_SetConfig+0xbe>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	4a1a      	ldr	r2, [pc, #104]	; (800dd40 <TIM_OC1_SetConfig+0x114>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d007      	beq.n	800dcea <TIM_OC1_SetConfig+0xbe>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	4a19      	ldr	r2, [pc, #100]	; (800dd44 <TIM_OC1_SetConfig+0x118>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d003      	beq.n	800dcea <TIM_OC1_SetConfig+0xbe>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	4a18      	ldr	r2, [pc, #96]	; (800dd48 <TIM_OC1_SetConfig+0x11c>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d111      	bne.n	800dd0e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dcf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dcf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	695b      	ldr	r3, [r3, #20]
 800dcfe:	693a      	ldr	r2, [r7, #16]
 800dd00:	4313      	orrs	r3, r2
 800dd02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	699b      	ldr	r3, [r3, #24]
 800dd08:	693a      	ldr	r2, [r7, #16]
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	693a      	ldr	r2, [r7, #16]
 800dd12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	68fa      	ldr	r2, [r7, #12]
 800dd18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	685a      	ldr	r2, [r3, #4]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	697a      	ldr	r2, [r7, #20]
 800dd26:	621a      	str	r2, [r3, #32]
}
 800dd28:	bf00      	nop
 800dd2a:	371c      	adds	r7, #28
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr
 800dd34:	fffeff8f 	.word	0xfffeff8f
 800dd38:	40010000 	.word	0x40010000
 800dd3c:	40010400 	.word	0x40010400
 800dd40:	40014000 	.word	0x40014000
 800dd44:	40014400 	.word	0x40014400
 800dd48:	40014800 	.word	0x40014800

0800dd4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b087      	sub	sp, #28
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6a1b      	ldr	r3, [r3, #32]
 800dd5a:	f023 0210 	bic.w	r2, r3, #16
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6a1b      	ldr	r3, [r3, #32]
 800dd66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	685b      	ldr	r3, [r3, #4]
 800dd6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	699b      	ldr	r3, [r3, #24]
 800dd72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dd74:	68fa      	ldr	r2, [r7, #12]
 800dd76:	4b34      	ldr	r3, [pc, #208]	; (800de48 <TIM_OC2_SetConfig+0xfc>)
 800dd78:	4013      	ands	r3, r2
 800dd7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	021b      	lsls	r3, r3, #8
 800dd8a:	68fa      	ldr	r2, [r7, #12]
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	f023 0320 	bic.w	r3, r3, #32
 800dd96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	011b      	lsls	r3, r3, #4
 800dd9e:	697a      	ldr	r2, [r7, #20]
 800dda0:	4313      	orrs	r3, r2
 800dda2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	4a29      	ldr	r2, [pc, #164]	; (800de4c <TIM_OC2_SetConfig+0x100>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d003      	beq.n	800ddb4 <TIM_OC2_SetConfig+0x68>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4a28      	ldr	r2, [pc, #160]	; (800de50 <TIM_OC2_SetConfig+0x104>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d10d      	bne.n	800ddd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	011b      	lsls	r3, r3, #4
 800ddc2:	697a      	ldr	r2, [r7, #20]
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	4a1e      	ldr	r2, [pc, #120]	; (800de4c <TIM_OC2_SetConfig+0x100>)
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d00f      	beq.n	800ddf8 <TIM_OC2_SetConfig+0xac>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	4a1d      	ldr	r2, [pc, #116]	; (800de50 <TIM_OC2_SetConfig+0x104>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d00b      	beq.n	800ddf8 <TIM_OC2_SetConfig+0xac>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	4a1c      	ldr	r2, [pc, #112]	; (800de54 <TIM_OC2_SetConfig+0x108>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d007      	beq.n	800ddf8 <TIM_OC2_SetConfig+0xac>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	4a1b      	ldr	r2, [pc, #108]	; (800de58 <TIM_OC2_SetConfig+0x10c>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d003      	beq.n	800ddf8 <TIM_OC2_SetConfig+0xac>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	4a1a      	ldr	r2, [pc, #104]	; (800de5c <TIM_OC2_SetConfig+0x110>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d113      	bne.n	800de20 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ddfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	695b      	ldr	r3, [r3, #20]
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	693a      	ldr	r2, [r7, #16]
 800de10:	4313      	orrs	r3, r2
 800de12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	699b      	ldr	r3, [r3, #24]
 800de18:	009b      	lsls	r3, r3, #2
 800de1a:	693a      	ldr	r2, [r7, #16]
 800de1c:	4313      	orrs	r3, r2
 800de1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	693a      	ldr	r2, [r7, #16]
 800de24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	68fa      	ldr	r2, [r7, #12]
 800de2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	685a      	ldr	r2, [r3, #4]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	697a      	ldr	r2, [r7, #20]
 800de38:	621a      	str	r2, [r3, #32]
}
 800de3a:	bf00      	nop
 800de3c:	371c      	adds	r7, #28
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr
 800de46:	bf00      	nop
 800de48:	feff8fff 	.word	0xfeff8fff
 800de4c:	40010000 	.word	0x40010000
 800de50:	40010400 	.word	0x40010400
 800de54:	40014000 	.word	0x40014000
 800de58:	40014400 	.word	0x40014400
 800de5c:	40014800 	.word	0x40014800

0800de60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de60:	b480      	push	{r7}
 800de62:	b087      	sub	sp, #28
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a1b      	ldr	r3, [r3, #32]
 800de6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6a1b      	ldr	r3, [r3, #32]
 800de7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	69db      	ldr	r3, [r3, #28]
 800de86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800de88:	68fa      	ldr	r2, [r7, #12]
 800de8a:	4b33      	ldr	r3, [pc, #204]	; (800df58 <TIM_OC3_SetConfig+0xf8>)
 800de8c:	4013      	ands	r3, r2
 800de8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f023 0303 	bic.w	r3, r3, #3
 800de96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	4313      	orrs	r3, r2
 800dea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	689b      	ldr	r3, [r3, #8]
 800deae:	021b      	lsls	r3, r3, #8
 800deb0:	697a      	ldr	r2, [r7, #20]
 800deb2:	4313      	orrs	r3, r2
 800deb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	4a28      	ldr	r2, [pc, #160]	; (800df5c <TIM_OC3_SetConfig+0xfc>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d003      	beq.n	800dec6 <TIM_OC3_SetConfig+0x66>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	4a27      	ldr	r2, [pc, #156]	; (800df60 <TIM_OC3_SetConfig+0x100>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d10d      	bne.n	800dee2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800decc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	021b      	lsls	r3, r3, #8
 800ded4:	697a      	ldr	r2, [r7, #20]
 800ded6:	4313      	orrs	r3, r2
 800ded8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	4a1d      	ldr	r2, [pc, #116]	; (800df5c <TIM_OC3_SetConfig+0xfc>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d00f      	beq.n	800df0a <TIM_OC3_SetConfig+0xaa>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	4a1c      	ldr	r2, [pc, #112]	; (800df60 <TIM_OC3_SetConfig+0x100>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d00b      	beq.n	800df0a <TIM_OC3_SetConfig+0xaa>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	4a1b      	ldr	r2, [pc, #108]	; (800df64 <TIM_OC3_SetConfig+0x104>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d007      	beq.n	800df0a <TIM_OC3_SetConfig+0xaa>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4a1a      	ldr	r2, [pc, #104]	; (800df68 <TIM_OC3_SetConfig+0x108>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d003      	beq.n	800df0a <TIM_OC3_SetConfig+0xaa>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	4a19      	ldr	r2, [pc, #100]	; (800df6c <TIM_OC3_SetConfig+0x10c>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d113      	bne.n	800df32 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800df18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	695b      	ldr	r3, [r3, #20]
 800df1e:	011b      	lsls	r3, r3, #4
 800df20:	693a      	ldr	r2, [r7, #16]
 800df22:	4313      	orrs	r3, r2
 800df24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	699b      	ldr	r3, [r3, #24]
 800df2a:	011b      	lsls	r3, r3, #4
 800df2c:	693a      	ldr	r2, [r7, #16]
 800df2e:	4313      	orrs	r3, r2
 800df30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	693a      	ldr	r2, [r7, #16]
 800df36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	685a      	ldr	r2, [r3, #4]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	697a      	ldr	r2, [r7, #20]
 800df4a:	621a      	str	r2, [r3, #32]
}
 800df4c:	bf00      	nop
 800df4e:	371c      	adds	r7, #28
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr
 800df58:	fffeff8f 	.word	0xfffeff8f
 800df5c:	40010000 	.word	0x40010000
 800df60:	40010400 	.word	0x40010400
 800df64:	40014000 	.word	0x40014000
 800df68:	40014400 	.word	0x40014400
 800df6c:	40014800 	.word	0x40014800

0800df70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800df70:	b480      	push	{r7}
 800df72:	b087      	sub	sp, #28
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6a1b      	ldr	r3, [r3, #32]
 800df7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6a1b      	ldr	r3, [r3, #32]
 800df8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	69db      	ldr	r3, [r3, #28]
 800df96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	4b24      	ldr	r3, [pc, #144]	; (800e02c <TIM_OC4_SetConfig+0xbc>)
 800df9c:	4013      	ands	r3, r2
 800df9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dfa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	021b      	lsls	r3, r3, #8
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dfba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	689b      	ldr	r3, [r3, #8]
 800dfc0:	031b      	lsls	r3, r3, #12
 800dfc2:	693a      	ldr	r2, [r7, #16]
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	4a19      	ldr	r2, [pc, #100]	; (800e030 <TIM_OC4_SetConfig+0xc0>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d00f      	beq.n	800dff0 <TIM_OC4_SetConfig+0x80>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	4a18      	ldr	r2, [pc, #96]	; (800e034 <TIM_OC4_SetConfig+0xc4>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d00b      	beq.n	800dff0 <TIM_OC4_SetConfig+0x80>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	4a17      	ldr	r2, [pc, #92]	; (800e038 <TIM_OC4_SetConfig+0xc8>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d007      	beq.n	800dff0 <TIM_OC4_SetConfig+0x80>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	4a16      	ldr	r2, [pc, #88]	; (800e03c <TIM_OC4_SetConfig+0xcc>)
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d003      	beq.n	800dff0 <TIM_OC4_SetConfig+0x80>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	4a15      	ldr	r2, [pc, #84]	; (800e040 <TIM_OC4_SetConfig+0xd0>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d109      	bne.n	800e004 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dff6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	695b      	ldr	r3, [r3, #20]
 800dffc:	019b      	lsls	r3, r3, #6
 800dffe:	697a      	ldr	r2, [r7, #20]
 800e000:	4313      	orrs	r3, r2
 800e002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	697a      	ldr	r2, [r7, #20]
 800e008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	68fa      	ldr	r2, [r7, #12]
 800e00e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	685a      	ldr	r2, [r3, #4]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	693a      	ldr	r2, [r7, #16]
 800e01c:	621a      	str	r2, [r3, #32]
}
 800e01e:	bf00      	nop
 800e020:	371c      	adds	r7, #28
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr
 800e02a:	bf00      	nop
 800e02c:	feff8fff 	.word	0xfeff8fff
 800e030:	40010000 	.word	0x40010000
 800e034:	40010400 	.word	0x40010400
 800e038:	40014000 	.word	0x40014000
 800e03c:	40014400 	.word	0x40014400
 800e040:	40014800 	.word	0x40014800

0800e044 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e044:	b480      	push	{r7}
 800e046:	b087      	sub	sp, #28
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6a1b      	ldr	r3, [r3, #32]
 800e052:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6a1b      	ldr	r3, [r3, #32]
 800e05e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	4b21      	ldr	r3, [pc, #132]	; (800e0f4 <TIM_OC5_SetConfig+0xb0>)
 800e070:	4013      	ands	r3, r2
 800e072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	68fa      	ldr	r2, [r7, #12]
 800e07a:	4313      	orrs	r3, r2
 800e07c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e084:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	689b      	ldr	r3, [r3, #8]
 800e08a:	041b      	lsls	r3, r3, #16
 800e08c:	693a      	ldr	r2, [r7, #16]
 800e08e:	4313      	orrs	r3, r2
 800e090:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	4a18      	ldr	r2, [pc, #96]	; (800e0f8 <TIM_OC5_SetConfig+0xb4>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d00f      	beq.n	800e0ba <TIM_OC5_SetConfig+0x76>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4a17      	ldr	r2, [pc, #92]	; (800e0fc <TIM_OC5_SetConfig+0xb8>)
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	d00b      	beq.n	800e0ba <TIM_OC5_SetConfig+0x76>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	4a16      	ldr	r2, [pc, #88]	; (800e100 <TIM_OC5_SetConfig+0xbc>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d007      	beq.n	800e0ba <TIM_OC5_SetConfig+0x76>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	4a15      	ldr	r2, [pc, #84]	; (800e104 <TIM_OC5_SetConfig+0xc0>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d003      	beq.n	800e0ba <TIM_OC5_SetConfig+0x76>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	4a14      	ldr	r2, [pc, #80]	; (800e108 <TIM_OC5_SetConfig+0xc4>)
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d109      	bne.n	800e0ce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e0c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	695b      	ldr	r3, [r3, #20]
 800e0c6:	021b      	lsls	r3, r3, #8
 800e0c8:	697a      	ldr	r2, [r7, #20]
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	697a      	ldr	r2, [r7, #20]
 800e0d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	685a      	ldr	r2, [r3, #4]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	693a      	ldr	r2, [r7, #16]
 800e0e6:	621a      	str	r2, [r3, #32]
}
 800e0e8:	bf00      	nop
 800e0ea:	371c      	adds	r7, #28
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr
 800e0f4:	fffeff8f 	.word	0xfffeff8f
 800e0f8:	40010000 	.word	0x40010000
 800e0fc:	40010400 	.word	0x40010400
 800e100:	40014000 	.word	0x40014000
 800e104:	40014400 	.word	0x40014400
 800e108:	40014800 	.word	0x40014800

0800e10c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b087      	sub	sp, #28
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6a1b      	ldr	r3, [r3, #32]
 800e11a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6a1b      	ldr	r3, [r3, #32]
 800e126:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e134:	68fa      	ldr	r2, [r7, #12]
 800e136:	4b22      	ldr	r3, [pc, #136]	; (800e1c0 <TIM_OC6_SetConfig+0xb4>)
 800e138:	4013      	ands	r3, r2
 800e13a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	021b      	lsls	r3, r3, #8
 800e142:	68fa      	ldr	r2, [r7, #12]
 800e144:	4313      	orrs	r3, r2
 800e146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e14e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	051b      	lsls	r3, r3, #20
 800e156:	693a      	ldr	r2, [r7, #16]
 800e158:	4313      	orrs	r3, r2
 800e15a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	4a19      	ldr	r2, [pc, #100]	; (800e1c4 <TIM_OC6_SetConfig+0xb8>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d00f      	beq.n	800e184 <TIM_OC6_SetConfig+0x78>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	4a18      	ldr	r2, [pc, #96]	; (800e1c8 <TIM_OC6_SetConfig+0xbc>)
 800e168:	4293      	cmp	r3, r2
 800e16a:	d00b      	beq.n	800e184 <TIM_OC6_SetConfig+0x78>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	4a17      	ldr	r2, [pc, #92]	; (800e1cc <TIM_OC6_SetConfig+0xc0>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d007      	beq.n	800e184 <TIM_OC6_SetConfig+0x78>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4a16      	ldr	r2, [pc, #88]	; (800e1d0 <TIM_OC6_SetConfig+0xc4>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d003      	beq.n	800e184 <TIM_OC6_SetConfig+0x78>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	4a15      	ldr	r2, [pc, #84]	; (800e1d4 <TIM_OC6_SetConfig+0xc8>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d109      	bne.n	800e198 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e18a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	695b      	ldr	r3, [r3, #20]
 800e190:	029b      	lsls	r3, r3, #10
 800e192:	697a      	ldr	r2, [r7, #20]
 800e194:	4313      	orrs	r3, r2
 800e196:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	697a      	ldr	r2, [r7, #20]
 800e19c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	68fa      	ldr	r2, [r7, #12]
 800e1a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	685a      	ldr	r2, [r3, #4]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	693a      	ldr	r2, [r7, #16]
 800e1b0:	621a      	str	r2, [r3, #32]
}
 800e1b2:	bf00      	nop
 800e1b4:	371c      	adds	r7, #28
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr
 800e1be:	bf00      	nop
 800e1c0:	feff8fff 	.word	0xfeff8fff
 800e1c4:	40010000 	.word	0x40010000
 800e1c8:	40010400 	.word	0x40010400
 800e1cc:	40014000 	.word	0x40014000
 800e1d0:	40014400 	.word	0x40014400
 800e1d4:	40014800 	.word	0x40014800

0800e1d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e1ee:	693a      	ldr	r2, [r7, #16]
 800e1f0:	4b65      	ldr	r3, [pc, #404]	; (800e388 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800e1f2:	4013      	ands	r3, r2
 800e1f4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	693a      	ldr	r2, [r7, #16]
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800e200:	693a      	ldr	r2, [r7, #16]
 800e202:	4b62      	ldr	r3, [pc, #392]	; (800e38c <TIM_SlaveTimer_SetConfig+0x1b4>)
 800e204:	4013      	ands	r3, r2
 800e206:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	693a      	ldr	r2, [r7, #16]
 800e20e:	4313      	orrs	r3, r2
 800e210:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	693a      	ldr	r2, [r7, #16]
 800e218:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	4a5c      	ldr	r2, [pc, #368]	; (800e390 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800e220:	4293      	cmp	r3, r2
 800e222:	f000 80ab 	beq.w	800e37c <TIM_SlaveTimer_SetConfig+0x1a4>
 800e226:	4a5a      	ldr	r2, [pc, #360]	; (800e390 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	f200 80a4 	bhi.w	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
 800e22e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e232:	f000 80a3 	beq.w	800e37c <TIM_SlaveTimer_SetConfig+0x1a4>
 800e236:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e23a:	f200 809c 	bhi.w	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
 800e23e:	4a55      	ldr	r2, [pc, #340]	; (800e394 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800e240:	4293      	cmp	r3, r2
 800e242:	f000 809b 	beq.w	800e37c <TIM_SlaveTimer_SetConfig+0x1a4>
 800e246:	4a53      	ldr	r2, [pc, #332]	; (800e394 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	f200 8094 	bhi.w	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
 800e24e:	4a52      	ldr	r2, [pc, #328]	; (800e398 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800e250:	4293      	cmp	r3, r2
 800e252:	f000 8093 	beq.w	800e37c <TIM_SlaveTimer_SetConfig+0x1a4>
 800e256:	4a50      	ldr	r2, [pc, #320]	; (800e398 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	f200 808c 	bhi.w	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
 800e25e:	4a4f      	ldr	r2, [pc, #316]	; (800e39c <TIM_SlaveTimer_SetConfig+0x1c4>)
 800e260:	4293      	cmp	r3, r2
 800e262:	f000 808b 	beq.w	800e37c <TIM_SlaveTimer_SetConfig+0x1a4>
 800e266:	4a4d      	ldr	r2, [pc, #308]	; (800e39c <TIM_SlaveTimer_SetConfig+0x1c4>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	f200 8084 	bhi.w	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
 800e26e:	4a4c      	ldr	r2, [pc, #304]	; (800e3a0 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800e270:	4293      	cmp	r3, r2
 800e272:	f000 8083 	beq.w	800e37c <TIM_SlaveTimer_SetConfig+0x1a4>
 800e276:	4a4a      	ldr	r2, [pc, #296]	; (800e3a0 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d87c      	bhi.n	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
 800e27c:	4a49      	ldr	r2, [pc, #292]	; (800e3a4 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d07c      	beq.n	800e37c <TIM_SlaveTimer_SetConfig+0x1a4>
 800e282:	4a48      	ldr	r2, [pc, #288]	; (800e3a4 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d876      	bhi.n	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
 800e288:	4a47      	ldr	r2, [pc, #284]	; (800e3a8 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d076      	beq.n	800e37c <TIM_SlaveTimer_SetConfig+0x1a4>
 800e28e:	4a46      	ldr	r2, [pc, #280]	; (800e3a8 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800e290:	4293      	cmp	r3, r2
 800e292:	d870      	bhi.n	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
 800e294:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e298:	d070      	beq.n	800e37c <TIM_SlaveTimer_SetConfig+0x1a4>
 800e29a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e29e:	d86a      	bhi.n	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
 800e2a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2a4:	d06a      	beq.n	800e37c <TIM_SlaveTimer_SetConfig+0x1a4>
 800e2a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2aa:	d864      	bhi.n	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
 800e2ac:	2b70      	cmp	r3, #112	; 0x70
 800e2ae:	d01a      	beq.n	800e2e6 <TIM_SlaveTimer_SetConfig+0x10e>
 800e2b0:	2b70      	cmp	r3, #112	; 0x70
 800e2b2:	d860      	bhi.n	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
 800e2b4:	2b60      	cmp	r3, #96	; 0x60
 800e2b6:	d054      	beq.n	800e362 <TIM_SlaveTimer_SetConfig+0x18a>
 800e2b8:	2b60      	cmp	r3, #96	; 0x60
 800e2ba:	d85c      	bhi.n	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
 800e2bc:	2b50      	cmp	r3, #80	; 0x50
 800e2be:	d046      	beq.n	800e34e <TIM_SlaveTimer_SetConfig+0x176>
 800e2c0:	2b50      	cmp	r3, #80	; 0x50
 800e2c2:	d858      	bhi.n	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
 800e2c4:	2b40      	cmp	r3, #64	; 0x40
 800e2c6:	d019      	beq.n	800e2fc <TIM_SlaveTimer_SetConfig+0x124>
 800e2c8:	2b40      	cmp	r3, #64	; 0x40
 800e2ca:	d854      	bhi.n	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
 800e2cc:	2b30      	cmp	r3, #48	; 0x30
 800e2ce:	d055      	beq.n	800e37c <TIM_SlaveTimer_SetConfig+0x1a4>
 800e2d0:	2b30      	cmp	r3, #48	; 0x30
 800e2d2:	d850      	bhi.n	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
 800e2d4:	2b20      	cmp	r3, #32
 800e2d6:	d051      	beq.n	800e37c <TIM_SlaveTimer_SetConfig+0x1a4>
 800e2d8:	2b20      	cmp	r3, #32
 800e2da:	d84c      	bhi.n	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d04d      	beq.n	800e37c <TIM_SlaveTimer_SetConfig+0x1a4>
 800e2e0:	2b10      	cmp	r3, #16
 800e2e2:	d04b      	beq.n	800e37c <TIM_SlaveTimer_SetConfig+0x1a4>
 800e2e4:	e047      	b.n	800e376 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6818      	ldr	r0, [r3, #0]
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	68d9      	ldr	r1, [r3, #12]
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	689a      	ldr	r2, [r3, #8]
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	691b      	ldr	r3, [r3, #16]
 800e2f6:	f000 fa01 	bl	800e6fc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800e2fa:	e040      	b.n	800e37e <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	2b05      	cmp	r3, #5
 800e302:	d101      	bne.n	800e308 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800e304:	2301      	movs	r3, #1
 800e306:	e03b      	b.n	800e380 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	6a1b      	ldr	r3, [r3, #32]
 800e30e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	6a1a      	ldr	r2, [r3, #32]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f022 0201 	bic.w	r2, r2, #1
 800e31e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	699b      	ldr	r3, [r3, #24]
 800e326:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e32e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	691b      	ldr	r3, [r3, #16]
 800e334:	011b      	lsls	r3, r3, #4
 800e336:	68ba      	ldr	r2, [r7, #8]
 800e338:	4313      	orrs	r3, r2
 800e33a:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	68ba      	ldr	r2, [r7, #8]
 800e342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	68fa      	ldr	r2, [r7, #12]
 800e34a:	621a      	str	r2, [r3, #32]
      break;
 800e34c:	e017      	b.n	800e37e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6818      	ldr	r0, [r3, #0]
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	6899      	ldr	r1, [r3, #8]
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	691b      	ldr	r3, [r3, #16]
 800e35a:	461a      	mov	r2, r3
 800e35c:	f000 f89a 	bl	800e494 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800e360:	e00d      	b.n	800e37e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6818      	ldr	r0, [r3, #0]
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	6899      	ldr	r1, [r3, #8]
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	691b      	ldr	r3, [r3, #16]
 800e36e:	461a      	mov	r2, r3
 800e370:	f000 f8fc 	bl	800e56c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800e374:	e003      	b.n	800e37e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800e376:	2301      	movs	r3, #1
 800e378:	75fb      	strb	r3, [r7, #23]
      break;
 800e37a:	e000      	b.n	800e37e <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800e37c:	bf00      	nop
  }

  return status;
 800e37e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e380:	4618      	mov	r0, r3
 800e382:	3718      	adds	r7, #24
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	ffcfff8f 	.word	0xffcfff8f
 800e38c:	fffefff8 	.word	0xfffefff8
 800e390:	00200010 	.word	0x00200010
 800e394:	00100070 	.word	0x00100070
 800e398:	00100060 	.word	0x00100060
 800e39c:	00100050 	.word	0x00100050
 800e3a0:	00100040 	.word	0x00100040
 800e3a4:	00100030 	.word	0x00100030
 800e3a8:	00100020 	.word	0x00100020

0800e3ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b087      	sub	sp, #28
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	607a      	str	r2, [r7, #4]
 800e3b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6a1b      	ldr	r3, [r3, #32]
 800e3be:	f023 0201 	bic.w	r2, r3, #1
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	699b      	ldr	r3, [r3, #24]
 800e3ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	6a1b      	ldr	r3, [r3, #32]
 800e3d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	4a28      	ldr	r2, [pc, #160]	; (800e478 <TIM_TI1_SetConfig+0xcc>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d01b      	beq.n	800e412 <TIM_TI1_SetConfig+0x66>
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3e0:	d017      	beq.n	800e412 <TIM_TI1_SetConfig+0x66>
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	4a25      	ldr	r2, [pc, #148]	; (800e47c <TIM_TI1_SetConfig+0xd0>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d013      	beq.n	800e412 <TIM_TI1_SetConfig+0x66>
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	4a24      	ldr	r2, [pc, #144]	; (800e480 <TIM_TI1_SetConfig+0xd4>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d00f      	beq.n	800e412 <TIM_TI1_SetConfig+0x66>
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	4a23      	ldr	r2, [pc, #140]	; (800e484 <TIM_TI1_SetConfig+0xd8>)
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	d00b      	beq.n	800e412 <TIM_TI1_SetConfig+0x66>
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	4a22      	ldr	r2, [pc, #136]	; (800e488 <TIM_TI1_SetConfig+0xdc>)
 800e3fe:	4293      	cmp	r3, r2
 800e400:	d007      	beq.n	800e412 <TIM_TI1_SetConfig+0x66>
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	4a21      	ldr	r2, [pc, #132]	; (800e48c <TIM_TI1_SetConfig+0xe0>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d003      	beq.n	800e412 <TIM_TI1_SetConfig+0x66>
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	4a20      	ldr	r2, [pc, #128]	; (800e490 <TIM_TI1_SetConfig+0xe4>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	d101      	bne.n	800e416 <TIM_TI1_SetConfig+0x6a>
 800e412:	2301      	movs	r3, #1
 800e414:	e000      	b.n	800e418 <TIM_TI1_SetConfig+0x6c>
 800e416:	2300      	movs	r3, #0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d008      	beq.n	800e42e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	f023 0303 	bic.w	r3, r3, #3
 800e422:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800e424:	697a      	ldr	r2, [r7, #20]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	4313      	orrs	r3, r2
 800e42a:	617b      	str	r3, [r7, #20]
 800e42c:	e003      	b.n	800e436 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	f043 0301 	orr.w	r3, r3, #1
 800e434:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e43c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	011b      	lsls	r3, r3, #4
 800e442:	b2db      	uxtb	r3, r3
 800e444:	697a      	ldr	r2, [r7, #20]
 800e446:	4313      	orrs	r3, r2
 800e448:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	f023 030a 	bic.w	r3, r3, #10
 800e450:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	f003 030a 	and.w	r3, r3, #10
 800e458:	693a      	ldr	r2, [r7, #16]
 800e45a:	4313      	orrs	r3, r2
 800e45c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	697a      	ldr	r2, [r7, #20]
 800e462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	693a      	ldr	r2, [r7, #16]
 800e468:	621a      	str	r2, [r3, #32]
}
 800e46a:	bf00      	nop
 800e46c:	371c      	adds	r7, #28
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop
 800e478:	40010000 	.word	0x40010000
 800e47c:	40000400 	.word	0x40000400
 800e480:	40000800 	.word	0x40000800
 800e484:	40000c00 	.word	0x40000c00
 800e488:	40010400 	.word	0x40010400
 800e48c:	40001800 	.word	0x40001800
 800e490:	40014000 	.word	0x40014000

0800e494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e494:	b480      	push	{r7}
 800e496:	b087      	sub	sp, #28
 800e498:	af00      	add	r7, sp, #0
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	60b9      	str	r1, [r7, #8]
 800e49e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	6a1b      	ldr	r3, [r3, #32]
 800e4a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	6a1b      	ldr	r3, [r3, #32]
 800e4aa:	f023 0201 	bic.w	r2, r3, #1
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	699b      	ldr	r3, [r3, #24]
 800e4b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e4be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	011b      	lsls	r3, r3, #4
 800e4c4:	693a      	ldr	r2, [r7, #16]
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	f023 030a 	bic.w	r3, r3, #10
 800e4d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e4d2:	697a      	ldr	r2, [r7, #20]
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	693a      	ldr	r2, [r7, #16]
 800e4de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	697a      	ldr	r2, [r7, #20]
 800e4e4:	621a      	str	r2, [r3, #32]
}
 800e4e6:	bf00      	nop
 800e4e8:	371c      	adds	r7, #28
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr

0800e4f2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e4f2:	b480      	push	{r7}
 800e4f4:	b087      	sub	sp, #28
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	60f8      	str	r0, [r7, #12]
 800e4fa:	60b9      	str	r1, [r7, #8]
 800e4fc:	607a      	str	r2, [r7, #4]
 800e4fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	6a1b      	ldr	r3, [r3, #32]
 800e504:	f023 0210 	bic.w	r2, r3, #16
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	699b      	ldr	r3, [r3, #24]
 800e510:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	6a1b      	ldr	r3, [r3, #32]
 800e516:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e51e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	021b      	lsls	r3, r3, #8
 800e524:	697a      	ldr	r2, [r7, #20]
 800e526:	4313      	orrs	r3, r2
 800e528:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	031b      	lsls	r3, r3, #12
 800e536:	b29b      	uxth	r3, r3
 800e538:	697a      	ldr	r2, [r7, #20]
 800e53a:	4313      	orrs	r3, r2
 800e53c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e544:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	011b      	lsls	r3, r3, #4
 800e54a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e54e:	693a      	ldr	r2, [r7, #16]
 800e550:	4313      	orrs	r3, r2
 800e552:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	697a      	ldr	r2, [r7, #20]
 800e558:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	693a      	ldr	r2, [r7, #16]
 800e55e:	621a      	str	r2, [r3, #32]
}
 800e560:	bf00      	nop
 800e562:	371c      	adds	r7, #28
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b087      	sub	sp, #28
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	6a1b      	ldr	r3, [r3, #32]
 800e57c:	f023 0210 	bic.w	r2, r3, #16
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	699b      	ldr	r3, [r3, #24]
 800e588:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6a1b      	ldr	r3, [r3, #32]
 800e58e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e596:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	031b      	lsls	r3, r3, #12
 800e59c:	697a      	ldr	r2, [r7, #20]
 800e59e:	4313      	orrs	r3, r2
 800e5a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e5a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	011b      	lsls	r3, r3, #4
 800e5ae:	693a      	ldr	r2, [r7, #16]
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	697a      	ldr	r2, [r7, #20]
 800e5b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	693a      	ldr	r2, [r7, #16]
 800e5be:	621a      	str	r2, [r3, #32]
}
 800e5c0:	bf00      	nop
 800e5c2:	371c      	adds	r7, #28
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr

0800e5cc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b087      	sub	sp, #28
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	607a      	str	r2, [r7, #4]
 800e5d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	6a1b      	ldr	r3, [r3, #32]
 800e5de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	69db      	ldr	r3, [r3, #28]
 800e5ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6a1b      	ldr	r3, [r3, #32]
 800e5f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	f023 0303 	bic.w	r3, r3, #3
 800e5f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800e5fa:	697a      	ldr	r2, [r7, #20]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	4313      	orrs	r3, r2
 800e600:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e608:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	011b      	lsls	r3, r3, #4
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	697a      	ldr	r2, [r7, #20]
 800e612:	4313      	orrs	r3, r2
 800e614:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800e61c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	021b      	lsls	r3, r3, #8
 800e622:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800e626:	693a      	ldr	r2, [r7, #16]
 800e628:	4313      	orrs	r3, r2
 800e62a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	697a      	ldr	r2, [r7, #20]
 800e630:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	693a      	ldr	r2, [r7, #16]
 800e636:	621a      	str	r2, [r3, #32]
}
 800e638:	bf00      	nop
 800e63a:	371c      	adds	r7, #28
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e644:	b480      	push	{r7}
 800e646:	b087      	sub	sp, #28
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
 800e650:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	6a1b      	ldr	r3, [r3, #32]
 800e656:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	69db      	ldr	r3, [r3, #28]
 800e662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6a1b      	ldr	r3, [r3, #32]
 800e668:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e670:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	021b      	lsls	r3, r3, #8
 800e676:	697a      	ldr	r2, [r7, #20]
 800e678:	4313      	orrs	r3, r2
 800e67a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e682:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	031b      	lsls	r3, r3, #12
 800e688:	b29b      	uxth	r3, r3
 800e68a:	697a      	ldr	r2, [r7, #20]
 800e68c:	4313      	orrs	r3, r2
 800e68e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800e696:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	031b      	lsls	r3, r3, #12
 800e69c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800e6a0:	693a      	ldr	r2, [r7, #16]
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	697a      	ldr	r2, [r7, #20]
 800e6aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	693a      	ldr	r2, [r7, #16]
 800e6b0:	621a      	str	r2, [r3, #32]
}
 800e6b2:	bf00      	nop
 800e6b4:	371c      	adds	r7, #28
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6bc:	4770      	bx	lr
	...

0800e6c0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b085      	sub	sp, #20
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	689b      	ldr	r3, [r3, #8]
 800e6ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e6d0:	68fa      	ldr	r2, [r7, #12]
 800e6d2:	4b09      	ldr	r3, [pc, #36]	; (800e6f8 <TIM_ITRx_SetConfig+0x38>)
 800e6d4:	4013      	ands	r3, r2
 800e6d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e6d8:	683a      	ldr	r2, [r7, #0]
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	f043 0307 	orr.w	r3, r3, #7
 800e6e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	609a      	str	r2, [r3, #8]
}
 800e6ea:	bf00      	nop
 800e6ec:	3714      	adds	r7, #20
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr
 800e6f6:	bf00      	nop
 800e6f8:	ffcfff8f 	.word	0xffcfff8f

0800e6fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b087      	sub	sp, #28
 800e700:	af00      	add	r7, sp, #0
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	607a      	str	r2, [r7, #4]
 800e708:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	689b      	ldr	r3, [r3, #8]
 800e70e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e716:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	021a      	lsls	r2, r3, #8
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	431a      	orrs	r2, r3
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	4313      	orrs	r3, r2
 800e724:	697a      	ldr	r2, [r7, #20]
 800e726:	4313      	orrs	r3, r2
 800e728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	697a      	ldr	r2, [r7, #20]
 800e72e:	609a      	str	r2, [r3, #8]
}
 800e730:	bf00      	nop
 800e732:	371c      	adds	r7, #28
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr

0800e73c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b085      	sub	sp, #20
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d101      	bne.n	800e754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e750:	2302      	movs	r3, #2
 800e752:	e06d      	b.n	800e830 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2201      	movs	r2, #1
 800e758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2202      	movs	r2, #2
 800e760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	689b      	ldr	r3, [r3, #8]
 800e772:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	4a30      	ldr	r2, [pc, #192]	; (800e83c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d004      	beq.n	800e788 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	4a2f      	ldr	r2, [pc, #188]	; (800e840 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e784:	4293      	cmp	r3, r2
 800e786:	d108      	bne.n	800e79a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e78e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	68fa      	ldr	r2, [r7, #12]
 800e796:	4313      	orrs	r3, r2
 800e798:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	68fa      	ldr	r2, [r7, #12]
 800e7a8:	4313      	orrs	r3, r2
 800e7aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	68fa      	ldr	r2, [r7, #12]
 800e7b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4a20      	ldr	r2, [pc, #128]	; (800e83c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d022      	beq.n	800e804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7c6:	d01d      	beq.n	800e804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	4a1d      	ldr	r2, [pc, #116]	; (800e844 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d018      	beq.n	800e804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4a1c      	ldr	r2, [pc, #112]	; (800e848 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	d013      	beq.n	800e804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4a1a      	ldr	r2, [pc, #104]	; (800e84c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d00e      	beq.n	800e804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4a15      	ldr	r2, [pc, #84]	; (800e840 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d009      	beq.n	800e804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4a16      	ldr	r2, [pc, #88]	; (800e850 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d004      	beq.n	800e804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	4a15      	ldr	r2, [pc, #84]	; (800e854 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e800:	4293      	cmp	r3, r2
 800e802:	d10c      	bne.n	800e81e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e80a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	68ba      	ldr	r2, [r7, #8]
 800e812:	4313      	orrs	r3, r2
 800e814:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	68ba      	ldr	r2, [r7, #8]
 800e81c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2201      	movs	r2, #1
 800e822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2200      	movs	r2, #0
 800e82a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e82e:	2300      	movs	r3, #0
}
 800e830:	4618      	mov	r0, r3
 800e832:	3714      	adds	r7, #20
 800e834:	46bd      	mov	sp, r7
 800e836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83a:	4770      	bx	lr
 800e83c:	40010000 	.word	0x40010000
 800e840:	40010400 	.word	0x40010400
 800e844:	40000400 	.word	0x40000400
 800e848:	40000800 	.word	0x40000800
 800e84c:	40000c00 	.word	0x40000c00
 800e850:	40001800 	.word	0x40001800
 800e854:	40014000 	.word	0x40014000

0800e858 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e858:	b480      	push	{r7}
 800e85a:	b085      	sub	sp, #20
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e862:	2300      	movs	r3, #0
 800e864:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	d101      	bne.n	800e874 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e870:	2302      	movs	r3, #2
 800e872:	e087      	b.n	800e984 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2201      	movs	r2, #1
 800e878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	68db      	ldr	r3, [r3, #12]
 800e886:	4313      	orrs	r3, r2
 800e888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	689b      	ldr	r3, [r3, #8]
 800e894:	4313      	orrs	r3, r2
 800e896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	4313      	orrs	r3, r2
 800e8a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4313      	orrs	r3, r2
 800e8b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	691b      	ldr	r3, [r3, #16]
 800e8be:	4313      	orrs	r3, r2
 800e8c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	695b      	ldr	r3, [r3, #20]
 800e8cc:	4313      	orrs	r3, r2
 800e8ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	699b      	ldr	r3, [r3, #24]
 800e8e8:	041b      	lsls	r3, r3, #16
 800e8ea:	4313      	orrs	r3, r2
 800e8ec:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	4a27      	ldr	r2, [pc, #156]	; (800e990 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d004      	beq.n	800e902 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4a25      	ldr	r2, [pc, #148]	; (800e994 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d106      	bne.n	800e910 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	69db      	ldr	r3, [r3, #28]
 800e90c:	4313      	orrs	r3, r2
 800e90e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a1e      	ldr	r2, [pc, #120]	; (800e990 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d004      	beq.n	800e924 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4a1d      	ldr	r2, [pc, #116]	; (800e994 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d126      	bne.n	800e972 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e92e:	051b      	lsls	r3, r3, #20
 800e930:	4313      	orrs	r3, r2
 800e932:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	6a1b      	ldr	r3, [r3, #32]
 800e93e:	4313      	orrs	r3, r2
 800e940:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e94c:	4313      	orrs	r3, r2
 800e94e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	4a0e      	ldr	r2, [pc, #56]	; (800e990 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d004      	beq.n	800e964 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	4a0d      	ldr	r2, [pc, #52]	; (800e994 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e960:	4293      	cmp	r3, r2
 800e962:	d106      	bne.n	800e972 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e96e:	4313      	orrs	r3, r2
 800e970:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	68fa      	ldr	r2, [r7, #12]
 800e978:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2200      	movs	r2, #0
 800e97e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e982:	2300      	movs	r3, #0
}
 800e984:	4618      	mov	r0, r3
 800e986:	3714      	adds	r7, #20
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr
 800e990:	40010000 	.word	0x40010000
 800e994:	40010400 	.word	0x40010400

0800e998 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e9a0:	bf00      	nop
 800e9a2:	370c      	adds	r7, #12
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9aa:	4770      	bx	lr

0800e9ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e9b4:	bf00      	nop
 800e9b6:	370c      	adds	r7, #12
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9be:	4770      	bx	lr

0800e9c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e9c8:	bf00      	nop
 800e9ca:	370c      	adds	r7, #12
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr

0800e9d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b082      	sub	sp, #8
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d101      	bne.n	800e9e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	e042      	b.n	800ea6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d106      	bne.n	800e9fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f7f4 fe5d 	bl	80036b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2224      	movs	r2, #36	; 0x24
 800ea02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f022 0201 	bic.w	r2, r2, #1
 800ea14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f000 fcd6 	bl	800f3c8 <UART_SetConfig>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	d101      	bne.n	800ea26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ea22:	2301      	movs	r3, #1
 800ea24:	e022      	b.n	800ea6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d002      	beq.n	800ea34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f001 fb36 	bl	80100a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	685a      	ldr	r2, [r3, #4]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ea42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	689a      	ldr	r2, [r3, #8]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ea52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	681a      	ldr	r2, [r3, #0]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f042 0201 	orr.w	r2, r2, #1
 800ea62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f001 fbbd 	bl	80101e4 <UART_CheckIdleState>
 800ea6a:	4603      	mov	r3, r0
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b08a      	sub	sp, #40	; 0x28
 800ea78:	af02      	add	r7, sp, #8
 800ea7a:	60f8      	str	r0, [r7, #12]
 800ea7c:	60b9      	str	r1, [r7, #8]
 800ea7e:	603b      	str	r3, [r7, #0]
 800ea80:	4613      	mov	r3, r2
 800ea82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea8a:	2b20      	cmp	r3, #32
 800ea8c:	f040 8083 	bne.w	800eb96 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d002      	beq.n	800ea9c <HAL_UART_Transmit+0x28>
 800ea96:	88fb      	ldrh	r3, [r7, #6]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d101      	bne.n	800eaa0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	e07b      	b.n	800eb98 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d101      	bne.n	800eaae <HAL_UART_Transmit+0x3a>
 800eaaa:	2302      	movs	r3, #2
 800eaac:	e074      	b.n	800eb98 <HAL_UART_Transmit+0x124>
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2201      	movs	r2, #1
 800eab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2200      	movs	r2, #0
 800eaba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2221      	movs	r2, #33	; 0x21
 800eac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eac6:	f7f5 fa31 	bl	8003f2c <HAL_GetTick>
 800eaca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	88fa      	ldrh	r2, [r7, #6]
 800ead0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	88fa      	ldrh	r2, [r7, #6]
 800ead8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	689b      	ldr	r3, [r3, #8]
 800eae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eae4:	d108      	bne.n	800eaf8 <HAL_UART_Transmit+0x84>
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	691b      	ldr	r3, [r3, #16]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d104      	bne.n	800eaf8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	61bb      	str	r3, [r7, #24]
 800eaf6:	e003      	b.n	800eb00 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eafc:	2300      	movs	r3, #0
 800eafe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2200      	movs	r2, #0
 800eb04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800eb08:	e02c      	b.n	800eb64 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	9300      	str	r3, [sp, #0]
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	2200      	movs	r2, #0
 800eb12:	2180      	movs	r1, #128	; 0x80
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f001 fbb0 	bl	801027a <UART_WaitOnFlagUntilTimeout>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d001      	beq.n	800eb24 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800eb20:	2303      	movs	r3, #3
 800eb22:	e039      	b.n	800eb98 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800eb24:	69fb      	ldr	r3, [r7, #28]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d10b      	bne.n	800eb42 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	881b      	ldrh	r3, [r3, #0]
 800eb2e:	461a      	mov	r2, r3
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eb38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800eb3a:	69bb      	ldr	r3, [r7, #24]
 800eb3c:	3302      	adds	r3, #2
 800eb3e:	61bb      	str	r3, [r7, #24]
 800eb40:	e007      	b.n	800eb52 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800eb42:	69fb      	ldr	r3, [r7, #28]
 800eb44:	781a      	ldrb	r2, [r3, #0]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	3301      	adds	r3, #1
 800eb50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	3b01      	subs	r3, #1
 800eb5c:	b29a      	uxth	r2, r3
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d1cc      	bne.n	800eb0a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	9300      	str	r3, [sp, #0]
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	2200      	movs	r2, #0
 800eb78:	2140      	movs	r1, #64	; 0x40
 800eb7a:	68f8      	ldr	r0, [r7, #12]
 800eb7c:	f001 fb7d 	bl	801027a <UART_WaitOnFlagUntilTimeout>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d001      	beq.n	800eb8a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800eb86:	2303      	movs	r3, #3
 800eb88:	e006      	b.n	800eb98 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2220      	movs	r2, #32
 800eb8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800eb92:	2300      	movs	r3, #0
 800eb94:	e000      	b.n	800eb98 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800eb96:	2302      	movs	r3, #2
  }
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3720      	adds	r7, #32
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b08a      	sub	sp, #40	; 0x28
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	4613      	mov	r3, r2
 800ebac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebb4:	2b20      	cmp	r3, #32
 800ebb6:	d142      	bne.n	800ec3e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d002      	beq.n	800ebc4 <HAL_UART_Receive_IT+0x24>
 800ebbe:	88fb      	ldrh	r3, [r7, #6]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d101      	bne.n	800ebc8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	e03b      	b.n	800ec40 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ebce:	2b01      	cmp	r3, #1
 800ebd0:	d101      	bne.n	800ebd6 <HAL_UART_Receive_IT+0x36>
 800ebd2:	2302      	movs	r3, #2
 800ebd4:	e034      	b.n	800ec40 <HAL_UART_Receive_IT+0xa0>
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2201      	movs	r2, #1
 800ebda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	4a17      	ldr	r2, [pc, #92]	; (800ec48 <HAL_UART_Receive_IT+0xa8>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d01f      	beq.n	800ec2e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d018      	beq.n	800ec2e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	e853 3f00 	ldrex	r3, [r3]
 800ec08:	613b      	str	r3, [r7, #16]
   return(result);
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ec10:	627b      	str	r3, [r7, #36]	; 0x24
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	461a      	mov	r2, r3
 800ec18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1a:	623b      	str	r3, [r7, #32]
 800ec1c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1e:	69f9      	ldr	r1, [r7, #28]
 800ec20:	6a3a      	ldr	r2, [r7, #32]
 800ec22:	e841 2300 	strex	r3, r2, [r1]
 800ec26:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec28:	69bb      	ldr	r3, [r7, #24]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d1e6      	bne.n	800ebfc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ec2e:	88fb      	ldrh	r3, [r7, #6]
 800ec30:	461a      	mov	r2, r3
 800ec32:	68b9      	ldr	r1, [r7, #8]
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	f001 fbe9 	bl	801040c <UART_Start_Receive_IT>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	e000      	b.n	800ec40 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ec3e:	2302      	movs	r3, #2
  }
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3728      	adds	r7, #40	; 0x28
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	58000c00 	.word	0x58000c00

0800ec4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b0ba      	sub	sp, #232	; 0xe8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	69db      	ldr	r3, [r3, #28]
 800ec5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	689b      	ldr	r3, [r3, #8]
 800ec6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ec72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ec76:	f640 030f 	movw	r3, #2063	; 0x80f
 800ec7a:	4013      	ands	r3, r2
 800ec7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ec80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d11b      	bne.n	800ecc0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ec88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec8c:	f003 0320 	and.w	r3, r3, #32
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d015      	beq.n	800ecc0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ec94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec98:	f003 0320 	and.w	r3, r3, #32
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d105      	bne.n	800ecac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d009      	beq.n	800ecc0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	f000 835a 	beq.w	800f36a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	4798      	blx	r3
      }
      return;
 800ecbe:	e354      	b.n	800f36a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ecc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	f000 811f 	beq.w	800ef08 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ecca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ecce:	4b8b      	ldr	r3, [pc, #556]	; (800eefc <HAL_UART_IRQHandler+0x2b0>)
 800ecd0:	4013      	ands	r3, r2
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d106      	bne.n	800ece4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ecd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ecda:	4b89      	ldr	r3, [pc, #548]	; (800ef00 <HAL_UART_IRQHandler+0x2b4>)
 800ecdc:	4013      	ands	r3, r2
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	f000 8112 	beq.w	800ef08 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ece4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ece8:	f003 0301 	and.w	r3, r3, #1
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d011      	beq.n	800ed14 <HAL_UART_IRQHandler+0xc8>
 800ecf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d00b      	beq.n	800ed14 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	2201      	movs	r2, #1
 800ed02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed0a:	f043 0201 	orr.w	r2, r3, #1
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed18:	f003 0302 	and.w	r3, r3, #2
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d011      	beq.n	800ed44 <HAL_UART_IRQHandler+0xf8>
 800ed20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed24:	f003 0301 	and.w	r3, r3, #1
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d00b      	beq.n	800ed44 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	2202      	movs	r2, #2
 800ed32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed3a:	f043 0204 	orr.w	r2, r3, #4
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed48:	f003 0304 	and.w	r3, r3, #4
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d011      	beq.n	800ed74 <HAL_UART_IRQHandler+0x128>
 800ed50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed54:	f003 0301 	and.w	r3, r3, #1
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00b      	beq.n	800ed74 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	2204      	movs	r2, #4
 800ed62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed6a:	f043 0202 	orr.w	r2, r3, #2
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ed74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed78:	f003 0308 	and.w	r3, r3, #8
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d017      	beq.n	800edb0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ed80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed84:	f003 0320 	and.w	r3, r3, #32
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d105      	bne.n	800ed98 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ed8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ed90:	4b5a      	ldr	r3, [pc, #360]	; (800eefc <HAL_UART_IRQHandler+0x2b0>)
 800ed92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d00b      	beq.n	800edb0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	2208      	movs	r2, #8
 800ed9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eda6:	f043 0208 	orr.w	r2, r3, #8
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800edb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d012      	beq.n	800ede2 <HAL_UART_IRQHandler+0x196>
 800edbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d00c      	beq.n	800ede2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800edd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edd8:	f043 0220 	orr.w	r2, r3, #32
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f000 82c0 	beq.w	800f36e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800edee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edf2:	f003 0320 	and.w	r3, r3, #32
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d013      	beq.n	800ee22 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800edfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edfe:	f003 0320 	and.w	r3, r3, #32
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d105      	bne.n	800ee12 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ee06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d007      	beq.n	800ee22 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d003      	beq.n	800ee22 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	689b      	ldr	r3, [r3, #8]
 800ee32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee36:	2b40      	cmp	r3, #64	; 0x40
 800ee38:	d005      	beq.n	800ee46 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ee3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ee3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d04f      	beq.n	800eee6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f001 fc0a 	bl	8010660 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	689b      	ldr	r3, [r3, #8]
 800ee52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee56:	2b40      	cmp	r3, #64	; 0x40
 800ee58:	d141      	bne.n	800eede <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	3308      	adds	r3, #8
 800ee60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ee68:	e853 3f00 	ldrex	r3, [r3]
 800ee6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ee70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ee74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	3308      	adds	r3, #8
 800ee82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ee86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ee8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ee92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ee96:	e841 2300 	strex	r3, r2, [r1]
 800ee9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ee9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d1d9      	bne.n	800ee5a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d013      	beq.n	800eed6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eeb2:	4a14      	ldr	r2, [pc, #80]	; (800ef04 <HAL_UART_IRQHandler+0x2b8>)
 800eeb4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7f6 fac0 	bl	8005440 <HAL_DMA_Abort_IT>
 800eec0:	4603      	mov	r3, r0
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d017      	beq.n	800eef6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eeca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800eed0:	4610      	mov	r0, r2
 800eed2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eed4:	e00f      	b.n	800eef6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f000 fa60 	bl	800f39c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eedc:	e00b      	b.n	800eef6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f000 fa5c 	bl	800f39c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eee4:	e007      	b.n	800eef6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 fa58 	bl	800f39c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2200      	movs	r2, #0
 800eef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800eef4:	e23b      	b.n	800f36e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eef6:	bf00      	nop
    return;
 800eef8:	e239      	b.n	800f36e <HAL_UART_IRQHandler+0x722>
 800eefa:	bf00      	nop
 800eefc:	10000001 	.word	0x10000001
 800ef00:	04000120 	.word	0x04000120
 800ef04:	0801072d 	.word	0x0801072d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	f040 81ce 	bne.w	800f2ae <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ef12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef16:	f003 0310 	and.w	r3, r3, #16
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	f000 81c7 	beq.w	800f2ae <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ef20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef24:	f003 0310 	and.w	r3, r3, #16
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	f000 81c0 	beq.w	800f2ae <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2210      	movs	r2, #16
 800ef34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	689b      	ldr	r3, [r3, #8]
 800ef3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef40:	2b40      	cmp	r3, #64	; 0x40
 800ef42:	f040 813b 	bne.w	800f1bc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	4a8b      	ldr	r2, [pc, #556]	; (800f17c <HAL_UART_IRQHandler+0x530>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d059      	beq.n	800f006 <HAL_UART_IRQHandler+0x3ba>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	4a89      	ldr	r2, [pc, #548]	; (800f180 <HAL_UART_IRQHandler+0x534>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d053      	beq.n	800f006 <HAL_UART_IRQHandler+0x3ba>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a87      	ldr	r2, [pc, #540]	; (800f184 <HAL_UART_IRQHandler+0x538>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d04d      	beq.n	800f006 <HAL_UART_IRQHandler+0x3ba>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4a85      	ldr	r2, [pc, #532]	; (800f188 <HAL_UART_IRQHandler+0x53c>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d047      	beq.n	800f006 <HAL_UART_IRQHandler+0x3ba>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4a83      	ldr	r2, [pc, #524]	; (800f18c <HAL_UART_IRQHandler+0x540>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d041      	beq.n	800f006 <HAL_UART_IRQHandler+0x3ba>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a81      	ldr	r2, [pc, #516]	; (800f190 <HAL_UART_IRQHandler+0x544>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d03b      	beq.n	800f006 <HAL_UART_IRQHandler+0x3ba>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	4a7f      	ldr	r2, [pc, #508]	; (800f194 <HAL_UART_IRQHandler+0x548>)
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d035      	beq.n	800f006 <HAL_UART_IRQHandler+0x3ba>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4a7d      	ldr	r2, [pc, #500]	; (800f198 <HAL_UART_IRQHandler+0x54c>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d02f      	beq.n	800f006 <HAL_UART_IRQHandler+0x3ba>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4a7b      	ldr	r2, [pc, #492]	; (800f19c <HAL_UART_IRQHandler+0x550>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d029      	beq.n	800f006 <HAL_UART_IRQHandler+0x3ba>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4a79      	ldr	r2, [pc, #484]	; (800f1a0 <HAL_UART_IRQHandler+0x554>)
 800efba:	4293      	cmp	r3, r2
 800efbc:	d023      	beq.n	800f006 <HAL_UART_IRQHandler+0x3ba>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4a77      	ldr	r2, [pc, #476]	; (800f1a4 <HAL_UART_IRQHandler+0x558>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d01d      	beq.n	800f006 <HAL_UART_IRQHandler+0x3ba>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	4a75      	ldr	r2, [pc, #468]	; (800f1a8 <HAL_UART_IRQHandler+0x55c>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d017      	beq.n	800f006 <HAL_UART_IRQHandler+0x3ba>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a73      	ldr	r2, [pc, #460]	; (800f1ac <HAL_UART_IRQHandler+0x560>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d011      	beq.n	800f006 <HAL_UART_IRQHandler+0x3ba>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	4a71      	ldr	r2, [pc, #452]	; (800f1b0 <HAL_UART_IRQHandler+0x564>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d00b      	beq.n	800f006 <HAL_UART_IRQHandler+0x3ba>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4a6f      	ldr	r2, [pc, #444]	; (800f1b4 <HAL_UART_IRQHandler+0x568>)
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d005      	beq.n	800f006 <HAL_UART_IRQHandler+0x3ba>
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4a6d      	ldr	r2, [pc, #436]	; (800f1b8 <HAL_UART_IRQHandler+0x56c>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d105      	bne.n	800f012 <HAL_UART_IRQHandler+0x3c6>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	b29b      	uxth	r3, r3
 800f010:	e004      	b.n	800f01c <HAL_UART_IRQHandler+0x3d0>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f020:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f024:	2b00      	cmp	r3, #0
 800f026:	f000 81a4 	beq.w	800f372 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f030:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f034:	429a      	cmp	r2, r3
 800f036:	f080 819c 	bcs.w	800f372 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f040:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f048:	69db      	ldr	r3, [r3, #28]
 800f04a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f04e:	f000 8086 	beq.w	800f15e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f05a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f05e:	e853 3f00 	ldrex	r3, [r3]
 800f062:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f066:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f06a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f06e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	461a      	mov	r2, r3
 800f078:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f07c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f080:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f084:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f088:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f08c:	e841 2300 	strex	r3, r2, [r1]
 800f090:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f094:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d1da      	bne.n	800f052 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	3308      	adds	r3, #8
 800f0a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f0a6:	e853 3f00 	ldrex	r3, [r3]
 800f0aa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f0ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f0ae:	f023 0301 	bic.w	r3, r3, #1
 800f0b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	3308      	adds	r3, #8
 800f0bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f0c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f0c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f0c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f0cc:	e841 2300 	strex	r3, r2, [r1]
 800f0d0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f0d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d1e1      	bne.n	800f09c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	3308      	adds	r3, #8
 800f0de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0e2:	e853 3f00 	ldrex	r3, [r3]
 800f0e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f0e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	3308      	adds	r3, #8
 800f0f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f0fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f0fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f100:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f102:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f104:	e841 2300 	strex	r3, r2, [r1]
 800f108:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f10a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d1e3      	bne.n	800f0d8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2220      	movs	r2, #32
 800f114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2200      	movs	r2, #0
 800f11c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f126:	e853 3f00 	ldrex	r3, [r3]
 800f12a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f12c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f12e:	f023 0310 	bic.w	r3, r3, #16
 800f132:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	461a      	mov	r2, r3
 800f13c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f140:	65bb      	str	r3, [r7, #88]	; 0x58
 800f142:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f144:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f146:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f148:	e841 2300 	strex	r3, r2, [r1]
 800f14c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f14e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f150:	2b00      	cmp	r3, #0
 800f152:	d1e4      	bne.n	800f11e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f158:	4618      	mov	r0, r3
 800f15a:	f7f5 fe53 	bl	8004e04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	1ad3      	subs	r3, r2, r3
 800f16e:	b29b      	uxth	r3, r3
 800f170:	4619      	mov	r1, r3
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f000 f91c 	bl	800f3b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f178:	e0fb      	b.n	800f372 <HAL_UART_IRQHandler+0x726>
 800f17a:	bf00      	nop
 800f17c:	40020010 	.word	0x40020010
 800f180:	40020028 	.word	0x40020028
 800f184:	40020040 	.word	0x40020040
 800f188:	40020058 	.word	0x40020058
 800f18c:	40020070 	.word	0x40020070
 800f190:	40020088 	.word	0x40020088
 800f194:	400200a0 	.word	0x400200a0
 800f198:	400200b8 	.word	0x400200b8
 800f19c:	40020410 	.word	0x40020410
 800f1a0:	40020428 	.word	0x40020428
 800f1a4:	40020440 	.word	0x40020440
 800f1a8:	40020458 	.word	0x40020458
 800f1ac:	40020470 	.word	0x40020470
 800f1b0:	40020488 	.word	0x40020488
 800f1b4:	400204a0 	.word	0x400204a0
 800f1b8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1c8:	b29b      	uxth	r3, r3
 800f1ca:	1ad3      	subs	r3, r2, r3
 800f1cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	f000 80cc 	beq.w	800f376 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f1de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	f000 80c7 	beq.w	800f376 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f0:	e853 3f00 	ldrex	r3, [r3]
 800f1f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f1fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	461a      	mov	r2, r3
 800f206:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f20a:	647b      	str	r3, [r7, #68]	; 0x44
 800f20c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f20e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f210:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f212:	e841 2300 	strex	r3, r2, [r1]
 800f216:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d1e4      	bne.n	800f1e8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	3308      	adds	r3, #8
 800f224:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f228:	e853 3f00 	ldrex	r3, [r3]
 800f22c:	623b      	str	r3, [r7, #32]
   return(result);
 800f22e:	6a3a      	ldr	r2, [r7, #32]
 800f230:	4b54      	ldr	r3, [pc, #336]	; (800f384 <HAL_UART_IRQHandler+0x738>)
 800f232:	4013      	ands	r3, r2
 800f234:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	3308      	adds	r3, #8
 800f23e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f242:	633a      	str	r2, [r7, #48]	; 0x30
 800f244:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f24a:	e841 2300 	strex	r3, r2, [r1]
 800f24e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f252:	2b00      	cmp	r3, #0
 800f254:	d1e3      	bne.n	800f21e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2220      	movs	r2, #32
 800f25a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2200      	movs	r2, #0
 800f262:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2200      	movs	r2, #0
 800f268:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	e853 3f00 	ldrex	r3, [r3]
 800f276:	60fb      	str	r3, [r7, #12]
   return(result);
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f023 0310 	bic.w	r3, r3, #16
 800f27e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	461a      	mov	r2, r3
 800f288:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f28c:	61fb      	str	r3, [r7, #28]
 800f28e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f290:	69b9      	ldr	r1, [r7, #24]
 800f292:	69fa      	ldr	r2, [r7, #28]
 800f294:	e841 2300 	strex	r3, r2, [r1]
 800f298:	617b      	str	r3, [r7, #20]
   return(result);
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d1e4      	bne.n	800f26a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f2a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f000 f882 	bl	800f3b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f2ac:	e063      	b.n	800f376 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f2ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d00e      	beq.n	800f2d8 <HAL_UART_IRQHandler+0x68c>
 800f2ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f2be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d008      	beq.n	800f2d8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f2ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f001 fec9 	bl	8011068 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f2d6:	e051      	b.n	800f37c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f2d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d014      	beq.n	800f30e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f2e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d105      	bne.n	800f2fc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f2f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f2f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d008      	beq.n	800f30e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f300:	2b00      	cmp	r3, #0
 800f302:	d03a      	beq.n	800f37a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	4798      	blx	r3
    }
    return;
 800f30c:	e035      	b.n	800f37a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f30e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f316:	2b00      	cmp	r3, #0
 800f318:	d009      	beq.n	800f32e <HAL_UART_IRQHandler+0x6e2>
 800f31a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f31e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f322:	2b00      	cmp	r3, #0
 800f324:	d003      	beq.n	800f32e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f001 fa16 	bl	8010758 <UART_EndTransmit_IT>
    return;
 800f32c:	e026      	b.n	800f37c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f32e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f336:	2b00      	cmp	r3, #0
 800f338:	d009      	beq.n	800f34e <HAL_UART_IRQHandler+0x702>
 800f33a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f33e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f342:	2b00      	cmp	r3, #0
 800f344:	d003      	beq.n	800f34e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f001 fea2 	bl	8011090 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f34c:	e016      	b.n	800f37c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f352:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f356:	2b00      	cmp	r3, #0
 800f358:	d010      	beq.n	800f37c <HAL_UART_IRQHandler+0x730>
 800f35a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f35e:	2b00      	cmp	r3, #0
 800f360:	da0c      	bge.n	800f37c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f001 fe8a 	bl	801107c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f368:	e008      	b.n	800f37c <HAL_UART_IRQHandler+0x730>
      return;
 800f36a:	bf00      	nop
 800f36c:	e006      	b.n	800f37c <HAL_UART_IRQHandler+0x730>
    return;
 800f36e:	bf00      	nop
 800f370:	e004      	b.n	800f37c <HAL_UART_IRQHandler+0x730>
      return;
 800f372:	bf00      	nop
 800f374:	e002      	b.n	800f37c <HAL_UART_IRQHandler+0x730>
      return;
 800f376:	bf00      	nop
 800f378:	e000      	b.n	800f37c <HAL_UART_IRQHandler+0x730>
    return;
 800f37a:	bf00      	nop
  }
}
 800f37c:	37e8      	adds	r7, #232	; 0xe8
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	effffffe 	.word	0xeffffffe

0800f388 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f388:	b480      	push	{r7}
 800f38a:	b083      	sub	sp, #12
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f390:	bf00      	nop
 800f392:	370c      	adds	r7, #12
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f39c:	b480      	push	{r7}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f3a4:	bf00      	nop
 800f3a6:	370c      	adds	r7, #12
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	460b      	mov	r3, r1
 800f3ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f3bc:	bf00      	nop
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f3c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f3cc:	b092      	sub	sp, #72	; 0x48
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	689a      	ldr	r2, [r3, #8]
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	691b      	ldr	r3, [r3, #16]
 800f3e0:	431a      	orrs	r2, r3
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	695b      	ldr	r3, [r3, #20]
 800f3e6:	431a      	orrs	r2, r3
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	69db      	ldr	r3, [r3, #28]
 800f3ec:	4313      	orrs	r3, r2
 800f3ee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	681a      	ldr	r2, [r3, #0]
 800f3f6:	4bbe      	ldr	r3, [pc, #760]	; (800f6f0 <UART_SetConfig+0x328>)
 800f3f8:	4013      	ands	r3, r2
 800f3fa:	697a      	ldr	r2, [r7, #20]
 800f3fc:	6812      	ldr	r2, [r2, #0]
 800f3fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f400:	430b      	orrs	r3, r1
 800f402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	685b      	ldr	r3, [r3, #4]
 800f40a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	68da      	ldr	r2, [r3, #12]
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	430a      	orrs	r2, r1
 800f418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	699b      	ldr	r3, [r3, #24]
 800f41e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	4ab3      	ldr	r2, [pc, #716]	; (800f6f4 <UART_SetConfig+0x32c>)
 800f426:	4293      	cmp	r3, r2
 800f428:	d004      	beq.n	800f434 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	6a1b      	ldr	r3, [r3, #32]
 800f42e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f430:	4313      	orrs	r3, r2
 800f432:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	689a      	ldr	r2, [r3, #8]
 800f43a:	4baf      	ldr	r3, [pc, #700]	; (800f6f8 <UART_SetConfig+0x330>)
 800f43c:	4013      	ands	r3, r2
 800f43e:	697a      	ldr	r2, [r7, #20]
 800f440:	6812      	ldr	r2, [r2, #0]
 800f442:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f444:	430b      	orrs	r3, r1
 800f446:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f44e:	f023 010f 	bic.w	r1, r3, #15
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	430a      	orrs	r2, r1
 800f45c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	4aa6      	ldr	r2, [pc, #664]	; (800f6fc <UART_SetConfig+0x334>)
 800f464:	4293      	cmp	r3, r2
 800f466:	d177      	bne.n	800f558 <UART_SetConfig+0x190>
 800f468:	4ba5      	ldr	r3, [pc, #660]	; (800f700 <UART_SetConfig+0x338>)
 800f46a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f46c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f470:	2b28      	cmp	r3, #40	; 0x28
 800f472:	d86d      	bhi.n	800f550 <UART_SetConfig+0x188>
 800f474:	a201      	add	r2, pc, #4	; (adr r2, 800f47c <UART_SetConfig+0xb4>)
 800f476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f47a:	bf00      	nop
 800f47c:	0800f521 	.word	0x0800f521
 800f480:	0800f551 	.word	0x0800f551
 800f484:	0800f551 	.word	0x0800f551
 800f488:	0800f551 	.word	0x0800f551
 800f48c:	0800f551 	.word	0x0800f551
 800f490:	0800f551 	.word	0x0800f551
 800f494:	0800f551 	.word	0x0800f551
 800f498:	0800f551 	.word	0x0800f551
 800f49c:	0800f529 	.word	0x0800f529
 800f4a0:	0800f551 	.word	0x0800f551
 800f4a4:	0800f551 	.word	0x0800f551
 800f4a8:	0800f551 	.word	0x0800f551
 800f4ac:	0800f551 	.word	0x0800f551
 800f4b0:	0800f551 	.word	0x0800f551
 800f4b4:	0800f551 	.word	0x0800f551
 800f4b8:	0800f551 	.word	0x0800f551
 800f4bc:	0800f531 	.word	0x0800f531
 800f4c0:	0800f551 	.word	0x0800f551
 800f4c4:	0800f551 	.word	0x0800f551
 800f4c8:	0800f551 	.word	0x0800f551
 800f4cc:	0800f551 	.word	0x0800f551
 800f4d0:	0800f551 	.word	0x0800f551
 800f4d4:	0800f551 	.word	0x0800f551
 800f4d8:	0800f551 	.word	0x0800f551
 800f4dc:	0800f539 	.word	0x0800f539
 800f4e0:	0800f551 	.word	0x0800f551
 800f4e4:	0800f551 	.word	0x0800f551
 800f4e8:	0800f551 	.word	0x0800f551
 800f4ec:	0800f551 	.word	0x0800f551
 800f4f0:	0800f551 	.word	0x0800f551
 800f4f4:	0800f551 	.word	0x0800f551
 800f4f8:	0800f551 	.word	0x0800f551
 800f4fc:	0800f541 	.word	0x0800f541
 800f500:	0800f551 	.word	0x0800f551
 800f504:	0800f551 	.word	0x0800f551
 800f508:	0800f551 	.word	0x0800f551
 800f50c:	0800f551 	.word	0x0800f551
 800f510:	0800f551 	.word	0x0800f551
 800f514:	0800f551 	.word	0x0800f551
 800f518:	0800f551 	.word	0x0800f551
 800f51c:	0800f549 	.word	0x0800f549
 800f520:	2301      	movs	r3, #1
 800f522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f526:	e326      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f528:	2304      	movs	r3, #4
 800f52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f52e:	e322      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f530:	2308      	movs	r3, #8
 800f532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f536:	e31e      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f538:	2310      	movs	r3, #16
 800f53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f53e:	e31a      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f540:	2320      	movs	r3, #32
 800f542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f546:	e316      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f548:	2340      	movs	r3, #64	; 0x40
 800f54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f54e:	e312      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f550:	2380      	movs	r3, #128	; 0x80
 800f552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f556:	e30e      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4a69      	ldr	r2, [pc, #420]	; (800f704 <UART_SetConfig+0x33c>)
 800f55e:	4293      	cmp	r3, r2
 800f560:	d130      	bne.n	800f5c4 <UART_SetConfig+0x1fc>
 800f562:	4b67      	ldr	r3, [pc, #412]	; (800f700 <UART_SetConfig+0x338>)
 800f564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f566:	f003 0307 	and.w	r3, r3, #7
 800f56a:	2b05      	cmp	r3, #5
 800f56c:	d826      	bhi.n	800f5bc <UART_SetConfig+0x1f4>
 800f56e:	a201      	add	r2, pc, #4	; (adr r2, 800f574 <UART_SetConfig+0x1ac>)
 800f570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f574:	0800f58d 	.word	0x0800f58d
 800f578:	0800f595 	.word	0x0800f595
 800f57c:	0800f59d 	.word	0x0800f59d
 800f580:	0800f5a5 	.word	0x0800f5a5
 800f584:	0800f5ad 	.word	0x0800f5ad
 800f588:	0800f5b5 	.word	0x0800f5b5
 800f58c:	2300      	movs	r3, #0
 800f58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f592:	e2f0      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f594:	2304      	movs	r3, #4
 800f596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f59a:	e2ec      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f59c:	2308      	movs	r3, #8
 800f59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5a2:	e2e8      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f5a4:	2310      	movs	r3, #16
 800f5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5aa:	e2e4      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f5ac:	2320      	movs	r3, #32
 800f5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5b2:	e2e0      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f5b4:	2340      	movs	r3, #64	; 0x40
 800f5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ba:	e2dc      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f5bc:	2380      	movs	r3, #128	; 0x80
 800f5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5c2:	e2d8      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	4a4f      	ldr	r2, [pc, #316]	; (800f708 <UART_SetConfig+0x340>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d130      	bne.n	800f630 <UART_SetConfig+0x268>
 800f5ce:	4b4c      	ldr	r3, [pc, #304]	; (800f700 <UART_SetConfig+0x338>)
 800f5d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5d2:	f003 0307 	and.w	r3, r3, #7
 800f5d6:	2b05      	cmp	r3, #5
 800f5d8:	d826      	bhi.n	800f628 <UART_SetConfig+0x260>
 800f5da:	a201      	add	r2, pc, #4	; (adr r2, 800f5e0 <UART_SetConfig+0x218>)
 800f5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5e0:	0800f5f9 	.word	0x0800f5f9
 800f5e4:	0800f601 	.word	0x0800f601
 800f5e8:	0800f609 	.word	0x0800f609
 800f5ec:	0800f611 	.word	0x0800f611
 800f5f0:	0800f619 	.word	0x0800f619
 800f5f4:	0800f621 	.word	0x0800f621
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5fe:	e2ba      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f600:	2304      	movs	r3, #4
 800f602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f606:	e2b6      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f608:	2308      	movs	r3, #8
 800f60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f60e:	e2b2      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f610:	2310      	movs	r3, #16
 800f612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f616:	e2ae      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f618:	2320      	movs	r3, #32
 800f61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f61e:	e2aa      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f620:	2340      	movs	r3, #64	; 0x40
 800f622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f626:	e2a6      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f628:	2380      	movs	r3, #128	; 0x80
 800f62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f62e:	e2a2      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	4a35      	ldr	r2, [pc, #212]	; (800f70c <UART_SetConfig+0x344>)
 800f636:	4293      	cmp	r3, r2
 800f638:	d130      	bne.n	800f69c <UART_SetConfig+0x2d4>
 800f63a:	4b31      	ldr	r3, [pc, #196]	; (800f700 <UART_SetConfig+0x338>)
 800f63c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f63e:	f003 0307 	and.w	r3, r3, #7
 800f642:	2b05      	cmp	r3, #5
 800f644:	d826      	bhi.n	800f694 <UART_SetConfig+0x2cc>
 800f646:	a201      	add	r2, pc, #4	; (adr r2, 800f64c <UART_SetConfig+0x284>)
 800f648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f64c:	0800f665 	.word	0x0800f665
 800f650:	0800f66d 	.word	0x0800f66d
 800f654:	0800f675 	.word	0x0800f675
 800f658:	0800f67d 	.word	0x0800f67d
 800f65c:	0800f685 	.word	0x0800f685
 800f660:	0800f68d 	.word	0x0800f68d
 800f664:	2300      	movs	r3, #0
 800f666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f66a:	e284      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f66c:	2304      	movs	r3, #4
 800f66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f672:	e280      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f674:	2308      	movs	r3, #8
 800f676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f67a:	e27c      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f67c:	2310      	movs	r3, #16
 800f67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f682:	e278      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f684:	2320      	movs	r3, #32
 800f686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f68a:	e274      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f68c:	2340      	movs	r3, #64	; 0x40
 800f68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f692:	e270      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f694:	2380      	movs	r3, #128	; 0x80
 800f696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f69a:	e26c      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4a1b      	ldr	r2, [pc, #108]	; (800f710 <UART_SetConfig+0x348>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d142      	bne.n	800f72c <UART_SetConfig+0x364>
 800f6a6:	4b16      	ldr	r3, [pc, #88]	; (800f700 <UART_SetConfig+0x338>)
 800f6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6aa:	f003 0307 	and.w	r3, r3, #7
 800f6ae:	2b05      	cmp	r3, #5
 800f6b0:	d838      	bhi.n	800f724 <UART_SetConfig+0x35c>
 800f6b2:	a201      	add	r2, pc, #4	; (adr r2, 800f6b8 <UART_SetConfig+0x2f0>)
 800f6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6b8:	0800f6d1 	.word	0x0800f6d1
 800f6bc:	0800f6d9 	.word	0x0800f6d9
 800f6c0:	0800f6e1 	.word	0x0800f6e1
 800f6c4:	0800f6e9 	.word	0x0800f6e9
 800f6c8:	0800f715 	.word	0x0800f715
 800f6cc:	0800f71d 	.word	0x0800f71d
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6d6:	e24e      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f6d8:	2304      	movs	r3, #4
 800f6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6de:	e24a      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f6e0:	2308      	movs	r3, #8
 800f6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6e6:	e246      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f6e8:	2310      	movs	r3, #16
 800f6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ee:	e242      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f6f0:	cfff69f3 	.word	0xcfff69f3
 800f6f4:	58000c00 	.word	0x58000c00
 800f6f8:	11fff4ff 	.word	0x11fff4ff
 800f6fc:	40011000 	.word	0x40011000
 800f700:	58024400 	.word	0x58024400
 800f704:	40004400 	.word	0x40004400
 800f708:	40004800 	.word	0x40004800
 800f70c:	40004c00 	.word	0x40004c00
 800f710:	40005000 	.word	0x40005000
 800f714:	2320      	movs	r3, #32
 800f716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f71a:	e22c      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f71c:	2340      	movs	r3, #64	; 0x40
 800f71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f722:	e228      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f724:	2380      	movs	r3, #128	; 0x80
 800f726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f72a:	e224      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	4ab1      	ldr	r2, [pc, #708]	; (800f9f8 <UART_SetConfig+0x630>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d176      	bne.n	800f824 <UART_SetConfig+0x45c>
 800f736:	4bb1      	ldr	r3, [pc, #708]	; (800f9fc <UART_SetConfig+0x634>)
 800f738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f73a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f73e:	2b28      	cmp	r3, #40	; 0x28
 800f740:	d86c      	bhi.n	800f81c <UART_SetConfig+0x454>
 800f742:	a201      	add	r2, pc, #4	; (adr r2, 800f748 <UART_SetConfig+0x380>)
 800f744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f748:	0800f7ed 	.word	0x0800f7ed
 800f74c:	0800f81d 	.word	0x0800f81d
 800f750:	0800f81d 	.word	0x0800f81d
 800f754:	0800f81d 	.word	0x0800f81d
 800f758:	0800f81d 	.word	0x0800f81d
 800f75c:	0800f81d 	.word	0x0800f81d
 800f760:	0800f81d 	.word	0x0800f81d
 800f764:	0800f81d 	.word	0x0800f81d
 800f768:	0800f7f5 	.word	0x0800f7f5
 800f76c:	0800f81d 	.word	0x0800f81d
 800f770:	0800f81d 	.word	0x0800f81d
 800f774:	0800f81d 	.word	0x0800f81d
 800f778:	0800f81d 	.word	0x0800f81d
 800f77c:	0800f81d 	.word	0x0800f81d
 800f780:	0800f81d 	.word	0x0800f81d
 800f784:	0800f81d 	.word	0x0800f81d
 800f788:	0800f7fd 	.word	0x0800f7fd
 800f78c:	0800f81d 	.word	0x0800f81d
 800f790:	0800f81d 	.word	0x0800f81d
 800f794:	0800f81d 	.word	0x0800f81d
 800f798:	0800f81d 	.word	0x0800f81d
 800f79c:	0800f81d 	.word	0x0800f81d
 800f7a0:	0800f81d 	.word	0x0800f81d
 800f7a4:	0800f81d 	.word	0x0800f81d
 800f7a8:	0800f805 	.word	0x0800f805
 800f7ac:	0800f81d 	.word	0x0800f81d
 800f7b0:	0800f81d 	.word	0x0800f81d
 800f7b4:	0800f81d 	.word	0x0800f81d
 800f7b8:	0800f81d 	.word	0x0800f81d
 800f7bc:	0800f81d 	.word	0x0800f81d
 800f7c0:	0800f81d 	.word	0x0800f81d
 800f7c4:	0800f81d 	.word	0x0800f81d
 800f7c8:	0800f80d 	.word	0x0800f80d
 800f7cc:	0800f81d 	.word	0x0800f81d
 800f7d0:	0800f81d 	.word	0x0800f81d
 800f7d4:	0800f81d 	.word	0x0800f81d
 800f7d8:	0800f81d 	.word	0x0800f81d
 800f7dc:	0800f81d 	.word	0x0800f81d
 800f7e0:	0800f81d 	.word	0x0800f81d
 800f7e4:	0800f81d 	.word	0x0800f81d
 800f7e8:	0800f815 	.word	0x0800f815
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7f2:	e1c0      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f7f4:	2304      	movs	r3, #4
 800f7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7fa:	e1bc      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f7fc:	2308      	movs	r3, #8
 800f7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f802:	e1b8      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f804:	2310      	movs	r3, #16
 800f806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f80a:	e1b4      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f80c:	2320      	movs	r3, #32
 800f80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f812:	e1b0      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f814:	2340      	movs	r3, #64	; 0x40
 800f816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f81a:	e1ac      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f81c:	2380      	movs	r3, #128	; 0x80
 800f81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f822:	e1a8      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	4a75      	ldr	r2, [pc, #468]	; (800fa00 <UART_SetConfig+0x638>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d130      	bne.n	800f890 <UART_SetConfig+0x4c8>
 800f82e:	4b73      	ldr	r3, [pc, #460]	; (800f9fc <UART_SetConfig+0x634>)
 800f830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f832:	f003 0307 	and.w	r3, r3, #7
 800f836:	2b05      	cmp	r3, #5
 800f838:	d826      	bhi.n	800f888 <UART_SetConfig+0x4c0>
 800f83a:	a201      	add	r2, pc, #4	; (adr r2, 800f840 <UART_SetConfig+0x478>)
 800f83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f840:	0800f859 	.word	0x0800f859
 800f844:	0800f861 	.word	0x0800f861
 800f848:	0800f869 	.word	0x0800f869
 800f84c:	0800f871 	.word	0x0800f871
 800f850:	0800f879 	.word	0x0800f879
 800f854:	0800f881 	.word	0x0800f881
 800f858:	2300      	movs	r3, #0
 800f85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f85e:	e18a      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f860:	2304      	movs	r3, #4
 800f862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f866:	e186      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f868:	2308      	movs	r3, #8
 800f86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f86e:	e182      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f870:	2310      	movs	r3, #16
 800f872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f876:	e17e      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f878:	2320      	movs	r3, #32
 800f87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f87e:	e17a      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f880:	2340      	movs	r3, #64	; 0x40
 800f882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f886:	e176      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f888:	2380      	movs	r3, #128	; 0x80
 800f88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f88e:	e172      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	4a5b      	ldr	r2, [pc, #364]	; (800fa04 <UART_SetConfig+0x63c>)
 800f896:	4293      	cmp	r3, r2
 800f898:	d130      	bne.n	800f8fc <UART_SetConfig+0x534>
 800f89a:	4b58      	ldr	r3, [pc, #352]	; (800f9fc <UART_SetConfig+0x634>)
 800f89c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f89e:	f003 0307 	and.w	r3, r3, #7
 800f8a2:	2b05      	cmp	r3, #5
 800f8a4:	d826      	bhi.n	800f8f4 <UART_SetConfig+0x52c>
 800f8a6:	a201      	add	r2, pc, #4	; (adr r2, 800f8ac <UART_SetConfig+0x4e4>)
 800f8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8ac:	0800f8c5 	.word	0x0800f8c5
 800f8b0:	0800f8cd 	.word	0x0800f8cd
 800f8b4:	0800f8d5 	.word	0x0800f8d5
 800f8b8:	0800f8dd 	.word	0x0800f8dd
 800f8bc:	0800f8e5 	.word	0x0800f8e5
 800f8c0:	0800f8ed 	.word	0x0800f8ed
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ca:	e154      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f8cc:	2304      	movs	r3, #4
 800f8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8d2:	e150      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f8d4:	2308      	movs	r3, #8
 800f8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8da:	e14c      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f8dc:	2310      	movs	r3, #16
 800f8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8e2:	e148      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f8e4:	2320      	movs	r3, #32
 800f8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ea:	e144      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f8ec:	2340      	movs	r3, #64	; 0x40
 800f8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8f2:	e140      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f8f4:	2380      	movs	r3, #128	; 0x80
 800f8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8fa:	e13c      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	4a41      	ldr	r2, [pc, #260]	; (800fa08 <UART_SetConfig+0x640>)
 800f902:	4293      	cmp	r3, r2
 800f904:	f040 8082 	bne.w	800fa0c <UART_SetConfig+0x644>
 800f908:	4b3c      	ldr	r3, [pc, #240]	; (800f9fc <UART_SetConfig+0x634>)
 800f90a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f90c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f910:	2b28      	cmp	r3, #40	; 0x28
 800f912:	d86d      	bhi.n	800f9f0 <UART_SetConfig+0x628>
 800f914:	a201      	add	r2, pc, #4	; (adr r2, 800f91c <UART_SetConfig+0x554>)
 800f916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f91a:	bf00      	nop
 800f91c:	0800f9c1 	.word	0x0800f9c1
 800f920:	0800f9f1 	.word	0x0800f9f1
 800f924:	0800f9f1 	.word	0x0800f9f1
 800f928:	0800f9f1 	.word	0x0800f9f1
 800f92c:	0800f9f1 	.word	0x0800f9f1
 800f930:	0800f9f1 	.word	0x0800f9f1
 800f934:	0800f9f1 	.word	0x0800f9f1
 800f938:	0800f9f1 	.word	0x0800f9f1
 800f93c:	0800f9c9 	.word	0x0800f9c9
 800f940:	0800f9f1 	.word	0x0800f9f1
 800f944:	0800f9f1 	.word	0x0800f9f1
 800f948:	0800f9f1 	.word	0x0800f9f1
 800f94c:	0800f9f1 	.word	0x0800f9f1
 800f950:	0800f9f1 	.word	0x0800f9f1
 800f954:	0800f9f1 	.word	0x0800f9f1
 800f958:	0800f9f1 	.word	0x0800f9f1
 800f95c:	0800f9d1 	.word	0x0800f9d1
 800f960:	0800f9f1 	.word	0x0800f9f1
 800f964:	0800f9f1 	.word	0x0800f9f1
 800f968:	0800f9f1 	.word	0x0800f9f1
 800f96c:	0800f9f1 	.word	0x0800f9f1
 800f970:	0800f9f1 	.word	0x0800f9f1
 800f974:	0800f9f1 	.word	0x0800f9f1
 800f978:	0800f9f1 	.word	0x0800f9f1
 800f97c:	0800f9d9 	.word	0x0800f9d9
 800f980:	0800f9f1 	.word	0x0800f9f1
 800f984:	0800f9f1 	.word	0x0800f9f1
 800f988:	0800f9f1 	.word	0x0800f9f1
 800f98c:	0800f9f1 	.word	0x0800f9f1
 800f990:	0800f9f1 	.word	0x0800f9f1
 800f994:	0800f9f1 	.word	0x0800f9f1
 800f998:	0800f9f1 	.word	0x0800f9f1
 800f99c:	0800f9e1 	.word	0x0800f9e1
 800f9a0:	0800f9f1 	.word	0x0800f9f1
 800f9a4:	0800f9f1 	.word	0x0800f9f1
 800f9a8:	0800f9f1 	.word	0x0800f9f1
 800f9ac:	0800f9f1 	.word	0x0800f9f1
 800f9b0:	0800f9f1 	.word	0x0800f9f1
 800f9b4:	0800f9f1 	.word	0x0800f9f1
 800f9b8:	0800f9f1 	.word	0x0800f9f1
 800f9bc:	0800f9e9 	.word	0x0800f9e9
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9c6:	e0d6      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f9c8:	2304      	movs	r3, #4
 800f9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ce:	e0d2      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f9d0:	2308      	movs	r3, #8
 800f9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9d6:	e0ce      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f9d8:	2310      	movs	r3, #16
 800f9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9de:	e0ca      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f9e0:	2320      	movs	r3, #32
 800f9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9e6:	e0c6      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f9e8:	2340      	movs	r3, #64	; 0x40
 800f9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ee:	e0c2      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f9f0:	2380      	movs	r3, #128	; 0x80
 800f9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9f6:	e0be      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800f9f8:	40011400 	.word	0x40011400
 800f9fc:	58024400 	.word	0x58024400
 800fa00:	40007800 	.word	0x40007800
 800fa04:	40007c00 	.word	0x40007c00
 800fa08:	40011800 	.word	0x40011800
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	4aad      	ldr	r2, [pc, #692]	; (800fcc8 <UART_SetConfig+0x900>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d176      	bne.n	800fb04 <UART_SetConfig+0x73c>
 800fa16:	4bad      	ldr	r3, [pc, #692]	; (800fccc <UART_SetConfig+0x904>)
 800fa18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fa1e:	2b28      	cmp	r3, #40	; 0x28
 800fa20:	d86c      	bhi.n	800fafc <UART_SetConfig+0x734>
 800fa22:	a201      	add	r2, pc, #4	; (adr r2, 800fa28 <UART_SetConfig+0x660>)
 800fa24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa28:	0800facd 	.word	0x0800facd
 800fa2c:	0800fafd 	.word	0x0800fafd
 800fa30:	0800fafd 	.word	0x0800fafd
 800fa34:	0800fafd 	.word	0x0800fafd
 800fa38:	0800fafd 	.word	0x0800fafd
 800fa3c:	0800fafd 	.word	0x0800fafd
 800fa40:	0800fafd 	.word	0x0800fafd
 800fa44:	0800fafd 	.word	0x0800fafd
 800fa48:	0800fad5 	.word	0x0800fad5
 800fa4c:	0800fafd 	.word	0x0800fafd
 800fa50:	0800fafd 	.word	0x0800fafd
 800fa54:	0800fafd 	.word	0x0800fafd
 800fa58:	0800fafd 	.word	0x0800fafd
 800fa5c:	0800fafd 	.word	0x0800fafd
 800fa60:	0800fafd 	.word	0x0800fafd
 800fa64:	0800fafd 	.word	0x0800fafd
 800fa68:	0800fadd 	.word	0x0800fadd
 800fa6c:	0800fafd 	.word	0x0800fafd
 800fa70:	0800fafd 	.word	0x0800fafd
 800fa74:	0800fafd 	.word	0x0800fafd
 800fa78:	0800fafd 	.word	0x0800fafd
 800fa7c:	0800fafd 	.word	0x0800fafd
 800fa80:	0800fafd 	.word	0x0800fafd
 800fa84:	0800fafd 	.word	0x0800fafd
 800fa88:	0800fae5 	.word	0x0800fae5
 800fa8c:	0800fafd 	.word	0x0800fafd
 800fa90:	0800fafd 	.word	0x0800fafd
 800fa94:	0800fafd 	.word	0x0800fafd
 800fa98:	0800fafd 	.word	0x0800fafd
 800fa9c:	0800fafd 	.word	0x0800fafd
 800faa0:	0800fafd 	.word	0x0800fafd
 800faa4:	0800fafd 	.word	0x0800fafd
 800faa8:	0800faed 	.word	0x0800faed
 800faac:	0800fafd 	.word	0x0800fafd
 800fab0:	0800fafd 	.word	0x0800fafd
 800fab4:	0800fafd 	.word	0x0800fafd
 800fab8:	0800fafd 	.word	0x0800fafd
 800fabc:	0800fafd 	.word	0x0800fafd
 800fac0:	0800fafd 	.word	0x0800fafd
 800fac4:	0800fafd 	.word	0x0800fafd
 800fac8:	0800faf5 	.word	0x0800faf5
 800facc:	2301      	movs	r3, #1
 800face:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fad2:	e050      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800fad4:	2304      	movs	r3, #4
 800fad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fada:	e04c      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800fadc:	2308      	movs	r3, #8
 800fade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fae2:	e048      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800fae4:	2310      	movs	r3, #16
 800fae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faea:	e044      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800faec:	2320      	movs	r3, #32
 800faee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faf2:	e040      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800faf4:	2340      	movs	r3, #64	; 0x40
 800faf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fafa:	e03c      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800fafc:	2380      	movs	r3, #128	; 0x80
 800fafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb02:	e038      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	4a71      	ldr	r2, [pc, #452]	; (800fcd0 <UART_SetConfig+0x908>)
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	d130      	bne.n	800fb70 <UART_SetConfig+0x7a8>
 800fb0e:	4b6f      	ldr	r3, [pc, #444]	; (800fccc <UART_SetConfig+0x904>)
 800fb10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb12:	f003 0307 	and.w	r3, r3, #7
 800fb16:	2b05      	cmp	r3, #5
 800fb18:	d826      	bhi.n	800fb68 <UART_SetConfig+0x7a0>
 800fb1a:	a201      	add	r2, pc, #4	; (adr r2, 800fb20 <UART_SetConfig+0x758>)
 800fb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb20:	0800fb39 	.word	0x0800fb39
 800fb24:	0800fb41 	.word	0x0800fb41
 800fb28:	0800fb49 	.word	0x0800fb49
 800fb2c:	0800fb51 	.word	0x0800fb51
 800fb30:	0800fb59 	.word	0x0800fb59
 800fb34:	0800fb61 	.word	0x0800fb61
 800fb38:	2302      	movs	r3, #2
 800fb3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb3e:	e01a      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800fb40:	2304      	movs	r3, #4
 800fb42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb46:	e016      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800fb48:	2308      	movs	r3, #8
 800fb4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb4e:	e012      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800fb50:	2310      	movs	r3, #16
 800fb52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb56:	e00e      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800fb58:	2320      	movs	r3, #32
 800fb5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb5e:	e00a      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800fb60:	2340      	movs	r3, #64	; 0x40
 800fb62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb66:	e006      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800fb68:	2380      	movs	r3, #128	; 0x80
 800fb6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb6e:	e002      	b.n	800fb76 <UART_SetConfig+0x7ae>
 800fb70:	2380      	movs	r3, #128	; 0x80
 800fb72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	4a55      	ldr	r2, [pc, #340]	; (800fcd0 <UART_SetConfig+0x908>)
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	f040 80f8 	bne.w	800fd72 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fb82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fb86:	2b20      	cmp	r3, #32
 800fb88:	dc46      	bgt.n	800fc18 <UART_SetConfig+0x850>
 800fb8a:	2b02      	cmp	r3, #2
 800fb8c:	db75      	blt.n	800fc7a <UART_SetConfig+0x8b2>
 800fb8e:	3b02      	subs	r3, #2
 800fb90:	2b1e      	cmp	r3, #30
 800fb92:	d872      	bhi.n	800fc7a <UART_SetConfig+0x8b2>
 800fb94:	a201      	add	r2, pc, #4	; (adr r2, 800fb9c <UART_SetConfig+0x7d4>)
 800fb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb9a:	bf00      	nop
 800fb9c:	0800fc1f 	.word	0x0800fc1f
 800fba0:	0800fc7b 	.word	0x0800fc7b
 800fba4:	0800fc27 	.word	0x0800fc27
 800fba8:	0800fc7b 	.word	0x0800fc7b
 800fbac:	0800fc7b 	.word	0x0800fc7b
 800fbb0:	0800fc7b 	.word	0x0800fc7b
 800fbb4:	0800fc37 	.word	0x0800fc37
 800fbb8:	0800fc7b 	.word	0x0800fc7b
 800fbbc:	0800fc7b 	.word	0x0800fc7b
 800fbc0:	0800fc7b 	.word	0x0800fc7b
 800fbc4:	0800fc7b 	.word	0x0800fc7b
 800fbc8:	0800fc7b 	.word	0x0800fc7b
 800fbcc:	0800fc7b 	.word	0x0800fc7b
 800fbd0:	0800fc7b 	.word	0x0800fc7b
 800fbd4:	0800fc47 	.word	0x0800fc47
 800fbd8:	0800fc7b 	.word	0x0800fc7b
 800fbdc:	0800fc7b 	.word	0x0800fc7b
 800fbe0:	0800fc7b 	.word	0x0800fc7b
 800fbe4:	0800fc7b 	.word	0x0800fc7b
 800fbe8:	0800fc7b 	.word	0x0800fc7b
 800fbec:	0800fc7b 	.word	0x0800fc7b
 800fbf0:	0800fc7b 	.word	0x0800fc7b
 800fbf4:	0800fc7b 	.word	0x0800fc7b
 800fbf8:	0800fc7b 	.word	0x0800fc7b
 800fbfc:	0800fc7b 	.word	0x0800fc7b
 800fc00:	0800fc7b 	.word	0x0800fc7b
 800fc04:	0800fc7b 	.word	0x0800fc7b
 800fc08:	0800fc7b 	.word	0x0800fc7b
 800fc0c:	0800fc7b 	.word	0x0800fc7b
 800fc10:	0800fc7b 	.word	0x0800fc7b
 800fc14:	0800fc6d 	.word	0x0800fc6d
 800fc18:	2b40      	cmp	r3, #64	; 0x40
 800fc1a:	d02a      	beq.n	800fc72 <UART_SetConfig+0x8aa>
 800fc1c:	e02d      	b.n	800fc7a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fc1e:	f7f9 fee7 	bl	80099f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800fc22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fc24:	e02f      	b.n	800fc86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7f9 fef6 	bl	8009a1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc34:	e027      	b.n	800fc86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc36:	f107 0318 	add.w	r3, r7, #24
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7fa f842 	bl	8009cc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc40:	69fb      	ldr	r3, [r7, #28]
 800fc42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc44:	e01f      	b.n	800fc86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc46:	4b21      	ldr	r3, [pc, #132]	; (800fccc <UART_SetConfig+0x904>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f003 0320 	and.w	r3, r3, #32
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d009      	beq.n	800fc66 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc52:	4b1e      	ldr	r3, [pc, #120]	; (800fccc <UART_SetConfig+0x904>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	08db      	lsrs	r3, r3, #3
 800fc58:	f003 0303 	and.w	r3, r3, #3
 800fc5c:	4a1d      	ldr	r2, [pc, #116]	; (800fcd4 <UART_SetConfig+0x90c>)
 800fc5e:	fa22 f303 	lsr.w	r3, r2, r3
 800fc62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc64:	e00f      	b.n	800fc86 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fc66:	4b1b      	ldr	r3, [pc, #108]	; (800fcd4 <UART_SetConfig+0x90c>)
 800fc68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc6a:	e00c      	b.n	800fc86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc6c:	4b1a      	ldr	r3, [pc, #104]	; (800fcd8 <UART_SetConfig+0x910>)
 800fc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc70:	e009      	b.n	800fc86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc78:	e005      	b.n	800fc86 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fc7e:	2301      	movs	r3, #1
 800fc80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fc84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fc86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f000 81ee 	beq.w	801006a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc92:	4a12      	ldr	r2, [pc, #72]	; (800fcdc <UART_SetConfig+0x914>)
 800fc94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc98:	461a      	mov	r2, r3
 800fc9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fca0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	685a      	ldr	r2, [r3, #4]
 800fca6:	4613      	mov	r3, r2
 800fca8:	005b      	lsls	r3, r3, #1
 800fcaa:	4413      	add	r3, r2
 800fcac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d305      	bcc.n	800fcbe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	685b      	ldr	r3, [r3, #4]
 800fcb6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fcb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d910      	bls.n	800fce0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fcc4:	e1d1      	b.n	801006a <UART_SetConfig+0xca2>
 800fcc6:	bf00      	nop
 800fcc8:	40011c00 	.word	0x40011c00
 800fccc:	58024400 	.word	0x58024400
 800fcd0:	58000c00 	.word	0x58000c00
 800fcd4:	03d09000 	.word	0x03d09000
 800fcd8:	003d0900 	.word	0x003d0900
 800fcdc:	0801813c 	.word	0x0801813c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fce2:	2200      	movs	r2, #0
 800fce4:	60bb      	str	r3, [r7, #8]
 800fce6:	60fa      	str	r2, [r7, #12]
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcec:	4ac0      	ldr	r2, [pc, #768]	; (800fff0 <UART_SetConfig+0xc28>)
 800fcee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	603b      	str	r3, [r7, #0]
 800fcf8:	607a      	str	r2, [r7, #4]
 800fcfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fd02:	f7f0 fd19 	bl	8000738 <__aeabi_uldivmod>
 800fd06:	4602      	mov	r2, r0
 800fd08:	460b      	mov	r3, r1
 800fd0a:	4610      	mov	r0, r2
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	f04f 0200 	mov.w	r2, #0
 800fd12:	f04f 0300 	mov.w	r3, #0
 800fd16:	020b      	lsls	r3, r1, #8
 800fd18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fd1c:	0202      	lsls	r2, r0, #8
 800fd1e:	6979      	ldr	r1, [r7, #20]
 800fd20:	6849      	ldr	r1, [r1, #4]
 800fd22:	0849      	lsrs	r1, r1, #1
 800fd24:	2000      	movs	r0, #0
 800fd26:	460c      	mov	r4, r1
 800fd28:	4605      	mov	r5, r0
 800fd2a:	eb12 0804 	adds.w	r8, r2, r4
 800fd2e:	eb43 0905 	adc.w	r9, r3, r5
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	685b      	ldr	r3, [r3, #4]
 800fd36:	2200      	movs	r2, #0
 800fd38:	469a      	mov	sl, r3
 800fd3a:	4693      	mov	fp, r2
 800fd3c:	4652      	mov	r2, sl
 800fd3e:	465b      	mov	r3, fp
 800fd40:	4640      	mov	r0, r8
 800fd42:	4649      	mov	r1, r9
 800fd44:	f7f0 fcf8 	bl	8000738 <__aeabi_uldivmod>
 800fd48:	4602      	mov	r2, r0
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	4613      	mov	r3, r2
 800fd4e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd56:	d308      	bcc.n	800fd6a <UART_SetConfig+0x9a2>
 800fd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fd5e:	d204      	bcs.n	800fd6a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd66:	60da      	str	r2, [r3, #12]
 800fd68:	e17f      	b.n	801006a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fd70:	e17b      	b.n	801006a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	69db      	ldr	r3, [r3, #28]
 800fd76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd7a:	f040 80bd 	bne.w	800fef8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fd7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fd82:	2b20      	cmp	r3, #32
 800fd84:	dc48      	bgt.n	800fe18 <UART_SetConfig+0xa50>
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	db7b      	blt.n	800fe82 <UART_SetConfig+0xaba>
 800fd8a:	2b20      	cmp	r3, #32
 800fd8c:	d879      	bhi.n	800fe82 <UART_SetConfig+0xaba>
 800fd8e:	a201      	add	r2, pc, #4	; (adr r2, 800fd94 <UART_SetConfig+0x9cc>)
 800fd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd94:	0800fe1f 	.word	0x0800fe1f
 800fd98:	0800fe27 	.word	0x0800fe27
 800fd9c:	0800fe83 	.word	0x0800fe83
 800fda0:	0800fe83 	.word	0x0800fe83
 800fda4:	0800fe2f 	.word	0x0800fe2f
 800fda8:	0800fe83 	.word	0x0800fe83
 800fdac:	0800fe83 	.word	0x0800fe83
 800fdb0:	0800fe83 	.word	0x0800fe83
 800fdb4:	0800fe3f 	.word	0x0800fe3f
 800fdb8:	0800fe83 	.word	0x0800fe83
 800fdbc:	0800fe83 	.word	0x0800fe83
 800fdc0:	0800fe83 	.word	0x0800fe83
 800fdc4:	0800fe83 	.word	0x0800fe83
 800fdc8:	0800fe83 	.word	0x0800fe83
 800fdcc:	0800fe83 	.word	0x0800fe83
 800fdd0:	0800fe83 	.word	0x0800fe83
 800fdd4:	0800fe4f 	.word	0x0800fe4f
 800fdd8:	0800fe83 	.word	0x0800fe83
 800fddc:	0800fe83 	.word	0x0800fe83
 800fde0:	0800fe83 	.word	0x0800fe83
 800fde4:	0800fe83 	.word	0x0800fe83
 800fde8:	0800fe83 	.word	0x0800fe83
 800fdec:	0800fe83 	.word	0x0800fe83
 800fdf0:	0800fe83 	.word	0x0800fe83
 800fdf4:	0800fe83 	.word	0x0800fe83
 800fdf8:	0800fe83 	.word	0x0800fe83
 800fdfc:	0800fe83 	.word	0x0800fe83
 800fe00:	0800fe83 	.word	0x0800fe83
 800fe04:	0800fe83 	.word	0x0800fe83
 800fe08:	0800fe83 	.word	0x0800fe83
 800fe0c:	0800fe83 	.word	0x0800fe83
 800fe10:	0800fe83 	.word	0x0800fe83
 800fe14:	0800fe75 	.word	0x0800fe75
 800fe18:	2b40      	cmp	r3, #64	; 0x40
 800fe1a:	d02e      	beq.n	800fe7a <UART_SetConfig+0xab2>
 800fe1c:	e031      	b.n	800fe82 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe1e:	f7f8 fa81 	bl	8008324 <HAL_RCC_GetPCLK1Freq>
 800fe22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fe24:	e033      	b.n	800fe8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe26:	f7f8 fa93 	bl	8008350 <HAL_RCC_GetPCLK2Freq>
 800fe2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fe2c:	e02f      	b.n	800fe8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7f9 fdf2 	bl	8009a1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe3c:	e027      	b.n	800fe8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe3e:	f107 0318 	add.w	r3, r7, #24
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7f9 ff3e 	bl	8009cc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe48:	69fb      	ldr	r3, [r7, #28]
 800fe4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe4c:	e01f      	b.n	800fe8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe4e:	4b69      	ldr	r3, [pc, #420]	; (800fff4 <UART_SetConfig+0xc2c>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	f003 0320 	and.w	r3, r3, #32
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d009      	beq.n	800fe6e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe5a:	4b66      	ldr	r3, [pc, #408]	; (800fff4 <UART_SetConfig+0xc2c>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	08db      	lsrs	r3, r3, #3
 800fe60:	f003 0303 	and.w	r3, r3, #3
 800fe64:	4a64      	ldr	r2, [pc, #400]	; (800fff8 <UART_SetConfig+0xc30>)
 800fe66:	fa22 f303 	lsr.w	r3, r2, r3
 800fe6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe6c:	e00f      	b.n	800fe8e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fe6e:	4b62      	ldr	r3, [pc, #392]	; (800fff8 <UART_SetConfig+0xc30>)
 800fe70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe72:	e00c      	b.n	800fe8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fe74:	4b61      	ldr	r3, [pc, #388]	; (800fffc <UART_SetConfig+0xc34>)
 800fe76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe78:	e009      	b.n	800fe8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe80:	e005      	b.n	800fe8e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fe82:	2300      	movs	r3, #0
 800fe84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fe86:	2301      	movs	r3, #1
 800fe88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fe8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fe8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	f000 80ea 	beq.w	801006a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe9a:	4a55      	ldr	r2, [pc, #340]	; (800fff0 <UART_SetConfig+0xc28>)
 800fe9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fea0:	461a      	mov	r2, r3
 800fea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fea4:	fbb3 f3f2 	udiv	r3, r3, r2
 800fea8:	005a      	lsls	r2, r3, #1
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	085b      	lsrs	r3, r3, #1
 800feb0:	441a      	add	r2, r3
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800feba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800febc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febe:	2b0f      	cmp	r3, #15
 800fec0:	d916      	bls.n	800fef0 <UART_SetConfig+0xb28>
 800fec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fec8:	d212      	bcs.n	800fef0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800feca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fecc:	b29b      	uxth	r3, r3
 800fece:	f023 030f 	bic.w	r3, r3, #15
 800fed2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed6:	085b      	lsrs	r3, r3, #1
 800fed8:	b29b      	uxth	r3, r3
 800feda:	f003 0307 	and.w	r3, r3, #7
 800fede:	b29a      	uxth	r2, r3
 800fee0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fee2:	4313      	orrs	r3, r2
 800fee4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800feec:	60da      	str	r2, [r3, #12]
 800feee:	e0bc      	b.n	801006a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fef0:	2301      	movs	r3, #1
 800fef2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fef6:	e0b8      	b.n	801006a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fef8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fefc:	2b20      	cmp	r3, #32
 800fefe:	dc4b      	bgt.n	800ff98 <UART_SetConfig+0xbd0>
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	f2c0 8087 	blt.w	8010014 <UART_SetConfig+0xc4c>
 800ff06:	2b20      	cmp	r3, #32
 800ff08:	f200 8084 	bhi.w	8010014 <UART_SetConfig+0xc4c>
 800ff0c:	a201      	add	r2, pc, #4	; (adr r2, 800ff14 <UART_SetConfig+0xb4c>)
 800ff0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff12:	bf00      	nop
 800ff14:	0800ff9f 	.word	0x0800ff9f
 800ff18:	0800ffa7 	.word	0x0800ffa7
 800ff1c:	08010015 	.word	0x08010015
 800ff20:	08010015 	.word	0x08010015
 800ff24:	0800ffaf 	.word	0x0800ffaf
 800ff28:	08010015 	.word	0x08010015
 800ff2c:	08010015 	.word	0x08010015
 800ff30:	08010015 	.word	0x08010015
 800ff34:	0800ffbf 	.word	0x0800ffbf
 800ff38:	08010015 	.word	0x08010015
 800ff3c:	08010015 	.word	0x08010015
 800ff40:	08010015 	.word	0x08010015
 800ff44:	08010015 	.word	0x08010015
 800ff48:	08010015 	.word	0x08010015
 800ff4c:	08010015 	.word	0x08010015
 800ff50:	08010015 	.word	0x08010015
 800ff54:	0800ffcf 	.word	0x0800ffcf
 800ff58:	08010015 	.word	0x08010015
 800ff5c:	08010015 	.word	0x08010015
 800ff60:	08010015 	.word	0x08010015
 800ff64:	08010015 	.word	0x08010015
 800ff68:	08010015 	.word	0x08010015
 800ff6c:	08010015 	.word	0x08010015
 800ff70:	08010015 	.word	0x08010015
 800ff74:	08010015 	.word	0x08010015
 800ff78:	08010015 	.word	0x08010015
 800ff7c:	08010015 	.word	0x08010015
 800ff80:	08010015 	.word	0x08010015
 800ff84:	08010015 	.word	0x08010015
 800ff88:	08010015 	.word	0x08010015
 800ff8c:	08010015 	.word	0x08010015
 800ff90:	08010015 	.word	0x08010015
 800ff94:	08010007 	.word	0x08010007
 800ff98:	2b40      	cmp	r3, #64	; 0x40
 800ff9a:	d037      	beq.n	801000c <UART_SetConfig+0xc44>
 800ff9c:	e03a      	b.n	8010014 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff9e:	f7f8 f9c1 	bl	8008324 <HAL_RCC_GetPCLK1Freq>
 800ffa2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ffa4:	e03c      	b.n	8010020 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ffa6:	f7f8 f9d3 	bl	8008350 <HAL_RCC_GetPCLK2Freq>
 800ffaa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ffac:	e038      	b.n	8010020 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ffae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7f9 fd32 	bl	8009a1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ffb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffbc:	e030      	b.n	8010020 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ffbe:	f107 0318 	add.w	r3, r7, #24
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7f9 fe7e 	bl	8009cc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ffc8:	69fb      	ldr	r3, [r7, #28]
 800ffca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffcc:	e028      	b.n	8010020 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ffce:	4b09      	ldr	r3, [pc, #36]	; (800fff4 <UART_SetConfig+0xc2c>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	f003 0320 	and.w	r3, r3, #32
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d012      	beq.n	8010000 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ffda:	4b06      	ldr	r3, [pc, #24]	; (800fff4 <UART_SetConfig+0xc2c>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	08db      	lsrs	r3, r3, #3
 800ffe0:	f003 0303 	and.w	r3, r3, #3
 800ffe4:	4a04      	ldr	r2, [pc, #16]	; (800fff8 <UART_SetConfig+0xc30>)
 800ffe6:	fa22 f303 	lsr.w	r3, r2, r3
 800ffea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ffec:	e018      	b.n	8010020 <UART_SetConfig+0xc58>
 800ffee:	bf00      	nop
 800fff0:	0801813c 	.word	0x0801813c
 800fff4:	58024400 	.word	0x58024400
 800fff8:	03d09000 	.word	0x03d09000
 800fffc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8010000:	4b24      	ldr	r3, [pc, #144]	; (8010094 <UART_SetConfig+0xccc>)
 8010002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010004:	e00c      	b.n	8010020 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010006:	4b24      	ldr	r3, [pc, #144]	; (8010098 <UART_SetConfig+0xcd0>)
 8010008:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801000a:	e009      	b.n	8010020 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801000c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010010:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010012:	e005      	b.n	8010020 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010014:	2300      	movs	r3, #0
 8010016:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010018:	2301      	movs	r3, #1
 801001a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801001e:	bf00      	nop
    }

    if (pclk != 0U)
 8010020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010022:	2b00      	cmp	r3, #0
 8010024:	d021      	beq.n	801006a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801002a:	4a1c      	ldr	r2, [pc, #112]	; (801009c <UART_SetConfig+0xcd4>)
 801002c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010030:	461a      	mov	r2, r3
 8010032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010034:	fbb3 f2f2 	udiv	r2, r3, r2
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	685b      	ldr	r3, [r3, #4]
 801003c:	085b      	lsrs	r3, r3, #1
 801003e:	441a      	add	r2, r3
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	fbb2 f3f3 	udiv	r3, r2, r3
 8010048:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801004a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004c:	2b0f      	cmp	r3, #15
 801004e:	d909      	bls.n	8010064 <UART_SetConfig+0xc9c>
 8010050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010056:	d205      	bcs.n	8010064 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005a:	b29a      	uxth	r2, r3
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	60da      	str	r2, [r3, #12]
 8010062:	e002      	b.n	801006a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010064:	2301      	movs	r3, #1
 8010066:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	2201      	movs	r2, #1
 801006e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	2201      	movs	r2, #1
 8010076:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	2200      	movs	r2, #0
 801007e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	2200      	movs	r2, #0
 8010084:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010086:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801008a:	4618      	mov	r0, r3
 801008c:	3748      	adds	r7, #72	; 0x48
 801008e:	46bd      	mov	sp, r7
 8010090:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010094:	03d09000 	.word	0x03d09000
 8010098:	003d0900 	.word	0x003d0900
 801009c:	0801813c 	.word	0x0801813c

080100a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80100a0:	b480      	push	{r7}
 80100a2:	b083      	sub	sp, #12
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ac:	f003 0301 	and.w	r3, r3, #1
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d00a      	beq.n	80100ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	685b      	ldr	r3, [r3, #4]
 80100ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	430a      	orrs	r2, r1
 80100c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ce:	f003 0302 	and.w	r3, r3, #2
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d00a      	beq.n	80100ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	685b      	ldr	r3, [r3, #4]
 80100dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	430a      	orrs	r2, r1
 80100ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100f0:	f003 0304 	and.w	r3, r3, #4
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d00a      	beq.n	801010e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	430a      	orrs	r2, r1
 801010c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010112:	f003 0308 	and.w	r3, r3, #8
 8010116:	2b00      	cmp	r3, #0
 8010118:	d00a      	beq.n	8010130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	685b      	ldr	r3, [r3, #4]
 8010120:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	430a      	orrs	r2, r1
 801012e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010134:	f003 0310 	and.w	r3, r3, #16
 8010138:	2b00      	cmp	r3, #0
 801013a:	d00a      	beq.n	8010152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	689b      	ldr	r3, [r3, #8]
 8010142:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	430a      	orrs	r2, r1
 8010150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010156:	f003 0320 	and.w	r3, r3, #32
 801015a:	2b00      	cmp	r3, #0
 801015c:	d00a      	beq.n	8010174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	689b      	ldr	r3, [r3, #8]
 8010164:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	430a      	orrs	r2, r1
 8010172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801017c:	2b00      	cmp	r3, #0
 801017e:	d01a      	beq.n	80101b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	685b      	ldr	r3, [r3, #4]
 8010186:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	430a      	orrs	r2, r1
 8010194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801019a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801019e:	d10a      	bne.n	80101b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	430a      	orrs	r2, r1
 80101b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d00a      	beq.n	80101d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	685b      	ldr	r3, [r3, #4]
 80101c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	430a      	orrs	r2, r1
 80101d6:	605a      	str	r2, [r3, #4]
  }
}
 80101d8:	bf00      	nop
 80101da:	370c      	adds	r7, #12
 80101dc:	46bd      	mov	sp, r7
 80101de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e2:	4770      	bx	lr

080101e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b086      	sub	sp, #24
 80101e8:	af02      	add	r7, sp, #8
 80101ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2200      	movs	r2, #0
 80101f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80101f4:	f7f3 fe9a 	bl	8003f2c <HAL_GetTick>
 80101f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f003 0308 	and.w	r3, r3, #8
 8010204:	2b08      	cmp	r3, #8
 8010206:	d10e      	bne.n	8010226 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010208:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801020c:	9300      	str	r3, [sp, #0]
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	2200      	movs	r2, #0
 8010212:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f000 f82f 	bl	801027a <UART_WaitOnFlagUntilTimeout>
 801021c:	4603      	mov	r3, r0
 801021e:	2b00      	cmp	r3, #0
 8010220:	d001      	beq.n	8010226 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010222:	2303      	movs	r3, #3
 8010224:	e025      	b.n	8010272 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	f003 0304 	and.w	r3, r3, #4
 8010230:	2b04      	cmp	r3, #4
 8010232:	d10e      	bne.n	8010252 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010234:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010238:	9300      	str	r3, [sp, #0]
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2200      	movs	r2, #0
 801023e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f000 f819 	bl	801027a <UART_WaitOnFlagUntilTimeout>
 8010248:	4603      	mov	r3, r0
 801024a:	2b00      	cmp	r3, #0
 801024c:	d001      	beq.n	8010252 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801024e:	2303      	movs	r3, #3
 8010250:	e00f      	b.n	8010272 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2220      	movs	r2, #32
 8010256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2220      	movs	r2, #32
 801025e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2200      	movs	r2, #0
 8010266:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2200      	movs	r2, #0
 801026c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010270:	2300      	movs	r3, #0
}
 8010272:	4618      	mov	r0, r3
 8010274:	3710      	adds	r7, #16
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801027a:	b580      	push	{r7, lr}
 801027c:	b09c      	sub	sp, #112	; 0x70
 801027e:	af00      	add	r7, sp, #0
 8010280:	60f8      	str	r0, [r7, #12]
 8010282:	60b9      	str	r1, [r7, #8]
 8010284:	603b      	str	r3, [r7, #0]
 8010286:	4613      	mov	r3, r2
 8010288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801028a:	e0a9      	b.n	80103e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801028c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801028e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010292:	f000 80a5 	beq.w	80103e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010296:	f7f3 fe49 	bl	8003f2c <HAL_GetTick>
 801029a:	4602      	mov	r2, r0
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	1ad3      	subs	r3, r2, r3
 80102a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d302      	bcc.n	80102ac <UART_WaitOnFlagUntilTimeout+0x32>
 80102a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d140      	bne.n	801032e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102b4:	e853 3f00 	ldrex	r3, [r3]
 80102b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80102ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80102c0:	667b      	str	r3, [r7, #100]	; 0x64
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	461a      	mov	r2, r3
 80102c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80102d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80102d2:	e841 2300 	strex	r3, r2, [r1]
 80102d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80102d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d1e6      	bne.n	80102ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	3308      	adds	r3, #8
 80102e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102e8:	e853 3f00 	ldrex	r3, [r3]
 80102ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80102ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f0:	f023 0301 	bic.w	r3, r3, #1
 80102f4:	663b      	str	r3, [r7, #96]	; 0x60
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	3308      	adds	r3, #8
 80102fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80102fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8010300:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010302:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010306:	e841 2300 	strex	r3, r2, [r1]
 801030a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801030c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801030e:	2b00      	cmp	r3, #0
 8010310:	d1e5      	bne.n	80102de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	2220      	movs	r2, #32
 8010316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	2220      	movs	r2, #32
 801031e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	2200      	movs	r2, #0
 8010326:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801032a:	2303      	movs	r3, #3
 801032c:	e069      	b.n	8010402 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	f003 0304 	and.w	r3, r3, #4
 8010338:	2b00      	cmp	r3, #0
 801033a:	d051      	beq.n	80103e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	69db      	ldr	r3, [r3, #28]
 8010342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801034a:	d149      	bne.n	80103e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010354:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801035c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801035e:	e853 3f00 	ldrex	r3, [r3]
 8010362:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010366:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801036a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	461a      	mov	r2, r3
 8010372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010374:	637b      	str	r3, [r7, #52]	; 0x34
 8010376:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010378:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801037a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801037c:	e841 2300 	strex	r3, r2, [r1]
 8010380:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010384:	2b00      	cmp	r3, #0
 8010386:	d1e6      	bne.n	8010356 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	3308      	adds	r3, #8
 801038e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	e853 3f00 	ldrex	r3, [r3]
 8010396:	613b      	str	r3, [r7, #16]
   return(result);
 8010398:	693b      	ldr	r3, [r7, #16]
 801039a:	f023 0301 	bic.w	r3, r3, #1
 801039e:	66bb      	str	r3, [r7, #104]	; 0x68
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	3308      	adds	r3, #8
 80103a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80103a8:	623a      	str	r2, [r7, #32]
 80103aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ac:	69f9      	ldr	r1, [r7, #28]
 80103ae:	6a3a      	ldr	r2, [r7, #32]
 80103b0:	e841 2300 	strex	r3, r2, [r1]
 80103b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80103b6:	69bb      	ldr	r3, [r7, #24]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d1e5      	bne.n	8010388 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2220      	movs	r2, #32
 80103c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2220      	movs	r2, #32
 80103c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2220      	movs	r2, #32
 80103d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	2200      	movs	r2, #0
 80103d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80103dc:	2303      	movs	r3, #3
 80103de:	e010      	b.n	8010402 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	69da      	ldr	r2, [r3, #28]
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	4013      	ands	r3, r2
 80103ea:	68ba      	ldr	r2, [r7, #8]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	bf0c      	ite	eq
 80103f0:	2301      	moveq	r3, #1
 80103f2:	2300      	movne	r3, #0
 80103f4:	b2db      	uxtb	r3, r3
 80103f6:	461a      	mov	r2, r3
 80103f8:	79fb      	ldrb	r3, [r7, #7]
 80103fa:	429a      	cmp	r2, r3
 80103fc:	f43f af46 	beq.w	801028c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010400:	2300      	movs	r3, #0
}
 8010402:	4618      	mov	r0, r3
 8010404:	3770      	adds	r7, #112	; 0x70
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
	...

0801040c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801040c:	b480      	push	{r7}
 801040e:	b0a3      	sub	sp, #140	; 0x8c
 8010410:	af00      	add	r7, sp, #0
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	60b9      	str	r1, [r7, #8]
 8010416:	4613      	mov	r3, r2
 8010418:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	68ba      	ldr	r2, [r7, #8]
 801041e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	88fa      	ldrh	r2, [r7, #6]
 8010424:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	88fa      	ldrh	r2, [r7, #6]
 801042c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2200      	movs	r2, #0
 8010434:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	689b      	ldr	r3, [r3, #8]
 801043a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801043e:	d10e      	bne.n	801045e <UART_Start_Receive_IT+0x52>
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	691b      	ldr	r3, [r3, #16]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d105      	bne.n	8010454 <UART_Start_Receive_IT+0x48>
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801044e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010452:	e02d      	b.n	80104b0 <UART_Start_Receive_IT+0xa4>
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	22ff      	movs	r2, #255	; 0xff
 8010458:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801045c:	e028      	b.n	80104b0 <UART_Start_Receive_IT+0xa4>
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	689b      	ldr	r3, [r3, #8]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d10d      	bne.n	8010482 <UART_Start_Receive_IT+0x76>
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	691b      	ldr	r3, [r3, #16]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d104      	bne.n	8010478 <UART_Start_Receive_IT+0x6c>
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	22ff      	movs	r2, #255	; 0xff
 8010472:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010476:	e01b      	b.n	80104b0 <UART_Start_Receive_IT+0xa4>
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	227f      	movs	r2, #127	; 0x7f
 801047c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010480:	e016      	b.n	80104b0 <UART_Start_Receive_IT+0xa4>
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	689b      	ldr	r3, [r3, #8]
 8010486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801048a:	d10d      	bne.n	80104a8 <UART_Start_Receive_IT+0x9c>
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	691b      	ldr	r3, [r3, #16]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d104      	bne.n	801049e <UART_Start_Receive_IT+0x92>
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	227f      	movs	r2, #127	; 0x7f
 8010498:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801049c:	e008      	b.n	80104b0 <UART_Start_Receive_IT+0xa4>
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	223f      	movs	r2, #63	; 0x3f
 80104a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80104a6:	e003      	b.n	80104b0 <UART_Start_Receive_IT+0xa4>
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	2200      	movs	r2, #0
 80104ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2200      	movs	r2, #0
 80104b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	2222      	movs	r2, #34	; 0x22
 80104bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	3308      	adds	r3, #8
 80104c6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104ca:	e853 3f00 	ldrex	r3, [r3]
 80104ce:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80104d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104d2:	f043 0301 	orr.w	r3, r3, #1
 80104d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	3308      	adds	r3, #8
 80104e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80104e4:	673a      	str	r2, [r7, #112]	; 0x70
 80104e6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104e8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80104ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80104ec:	e841 2300 	strex	r3, r2, [r1]
 80104f0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80104f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d1e3      	bne.n	80104c0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80104fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010500:	d153      	bne.n	80105aa <UART_Start_Receive_IT+0x19e>
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010508:	88fa      	ldrh	r2, [r7, #6]
 801050a:	429a      	cmp	r2, r3
 801050c:	d34d      	bcc.n	80105aa <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	689b      	ldr	r3, [r3, #8]
 8010512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010516:	d107      	bne.n	8010528 <UART_Start_Receive_IT+0x11c>
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	691b      	ldr	r3, [r3, #16]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d103      	bne.n	8010528 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	4a4b      	ldr	r2, [pc, #300]	; (8010650 <UART_Start_Receive_IT+0x244>)
 8010524:	671a      	str	r2, [r3, #112]	; 0x70
 8010526:	e002      	b.n	801052e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	4a4a      	ldr	r2, [pc, #296]	; (8010654 <UART_Start_Receive_IT+0x248>)
 801052c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	2200      	movs	r2, #0
 8010532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	691b      	ldr	r3, [r3, #16]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d01a      	beq.n	8010574 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010546:	e853 3f00 	ldrex	r3, [r3]
 801054a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801054c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801054e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010552:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	461a      	mov	r2, r3
 801055c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010560:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010562:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010564:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010566:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010568:	e841 2300 	strex	r3, r2, [r1]
 801056c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801056e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010570:	2b00      	cmp	r3, #0
 8010572:	d1e4      	bne.n	801053e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	3308      	adds	r3, #8
 801057a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801057c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801057e:	e853 3f00 	ldrex	r3, [r3]
 8010582:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801058a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	3308      	adds	r3, #8
 8010592:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010594:	64ba      	str	r2, [r7, #72]	; 0x48
 8010596:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010598:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801059a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801059c:	e841 2300 	strex	r3, r2, [r1]
 80105a0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80105a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d1e5      	bne.n	8010574 <UART_Start_Receive_IT+0x168>
 80105a8:	e04a      	b.n	8010640 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	689b      	ldr	r3, [r3, #8]
 80105ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105b2:	d107      	bne.n	80105c4 <UART_Start_Receive_IT+0x1b8>
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	691b      	ldr	r3, [r3, #16]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d103      	bne.n	80105c4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	4a26      	ldr	r2, [pc, #152]	; (8010658 <UART_Start_Receive_IT+0x24c>)
 80105c0:	671a      	str	r2, [r3, #112]	; 0x70
 80105c2:	e002      	b.n	80105ca <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	4a25      	ldr	r2, [pc, #148]	; (801065c <UART_Start_Receive_IT+0x250>)
 80105c8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	2200      	movs	r2, #0
 80105ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	691b      	ldr	r3, [r3, #16]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d019      	beq.n	801060e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e2:	e853 3f00 	ldrex	r3, [r3]
 80105e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80105e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ea:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80105ee:	677b      	str	r3, [r7, #116]	; 0x74
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	461a      	mov	r2, r3
 80105f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105f8:	637b      	str	r3, [r7, #52]	; 0x34
 80105fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80105fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010600:	e841 2300 	strex	r3, r2, [r1]
 8010604:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010608:	2b00      	cmp	r3, #0
 801060a:	d1e6      	bne.n	80105da <UART_Start_Receive_IT+0x1ce>
 801060c:	e018      	b.n	8010640 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010614:	697b      	ldr	r3, [r7, #20]
 8010616:	e853 3f00 	ldrex	r3, [r3]
 801061a:	613b      	str	r3, [r7, #16]
   return(result);
 801061c:	693b      	ldr	r3, [r7, #16]
 801061e:	f043 0320 	orr.w	r3, r3, #32
 8010622:	67bb      	str	r3, [r7, #120]	; 0x78
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	461a      	mov	r2, r3
 801062a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801062c:	623b      	str	r3, [r7, #32]
 801062e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010630:	69f9      	ldr	r1, [r7, #28]
 8010632:	6a3a      	ldr	r2, [r7, #32]
 8010634:	e841 2300 	strex	r3, r2, [r1]
 8010638:	61bb      	str	r3, [r7, #24]
   return(result);
 801063a:	69bb      	ldr	r3, [r7, #24]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d1e6      	bne.n	801060e <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8010640:	2300      	movs	r3, #0
}
 8010642:	4618      	mov	r0, r3
 8010644:	378c      	adds	r7, #140	; 0x8c
 8010646:	46bd      	mov	sp, r7
 8010648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064c:	4770      	bx	lr
 801064e:	bf00      	nop
 8010650:	08010d69 	.word	0x08010d69
 8010654:	08010a71 	.word	0x08010a71
 8010658:	0801090f 	.word	0x0801090f
 801065c:	080107af 	.word	0x080107af

08010660 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010660:	b480      	push	{r7}
 8010662:	b095      	sub	sp, #84	; 0x54
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801066e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010670:	e853 3f00 	ldrex	r3, [r3]
 8010674:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010678:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801067c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	461a      	mov	r2, r3
 8010684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010686:	643b      	str	r3, [r7, #64]	; 0x40
 8010688:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801068a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801068c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801068e:	e841 2300 	strex	r3, r2, [r1]
 8010692:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010696:	2b00      	cmp	r3, #0
 8010698:	d1e6      	bne.n	8010668 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	3308      	adds	r3, #8
 80106a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106a2:	6a3b      	ldr	r3, [r7, #32]
 80106a4:	e853 3f00 	ldrex	r3, [r3]
 80106a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80106aa:	69fa      	ldr	r2, [r7, #28]
 80106ac:	4b1e      	ldr	r3, [pc, #120]	; (8010728 <UART_EndRxTransfer+0xc8>)
 80106ae:	4013      	ands	r3, r2
 80106b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	3308      	adds	r3, #8
 80106b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80106bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80106c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106c2:	e841 2300 	strex	r3, r2, [r1]
 80106c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80106c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d1e5      	bne.n	801069a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106d2:	2b01      	cmp	r3, #1
 80106d4:	d118      	bne.n	8010708 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	e853 3f00 	ldrex	r3, [r3]
 80106e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	f023 0310 	bic.w	r3, r3, #16
 80106ea:	647b      	str	r3, [r7, #68]	; 0x44
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	461a      	mov	r2, r3
 80106f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106f4:	61bb      	str	r3, [r7, #24]
 80106f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106f8:	6979      	ldr	r1, [r7, #20]
 80106fa:	69ba      	ldr	r2, [r7, #24]
 80106fc:	e841 2300 	strex	r3, r2, [r1]
 8010700:	613b      	str	r3, [r7, #16]
   return(result);
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d1e6      	bne.n	80106d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2220      	movs	r2, #32
 801070c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2200      	movs	r2, #0
 8010714:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2200      	movs	r2, #0
 801071a:	671a      	str	r2, [r3, #112]	; 0x70
}
 801071c:	bf00      	nop
 801071e:	3754      	adds	r7, #84	; 0x54
 8010720:	46bd      	mov	sp, r7
 8010722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010726:	4770      	bx	lr
 8010728:	effffffe 	.word	0xeffffffe

0801072c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b084      	sub	sp, #16
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010738:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	2200      	movs	r2, #0
 801073e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	2200      	movs	r2, #0
 8010746:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801074a:	68f8      	ldr	r0, [r7, #12]
 801074c:	f7fe fe26 	bl	800f39c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010750:	bf00      	nop
 8010752:	3710      	adds	r7, #16
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b088      	sub	sp, #32
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	e853 3f00 	ldrex	r3, [r3]
 801076c:	60bb      	str	r3, [r7, #8]
   return(result);
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010774:	61fb      	str	r3, [r7, #28]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	461a      	mov	r2, r3
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	61bb      	str	r3, [r7, #24]
 8010780:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010782:	6979      	ldr	r1, [r7, #20]
 8010784:	69ba      	ldr	r2, [r7, #24]
 8010786:	e841 2300 	strex	r3, r2, [r1]
 801078a:	613b      	str	r3, [r7, #16]
   return(result);
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d1e6      	bne.n	8010760 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2220      	movs	r2, #32
 8010796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2200      	movs	r2, #0
 801079e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f7fe fdf1 	bl	800f388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80107a6:	bf00      	nop
 80107a8:	3720      	adds	r7, #32
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}

080107ae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80107ae:	b580      	push	{r7, lr}
 80107b0:	b096      	sub	sp, #88	; 0x58
 80107b2:	af00      	add	r7, sp, #0
 80107b4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107c6:	2b22      	cmp	r3, #34	; 0x22
 80107c8:	f040 8095 	bne.w	80108f6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80107d6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80107da:	b2d9      	uxtb	r1, r3
 80107dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80107e0:	b2da      	uxtb	r2, r3
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107e6:	400a      	ands	r2, r1
 80107e8:	b2d2      	uxtb	r2, r2
 80107ea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107f0:	1c5a      	adds	r2, r3, #1
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	3b01      	subs	r3, #1
 8010800:	b29a      	uxth	r2, r3
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801080e:	b29b      	uxth	r3, r3
 8010810:	2b00      	cmp	r3, #0
 8010812:	d178      	bne.n	8010906 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801081a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801081c:	e853 3f00 	ldrex	r3, [r3]
 8010820:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010824:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010828:	653b      	str	r3, [r7, #80]	; 0x50
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	461a      	mov	r2, r3
 8010830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010832:	647b      	str	r3, [r7, #68]	; 0x44
 8010834:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010836:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801083a:	e841 2300 	strex	r3, r2, [r1]
 801083e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010842:	2b00      	cmp	r3, #0
 8010844:	d1e6      	bne.n	8010814 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	3308      	adds	r3, #8
 801084c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801084e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010850:	e853 3f00 	ldrex	r3, [r3]
 8010854:	623b      	str	r3, [r7, #32]
   return(result);
 8010856:	6a3b      	ldr	r3, [r7, #32]
 8010858:	f023 0301 	bic.w	r3, r3, #1
 801085c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	3308      	adds	r3, #8
 8010864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010866:	633a      	str	r2, [r7, #48]	; 0x30
 8010868:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801086a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801086c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801086e:	e841 2300 	strex	r3, r2, [r1]
 8010872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010876:	2b00      	cmp	r3, #0
 8010878:	d1e5      	bne.n	8010846 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2220      	movs	r2, #32
 801087e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2200      	movs	r2, #0
 8010886:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801088c:	2b01      	cmp	r3, #1
 801088e:	d12e      	bne.n	80108ee <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2200      	movs	r2, #0
 8010894:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	e853 3f00 	ldrex	r3, [r3]
 80108a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f023 0310 	bic.w	r3, r3, #16
 80108aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	461a      	mov	r2, r3
 80108b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108b4:	61fb      	str	r3, [r7, #28]
 80108b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108b8:	69b9      	ldr	r1, [r7, #24]
 80108ba:	69fa      	ldr	r2, [r7, #28]
 80108bc:	e841 2300 	strex	r3, r2, [r1]
 80108c0:	617b      	str	r3, [r7, #20]
   return(result);
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d1e6      	bne.n	8010896 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	69db      	ldr	r3, [r3, #28]
 80108ce:	f003 0310 	and.w	r3, r3, #16
 80108d2:	2b10      	cmp	r3, #16
 80108d4:	d103      	bne.n	80108de <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	2210      	movs	r2, #16
 80108dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80108e4:	4619      	mov	r1, r3
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f7fe fd62 	bl	800f3b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80108ec:	e00b      	b.n	8010906 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f7f1 fad0 	bl	8001e94 <HAL_UART_RxCpltCallback>
}
 80108f4:	e007      	b.n	8010906 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	699a      	ldr	r2, [r3, #24]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f042 0208 	orr.w	r2, r2, #8
 8010904:	619a      	str	r2, [r3, #24]
}
 8010906:	bf00      	nop
 8010908:	3758      	adds	r7, #88	; 0x58
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}

0801090e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801090e:	b580      	push	{r7, lr}
 8010910:	b096      	sub	sp, #88	; 0x58
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801091c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010926:	2b22      	cmp	r3, #34	; 0x22
 8010928:	f040 8095 	bne.w	8010a56 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010932:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801093a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801093c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8010940:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010944:	4013      	ands	r3, r2
 8010946:	b29a      	uxth	r2, r3
 8010948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801094a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010950:	1c9a      	adds	r2, r3, #2
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801095c:	b29b      	uxth	r3, r3
 801095e:	3b01      	subs	r3, #1
 8010960:	b29a      	uxth	r2, r3
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801096e:	b29b      	uxth	r3, r3
 8010970:	2b00      	cmp	r3, #0
 8010972:	d178      	bne.n	8010a66 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801097a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801097c:	e853 3f00 	ldrex	r3, [r3]
 8010980:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010984:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010988:	64fb      	str	r3, [r7, #76]	; 0x4c
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	461a      	mov	r2, r3
 8010990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010992:	643b      	str	r3, [r7, #64]	; 0x40
 8010994:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010996:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010998:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801099a:	e841 2300 	strex	r3, r2, [r1]
 801099e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80109a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d1e6      	bne.n	8010974 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	3308      	adds	r3, #8
 80109ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ae:	6a3b      	ldr	r3, [r7, #32]
 80109b0:	e853 3f00 	ldrex	r3, [r3]
 80109b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80109b6:	69fb      	ldr	r3, [r7, #28]
 80109b8:	f023 0301 	bic.w	r3, r3, #1
 80109bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	3308      	adds	r3, #8
 80109c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80109c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109ce:	e841 2300 	strex	r3, r2, [r1]
 80109d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80109d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d1e5      	bne.n	80109a6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2220      	movs	r2, #32
 80109de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2200      	movs	r2, #0
 80109e6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109ec:	2b01      	cmp	r3, #1
 80109ee:	d12e      	bne.n	8010a4e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2200      	movs	r2, #0
 80109f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	e853 3f00 	ldrex	r3, [r3]
 8010a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	f023 0310 	bic.w	r3, r3, #16
 8010a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	461a      	mov	r2, r3
 8010a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a14:	61bb      	str	r3, [r7, #24]
 8010a16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a18:	6979      	ldr	r1, [r7, #20]
 8010a1a:	69ba      	ldr	r2, [r7, #24]
 8010a1c:	e841 2300 	strex	r3, r2, [r1]
 8010a20:	613b      	str	r3, [r7, #16]
   return(result);
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d1e6      	bne.n	80109f6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	69db      	ldr	r3, [r3, #28]
 8010a2e:	f003 0310 	and.w	r3, r3, #16
 8010a32:	2b10      	cmp	r3, #16
 8010a34:	d103      	bne.n	8010a3e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	2210      	movs	r2, #16
 8010a3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010a44:	4619      	mov	r1, r3
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f7fe fcb2 	bl	800f3b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010a4c:	e00b      	b.n	8010a66 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f7f1 fa20 	bl	8001e94 <HAL_UART_RxCpltCallback>
}
 8010a54:	e007      	b.n	8010a66 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	699a      	ldr	r2, [r3, #24]
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f042 0208 	orr.w	r2, r2, #8
 8010a64:	619a      	str	r2, [r3, #24]
}
 8010a66:	bf00      	nop
 8010a68:	3758      	adds	r7, #88	; 0x58
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
	...

08010a70 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b0a6      	sub	sp, #152	; 0x98
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a7e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	69db      	ldr	r3, [r3, #28]
 8010a88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	689b      	ldr	r3, [r3, #8]
 8010a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010aa6:	2b22      	cmp	r3, #34	; 0x22
 8010aa8:	f040 814d 	bne.w	8010d46 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010ab2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010ab6:	e0f4      	b.n	8010ca2 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010abe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010ac2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8010ac6:	b2d9      	uxtb	r1, r3
 8010ac8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010acc:	b2da      	uxtb	r2, r3
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ad2:	400a      	ands	r2, r1
 8010ad4:	b2d2      	uxtb	r2, r2
 8010ad6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010adc:	1c5a      	adds	r2, r3, #1
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ae8:	b29b      	uxth	r3, r3
 8010aea:	3b01      	subs	r3, #1
 8010aec:	b29a      	uxth	r2, r3
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	69db      	ldr	r3, [r3, #28]
 8010afa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010afe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b02:	f003 0307 	and.w	r3, r3, #7
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d053      	beq.n	8010bb2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010b0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b0e:	f003 0301 	and.w	r3, r3, #1
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d011      	beq.n	8010b3a <UART_RxISR_8BIT_FIFOEN+0xca>
 8010b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d00b      	beq.n	8010b3a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	2201      	movs	r2, #1
 8010b28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b30:	f043 0201 	orr.w	r2, r3, #1
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010b3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b3e:	f003 0302 	and.w	r3, r3, #2
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d011      	beq.n	8010b6a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010b46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b4a:	f003 0301 	and.w	r3, r3, #1
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d00b      	beq.n	8010b6a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	2202      	movs	r2, #2
 8010b58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b60:	f043 0204 	orr.w	r2, r3, #4
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010b6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b6e:	f003 0304 	and.w	r3, r3, #4
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d011      	beq.n	8010b9a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010b76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b7a:	f003 0301 	and.w	r3, r3, #1
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d00b      	beq.n	8010b9a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	2204      	movs	r2, #4
 8010b88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b90:	f043 0202 	orr.w	r2, r3, #2
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d006      	beq.n	8010bb2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f7fe fbf9 	bl	800f39c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2200      	movs	r2, #0
 8010bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010bb8:	b29b      	uxth	r3, r3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d171      	bne.n	8010ca2 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bc6:	e853 3f00 	ldrex	r3, [r3]
 8010bca:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010bcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010bce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010bd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	461a      	mov	r2, r3
 8010bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010be0:	66bb      	str	r3, [r7, #104]	; 0x68
 8010be2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010be4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010be6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010be8:	e841 2300 	strex	r3, r2, [r1]
 8010bec:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d1e4      	bne.n	8010bbe <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	3308      	adds	r3, #8
 8010bfa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bfe:	e853 3f00 	ldrex	r3, [r3]
 8010c02:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010c04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c06:	4b56      	ldr	r3, [pc, #344]	; (8010d60 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8010c08:	4013      	ands	r3, r2
 8010c0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	3308      	adds	r3, #8
 8010c12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010c14:	657a      	str	r2, [r7, #84]	; 0x54
 8010c16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010c1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010c1c:	e841 2300 	strex	r3, r2, [r1]
 8010c20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d1e5      	bne.n	8010bf4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2220      	movs	r2, #32
 8010c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2200      	movs	r2, #0
 8010c34:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c3a:	2b01      	cmp	r3, #1
 8010c3c:	d12e      	bne.n	8010c9c <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2200      	movs	r2, #0
 8010c42:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c4c:	e853 3f00 	ldrex	r3, [r3]
 8010c50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c54:	f023 0310 	bic.w	r3, r3, #16
 8010c58:	67bb      	str	r3, [r7, #120]	; 0x78
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	461a      	mov	r2, r3
 8010c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c62:	643b      	str	r3, [r7, #64]	; 0x40
 8010c64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010c68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010c6a:	e841 2300 	strex	r3, r2, [r1]
 8010c6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d1e6      	bne.n	8010c44 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	69db      	ldr	r3, [r3, #28]
 8010c7c:	f003 0310 	and.w	r3, r3, #16
 8010c80:	2b10      	cmp	r3, #16
 8010c82:	d103      	bne.n	8010c8c <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	2210      	movs	r2, #16
 8010c8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010c92:	4619      	mov	r1, r3
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f7fe fb8b 	bl	800f3b0 <HAL_UARTEx_RxEventCallback>
 8010c9a:	e002      	b.n	8010ca2 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f7f1 f8f9 	bl	8001e94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010ca2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d006      	beq.n	8010cb8 <UART_RxISR_8BIT_FIFOEN+0x248>
 8010caa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010cae:	f003 0320 	and.w	r3, r3, #32
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	f47f af00 	bne.w	8010ab8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010cbe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010cc2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d045      	beq.n	8010d56 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010cd0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d23e      	bcs.n	8010d56 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	3308      	adds	r3, #8
 8010cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ce0:	6a3b      	ldr	r3, [r7, #32]
 8010ce2:	e853 3f00 	ldrex	r3, [r3]
 8010ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8010ce8:	69fb      	ldr	r3, [r7, #28]
 8010cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010cee:	673b      	str	r3, [r7, #112]	; 0x70
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	3308      	adds	r3, #8
 8010cf6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d00:	e841 2300 	strex	r3, r2, [r1]
 8010d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d1e5      	bne.n	8010cd8 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	4a15      	ldr	r2, [pc, #84]	; (8010d64 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8010d10:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	e853 3f00 	ldrex	r3, [r3]
 8010d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	f043 0320 	orr.w	r3, r3, #32
 8010d26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d30:	61bb      	str	r3, [r7, #24]
 8010d32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d34:	6979      	ldr	r1, [r7, #20]
 8010d36:	69ba      	ldr	r2, [r7, #24]
 8010d38:	e841 2300 	strex	r3, r2, [r1]
 8010d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d1e6      	bne.n	8010d12 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010d44:	e007      	b.n	8010d56 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	699a      	ldr	r2, [r3, #24]
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	f042 0208 	orr.w	r2, r2, #8
 8010d54:	619a      	str	r2, [r3, #24]
}
 8010d56:	bf00      	nop
 8010d58:	3798      	adds	r7, #152	; 0x98
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
 8010d5e:	bf00      	nop
 8010d60:	effffffe 	.word	0xeffffffe
 8010d64:	080107af 	.word	0x080107af

08010d68 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b0a8      	sub	sp, #160	; 0xa0
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d76:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	69db      	ldr	r3, [r3, #28]
 8010d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	689b      	ldr	r3, [r3, #8]
 8010d94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d9e:	2b22      	cmp	r3, #34	; 0x22
 8010da0:	f040 8151 	bne.w	8011046 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010daa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010dae:	e0f8      	b.n	8010fa2 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010db6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010dbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8010dc2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8010dc6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8010dca:	4013      	ands	r3, r2
 8010dcc:	b29a      	uxth	r2, r3
 8010dce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010dd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010dd8:	1c9a      	adds	r2, r3, #2
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010de4:	b29b      	uxth	r3, r3
 8010de6:	3b01      	subs	r3, #1
 8010de8:	b29a      	uxth	r2, r3
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	69db      	ldr	r3, [r3, #28]
 8010df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010dfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010dfe:	f003 0307 	and.w	r3, r3, #7
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d053      	beq.n	8010eae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010e06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e0a:	f003 0301 	and.w	r3, r3, #1
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d011      	beq.n	8010e36 <UART_RxISR_16BIT_FIFOEN+0xce>
 8010e12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d00b      	beq.n	8010e36 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	2201      	movs	r2, #1
 8010e24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e2c:	f043 0201 	orr.w	r2, r3, #1
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010e36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e3a:	f003 0302 	and.w	r3, r3, #2
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d011      	beq.n	8010e66 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010e42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e46:	f003 0301 	and.w	r3, r3, #1
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d00b      	beq.n	8010e66 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	2202      	movs	r2, #2
 8010e54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e5c:	f043 0204 	orr.w	r2, r3, #4
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010e66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e6a:	f003 0304 	and.w	r3, r3, #4
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d011      	beq.n	8010e96 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e76:	f003 0301 	and.w	r3, r3, #1
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d00b      	beq.n	8010e96 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	2204      	movs	r2, #4
 8010e84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e8c:	f043 0202 	orr.w	r2, r3, #2
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d006      	beq.n	8010eae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f7fe fa7b 	bl	800f39c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d173      	bne.n	8010fa2 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ec0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ec2:	e853 3f00 	ldrex	r3, [r3]
 8010ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ece:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	461a      	mov	r2, r3
 8010ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010edc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010ede:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ee0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010ee2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010ee4:	e841 2300 	strex	r3, r2, [r1]
 8010ee8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010eea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d1e4      	bne.n	8010eba <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	3308      	adds	r3, #8
 8010ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010efa:	e853 3f00 	ldrex	r3, [r3]
 8010efe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f02:	4b57      	ldr	r3, [pc, #348]	; (8011060 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8010f04:	4013      	ands	r3, r2
 8010f06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	3308      	adds	r3, #8
 8010f10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010f14:	65ba      	str	r2, [r7, #88]	; 0x58
 8010f16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010f1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f1c:	e841 2300 	strex	r3, r2, [r1]
 8010f20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d1e3      	bne.n	8010ef0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2220      	movs	r2, #32
 8010f2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2200      	movs	r2, #0
 8010f34:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f3a:	2b01      	cmp	r3, #1
 8010f3c:	d12e      	bne.n	8010f9c <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2200      	movs	r2, #0
 8010f42:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f4c:	e853 3f00 	ldrex	r3, [r3]
 8010f50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f54:	f023 0310 	bic.w	r3, r3, #16
 8010f58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	461a      	mov	r2, r3
 8010f60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010f62:	647b      	str	r3, [r7, #68]	; 0x44
 8010f64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010f68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f6a:	e841 2300 	strex	r3, r2, [r1]
 8010f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d1e6      	bne.n	8010f44 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	69db      	ldr	r3, [r3, #28]
 8010f7c:	f003 0310 	and.w	r3, r3, #16
 8010f80:	2b10      	cmp	r3, #16
 8010f82:	d103      	bne.n	8010f8c <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	2210      	movs	r2, #16
 8010f8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010f92:	4619      	mov	r1, r3
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f7fe fa0b 	bl	800f3b0 <HAL_UARTEx_RxEventCallback>
 8010f9a:	e002      	b.n	8010fa2 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f7f0 ff79 	bl	8001e94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010fa2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d006      	beq.n	8010fb8 <UART_RxISR_16BIT_FIFOEN+0x250>
 8010faa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010fae:	f003 0320 	and.w	r3, r3, #32
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	f47f aefc 	bne.w	8010db0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010fbe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010fc2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d045      	beq.n	8011056 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010fd0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d23e      	bcs.n	8011056 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	3308      	adds	r3, #8
 8010fde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe2:	e853 3f00 	ldrex	r3, [r3]
 8010fe6:	623b      	str	r3, [r7, #32]
   return(result);
 8010fe8:	6a3b      	ldr	r3, [r7, #32]
 8010fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010fee:	677b      	str	r3, [r7, #116]	; 0x74
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	3308      	adds	r3, #8
 8010ff6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010ff8:	633a      	str	r2, [r7, #48]	; 0x30
 8010ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ffc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011000:	e841 2300 	strex	r3, r2, [r1]
 8011004:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011008:	2b00      	cmp	r3, #0
 801100a:	d1e5      	bne.n	8010fd8 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	4a15      	ldr	r2, [pc, #84]	; (8011064 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8011010:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	e853 3f00 	ldrex	r3, [r3]
 801101e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	f043 0320 	orr.w	r3, r3, #32
 8011026:	673b      	str	r3, [r7, #112]	; 0x70
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	461a      	mov	r2, r3
 801102e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011030:	61fb      	str	r3, [r7, #28]
 8011032:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011034:	69b9      	ldr	r1, [r7, #24]
 8011036:	69fa      	ldr	r2, [r7, #28]
 8011038:	e841 2300 	strex	r3, r2, [r1]
 801103c:	617b      	str	r3, [r7, #20]
   return(result);
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d1e6      	bne.n	8011012 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011044:	e007      	b.n	8011056 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	699a      	ldr	r2, [r3, #24]
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	f042 0208 	orr.w	r2, r2, #8
 8011054:	619a      	str	r2, [r3, #24]
}
 8011056:	bf00      	nop
 8011058:	37a0      	adds	r7, #160	; 0xa0
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
 801105e:	bf00      	nop
 8011060:	effffffe 	.word	0xeffffffe
 8011064:	0801090f 	.word	0x0801090f

08011068 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011068:	b480      	push	{r7}
 801106a:	b083      	sub	sp, #12
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011070:	bf00      	nop
 8011072:	370c      	adds	r7, #12
 8011074:	46bd      	mov	sp, r7
 8011076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107a:	4770      	bx	lr

0801107c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801107c:	b480      	push	{r7}
 801107e:	b083      	sub	sp, #12
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011084:	bf00      	nop
 8011086:	370c      	adds	r7, #12
 8011088:	46bd      	mov	sp, r7
 801108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108e:	4770      	bx	lr

08011090 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011090:	b480      	push	{r7}
 8011092:	b083      	sub	sp, #12
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011098:	bf00      	nop
 801109a:	370c      	adds	r7, #12
 801109c:	46bd      	mov	sp, r7
 801109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a2:	4770      	bx	lr

080110a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80110a4:	b480      	push	{r7}
 80110a6:	b085      	sub	sp, #20
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d101      	bne.n	80110ba <HAL_UARTEx_DisableFifoMode+0x16>
 80110b6:	2302      	movs	r3, #2
 80110b8:	e027      	b.n	801110a <HAL_UARTEx_DisableFifoMode+0x66>
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2201      	movs	r2, #1
 80110be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2224      	movs	r2, #36	; 0x24
 80110c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	681a      	ldr	r2, [r3, #0]
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	f022 0201 	bic.w	r2, r2, #1
 80110e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80110e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2200      	movs	r2, #0
 80110ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	68fa      	ldr	r2, [r7, #12]
 80110f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2220      	movs	r2, #32
 80110fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2200      	movs	r2, #0
 8011104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011108:	2300      	movs	r3, #0
}
 801110a:	4618      	mov	r0, r3
 801110c:	3714      	adds	r7, #20
 801110e:	46bd      	mov	sp, r7
 8011110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011114:	4770      	bx	lr

08011116 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011116:	b580      	push	{r7, lr}
 8011118:	b084      	sub	sp, #16
 801111a:	af00      	add	r7, sp, #0
 801111c:	6078      	str	r0, [r7, #4]
 801111e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011126:	2b01      	cmp	r3, #1
 8011128:	d101      	bne.n	801112e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801112a:	2302      	movs	r3, #2
 801112c:	e02d      	b.n	801118a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2201      	movs	r2, #1
 8011132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2224      	movs	r2, #36	; 0x24
 801113a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	681a      	ldr	r2, [r3, #0]
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	f022 0201 	bic.w	r2, r2, #1
 8011154:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	689b      	ldr	r3, [r3, #8]
 801115c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	683a      	ldr	r2, [r7, #0]
 8011166:	430a      	orrs	r2, r1
 8011168:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801116a:	6878      	ldr	r0, [r7, #4]
 801116c:	f000 f850 	bl	8011210 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	68fa      	ldr	r2, [r7, #12]
 8011176:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2220      	movs	r2, #32
 801117c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2200      	movs	r2, #0
 8011184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011188:	2300      	movs	r3, #0
}
 801118a:	4618      	mov	r0, r3
 801118c:	3710      	adds	r7, #16
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}

08011192 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011192:	b580      	push	{r7, lr}
 8011194:	b084      	sub	sp, #16
 8011196:	af00      	add	r7, sp, #0
 8011198:	6078      	str	r0, [r7, #4]
 801119a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80111a2:	2b01      	cmp	r3, #1
 80111a4:	d101      	bne.n	80111aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80111a6:	2302      	movs	r3, #2
 80111a8:	e02d      	b.n	8011206 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2201      	movs	r2, #1
 80111ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2224      	movs	r2, #36	; 0x24
 80111b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	681a      	ldr	r2, [r3, #0]
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	f022 0201 	bic.w	r2, r2, #1
 80111d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	689b      	ldr	r3, [r3, #8]
 80111d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	683a      	ldr	r2, [r7, #0]
 80111e2:	430a      	orrs	r2, r1
 80111e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 f812 	bl	8011210 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	68fa      	ldr	r2, [r7, #12]
 80111f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2220      	movs	r2, #32
 80111f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2200      	movs	r2, #0
 8011200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011204:	2300      	movs	r3, #0
}
 8011206:	4618      	mov	r0, r3
 8011208:	3710      	adds	r7, #16
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}
	...

08011210 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011210:	b480      	push	{r7}
 8011212:	b085      	sub	sp, #20
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801121c:	2b00      	cmp	r3, #0
 801121e:	d108      	bne.n	8011232 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2201      	movs	r2, #1
 8011224:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2201      	movs	r2, #1
 801122c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011230:	e031      	b.n	8011296 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011232:	2310      	movs	r3, #16
 8011234:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011236:	2310      	movs	r3, #16
 8011238:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	689b      	ldr	r3, [r3, #8]
 8011240:	0e5b      	lsrs	r3, r3, #25
 8011242:	b2db      	uxtb	r3, r3
 8011244:	f003 0307 	and.w	r3, r3, #7
 8011248:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	689b      	ldr	r3, [r3, #8]
 8011250:	0f5b      	lsrs	r3, r3, #29
 8011252:	b2db      	uxtb	r3, r3
 8011254:	f003 0307 	and.w	r3, r3, #7
 8011258:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801125a:	7bbb      	ldrb	r3, [r7, #14]
 801125c:	7b3a      	ldrb	r2, [r7, #12]
 801125e:	4911      	ldr	r1, [pc, #68]	; (80112a4 <UARTEx_SetNbDataToProcess+0x94>)
 8011260:	5c8a      	ldrb	r2, [r1, r2]
 8011262:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011266:	7b3a      	ldrb	r2, [r7, #12]
 8011268:	490f      	ldr	r1, [pc, #60]	; (80112a8 <UARTEx_SetNbDataToProcess+0x98>)
 801126a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801126c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011270:	b29a      	uxth	r2, r3
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011278:	7bfb      	ldrb	r3, [r7, #15]
 801127a:	7b7a      	ldrb	r2, [r7, #13]
 801127c:	4909      	ldr	r1, [pc, #36]	; (80112a4 <UARTEx_SetNbDataToProcess+0x94>)
 801127e:	5c8a      	ldrb	r2, [r1, r2]
 8011280:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011284:	7b7a      	ldrb	r2, [r7, #13]
 8011286:	4908      	ldr	r1, [pc, #32]	; (80112a8 <UARTEx_SetNbDataToProcess+0x98>)
 8011288:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801128a:	fb93 f3f2 	sdiv	r3, r3, r2
 801128e:	b29a      	uxth	r2, r3
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011296:	bf00      	nop
 8011298:	3714      	adds	r7, #20
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop
 80112a4:	08018154 	.word	0x08018154
 80112a8:	0801815c 	.word	0x0801815c

080112ac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80112ac:	b480      	push	{r7}
 80112ae:	b083      	sub	sp, #12
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d121      	bne.n	8011302 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681a      	ldr	r2, [r3, #0]
 80112c2:	4b27      	ldr	r3, [pc, #156]	; (8011360 <FMC_SDRAM_Init+0xb4>)
 80112c4:	4013      	ands	r3, r2
 80112c6:	683a      	ldr	r2, [r7, #0]
 80112c8:	6851      	ldr	r1, [r2, #4]
 80112ca:	683a      	ldr	r2, [r7, #0]
 80112cc:	6892      	ldr	r2, [r2, #8]
 80112ce:	4311      	orrs	r1, r2
 80112d0:	683a      	ldr	r2, [r7, #0]
 80112d2:	68d2      	ldr	r2, [r2, #12]
 80112d4:	4311      	orrs	r1, r2
 80112d6:	683a      	ldr	r2, [r7, #0]
 80112d8:	6912      	ldr	r2, [r2, #16]
 80112da:	4311      	orrs	r1, r2
 80112dc:	683a      	ldr	r2, [r7, #0]
 80112de:	6952      	ldr	r2, [r2, #20]
 80112e0:	4311      	orrs	r1, r2
 80112e2:	683a      	ldr	r2, [r7, #0]
 80112e4:	6992      	ldr	r2, [r2, #24]
 80112e6:	4311      	orrs	r1, r2
 80112e8:	683a      	ldr	r2, [r7, #0]
 80112ea:	69d2      	ldr	r2, [r2, #28]
 80112ec:	4311      	orrs	r1, r2
 80112ee:	683a      	ldr	r2, [r7, #0]
 80112f0:	6a12      	ldr	r2, [r2, #32]
 80112f2:	4311      	orrs	r1, r2
 80112f4:	683a      	ldr	r2, [r7, #0]
 80112f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80112f8:	430a      	orrs	r2, r1
 80112fa:	431a      	orrs	r2, r3
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	601a      	str	r2, [r3, #0]
 8011300:	e026      	b.n	8011350 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	69d9      	ldr	r1, [r3, #28]
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	6a1b      	ldr	r3, [r3, #32]
 8011312:	4319      	orrs	r1, r3
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011318:	430b      	orrs	r3, r1
 801131a:	431a      	orrs	r2, r3
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	685a      	ldr	r2, [r3, #4]
 8011324:	4b0e      	ldr	r3, [pc, #56]	; (8011360 <FMC_SDRAM_Init+0xb4>)
 8011326:	4013      	ands	r3, r2
 8011328:	683a      	ldr	r2, [r7, #0]
 801132a:	6851      	ldr	r1, [r2, #4]
 801132c:	683a      	ldr	r2, [r7, #0]
 801132e:	6892      	ldr	r2, [r2, #8]
 8011330:	4311      	orrs	r1, r2
 8011332:	683a      	ldr	r2, [r7, #0]
 8011334:	68d2      	ldr	r2, [r2, #12]
 8011336:	4311      	orrs	r1, r2
 8011338:	683a      	ldr	r2, [r7, #0]
 801133a:	6912      	ldr	r2, [r2, #16]
 801133c:	4311      	orrs	r1, r2
 801133e:	683a      	ldr	r2, [r7, #0]
 8011340:	6952      	ldr	r2, [r2, #20]
 8011342:	4311      	orrs	r1, r2
 8011344:	683a      	ldr	r2, [r7, #0]
 8011346:	6992      	ldr	r2, [r2, #24]
 8011348:	430a      	orrs	r2, r1
 801134a:	431a      	orrs	r2, r3
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8011350:	2300      	movs	r3, #0
}
 8011352:	4618      	mov	r0, r3
 8011354:	370c      	adds	r7, #12
 8011356:	46bd      	mov	sp, r7
 8011358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135c:	4770      	bx	lr
 801135e:	bf00      	nop
 8011360:	ffff8000 	.word	0xffff8000

08011364 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8011364:	b480      	push	{r7}
 8011366:	b085      	sub	sp, #20
 8011368:	af00      	add	r7, sp, #0
 801136a:	60f8      	str	r0, [r7, #12]
 801136c:	60b9      	str	r1, [r7, #8]
 801136e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d128      	bne.n	80113c8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	689b      	ldr	r3, [r3, #8]
 801137a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	1e59      	subs	r1, r3, #1
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	3b01      	subs	r3, #1
 801138a:	011b      	lsls	r3, r3, #4
 801138c:	4319      	orrs	r1, r3
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	689b      	ldr	r3, [r3, #8]
 8011392:	3b01      	subs	r3, #1
 8011394:	021b      	lsls	r3, r3, #8
 8011396:	4319      	orrs	r1, r3
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	68db      	ldr	r3, [r3, #12]
 801139c:	3b01      	subs	r3, #1
 801139e:	031b      	lsls	r3, r3, #12
 80113a0:	4319      	orrs	r1, r3
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	691b      	ldr	r3, [r3, #16]
 80113a6:	3b01      	subs	r3, #1
 80113a8:	041b      	lsls	r3, r3, #16
 80113aa:	4319      	orrs	r1, r3
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	695b      	ldr	r3, [r3, #20]
 80113b0:	3b01      	subs	r3, #1
 80113b2:	051b      	lsls	r3, r3, #20
 80113b4:	4319      	orrs	r1, r3
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	699b      	ldr	r3, [r3, #24]
 80113ba:	3b01      	subs	r3, #1
 80113bc:	061b      	lsls	r3, r3, #24
 80113be:	430b      	orrs	r3, r1
 80113c0:	431a      	orrs	r2, r3
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	609a      	str	r2, [r3, #8]
 80113c6:	e02d      	b.n	8011424 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	689a      	ldr	r2, [r3, #8]
 80113cc:	4b19      	ldr	r3, [pc, #100]	; (8011434 <FMC_SDRAM_Timing_Init+0xd0>)
 80113ce:	4013      	ands	r3, r2
 80113d0:	68ba      	ldr	r2, [r7, #8]
 80113d2:	68d2      	ldr	r2, [r2, #12]
 80113d4:	3a01      	subs	r2, #1
 80113d6:	0311      	lsls	r1, r2, #12
 80113d8:	68ba      	ldr	r2, [r7, #8]
 80113da:	6952      	ldr	r2, [r2, #20]
 80113dc:	3a01      	subs	r2, #1
 80113de:	0512      	lsls	r2, r2, #20
 80113e0:	430a      	orrs	r2, r1
 80113e2:	431a      	orrs	r2, r3
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	1e59      	subs	r1, r3, #1
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	685b      	ldr	r3, [r3, #4]
 80113fa:	3b01      	subs	r3, #1
 80113fc:	011b      	lsls	r3, r3, #4
 80113fe:	4319      	orrs	r1, r3
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	689b      	ldr	r3, [r3, #8]
 8011404:	3b01      	subs	r3, #1
 8011406:	021b      	lsls	r3, r3, #8
 8011408:	4319      	orrs	r1, r3
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	691b      	ldr	r3, [r3, #16]
 801140e:	3b01      	subs	r3, #1
 8011410:	041b      	lsls	r3, r3, #16
 8011412:	4319      	orrs	r1, r3
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	699b      	ldr	r3, [r3, #24]
 8011418:	3b01      	subs	r3, #1
 801141a:	061b      	lsls	r3, r3, #24
 801141c:	430b      	orrs	r3, r1
 801141e:	431a      	orrs	r2, r3
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8011424:	2300      	movs	r3, #0
}
 8011426:	4618      	mov	r0, r3
 8011428:	3714      	adds	r7, #20
 801142a:	46bd      	mov	sp, r7
 801142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011430:	4770      	bx	lr
 8011432:	bf00      	nop
 8011434:	ff0f0fff 	.word	0xff0f0fff

08011438 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8011438:	b480      	push	{r7}
 801143a:	b085      	sub	sp, #20
 801143c:	af00      	add	r7, sp, #0
 801143e:	60f8      	str	r0, [r7, #12]
 8011440:	60b9      	str	r1, [r7, #8]
 8011442:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	691a      	ldr	r2, [r3, #16]
 8011448:	4b0c      	ldr	r3, [pc, #48]	; (801147c <FMC_SDRAM_SendCommand+0x44>)
 801144a:	4013      	ands	r3, r2
 801144c:	68ba      	ldr	r2, [r7, #8]
 801144e:	6811      	ldr	r1, [r2, #0]
 8011450:	68ba      	ldr	r2, [r7, #8]
 8011452:	6852      	ldr	r2, [r2, #4]
 8011454:	4311      	orrs	r1, r2
 8011456:	68ba      	ldr	r2, [r7, #8]
 8011458:	6892      	ldr	r2, [r2, #8]
 801145a:	3a01      	subs	r2, #1
 801145c:	0152      	lsls	r2, r2, #5
 801145e:	4311      	orrs	r1, r2
 8011460:	68ba      	ldr	r2, [r7, #8]
 8011462:	68d2      	ldr	r2, [r2, #12]
 8011464:	0252      	lsls	r2, r2, #9
 8011466:	430a      	orrs	r2, r1
 8011468:	431a      	orrs	r2, r3
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 801146e:	2300      	movs	r3, #0
}
 8011470:	4618      	mov	r0, r3
 8011472:	3714      	adds	r7, #20
 8011474:	46bd      	mov	sp, r7
 8011476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147a:	4770      	bx	lr
 801147c:	ffc00000 	.word	0xffc00000

08011480 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011480:	b480      	push	{r7}
 8011482:	b083      	sub	sp, #12
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	695a      	ldr	r2, [r3, #20]
 801148e:	4b07      	ldr	r3, [pc, #28]	; (80114ac <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8011490:	4013      	ands	r3, r2
 8011492:	683a      	ldr	r2, [r7, #0]
 8011494:	0052      	lsls	r2, r2, #1
 8011496:	431a      	orrs	r2, r3
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 801149c:	2300      	movs	r3, #0
}
 801149e:	4618      	mov	r0, r3
 80114a0:	370c      	adds	r7, #12
 80114a2:	46bd      	mov	sp, r7
 80114a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a8:	4770      	bx	lr
 80114aa:	bf00      	nop
 80114ac:	ffffc001 	.word	0xffffc001

080114b0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80114b0:	b084      	sub	sp, #16
 80114b2:	b480      	push	{r7}
 80114b4:	b085      	sub	sp, #20
 80114b6:	af00      	add	r7, sp, #0
 80114b8:	6078      	str	r0, [r7, #4]
 80114ba:	f107 001c 	add.w	r0, r7, #28
 80114be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80114c2:	2300      	movs	r3, #0
 80114c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80114c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80114c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80114ca:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80114cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80114ce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80114d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80114d2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80114d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80114d6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80114d8:	68fa      	ldr	r2, [r7, #12]
 80114da:	4313      	orrs	r3, r2
 80114dc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	685a      	ldr	r2, [r3, #4]
 80114e2:	4b07      	ldr	r3, [pc, #28]	; (8011500 <SDMMC_Init+0x50>)
 80114e4:	4013      	ands	r3, r2
 80114e6:	68fa      	ldr	r2, [r7, #12]
 80114e8:	431a      	orrs	r2, r3
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80114ee:	2300      	movs	r3, #0
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3714      	adds	r7, #20
 80114f4:	46bd      	mov	sp, r7
 80114f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fa:	b004      	add	sp, #16
 80114fc:	4770      	bx	lr
 80114fe:	bf00      	nop
 8011500:	ffc02c00 	.word	0xffc02c00

08011504 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011504:	b480      	push	{r7}
 8011506:	b083      	sub	sp, #12
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011512:	4618      	mov	r0, r3
 8011514:	370c      	adds	r7, #12
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr

0801151e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801151e:	b480      	push	{r7}
 8011520:	b083      	sub	sp, #12
 8011522:	af00      	add	r7, sp, #0
 8011524:	6078      	str	r0, [r7, #4]
 8011526:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011532:	2300      	movs	r3, #0
}
 8011534:	4618      	mov	r0, r3
 8011536:	370c      	adds	r7, #12
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr

08011540 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011540:	b480      	push	{r7}
 8011542:	b083      	sub	sp, #12
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	f043 0203 	orr.w	r2, r3, #3
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011554:	2300      	movs	r3, #0
}
 8011556:	4618      	mov	r0, r3
 8011558:	370c      	adds	r7, #12
 801155a:	46bd      	mov	sp, r7
 801155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011560:	4770      	bx	lr

08011562 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011562:	b480      	push	{r7}
 8011564:	b083      	sub	sp, #12
 8011566:	af00      	add	r7, sp, #0
 8011568:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f003 0303 	and.w	r3, r3, #3
}
 8011572:	4618      	mov	r0, r3
 8011574:	370c      	adds	r7, #12
 8011576:	46bd      	mov	sp, r7
 8011578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157c:	4770      	bx	lr
	...

08011580 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011580:	b480      	push	{r7}
 8011582:	b085      	sub	sp, #20
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801158a:	2300      	movs	r3, #0
 801158c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801159e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80115a4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80115aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80115ac:	68fa      	ldr	r2, [r7, #12]
 80115ae:	4313      	orrs	r3, r2
 80115b0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	68da      	ldr	r2, [r3, #12]
 80115b6:	4b06      	ldr	r3, [pc, #24]	; (80115d0 <SDMMC_SendCommand+0x50>)
 80115b8:	4013      	ands	r3, r2
 80115ba:	68fa      	ldr	r2, [r7, #12]
 80115bc:	431a      	orrs	r2, r3
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80115c2:	2300      	movs	r3, #0
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	3714      	adds	r7, #20
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr
 80115d0:	fffee0c0 	.word	0xfffee0c0

080115d4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80115d4:	b480      	push	{r7}
 80115d6:	b083      	sub	sp, #12
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	691b      	ldr	r3, [r3, #16]
 80115e0:	b2db      	uxtb	r3, r3
}
 80115e2:	4618      	mov	r0, r3
 80115e4:	370c      	adds	r7, #12
 80115e6:	46bd      	mov	sp, r7
 80115e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ec:	4770      	bx	lr

080115ee <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80115ee:	b480      	push	{r7}
 80115f0:	b085      	sub	sp, #20
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
 80115f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	3314      	adds	r3, #20
 80115fc:	461a      	mov	r2, r3
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	4413      	add	r3, r2
 8011602:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	681b      	ldr	r3, [r3, #0]
}
 8011608:	4618      	mov	r0, r3
 801160a:	3714      	adds	r7, #20
 801160c:	46bd      	mov	sp, r7
 801160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011612:	4770      	bx	lr

08011614 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011614:	b480      	push	{r7}
 8011616:	b085      	sub	sp, #20
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801161e:	2300      	movs	r3, #0
 8011620:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	681a      	ldr	r2, [r3, #0]
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	685a      	ldr	r2, [r3, #4]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011632:	683b      	ldr	r3, [r7, #0]
 8011634:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801163a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011640:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011646:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011648:	68fa      	ldr	r2, [r7, #12]
 801164a:	4313      	orrs	r3, r2
 801164c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011652:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	431a      	orrs	r2, r3
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801165e:	2300      	movs	r3, #0

}
 8011660:	4618      	mov	r0, r3
 8011662:	3714      	adds	r7, #20
 8011664:	46bd      	mov	sp, r7
 8011666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166a:	4770      	bx	lr

0801166c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b088      	sub	sp, #32
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801167a:	2310      	movs	r3, #16
 801167c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801167e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011682:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011684:	2300      	movs	r3, #0
 8011686:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801168c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801168e:	f107 0308 	add.w	r3, r7, #8
 8011692:	4619      	mov	r1, r3
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f7ff ff73 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801169a:	f241 3288 	movw	r2, #5000	; 0x1388
 801169e:	2110      	movs	r1, #16
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f000 fa5f 	bl	8011b64 <SDMMC_GetCmdResp1>
 80116a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116a8:	69fb      	ldr	r3, [r7, #28]
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3720      	adds	r7, #32
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}

080116b2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80116b2:	b580      	push	{r7, lr}
 80116b4:	b088      	sub	sp, #32
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
 80116ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80116c0:	2311      	movs	r3, #17
 80116c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80116c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80116ca:	2300      	movs	r3, #0
 80116cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80116ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116d4:	f107 0308 	add.w	r3, r7, #8
 80116d8:	4619      	mov	r1, r3
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f7ff ff50 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80116e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80116e4:	2111      	movs	r1, #17
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f000 fa3c 	bl	8011b64 <SDMMC_GetCmdResp1>
 80116ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116ee:	69fb      	ldr	r3, [r7, #28]
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3720      	adds	r7, #32
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}

080116f8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b088      	sub	sp, #32
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011706:	2312      	movs	r3, #18
 8011708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801170a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801170e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011710:	2300      	movs	r3, #0
 8011712:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011718:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801171a:	f107 0308 	add.w	r3, r7, #8
 801171e:	4619      	mov	r1, r3
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f7ff ff2d 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011726:	f241 3288 	movw	r2, #5000	; 0x1388
 801172a:	2112      	movs	r1, #18
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f000 fa19 	bl	8011b64 <SDMMC_GetCmdResp1>
 8011732:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011734:	69fb      	ldr	r3, [r7, #28]
}
 8011736:	4618      	mov	r0, r3
 8011738:	3720      	adds	r7, #32
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}

0801173e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801173e:	b580      	push	{r7, lr}
 8011740:	b088      	sub	sp, #32
 8011742:	af00      	add	r7, sp, #0
 8011744:	6078      	str	r0, [r7, #4]
 8011746:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801174c:	2318      	movs	r3, #24
 801174e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011756:	2300      	movs	r3, #0
 8011758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801175a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801175e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011760:	f107 0308 	add.w	r3, r7, #8
 8011764:	4619      	mov	r1, r3
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f7ff ff0a 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801176c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011770:	2118      	movs	r1, #24
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f000 f9f6 	bl	8011b64 <SDMMC_GetCmdResp1>
 8011778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801177a:	69fb      	ldr	r3, [r7, #28]
}
 801177c:	4618      	mov	r0, r3
 801177e:	3720      	adds	r7, #32
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}

08011784 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b088      	sub	sp, #32
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011792:	2319      	movs	r3, #25
 8011794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011796:	f44f 7380 	mov.w	r3, #256	; 0x100
 801179a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801179c:	2300      	movs	r3, #0
 801179e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80117a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80117a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80117a6:	f107 0308 	add.w	r3, r7, #8
 80117aa:	4619      	mov	r1, r3
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	f7ff fee7 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80117b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80117b6:	2119      	movs	r1, #25
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f000 f9d3 	bl	8011b64 <SDMMC_GetCmdResp1>
 80117be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80117c0:	69fb      	ldr	r3, [r7, #28]
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3720      	adds	r7, #32
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}
	...

080117cc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b088      	sub	sp, #32
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80117d4:	2300      	movs	r3, #0
 80117d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80117d8:	230c      	movs	r3, #12
 80117da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80117dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80117e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80117e2:	2300      	movs	r3, #0
 80117e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80117e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80117ea:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	68db      	ldr	r3, [r3, #12]
 80117f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	68db      	ldr	r3, [r3, #12]
 80117fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011804:	f107 0308 	add.w	r3, r7, #8
 8011808:	4619      	mov	r1, r3
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f7ff feb8 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011810:	4a0b      	ldr	r2, [pc, #44]	; (8011840 <SDMMC_CmdStopTransfer+0x74>)
 8011812:	210c      	movs	r1, #12
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f000 f9a5 	bl	8011b64 <SDMMC_GetCmdResp1>
 801181a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011828:	69fb      	ldr	r3, [r7, #28]
 801182a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801182e:	d101      	bne.n	8011834 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011830:	2300      	movs	r3, #0
 8011832:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011834:	69fb      	ldr	r3, [r7, #28]
}
 8011836:	4618      	mov	r0, r3
 8011838:	3720      	adds	r7, #32
 801183a:	46bd      	mov	sp, r7
 801183c:	bd80      	pop	{r7, pc}
 801183e:	bf00      	nop
 8011840:	05f5e100 	.word	0x05f5e100

08011844 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b088      	sub	sp, #32
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
 801184c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011852:	2307      	movs	r3, #7
 8011854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011856:	f44f 7380 	mov.w	r3, #256	; 0x100
 801185a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801185c:	2300      	movs	r3, #0
 801185e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011864:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011866:	f107 0308 	add.w	r3, r7, #8
 801186a:	4619      	mov	r1, r3
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f7ff fe87 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011872:	f241 3288 	movw	r2, #5000	; 0x1388
 8011876:	2107      	movs	r1, #7
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f000 f973 	bl	8011b64 <SDMMC_GetCmdResp1>
 801187e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011880:	69fb      	ldr	r3, [r7, #28]
}
 8011882:	4618      	mov	r0, r3
 8011884:	3720      	adds	r7, #32
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}

0801188a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801188a:	b580      	push	{r7, lr}
 801188c:	b088      	sub	sp, #32
 801188e:	af00      	add	r7, sp, #0
 8011890:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011892:	2300      	movs	r3, #0
 8011894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011896:	2300      	movs	r3, #0
 8011898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801189a:	2300      	movs	r3, #0
 801189c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801189e:	2300      	movs	r3, #0
 80118a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80118a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80118a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80118a8:	f107 0308 	add.w	r3, r7, #8
 80118ac:	4619      	mov	r1, r3
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f7ff fe66 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f000 fb97 	bl	8011fe8 <SDMMC_GetCmdError>
 80118ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80118bc:	69fb      	ldr	r3, [r7, #28]
}
 80118be:	4618      	mov	r0, r3
 80118c0:	3720      	adds	r7, #32
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}

080118c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80118c6:	b580      	push	{r7, lr}
 80118c8:	b088      	sub	sp, #32
 80118ca:	af00      	add	r7, sp, #0
 80118cc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80118ce:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80118d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80118d4:	2308      	movs	r3, #8
 80118d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80118d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80118dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80118de:	2300      	movs	r3, #0
 80118e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80118e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80118e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80118e8:	f107 0308 	add.w	r3, r7, #8
 80118ec:	4619      	mov	r1, r3
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f7ff fe46 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f000 fb29 	bl	8011f4c <SDMMC_GetCmdResp7>
 80118fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80118fc:	69fb      	ldr	r3, [r7, #28]
}
 80118fe:	4618      	mov	r0, r3
 8011900:	3720      	adds	r7, #32
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}

08011906 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011906:	b580      	push	{r7, lr}
 8011908:	b088      	sub	sp, #32
 801190a:	af00      	add	r7, sp, #0
 801190c:	6078      	str	r0, [r7, #4]
 801190e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011914:	2337      	movs	r3, #55	; 0x37
 8011916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011918:	f44f 7380 	mov.w	r3, #256	; 0x100
 801191c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801191e:	2300      	movs	r3, #0
 8011920:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011926:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011928:	f107 0308 	add.w	r3, r7, #8
 801192c:	4619      	mov	r1, r3
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f7ff fe26 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011934:	f241 3288 	movw	r2, #5000	; 0x1388
 8011938:	2137      	movs	r1, #55	; 0x37
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f000 f912 	bl	8011b64 <SDMMC_GetCmdResp1>
 8011940:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011942:	69fb      	ldr	r3, [r7, #28]
}
 8011944:	4618      	mov	r0, r3
 8011946:	3720      	adds	r7, #32
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b088      	sub	sp, #32
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801195a:	2329      	movs	r3, #41	; 0x29
 801195c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801195e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011962:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011964:	2300      	movs	r3, #0
 8011966:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801196c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801196e:	f107 0308 	add.w	r3, r7, #8
 8011972:	4619      	mov	r1, r3
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f7ff fe03 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	f000 fa2e 	bl	8011ddc <SDMMC_GetCmdResp3>
 8011980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011982:	69fb      	ldr	r3, [r7, #28]
}
 8011984:	4618      	mov	r0, r3
 8011986:	3720      	adds	r7, #32
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}

0801198c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b088      	sub	sp, #32
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801199a:	2306      	movs	r3, #6
 801199c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801199e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80119a4:	2300      	movs	r3, #0
 80119a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80119a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80119ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80119ae:	f107 0308 	add.w	r3, r7, #8
 80119b2:	4619      	mov	r1, r3
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f7ff fde3 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80119ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80119be:	2106      	movs	r1, #6
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f000 f8cf 	bl	8011b64 <SDMMC_GetCmdResp1>
 80119c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80119c8:	69fb      	ldr	r3, [r7, #28]
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3720      	adds	r7, #32
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}

080119d2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80119d2:	b580      	push	{r7, lr}
 80119d4:	b088      	sub	sp, #32
 80119d6:	af00      	add	r7, sp, #0
 80119d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80119da:	2300      	movs	r3, #0
 80119dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80119de:	2333      	movs	r3, #51	; 0x33
 80119e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80119e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80119e8:	2300      	movs	r3, #0
 80119ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80119ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80119f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80119f2:	f107 0308 	add.w	r3, r7, #8
 80119f6:	4619      	mov	r1, r3
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f7ff fdc1 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80119fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a02:	2133      	movs	r1, #51	; 0x33
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f000 f8ad 	bl	8011b64 <SDMMC_GetCmdResp1>
 8011a0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a0c:	69fb      	ldr	r3, [r7, #28]
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3720      	adds	r7, #32
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}

08011a16 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011a16:	b580      	push	{r7, lr}
 8011a18:	b088      	sub	sp, #32
 8011a1a:	af00      	add	r7, sp, #0
 8011a1c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011a22:	2302      	movs	r3, #2
 8011a24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011a26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011a2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a36:	f107 0308 	add.w	r3, r7, #8
 8011a3a:	4619      	mov	r1, r3
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f7ff fd9f 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f000 f980 	bl	8011d48 <SDMMC_GetCmdResp2>
 8011a48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a4a:	69fb      	ldr	r3, [r7, #28]
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3720      	adds	r7, #32
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}

08011a54 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b088      	sub	sp, #32
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011a62:	2309      	movs	r3, #9
 8011a64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011a66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011a6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a76:	f107 0308 	add.w	r3, r7, #8
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f7ff fd7f 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011a82:	6878      	ldr	r0, [r7, #4]
 8011a84:	f000 f960 	bl	8011d48 <SDMMC_GetCmdResp2>
 8011a88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a8a:	69fb      	ldr	r3, [r7, #28]
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3720      	adds	r7, #32
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}

08011a94 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b088      	sub	sp, #32
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011aa2:	2303      	movs	r3, #3
 8011aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011aac:	2300      	movs	r3, #0
 8011aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ab4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ab6:	f107 0308 	add.w	r3, r7, #8
 8011aba:	4619      	mov	r1, r3
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f7ff fd5f 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011ac2:	683a      	ldr	r2, [r7, #0]
 8011ac4:	2103      	movs	r1, #3
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f000 f9c8 	bl	8011e5c <SDMMC_GetCmdResp6>
 8011acc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ace:	69fb      	ldr	r3, [r7, #28]
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	3720      	adds	r7, #32
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}

08011ad8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b088      	sub	sp, #32
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
 8011ae0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011ae6:	230d      	movs	r3, #13
 8011ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011aee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011af0:	2300      	movs	r3, #0
 8011af2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011af8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011afa:	f107 0308 	add.w	r3, r7, #8
 8011afe:	4619      	mov	r1, r3
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f7ff fd3d 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b0a:	210d      	movs	r1, #13
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f000 f829 	bl	8011b64 <SDMMC_GetCmdResp1>
 8011b12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b14:	69fb      	ldr	r3, [r7, #28]
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3720      	adds	r7, #32
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}

08011b1e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8011b1e:	b580      	push	{r7, lr}
 8011b20:	b088      	sub	sp, #32
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011b26:	2300      	movs	r3, #0
 8011b28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8011b2a:	230d      	movs	r3, #13
 8011b2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b34:	2300      	movs	r3, #0
 8011b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b3e:	f107 0308 	add.w	r3, r7, #8
 8011b42:	4619      	mov	r1, r3
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f7ff fd1b 	bl	8011580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8011b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b4e:	210d      	movs	r1, #13
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f000 f807 	bl	8011b64 <SDMMC_GetCmdResp1>
 8011b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b58:	69fb      	ldr	r3, [r7, #28]
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3720      	adds	r7, #32
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}
	...

08011b64 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b088      	sub	sp, #32
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	60f8      	str	r0, [r7, #12]
 8011b6c:	460b      	mov	r3, r1
 8011b6e:	607a      	str	r2, [r7, #4]
 8011b70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8011b72:	4b70      	ldr	r3, [pc, #448]	; (8011d34 <SDMMC_GetCmdResp1+0x1d0>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	4a70      	ldr	r2, [pc, #448]	; (8011d38 <SDMMC_GetCmdResp1+0x1d4>)
 8011b78:	fba2 2303 	umull	r2, r3, r2, r3
 8011b7c:	0a5a      	lsrs	r2, r3, #9
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	fb02 f303 	mul.w	r3, r2, r3
 8011b84:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011b86:	69fb      	ldr	r3, [r7, #28]
 8011b88:	1e5a      	subs	r2, r3, #1
 8011b8a:	61fa      	str	r2, [r7, #28]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d102      	bne.n	8011b96 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011b90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b94:	e0c9      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b9a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8011b9c:	69ba      	ldr	r2, [r7, #24]
 8011b9e:	4b67      	ldr	r3, [pc, #412]	; (8011d3c <SDMMC_GetCmdResp1+0x1d8>)
 8011ba0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d0ef      	beq.n	8011b86 <SDMMC_GetCmdResp1+0x22>
 8011ba6:	69bb      	ldr	r3, [r7, #24]
 8011ba8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d1ea      	bne.n	8011b86 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bb4:	f003 0304 	and.w	r3, r3, #4
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d004      	beq.n	8011bc6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	2204      	movs	r2, #4
 8011bc0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011bc2:	2304      	movs	r3, #4
 8011bc4:	e0b1      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bca:	f003 0301 	and.w	r3, r3, #1
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d004      	beq.n	8011bdc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	2201      	movs	r2, #1
 8011bd6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011bd8:	2301      	movs	r3, #1
 8011bda:	e0a6      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	4a58      	ldr	r2, [pc, #352]	; (8011d40 <SDMMC_GetCmdResp1+0x1dc>)
 8011be0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011be2:	68f8      	ldr	r0, [r7, #12]
 8011be4:	f7ff fcf6 	bl	80115d4 <SDMMC_GetCommandResponse>
 8011be8:	4603      	mov	r3, r0
 8011bea:	461a      	mov	r2, r3
 8011bec:	7afb      	ldrb	r3, [r7, #11]
 8011bee:	4293      	cmp	r3, r2
 8011bf0:	d001      	beq.n	8011bf6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	e099      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011bf6:	2100      	movs	r1, #0
 8011bf8:	68f8      	ldr	r0, [r7, #12]
 8011bfa:	f7ff fcf8 	bl	80115ee <SDMMC_GetResponse>
 8011bfe:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011c00:	697a      	ldr	r2, [r7, #20]
 8011c02:	4b50      	ldr	r3, [pc, #320]	; (8011d44 <SDMMC_GetCmdResp1+0x1e0>)
 8011c04:	4013      	ands	r3, r2
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d101      	bne.n	8011c0e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	e08d      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	da02      	bge.n	8011c1a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011c14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011c18:	e087      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d001      	beq.n	8011c28 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011c24:	2340      	movs	r3, #64	; 0x40
 8011c26:	e080      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d001      	beq.n	8011c36 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011c32:	2380      	movs	r3, #128	; 0x80
 8011c34:	e079      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d002      	beq.n	8011c46 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c44:	e071      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d002      	beq.n	8011c56 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011c54:	e069      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d002      	beq.n	8011c66 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c64:	e061      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d002      	beq.n	8011c76 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011c70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011c74:	e059      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d002      	beq.n	8011c86 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c84:	e051      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d002      	beq.n	8011c96 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011c94:	e049      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d002      	beq.n	8011ca6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011ca0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011ca4:	e041      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011ca6:	697b      	ldr	r3, [r7, #20]
 8011ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d002      	beq.n	8011cb6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011cb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011cb4:	e039      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d002      	beq.n	8011cc6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011cc4:	e031      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011cc6:	697b      	ldr	r3, [r7, #20]
 8011cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d002      	beq.n	8011cd6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011cd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011cd4:	e029      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d002      	beq.n	8011ce6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011ce0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011ce4:	e021      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d002      	beq.n	8011cf6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011cf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011cf4:	e019      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d002      	beq.n	8011d06 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011d00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011d04:	e011      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d002      	beq.n	8011d16 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011d10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011d14:	e009      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011d16:	697b      	ldr	r3, [r7, #20]
 8011d18:	f003 0308 	and.w	r3, r3, #8
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d002      	beq.n	8011d26 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011d20:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011d24:	e001      	b.n	8011d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3720      	adds	r7, #32
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}
 8011d32:	bf00      	nop
 8011d34:	2400000c 	.word	0x2400000c
 8011d38:	10624dd3 	.word	0x10624dd3
 8011d3c:	00200045 	.word	0x00200045
 8011d40:	002000c5 	.word	0x002000c5
 8011d44:	fdffe008 	.word	0xfdffe008

08011d48 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011d48:	b480      	push	{r7}
 8011d4a:	b085      	sub	sp, #20
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011d50:	4b1f      	ldr	r3, [pc, #124]	; (8011dd0 <SDMMC_GetCmdResp2+0x88>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	4a1f      	ldr	r2, [pc, #124]	; (8011dd4 <SDMMC_GetCmdResp2+0x8c>)
 8011d56:	fba2 2303 	umull	r2, r3, r2, r3
 8011d5a:	0a5b      	lsrs	r3, r3, #9
 8011d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d60:	fb02 f303 	mul.w	r3, r2, r3
 8011d64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	1e5a      	subs	r2, r3, #1
 8011d6a:	60fa      	str	r2, [r7, #12]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d102      	bne.n	8011d76 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011d70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011d74:	e026      	b.n	8011dc4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d7a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d0ef      	beq.n	8011d66 <SDMMC_GetCmdResp2+0x1e>
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d1ea      	bne.n	8011d66 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d94:	f003 0304 	and.w	r3, r3, #4
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d004      	beq.n	8011da6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2204      	movs	r2, #4
 8011da0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011da2:	2304      	movs	r3, #4
 8011da4:	e00e      	b.n	8011dc4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011daa:	f003 0301 	and.w	r3, r3, #1
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d004      	beq.n	8011dbc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2201      	movs	r2, #1
 8011db6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011db8:	2301      	movs	r3, #1
 8011dba:	e003      	b.n	8011dc4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	4a06      	ldr	r2, [pc, #24]	; (8011dd8 <SDMMC_GetCmdResp2+0x90>)
 8011dc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011dc2:	2300      	movs	r3, #0
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3714      	adds	r7, #20
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dce:	4770      	bx	lr
 8011dd0:	2400000c 	.word	0x2400000c
 8011dd4:	10624dd3 	.word	0x10624dd3
 8011dd8:	002000c5 	.word	0x002000c5

08011ddc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011ddc:	b480      	push	{r7}
 8011dde:	b085      	sub	sp, #20
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011de4:	4b1a      	ldr	r3, [pc, #104]	; (8011e50 <SDMMC_GetCmdResp3+0x74>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	4a1a      	ldr	r2, [pc, #104]	; (8011e54 <SDMMC_GetCmdResp3+0x78>)
 8011dea:	fba2 2303 	umull	r2, r3, r2, r3
 8011dee:	0a5b      	lsrs	r3, r3, #9
 8011df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011df4:	fb02 f303 	mul.w	r3, r2, r3
 8011df8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	1e5a      	subs	r2, r3, #1
 8011dfe:	60fa      	str	r2, [r7, #12]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d102      	bne.n	8011e0a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011e04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011e08:	e01b      	b.n	8011e42 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e0e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d0ef      	beq.n	8011dfa <SDMMC_GetCmdResp3+0x1e>
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d1ea      	bne.n	8011dfa <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e28:	f003 0304 	and.w	r3, r3, #4
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d004      	beq.n	8011e3a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2204      	movs	r2, #4
 8011e34:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011e36:	2304      	movs	r3, #4
 8011e38:	e003      	b.n	8011e42 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	4a06      	ldr	r2, [pc, #24]	; (8011e58 <SDMMC_GetCmdResp3+0x7c>)
 8011e3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011e40:	2300      	movs	r3, #0
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3714      	adds	r7, #20
 8011e46:	46bd      	mov	sp, r7
 8011e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4c:	4770      	bx	lr
 8011e4e:	bf00      	nop
 8011e50:	2400000c 	.word	0x2400000c
 8011e54:	10624dd3 	.word	0x10624dd3
 8011e58:	002000c5 	.word	0x002000c5

08011e5c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b088      	sub	sp, #32
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	60f8      	str	r0, [r7, #12]
 8011e64:	460b      	mov	r3, r1
 8011e66:	607a      	str	r2, [r7, #4]
 8011e68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011e6a:	4b35      	ldr	r3, [pc, #212]	; (8011f40 <SDMMC_GetCmdResp6+0xe4>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	4a35      	ldr	r2, [pc, #212]	; (8011f44 <SDMMC_GetCmdResp6+0xe8>)
 8011e70:	fba2 2303 	umull	r2, r3, r2, r3
 8011e74:	0a5b      	lsrs	r3, r3, #9
 8011e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e7a:	fb02 f303 	mul.w	r3, r2, r3
 8011e7e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011e80:	69fb      	ldr	r3, [r7, #28]
 8011e82:	1e5a      	subs	r2, r3, #1
 8011e84:	61fa      	str	r2, [r7, #28]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d102      	bne.n	8011e90 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011e8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011e8e:	e052      	b.n	8011f36 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e94:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011e96:	69bb      	ldr	r3, [r7, #24]
 8011e98:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d0ef      	beq.n	8011e80 <SDMMC_GetCmdResp6+0x24>
 8011ea0:	69bb      	ldr	r3, [r7, #24]
 8011ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d1ea      	bne.n	8011e80 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011eae:	f003 0304 	and.w	r3, r3, #4
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d004      	beq.n	8011ec0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	2204      	movs	r2, #4
 8011eba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011ebc:	2304      	movs	r3, #4
 8011ebe:	e03a      	b.n	8011f36 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ec4:	f003 0301 	and.w	r3, r3, #1
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d004      	beq.n	8011ed6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	2201      	movs	r2, #1
 8011ed0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	e02f      	b.n	8011f36 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011ed6:	68f8      	ldr	r0, [r7, #12]
 8011ed8:	f7ff fb7c 	bl	80115d4 <SDMMC_GetCommandResponse>
 8011edc:	4603      	mov	r3, r0
 8011ede:	461a      	mov	r2, r3
 8011ee0:	7afb      	ldrb	r3, [r7, #11]
 8011ee2:	4293      	cmp	r3, r2
 8011ee4:	d001      	beq.n	8011eea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	e025      	b.n	8011f36 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	4a16      	ldr	r2, [pc, #88]	; (8011f48 <SDMMC_GetCmdResp6+0xec>)
 8011eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011ef0:	2100      	movs	r1, #0
 8011ef2:	68f8      	ldr	r0, [r7, #12]
 8011ef4:	f7ff fb7b 	bl	80115ee <SDMMC_GetResponse>
 8011ef8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8011efa:	697b      	ldr	r3, [r7, #20]
 8011efc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d106      	bne.n	8011f12 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	0c1b      	lsrs	r3, r3, #16
 8011f08:	b29a      	uxth	r2, r3
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	e011      	b.n	8011f36 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d002      	beq.n	8011f22 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011f1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011f20:	e009      	b.n	8011f36 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d002      	beq.n	8011f32 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f30:	e001      	b.n	8011f36 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	3720      	adds	r7, #32
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	2400000c 	.word	0x2400000c
 8011f44:	10624dd3 	.word	0x10624dd3
 8011f48:	002000c5 	.word	0x002000c5

08011f4c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011f4c:	b480      	push	{r7}
 8011f4e:	b085      	sub	sp, #20
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011f54:	4b22      	ldr	r3, [pc, #136]	; (8011fe0 <SDMMC_GetCmdResp7+0x94>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	4a22      	ldr	r2, [pc, #136]	; (8011fe4 <SDMMC_GetCmdResp7+0x98>)
 8011f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8011f5e:	0a5b      	lsrs	r3, r3, #9
 8011f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f64:	fb02 f303 	mul.w	r3, r2, r3
 8011f68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	1e5a      	subs	r2, r3, #1
 8011f6e:	60fa      	str	r2, [r7, #12]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d102      	bne.n	8011f7a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011f74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011f78:	e02c      	b.n	8011fd4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f7e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d0ef      	beq.n	8011f6a <SDMMC_GetCmdResp7+0x1e>
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d1ea      	bne.n	8011f6a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f98:	f003 0304 	and.w	r3, r3, #4
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d004      	beq.n	8011faa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2204      	movs	r2, #4
 8011fa4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011fa6:	2304      	movs	r3, #4
 8011fa8:	e014      	b.n	8011fd4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fae:	f003 0301 	and.w	r3, r3, #1
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d004      	beq.n	8011fc0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2201      	movs	r2, #1
 8011fba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011fbc:	2301      	movs	r3, #1
 8011fbe:	e009      	b.n	8011fd4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d002      	beq.n	8011fd2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2240      	movs	r2, #64	; 0x40
 8011fd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011fd2:	2300      	movs	r3, #0

}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	3714      	adds	r7, #20
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr
 8011fe0:	2400000c 	.word	0x2400000c
 8011fe4:	10624dd3 	.word	0x10624dd3

08011fe8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b085      	sub	sp, #20
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011ff0:	4b11      	ldr	r3, [pc, #68]	; (8012038 <SDMMC_GetCmdError+0x50>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	4a11      	ldr	r2, [pc, #68]	; (801203c <SDMMC_GetCmdError+0x54>)
 8011ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8011ffa:	0a5b      	lsrs	r3, r3, #9
 8011ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012000:	fb02 f303 	mul.w	r3, r2, r3
 8012004:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	1e5a      	subs	r2, r3, #1
 801200a:	60fa      	str	r2, [r7, #12]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d102      	bne.n	8012016 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012010:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012014:	e009      	b.n	801202a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801201e:	2b00      	cmp	r3, #0
 8012020:	d0f1      	beq.n	8012006 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	4a06      	ldr	r2, [pc, #24]	; (8012040 <SDMMC_GetCmdError+0x58>)
 8012026:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012028:	2300      	movs	r3, #0
}
 801202a:	4618      	mov	r0, r3
 801202c:	3714      	adds	r7, #20
 801202e:	46bd      	mov	sp, r7
 8012030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012034:	4770      	bx	lr
 8012036:	bf00      	nop
 8012038:	2400000c 	.word	0x2400000c
 801203c:	10624dd3 	.word	0x10624dd3
 8012040:	002000c5 	.word	0x002000c5

08012044 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012048:	4904      	ldr	r1, [pc, #16]	; (801205c <MX_FATFS_Init+0x18>)
 801204a:	4805      	ldr	r0, [pc, #20]	; (8012060 <MX_FATFS_Init+0x1c>)
 801204c:	f002 fd56 	bl	8014afc <FATFS_LinkDriver>
 8012050:	4603      	mov	r3, r0
 8012052:	461a      	mov	r2, r3
 8012054:	4b03      	ldr	r3, [pc, #12]	; (8012064 <MX_FATFS_Init+0x20>)
 8012056:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012058:	bf00      	nop
 801205a:	bd80      	pop	{r7, pc}
 801205c:	24008a18 	.word	0x24008a18
 8012060:	08018164 	.word	0x08018164
 8012064:	24008a14 	.word	0x24008a14

08012068 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012068:	b480      	push	{r7}
 801206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801206c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801206e:	4618      	mov	r0, r3
 8012070:	46bd      	mov	sp, r7
 8012072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012076:	4770      	bx	lr

08012078 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801207e:	2300      	movs	r3, #0
 8012080:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012082:	f000 f885 	bl	8012190 <BSP_SD_IsDetected>
 8012086:	4603      	mov	r3, r0
 8012088:	2b01      	cmp	r3, #1
 801208a:	d001      	beq.n	8012090 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801208c:	2302      	movs	r3, #2
 801208e:	e012      	b.n	80120b6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8012090:	480b      	ldr	r0, [pc, #44]	; (80120c0 <BSP_SD_Init+0x48>)
 8012092:	f7f8 fa21 	bl	800a4d8 <HAL_SD_Init>
 8012096:	4603      	mov	r3, r0
 8012098:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801209a:	79fb      	ldrb	r3, [r7, #7]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d109      	bne.n	80120b4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80120a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80120a4:	4806      	ldr	r0, [pc, #24]	; (80120c0 <BSP_SD_Init+0x48>)
 80120a6:	f7f9 f8d1 	bl	800b24c <HAL_SD_ConfigWideBusOperation>
 80120aa:	4603      	mov	r3, r0
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d001      	beq.n	80120b4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80120b0:	2301      	movs	r3, #1
 80120b2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80120b4:	79fb      	ldrb	r3, [r7, #7]
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3708      	adds	r7, #8
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
 80120be:	bf00      	nop
 80120c0:	24008214 	.word	0x24008214

080120c4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b086      	sub	sp, #24
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80120d0:	2300      	movs	r3, #0
 80120d2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	68ba      	ldr	r2, [r7, #8]
 80120d8:	68f9      	ldr	r1, [r7, #12]
 80120da:	4806      	ldr	r0, [pc, #24]	; (80120f4 <BSP_SD_ReadBlocks_DMA+0x30>)
 80120dc:	f7f8 fb16 	bl	800a70c <HAL_SD_ReadBlocks_DMA>
 80120e0:	4603      	mov	r3, r0
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d001      	beq.n	80120ea <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80120e6:	2301      	movs	r3, #1
 80120e8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80120ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80120ec:	4618      	mov	r0, r3
 80120ee:	3718      	adds	r7, #24
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}
 80120f4:	24008214 	.word	0x24008214

080120f8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b086      	sub	sp, #24
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	60f8      	str	r0, [r7, #12]
 8012100:	60b9      	str	r1, [r7, #8]
 8012102:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012104:	2300      	movs	r3, #0
 8012106:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	68ba      	ldr	r2, [r7, #8]
 801210c:	68f9      	ldr	r1, [r7, #12]
 801210e:	4806      	ldr	r0, [pc, #24]	; (8012128 <BSP_SD_WriteBlocks_DMA+0x30>)
 8012110:	f7f8 fba4 	bl	800a85c <HAL_SD_WriteBlocks_DMA>
 8012114:	4603      	mov	r3, r0
 8012116:	2b00      	cmp	r3, #0
 8012118:	d001      	beq.n	801211e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801211a:	2301      	movs	r3, #1
 801211c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801211e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012120:	4618      	mov	r0, r3
 8012122:	3718      	adds	r7, #24
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}
 8012128:	24008214 	.word	0x24008214

0801212c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012130:	4805      	ldr	r0, [pc, #20]	; (8012148 <BSP_SD_GetCardState+0x1c>)
 8012132:	f7f9 f99d 	bl	800b470 <HAL_SD_GetCardState>
 8012136:	4603      	mov	r3, r0
 8012138:	2b04      	cmp	r3, #4
 801213a:	bf14      	ite	ne
 801213c:	2301      	movne	r3, #1
 801213e:	2300      	moveq	r3, #0
 8012140:	b2db      	uxtb	r3, r3
}
 8012142:	4618      	mov	r0, r3
 8012144:	bd80      	pop	{r7, pc}
 8012146:	bf00      	nop
 8012148:	24008214 	.word	0x24008214

0801214c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8012154:	6879      	ldr	r1, [r7, #4]
 8012156:	4803      	ldr	r0, [pc, #12]	; (8012164 <BSP_SD_GetCardInfo+0x18>)
 8012158:	f7f9 f84c 	bl	800b1f4 <HAL_SD_GetCardInfo>
}
 801215c:	bf00      	nop
 801215e:	3708      	adds	r7, #8
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}
 8012164:	24008214 	.word	0x24008214

08012168 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b082      	sub	sp, #8
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012170:	f000 f984 	bl	801247c <BSP_SD_WriteCpltCallback>
}
 8012174:	bf00      	nop
 8012176:	3708      	adds	r7, #8
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}

0801217c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b082      	sub	sp, #8
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012184:	f000 f986 	bl	8012494 <BSP_SD_ReadCpltCallback>
}
 8012188:	bf00      	nop
 801218a:	3708      	adds	r7, #8
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012190:	b480      	push	{r7}
 8012192:	b083      	sub	sp, #12
 8012194:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012196:	2301      	movs	r3, #1
 8012198:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 801219a:	79fb      	ldrb	r3, [r7, #7]
 801219c:	b2db      	uxtb	r3, r3
}
 801219e:	4618      	mov	r0, r3
 80121a0:	370c      	adds	r7, #12
 80121a2:	46bd      	mov	sp, r7
 80121a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a8:	4770      	bx	lr

080121aa <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80121aa:	b580      	push	{r7, lr}
 80121ac:	b084      	sub	sp, #16
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80121b2:	f7f1 febb 	bl	8003f2c <HAL_GetTick>
 80121b6:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80121b8:	e006      	b.n	80121c8 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80121ba:	f7ff ffb7 	bl	801212c <BSP_SD_GetCardState>
 80121be:	4603      	mov	r3, r0
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d101      	bne.n	80121c8 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80121c4:	2300      	movs	r3, #0
 80121c6:	e009      	b.n	80121dc <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80121c8:	f7f1 feb0 	bl	8003f2c <HAL_GetTick>
 80121cc:	4602      	mov	r2, r0
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	1ad3      	subs	r3, r2, r3
 80121d2:	687a      	ldr	r2, [r7, #4]
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d8f0      	bhi.n	80121ba <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80121d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80121dc:	4618      	mov	r0, r3
 80121de:	3710      	adds	r7, #16
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}

080121e4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b082      	sub	sp, #8
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	4603      	mov	r3, r0
 80121ec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80121ee:	4b0b      	ldr	r3, [pc, #44]	; (801221c <SD_CheckStatus+0x38>)
 80121f0:	2201      	movs	r2, #1
 80121f2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80121f4:	f7ff ff9a 	bl	801212c <BSP_SD_GetCardState>
 80121f8:	4603      	mov	r3, r0
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d107      	bne.n	801220e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80121fe:	4b07      	ldr	r3, [pc, #28]	; (801221c <SD_CheckStatus+0x38>)
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	b2db      	uxtb	r3, r3
 8012204:	f023 0301 	bic.w	r3, r3, #1
 8012208:	b2da      	uxtb	r2, r3
 801220a:	4b04      	ldr	r3, [pc, #16]	; (801221c <SD_CheckStatus+0x38>)
 801220c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801220e:	4b03      	ldr	r3, [pc, #12]	; (801221c <SD_CheckStatus+0x38>)
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	b2db      	uxtb	r3, r3
}
 8012214:	4618      	mov	r0, r3
 8012216:	3708      	adds	r7, #8
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}
 801221c:	24000019 	.word	0x24000019

08012220 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	4603      	mov	r3, r0
 8012228:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801222a:	f7ff ff25 	bl	8012078 <BSP_SD_Init>
 801222e:	4603      	mov	r3, r0
 8012230:	2b00      	cmp	r3, #0
 8012232:	d107      	bne.n	8012244 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8012234:	79fb      	ldrb	r3, [r7, #7]
 8012236:	4618      	mov	r0, r3
 8012238:	f7ff ffd4 	bl	80121e4 <SD_CheckStatus>
 801223c:	4603      	mov	r3, r0
 801223e:	461a      	mov	r2, r3
 8012240:	4b04      	ldr	r3, [pc, #16]	; (8012254 <SD_initialize+0x34>)
 8012242:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012244:	4b03      	ldr	r3, [pc, #12]	; (8012254 <SD_initialize+0x34>)
 8012246:	781b      	ldrb	r3, [r3, #0]
 8012248:	b2db      	uxtb	r3, r3
}
 801224a:	4618      	mov	r0, r3
 801224c:	3708      	adds	r7, #8
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}
 8012252:	bf00      	nop
 8012254:	24000019 	.word	0x24000019

08012258 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
 801225e:	4603      	mov	r3, r0
 8012260:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012262:	79fb      	ldrb	r3, [r7, #7]
 8012264:	4618      	mov	r0, r3
 8012266:	f7ff ffbd 	bl	80121e4 <SD_CheckStatus>
 801226a:	4603      	mov	r3, r0
}
 801226c:	4618      	mov	r0, r3
 801226e:	3708      	adds	r7, #8
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}

08012274 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b086      	sub	sp, #24
 8012278:	af00      	add	r7, sp, #0
 801227a:	60b9      	str	r1, [r7, #8]
 801227c:	607a      	str	r2, [r7, #4]
 801227e:	603b      	str	r3, [r7, #0]
 8012280:	4603      	mov	r3, r0
 8012282:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012284:	2301      	movs	r3, #1
 8012286:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012288:	f247 5030 	movw	r0, #30000	; 0x7530
 801228c:	f7ff ff8d 	bl	80121aa <SD_CheckStatusWithTimeout>
 8012290:	4603      	mov	r3, r0
 8012292:	2b00      	cmp	r3, #0
 8012294:	da01      	bge.n	801229a <SD_read+0x26>
  {
    return res;
 8012296:	7dfb      	ldrb	r3, [r7, #23]
 8012298:	e03b      	b.n	8012312 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801229a:	683a      	ldr	r2, [r7, #0]
 801229c:	6879      	ldr	r1, [r7, #4]
 801229e:	68b8      	ldr	r0, [r7, #8]
 80122a0:	f7ff ff10 	bl	80120c4 <BSP_SD_ReadBlocks_DMA>
 80122a4:	4603      	mov	r3, r0
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d132      	bne.n	8012310 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80122aa:	4b1c      	ldr	r3, [pc, #112]	; (801231c <SD_read+0xa8>)
 80122ac:	2200      	movs	r2, #0
 80122ae:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80122b0:	f7f1 fe3c 	bl	8003f2c <HAL_GetTick>
 80122b4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80122b6:	bf00      	nop
 80122b8:	4b18      	ldr	r3, [pc, #96]	; (801231c <SD_read+0xa8>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d108      	bne.n	80122d2 <SD_read+0x5e>
 80122c0:	f7f1 fe34 	bl	8003f2c <HAL_GetTick>
 80122c4:	4602      	mov	r2, r0
 80122c6:	693b      	ldr	r3, [r7, #16]
 80122c8:	1ad3      	subs	r3, r2, r3
 80122ca:	f247 522f 	movw	r2, #29999	; 0x752f
 80122ce:	4293      	cmp	r3, r2
 80122d0:	d9f2      	bls.n	80122b8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80122d2:	4b12      	ldr	r3, [pc, #72]	; (801231c <SD_read+0xa8>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d102      	bne.n	80122e0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80122da:	2301      	movs	r3, #1
 80122dc:	75fb      	strb	r3, [r7, #23]
 80122de:	e017      	b.n	8012310 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80122e0:	4b0e      	ldr	r3, [pc, #56]	; (801231c <SD_read+0xa8>)
 80122e2:	2200      	movs	r2, #0
 80122e4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80122e6:	f7f1 fe21 	bl	8003f2c <HAL_GetTick>
 80122ea:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80122ec:	e007      	b.n	80122fe <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80122ee:	f7ff ff1d 	bl	801212c <BSP_SD_GetCardState>
 80122f2:	4603      	mov	r3, r0
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d102      	bne.n	80122fe <SD_read+0x8a>
          {
            res = RES_OK;
 80122f8:	2300      	movs	r3, #0
 80122fa:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80122fc:	e008      	b.n	8012310 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80122fe:	f7f1 fe15 	bl	8003f2c <HAL_GetTick>
 8012302:	4602      	mov	r2, r0
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	1ad3      	subs	r3, r2, r3
 8012308:	f247 522f 	movw	r2, #29999	; 0x752f
 801230c:	4293      	cmp	r3, r2
 801230e:	d9ee      	bls.n	80122ee <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8012310:	7dfb      	ldrb	r3, [r7, #23]
}
 8012312:	4618      	mov	r0, r3
 8012314:	3718      	adds	r7, #24
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}
 801231a:	bf00      	nop
 801231c:	24008e80 	.word	0x24008e80

08012320 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b086      	sub	sp, #24
 8012324:	af00      	add	r7, sp, #0
 8012326:	60b9      	str	r1, [r7, #8]
 8012328:	607a      	str	r2, [r7, #4]
 801232a:	603b      	str	r3, [r7, #0]
 801232c:	4603      	mov	r3, r0
 801232e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012330:	2301      	movs	r3, #1
 8012332:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8012334:	4b24      	ldr	r3, [pc, #144]	; (80123c8 <SD_write+0xa8>)
 8012336:	2200      	movs	r2, #0
 8012338:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801233a:	f247 5030 	movw	r0, #30000	; 0x7530
 801233e:	f7ff ff34 	bl	80121aa <SD_CheckStatusWithTimeout>
 8012342:	4603      	mov	r3, r0
 8012344:	2b00      	cmp	r3, #0
 8012346:	da01      	bge.n	801234c <SD_write+0x2c>
  {
    return res;
 8012348:	7dfb      	ldrb	r3, [r7, #23]
 801234a:	e038      	b.n	80123be <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801234c:	683a      	ldr	r2, [r7, #0]
 801234e:	6879      	ldr	r1, [r7, #4]
 8012350:	68b8      	ldr	r0, [r7, #8]
 8012352:	f7ff fed1 	bl	80120f8 <BSP_SD_WriteBlocks_DMA>
 8012356:	4603      	mov	r3, r0
 8012358:	2b00      	cmp	r3, #0
 801235a:	d12f      	bne.n	80123bc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801235c:	f7f1 fde6 	bl	8003f2c <HAL_GetTick>
 8012360:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012362:	bf00      	nop
 8012364:	4b18      	ldr	r3, [pc, #96]	; (80123c8 <SD_write+0xa8>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d108      	bne.n	801237e <SD_write+0x5e>
 801236c:	f7f1 fdde 	bl	8003f2c <HAL_GetTick>
 8012370:	4602      	mov	r2, r0
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	1ad3      	subs	r3, r2, r3
 8012376:	f247 522f 	movw	r2, #29999	; 0x752f
 801237a:	4293      	cmp	r3, r2
 801237c:	d9f2      	bls.n	8012364 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801237e:	4b12      	ldr	r3, [pc, #72]	; (80123c8 <SD_write+0xa8>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d102      	bne.n	801238c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8012386:	2301      	movs	r3, #1
 8012388:	75fb      	strb	r3, [r7, #23]
 801238a:	e017      	b.n	80123bc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801238c:	4b0e      	ldr	r3, [pc, #56]	; (80123c8 <SD_write+0xa8>)
 801238e:	2200      	movs	r2, #0
 8012390:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012392:	f7f1 fdcb 	bl	8003f2c <HAL_GetTick>
 8012396:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012398:	e007      	b.n	80123aa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801239a:	f7ff fec7 	bl	801212c <BSP_SD_GetCardState>
 801239e:	4603      	mov	r3, r0
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d102      	bne.n	80123aa <SD_write+0x8a>
          {
            res = RES_OK;
 80123a4:	2300      	movs	r3, #0
 80123a6:	75fb      	strb	r3, [r7, #23]
            break;
 80123a8:	e008      	b.n	80123bc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80123aa:	f7f1 fdbf 	bl	8003f2c <HAL_GetTick>
 80123ae:	4602      	mov	r2, r0
 80123b0:	693b      	ldr	r3, [r7, #16]
 80123b2:	1ad3      	subs	r3, r2, r3
 80123b4:	f247 522f 	movw	r2, #29999	; 0x752f
 80123b8:	4293      	cmp	r3, r2
 80123ba:	d9ee      	bls.n	801239a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80123bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3718      	adds	r7, #24
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}
 80123c6:	bf00      	nop
 80123c8:	24008e7c 	.word	0x24008e7c

080123cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b08c      	sub	sp, #48	; 0x30
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	4603      	mov	r3, r0
 80123d4:	603a      	str	r2, [r7, #0]
 80123d6:	71fb      	strb	r3, [r7, #7]
 80123d8:	460b      	mov	r3, r1
 80123da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80123dc:	2301      	movs	r3, #1
 80123de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80123e2:	4b25      	ldr	r3, [pc, #148]	; (8012478 <SD_ioctl+0xac>)
 80123e4:	781b      	ldrb	r3, [r3, #0]
 80123e6:	b2db      	uxtb	r3, r3
 80123e8:	f003 0301 	and.w	r3, r3, #1
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d001      	beq.n	80123f4 <SD_ioctl+0x28>
 80123f0:	2303      	movs	r3, #3
 80123f2:	e03c      	b.n	801246e <SD_ioctl+0xa2>

  switch (cmd)
 80123f4:	79bb      	ldrb	r3, [r7, #6]
 80123f6:	2b03      	cmp	r3, #3
 80123f8:	d834      	bhi.n	8012464 <SD_ioctl+0x98>
 80123fa:	a201      	add	r2, pc, #4	; (adr r2, 8012400 <SD_ioctl+0x34>)
 80123fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012400:	08012411 	.word	0x08012411
 8012404:	08012419 	.word	0x08012419
 8012408:	08012431 	.word	0x08012431
 801240c:	0801244b 	.word	0x0801244b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012410:	2300      	movs	r3, #0
 8012412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012416:	e028      	b.n	801246a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012418:	f107 0308 	add.w	r3, r7, #8
 801241c:	4618      	mov	r0, r3
 801241e:	f7ff fe95 	bl	801214c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012422:	6a3a      	ldr	r2, [r7, #32]
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012428:	2300      	movs	r3, #0
 801242a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801242e:	e01c      	b.n	801246a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012430:	f107 0308 	add.w	r3, r7, #8
 8012434:	4618      	mov	r0, r3
 8012436:	f7ff fe89 	bl	801214c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243c:	b29a      	uxth	r2, r3
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012442:	2300      	movs	r3, #0
 8012444:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012448:	e00f      	b.n	801246a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801244a:	f107 0308 	add.w	r3, r7, #8
 801244e:	4618      	mov	r0, r3
 8012450:	f7ff fe7c 	bl	801214c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012456:	0a5a      	lsrs	r2, r3, #9
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801245c:	2300      	movs	r3, #0
 801245e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012462:	e002      	b.n	801246a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012464:	2304      	movs	r3, #4
 8012466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801246a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801246e:	4618      	mov	r0, r3
 8012470:	3730      	adds	r7, #48	; 0x30
 8012472:	46bd      	mov	sp, r7
 8012474:	bd80      	pop	{r7, pc}
 8012476:	bf00      	nop
 8012478:	24000019 	.word	0x24000019

0801247c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801247c:	b480      	push	{r7}
 801247e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8012480:	4b03      	ldr	r3, [pc, #12]	; (8012490 <BSP_SD_WriteCpltCallback+0x14>)
 8012482:	2201      	movs	r2, #1
 8012484:	601a      	str	r2, [r3, #0]
}
 8012486:	bf00      	nop
 8012488:	46bd      	mov	sp, r7
 801248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248e:	4770      	bx	lr
 8012490:	24008e7c 	.word	0x24008e7c

08012494 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012494:	b480      	push	{r7}
 8012496:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8012498:	4b03      	ldr	r3, [pc, #12]	; (80124a8 <BSP_SD_ReadCpltCallback+0x14>)
 801249a:	2201      	movs	r2, #1
 801249c:	601a      	str	r2, [r3, #0]
}
 801249e:	bf00      	nop
 80124a0:	46bd      	mov	sp, r7
 80124a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a6:	4770      	bx	lr
 80124a8:	24008e80 	.word	0x24008e80

080124ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b084      	sub	sp, #16
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	4603      	mov	r3, r0
 80124b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80124b6:	79fb      	ldrb	r3, [r7, #7]
 80124b8:	4a08      	ldr	r2, [pc, #32]	; (80124dc <disk_status+0x30>)
 80124ba:	009b      	lsls	r3, r3, #2
 80124bc:	4413      	add	r3, r2
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	685b      	ldr	r3, [r3, #4]
 80124c2:	79fa      	ldrb	r2, [r7, #7]
 80124c4:	4905      	ldr	r1, [pc, #20]	; (80124dc <disk_status+0x30>)
 80124c6:	440a      	add	r2, r1
 80124c8:	7a12      	ldrb	r2, [r2, #8]
 80124ca:	4610      	mov	r0, r2
 80124cc:	4798      	blx	r3
 80124ce:	4603      	mov	r3, r0
 80124d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80124d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3710      	adds	r7, #16
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}
 80124dc:	24008eac 	.word	0x24008eac

080124e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b084      	sub	sp, #16
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	4603      	mov	r3, r0
 80124e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80124ea:	2300      	movs	r3, #0
 80124ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80124ee:	79fb      	ldrb	r3, [r7, #7]
 80124f0:	4a0d      	ldr	r2, [pc, #52]	; (8012528 <disk_initialize+0x48>)
 80124f2:	5cd3      	ldrb	r3, [r2, r3]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d111      	bne.n	801251c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80124f8:	79fb      	ldrb	r3, [r7, #7]
 80124fa:	4a0b      	ldr	r2, [pc, #44]	; (8012528 <disk_initialize+0x48>)
 80124fc:	2101      	movs	r1, #1
 80124fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012500:	79fb      	ldrb	r3, [r7, #7]
 8012502:	4a09      	ldr	r2, [pc, #36]	; (8012528 <disk_initialize+0x48>)
 8012504:	009b      	lsls	r3, r3, #2
 8012506:	4413      	add	r3, r2
 8012508:	685b      	ldr	r3, [r3, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	79fa      	ldrb	r2, [r7, #7]
 801250e:	4906      	ldr	r1, [pc, #24]	; (8012528 <disk_initialize+0x48>)
 8012510:	440a      	add	r2, r1
 8012512:	7a12      	ldrb	r2, [r2, #8]
 8012514:	4610      	mov	r0, r2
 8012516:	4798      	blx	r3
 8012518:	4603      	mov	r3, r0
 801251a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801251c:	7bfb      	ldrb	r3, [r7, #15]
}
 801251e:	4618      	mov	r0, r3
 8012520:	3710      	adds	r7, #16
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	24008eac 	.word	0x24008eac

0801252c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801252c:	b590      	push	{r4, r7, lr}
 801252e:	b087      	sub	sp, #28
 8012530:	af00      	add	r7, sp, #0
 8012532:	60b9      	str	r1, [r7, #8]
 8012534:	607a      	str	r2, [r7, #4]
 8012536:	603b      	str	r3, [r7, #0]
 8012538:	4603      	mov	r3, r0
 801253a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801253c:	7bfb      	ldrb	r3, [r7, #15]
 801253e:	4a0a      	ldr	r2, [pc, #40]	; (8012568 <disk_read+0x3c>)
 8012540:	009b      	lsls	r3, r3, #2
 8012542:	4413      	add	r3, r2
 8012544:	685b      	ldr	r3, [r3, #4]
 8012546:	689c      	ldr	r4, [r3, #8]
 8012548:	7bfb      	ldrb	r3, [r7, #15]
 801254a:	4a07      	ldr	r2, [pc, #28]	; (8012568 <disk_read+0x3c>)
 801254c:	4413      	add	r3, r2
 801254e:	7a18      	ldrb	r0, [r3, #8]
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	687a      	ldr	r2, [r7, #4]
 8012554:	68b9      	ldr	r1, [r7, #8]
 8012556:	47a0      	blx	r4
 8012558:	4603      	mov	r3, r0
 801255a:	75fb      	strb	r3, [r7, #23]
  return res;
 801255c:	7dfb      	ldrb	r3, [r7, #23]
}
 801255e:	4618      	mov	r0, r3
 8012560:	371c      	adds	r7, #28
 8012562:	46bd      	mov	sp, r7
 8012564:	bd90      	pop	{r4, r7, pc}
 8012566:	bf00      	nop
 8012568:	24008eac 	.word	0x24008eac

0801256c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801256c:	b590      	push	{r4, r7, lr}
 801256e:	b087      	sub	sp, #28
 8012570:	af00      	add	r7, sp, #0
 8012572:	60b9      	str	r1, [r7, #8]
 8012574:	607a      	str	r2, [r7, #4]
 8012576:	603b      	str	r3, [r7, #0]
 8012578:	4603      	mov	r3, r0
 801257a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801257c:	7bfb      	ldrb	r3, [r7, #15]
 801257e:	4a0a      	ldr	r2, [pc, #40]	; (80125a8 <disk_write+0x3c>)
 8012580:	009b      	lsls	r3, r3, #2
 8012582:	4413      	add	r3, r2
 8012584:	685b      	ldr	r3, [r3, #4]
 8012586:	68dc      	ldr	r4, [r3, #12]
 8012588:	7bfb      	ldrb	r3, [r7, #15]
 801258a:	4a07      	ldr	r2, [pc, #28]	; (80125a8 <disk_write+0x3c>)
 801258c:	4413      	add	r3, r2
 801258e:	7a18      	ldrb	r0, [r3, #8]
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	687a      	ldr	r2, [r7, #4]
 8012594:	68b9      	ldr	r1, [r7, #8]
 8012596:	47a0      	blx	r4
 8012598:	4603      	mov	r3, r0
 801259a:	75fb      	strb	r3, [r7, #23]
  return res;
 801259c:	7dfb      	ldrb	r3, [r7, #23]
}
 801259e:	4618      	mov	r0, r3
 80125a0:	371c      	adds	r7, #28
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd90      	pop	{r4, r7, pc}
 80125a6:	bf00      	nop
 80125a8:	24008eac 	.word	0x24008eac

080125ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b084      	sub	sp, #16
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	4603      	mov	r3, r0
 80125b4:	603a      	str	r2, [r7, #0]
 80125b6:	71fb      	strb	r3, [r7, #7]
 80125b8:	460b      	mov	r3, r1
 80125ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80125bc:	79fb      	ldrb	r3, [r7, #7]
 80125be:	4a09      	ldr	r2, [pc, #36]	; (80125e4 <disk_ioctl+0x38>)
 80125c0:	009b      	lsls	r3, r3, #2
 80125c2:	4413      	add	r3, r2
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	691b      	ldr	r3, [r3, #16]
 80125c8:	79fa      	ldrb	r2, [r7, #7]
 80125ca:	4906      	ldr	r1, [pc, #24]	; (80125e4 <disk_ioctl+0x38>)
 80125cc:	440a      	add	r2, r1
 80125ce:	7a10      	ldrb	r0, [r2, #8]
 80125d0:	79b9      	ldrb	r1, [r7, #6]
 80125d2:	683a      	ldr	r2, [r7, #0]
 80125d4:	4798      	blx	r3
 80125d6:	4603      	mov	r3, r0
 80125d8:	73fb      	strb	r3, [r7, #15]
  return res;
 80125da:	7bfb      	ldrb	r3, [r7, #15]
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3710      	adds	r7, #16
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}
 80125e4:	24008eac 	.word	0x24008eac

080125e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80125e8:	b480      	push	{r7}
 80125ea:	b085      	sub	sp, #20
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	3301      	adds	r3, #1
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80125f8:	89fb      	ldrh	r3, [r7, #14]
 80125fa:	021b      	lsls	r3, r3, #8
 80125fc:	b21a      	sxth	r2, r3
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	781b      	ldrb	r3, [r3, #0]
 8012602:	b21b      	sxth	r3, r3
 8012604:	4313      	orrs	r3, r2
 8012606:	b21b      	sxth	r3, r3
 8012608:	81fb      	strh	r3, [r7, #14]
	return rv;
 801260a:	89fb      	ldrh	r3, [r7, #14]
}
 801260c:	4618      	mov	r0, r3
 801260e:	3714      	adds	r7, #20
 8012610:	46bd      	mov	sp, r7
 8012612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012616:	4770      	bx	lr

08012618 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012618:	b480      	push	{r7}
 801261a:	b085      	sub	sp, #20
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	3303      	adds	r3, #3
 8012624:	781b      	ldrb	r3, [r3, #0]
 8012626:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	021b      	lsls	r3, r3, #8
 801262c:	687a      	ldr	r2, [r7, #4]
 801262e:	3202      	adds	r2, #2
 8012630:	7812      	ldrb	r2, [r2, #0]
 8012632:	4313      	orrs	r3, r2
 8012634:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	021b      	lsls	r3, r3, #8
 801263a:	687a      	ldr	r2, [r7, #4]
 801263c:	3201      	adds	r2, #1
 801263e:	7812      	ldrb	r2, [r2, #0]
 8012640:	4313      	orrs	r3, r2
 8012642:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	021b      	lsls	r3, r3, #8
 8012648:	687a      	ldr	r2, [r7, #4]
 801264a:	7812      	ldrb	r2, [r2, #0]
 801264c:	4313      	orrs	r3, r2
 801264e:	60fb      	str	r3, [r7, #12]
	return rv;
 8012650:	68fb      	ldr	r3, [r7, #12]
}
 8012652:	4618      	mov	r0, r3
 8012654:	3714      	adds	r7, #20
 8012656:	46bd      	mov	sp, r7
 8012658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265c:	4770      	bx	lr

0801265e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801265e:	b480      	push	{r7}
 8012660:	b083      	sub	sp, #12
 8012662:	af00      	add	r7, sp, #0
 8012664:	6078      	str	r0, [r7, #4]
 8012666:	460b      	mov	r3, r1
 8012668:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	1c5a      	adds	r2, r3, #1
 801266e:	607a      	str	r2, [r7, #4]
 8012670:	887a      	ldrh	r2, [r7, #2]
 8012672:	b2d2      	uxtb	r2, r2
 8012674:	701a      	strb	r2, [r3, #0]
 8012676:	887b      	ldrh	r3, [r7, #2]
 8012678:	0a1b      	lsrs	r3, r3, #8
 801267a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	1c5a      	adds	r2, r3, #1
 8012680:	607a      	str	r2, [r7, #4]
 8012682:	887a      	ldrh	r2, [r7, #2]
 8012684:	b2d2      	uxtb	r2, r2
 8012686:	701a      	strb	r2, [r3, #0]
}
 8012688:	bf00      	nop
 801268a:	370c      	adds	r7, #12
 801268c:	46bd      	mov	sp, r7
 801268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012692:	4770      	bx	lr

08012694 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	1c5a      	adds	r2, r3, #1
 80126a2:	607a      	str	r2, [r7, #4]
 80126a4:	683a      	ldr	r2, [r7, #0]
 80126a6:	b2d2      	uxtb	r2, r2
 80126a8:	701a      	strb	r2, [r3, #0]
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	0a1b      	lsrs	r3, r3, #8
 80126ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	1c5a      	adds	r2, r3, #1
 80126b4:	607a      	str	r2, [r7, #4]
 80126b6:	683a      	ldr	r2, [r7, #0]
 80126b8:	b2d2      	uxtb	r2, r2
 80126ba:	701a      	strb	r2, [r3, #0]
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	0a1b      	lsrs	r3, r3, #8
 80126c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	1c5a      	adds	r2, r3, #1
 80126c6:	607a      	str	r2, [r7, #4]
 80126c8:	683a      	ldr	r2, [r7, #0]
 80126ca:	b2d2      	uxtb	r2, r2
 80126cc:	701a      	strb	r2, [r3, #0]
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	0a1b      	lsrs	r3, r3, #8
 80126d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	1c5a      	adds	r2, r3, #1
 80126d8:	607a      	str	r2, [r7, #4]
 80126da:	683a      	ldr	r2, [r7, #0]
 80126dc:	b2d2      	uxtb	r2, r2
 80126de:	701a      	strb	r2, [r3, #0]
}
 80126e0:	bf00      	nop
 80126e2:	370c      	adds	r7, #12
 80126e4:	46bd      	mov	sp, r7
 80126e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ea:	4770      	bx	lr

080126ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80126ec:	b480      	push	{r7}
 80126ee:	b087      	sub	sp, #28
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	60f8      	str	r0, [r7, #12]
 80126f4:	60b9      	str	r1, [r7, #8]
 80126f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d00d      	beq.n	8012722 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012706:	693a      	ldr	r2, [r7, #16]
 8012708:	1c53      	adds	r3, r2, #1
 801270a:	613b      	str	r3, [r7, #16]
 801270c:	697b      	ldr	r3, [r7, #20]
 801270e:	1c59      	adds	r1, r3, #1
 8012710:	6179      	str	r1, [r7, #20]
 8012712:	7812      	ldrb	r2, [r2, #0]
 8012714:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	3b01      	subs	r3, #1
 801271a:	607b      	str	r3, [r7, #4]
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d1f1      	bne.n	8012706 <mem_cpy+0x1a>
	}
}
 8012722:	bf00      	nop
 8012724:	371c      	adds	r7, #28
 8012726:	46bd      	mov	sp, r7
 8012728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272c:	4770      	bx	lr

0801272e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801272e:	b480      	push	{r7}
 8012730:	b087      	sub	sp, #28
 8012732:	af00      	add	r7, sp, #0
 8012734:	60f8      	str	r0, [r7, #12]
 8012736:	60b9      	str	r1, [r7, #8]
 8012738:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	1c5a      	adds	r2, r3, #1
 8012742:	617a      	str	r2, [r7, #20]
 8012744:	68ba      	ldr	r2, [r7, #8]
 8012746:	b2d2      	uxtb	r2, r2
 8012748:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	3b01      	subs	r3, #1
 801274e:	607b      	str	r3, [r7, #4]
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d1f3      	bne.n	801273e <mem_set+0x10>
}
 8012756:	bf00      	nop
 8012758:	bf00      	nop
 801275a:	371c      	adds	r7, #28
 801275c:	46bd      	mov	sp, r7
 801275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012762:	4770      	bx	lr

08012764 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012764:	b480      	push	{r7}
 8012766:	b089      	sub	sp, #36	; 0x24
 8012768:	af00      	add	r7, sp, #0
 801276a:	60f8      	str	r0, [r7, #12]
 801276c:	60b9      	str	r1, [r7, #8]
 801276e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	61fb      	str	r3, [r7, #28]
 8012774:	68bb      	ldr	r3, [r7, #8]
 8012776:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012778:	2300      	movs	r3, #0
 801277a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801277c:	69fb      	ldr	r3, [r7, #28]
 801277e:	1c5a      	adds	r2, r3, #1
 8012780:	61fa      	str	r2, [r7, #28]
 8012782:	781b      	ldrb	r3, [r3, #0]
 8012784:	4619      	mov	r1, r3
 8012786:	69bb      	ldr	r3, [r7, #24]
 8012788:	1c5a      	adds	r2, r3, #1
 801278a:	61ba      	str	r2, [r7, #24]
 801278c:	781b      	ldrb	r3, [r3, #0]
 801278e:	1acb      	subs	r3, r1, r3
 8012790:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	3b01      	subs	r3, #1
 8012796:	607b      	str	r3, [r7, #4]
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d002      	beq.n	80127a4 <mem_cmp+0x40>
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d0eb      	beq.n	801277c <mem_cmp+0x18>

	return r;
 80127a4:	697b      	ldr	r3, [r7, #20]
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	3724      	adds	r7, #36	; 0x24
 80127aa:	46bd      	mov	sp, r7
 80127ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b0:	4770      	bx	lr

080127b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80127b2:	b480      	push	{r7}
 80127b4:	b083      	sub	sp, #12
 80127b6:	af00      	add	r7, sp, #0
 80127b8:	6078      	str	r0, [r7, #4]
 80127ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80127bc:	e002      	b.n	80127c4 <chk_chr+0x12>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	3301      	adds	r3, #1
 80127c2:	607b      	str	r3, [r7, #4]
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d005      	beq.n	80127d8 <chk_chr+0x26>
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	461a      	mov	r2, r3
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	4293      	cmp	r3, r2
 80127d6:	d1f2      	bne.n	80127be <chk_chr+0xc>
	return *str;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	781b      	ldrb	r3, [r3, #0]
}
 80127dc:	4618      	mov	r0, r3
 80127de:	370c      	adds	r7, #12
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr

080127e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80127e8:	b480      	push	{r7}
 80127ea:	b085      	sub	sp, #20
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80127f2:	2300      	movs	r3, #0
 80127f4:	60bb      	str	r3, [r7, #8]
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	60fb      	str	r3, [r7, #12]
 80127fa:	e029      	b.n	8012850 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80127fc:	4a27      	ldr	r2, [pc, #156]	; (801289c <chk_lock+0xb4>)
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	011b      	lsls	r3, r3, #4
 8012802:	4413      	add	r3, r2
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d01d      	beq.n	8012846 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801280a:	4a24      	ldr	r2, [pc, #144]	; (801289c <chk_lock+0xb4>)
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	011b      	lsls	r3, r3, #4
 8012810:	4413      	add	r3, r2
 8012812:	681a      	ldr	r2, [r3, #0]
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	429a      	cmp	r2, r3
 801281a:	d116      	bne.n	801284a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801281c:	4a1f      	ldr	r2, [pc, #124]	; (801289c <chk_lock+0xb4>)
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	011b      	lsls	r3, r3, #4
 8012822:	4413      	add	r3, r2
 8012824:	3304      	adds	r3, #4
 8012826:	681a      	ldr	r2, [r3, #0]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801282c:	429a      	cmp	r2, r3
 801282e:	d10c      	bne.n	801284a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012830:	4a1a      	ldr	r2, [pc, #104]	; (801289c <chk_lock+0xb4>)
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	011b      	lsls	r3, r3, #4
 8012836:	4413      	add	r3, r2
 8012838:	3308      	adds	r3, #8
 801283a:	681a      	ldr	r2, [r3, #0]
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012840:	429a      	cmp	r2, r3
 8012842:	d102      	bne.n	801284a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012844:	e007      	b.n	8012856 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012846:	2301      	movs	r3, #1
 8012848:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	3301      	adds	r3, #1
 801284e:	60fb      	str	r3, [r7, #12]
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	2b01      	cmp	r3, #1
 8012854:	d9d2      	bls.n	80127fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	2b02      	cmp	r3, #2
 801285a:	d109      	bne.n	8012870 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d102      	bne.n	8012868 <chk_lock+0x80>
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	2b02      	cmp	r3, #2
 8012866:	d101      	bne.n	801286c <chk_lock+0x84>
 8012868:	2300      	movs	r3, #0
 801286a:	e010      	b.n	801288e <chk_lock+0xa6>
 801286c:	2312      	movs	r3, #18
 801286e:	e00e      	b.n	801288e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d108      	bne.n	8012888 <chk_lock+0xa0>
 8012876:	4a09      	ldr	r2, [pc, #36]	; (801289c <chk_lock+0xb4>)
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	011b      	lsls	r3, r3, #4
 801287c:	4413      	add	r3, r2
 801287e:	330c      	adds	r3, #12
 8012880:	881b      	ldrh	r3, [r3, #0]
 8012882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012886:	d101      	bne.n	801288c <chk_lock+0xa4>
 8012888:	2310      	movs	r3, #16
 801288a:	e000      	b.n	801288e <chk_lock+0xa6>
 801288c:	2300      	movs	r3, #0
}
 801288e:	4618      	mov	r0, r3
 8012890:	3714      	adds	r7, #20
 8012892:	46bd      	mov	sp, r7
 8012894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012898:	4770      	bx	lr
 801289a:	bf00      	nop
 801289c:	24008e8c 	.word	0x24008e8c

080128a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80128a0:	b480      	push	{r7}
 80128a2:	b083      	sub	sp, #12
 80128a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80128a6:	2300      	movs	r3, #0
 80128a8:	607b      	str	r3, [r7, #4]
 80128aa:	e002      	b.n	80128b2 <enq_lock+0x12>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	3301      	adds	r3, #1
 80128b0:	607b      	str	r3, [r7, #4]
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	d806      	bhi.n	80128c6 <enq_lock+0x26>
 80128b8:	4a09      	ldr	r2, [pc, #36]	; (80128e0 <enq_lock+0x40>)
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	011b      	lsls	r3, r3, #4
 80128be:	4413      	add	r3, r2
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d1f2      	bne.n	80128ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2b02      	cmp	r3, #2
 80128ca:	bf14      	ite	ne
 80128cc:	2301      	movne	r3, #1
 80128ce:	2300      	moveq	r3, #0
 80128d0:	b2db      	uxtb	r3, r3
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	370c      	adds	r7, #12
 80128d6:	46bd      	mov	sp, r7
 80128d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128dc:	4770      	bx	lr
 80128de:	bf00      	nop
 80128e0:	24008e8c 	.word	0x24008e8c

080128e4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80128e4:	b480      	push	{r7}
 80128e6:	b085      	sub	sp, #20
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80128ee:	2300      	movs	r3, #0
 80128f0:	60fb      	str	r3, [r7, #12]
 80128f2:	e01f      	b.n	8012934 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80128f4:	4a41      	ldr	r2, [pc, #260]	; (80129fc <inc_lock+0x118>)
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	011b      	lsls	r3, r3, #4
 80128fa:	4413      	add	r3, r2
 80128fc:	681a      	ldr	r2, [r3, #0]
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	429a      	cmp	r2, r3
 8012904:	d113      	bne.n	801292e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012906:	4a3d      	ldr	r2, [pc, #244]	; (80129fc <inc_lock+0x118>)
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	011b      	lsls	r3, r3, #4
 801290c:	4413      	add	r3, r2
 801290e:	3304      	adds	r3, #4
 8012910:	681a      	ldr	r2, [r3, #0]
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012916:	429a      	cmp	r2, r3
 8012918:	d109      	bne.n	801292e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801291a:	4a38      	ldr	r2, [pc, #224]	; (80129fc <inc_lock+0x118>)
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	011b      	lsls	r3, r3, #4
 8012920:	4413      	add	r3, r2
 8012922:	3308      	adds	r3, #8
 8012924:	681a      	ldr	r2, [r3, #0]
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801292a:	429a      	cmp	r2, r3
 801292c:	d006      	beq.n	801293c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	3301      	adds	r3, #1
 8012932:	60fb      	str	r3, [r7, #12]
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	2b01      	cmp	r3, #1
 8012938:	d9dc      	bls.n	80128f4 <inc_lock+0x10>
 801293a:	e000      	b.n	801293e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801293c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	2b02      	cmp	r3, #2
 8012942:	d132      	bne.n	80129aa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012944:	2300      	movs	r3, #0
 8012946:	60fb      	str	r3, [r7, #12]
 8012948:	e002      	b.n	8012950 <inc_lock+0x6c>
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	3301      	adds	r3, #1
 801294e:	60fb      	str	r3, [r7, #12]
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	2b01      	cmp	r3, #1
 8012954:	d806      	bhi.n	8012964 <inc_lock+0x80>
 8012956:	4a29      	ldr	r2, [pc, #164]	; (80129fc <inc_lock+0x118>)
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	011b      	lsls	r3, r3, #4
 801295c:	4413      	add	r3, r2
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d1f2      	bne.n	801294a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	2b02      	cmp	r3, #2
 8012968:	d101      	bne.n	801296e <inc_lock+0x8a>
 801296a:	2300      	movs	r3, #0
 801296c:	e040      	b.n	80129f0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681a      	ldr	r2, [r3, #0]
 8012972:	4922      	ldr	r1, [pc, #136]	; (80129fc <inc_lock+0x118>)
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	011b      	lsls	r3, r3, #4
 8012978:	440b      	add	r3, r1
 801297a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	689a      	ldr	r2, [r3, #8]
 8012980:	491e      	ldr	r1, [pc, #120]	; (80129fc <inc_lock+0x118>)
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	011b      	lsls	r3, r3, #4
 8012986:	440b      	add	r3, r1
 8012988:	3304      	adds	r3, #4
 801298a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	695a      	ldr	r2, [r3, #20]
 8012990:	491a      	ldr	r1, [pc, #104]	; (80129fc <inc_lock+0x118>)
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	011b      	lsls	r3, r3, #4
 8012996:	440b      	add	r3, r1
 8012998:	3308      	adds	r3, #8
 801299a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801299c:	4a17      	ldr	r2, [pc, #92]	; (80129fc <inc_lock+0x118>)
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	011b      	lsls	r3, r3, #4
 80129a2:	4413      	add	r3, r2
 80129a4:	330c      	adds	r3, #12
 80129a6:	2200      	movs	r2, #0
 80129a8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80129aa:	683b      	ldr	r3, [r7, #0]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d009      	beq.n	80129c4 <inc_lock+0xe0>
 80129b0:	4a12      	ldr	r2, [pc, #72]	; (80129fc <inc_lock+0x118>)
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	011b      	lsls	r3, r3, #4
 80129b6:	4413      	add	r3, r2
 80129b8:	330c      	adds	r3, #12
 80129ba:	881b      	ldrh	r3, [r3, #0]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d001      	beq.n	80129c4 <inc_lock+0xe0>
 80129c0:	2300      	movs	r3, #0
 80129c2:	e015      	b.n	80129f0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d108      	bne.n	80129dc <inc_lock+0xf8>
 80129ca:	4a0c      	ldr	r2, [pc, #48]	; (80129fc <inc_lock+0x118>)
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	011b      	lsls	r3, r3, #4
 80129d0:	4413      	add	r3, r2
 80129d2:	330c      	adds	r3, #12
 80129d4:	881b      	ldrh	r3, [r3, #0]
 80129d6:	3301      	adds	r3, #1
 80129d8:	b29a      	uxth	r2, r3
 80129da:	e001      	b.n	80129e0 <inc_lock+0xfc>
 80129dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80129e0:	4906      	ldr	r1, [pc, #24]	; (80129fc <inc_lock+0x118>)
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	011b      	lsls	r3, r3, #4
 80129e6:	440b      	add	r3, r1
 80129e8:	330c      	adds	r3, #12
 80129ea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	3301      	adds	r3, #1
}
 80129f0:	4618      	mov	r0, r3
 80129f2:	3714      	adds	r7, #20
 80129f4:	46bd      	mov	sp, r7
 80129f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fa:	4770      	bx	lr
 80129fc:	24008e8c 	.word	0x24008e8c

08012a00 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012a00:	b480      	push	{r7}
 8012a02:	b085      	sub	sp, #20
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	3b01      	subs	r3, #1
 8012a0c:	607b      	str	r3, [r7, #4]
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2b01      	cmp	r3, #1
 8012a12:	d825      	bhi.n	8012a60 <dec_lock+0x60>
		n = Files[i].ctr;
 8012a14:	4a17      	ldr	r2, [pc, #92]	; (8012a74 <dec_lock+0x74>)
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	011b      	lsls	r3, r3, #4
 8012a1a:	4413      	add	r3, r2
 8012a1c:	330c      	adds	r3, #12
 8012a1e:	881b      	ldrh	r3, [r3, #0]
 8012a20:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012a22:	89fb      	ldrh	r3, [r7, #14]
 8012a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012a28:	d101      	bne.n	8012a2e <dec_lock+0x2e>
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012a2e:	89fb      	ldrh	r3, [r7, #14]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d002      	beq.n	8012a3a <dec_lock+0x3a>
 8012a34:	89fb      	ldrh	r3, [r7, #14]
 8012a36:	3b01      	subs	r3, #1
 8012a38:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012a3a:	4a0e      	ldr	r2, [pc, #56]	; (8012a74 <dec_lock+0x74>)
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	011b      	lsls	r3, r3, #4
 8012a40:	4413      	add	r3, r2
 8012a42:	330c      	adds	r3, #12
 8012a44:	89fa      	ldrh	r2, [r7, #14]
 8012a46:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012a48:	89fb      	ldrh	r3, [r7, #14]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d105      	bne.n	8012a5a <dec_lock+0x5a>
 8012a4e:	4a09      	ldr	r2, [pc, #36]	; (8012a74 <dec_lock+0x74>)
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	011b      	lsls	r3, r3, #4
 8012a54:	4413      	add	r3, r2
 8012a56:	2200      	movs	r2, #0
 8012a58:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	737b      	strb	r3, [r7, #13]
 8012a5e:	e001      	b.n	8012a64 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012a60:	2302      	movs	r3, #2
 8012a62:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012a64:	7b7b      	ldrb	r3, [r7, #13]
}
 8012a66:	4618      	mov	r0, r3
 8012a68:	3714      	adds	r7, #20
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a70:	4770      	bx	lr
 8012a72:	bf00      	nop
 8012a74:	24008e8c 	.word	0x24008e8c

08012a78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012a78:	b480      	push	{r7}
 8012a7a:	b085      	sub	sp, #20
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012a80:	2300      	movs	r3, #0
 8012a82:	60fb      	str	r3, [r7, #12]
 8012a84:	e010      	b.n	8012aa8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012a86:	4a0d      	ldr	r2, [pc, #52]	; (8012abc <clear_lock+0x44>)
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	011b      	lsls	r3, r3, #4
 8012a8c:	4413      	add	r3, r2
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d105      	bne.n	8012aa2 <clear_lock+0x2a>
 8012a96:	4a09      	ldr	r2, [pc, #36]	; (8012abc <clear_lock+0x44>)
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	011b      	lsls	r3, r3, #4
 8012a9c:	4413      	add	r3, r2
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	3301      	adds	r3, #1
 8012aa6:	60fb      	str	r3, [r7, #12]
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	2b01      	cmp	r3, #1
 8012aac:	d9eb      	bls.n	8012a86 <clear_lock+0xe>
	}
}
 8012aae:	bf00      	nop
 8012ab0:	bf00      	nop
 8012ab2:	3714      	adds	r7, #20
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aba:	4770      	bx	lr
 8012abc:	24008e8c 	.word	0x24008e8c

08012ac0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b086      	sub	sp, #24
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	78db      	ldrb	r3, [r3, #3]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d034      	beq.n	8012b3e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ad8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	7858      	ldrb	r0, [r3, #1]
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	697a      	ldr	r2, [r7, #20]
 8012ae8:	f7ff fd40 	bl	801256c <disk_write>
 8012aec:	4603      	mov	r3, r0
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d002      	beq.n	8012af8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8012af2:	2301      	movs	r3, #1
 8012af4:	73fb      	strb	r3, [r7, #15]
 8012af6:	e022      	b.n	8012b3e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	2200      	movs	r2, #0
 8012afc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	6a1b      	ldr	r3, [r3, #32]
 8012b02:	697a      	ldr	r2, [r7, #20]
 8012b04:	1ad2      	subs	r2, r2, r3
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	699b      	ldr	r3, [r3, #24]
 8012b0a:	429a      	cmp	r2, r3
 8012b0c:	d217      	bcs.n	8012b3e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	789b      	ldrb	r3, [r3, #2]
 8012b12:	613b      	str	r3, [r7, #16]
 8012b14:	e010      	b.n	8012b38 <sync_window+0x78>
					wsect += fs->fsize;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	699b      	ldr	r3, [r3, #24]
 8012b1a:	697a      	ldr	r2, [r7, #20]
 8012b1c:	4413      	add	r3, r2
 8012b1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	7858      	ldrb	r0, [r3, #1]
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	697a      	ldr	r2, [r7, #20]
 8012b2e:	f7ff fd1d 	bl	801256c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	3b01      	subs	r3, #1
 8012b36:	613b      	str	r3, [r7, #16]
 8012b38:	693b      	ldr	r3, [r7, #16]
 8012b3a:	2b01      	cmp	r3, #1
 8012b3c:	d8eb      	bhi.n	8012b16 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b40:	4618      	mov	r0, r3
 8012b42:	3718      	adds	r7, #24
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}

08012b48 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b084      	sub	sp, #16
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012b52:	2300      	movs	r3, #0
 8012b54:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b5a:	683a      	ldr	r2, [r7, #0]
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d01b      	beq.n	8012b98 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f7ff ffad 	bl	8012ac0 <sync_window>
 8012b66:	4603      	mov	r3, r0
 8012b68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012b6a:	7bfb      	ldrb	r3, [r7, #15]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d113      	bne.n	8012b98 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	7858      	ldrb	r0, [r3, #1]
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012b7a:	2301      	movs	r3, #1
 8012b7c:	683a      	ldr	r2, [r7, #0]
 8012b7e:	f7ff fcd5 	bl	801252c <disk_read>
 8012b82:	4603      	mov	r3, r0
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d004      	beq.n	8012b92 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012b88:	f04f 33ff 	mov.w	r3, #4294967295
 8012b8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012b8e:	2301      	movs	r3, #1
 8012b90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	683a      	ldr	r2, [r7, #0]
 8012b96:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8012b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	3710      	adds	r7, #16
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd80      	pop	{r7, pc}
	...

08012ba4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b084      	sub	sp, #16
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f7ff ff87 	bl	8012ac0 <sync_window>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012bb6:	7bfb      	ldrb	r3, [r7, #15]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d158      	bne.n	8012c6e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	781b      	ldrb	r3, [r3, #0]
 8012bc0:	2b03      	cmp	r3, #3
 8012bc2:	d148      	bne.n	8012c56 <sync_fs+0xb2>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	791b      	ldrb	r3, [r3, #4]
 8012bc8:	2b01      	cmp	r3, #1
 8012bca:	d144      	bne.n	8012c56 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	3330      	adds	r3, #48	; 0x30
 8012bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012bd4:	2100      	movs	r1, #0
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7ff fda9 	bl	801272e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	3330      	adds	r3, #48	; 0x30
 8012be0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012be4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012be8:	4618      	mov	r0, r3
 8012bea:	f7ff fd38 	bl	801265e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	3330      	adds	r3, #48	; 0x30
 8012bf2:	4921      	ldr	r1, [pc, #132]	; (8012c78 <sync_fs+0xd4>)
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	f7ff fd4d 	bl	8012694 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	3330      	adds	r3, #48	; 0x30
 8012bfe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012c02:	491e      	ldr	r1, [pc, #120]	; (8012c7c <sync_fs+0xd8>)
 8012c04:	4618      	mov	r0, r3
 8012c06:	f7ff fd45 	bl	8012694 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	3330      	adds	r3, #48	; 0x30
 8012c0e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	691b      	ldr	r3, [r3, #16]
 8012c16:	4619      	mov	r1, r3
 8012c18:	4610      	mov	r0, r2
 8012c1a:	f7ff fd3b 	bl	8012694 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	3330      	adds	r3, #48	; 0x30
 8012c22:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	68db      	ldr	r3, [r3, #12]
 8012c2a:	4619      	mov	r1, r3
 8012c2c:	4610      	mov	r0, r2
 8012c2e:	f7ff fd31 	bl	8012694 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	69db      	ldr	r3, [r3, #28]
 8012c36:	1c5a      	adds	r2, r3, #1
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	7858      	ldrb	r0, [r3, #1]
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	f7ff fc8e 	bl	801256c <disk_write>
			fs->fsi_flag = 0;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	2200      	movs	r2, #0
 8012c54:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	785b      	ldrb	r3, [r3, #1]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	2100      	movs	r1, #0
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7ff fca4 	bl	80125ac <disk_ioctl>
 8012c64:	4603      	mov	r3, r0
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d001      	beq.n	8012c6e <sync_fs+0xca>
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c70:	4618      	mov	r0, r3
 8012c72:	3710      	adds	r7, #16
 8012c74:	46bd      	mov	sp, r7
 8012c76:	bd80      	pop	{r7, pc}
 8012c78:	41615252 	.word	0x41615252
 8012c7c:	61417272 	.word	0x61417272

08012c80 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012c80:	b480      	push	{r7}
 8012c82:	b083      	sub	sp, #12
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	3b02      	subs	r3, #2
 8012c8e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	695b      	ldr	r3, [r3, #20]
 8012c94:	3b02      	subs	r3, #2
 8012c96:	683a      	ldr	r2, [r7, #0]
 8012c98:	429a      	cmp	r2, r3
 8012c9a:	d301      	bcc.n	8012ca0 <clust2sect+0x20>
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	e008      	b.n	8012cb2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	895b      	ldrh	r3, [r3, #10]
 8012ca4:	461a      	mov	r2, r3
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	fb03 f202 	mul.w	r2, r3, r2
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cb0:	4413      	add	r3, r2
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	370c      	adds	r7, #12
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr

08012cbe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012cbe:	b580      	push	{r7, lr}
 8012cc0:	b086      	sub	sp, #24
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	6078      	str	r0, [r7, #4]
 8012cc6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	2b01      	cmp	r3, #1
 8012cd2:	d904      	bls.n	8012cde <get_fat+0x20>
 8012cd4:	693b      	ldr	r3, [r7, #16]
 8012cd6:	695b      	ldr	r3, [r3, #20]
 8012cd8:	683a      	ldr	r2, [r7, #0]
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	d302      	bcc.n	8012ce4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012cde:	2301      	movs	r3, #1
 8012ce0:	617b      	str	r3, [r7, #20]
 8012ce2:	e08f      	b.n	8012e04 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ce8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012cea:	693b      	ldr	r3, [r7, #16]
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	2b03      	cmp	r3, #3
 8012cf0:	d062      	beq.n	8012db8 <get_fat+0xfa>
 8012cf2:	2b03      	cmp	r3, #3
 8012cf4:	dc7c      	bgt.n	8012df0 <get_fat+0x132>
 8012cf6:	2b01      	cmp	r3, #1
 8012cf8:	d002      	beq.n	8012d00 <get_fat+0x42>
 8012cfa:	2b02      	cmp	r3, #2
 8012cfc:	d042      	beq.n	8012d84 <get_fat+0xc6>
 8012cfe:	e077      	b.n	8012df0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	60fb      	str	r3, [r7, #12]
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	085b      	lsrs	r3, r3, #1
 8012d08:	68fa      	ldr	r2, [r7, #12]
 8012d0a:	4413      	add	r3, r2
 8012d0c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012d0e:	693b      	ldr	r3, [r7, #16]
 8012d10:	6a1a      	ldr	r2, [r3, #32]
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	0a5b      	lsrs	r3, r3, #9
 8012d16:	4413      	add	r3, r2
 8012d18:	4619      	mov	r1, r3
 8012d1a:	6938      	ldr	r0, [r7, #16]
 8012d1c:	f7ff ff14 	bl	8012b48 <move_window>
 8012d20:	4603      	mov	r3, r0
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d167      	bne.n	8012df6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	1c5a      	adds	r2, r3, #1
 8012d2a:	60fa      	str	r2, [r7, #12]
 8012d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d30:	693a      	ldr	r2, [r7, #16]
 8012d32:	4413      	add	r3, r2
 8012d34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012d38:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	6a1a      	ldr	r2, [r3, #32]
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	0a5b      	lsrs	r3, r3, #9
 8012d42:	4413      	add	r3, r2
 8012d44:	4619      	mov	r1, r3
 8012d46:	6938      	ldr	r0, [r7, #16]
 8012d48:	f7ff fefe 	bl	8012b48 <move_window>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d153      	bne.n	8012dfa <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d58:	693a      	ldr	r2, [r7, #16]
 8012d5a:	4413      	add	r3, r2
 8012d5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012d60:	021b      	lsls	r3, r3, #8
 8012d62:	461a      	mov	r2, r3
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	4313      	orrs	r3, r2
 8012d68:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	f003 0301 	and.w	r3, r3, #1
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d002      	beq.n	8012d7a <get_fat+0xbc>
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	091b      	lsrs	r3, r3, #4
 8012d78:	e002      	b.n	8012d80 <get_fat+0xc2>
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012d80:	617b      	str	r3, [r7, #20]
			break;
 8012d82:	e03f      	b.n	8012e04 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	6a1a      	ldr	r2, [r3, #32]
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	0a1b      	lsrs	r3, r3, #8
 8012d8c:	4413      	add	r3, r2
 8012d8e:	4619      	mov	r1, r3
 8012d90:	6938      	ldr	r0, [r7, #16]
 8012d92:	f7ff fed9 	bl	8012b48 <move_window>
 8012d96:	4603      	mov	r3, r0
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d130      	bne.n	8012dfe <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	005b      	lsls	r3, r3, #1
 8012da6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012daa:	4413      	add	r3, r2
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7ff fc1b 	bl	80125e8 <ld_word>
 8012db2:	4603      	mov	r3, r0
 8012db4:	617b      	str	r3, [r7, #20]
			break;
 8012db6:	e025      	b.n	8012e04 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	6a1a      	ldr	r2, [r3, #32]
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	09db      	lsrs	r3, r3, #7
 8012dc0:	4413      	add	r3, r2
 8012dc2:	4619      	mov	r1, r3
 8012dc4:	6938      	ldr	r0, [r7, #16]
 8012dc6:	f7ff febf 	bl	8012b48 <move_window>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d118      	bne.n	8012e02 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012dd0:	693b      	ldr	r3, [r7, #16]
 8012dd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	009b      	lsls	r3, r3, #2
 8012dda:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012dde:	4413      	add	r3, r2
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7ff fc19 	bl	8012618 <ld_dword>
 8012de6:	4603      	mov	r3, r0
 8012de8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012dec:	617b      	str	r3, [r7, #20]
			break;
 8012dee:	e009      	b.n	8012e04 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012df0:	2301      	movs	r3, #1
 8012df2:	617b      	str	r3, [r7, #20]
 8012df4:	e006      	b.n	8012e04 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012df6:	bf00      	nop
 8012df8:	e004      	b.n	8012e04 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012dfa:	bf00      	nop
 8012dfc:	e002      	b.n	8012e04 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012dfe:	bf00      	nop
 8012e00:	e000      	b.n	8012e04 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012e02:	bf00      	nop
		}
	}

	return val;
 8012e04:	697b      	ldr	r3, [r7, #20]
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3718      	adds	r7, #24
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}

08012e0e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012e0e:	b590      	push	{r4, r7, lr}
 8012e10:	b089      	sub	sp, #36	; 0x24
 8012e12:	af00      	add	r7, sp, #0
 8012e14:	60f8      	str	r0, [r7, #12]
 8012e16:	60b9      	str	r1, [r7, #8]
 8012e18:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012e1a:	2302      	movs	r3, #2
 8012e1c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	2b01      	cmp	r3, #1
 8012e22:	f240 80d2 	bls.w	8012fca <put_fat+0x1bc>
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	695b      	ldr	r3, [r3, #20]
 8012e2a:	68ba      	ldr	r2, [r7, #8]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	f080 80cc 	bcs.w	8012fca <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	781b      	ldrb	r3, [r3, #0]
 8012e36:	2b03      	cmp	r3, #3
 8012e38:	f000 8096 	beq.w	8012f68 <put_fat+0x15a>
 8012e3c:	2b03      	cmp	r3, #3
 8012e3e:	f300 80cd 	bgt.w	8012fdc <put_fat+0x1ce>
 8012e42:	2b01      	cmp	r3, #1
 8012e44:	d002      	beq.n	8012e4c <put_fat+0x3e>
 8012e46:	2b02      	cmp	r3, #2
 8012e48:	d06e      	beq.n	8012f28 <put_fat+0x11a>
 8012e4a:	e0c7      	b.n	8012fdc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	61bb      	str	r3, [r7, #24]
 8012e50:	69bb      	ldr	r3, [r7, #24]
 8012e52:	085b      	lsrs	r3, r3, #1
 8012e54:	69ba      	ldr	r2, [r7, #24]
 8012e56:	4413      	add	r3, r2
 8012e58:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	6a1a      	ldr	r2, [r3, #32]
 8012e5e:	69bb      	ldr	r3, [r7, #24]
 8012e60:	0a5b      	lsrs	r3, r3, #9
 8012e62:	4413      	add	r3, r2
 8012e64:	4619      	mov	r1, r3
 8012e66:	68f8      	ldr	r0, [r7, #12]
 8012e68:	f7ff fe6e 	bl	8012b48 <move_window>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012e70:	7ffb      	ldrb	r3, [r7, #31]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	f040 80ab 	bne.w	8012fce <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012e7e:	69bb      	ldr	r3, [r7, #24]
 8012e80:	1c59      	adds	r1, r3, #1
 8012e82:	61b9      	str	r1, [r7, #24]
 8012e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e88:	4413      	add	r3, r2
 8012e8a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012e8c:	68bb      	ldr	r3, [r7, #8]
 8012e8e:	f003 0301 	and.w	r3, r3, #1
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d00d      	beq.n	8012eb2 <put_fat+0xa4>
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	781b      	ldrb	r3, [r3, #0]
 8012e9a:	b25b      	sxtb	r3, r3
 8012e9c:	f003 030f 	and.w	r3, r3, #15
 8012ea0:	b25a      	sxtb	r2, r3
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	b2db      	uxtb	r3, r3
 8012ea6:	011b      	lsls	r3, r3, #4
 8012ea8:	b25b      	sxtb	r3, r3
 8012eaa:	4313      	orrs	r3, r2
 8012eac:	b25b      	sxtb	r3, r3
 8012eae:	b2db      	uxtb	r3, r3
 8012eb0:	e001      	b.n	8012eb6 <put_fat+0xa8>
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	b2db      	uxtb	r3, r3
 8012eb6:	697a      	ldr	r2, [r7, #20]
 8012eb8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	2201      	movs	r2, #1
 8012ebe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	6a1a      	ldr	r2, [r3, #32]
 8012ec4:	69bb      	ldr	r3, [r7, #24]
 8012ec6:	0a5b      	lsrs	r3, r3, #9
 8012ec8:	4413      	add	r3, r2
 8012eca:	4619      	mov	r1, r3
 8012ecc:	68f8      	ldr	r0, [r7, #12]
 8012ece:	f7ff fe3b 	bl	8012b48 <move_window>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012ed6:	7ffb      	ldrb	r3, [r7, #31]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d17a      	bne.n	8012fd2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012ee2:	69bb      	ldr	r3, [r7, #24]
 8012ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ee8:	4413      	add	r3, r2
 8012eea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	f003 0301 	and.w	r3, r3, #1
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d003      	beq.n	8012efe <put_fat+0xf0>
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	091b      	lsrs	r3, r3, #4
 8012efa:	b2db      	uxtb	r3, r3
 8012efc:	e00e      	b.n	8012f1c <put_fat+0x10e>
 8012efe:	697b      	ldr	r3, [r7, #20]
 8012f00:	781b      	ldrb	r3, [r3, #0]
 8012f02:	b25b      	sxtb	r3, r3
 8012f04:	f023 030f 	bic.w	r3, r3, #15
 8012f08:	b25a      	sxtb	r2, r3
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	0a1b      	lsrs	r3, r3, #8
 8012f0e:	b25b      	sxtb	r3, r3
 8012f10:	f003 030f 	and.w	r3, r3, #15
 8012f14:	b25b      	sxtb	r3, r3
 8012f16:	4313      	orrs	r3, r2
 8012f18:	b25b      	sxtb	r3, r3
 8012f1a:	b2db      	uxtb	r3, r3
 8012f1c:	697a      	ldr	r2, [r7, #20]
 8012f1e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2201      	movs	r2, #1
 8012f24:	70da      	strb	r2, [r3, #3]
			break;
 8012f26:	e059      	b.n	8012fdc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	6a1a      	ldr	r2, [r3, #32]
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	0a1b      	lsrs	r3, r3, #8
 8012f30:	4413      	add	r3, r2
 8012f32:	4619      	mov	r1, r3
 8012f34:	68f8      	ldr	r0, [r7, #12]
 8012f36:	f7ff fe07 	bl	8012b48 <move_window>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012f3e:	7ffb      	ldrb	r3, [r7, #31]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d148      	bne.n	8012fd6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	005b      	lsls	r3, r3, #1
 8012f4e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012f52:	4413      	add	r3, r2
 8012f54:	687a      	ldr	r2, [r7, #4]
 8012f56:	b292      	uxth	r2, r2
 8012f58:	4611      	mov	r1, r2
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7ff fb7f 	bl	801265e <st_word>
			fs->wflag = 1;
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	2201      	movs	r2, #1
 8012f64:	70da      	strb	r2, [r3, #3]
			break;
 8012f66:	e039      	b.n	8012fdc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	6a1a      	ldr	r2, [r3, #32]
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	09db      	lsrs	r3, r3, #7
 8012f70:	4413      	add	r3, r2
 8012f72:	4619      	mov	r1, r3
 8012f74:	68f8      	ldr	r0, [r7, #12]
 8012f76:	f7ff fde7 	bl	8012b48 <move_window>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012f7e:	7ffb      	ldrb	r3, [r7, #31]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d12a      	bne.n	8012fda <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	009b      	lsls	r3, r3, #2
 8012f94:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012f98:	4413      	add	r3, r2
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7ff fb3c 	bl	8012618 <ld_dword>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012fa6:	4323      	orrs	r3, r4
 8012fa8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	009b      	lsls	r3, r3, #2
 8012fb4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012fb8:	4413      	add	r3, r2
 8012fba:	6879      	ldr	r1, [r7, #4]
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7ff fb69 	bl	8012694 <st_dword>
			fs->wflag = 1;
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	2201      	movs	r2, #1
 8012fc6:	70da      	strb	r2, [r3, #3]
			break;
 8012fc8:	e008      	b.n	8012fdc <put_fat+0x1ce>
		}
	}
 8012fca:	bf00      	nop
 8012fcc:	e006      	b.n	8012fdc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012fce:	bf00      	nop
 8012fd0:	e004      	b.n	8012fdc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012fd2:	bf00      	nop
 8012fd4:	e002      	b.n	8012fdc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012fd6:	bf00      	nop
 8012fd8:	e000      	b.n	8012fdc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012fda:	bf00      	nop
	return res;
 8012fdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8012fde:	4618      	mov	r0, r3
 8012fe0:	3724      	adds	r7, #36	; 0x24
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd90      	pop	{r4, r7, pc}

08012fe6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012fe6:	b580      	push	{r7, lr}
 8012fe8:	b088      	sub	sp, #32
 8012fea:	af00      	add	r7, sp, #0
 8012fec:	60f8      	str	r0, [r7, #12]
 8012fee:	60b9      	str	r1, [r7, #8]
 8012ff0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	2b01      	cmp	r3, #1
 8013000:	d904      	bls.n	801300c <remove_chain+0x26>
 8013002:	69bb      	ldr	r3, [r7, #24]
 8013004:	695b      	ldr	r3, [r3, #20]
 8013006:	68ba      	ldr	r2, [r7, #8]
 8013008:	429a      	cmp	r2, r3
 801300a:	d301      	bcc.n	8013010 <remove_chain+0x2a>
 801300c:	2302      	movs	r3, #2
 801300e:	e04b      	b.n	80130a8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d00c      	beq.n	8013030 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013016:	f04f 32ff 	mov.w	r2, #4294967295
 801301a:	6879      	ldr	r1, [r7, #4]
 801301c:	69b8      	ldr	r0, [r7, #24]
 801301e:	f7ff fef6 	bl	8012e0e <put_fat>
 8013022:	4603      	mov	r3, r0
 8013024:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013026:	7ffb      	ldrb	r3, [r7, #31]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d001      	beq.n	8013030 <remove_chain+0x4a>
 801302c:	7ffb      	ldrb	r3, [r7, #31]
 801302e:	e03b      	b.n	80130a8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013030:	68b9      	ldr	r1, [r7, #8]
 8013032:	68f8      	ldr	r0, [r7, #12]
 8013034:	f7ff fe43 	bl	8012cbe <get_fat>
 8013038:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d031      	beq.n	80130a4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013040:	697b      	ldr	r3, [r7, #20]
 8013042:	2b01      	cmp	r3, #1
 8013044:	d101      	bne.n	801304a <remove_chain+0x64>
 8013046:	2302      	movs	r3, #2
 8013048:	e02e      	b.n	80130a8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013050:	d101      	bne.n	8013056 <remove_chain+0x70>
 8013052:	2301      	movs	r3, #1
 8013054:	e028      	b.n	80130a8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013056:	2200      	movs	r2, #0
 8013058:	68b9      	ldr	r1, [r7, #8]
 801305a:	69b8      	ldr	r0, [r7, #24]
 801305c:	f7ff fed7 	bl	8012e0e <put_fat>
 8013060:	4603      	mov	r3, r0
 8013062:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013064:	7ffb      	ldrb	r3, [r7, #31]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d001      	beq.n	801306e <remove_chain+0x88>
 801306a:	7ffb      	ldrb	r3, [r7, #31]
 801306c:	e01c      	b.n	80130a8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801306e:	69bb      	ldr	r3, [r7, #24]
 8013070:	691a      	ldr	r2, [r3, #16]
 8013072:	69bb      	ldr	r3, [r7, #24]
 8013074:	695b      	ldr	r3, [r3, #20]
 8013076:	3b02      	subs	r3, #2
 8013078:	429a      	cmp	r2, r3
 801307a:	d20b      	bcs.n	8013094 <remove_chain+0xae>
			fs->free_clst++;
 801307c:	69bb      	ldr	r3, [r7, #24]
 801307e:	691b      	ldr	r3, [r3, #16]
 8013080:	1c5a      	adds	r2, r3, #1
 8013082:	69bb      	ldr	r3, [r7, #24]
 8013084:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8013086:	69bb      	ldr	r3, [r7, #24]
 8013088:	791b      	ldrb	r3, [r3, #4]
 801308a:	f043 0301 	orr.w	r3, r3, #1
 801308e:	b2da      	uxtb	r2, r3
 8013090:	69bb      	ldr	r3, [r7, #24]
 8013092:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013098:	69bb      	ldr	r3, [r7, #24]
 801309a:	695b      	ldr	r3, [r3, #20]
 801309c:	68ba      	ldr	r2, [r7, #8]
 801309e:	429a      	cmp	r2, r3
 80130a0:	d3c6      	bcc.n	8013030 <remove_chain+0x4a>
 80130a2:	e000      	b.n	80130a6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80130a4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80130a6:	2300      	movs	r3, #0
}
 80130a8:	4618      	mov	r0, r3
 80130aa:	3720      	adds	r7, #32
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}

080130b0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b088      	sub	sp, #32
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
 80130b8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d10d      	bne.n	80130e2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80130c6:	693b      	ldr	r3, [r7, #16]
 80130c8:	68db      	ldr	r3, [r3, #12]
 80130ca:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80130cc:	69bb      	ldr	r3, [r7, #24]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d004      	beq.n	80130dc <create_chain+0x2c>
 80130d2:	693b      	ldr	r3, [r7, #16]
 80130d4:	695b      	ldr	r3, [r3, #20]
 80130d6:	69ba      	ldr	r2, [r7, #24]
 80130d8:	429a      	cmp	r2, r3
 80130da:	d31b      	bcc.n	8013114 <create_chain+0x64>
 80130dc:	2301      	movs	r3, #1
 80130de:	61bb      	str	r3, [r7, #24]
 80130e0:	e018      	b.n	8013114 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80130e2:	6839      	ldr	r1, [r7, #0]
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f7ff fdea 	bl	8012cbe <get_fat>
 80130ea:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	2b01      	cmp	r3, #1
 80130f0:	d801      	bhi.n	80130f6 <create_chain+0x46>
 80130f2:	2301      	movs	r3, #1
 80130f4:	e070      	b.n	80131d8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130fc:	d101      	bne.n	8013102 <create_chain+0x52>
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	e06a      	b.n	80131d8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	695b      	ldr	r3, [r3, #20]
 8013106:	68fa      	ldr	r2, [r7, #12]
 8013108:	429a      	cmp	r2, r3
 801310a:	d201      	bcs.n	8013110 <create_chain+0x60>
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	e063      	b.n	80131d8 <create_chain+0x128>
		scl = clst;
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013114:	69bb      	ldr	r3, [r7, #24]
 8013116:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013118:	69fb      	ldr	r3, [r7, #28]
 801311a:	3301      	adds	r3, #1
 801311c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801311e:	693b      	ldr	r3, [r7, #16]
 8013120:	695b      	ldr	r3, [r3, #20]
 8013122:	69fa      	ldr	r2, [r7, #28]
 8013124:	429a      	cmp	r2, r3
 8013126:	d307      	bcc.n	8013138 <create_chain+0x88>
				ncl = 2;
 8013128:	2302      	movs	r3, #2
 801312a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801312c:	69fa      	ldr	r2, [r7, #28]
 801312e:	69bb      	ldr	r3, [r7, #24]
 8013130:	429a      	cmp	r2, r3
 8013132:	d901      	bls.n	8013138 <create_chain+0x88>
 8013134:	2300      	movs	r3, #0
 8013136:	e04f      	b.n	80131d8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013138:	69f9      	ldr	r1, [r7, #28]
 801313a:	6878      	ldr	r0, [r7, #4]
 801313c:	f7ff fdbf 	bl	8012cbe <get_fat>
 8013140:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d00e      	beq.n	8013166 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2b01      	cmp	r3, #1
 801314c:	d003      	beq.n	8013156 <create_chain+0xa6>
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013154:	d101      	bne.n	801315a <create_chain+0xaa>
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	e03e      	b.n	80131d8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801315a:	69fa      	ldr	r2, [r7, #28]
 801315c:	69bb      	ldr	r3, [r7, #24]
 801315e:	429a      	cmp	r2, r3
 8013160:	d1da      	bne.n	8013118 <create_chain+0x68>
 8013162:	2300      	movs	r3, #0
 8013164:	e038      	b.n	80131d8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013166:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013168:	f04f 32ff 	mov.w	r2, #4294967295
 801316c:	69f9      	ldr	r1, [r7, #28]
 801316e:	6938      	ldr	r0, [r7, #16]
 8013170:	f7ff fe4d 	bl	8012e0e <put_fat>
 8013174:	4603      	mov	r3, r0
 8013176:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013178:	7dfb      	ldrb	r3, [r7, #23]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d109      	bne.n	8013192 <create_chain+0xe2>
 801317e:	683b      	ldr	r3, [r7, #0]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d006      	beq.n	8013192 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013184:	69fa      	ldr	r2, [r7, #28]
 8013186:	6839      	ldr	r1, [r7, #0]
 8013188:	6938      	ldr	r0, [r7, #16]
 801318a:	f7ff fe40 	bl	8012e0e <put_fat>
 801318e:	4603      	mov	r3, r0
 8013190:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013192:	7dfb      	ldrb	r3, [r7, #23]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d116      	bne.n	80131c6 <create_chain+0x116>
		fs->last_clst = ncl;
 8013198:	693b      	ldr	r3, [r7, #16]
 801319a:	69fa      	ldr	r2, [r7, #28]
 801319c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801319e:	693b      	ldr	r3, [r7, #16]
 80131a0:	691a      	ldr	r2, [r3, #16]
 80131a2:	693b      	ldr	r3, [r7, #16]
 80131a4:	695b      	ldr	r3, [r3, #20]
 80131a6:	3b02      	subs	r3, #2
 80131a8:	429a      	cmp	r2, r3
 80131aa:	d804      	bhi.n	80131b6 <create_chain+0x106>
 80131ac:	693b      	ldr	r3, [r7, #16]
 80131ae:	691b      	ldr	r3, [r3, #16]
 80131b0:	1e5a      	subs	r2, r3, #1
 80131b2:	693b      	ldr	r3, [r7, #16]
 80131b4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80131b6:	693b      	ldr	r3, [r7, #16]
 80131b8:	791b      	ldrb	r3, [r3, #4]
 80131ba:	f043 0301 	orr.w	r3, r3, #1
 80131be:	b2da      	uxtb	r2, r3
 80131c0:	693b      	ldr	r3, [r7, #16]
 80131c2:	711a      	strb	r2, [r3, #4]
 80131c4:	e007      	b.n	80131d6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80131c6:	7dfb      	ldrb	r3, [r7, #23]
 80131c8:	2b01      	cmp	r3, #1
 80131ca:	d102      	bne.n	80131d2 <create_chain+0x122>
 80131cc:	f04f 33ff 	mov.w	r3, #4294967295
 80131d0:	e000      	b.n	80131d4 <create_chain+0x124>
 80131d2:	2301      	movs	r3, #1
 80131d4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80131d6:	69fb      	ldr	r3, [r7, #28]
}
 80131d8:	4618      	mov	r0, r3
 80131da:	3720      	adds	r7, #32
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}

080131e0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80131e0:	b480      	push	{r7}
 80131e2:	b087      	sub	sp, #28
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
 80131e8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131f4:	3304      	adds	r3, #4
 80131f6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80131f8:	683b      	ldr	r3, [r7, #0]
 80131fa:	0a5b      	lsrs	r3, r3, #9
 80131fc:	68fa      	ldr	r2, [r7, #12]
 80131fe:	8952      	ldrh	r2, [r2, #10]
 8013200:	fbb3 f3f2 	udiv	r3, r3, r2
 8013204:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	1d1a      	adds	r2, r3, #4
 801320a:	613a      	str	r2, [r7, #16]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d101      	bne.n	801321a <clmt_clust+0x3a>
 8013216:	2300      	movs	r3, #0
 8013218:	e010      	b.n	801323c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801321a:	697a      	ldr	r2, [r7, #20]
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	429a      	cmp	r2, r3
 8013220:	d307      	bcc.n	8013232 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013222:	697a      	ldr	r2, [r7, #20]
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	1ad3      	subs	r3, r2, r3
 8013228:	617b      	str	r3, [r7, #20]
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	3304      	adds	r3, #4
 801322e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013230:	e7e9      	b.n	8013206 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013232:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	681a      	ldr	r2, [r3, #0]
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	4413      	add	r3, r2
}
 801323c:	4618      	mov	r0, r3
 801323e:	371c      	adds	r7, #28
 8013240:	46bd      	mov	sp, r7
 8013242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013246:	4770      	bx	lr

08013248 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b086      	sub	sp, #24
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
 8013250:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801325e:	d204      	bcs.n	801326a <dir_sdi+0x22>
 8013260:	683b      	ldr	r3, [r7, #0]
 8013262:	f003 031f 	and.w	r3, r3, #31
 8013266:	2b00      	cmp	r3, #0
 8013268:	d001      	beq.n	801326e <dir_sdi+0x26>
		return FR_INT_ERR;
 801326a:	2302      	movs	r3, #2
 801326c:	e063      	b.n	8013336 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	683a      	ldr	r2, [r7, #0]
 8013272:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	689b      	ldr	r3, [r3, #8]
 8013278:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801327a:	697b      	ldr	r3, [r7, #20]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d106      	bne.n	801328e <dir_sdi+0x46>
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	781b      	ldrb	r3, [r3, #0]
 8013284:	2b02      	cmp	r3, #2
 8013286:	d902      	bls.n	801328e <dir_sdi+0x46>
		clst = fs->dirbase;
 8013288:	693b      	ldr	r3, [r7, #16]
 801328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801328c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801328e:	697b      	ldr	r3, [r7, #20]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d10c      	bne.n	80132ae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	095b      	lsrs	r3, r3, #5
 8013298:	693a      	ldr	r2, [r7, #16]
 801329a:	8912      	ldrh	r2, [r2, #8]
 801329c:	4293      	cmp	r3, r2
 801329e:	d301      	bcc.n	80132a4 <dir_sdi+0x5c>
 80132a0:	2302      	movs	r3, #2
 80132a2:	e048      	b.n	8013336 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	61da      	str	r2, [r3, #28]
 80132ac:	e029      	b.n	8013302 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	895b      	ldrh	r3, [r3, #10]
 80132b2:	025b      	lsls	r3, r3, #9
 80132b4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80132b6:	e019      	b.n	80132ec <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	6979      	ldr	r1, [r7, #20]
 80132bc:	4618      	mov	r0, r3
 80132be:	f7ff fcfe 	bl	8012cbe <get_fat>
 80132c2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80132c4:	697b      	ldr	r3, [r7, #20]
 80132c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ca:	d101      	bne.n	80132d0 <dir_sdi+0x88>
 80132cc:	2301      	movs	r3, #1
 80132ce:	e032      	b.n	8013336 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	2b01      	cmp	r3, #1
 80132d4:	d904      	bls.n	80132e0 <dir_sdi+0x98>
 80132d6:	693b      	ldr	r3, [r7, #16]
 80132d8:	695b      	ldr	r3, [r3, #20]
 80132da:	697a      	ldr	r2, [r7, #20]
 80132dc:	429a      	cmp	r2, r3
 80132de:	d301      	bcc.n	80132e4 <dir_sdi+0x9c>
 80132e0:	2302      	movs	r3, #2
 80132e2:	e028      	b.n	8013336 <dir_sdi+0xee>
			ofs -= csz;
 80132e4:	683a      	ldr	r2, [r7, #0]
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	1ad3      	subs	r3, r2, r3
 80132ea:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80132ec:	683a      	ldr	r2, [r7, #0]
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d2e1      	bcs.n	80132b8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80132f4:	6979      	ldr	r1, [r7, #20]
 80132f6:	6938      	ldr	r0, [r7, #16]
 80132f8:	f7ff fcc2 	bl	8012c80 <clust2sect>
 80132fc:	4602      	mov	r2, r0
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	697a      	ldr	r2, [r7, #20]
 8013306:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	69db      	ldr	r3, [r3, #28]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d101      	bne.n	8013314 <dir_sdi+0xcc>
 8013310:	2302      	movs	r3, #2
 8013312:	e010      	b.n	8013336 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	69da      	ldr	r2, [r3, #28]
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	0a5b      	lsrs	r3, r3, #9
 801331c:	441a      	add	r2, r3
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013328:	683b      	ldr	r3, [r7, #0]
 801332a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801332e:	441a      	add	r2, r3
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013334:	2300      	movs	r3, #0
}
 8013336:	4618      	mov	r0, r3
 8013338:	3718      	adds	r7, #24
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}

0801333e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801333e:	b580      	push	{r7, lr}
 8013340:	b086      	sub	sp, #24
 8013342:	af00      	add	r7, sp, #0
 8013344:	6078      	str	r0, [r7, #4]
 8013346:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	695b      	ldr	r3, [r3, #20]
 8013352:	3320      	adds	r3, #32
 8013354:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	69db      	ldr	r3, [r3, #28]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d003      	beq.n	8013366 <dir_next+0x28>
 801335e:	68bb      	ldr	r3, [r7, #8]
 8013360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013364:	d301      	bcc.n	801336a <dir_next+0x2c>
 8013366:	2304      	movs	r3, #4
 8013368:	e0aa      	b.n	80134c0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801336a:	68bb      	ldr	r3, [r7, #8]
 801336c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013370:	2b00      	cmp	r3, #0
 8013372:	f040 8098 	bne.w	80134a6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	69db      	ldr	r3, [r3, #28]
 801337a:	1c5a      	adds	r2, r3, #1
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	699b      	ldr	r3, [r3, #24]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d10b      	bne.n	80133a0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013388:	68bb      	ldr	r3, [r7, #8]
 801338a:	095b      	lsrs	r3, r3, #5
 801338c:	68fa      	ldr	r2, [r7, #12]
 801338e:	8912      	ldrh	r2, [r2, #8]
 8013390:	4293      	cmp	r3, r2
 8013392:	f0c0 8088 	bcc.w	80134a6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2200      	movs	r2, #0
 801339a:	61da      	str	r2, [r3, #28]
 801339c:	2304      	movs	r3, #4
 801339e:	e08f      	b.n	80134c0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	0a5b      	lsrs	r3, r3, #9
 80133a4:	68fa      	ldr	r2, [r7, #12]
 80133a6:	8952      	ldrh	r2, [r2, #10]
 80133a8:	3a01      	subs	r2, #1
 80133aa:	4013      	ands	r3, r2
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d17a      	bne.n	80134a6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80133b0:	687a      	ldr	r2, [r7, #4]
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	699b      	ldr	r3, [r3, #24]
 80133b6:	4619      	mov	r1, r3
 80133b8:	4610      	mov	r0, r2
 80133ba:	f7ff fc80 	bl	8012cbe <get_fat>
 80133be:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	2b01      	cmp	r3, #1
 80133c4:	d801      	bhi.n	80133ca <dir_next+0x8c>
 80133c6:	2302      	movs	r3, #2
 80133c8:	e07a      	b.n	80134c0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133d0:	d101      	bne.n	80133d6 <dir_next+0x98>
 80133d2:	2301      	movs	r3, #1
 80133d4:	e074      	b.n	80134c0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	695b      	ldr	r3, [r3, #20]
 80133da:	697a      	ldr	r2, [r7, #20]
 80133dc:	429a      	cmp	r2, r3
 80133de:	d358      	bcc.n	8013492 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d104      	bne.n	80133f0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	2200      	movs	r2, #0
 80133ea:	61da      	str	r2, [r3, #28]
 80133ec:	2304      	movs	r3, #4
 80133ee:	e067      	b.n	80134c0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80133f0:	687a      	ldr	r2, [r7, #4]
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	699b      	ldr	r3, [r3, #24]
 80133f6:	4619      	mov	r1, r3
 80133f8:	4610      	mov	r0, r2
 80133fa:	f7ff fe59 	bl	80130b0 <create_chain>
 80133fe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013400:	697b      	ldr	r3, [r7, #20]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d101      	bne.n	801340a <dir_next+0xcc>
 8013406:	2307      	movs	r3, #7
 8013408:	e05a      	b.n	80134c0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	2b01      	cmp	r3, #1
 801340e:	d101      	bne.n	8013414 <dir_next+0xd6>
 8013410:	2302      	movs	r3, #2
 8013412:	e055      	b.n	80134c0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	f1b3 3fff 	cmp.w	r3, #4294967295
 801341a:	d101      	bne.n	8013420 <dir_next+0xe2>
 801341c:	2301      	movs	r3, #1
 801341e:	e04f      	b.n	80134c0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013420:	68f8      	ldr	r0, [r7, #12]
 8013422:	f7ff fb4d 	bl	8012ac0 <sync_window>
 8013426:	4603      	mov	r3, r0
 8013428:	2b00      	cmp	r3, #0
 801342a:	d001      	beq.n	8013430 <dir_next+0xf2>
 801342c:	2301      	movs	r3, #1
 801342e:	e047      	b.n	80134c0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	3330      	adds	r3, #48	; 0x30
 8013434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013438:	2100      	movs	r1, #0
 801343a:	4618      	mov	r0, r3
 801343c:	f7ff f977 	bl	801272e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013440:	2300      	movs	r3, #0
 8013442:	613b      	str	r3, [r7, #16]
 8013444:	6979      	ldr	r1, [r7, #20]
 8013446:	68f8      	ldr	r0, [r7, #12]
 8013448:	f7ff fc1a 	bl	8012c80 <clust2sect>
 801344c:	4602      	mov	r2, r0
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	62da      	str	r2, [r3, #44]	; 0x2c
 8013452:	e012      	b.n	801347a <dir_next+0x13c>
						fs->wflag = 1;
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	2201      	movs	r2, #1
 8013458:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801345a:	68f8      	ldr	r0, [r7, #12]
 801345c:	f7ff fb30 	bl	8012ac0 <sync_window>
 8013460:	4603      	mov	r3, r0
 8013462:	2b00      	cmp	r3, #0
 8013464:	d001      	beq.n	801346a <dir_next+0x12c>
 8013466:	2301      	movs	r3, #1
 8013468:	e02a      	b.n	80134c0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801346a:	693b      	ldr	r3, [r7, #16]
 801346c:	3301      	adds	r3, #1
 801346e:	613b      	str	r3, [r7, #16]
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013474:	1c5a      	adds	r2, r3, #1
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	62da      	str	r2, [r3, #44]	; 0x2c
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	895b      	ldrh	r3, [r3, #10]
 801347e:	461a      	mov	r2, r3
 8013480:	693b      	ldr	r3, [r7, #16]
 8013482:	4293      	cmp	r3, r2
 8013484:	d3e6      	bcc.n	8013454 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	1ad2      	subs	r2, r2, r3
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	697a      	ldr	r2, [r7, #20]
 8013496:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013498:	6979      	ldr	r1, [r7, #20]
 801349a:	68f8      	ldr	r0, [r7, #12]
 801349c:	f7ff fbf0 	bl	8012c80 <clust2sect>
 80134a0:	4602      	mov	r2, r0
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	68ba      	ldr	r2, [r7, #8]
 80134aa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80134b8:	441a      	add	r2, r3
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80134be:	2300      	movs	r3, #0
}
 80134c0:	4618      	mov	r0, r3
 80134c2:	3718      	adds	r7, #24
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}

080134c8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b086      	sub	sp, #24
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
 80134d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80134d8:	2100      	movs	r1, #0
 80134da:	6878      	ldr	r0, [r7, #4]
 80134dc:	f7ff feb4 	bl	8013248 <dir_sdi>
 80134e0:	4603      	mov	r3, r0
 80134e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80134e4:	7dfb      	ldrb	r3, [r7, #23]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d12b      	bne.n	8013542 <dir_alloc+0x7a>
		n = 0;
 80134ea:	2300      	movs	r3, #0
 80134ec:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	69db      	ldr	r3, [r3, #28]
 80134f2:	4619      	mov	r1, r3
 80134f4:	68f8      	ldr	r0, [r7, #12]
 80134f6:	f7ff fb27 	bl	8012b48 <move_window>
 80134fa:	4603      	mov	r3, r0
 80134fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80134fe:	7dfb      	ldrb	r3, [r7, #23]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d11d      	bne.n	8013540 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	6a1b      	ldr	r3, [r3, #32]
 8013508:	781b      	ldrb	r3, [r3, #0]
 801350a:	2be5      	cmp	r3, #229	; 0xe5
 801350c:	d004      	beq.n	8013518 <dir_alloc+0x50>
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	6a1b      	ldr	r3, [r3, #32]
 8013512:	781b      	ldrb	r3, [r3, #0]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d107      	bne.n	8013528 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	3301      	adds	r3, #1
 801351c:	613b      	str	r3, [r7, #16]
 801351e:	693a      	ldr	r2, [r7, #16]
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	429a      	cmp	r2, r3
 8013524:	d102      	bne.n	801352c <dir_alloc+0x64>
 8013526:	e00c      	b.n	8013542 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013528:	2300      	movs	r3, #0
 801352a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801352c:	2101      	movs	r1, #1
 801352e:	6878      	ldr	r0, [r7, #4]
 8013530:	f7ff ff05 	bl	801333e <dir_next>
 8013534:	4603      	mov	r3, r0
 8013536:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013538:	7dfb      	ldrb	r3, [r7, #23]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d0d7      	beq.n	80134ee <dir_alloc+0x26>
 801353e:	e000      	b.n	8013542 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013540:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013542:	7dfb      	ldrb	r3, [r7, #23]
 8013544:	2b04      	cmp	r3, #4
 8013546:	d101      	bne.n	801354c <dir_alloc+0x84>
 8013548:	2307      	movs	r3, #7
 801354a:	75fb      	strb	r3, [r7, #23]
	return res;
 801354c:	7dfb      	ldrb	r3, [r7, #23]
}
 801354e:	4618      	mov	r0, r3
 8013550:	3718      	adds	r7, #24
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}

08013556 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013556:	b580      	push	{r7, lr}
 8013558:	b084      	sub	sp, #16
 801355a:	af00      	add	r7, sp, #0
 801355c:	6078      	str	r0, [r7, #4]
 801355e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013560:	683b      	ldr	r3, [r7, #0]
 8013562:	331a      	adds	r3, #26
 8013564:	4618      	mov	r0, r3
 8013566:	f7ff f83f 	bl	80125e8 <ld_word>
 801356a:	4603      	mov	r3, r0
 801356c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	781b      	ldrb	r3, [r3, #0]
 8013572:	2b03      	cmp	r3, #3
 8013574:	d109      	bne.n	801358a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	3314      	adds	r3, #20
 801357a:	4618      	mov	r0, r3
 801357c:	f7ff f834 	bl	80125e8 <ld_word>
 8013580:	4603      	mov	r3, r0
 8013582:	041b      	lsls	r3, r3, #16
 8013584:	68fa      	ldr	r2, [r7, #12]
 8013586:	4313      	orrs	r3, r2
 8013588:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801358a:	68fb      	ldr	r3, [r7, #12]
}
 801358c:	4618      	mov	r0, r3
 801358e:	3710      	adds	r7, #16
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}

08013594 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b084      	sub	sp, #16
 8013598:	af00      	add	r7, sp, #0
 801359a:	60f8      	str	r0, [r7, #12]
 801359c:	60b9      	str	r1, [r7, #8]
 801359e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80135a0:	68bb      	ldr	r3, [r7, #8]
 80135a2:	331a      	adds	r3, #26
 80135a4:	687a      	ldr	r2, [r7, #4]
 80135a6:	b292      	uxth	r2, r2
 80135a8:	4611      	mov	r1, r2
 80135aa:	4618      	mov	r0, r3
 80135ac:	f7ff f857 	bl	801265e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	2b03      	cmp	r3, #3
 80135b6:	d109      	bne.n	80135cc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	f103 0214 	add.w	r2, r3, #20
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	0c1b      	lsrs	r3, r3, #16
 80135c2:	b29b      	uxth	r3, r3
 80135c4:	4619      	mov	r1, r3
 80135c6:	4610      	mov	r0, r2
 80135c8:	f7ff f849 	bl	801265e <st_word>
	}
}
 80135cc:	bf00      	nop
 80135ce:	3710      	adds	r7, #16
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}

080135d4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b086      	sub	sp, #24
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80135e2:	2100      	movs	r1, #0
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	f7ff fe2f 	bl	8013248 <dir_sdi>
 80135ea:	4603      	mov	r3, r0
 80135ec:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80135ee:	7dfb      	ldrb	r3, [r7, #23]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d001      	beq.n	80135f8 <dir_find+0x24>
 80135f4:	7dfb      	ldrb	r3, [r7, #23]
 80135f6:	e03e      	b.n	8013676 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	69db      	ldr	r3, [r3, #28]
 80135fc:	4619      	mov	r1, r3
 80135fe:	6938      	ldr	r0, [r7, #16]
 8013600:	f7ff faa2 	bl	8012b48 <move_window>
 8013604:	4603      	mov	r3, r0
 8013606:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013608:	7dfb      	ldrb	r3, [r7, #23]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d12f      	bne.n	801366e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	6a1b      	ldr	r3, [r3, #32]
 8013612:	781b      	ldrb	r3, [r3, #0]
 8013614:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013616:	7bfb      	ldrb	r3, [r7, #15]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d102      	bne.n	8013622 <dir_find+0x4e>
 801361c:	2304      	movs	r3, #4
 801361e:	75fb      	strb	r3, [r7, #23]
 8013620:	e028      	b.n	8013674 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	6a1b      	ldr	r3, [r3, #32]
 8013626:	330b      	adds	r3, #11
 8013628:	781b      	ldrb	r3, [r3, #0]
 801362a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801362e:	b2da      	uxtb	r2, r3
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	6a1b      	ldr	r3, [r3, #32]
 8013638:	330b      	adds	r3, #11
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	f003 0308 	and.w	r3, r3, #8
 8013640:	2b00      	cmp	r3, #0
 8013642:	d10a      	bne.n	801365a <dir_find+0x86>
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6a18      	ldr	r0, [r3, #32]
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	3324      	adds	r3, #36	; 0x24
 801364c:	220b      	movs	r2, #11
 801364e:	4619      	mov	r1, r3
 8013650:	f7ff f888 	bl	8012764 <mem_cmp>
 8013654:	4603      	mov	r3, r0
 8013656:	2b00      	cmp	r3, #0
 8013658:	d00b      	beq.n	8013672 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801365a:	2100      	movs	r1, #0
 801365c:	6878      	ldr	r0, [r7, #4]
 801365e:	f7ff fe6e 	bl	801333e <dir_next>
 8013662:	4603      	mov	r3, r0
 8013664:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013666:	7dfb      	ldrb	r3, [r7, #23]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d0c5      	beq.n	80135f8 <dir_find+0x24>
 801366c:	e002      	b.n	8013674 <dir_find+0xa0>
		if (res != FR_OK) break;
 801366e:	bf00      	nop
 8013670:	e000      	b.n	8013674 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013672:	bf00      	nop

	return res;
 8013674:	7dfb      	ldrb	r3, [r7, #23]
}
 8013676:	4618      	mov	r0, r3
 8013678:	3718      	adds	r7, #24
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}

0801367e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801367e:	b580      	push	{r7, lr}
 8013680:	b084      	sub	sp, #16
 8013682:	af00      	add	r7, sp, #0
 8013684:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801368c:	2101      	movs	r1, #1
 801368e:	6878      	ldr	r0, [r7, #4]
 8013690:	f7ff ff1a 	bl	80134c8 <dir_alloc>
 8013694:	4603      	mov	r3, r0
 8013696:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013698:	7bfb      	ldrb	r3, [r7, #15]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d11c      	bne.n	80136d8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	69db      	ldr	r3, [r3, #28]
 80136a2:	4619      	mov	r1, r3
 80136a4:	68b8      	ldr	r0, [r7, #8]
 80136a6:	f7ff fa4f 	bl	8012b48 <move_window>
 80136aa:	4603      	mov	r3, r0
 80136ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80136ae:	7bfb      	ldrb	r3, [r7, #15]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d111      	bne.n	80136d8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	6a1b      	ldr	r3, [r3, #32]
 80136b8:	2220      	movs	r2, #32
 80136ba:	2100      	movs	r1, #0
 80136bc:	4618      	mov	r0, r3
 80136be:	f7ff f836 	bl	801272e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6a18      	ldr	r0, [r3, #32]
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	3324      	adds	r3, #36	; 0x24
 80136ca:	220b      	movs	r2, #11
 80136cc:	4619      	mov	r1, r3
 80136ce:	f7ff f80d 	bl	80126ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80136d2:	68bb      	ldr	r3, [r7, #8]
 80136d4:	2201      	movs	r2, #1
 80136d6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80136d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3710      	adds	r7, #16
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}
	...

080136e4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b088      	sub	sp, #32
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	60fb      	str	r3, [r7, #12]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	3324      	adds	r3, #36	; 0x24
 80136f8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80136fa:	220b      	movs	r2, #11
 80136fc:	2120      	movs	r1, #32
 80136fe:	68b8      	ldr	r0, [r7, #8]
 8013700:	f7ff f815 	bl	801272e <mem_set>
	si = i = 0; ni = 8;
 8013704:	2300      	movs	r3, #0
 8013706:	613b      	str	r3, [r7, #16]
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	61fb      	str	r3, [r7, #28]
 801370c:	2308      	movs	r3, #8
 801370e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013710:	69fb      	ldr	r3, [r7, #28]
 8013712:	1c5a      	adds	r2, r3, #1
 8013714:	61fa      	str	r2, [r7, #28]
 8013716:	68fa      	ldr	r2, [r7, #12]
 8013718:	4413      	add	r3, r2
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801371e:	7efb      	ldrb	r3, [r7, #27]
 8013720:	2b20      	cmp	r3, #32
 8013722:	d94e      	bls.n	80137c2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013724:	7efb      	ldrb	r3, [r7, #27]
 8013726:	2b2f      	cmp	r3, #47	; 0x2f
 8013728:	d006      	beq.n	8013738 <create_name+0x54>
 801372a:	7efb      	ldrb	r3, [r7, #27]
 801372c:	2b5c      	cmp	r3, #92	; 0x5c
 801372e:	d110      	bne.n	8013752 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013730:	e002      	b.n	8013738 <create_name+0x54>
 8013732:	69fb      	ldr	r3, [r7, #28]
 8013734:	3301      	adds	r3, #1
 8013736:	61fb      	str	r3, [r7, #28]
 8013738:	68fa      	ldr	r2, [r7, #12]
 801373a:	69fb      	ldr	r3, [r7, #28]
 801373c:	4413      	add	r3, r2
 801373e:	781b      	ldrb	r3, [r3, #0]
 8013740:	2b2f      	cmp	r3, #47	; 0x2f
 8013742:	d0f6      	beq.n	8013732 <create_name+0x4e>
 8013744:	68fa      	ldr	r2, [r7, #12]
 8013746:	69fb      	ldr	r3, [r7, #28]
 8013748:	4413      	add	r3, r2
 801374a:	781b      	ldrb	r3, [r3, #0]
 801374c:	2b5c      	cmp	r3, #92	; 0x5c
 801374e:	d0f0      	beq.n	8013732 <create_name+0x4e>
			break;
 8013750:	e038      	b.n	80137c4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013752:	7efb      	ldrb	r3, [r7, #27]
 8013754:	2b2e      	cmp	r3, #46	; 0x2e
 8013756:	d003      	beq.n	8013760 <create_name+0x7c>
 8013758:	693a      	ldr	r2, [r7, #16]
 801375a:	697b      	ldr	r3, [r7, #20]
 801375c:	429a      	cmp	r2, r3
 801375e:	d30c      	bcc.n	801377a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013760:	697b      	ldr	r3, [r7, #20]
 8013762:	2b0b      	cmp	r3, #11
 8013764:	d002      	beq.n	801376c <create_name+0x88>
 8013766:	7efb      	ldrb	r3, [r7, #27]
 8013768:	2b2e      	cmp	r3, #46	; 0x2e
 801376a:	d001      	beq.n	8013770 <create_name+0x8c>
 801376c:	2306      	movs	r3, #6
 801376e:	e044      	b.n	80137fa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013770:	2308      	movs	r3, #8
 8013772:	613b      	str	r3, [r7, #16]
 8013774:	230b      	movs	r3, #11
 8013776:	617b      	str	r3, [r7, #20]
			continue;
 8013778:	e022      	b.n	80137c0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801377a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801377e:	2b00      	cmp	r3, #0
 8013780:	da04      	bge.n	801378c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013782:	7efb      	ldrb	r3, [r7, #27]
 8013784:	3b80      	subs	r3, #128	; 0x80
 8013786:	4a1f      	ldr	r2, [pc, #124]	; (8013804 <create_name+0x120>)
 8013788:	5cd3      	ldrb	r3, [r2, r3]
 801378a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801378c:	7efb      	ldrb	r3, [r7, #27]
 801378e:	4619      	mov	r1, r3
 8013790:	481d      	ldr	r0, [pc, #116]	; (8013808 <create_name+0x124>)
 8013792:	f7ff f80e 	bl	80127b2 <chk_chr>
 8013796:	4603      	mov	r3, r0
 8013798:	2b00      	cmp	r3, #0
 801379a:	d001      	beq.n	80137a0 <create_name+0xbc>
 801379c:	2306      	movs	r3, #6
 801379e:	e02c      	b.n	80137fa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80137a0:	7efb      	ldrb	r3, [r7, #27]
 80137a2:	2b60      	cmp	r3, #96	; 0x60
 80137a4:	d905      	bls.n	80137b2 <create_name+0xce>
 80137a6:	7efb      	ldrb	r3, [r7, #27]
 80137a8:	2b7a      	cmp	r3, #122	; 0x7a
 80137aa:	d802      	bhi.n	80137b2 <create_name+0xce>
 80137ac:	7efb      	ldrb	r3, [r7, #27]
 80137ae:	3b20      	subs	r3, #32
 80137b0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80137b2:	693b      	ldr	r3, [r7, #16]
 80137b4:	1c5a      	adds	r2, r3, #1
 80137b6:	613a      	str	r2, [r7, #16]
 80137b8:	68ba      	ldr	r2, [r7, #8]
 80137ba:	4413      	add	r3, r2
 80137bc:	7efa      	ldrb	r2, [r7, #27]
 80137be:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80137c0:	e7a6      	b.n	8013710 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80137c2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80137c4:	68fa      	ldr	r2, [r7, #12]
 80137c6:	69fb      	ldr	r3, [r7, #28]
 80137c8:	441a      	add	r2, r3
 80137ca:	683b      	ldr	r3, [r7, #0]
 80137cc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80137ce:	693b      	ldr	r3, [r7, #16]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d101      	bne.n	80137d8 <create_name+0xf4>
 80137d4:	2306      	movs	r3, #6
 80137d6:	e010      	b.n	80137fa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	781b      	ldrb	r3, [r3, #0]
 80137dc:	2be5      	cmp	r3, #229	; 0xe5
 80137de:	d102      	bne.n	80137e6 <create_name+0x102>
 80137e0:	68bb      	ldr	r3, [r7, #8]
 80137e2:	2205      	movs	r2, #5
 80137e4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80137e6:	7efb      	ldrb	r3, [r7, #27]
 80137e8:	2b20      	cmp	r3, #32
 80137ea:	d801      	bhi.n	80137f0 <create_name+0x10c>
 80137ec:	2204      	movs	r2, #4
 80137ee:	e000      	b.n	80137f2 <create_name+0x10e>
 80137f0:	2200      	movs	r2, #0
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	330b      	adds	r3, #11
 80137f6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80137f8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80137fa:	4618      	mov	r0, r3
 80137fc:	3720      	adds	r7, #32
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}
 8013802:	bf00      	nop
 8013804:	08018178 	.word	0x08018178
 8013808:	080180e0 	.word	0x080180e0

0801380c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b086      	sub	sp, #24
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
 8013814:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801381a:	693b      	ldr	r3, [r7, #16]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013820:	e002      	b.n	8013828 <follow_path+0x1c>
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	3301      	adds	r3, #1
 8013826:	603b      	str	r3, [r7, #0]
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	781b      	ldrb	r3, [r3, #0]
 801382c:	2b2f      	cmp	r3, #47	; 0x2f
 801382e:	d0f8      	beq.n	8013822 <follow_path+0x16>
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	781b      	ldrb	r3, [r3, #0]
 8013834:	2b5c      	cmp	r3, #92	; 0x5c
 8013836:	d0f4      	beq.n	8013822 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013838:	693b      	ldr	r3, [r7, #16]
 801383a:	2200      	movs	r2, #0
 801383c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	781b      	ldrb	r3, [r3, #0]
 8013842:	2b1f      	cmp	r3, #31
 8013844:	d80a      	bhi.n	801385c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2280      	movs	r2, #128	; 0x80
 801384a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801384e:	2100      	movs	r1, #0
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f7ff fcf9 	bl	8013248 <dir_sdi>
 8013856:	4603      	mov	r3, r0
 8013858:	75fb      	strb	r3, [r7, #23]
 801385a:	e043      	b.n	80138e4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801385c:	463b      	mov	r3, r7
 801385e:	4619      	mov	r1, r3
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f7ff ff3f 	bl	80136e4 <create_name>
 8013866:	4603      	mov	r3, r0
 8013868:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801386a:	7dfb      	ldrb	r3, [r7, #23]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d134      	bne.n	80138da <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f7ff feaf 	bl	80135d4 <dir_find>
 8013876:	4603      	mov	r3, r0
 8013878:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013880:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013882:	7dfb      	ldrb	r3, [r7, #23]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d00a      	beq.n	801389e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013888:	7dfb      	ldrb	r3, [r7, #23]
 801388a:	2b04      	cmp	r3, #4
 801388c:	d127      	bne.n	80138de <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801388e:	7afb      	ldrb	r3, [r7, #11]
 8013890:	f003 0304 	and.w	r3, r3, #4
 8013894:	2b00      	cmp	r3, #0
 8013896:	d122      	bne.n	80138de <follow_path+0xd2>
 8013898:	2305      	movs	r3, #5
 801389a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801389c:	e01f      	b.n	80138de <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801389e:	7afb      	ldrb	r3, [r7, #11]
 80138a0:	f003 0304 	and.w	r3, r3, #4
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d11c      	bne.n	80138e2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	799b      	ldrb	r3, [r3, #6]
 80138ac:	f003 0310 	and.w	r3, r3, #16
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d102      	bne.n	80138ba <follow_path+0xae>
				res = FR_NO_PATH; break;
 80138b4:	2305      	movs	r3, #5
 80138b6:	75fb      	strb	r3, [r7, #23]
 80138b8:	e014      	b.n	80138e4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	695b      	ldr	r3, [r3, #20]
 80138c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138c8:	4413      	add	r3, r2
 80138ca:	4619      	mov	r1, r3
 80138cc:	68f8      	ldr	r0, [r7, #12]
 80138ce:	f7ff fe42 	bl	8013556 <ld_clust>
 80138d2:	4602      	mov	r2, r0
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80138d8:	e7c0      	b.n	801385c <follow_path+0x50>
			if (res != FR_OK) break;
 80138da:	bf00      	nop
 80138dc:	e002      	b.n	80138e4 <follow_path+0xd8>
				break;
 80138de:	bf00      	nop
 80138e0:	e000      	b.n	80138e4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80138e2:	bf00      	nop
			}
		}
	}

	return res;
 80138e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80138e6:	4618      	mov	r0, r3
 80138e8:	3718      	adds	r7, #24
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bd80      	pop	{r7, pc}

080138ee <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80138ee:	b480      	push	{r7}
 80138f0:	b087      	sub	sp, #28
 80138f2:	af00      	add	r7, sp, #0
 80138f4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80138f6:	f04f 33ff 	mov.w	r3, #4294967295
 80138fa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d031      	beq.n	8013968 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	617b      	str	r3, [r7, #20]
 801390a:	e002      	b.n	8013912 <get_ldnumber+0x24>
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	3301      	adds	r3, #1
 8013910:	617b      	str	r3, [r7, #20]
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	781b      	ldrb	r3, [r3, #0]
 8013916:	2b20      	cmp	r3, #32
 8013918:	d903      	bls.n	8013922 <get_ldnumber+0x34>
 801391a:	697b      	ldr	r3, [r7, #20]
 801391c:	781b      	ldrb	r3, [r3, #0]
 801391e:	2b3a      	cmp	r3, #58	; 0x3a
 8013920:	d1f4      	bne.n	801390c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	2b3a      	cmp	r3, #58	; 0x3a
 8013928:	d11c      	bne.n	8013964 <get_ldnumber+0x76>
			tp = *path;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	1c5a      	adds	r2, r3, #1
 8013934:	60fa      	str	r2, [r7, #12]
 8013936:	781b      	ldrb	r3, [r3, #0]
 8013938:	3b30      	subs	r3, #48	; 0x30
 801393a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801393c:	68bb      	ldr	r3, [r7, #8]
 801393e:	2b09      	cmp	r3, #9
 8013940:	d80e      	bhi.n	8013960 <get_ldnumber+0x72>
 8013942:	68fa      	ldr	r2, [r7, #12]
 8013944:	697b      	ldr	r3, [r7, #20]
 8013946:	429a      	cmp	r2, r3
 8013948:	d10a      	bne.n	8013960 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d107      	bne.n	8013960 <get_ldnumber+0x72>
					vol = (int)i;
 8013950:	68bb      	ldr	r3, [r7, #8]
 8013952:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013954:	697b      	ldr	r3, [r7, #20]
 8013956:	3301      	adds	r3, #1
 8013958:	617b      	str	r3, [r7, #20]
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	697a      	ldr	r2, [r7, #20]
 801395e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	e002      	b.n	801396a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013964:	2300      	movs	r3, #0
 8013966:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013968:	693b      	ldr	r3, [r7, #16]
}
 801396a:	4618      	mov	r0, r3
 801396c:	371c      	adds	r7, #28
 801396e:	46bd      	mov	sp, r7
 8013970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013974:	4770      	bx	lr
	...

08013978 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b082      	sub	sp, #8
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
 8013980:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	2200      	movs	r2, #0
 8013986:	70da      	strb	r2, [r3, #3]
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f04f 32ff 	mov.w	r2, #4294967295
 801398e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013990:	6839      	ldr	r1, [r7, #0]
 8013992:	6878      	ldr	r0, [r7, #4]
 8013994:	f7ff f8d8 	bl	8012b48 <move_window>
 8013998:	4603      	mov	r3, r0
 801399a:	2b00      	cmp	r3, #0
 801399c:	d001      	beq.n	80139a2 <check_fs+0x2a>
 801399e:	2304      	movs	r3, #4
 80139a0:	e038      	b.n	8013a14 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	3330      	adds	r3, #48	; 0x30
 80139a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7fe fe1c 	bl	80125e8 <ld_word>
 80139b0:	4603      	mov	r3, r0
 80139b2:	461a      	mov	r2, r3
 80139b4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d001      	beq.n	80139c0 <check_fs+0x48>
 80139bc:	2303      	movs	r3, #3
 80139be:	e029      	b.n	8013a14 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80139c6:	2be9      	cmp	r3, #233	; 0xe9
 80139c8:	d009      	beq.n	80139de <check_fs+0x66>
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80139d0:	2beb      	cmp	r3, #235	; 0xeb
 80139d2:	d11e      	bne.n	8013a12 <check_fs+0x9a>
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80139da:	2b90      	cmp	r3, #144	; 0x90
 80139dc:	d119      	bne.n	8013a12 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	3330      	adds	r3, #48	; 0x30
 80139e2:	3336      	adds	r3, #54	; 0x36
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7fe fe17 	bl	8012618 <ld_dword>
 80139ea:	4603      	mov	r3, r0
 80139ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80139f0:	4a0a      	ldr	r2, [pc, #40]	; (8013a1c <check_fs+0xa4>)
 80139f2:	4293      	cmp	r3, r2
 80139f4:	d101      	bne.n	80139fa <check_fs+0x82>
 80139f6:	2300      	movs	r3, #0
 80139f8:	e00c      	b.n	8013a14 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	3330      	adds	r3, #48	; 0x30
 80139fe:	3352      	adds	r3, #82	; 0x52
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7fe fe09 	bl	8012618 <ld_dword>
 8013a06:	4603      	mov	r3, r0
 8013a08:	4a05      	ldr	r2, [pc, #20]	; (8013a20 <check_fs+0xa8>)
 8013a0a:	4293      	cmp	r3, r2
 8013a0c:	d101      	bne.n	8013a12 <check_fs+0x9a>
 8013a0e:	2300      	movs	r3, #0
 8013a10:	e000      	b.n	8013a14 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013a12:	2302      	movs	r3, #2
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	3708      	adds	r7, #8
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd80      	pop	{r7, pc}
 8013a1c:	00544146 	.word	0x00544146
 8013a20:	33544146 	.word	0x33544146

08013a24 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b096      	sub	sp, #88	; 0x58
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	60f8      	str	r0, [r7, #12]
 8013a2c:	60b9      	str	r1, [r7, #8]
 8013a2e:	4613      	mov	r3, r2
 8013a30:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	2200      	movs	r2, #0
 8013a36:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013a38:	68f8      	ldr	r0, [r7, #12]
 8013a3a:	f7ff ff58 	bl	80138ee <get_ldnumber>
 8013a3e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	da01      	bge.n	8013a4a <find_volume+0x26>
 8013a46:	230b      	movs	r3, #11
 8013a48:	e22d      	b.n	8013ea6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013a4a:	4aa1      	ldr	r2, [pc, #644]	; (8013cd0 <find_volume+0x2ac>)
 8013a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a52:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d101      	bne.n	8013a5e <find_volume+0x3a>
 8013a5a:	230c      	movs	r3, #12
 8013a5c:	e223      	b.n	8013ea6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a62:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013a64:	79fb      	ldrb	r3, [r7, #7]
 8013a66:	f023 0301 	bic.w	r3, r3, #1
 8013a6a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d01a      	beq.n	8013aaa <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a76:	785b      	ldrb	r3, [r3, #1]
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7fe fd17 	bl	80124ac <disk_status>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013a84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a88:	f003 0301 	and.w	r3, r3, #1
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d10c      	bne.n	8013aaa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013a90:	79fb      	ldrb	r3, [r7, #7]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d007      	beq.n	8013aa6 <find_volume+0x82>
 8013a96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a9a:	f003 0304 	and.w	r3, r3, #4
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d001      	beq.n	8013aa6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013aa2:	230a      	movs	r3, #10
 8013aa4:	e1ff      	b.n	8013ea6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	e1fd      	b.n	8013ea6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aac:	2200      	movs	r2, #0
 8013aae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ab2:	b2da      	uxtb	r2, r3
 8013ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aba:	785b      	ldrb	r3, [r3, #1]
 8013abc:	4618      	mov	r0, r3
 8013abe:	f7fe fd0f 	bl	80124e0 <disk_initialize>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013ac8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013acc:	f003 0301 	and.w	r3, r3, #1
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d001      	beq.n	8013ad8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013ad4:	2303      	movs	r3, #3
 8013ad6:	e1e6      	b.n	8013ea6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013ad8:	79fb      	ldrb	r3, [r7, #7]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d007      	beq.n	8013aee <find_volume+0xca>
 8013ade:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ae2:	f003 0304 	and.w	r3, r3, #4
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d001      	beq.n	8013aee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013aea:	230a      	movs	r3, #10
 8013aec:	e1db      	b.n	8013ea6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013aee:	2300      	movs	r3, #0
 8013af0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013af2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013af4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013af6:	f7ff ff3f 	bl	8013978 <check_fs>
 8013afa:	4603      	mov	r3, r0
 8013afc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013b00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b04:	2b02      	cmp	r3, #2
 8013b06:	d149      	bne.n	8013b9c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013b08:	2300      	movs	r3, #0
 8013b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8013b0c:	e01e      	b.n	8013b4c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b16:	011b      	lsls	r3, r3, #4
 8013b18:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013b1c:	4413      	add	r3, r2
 8013b1e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b22:	3304      	adds	r3, #4
 8013b24:	781b      	ldrb	r3, [r3, #0]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d006      	beq.n	8013b38 <find_volume+0x114>
 8013b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2c:	3308      	adds	r3, #8
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f7fe fd72 	bl	8012618 <ld_dword>
 8013b34:	4602      	mov	r2, r0
 8013b36:	e000      	b.n	8013b3a <find_volume+0x116>
 8013b38:	2200      	movs	r2, #0
 8013b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b3c:	009b      	lsls	r3, r3, #2
 8013b3e:	3358      	adds	r3, #88	; 0x58
 8013b40:	443b      	add	r3, r7
 8013b42:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b48:	3301      	adds	r3, #1
 8013b4a:	643b      	str	r3, [r7, #64]	; 0x40
 8013b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b4e:	2b03      	cmp	r3, #3
 8013b50:	d9dd      	bls.n	8013b0e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013b52:	2300      	movs	r3, #0
 8013b54:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d002      	beq.n	8013b62 <find_volume+0x13e>
 8013b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b5e:	3b01      	subs	r3, #1
 8013b60:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b64:	009b      	lsls	r3, r3, #2
 8013b66:	3358      	adds	r3, #88	; 0x58
 8013b68:	443b      	add	r3, r7
 8013b6a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013b6e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d005      	beq.n	8013b82 <find_volume+0x15e>
 8013b76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013b78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013b7a:	f7ff fefd 	bl	8013978 <check_fs>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	e000      	b.n	8013b84 <find_volume+0x160>
 8013b82:	2303      	movs	r3, #3
 8013b84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013b88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b8c:	2b01      	cmp	r3, #1
 8013b8e:	d905      	bls.n	8013b9c <find_volume+0x178>
 8013b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b92:	3301      	adds	r3, #1
 8013b94:	643b      	str	r3, [r7, #64]	; 0x40
 8013b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b98:	2b03      	cmp	r3, #3
 8013b9a:	d9e2      	bls.n	8013b62 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013b9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ba0:	2b04      	cmp	r3, #4
 8013ba2:	d101      	bne.n	8013ba8 <find_volume+0x184>
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	e17e      	b.n	8013ea6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013ba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013bac:	2b01      	cmp	r3, #1
 8013bae:	d901      	bls.n	8013bb4 <find_volume+0x190>
 8013bb0:	230d      	movs	r3, #13
 8013bb2:	e178      	b.n	8013ea6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bb6:	3330      	adds	r3, #48	; 0x30
 8013bb8:	330b      	adds	r3, #11
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f7fe fd14 	bl	80125e8 <ld_word>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013bc6:	d001      	beq.n	8013bcc <find_volume+0x1a8>
 8013bc8:	230d      	movs	r3, #13
 8013bca:	e16c      	b.n	8013ea6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bce:	3330      	adds	r3, #48	; 0x30
 8013bd0:	3316      	adds	r3, #22
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f7fe fd08 	bl	80125e8 <ld_word>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d106      	bne.n	8013bf0 <find_volume+0x1cc>
 8013be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013be4:	3330      	adds	r3, #48	; 0x30
 8013be6:	3324      	adds	r3, #36	; 0x24
 8013be8:	4618      	mov	r0, r3
 8013bea:	f7fe fd15 	bl	8012618 <ld_dword>
 8013bee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013bf4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bf8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8013bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bfe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c02:	789b      	ldrb	r3, [r3, #2]
 8013c04:	2b01      	cmp	r3, #1
 8013c06:	d005      	beq.n	8013c14 <find_volume+0x1f0>
 8013c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c0a:	789b      	ldrb	r3, [r3, #2]
 8013c0c:	2b02      	cmp	r3, #2
 8013c0e:	d001      	beq.n	8013c14 <find_volume+0x1f0>
 8013c10:	230d      	movs	r3, #13
 8013c12:	e148      	b.n	8013ea6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c16:	789b      	ldrb	r3, [r3, #2]
 8013c18:	461a      	mov	r2, r3
 8013c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c1c:	fb02 f303 	mul.w	r3, r2, r3
 8013c20:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013c28:	b29a      	uxth	r2, r3
 8013c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c2c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c30:	895b      	ldrh	r3, [r3, #10]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d008      	beq.n	8013c48 <find_volume+0x224>
 8013c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c38:	895b      	ldrh	r3, [r3, #10]
 8013c3a:	461a      	mov	r2, r3
 8013c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c3e:	895b      	ldrh	r3, [r3, #10]
 8013c40:	3b01      	subs	r3, #1
 8013c42:	4013      	ands	r3, r2
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d001      	beq.n	8013c4c <find_volume+0x228>
 8013c48:	230d      	movs	r3, #13
 8013c4a:	e12c      	b.n	8013ea6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c4e:	3330      	adds	r3, #48	; 0x30
 8013c50:	3311      	adds	r3, #17
 8013c52:	4618      	mov	r0, r3
 8013c54:	f7fe fcc8 	bl	80125e8 <ld_word>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	461a      	mov	r2, r3
 8013c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c5e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c62:	891b      	ldrh	r3, [r3, #8]
 8013c64:	f003 030f 	and.w	r3, r3, #15
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d001      	beq.n	8013c72 <find_volume+0x24e>
 8013c6e:	230d      	movs	r3, #13
 8013c70:	e119      	b.n	8013ea6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c74:	3330      	adds	r3, #48	; 0x30
 8013c76:	3313      	adds	r3, #19
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7fe fcb5 	bl	80125e8 <ld_word>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d106      	bne.n	8013c96 <find_volume+0x272>
 8013c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c8a:	3330      	adds	r3, #48	; 0x30
 8013c8c:	3320      	adds	r3, #32
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f7fe fcc2 	bl	8012618 <ld_dword>
 8013c94:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c98:	3330      	adds	r3, #48	; 0x30
 8013c9a:	330e      	adds	r3, #14
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f7fe fca3 	bl	80125e8 <ld_word>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013ca6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d101      	bne.n	8013cb0 <find_volume+0x28c>
 8013cac:	230d      	movs	r3, #13
 8013cae:	e0fa      	b.n	8013ea6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013cb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cb4:	4413      	add	r3, r2
 8013cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cb8:	8912      	ldrh	r2, [r2, #8]
 8013cba:	0912      	lsrs	r2, r2, #4
 8013cbc:	b292      	uxth	r2, r2
 8013cbe:	4413      	add	r3, r2
 8013cc0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc6:	429a      	cmp	r2, r3
 8013cc8:	d204      	bcs.n	8013cd4 <find_volume+0x2b0>
 8013cca:	230d      	movs	r3, #13
 8013ccc:	e0eb      	b.n	8013ea6 <find_volume+0x482>
 8013cce:	bf00      	nop
 8013cd0:	24008e84 	.word	0x24008e84
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd8:	1ad3      	subs	r3, r2, r3
 8013cda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cdc:	8952      	ldrh	r2, [r2, #10]
 8013cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ce2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d101      	bne.n	8013cee <find_volume+0x2ca>
 8013cea:	230d      	movs	r3, #13
 8013cec:	e0db      	b.n	8013ea6 <find_volume+0x482>
		fmt = FS_FAT32;
 8013cee:	2303      	movs	r3, #3
 8013cf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013cfa:	4293      	cmp	r3, r2
 8013cfc:	d802      	bhi.n	8013d04 <find_volume+0x2e0>
 8013cfe:	2302      	movs	r3, #2
 8013d00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d06:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013d0a:	4293      	cmp	r3, r2
 8013d0c:	d802      	bhi.n	8013d14 <find_volume+0x2f0>
 8013d0e:	2301      	movs	r3, #1
 8013d10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d16:	1c9a      	adds	r2, r3, #2
 8013d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d1a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8013d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013d20:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013d22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d26:	441a      	add	r2, r3
 8013d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d2a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8013d2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d30:	441a      	add	r2, r3
 8013d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d34:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8013d36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d3a:	2b03      	cmp	r3, #3
 8013d3c:	d11e      	bne.n	8013d7c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d40:	3330      	adds	r3, #48	; 0x30
 8013d42:	332a      	adds	r3, #42	; 0x2a
 8013d44:	4618      	mov	r0, r3
 8013d46:	f7fe fc4f 	bl	80125e8 <ld_word>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d001      	beq.n	8013d54 <find_volume+0x330>
 8013d50:	230d      	movs	r3, #13
 8013d52:	e0a8      	b.n	8013ea6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d56:	891b      	ldrh	r3, [r3, #8]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d001      	beq.n	8013d60 <find_volume+0x33c>
 8013d5c:	230d      	movs	r3, #13
 8013d5e:	e0a2      	b.n	8013ea6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d62:	3330      	adds	r3, #48	; 0x30
 8013d64:	332c      	adds	r3, #44	; 0x2c
 8013d66:	4618      	mov	r0, r3
 8013d68:	f7fe fc56 	bl	8012618 <ld_dword>
 8013d6c:	4602      	mov	r2, r0
 8013d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d70:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d74:	695b      	ldr	r3, [r3, #20]
 8013d76:	009b      	lsls	r3, r3, #2
 8013d78:	647b      	str	r3, [r7, #68]	; 0x44
 8013d7a:	e01f      	b.n	8013dbc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d7e:	891b      	ldrh	r3, [r3, #8]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d101      	bne.n	8013d88 <find_volume+0x364>
 8013d84:	230d      	movs	r3, #13
 8013d86:	e08e      	b.n	8013ea6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d8a:	6a1a      	ldr	r2, [r3, #32]
 8013d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d8e:	441a      	add	r2, r3
 8013d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d92:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013d94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d98:	2b02      	cmp	r3, #2
 8013d9a:	d103      	bne.n	8013da4 <find_volume+0x380>
 8013d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d9e:	695b      	ldr	r3, [r3, #20]
 8013da0:	005b      	lsls	r3, r3, #1
 8013da2:	e00a      	b.n	8013dba <find_volume+0x396>
 8013da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013da6:	695a      	ldr	r2, [r3, #20]
 8013da8:	4613      	mov	r3, r2
 8013daa:	005b      	lsls	r3, r3, #1
 8013dac:	4413      	add	r3, r2
 8013dae:	085a      	lsrs	r2, r3, #1
 8013db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013db2:	695b      	ldr	r3, [r3, #20]
 8013db4:	f003 0301 	and.w	r3, r3, #1
 8013db8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013dba:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dbe:	699a      	ldr	r2, [r3, #24]
 8013dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dc2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013dc6:	0a5b      	lsrs	r3, r3, #9
 8013dc8:	429a      	cmp	r2, r3
 8013dca:	d201      	bcs.n	8013dd0 <find_volume+0x3ac>
 8013dcc:	230d      	movs	r3, #13
 8013dce:	e06a      	b.n	8013ea6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8013dd6:	611a      	str	r2, [r3, #16]
 8013dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dda:	691a      	ldr	r2, [r3, #16]
 8013ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dde:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013de2:	2280      	movs	r2, #128	; 0x80
 8013de4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013de6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013dea:	2b03      	cmp	r3, #3
 8013dec:	d149      	bne.n	8013e82 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013df0:	3330      	adds	r3, #48	; 0x30
 8013df2:	3330      	adds	r3, #48	; 0x30
 8013df4:	4618      	mov	r0, r3
 8013df6:	f7fe fbf7 	bl	80125e8 <ld_word>
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	d140      	bne.n	8013e82 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e02:	3301      	adds	r3, #1
 8013e04:	4619      	mov	r1, r3
 8013e06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013e08:	f7fe fe9e 	bl	8012b48 <move_window>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d137      	bne.n	8013e82 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8013e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e14:	2200      	movs	r2, #0
 8013e16:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e1a:	3330      	adds	r3, #48	; 0x30
 8013e1c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7fe fbe1 	bl	80125e8 <ld_word>
 8013e26:	4603      	mov	r3, r0
 8013e28:	461a      	mov	r2, r3
 8013e2a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	d127      	bne.n	8013e82 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e34:	3330      	adds	r3, #48	; 0x30
 8013e36:	4618      	mov	r0, r3
 8013e38:	f7fe fbee 	bl	8012618 <ld_dword>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	4a1c      	ldr	r2, [pc, #112]	; (8013eb0 <find_volume+0x48c>)
 8013e40:	4293      	cmp	r3, r2
 8013e42:	d11e      	bne.n	8013e82 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e46:	3330      	adds	r3, #48	; 0x30
 8013e48:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7fe fbe3 	bl	8012618 <ld_dword>
 8013e52:	4603      	mov	r3, r0
 8013e54:	4a17      	ldr	r2, [pc, #92]	; (8013eb4 <find_volume+0x490>)
 8013e56:	4293      	cmp	r3, r2
 8013e58:	d113      	bne.n	8013e82 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e5c:	3330      	adds	r3, #48	; 0x30
 8013e5e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7fe fbd8 	bl	8012618 <ld_dword>
 8013e68:	4602      	mov	r2, r0
 8013e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e6c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e70:	3330      	adds	r3, #48	; 0x30
 8013e72:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7fe fbce 	bl	8012618 <ld_dword>
 8013e7c:	4602      	mov	r2, r0
 8013e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e80:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e84:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013e88:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013e8a:	4b0b      	ldr	r3, [pc, #44]	; (8013eb8 <find_volume+0x494>)
 8013e8c:	881b      	ldrh	r3, [r3, #0]
 8013e8e:	3301      	adds	r3, #1
 8013e90:	b29a      	uxth	r2, r3
 8013e92:	4b09      	ldr	r3, [pc, #36]	; (8013eb8 <find_volume+0x494>)
 8013e94:	801a      	strh	r2, [r3, #0]
 8013e96:	4b08      	ldr	r3, [pc, #32]	; (8013eb8 <find_volume+0x494>)
 8013e98:	881a      	ldrh	r2, [r3, #0]
 8013e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e9c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013e9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013ea0:	f7fe fdea 	bl	8012a78 <clear_lock>
#endif
	return FR_OK;
 8013ea4:	2300      	movs	r3, #0
}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	3758      	adds	r7, #88	; 0x58
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	41615252 	.word	0x41615252
 8013eb4:	61417272 	.word	0x61417272
 8013eb8:	24008e88 	.word	0x24008e88

08013ebc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b084      	sub	sp, #16
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
 8013ec4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013ec6:	2309      	movs	r3, #9
 8013ec8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d01c      	beq.n	8013f0a <validate+0x4e>
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d018      	beq.n	8013f0a <validate+0x4e>
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	781b      	ldrb	r3, [r3, #0]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d013      	beq.n	8013f0a <validate+0x4e>
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	889a      	ldrh	r2, [r3, #4]
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	88db      	ldrh	r3, [r3, #6]
 8013eec:	429a      	cmp	r2, r3
 8013eee:	d10c      	bne.n	8013f0a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	785b      	ldrb	r3, [r3, #1]
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f7fe fad8 	bl	80124ac <disk_status>
 8013efc:	4603      	mov	r3, r0
 8013efe:	f003 0301 	and.w	r3, r3, #1
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d101      	bne.n	8013f0a <validate+0x4e>
			res = FR_OK;
 8013f06:	2300      	movs	r3, #0
 8013f08:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013f0a:	7bfb      	ldrb	r3, [r7, #15]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d102      	bne.n	8013f16 <validate+0x5a>
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	e000      	b.n	8013f18 <validate+0x5c>
 8013f16:	2300      	movs	r3, #0
 8013f18:	683a      	ldr	r2, [r7, #0]
 8013f1a:	6013      	str	r3, [r2, #0]
	return res;
 8013f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f1e:	4618      	mov	r0, r3
 8013f20:	3710      	adds	r7, #16
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}
	...

08013f28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b088      	sub	sp, #32
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	60f8      	str	r0, [r7, #12]
 8013f30:	60b9      	str	r1, [r7, #8]
 8013f32:	4613      	mov	r3, r2
 8013f34:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013f3a:	f107 0310 	add.w	r3, r7, #16
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f7ff fcd5 	bl	80138ee <get_ldnumber>
 8013f44:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013f46:	69fb      	ldr	r3, [r7, #28]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	da01      	bge.n	8013f50 <f_mount+0x28>
 8013f4c:	230b      	movs	r3, #11
 8013f4e:	e02b      	b.n	8013fa8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013f50:	4a17      	ldr	r2, [pc, #92]	; (8013fb0 <f_mount+0x88>)
 8013f52:	69fb      	ldr	r3, [r7, #28]
 8013f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f58:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013f5a:	69bb      	ldr	r3, [r7, #24]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d005      	beq.n	8013f6c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013f60:	69b8      	ldr	r0, [r7, #24]
 8013f62:	f7fe fd89 	bl	8012a78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013f66:	69bb      	ldr	r3, [r7, #24]
 8013f68:	2200      	movs	r2, #0
 8013f6a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d002      	beq.n	8013f78 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	2200      	movs	r2, #0
 8013f76:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013f78:	68fa      	ldr	r2, [r7, #12]
 8013f7a:	490d      	ldr	r1, [pc, #52]	; (8013fb0 <f_mount+0x88>)
 8013f7c:	69fb      	ldr	r3, [r7, #28]
 8013f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d002      	beq.n	8013f8e <f_mount+0x66>
 8013f88:	79fb      	ldrb	r3, [r7, #7]
 8013f8a:	2b01      	cmp	r3, #1
 8013f8c:	d001      	beq.n	8013f92 <f_mount+0x6a>
 8013f8e:	2300      	movs	r3, #0
 8013f90:	e00a      	b.n	8013fa8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013f92:	f107 010c 	add.w	r1, r7, #12
 8013f96:	f107 0308 	add.w	r3, r7, #8
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f7ff fd41 	bl	8013a24 <find_volume>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fa8:	4618      	mov	r0, r3
 8013faa:	3720      	adds	r7, #32
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd80      	pop	{r7, pc}
 8013fb0:	24008e84 	.word	0x24008e84

08013fb4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b098      	sub	sp, #96	; 0x60
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	60f8      	str	r0, [r7, #12]
 8013fbc:	60b9      	str	r1, [r7, #8]
 8013fbe:	4613      	mov	r3, r2
 8013fc0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d101      	bne.n	8013fcc <f_open+0x18>
 8013fc8:	2309      	movs	r3, #9
 8013fca:	e1ad      	b.n	8014328 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013fcc:	79fb      	ldrb	r3, [r7, #7]
 8013fce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013fd2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013fd4:	79fa      	ldrb	r2, [r7, #7]
 8013fd6:	f107 0110 	add.w	r1, r7, #16
 8013fda:	f107 0308 	add.w	r3, r7, #8
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f7ff fd20 	bl	8013a24 <find_volume>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013fea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	f040 8191 	bne.w	8014316 <f_open+0x362>
		dj.obj.fs = fs;
 8013ff4:	693b      	ldr	r3, [r7, #16]
 8013ff6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013ff8:	68ba      	ldr	r2, [r7, #8]
 8013ffa:	f107 0314 	add.w	r3, r7, #20
 8013ffe:	4611      	mov	r1, r2
 8014000:	4618      	mov	r0, r3
 8014002:	f7ff fc03 	bl	801380c <follow_path>
 8014006:	4603      	mov	r3, r0
 8014008:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801400c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014010:	2b00      	cmp	r3, #0
 8014012:	d11a      	bne.n	801404a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014014:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014018:	b25b      	sxtb	r3, r3
 801401a:	2b00      	cmp	r3, #0
 801401c:	da03      	bge.n	8014026 <f_open+0x72>
				res = FR_INVALID_NAME;
 801401e:	2306      	movs	r3, #6
 8014020:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014024:	e011      	b.n	801404a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014026:	79fb      	ldrb	r3, [r7, #7]
 8014028:	f023 0301 	bic.w	r3, r3, #1
 801402c:	2b00      	cmp	r3, #0
 801402e:	bf14      	ite	ne
 8014030:	2301      	movne	r3, #1
 8014032:	2300      	moveq	r3, #0
 8014034:	b2db      	uxtb	r3, r3
 8014036:	461a      	mov	r2, r3
 8014038:	f107 0314 	add.w	r3, r7, #20
 801403c:	4611      	mov	r1, r2
 801403e:	4618      	mov	r0, r3
 8014040:	f7fe fbd2 	bl	80127e8 <chk_lock>
 8014044:	4603      	mov	r3, r0
 8014046:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801404a:	79fb      	ldrb	r3, [r7, #7]
 801404c:	f003 031c 	and.w	r3, r3, #28
 8014050:	2b00      	cmp	r3, #0
 8014052:	d07f      	beq.n	8014154 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014058:	2b00      	cmp	r3, #0
 801405a:	d017      	beq.n	801408c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801405c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014060:	2b04      	cmp	r3, #4
 8014062:	d10e      	bne.n	8014082 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014064:	f7fe fc1c 	bl	80128a0 <enq_lock>
 8014068:	4603      	mov	r3, r0
 801406a:	2b00      	cmp	r3, #0
 801406c:	d006      	beq.n	801407c <f_open+0xc8>
 801406e:	f107 0314 	add.w	r3, r7, #20
 8014072:	4618      	mov	r0, r3
 8014074:	f7ff fb03 	bl	801367e <dir_register>
 8014078:	4603      	mov	r3, r0
 801407a:	e000      	b.n	801407e <f_open+0xca>
 801407c:	2312      	movs	r3, #18
 801407e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014082:	79fb      	ldrb	r3, [r7, #7]
 8014084:	f043 0308 	orr.w	r3, r3, #8
 8014088:	71fb      	strb	r3, [r7, #7]
 801408a:	e010      	b.n	80140ae <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801408c:	7ebb      	ldrb	r3, [r7, #26]
 801408e:	f003 0311 	and.w	r3, r3, #17
 8014092:	2b00      	cmp	r3, #0
 8014094:	d003      	beq.n	801409e <f_open+0xea>
					res = FR_DENIED;
 8014096:	2307      	movs	r3, #7
 8014098:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801409c:	e007      	b.n	80140ae <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801409e:	79fb      	ldrb	r3, [r7, #7]
 80140a0:	f003 0304 	and.w	r3, r3, #4
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d002      	beq.n	80140ae <f_open+0xfa>
 80140a8:	2308      	movs	r3, #8
 80140aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80140ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d168      	bne.n	8014188 <f_open+0x1d4>
 80140b6:	79fb      	ldrb	r3, [r7, #7]
 80140b8:	f003 0308 	and.w	r3, r3, #8
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d063      	beq.n	8014188 <f_open+0x1d4>
				dw = GET_FATTIME();
 80140c0:	f7fd ffd2 	bl	8012068 <get_fattime>
 80140c4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80140c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140c8:	330e      	adds	r3, #14
 80140ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80140cc:	4618      	mov	r0, r3
 80140ce:	f7fe fae1 	bl	8012694 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80140d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140d4:	3316      	adds	r3, #22
 80140d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80140d8:	4618      	mov	r0, r3
 80140da:	f7fe fadb 	bl	8012694 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80140de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140e0:	330b      	adds	r3, #11
 80140e2:	2220      	movs	r2, #32
 80140e4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80140e6:	693b      	ldr	r3, [r7, #16]
 80140e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140ea:	4611      	mov	r1, r2
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7ff fa32 	bl	8013556 <ld_clust>
 80140f2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80140f4:	693b      	ldr	r3, [r7, #16]
 80140f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80140f8:	2200      	movs	r2, #0
 80140fa:	4618      	mov	r0, r3
 80140fc:	f7ff fa4a 	bl	8013594 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014102:	331c      	adds	r3, #28
 8014104:	2100      	movs	r1, #0
 8014106:	4618      	mov	r0, r3
 8014108:	f7fe fac4 	bl	8012694 <st_dword>
					fs->wflag = 1;
 801410c:	693b      	ldr	r3, [r7, #16]
 801410e:	2201      	movs	r2, #1
 8014110:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014114:	2b00      	cmp	r3, #0
 8014116:	d037      	beq.n	8014188 <f_open+0x1d4>
						dw = fs->winsect;
 8014118:	693b      	ldr	r3, [r7, #16]
 801411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801411c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801411e:	f107 0314 	add.w	r3, r7, #20
 8014122:	2200      	movs	r2, #0
 8014124:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014126:	4618      	mov	r0, r3
 8014128:	f7fe ff5d 	bl	8012fe6 <remove_chain>
 801412c:	4603      	mov	r3, r0
 801412e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014132:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014136:	2b00      	cmp	r3, #0
 8014138:	d126      	bne.n	8014188 <f_open+0x1d4>
							res = move_window(fs, dw);
 801413a:	693b      	ldr	r3, [r7, #16]
 801413c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801413e:	4618      	mov	r0, r3
 8014140:	f7fe fd02 	bl	8012b48 <move_window>
 8014144:	4603      	mov	r3, r0
 8014146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801414a:	693b      	ldr	r3, [r7, #16]
 801414c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801414e:	3a01      	subs	r2, #1
 8014150:	60da      	str	r2, [r3, #12]
 8014152:	e019      	b.n	8014188 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014154:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014158:	2b00      	cmp	r3, #0
 801415a:	d115      	bne.n	8014188 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801415c:	7ebb      	ldrb	r3, [r7, #26]
 801415e:	f003 0310 	and.w	r3, r3, #16
 8014162:	2b00      	cmp	r3, #0
 8014164:	d003      	beq.n	801416e <f_open+0x1ba>
					res = FR_NO_FILE;
 8014166:	2304      	movs	r3, #4
 8014168:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801416c:	e00c      	b.n	8014188 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801416e:	79fb      	ldrb	r3, [r7, #7]
 8014170:	f003 0302 	and.w	r3, r3, #2
 8014174:	2b00      	cmp	r3, #0
 8014176:	d007      	beq.n	8014188 <f_open+0x1d4>
 8014178:	7ebb      	ldrb	r3, [r7, #26]
 801417a:	f003 0301 	and.w	r3, r3, #1
 801417e:	2b00      	cmp	r3, #0
 8014180:	d002      	beq.n	8014188 <f_open+0x1d4>
						res = FR_DENIED;
 8014182:	2307      	movs	r3, #7
 8014184:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014188:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801418c:	2b00      	cmp	r3, #0
 801418e:	d128      	bne.n	80141e2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014190:	79fb      	ldrb	r3, [r7, #7]
 8014192:	f003 0308 	and.w	r3, r3, #8
 8014196:	2b00      	cmp	r3, #0
 8014198:	d003      	beq.n	80141a2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801419a:	79fb      	ldrb	r3, [r7, #7]
 801419c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141a0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80141a2:	693b      	ldr	r3, [r7, #16]
 80141a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80141aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80141b0:	79fb      	ldrb	r3, [r7, #7]
 80141b2:	f023 0301 	bic.w	r3, r3, #1
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	bf14      	ite	ne
 80141ba:	2301      	movne	r3, #1
 80141bc:	2300      	moveq	r3, #0
 80141be:	b2db      	uxtb	r3, r3
 80141c0:	461a      	mov	r2, r3
 80141c2:	f107 0314 	add.w	r3, r7, #20
 80141c6:	4611      	mov	r1, r2
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7fe fb8b 	bl	80128e4 <inc_lock>
 80141ce:	4602      	mov	r2, r0
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	691b      	ldr	r3, [r3, #16]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d102      	bne.n	80141e2 <f_open+0x22e>
 80141dc:	2302      	movs	r3, #2
 80141de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80141e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	f040 8095 	bne.w	8014316 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80141ec:	693b      	ldr	r3, [r7, #16]
 80141ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141f0:	4611      	mov	r1, r2
 80141f2:	4618      	mov	r0, r3
 80141f4:	f7ff f9af 	bl	8013556 <ld_clust>
 80141f8:	4602      	mov	r2, r0
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80141fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014200:	331c      	adds	r3, #28
 8014202:	4618      	mov	r0, r3
 8014204:	f7fe fa08 	bl	8012618 <ld_dword>
 8014208:	4602      	mov	r2, r0
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	2200      	movs	r2, #0
 8014212:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014214:	693a      	ldr	r2, [r7, #16]
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801421a:	693b      	ldr	r3, [r7, #16]
 801421c:	88da      	ldrh	r2, [r3, #6]
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	79fa      	ldrb	r2, [r7, #7]
 8014226:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	2200      	movs	r2, #0
 801422c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	2200      	movs	r2, #0
 8014232:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	2200      	movs	r2, #0
 8014238:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	3330      	adds	r3, #48	; 0x30
 801423e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014242:	2100      	movs	r1, #0
 8014244:	4618      	mov	r0, r3
 8014246:	f7fe fa72 	bl	801272e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801424a:	79fb      	ldrb	r3, [r7, #7]
 801424c:	f003 0320 	and.w	r3, r3, #32
 8014250:	2b00      	cmp	r3, #0
 8014252:	d060      	beq.n	8014316 <f_open+0x362>
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	68db      	ldr	r3, [r3, #12]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d05c      	beq.n	8014316 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	68da      	ldr	r2, [r3, #12]
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014264:	693b      	ldr	r3, [r7, #16]
 8014266:	895b      	ldrh	r3, [r3, #10]
 8014268:	025b      	lsls	r3, r3, #9
 801426a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	689b      	ldr	r3, [r3, #8]
 8014270:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	68db      	ldr	r3, [r3, #12]
 8014276:	657b      	str	r3, [r7, #84]	; 0x54
 8014278:	e016      	b.n	80142a8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801427e:	4618      	mov	r0, r3
 8014280:	f7fe fd1d 	bl	8012cbe <get_fat>
 8014284:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014286:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014288:	2b01      	cmp	r3, #1
 801428a:	d802      	bhi.n	8014292 <f_open+0x2de>
 801428c:	2302      	movs	r3, #2
 801428e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014298:	d102      	bne.n	80142a0 <f_open+0x2ec>
 801429a:	2301      	movs	r3, #1
 801429c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80142a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80142a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142a4:	1ad3      	subs	r3, r2, r3
 80142a6:	657b      	str	r3, [r7, #84]	; 0x54
 80142a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d103      	bne.n	80142b8 <f_open+0x304>
 80142b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80142b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142b4:	429a      	cmp	r2, r3
 80142b6:	d8e0      	bhi.n	801427a <f_open+0x2c6>
				}
				fp->clust = clst;
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80142bc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80142be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d127      	bne.n	8014316 <f_open+0x362>
 80142c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d022      	beq.n	8014316 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80142d0:	693b      	ldr	r3, [r7, #16]
 80142d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7fe fcd3 	bl	8012c80 <clust2sect>
 80142da:	6478      	str	r0, [r7, #68]	; 0x44
 80142dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d103      	bne.n	80142ea <f_open+0x336>
						res = FR_INT_ERR;
 80142e2:	2302      	movs	r3, #2
 80142e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80142e8:	e015      	b.n	8014316 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80142ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142ec:	0a5a      	lsrs	r2, r3, #9
 80142ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142f0:	441a      	add	r2, r3
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80142f6:	693b      	ldr	r3, [r7, #16]
 80142f8:	7858      	ldrb	r0, [r3, #1]
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	6a1a      	ldr	r2, [r3, #32]
 8014304:	2301      	movs	r3, #1
 8014306:	f7fe f911 	bl	801252c <disk_read>
 801430a:	4603      	mov	r3, r0
 801430c:	2b00      	cmp	r3, #0
 801430e:	d002      	beq.n	8014316 <f_open+0x362>
 8014310:	2301      	movs	r3, #1
 8014312:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014316:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801431a:	2b00      	cmp	r3, #0
 801431c:	d002      	beq.n	8014324 <f_open+0x370>
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	2200      	movs	r2, #0
 8014322:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014324:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014328:	4618      	mov	r0, r3
 801432a:	3760      	adds	r7, #96	; 0x60
 801432c:	46bd      	mov	sp, r7
 801432e:	bd80      	pop	{r7, pc}

08014330 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b08e      	sub	sp, #56	; 0x38
 8014334:	af00      	add	r7, sp, #0
 8014336:	60f8      	str	r0, [r7, #12]
 8014338:	60b9      	str	r1, [r7, #8]
 801433a:	607a      	str	r2, [r7, #4]
 801433c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801433e:	68bb      	ldr	r3, [r7, #8]
 8014340:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8014342:	683b      	ldr	r3, [r7, #0]
 8014344:	2200      	movs	r2, #0
 8014346:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	f107 0214 	add.w	r2, r7, #20
 801434e:	4611      	mov	r1, r2
 8014350:	4618      	mov	r0, r3
 8014352:	f7ff fdb3 	bl	8013ebc <validate>
 8014356:	4603      	mov	r3, r0
 8014358:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801435c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014360:	2b00      	cmp	r3, #0
 8014362:	d107      	bne.n	8014374 <f_read+0x44>
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	7d5b      	ldrb	r3, [r3, #21]
 8014368:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801436c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014370:	2b00      	cmp	r3, #0
 8014372:	d002      	beq.n	801437a <f_read+0x4a>
 8014374:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014378:	e115      	b.n	80145a6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	7d1b      	ldrb	r3, [r3, #20]
 801437e:	f003 0301 	and.w	r3, r3, #1
 8014382:	2b00      	cmp	r3, #0
 8014384:	d101      	bne.n	801438a <f_read+0x5a>
 8014386:	2307      	movs	r3, #7
 8014388:	e10d      	b.n	80145a6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	68da      	ldr	r2, [r3, #12]
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	699b      	ldr	r3, [r3, #24]
 8014392:	1ad3      	subs	r3, r2, r3
 8014394:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	6a3b      	ldr	r3, [r7, #32]
 801439a:	429a      	cmp	r2, r3
 801439c:	f240 80fe 	bls.w	801459c <f_read+0x26c>
 80143a0:	6a3b      	ldr	r3, [r7, #32]
 80143a2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80143a4:	e0fa      	b.n	801459c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	699b      	ldr	r3, [r3, #24]
 80143aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	f040 80c6 	bne.w	8014540 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	699b      	ldr	r3, [r3, #24]
 80143b8:	0a5b      	lsrs	r3, r3, #9
 80143ba:	697a      	ldr	r2, [r7, #20]
 80143bc:	8952      	ldrh	r2, [r2, #10]
 80143be:	3a01      	subs	r2, #1
 80143c0:	4013      	ands	r3, r2
 80143c2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80143c4:	69fb      	ldr	r3, [r7, #28]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d12f      	bne.n	801442a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	699b      	ldr	r3, [r3, #24]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d103      	bne.n	80143da <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	689b      	ldr	r3, [r3, #8]
 80143d6:	633b      	str	r3, [r7, #48]	; 0x30
 80143d8:	e013      	b.n	8014402 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d007      	beq.n	80143f2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	699b      	ldr	r3, [r3, #24]
 80143e6:	4619      	mov	r1, r3
 80143e8:	68f8      	ldr	r0, [r7, #12]
 80143ea:	f7fe fef9 	bl	80131e0 <clmt_clust>
 80143ee:	6338      	str	r0, [r7, #48]	; 0x30
 80143f0:	e007      	b.n	8014402 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80143f2:	68fa      	ldr	r2, [r7, #12]
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	69db      	ldr	r3, [r3, #28]
 80143f8:	4619      	mov	r1, r3
 80143fa:	4610      	mov	r0, r2
 80143fc:	f7fe fc5f 	bl	8012cbe <get_fat>
 8014400:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014404:	2b01      	cmp	r3, #1
 8014406:	d804      	bhi.n	8014412 <f_read+0xe2>
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	2202      	movs	r2, #2
 801440c:	755a      	strb	r2, [r3, #21]
 801440e:	2302      	movs	r3, #2
 8014410:	e0c9      	b.n	80145a6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014418:	d104      	bne.n	8014424 <f_read+0xf4>
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	2201      	movs	r2, #1
 801441e:	755a      	strb	r2, [r3, #21]
 8014420:	2301      	movs	r3, #1
 8014422:	e0c0      	b.n	80145a6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014428:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801442a:	697a      	ldr	r2, [r7, #20]
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	69db      	ldr	r3, [r3, #28]
 8014430:	4619      	mov	r1, r3
 8014432:	4610      	mov	r0, r2
 8014434:	f7fe fc24 	bl	8012c80 <clust2sect>
 8014438:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801443a:	69bb      	ldr	r3, [r7, #24]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d104      	bne.n	801444a <f_read+0x11a>
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	2202      	movs	r2, #2
 8014444:	755a      	strb	r2, [r3, #21]
 8014446:	2302      	movs	r3, #2
 8014448:	e0ad      	b.n	80145a6 <f_read+0x276>
			sect += csect;
 801444a:	69ba      	ldr	r2, [r7, #24]
 801444c:	69fb      	ldr	r3, [r7, #28]
 801444e:	4413      	add	r3, r2
 8014450:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	0a5b      	lsrs	r3, r3, #9
 8014456:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801445a:	2b00      	cmp	r3, #0
 801445c:	d039      	beq.n	80144d2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801445e:	69fa      	ldr	r2, [r7, #28]
 8014460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014462:	4413      	add	r3, r2
 8014464:	697a      	ldr	r2, [r7, #20]
 8014466:	8952      	ldrh	r2, [r2, #10]
 8014468:	4293      	cmp	r3, r2
 801446a:	d905      	bls.n	8014478 <f_read+0x148>
					cc = fs->csize - csect;
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	895b      	ldrh	r3, [r3, #10]
 8014470:	461a      	mov	r2, r3
 8014472:	69fb      	ldr	r3, [r7, #28]
 8014474:	1ad3      	subs	r3, r2, r3
 8014476:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014478:	697b      	ldr	r3, [r7, #20]
 801447a:	7858      	ldrb	r0, [r3, #1]
 801447c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801447e:	69ba      	ldr	r2, [r7, #24]
 8014480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014482:	f7fe f853 	bl	801252c <disk_read>
 8014486:	4603      	mov	r3, r0
 8014488:	2b00      	cmp	r3, #0
 801448a:	d004      	beq.n	8014496 <f_read+0x166>
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	2201      	movs	r2, #1
 8014490:	755a      	strb	r2, [r3, #21]
 8014492:	2301      	movs	r3, #1
 8014494:	e087      	b.n	80145a6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	7d1b      	ldrb	r3, [r3, #20]
 801449a:	b25b      	sxtb	r3, r3
 801449c:	2b00      	cmp	r3, #0
 801449e:	da14      	bge.n	80144ca <f_read+0x19a>
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	6a1a      	ldr	r2, [r3, #32]
 80144a4:	69bb      	ldr	r3, [r7, #24]
 80144a6:	1ad3      	subs	r3, r2, r3
 80144a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144aa:	429a      	cmp	r2, r3
 80144ac:	d90d      	bls.n	80144ca <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	6a1a      	ldr	r2, [r3, #32]
 80144b2:	69bb      	ldr	r3, [r7, #24]
 80144b4:	1ad3      	subs	r3, r2, r3
 80144b6:	025b      	lsls	r3, r3, #9
 80144b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144ba:	18d0      	adds	r0, r2, r3
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	3330      	adds	r3, #48	; 0x30
 80144c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80144c4:	4619      	mov	r1, r3
 80144c6:	f7fe f911 	bl	80126ec <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80144ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144cc:	025b      	lsls	r3, r3, #9
 80144ce:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80144d0:	e050      	b.n	8014574 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	6a1b      	ldr	r3, [r3, #32]
 80144d6:	69ba      	ldr	r2, [r7, #24]
 80144d8:	429a      	cmp	r2, r3
 80144da:	d02e      	beq.n	801453a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	7d1b      	ldrb	r3, [r3, #20]
 80144e0:	b25b      	sxtb	r3, r3
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	da18      	bge.n	8014518 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80144e6:	697b      	ldr	r3, [r7, #20]
 80144e8:	7858      	ldrb	r0, [r3, #1]
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	6a1a      	ldr	r2, [r3, #32]
 80144f4:	2301      	movs	r3, #1
 80144f6:	f7fe f839 	bl	801256c <disk_write>
 80144fa:	4603      	mov	r3, r0
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d004      	beq.n	801450a <f_read+0x1da>
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	2201      	movs	r2, #1
 8014504:	755a      	strb	r2, [r3, #21]
 8014506:	2301      	movs	r3, #1
 8014508:	e04d      	b.n	80145a6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	7d1b      	ldrb	r3, [r3, #20]
 801450e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014512:	b2da      	uxtb	r2, r3
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	7858      	ldrb	r0, [r3, #1]
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014522:	2301      	movs	r3, #1
 8014524:	69ba      	ldr	r2, [r7, #24]
 8014526:	f7fe f801 	bl	801252c <disk_read>
 801452a:	4603      	mov	r3, r0
 801452c:	2b00      	cmp	r3, #0
 801452e:	d004      	beq.n	801453a <f_read+0x20a>
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	2201      	movs	r2, #1
 8014534:	755a      	strb	r2, [r3, #21]
 8014536:	2301      	movs	r3, #1
 8014538:	e035      	b.n	80145a6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	69ba      	ldr	r2, [r7, #24]
 801453e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	699b      	ldr	r3, [r3, #24]
 8014544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014548:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801454c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801454e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	429a      	cmp	r2, r3
 8014554:	d901      	bls.n	801455a <f_read+0x22a>
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	699b      	ldr	r3, [r3, #24]
 8014564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014568:	4413      	add	r3, r2
 801456a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801456c:	4619      	mov	r1, r3
 801456e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014570:	f7fe f8bc 	bl	80126ec <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014578:	4413      	add	r3, r2
 801457a:	627b      	str	r3, [r7, #36]	; 0x24
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	699a      	ldr	r2, [r3, #24]
 8014580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014582:	441a      	add	r2, r3
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	619a      	str	r2, [r3, #24]
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	681a      	ldr	r2, [r3, #0]
 801458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801458e:	441a      	add	r2, r3
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	601a      	str	r2, [r3, #0]
 8014594:	687a      	ldr	r2, [r7, #4]
 8014596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014598:	1ad3      	subs	r3, r2, r3
 801459a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	f47f af01 	bne.w	80143a6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80145a4:	2300      	movs	r3, #0
}
 80145a6:	4618      	mov	r0, r3
 80145a8:	3738      	adds	r7, #56	; 0x38
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}

080145ae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80145ae:	b580      	push	{r7, lr}
 80145b0:	b08c      	sub	sp, #48	; 0x30
 80145b2:	af00      	add	r7, sp, #0
 80145b4:	60f8      	str	r0, [r7, #12]
 80145b6:	60b9      	str	r1, [r7, #8]
 80145b8:	607a      	str	r2, [r7, #4]
 80145ba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80145bc:	68bb      	ldr	r3, [r7, #8]
 80145be:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	2200      	movs	r2, #0
 80145c4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	f107 0210 	add.w	r2, r7, #16
 80145cc:	4611      	mov	r1, r2
 80145ce:	4618      	mov	r0, r3
 80145d0:	f7ff fc74 	bl	8013ebc <validate>
 80145d4:	4603      	mov	r3, r0
 80145d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80145da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d107      	bne.n	80145f2 <f_write+0x44>
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	7d5b      	ldrb	r3, [r3, #21]
 80145e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80145ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d002      	beq.n	80145f8 <f_write+0x4a>
 80145f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145f6:	e14b      	b.n	8014890 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	7d1b      	ldrb	r3, [r3, #20]
 80145fc:	f003 0302 	and.w	r3, r3, #2
 8014600:	2b00      	cmp	r3, #0
 8014602:	d101      	bne.n	8014608 <f_write+0x5a>
 8014604:	2307      	movs	r3, #7
 8014606:	e143      	b.n	8014890 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	699a      	ldr	r2, [r3, #24]
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	441a      	add	r2, r3
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	699b      	ldr	r3, [r3, #24]
 8014614:	429a      	cmp	r2, r3
 8014616:	f080 812d 	bcs.w	8014874 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	699b      	ldr	r3, [r3, #24]
 801461e:	43db      	mvns	r3, r3
 8014620:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014622:	e127      	b.n	8014874 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	699b      	ldr	r3, [r3, #24]
 8014628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801462c:	2b00      	cmp	r3, #0
 801462e:	f040 80e3 	bne.w	80147f8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	699b      	ldr	r3, [r3, #24]
 8014636:	0a5b      	lsrs	r3, r3, #9
 8014638:	693a      	ldr	r2, [r7, #16]
 801463a:	8952      	ldrh	r2, [r2, #10]
 801463c:	3a01      	subs	r2, #1
 801463e:	4013      	ands	r3, r2
 8014640:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014642:	69bb      	ldr	r3, [r7, #24]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d143      	bne.n	80146d0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	699b      	ldr	r3, [r3, #24]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d10c      	bne.n	801466a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	689b      	ldr	r3, [r3, #8]
 8014654:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014658:	2b00      	cmp	r3, #0
 801465a:	d11a      	bne.n	8014692 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	2100      	movs	r1, #0
 8014660:	4618      	mov	r0, r3
 8014662:	f7fe fd25 	bl	80130b0 <create_chain>
 8014666:	62b8      	str	r0, [r7, #40]	; 0x28
 8014668:	e013      	b.n	8014692 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801466e:	2b00      	cmp	r3, #0
 8014670:	d007      	beq.n	8014682 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	699b      	ldr	r3, [r3, #24]
 8014676:	4619      	mov	r1, r3
 8014678:	68f8      	ldr	r0, [r7, #12]
 801467a:	f7fe fdb1 	bl	80131e0 <clmt_clust>
 801467e:	62b8      	str	r0, [r7, #40]	; 0x28
 8014680:	e007      	b.n	8014692 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014682:	68fa      	ldr	r2, [r7, #12]
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	69db      	ldr	r3, [r3, #28]
 8014688:	4619      	mov	r1, r3
 801468a:	4610      	mov	r0, r2
 801468c:	f7fe fd10 	bl	80130b0 <create_chain>
 8014690:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014694:	2b00      	cmp	r3, #0
 8014696:	f000 80f2 	beq.w	801487e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801469c:	2b01      	cmp	r3, #1
 801469e:	d104      	bne.n	80146aa <f_write+0xfc>
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	2202      	movs	r2, #2
 80146a4:	755a      	strb	r2, [r3, #21]
 80146a6:	2302      	movs	r3, #2
 80146a8:	e0f2      	b.n	8014890 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80146aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146b0:	d104      	bne.n	80146bc <f_write+0x10e>
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	2201      	movs	r2, #1
 80146b6:	755a      	strb	r2, [r3, #21]
 80146b8:	2301      	movs	r3, #1
 80146ba:	e0e9      	b.n	8014890 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146c0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	689b      	ldr	r3, [r3, #8]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d102      	bne.n	80146d0 <f_write+0x122>
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146ce:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	7d1b      	ldrb	r3, [r3, #20]
 80146d4:	b25b      	sxtb	r3, r3
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	da18      	bge.n	801470c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80146da:	693b      	ldr	r3, [r7, #16]
 80146dc:	7858      	ldrb	r0, [r3, #1]
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	6a1a      	ldr	r2, [r3, #32]
 80146e8:	2301      	movs	r3, #1
 80146ea:	f7fd ff3f 	bl	801256c <disk_write>
 80146ee:	4603      	mov	r3, r0
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d004      	beq.n	80146fe <f_write+0x150>
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	2201      	movs	r2, #1
 80146f8:	755a      	strb	r2, [r3, #21]
 80146fa:	2301      	movs	r3, #1
 80146fc:	e0c8      	b.n	8014890 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	7d1b      	ldrb	r3, [r3, #20]
 8014702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014706:	b2da      	uxtb	r2, r3
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801470c:	693a      	ldr	r2, [r7, #16]
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	69db      	ldr	r3, [r3, #28]
 8014712:	4619      	mov	r1, r3
 8014714:	4610      	mov	r0, r2
 8014716:	f7fe fab3 	bl	8012c80 <clust2sect>
 801471a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d104      	bne.n	801472c <f_write+0x17e>
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	2202      	movs	r2, #2
 8014726:	755a      	strb	r2, [r3, #21]
 8014728:	2302      	movs	r3, #2
 801472a:	e0b1      	b.n	8014890 <f_write+0x2e2>
			sect += csect;
 801472c:	697a      	ldr	r2, [r7, #20]
 801472e:	69bb      	ldr	r3, [r7, #24]
 8014730:	4413      	add	r3, r2
 8014732:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	0a5b      	lsrs	r3, r3, #9
 8014738:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801473a:	6a3b      	ldr	r3, [r7, #32]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d03c      	beq.n	80147ba <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014740:	69ba      	ldr	r2, [r7, #24]
 8014742:	6a3b      	ldr	r3, [r7, #32]
 8014744:	4413      	add	r3, r2
 8014746:	693a      	ldr	r2, [r7, #16]
 8014748:	8952      	ldrh	r2, [r2, #10]
 801474a:	4293      	cmp	r3, r2
 801474c:	d905      	bls.n	801475a <f_write+0x1ac>
					cc = fs->csize - csect;
 801474e:	693b      	ldr	r3, [r7, #16]
 8014750:	895b      	ldrh	r3, [r3, #10]
 8014752:	461a      	mov	r2, r3
 8014754:	69bb      	ldr	r3, [r7, #24]
 8014756:	1ad3      	subs	r3, r2, r3
 8014758:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801475a:	693b      	ldr	r3, [r7, #16]
 801475c:	7858      	ldrb	r0, [r3, #1]
 801475e:	6a3b      	ldr	r3, [r7, #32]
 8014760:	697a      	ldr	r2, [r7, #20]
 8014762:	69f9      	ldr	r1, [r7, #28]
 8014764:	f7fd ff02 	bl	801256c <disk_write>
 8014768:	4603      	mov	r3, r0
 801476a:	2b00      	cmp	r3, #0
 801476c:	d004      	beq.n	8014778 <f_write+0x1ca>
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	2201      	movs	r2, #1
 8014772:	755a      	strb	r2, [r3, #21]
 8014774:	2301      	movs	r3, #1
 8014776:	e08b      	b.n	8014890 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	6a1a      	ldr	r2, [r3, #32]
 801477c:	697b      	ldr	r3, [r7, #20]
 801477e:	1ad3      	subs	r3, r2, r3
 8014780:	6a3a      	ldr	r2, [r7, #32]
 8014782:	429a      	cmp	r2, r3
 8014784:	d915      	bls.n	80147b2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	6a1a      	ldr	r2, [r3, #32]
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	1ad3      	subs	r3, r2, r3
 8014794:	025b      	lsls	r3, r3, #9
 8014796:	69fa      	ldr	r2, [r7, #28]
 8014798:	4413      	add	r3, r2
 801479a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801479e:	4619      	mov	r1, r3
 80147a0:	f7fd ffa4 	bl	80126ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	7d1b      	ldrb	r3, [r3, #20]
 80147a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80147ac:	b2da      	uxtb	r2, r3
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80147b2:	6a3b      	ldr	r3, [r7, #32]
 80147b4:	025b      	lsls	r3, r3, #9
 80147b6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80147b8:	e03f      	b.n	801483a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	6a1b      	ldr	r3, [r3, #32]
 80147be:	697a      	ldr	r2, [r7, #20]
 80147c0:	429a      	cmp	r2, r3
 80147c2:	d016      	beq.n	80147f2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	699a      	ldr	r2, [r3, #24]
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d210      	bcs.n	80147f2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80147d0:	693b      	ldr	r3, [r7, #16]
 80147d2:	7858      	ldrb	r0, [r3, #1]
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80147da:	2301      	movs	r3, #1
 80147dc:	697a      	ldr	r2, [r7, #20]
 80147de:	f7fd fea5 	bl	801252c <disk_read>
 80147e2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d004      	beq.n	80147f2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	2201      	movs	r2, #1
 80147ec:	755a      	strb	r2, [r3, #21]
 80147ee:	2301      	movs	r3, #1
 80147f0:	e04e      	b.n	8014890 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	697a      	ldr	r2, [r7, #20]
 80147f6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	699b      	ldr	r3, [r3, #24]
 80147fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014800:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014804:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	429a      	cmp	r2, r3
 801480c:	d901      	bls.n	8014812 <f_write+0x264>
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	699b      	ldr	r3, [r3, #24]
 801481c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014820:	4413      	add	r3, r2
 8014822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014824:	69f9      	ldr	r1, [r7, #28]
 8014826:	4618      	mov	r0, r3
 8014828:	f7fd ff60 	bl	80126ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	7d1b      	ldrb	r3, [r3, #20]
 8014830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014834:	b2da      	uxtb	r2, r3
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801483a:	69fa      	ldr	r2, [r7, #28]
 801483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801483e:	4413      	add	r3, r2
 8014840:	61fb      	str	r3, [r7, #28]
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	699a      	ldr	r2, [r3, #24]
 8014846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014848:	441a      	add	r2, r3
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	619a      	str	r2, [r3, #24]
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	68da      	ldr	r2, [r3, #12]
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	699b      	ldr	r3, [r3, #24]
 8014856:	429a      	cmp	r2, r3
 8014858:	bf38      	it	cc
 801485a:	461a      	movcc	r2, r3
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	60da      	str	r2, [r3, #12]
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	681a      	ldr	r2, [r3, #0]
 8014864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014866:	441a      	add	r2, r3
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	601a      	str	r2, [r3, #0]
 801486c:	687a      	ldr	r2, [r7, #4]
 801486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014870:	1ad3      	subs	r3, r2, r3
 8014872:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	2b00      	cmp	r3, #0
 8014878:	f47f aed4 	bne.w	8014624 <f_write+0x76>
 801487c:	e000      	b.n	8014880 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801487e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	7d1b      	ldrb	r3, [r3, #20]
 8014884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014888:	b2da      	uxtb	r2, r3
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801488e:	2300      	movs	r3, #0
}
 8014890:	4618      	mov	r0, r3
 8014892:	3730      	adds	r7, #48	; 0x30
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}

08014898 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b086      	sub	sp, #24
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f107 0208 	add.w	r2, r7, #8
 80148a6:	4611      	mov	r1, r2
 80148a8:	4618      	mov	r0, r3
 80148aa:	f7ff fb07 	bl	8013ebc <validate>
 80148ae:	4603      	mov	r3, r0
 80148b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80148b2:	7dfb      	ldrb	r3, [r7, #23]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d168      	bne.n	801498a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	7d1b      	ldrb	r3, [r3, #20]
 80148bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d062      	beq.n	801498a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	7d1b      	ldrb	r3, [r3, #20]
 80148c8:	b25b      	sxtb	r3, r3
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	da15      	bge.n	80148fa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80148ce:	68bb      	ldr	r3, [r7, #8]
 80148d0:	7858      	ldrb	r0, [r3, #1]
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	6a1a      	ldr	r2, [r3, #32]
 80148dc:	2301      	movs	r3, #1
 80148de:	f7fd fe45 	bl	801256c <disk_write>
 80148e2:	4603      	mov	r3, r0
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d001      	beq.n	80148ec <f_sync+0x54>
 80148e8:	2301      	movs	r3, #1
 80148ea:	e04f      	b.n	801498c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	7d1b      	ldrb	r3, [r3, #20]
 80148f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80148f4:	b2da      	uxtb	r2, r3
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80148fa:	f7fd fbb5 	bl	8012068 <get_fattime>
 80148fe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014900:	68ba      	ldr	r2, [r7, #8]
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014906:	4619      	mov	r1, r3
 8014908:	4610      	mov	r0, r2
 801490a:	f7fe f91d 	bl	8012b48 <move_window>
 801490e:	4603      	mov	r3, r0
 8014910:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014912:	7dfb      	ldrb	r3, [r7, #23]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d138      	bne.n	801498a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801491c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	330b      	adds	r3, #11
 8014922:	781a      	ldrb	r2, [r3, #0]
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	330b      	adds	r3, #11
 8014928:	f042 0220 	orr.w	r2, r2, #32
 801492c:	b2d2      	uxtb	r2, r2
 801492e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	6818      	ldr	r0, [r3, #0]
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	689b      	ldr	r3, [r3, #8]
 8014938:	461a      	mov	r2, r3
 801493a:	68f9      	ldr	r1, [r7, #12]
 801493c:	f7fe fe2a 	bl	8013594 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	f103 021c 	add.w	r2, r3, #28
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	68db      	ldr	r3, [r3, #12]
 801494a:	4619      	mov	r1, r3
 801494c:	4610      	mov	r0, r2
 801494e:	f7fd fea1 	bl	8012694 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	3316      	adds	r3, #22
 8014956:	6939      	ldr	r1, [r7, #16]
 8014958:	4618      	mov	r0, r3
 801495a:	f7fd fe9b 	bl	8012694 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	3312      	adds	r3, #18
 8014962:	2100      	movs	r1, #0
 8014964:	4618      	mov	r0, r3
 8014966:	f7fd fe7a 	bl	801265e <st_word>
					fs->wflag = 1;
 801496a:	68bb      	ldr	r3, [r7, #8]
 801496c:	2201      	movs	r2, #1
 801496e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	4618      	mov	r0, r3
 8014974:	f7fe f916 	bl	8012ba4 <sync_fs>
 8014978:	4603      	mov	r3, r0
 801497a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	7d1b      	ldrb	r3, [r3, #20]
 8014980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014984:	b2da      	uxtb	r2, r3
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801498a:	7dfb      	ldrb	r3, [r7, #23]
}
 801498c:	4618      	mov	r0, r3
 801498e:	3718      	adds	r7, #24
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}

08014994 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b084      	sub	sp, #16
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f7ff ff7b 	bl	8014898 <f_sync>
 80149a2:	4603      	mov	r3, r0
 80149a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80149a6:	7bfb      	ldrb	r3, [r7, #15]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d118      	bne.n	80149de <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	f107 0208 	add.w	r2, r7, #8
 80149b2:	4611      	mov	r1, r2
 80149b4:	4618      	mov	r0, r3
 80149b6:	f7ff fa81 	bl	8013ebc <validate>
 80149ba:	4603      	mov	r3, r0
 80149bc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80149be:	7bfb      	ldrb	r3, [r7, #15]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d10c      	bne.n	80149de <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	691b      	ldr	r3, [r3, #16]
 80149c8:	4618      	mov	r0, r3
 80149ca:	f7fe f819 	bl	8012a00 <dec_lock>
 80149ce:	4603      	mov	r3, r0
 80149d0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80149d2:	7bfb      	ldrb	r3, [r7, #15]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d102      	bne.n	80149de <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2200      	movs	r2, #0
 80149dc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80149de:	7bfb      	ldrb	r3, [r7, #15]
}
 80149e0:	4618      	mov	r0, r3
 80149e2:	3710      	adds	r7, #16
 80149e4:	46bd      	mov	sp, r7
 80149e6:	bd80      	pop	{r7, pc}

080149e8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b088      	sub	sp, #32
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	60f8      	str	r0, [r7, #12]
 80149f0:	60b9      	str	r1, [r7, #8]
 80149f2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80149f4:	2300      	movs	r3, #0
 80149f6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80149fc:	e01b      	b.n	8014a36 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80149fe:	f107 0310 	add.w	r3, r7, #16
 8014a02:	f107 0114 	add.w	r1, r7, #20
 8014a06:	2201      	movs	r2, #1
 8014a08:	6878      	ldr	r0, [r7, #4]
 8014a0a:	f7ff fc91 	bl	8014330 <f_read>
		if (rc != 1) break;
 8014a0e:	693b      	ldr	r3, [r7, #16]
 8014a10:	2b01      	cmp	r3, #1
 8014a12:	d116      	bne.n	8014a42 <f_gets+0x5a>
		c = s[0];
 8014a14:	7d3b      	ldrb	r3, [r7, #20]
 8014a16:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8014a18:	7dfb      	ldrb	r3, [r7, #23]
 8014a1a:	2b0d      	cmp	r3, #13
 8014a1c:	d100      	bne.n	8014a20 <f_gets+0x38>
 8014a1e:	e00a      	b.n	8014a36 <f_gets+0x4e>
		*p++ = c;
 8014a20:	69bb      	ldr	r3, [r7, #24]
 8014a22:	1c5a      	adds	r2, r3, #1
 8014a24:	61ba      	str	r2, [r7, #24]
 8014a26:	7dfa      	ldrb	r2, [r7, #23]
 8014a28:	701a      	strb	r2, [r3, #0]
		n++;
 8014a2a:	69fb      	ldr	r3, [r7, #28]
 8014a2c:	3301      	adds	r3, #1
 8014a2e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014a30:	7dfb      	ldrb	r3, [r7, #23]
 8014a32:	2b0a      	cmp	r3, #10
 8014a34:	d007      	beq.n	8014a46 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014a36:	68bb      	ldr	r3, [r7, #8]
 8014a38:	3b01      	subs	r3, #1
 8014a3a:	69fa      	ldr	r2, [r7, #28]
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	dbde      	blt.n	80149fe <f_gets+0x16>
 8014a40:	e002      	b.n	8014a48 <f_gets+0x60>
		if (rc != 1) break;
 8014a42:	bf00      	nop
 8014a44:	e000      	b.n	8014a48 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8014a46:	bf00      	nop
	}
	*p = 0;
 8014a48:	69bb      	ldr	r3, [r7, #24]
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8014a4e:	69fb      	ldr	r3, [r7, #28]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d001      	beq.n	8014a58 <f_gets+0x70>
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	e000      	b.n	8014a5a <f_gets+0x72>
 8014a58:	2300      	movs	r3, #0
}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	3720      	adds	r7, #32
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}
	...

08014a64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014a64:	b480      	push	{r7}
 8014a66:	b087      	sub	sp, #28
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	60f8      	str	r0, [r7, #12]
 8014a6c:	60b9      	str	r1, [r7, #8]
 8014a6e:	4613      	mov	r3, r2
 8014a70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014a72:	2301      	movs	r3, #1
 8014a74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014a76:	2300      	movs	r3, #0
 8014a78:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014a7a:	4b1f      	ldr	r3, [pc, #124]	; (8014af8 <FATFS_LinkDriverEx+0x94>)
 8014a7c:	7a5b      	ldrb	r3, [r3, #9]
 8014a7e:	b2db      	uxtb	r3, r3
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d131      	bne.n	8014ae8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014a84:	4b1c      	ldr	r3, [pc, #112]	; (8014af8 <FATFS_LinkDriverEx+0x94>)
 8014a86:	7a5b      	ldrb	r3, [r3, #9]
 8014a88:	b2db      	uxtb	r3, r3
 8014a8a:	461a      	mov	r2, r3
 8014a8c:	4b1a      	ldr	r3, [pc, #104]	; (8014af8 <FATFS_LinkDriverEx+0x94>)
 8014a8e:	2100      	movs	r1, #0
 8014a90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014a92:	4b19      	ldr	r3, [pc, #100]	; (8014af8 <FATFS_LinkDriverEx+0x94>)
 8014a94:	7a5b      	ldrb	r3, [r3, #9]
 8014a96:	b2db      	uxtb	r3, r3
 8014a98:	4a17      	ldr	r2, [pc, #92]	; (8014af8 <FATFS_LinkDriverEx+0x94>)
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	4413      	add	r3, r2
 8014a9e:	68fa      	ldr	r2, [r7, #12]
 8014aa0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014aa2:	4b15      	ldr	r3, [pc, #84]	; (8014af8 <FATFS_LinkDriverEx+0x94>)
 8014aa4:	7a5b      	ldrb	r3, [r3, #9]
 8014aa6:	b2db      	uxtb	r3, r3
 8014aa8:	461a      	mov	r2, r3
 8014aaa:	4b13      	ldr	r3, [pc, #76]	; (8014af8 <FATFS_LinkDriverEx+0x94>)
 8014aac:	4413      	add	r3, r2
 8014aae:	79fa      	ldrb	r2, [r7, #7]
 8014ab0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014ab2:	4b11      	ldr	r3, [pc, #68]	; (8014af8 <FATFS_LinkDriverEx+0x94>)
 8014ab4:	7a5b      	ldrb	r3, [r3, #9]
 8014ab6:	b2db      	uxtb	r3, r3
 8014ab8:	1c5a      	adds	r2, r3, #1
 8014aba:	b2d1      	uxtb	r1, r2
 8014abc:	4a0e      	ldr	r2, [pc, #56]	; (8014af8 <FATFS_LinkDriverEx+0x94>)
 8014abe:	7251      	strb	r1, [r2, #9]
 8014ac0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014ac2:	7dbb      	ldrb	r3, [r7, #22]
 8014ac4:	3330      	adds	r3, #48	; 0x30
 8014ac6:	b2da      	uxtb	r2, r3
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014acc:	68bb      	ldr	r3, [r7, #8]
 8014ace:	3301      	adds	r3, #1
 8014ad0:	223a      	movs	r2, #58	; 0x3a
 8014ad2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	3302      	adds	r3, #2
 8014ad8:	222f      	movs	r2, #47	; 0x2f
 8014ada:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014adc:	68bb      	ldr	r3, [r7, #8]
 8014ade:	3303      	adds	r3, #3
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8014aea:	4618      	mov	r0, r3
 8014aec:	371c      	adds	r7, #28
 8014aee:	46bd      	mov	sp, r7
 8014af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af4:	4770      	bx	lr
 8014af6:	bf00      	nop
 8014af8:	24008eac 	.word	0x24008eac

08014afc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b082      	sub	sp, #8
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
 8014b04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014b06:	2200      	movs	r2, #0
 8014b08:	6839      	ldr	r1, [r7, #0]
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f7ff ffaa 	bl	8014a64 <FATFS_LinkDriverEx>
 8014b10:	4603      	mov	r3, r0
}
 8014b12:	4618      	mov	r0, r3
 8014b14:	3708      	adds	r7, #8
 8014b16:	46bd      	mov	sp, r7
 8014b18:	bd80      	pop	{r7, pc}

08014b1a <atof>:
 8014b1a:	2100      	movs	r1, #0
 8014b1c:	f000 be36 	b.w	801578c <strtod>

08014b20 <atoi>:
 8014b20:	220a      	movs	r2, #10
 8014b22:	2100      	movs	r1, #0
 8014b24:	f000 bf1c 	b.w	8015960 <strtol>

08014b28 <__errno>:
 8014b28:	4b01      	ldr	r3, [pc, #4]	; (8014b30 <__errno+0x8>)
 8014b2a:	6818      	ldr	r0, [r3, #0]
 8014b2c:	4770      	bx	lr
 8014b2e:	bf00      	nop
 8014b30:	2400001c 	.word	0x2400001c

08014b34 <__libc_init_array>:
 8014b34:	b570      	push	{r4, r5, r6, lr}
 8014b36:	4d0d      	ldr	r5, [pc, #52]	; (8014b6c <__libc_init_array+0x38>)
 8014b38:	4c0d      	ldr	r4, [pc, #52]	; (8014b70 <__libc_init_array+0x3c>)
 8014b3a:	1b64      	subs	r4, r4, r5
 8014b3c:	10a4      	asrs	r4, r4, #2
 8014b3e:	2600      	movs	r6, #0
 8014b40:	42a6      	cmp	r6, r4
 8014b42:	d109      	bne.n	8014b58 <__libc_init_array+0x24>
 8014b44:	4d0b      	ldr	r5, [pc, #44]	; (8014b74 <__libc_init_array+0x40>)
 8014b46:	4c0c      	ldr	r4, [pc, #48]	; (8014b78 <__libc_init_array+0x44>)
 8014b48:	f003 f93e 	bl	8017dc8 <_init>
 8014b4c:	1b64      	subs	r4, r4, r5
 8014b4e:	10a4      	asrs	r4, r4, #2
 8014b50:	2600      	movs	r6, #0
 8014b52:	42a6      	cmp	r6, r4
 8014b54:	d105      	bne.n	8014b62 <__libc_init_array+0x2e>
 8014b56:	bd70      	pop	{r4, r5, r6, pc}
 8014b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b5c:	4798      	blx	r3
 8014b5e:	3601      	adds	r6, #1
 8014b60:	e7ee      	b.n	8014b40 <__libc_init_array+0xc>
 8014b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b66:	4798      	blx	r3
 8014b68:	3601      	adds	r6, #1
 8014b6a:	e7f2      	b.n	8014b52 <__libc_init_array+0x1e>
 8014b6c:	08018688 	.word	0x08018688
 8014b70:	08018688 	.word	0x08018688
 8014b74:	08018688 	.word	0x08018688
 8014b78:	0801868c 	.word	0x0801868c

08014b7c <memcpy>:
 8014b7c:	440a      	add	r2, r1
 8014b7e:	4291      	cmp	r1, r2
 8014b80:	f100 33ff 	add.w	r3, r0, #4294967295
 8014b84:	d100      	bne.n	8014b88 <memcpy+0xc>
 8014b86:	4770      	bx	lr
 8014b88:	b510      	push	{r4, lr}
 8014b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014b92:	4291      	cmp	r1, r2
 8014b94:	d1f9      	bne.n	8014b8a <memcpy+0xe>
 8014b96:	bd10      	pop	{r4, pc}

08014b98 <memset>:
 8014b98:	4402      	add	r2, r0
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	4293      	cmp	r3, r2
 8014b9e:	d100      	bne.n	8014ba2 <memset+0xa>
 8014ba0:	4770      	bx	lr
 8014ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8014ba6:	e7f9      	b.n	8014b9c <memset+0x4>

08014ba8 <siprintf>:
 8014ba8:	b40e      	push	{r1, r2, r3}
 8014baa:	b500      	push	{lr}
 8014bac:	b09c      	sub	sp, #112	; 0x70
 8014bae:	ab1d      	add	r3, sp, #116	; 0x74
 8014bb0:	9002      	str	r0, [sp, #8]
 8014bb2:	9006      	str	r0, [sp, #24]
 8014bb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014bb8:	4809      	ldr	r0, [pc, #36]	; (8014be0 <siprintf+0x38>)
 8014bba:	9107      	str	r1, [sp, #28]
 8014bbc:	9104      	str	r1, [sp, #16]
 8014bbe:	4909      	ldr	r1, [pc, #36]	; (8014be4 <siprintf+0x3c>)
 8014bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bc4:	9105      	str	r1, [sp, #20]
 8014bc6:	6800      	ldr	r0, [r0, #0]
 8014bc8:	9301      	str	r3, [sp, #4]
 8014bca:	a902      	add	r1, sp, #8
 8014bcc:	f002 f89c 	bl	8016d08 <_svfiprintf_r>
 8014bd0:	9b02      	ldr	r3, [sp, #8]
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	701a      	strb	r2, [r3, #0]
 8014bd6:	b01c      	add	sp, #112	; 0x70
 8014bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8014bdc:	b003      	add	sp, #12
 8014bde:	4770      	bx	lr
 8014be0:	2400001c 	.word	0x2400001c
 8014be4:	ffff0208 	.word	0xffff0208

08014be8 <sulp>:
 8014be8:	b570      	push	{r4, r5, r6, lr}
 8014bea:	4604      	mov	r4, r0
 8014bec:	460d      	mov	r5, r1
 8014bee:	4616      	mov	r6, r2
 8014bf0:	ec45 4b10 	vmov	d0, r4, r5
 8014bf4:	f001 fdea 	bl	80167cc <__ulp>
 8014bf8:	b17e      	cbz	r6, 8014c1a <sulp+0x32>
 8014bfa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014bfe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	dd09      	ble.n	8014c1a <sulp+0x32>
 8014c06:	051b      	lsls	r3, r3, #20
 8014c08:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8014c0c:	2000      	movs	r0, #0
 8014c0e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8014c12:	ec41 0b17 	vmov	d7, r0, r1
 8014c16:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014c1a:	bd70      	pop	{r4, r5, r6, pc}
 8014c1c:	0000      	movs	r0, r0
	...

08014c20 <_strtod_l>:
 8014c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c24:	ed2d 8b0e 	vpush	{d8-d14}
 8014c28:	b097      	sub	sp, #92	; 0x5c
 8014c2a:	461f      	mov	r7, r3
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	9312      	str	r3, [sp, #72]	; 0x48
 8014c30:	4ba1      	ldr	r3, [pc, #644]	; (8014eb8 <_strtod_l+0x298>)
 8014c32:	920d      	str	r2, [sp, #52]	; 0x34
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	9307      	str	r3, [sp, #28]
 8014c38:	4604      	mov	r4, r0
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	468b      	mov	fp, r1
 8014c3e:	f7eb fb61 	bl	8000304 <strlen>
 8014c42:	f04f 0800 	mov.w	r8, #0
 8014c46:	4605      	mov	r5, r0
 8014c48:	f04f 0900 	mov.w	r9, #0
 8014c4c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8014c50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014c52:	7813      	ldrb	r3, [r2, #0]
 8014c54:	2b2b      	cmp	r3, #43	; 0x2b
 8014c56:	d04d      	beq.n	8014cf4 <_strtod_l+0xd4>
 8014c58:	d83a      	bhi.n	8014cd0 <_strtod_l+0xb0>
 8014c5a:	2b0d      	cmp	r3, #13
 8014c5c:	d833      	bhi.n	8014cc6 <_strtod_l+0xa6>
 8014c5e:	2b08      	cmp	r3, #8
 8014c60:	d833      	bhi.n	8014cca <_strtod_l+0xaa>
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d03d      	beq.n	8014ce2 <_strtod_l+0xc2>
 8014c66:	2300      	movs	r3, #0
 8014c68:	9308      	str	r3, [sp, #32]
 8014c6a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014c6c:	7833      	ldrb	r3, [r6, #0]
 8014c6e:	2b30      	cmp	r3, #48	; 0x30
 8014c70:	f040 80b0 	bne.w	8014dd4 <_strtod_l+0x1b4>
 8014c74:	7873      	ldrb	r3, [r6, #1]
 8014c76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014c7a:	2b58      	cmp	r3, #88	; 0x58
 8014c7c:	d167      	bne.n	8014d4e <_strtod_l+0x12e>
 8014c7e:	9b08      	ldr	r3, [sp, #32]
 8014c80:	9301      	str	r3, [sp, #4]
 8014c82:	ab12      	add	r3, sp, #72	; 0x48
 8014c84:	9702      	str	r7, [sp, #8]
 8014c86:	9300      	str	r3, [sp, #0]
 8014c88:	4a8c      	ldr	r2, [pc, #560]	; (8014ebc <_strtod_l+0x29c>)
 8014c8a:	ab13      	add	r3, sp, #76	; 0x4c
 8014c8c:	a911      	add	r1, sp, #68	; 0x44
 8014c8e:	4620      	mov	r0, r4
 8014c90:	f000 ff08 	bl	8015aa4 <__gethex>
 8014c94:	f010 0507 	ands.w	r5, r0, #7
 8014c98:	4607      	mov	r7, r0
 8014c9a:	d005      	beq.n	8014ca8 <_strtod_l+0x88>
 8014c9c:	2d06      	cmp	r5, #6
 8014c9e:	d12b      	bne.n	8014cf8 <_strtod_l+0xd8>
 8014ca0:	3601      	adds	r6, #1
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	9611      	str	r6, [sp, #68]	; 0x44
 8014ca6:	9308      	str	r3, [sp, #32]
 8014ca8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	f040 854e 	bne.w	801574c <_strtod_l+0xb2c>
 8014cb0:	9b08      	ldr	r3, [sp, #32]
 8014cb2:	b1e3      	cbz	r3, 8014cee <_strtod_l+0xce>
 8014cb4:	ec49 8b17 	vmov	d7, r8, r9
 8014cb8:	eeb1 0b47 	vneg.f64	d0, d7
 8014cbc:	b017      	add	sp, #92	; 0x5c
 8014cbe:	ecbd 8b0e 	vpop	{d8-d14}
 8014cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cc6:	2b20      	cmp	r3, #32
 8014cc8:	d1cd      	bne.n	8014c66 <_strtod_l+0x46>
 8014cca:	3201      	adds	r2, #1
 8014ccc:	9211      	str	r2, [sp, #68]	; 0x44
 8014cce:	e7bf      	b.n	8014c50 <_strtod_l+0x30>
 8014cd0:	2b2d      	cmp	r3, #45	; 0x2d
 8014cd2:	d1c8      	bne.n	8014c66 <_strtod_l+0x46>
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	9308      	str	r3, [sp, #32]
 8014cd8:	1c53      	adds	r3, r2, #1
 8014cda:	9311      	str	r3, [sp, #68]	; 0x44
 8014cdc:	7853      	ldrb	r3, [r2, #1]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d1c3      	bne.n	8014c6a <_strtod_l+0x4a>
 8014ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ce4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	f040 852d 	bne.w	8015748 <_strtod_l+0xb28>
 8014cee:	ec49 8b10 	vmov	d0, r8, r9
 8014cf2:	e7e3      	b.n	8014cbc <_strtod_l+0x9c>
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	e7ee      	b.n	8014cd6 <_strtod_l+0xb6>
 8014cf8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014cfa:	b13a      	cbz	r2, 8014d0c <_strtod_l+0xec>
 8014cfc:	2135      	movs	r1, #53	; 0x35
 8014cfe:	a814      	add	r0, sp, #80	; 0x50
 8014d00:	f001 fe6c 	bl	80169dc <__copybits>
 8014d04:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014d06:	4620      	mov	r0, r4
 8014d08:	f001 fa2e 	bl	8016168 <_Bfree>
 8014d0c:	3d01      	subs	r5, #1
 8014d0e:	2d04      	cmp	r5, #4
 8014d10:	d806      	bhi.n	8014d20 <_strtod_l+0x100>
 8014d12:	e8df f005 	tbb	[pc, r5]
 8014d16:	030a      	.short	0x030a
 8014d18:	1714      	.short	0x1714
 8014d1a:	0a          	.byte	0x0a
 8014d1b:	00          	.byte	0x00
 8014d1c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8014d20:	073f      	lsls	r7, r7, #28
 8014d22:	d5c1      	bpl.n	8014ca8 <_strtod_l+0x88>
 8014d24:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8014d28:	e7be      	b.n	8014ca8 <_strtod_l+0x88>
 8014d2a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8014d2e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014d30:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014d34:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014d38:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014d3c:	e7f0      	b.n	8014d20 <_strtod_l+0x100>
 8014d3e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8014ec0 <_strtod_l+0x2a0>
 8014d42:	e7ed      	b.n	8014d20 <_strtod_l+0x100>
 8014d44:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014d48:	f04f 38ff 	mov.w	r8, #4294967295
 8014d4c:	e7e8      	b.n	8014d20 <_strtod_l+0x100>
 8014d4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d50:	1c5a      	adds	r2, r3, #1
 8014d52:	9211      	str	r2, [sp, #68]	; 0x44
 8014d54:	785b      	ldrb	r3, [r3, #1]
 8014d56:	2b30      	cmp	r3, #48	; 0x30
 8014d58:	d0f9      	beq.n	8014d4e <_strtod_l+0x12e>
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d0a4      	beq.n	8014ca8 <_strtod_l+0x88>
 8014d5e:	2301      	movs	r3, #1
 8014d60:	f04f 0a00 	mov.w	sl, #0
 8014d64:	9304      	str	r3, [sp, #16]
 8014d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d68:	930a      	str	r3, [sp, #40]	; 0x28
 8014d6a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014d6e:	f8cd a018 	str.w	sl, [sp, #24]
 8014d72:	220a      	movs	r2, #10
 8014d74:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014d76:	7807      	ldrb	r7, [r0, #0]
 8014d78:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8014d7c:	b2d9      	uxtb	r1, r3
 8014d7e:	2909      	cmp	r1, #9
 8014d80:	d92a      	bls.n	8014dd8 <_strtod_l+0x1b8>
 8014d82:	9907      	ldr	r1, [sp, #28]
 8014d84:	462a      	mov	r2, r5
 8014d86:	f002 fbc7 	bl	8017518 <strncmp>
 8014d8a:	2800      	cmp	r0, #0
 8014d8c:	d033      	beq.n	8014df6 <_strtod_l+0x1d6>
 8014d8e:	2000      	movs	r0, #0
 8014d90:	9b06      	ldr	r3, [sp, #24]
 8014d92:	463a      	mov	r2, r7
 8014d94:	4601      	mov	r1, r0
 8014d96:	4607      	mov	r7, r0
 8014d98:	2a65      	cmp	r2, #101	; 0x65
 8014d9a:	d001      	beq.n	8014da0 <_strtod_l+0x180>
 8014d9c:	2a45      	cmp	r2, #69	; 0x45
 8014d9e:	d117      	bne.n	8014dd0 <_strtod_l+0x1b0>
 8014da0:	b91b      	cbnz	r3, 8014daa <_strtod_l+0x18a>
 8014da2:	9b04      	ldr	r3, [sp, #16]
 8014da4:	4303      	orrs	r3, r0
 8014da6:	d09c      	beq.n	8014ce2 <_strtod_l+0xc2>
 8014da8:	2300      	movs	r3, #0
 8014daa:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8014dae:	f10b 0201 	add.w	r2, fp, #1
 8014db2:	9211      	str	r2, [sp, #68]	; 0x44
 8014db4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8014db8:	2a2b      	cmp	r2, #43	; 0x2b
 8014dba:	d071      	beq.n	8014ea0 <_strtod_l+0x280>
 8014dbc:	2a2d      	cmp	r2, #45	; 0x2d
 8014dbe:	d077      	beq.n	8014eb0 <_strtod_l+0x290>
 8014dc0:	f04f 0e00 	mov.w	lr, #0
 8014dc4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8014dc8:	2d09      	cmp	r5, #9
 8014dca:	d97f      	bls.n	8014ecc <_strtod_l+0x2ac>
 8014dcc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8014dd0:	2500      	movs	r5, #0
 8014dd2:	e09b      	b.n	8014f0c <_strtod_l+0x2ec>
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	e7c3      	b.n	8014d60 <_strtod_l+0x140>
 8014dd8:	9906      	ldr	r1, [sp, #24]
 8014dda:	2908      	cmp	r1, #8
 8014ddc:	bfdd      	ittte	le
 8014dde:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014de0:	fb02 3301 	mlale	r3, r2, r1, r3
 8014de4:	9309      	strle	r3, [sp, #36]	; 0x24
 8014de6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014dea:	9b06      	ldr	r3, [sp, #24]
 8014dec:	3001      	adds	r0, #1
 8014dee:	3301      	adds	r3, #1
 8014df0:	9306      	str	r3, [sp, #24]
 8014df2:	9011      	str	r0, [sp, #68]	; 0x44
 8014df4:	e7be      	b.n	8014d74 <_strtod_l+0x154>
 8014df6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014df8:	195a      	adds	r2, r3, r5
 8014dfa:	9211      	str	r2, [sp, #68]	; 0x44
 8014dfc:	5d5a      	ldrb	r2, [r3, r5]
 8014dfe:	9b06      	ldr	r3, [sp, #24]
 8014e00:	b3a3      	cbz	r3, 8014e6c <_strtod_l+0x24c>
 8014e02:	4607      	mov	r7, r0
 8014e04:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014e08:	2909      	cmp	r1, #9
 8014e0a:	d912      	bls.n	8014e32 <_strtod_l+0x212>
 8014e0c:	2101      	movs	r1, #1
 8014e0e:	e7c3      	b.n	8014d98 <_strtod_l+0x178>
 8014e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014e12:	1c5a      	adds	r2, r3, #1
 8014e14:	9211      	str	r2, [sp, #68]	; 0x44
 8014e16:	785a      	ldrb	r2, [r3, #1]
 8014e18:	3001      	adds	r0, #1
 8014e1a:	2a30      	cmp	r2, #48	; 0x30
 8014e1c:	d0f8      	beq.n	8014e10 <_strtod_l+0x1f0>
 8014e1e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014e22:	2b08      	cmp	r3, #8
 8014e24:	f200 8497 	bhi.w	8015756 <_strtod_l+0xb36>
 8014e28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8014e2c:	4607      	mov	r7, r0
 8014e2e:	2000      	movs	r0, #0
 8014e30:	4603      	mov	r3, r0
 8014e32:	3a30      	subs	r2, #48	; 0x30
 8014e34:	f100 0101 	add.w	r1, r0, #1
 8014e38:	d012      	beq.n	8014e60 <_strtod_l+0x240>
 8014e3a:	440f      	add	r7, r1
 8014e3c:	eb00 0c03 	add.w	ip, r0, r3
 8014e40:	4619      	mov	r1, r3
 8014e42:	250a      	movs	r5, #10
 8014e44:	4561      	cmp	r1, ip
 8014e46:	d113      	bne.n	8014e70 <_strtod_l+0x250>
 8014e48:	1819      	adds	r1, r3, r0
 8014e4a:	2908      	cmp	r1, #8
 8014e4c:	f103 0301 	add.w	r3, r3, #1
 8014e50:	4403      	add	r3, r0
 8014e52:	dc1c      	bgt.n	8014e8e <_strtod_l+0x26e>
 8014e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e56:	210a      	movs	r1, #10
 8014e58:	fb01 2200 	mla	r2, r1, r0, r2
 8014e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8014e5e:	2100      	movs	r1, #0
 8014e60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014e62:	1c50      	adds	r0, r2, #1
 8014e64:	9011      	str	r0, [sp, #68]	; 0x44
 8014e66:	7852      	ldrb	r2, [r2, #1]
 8014e68:	4608      	mov	r0, r1
 8014e6a:	e7cb      	b.n	8014e04 <_strtod_l+0x1e4>
 8014e6c:	9806      	ldr	r0, [sp, #24]
 8014e6e:	e7d4      	b.n	8014e1a <_strtod_l+0x1fa>
 8014e70:	2908      	cmp	r1, #8
 8014e72:	dc04      	bgt.n	8014e7e <_strtod_l+0x25e>
 8014e74:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014e76:	436e      	muls	r6, r5
 8014e78:	9609      	str	r6, [sp, #36]	; 0x24
 8014e7a:	3101      	adds	r1, #1
 8014e7c:	e7e2      	b.n	8014e44 <_strtod_l+0x224>
 8014e7e:	f101 0e01 	add.w	lr, r1, #1
 8014e82:	f1be 0f10 	cmp.w	lr, #16
 8014e86:	bfd8      	it	le
 8014e88:	fb05 fa0a 	mulle.w	sl, r5, sl
 8014e8c:	e7f5      	b.n	8014e7a <_strtod_l+0x25a>
 8014e8e:	2b10      	cmp	r3, #16
 8014e90:	bfdc      	itt	le
 8014e92:	210a      	movle	r1, #10
 8014e94:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8014e98:	e7e1      	b.n	8014e5e <_strtod_l+0x23e>
 8014e9a:	2700      	movs	r7, #0
 8014e9c:	2101      	movs	r1, #1
 8014e9e:	e780      	b.n	8014da2 <_strtod_l+0x182>
 8014ea0:	f04f 0e00 	mov.w	lr, #0
 8014ea4:	f10b 0202 	add.w	r2, fp, #2
 8014ea8:	9211      	str	r2, [sp, #68]	; 0x44
 8014eaa:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8014eae:	e789      	b.n	8014dc4 <_strtod_l+0x1a4>
 8014eb0:	f04f 0e01 	mov.w	lr, #1
 8014eb4:	e7f6      	b.n	8014ea4 <_strtod_l+0x284>
 8014eb6:	bf00      	nop
 8014eb8:	08018480 	.word	0x08018480
 8014ebc:	08018208 	.word	0x08018208
 8014ec0:	7ff00000 	.word	0x7ff00000
 8014ec4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014ec6:	1c55      	adds	r5, r2, #1
 8014ec8:	9511      	str	r5, [sp, #68]	; 0x44
 8014eca:	7852      	ldrb	r2, [r2, #1]
 8014ecc:	2a30      	cmp	r2, #48	; 0x30
 8014ece:	d0f9      	beq.n	8014ec4 <_strtod_l+0x2a4>
 8014ed0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8014ed4:	2d08      	cmp	r5, #8
 8014ed6:	f63f af7b 	bhi.w	8014dd0 <_strtod_l+0x1b0>
 8014eda:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8014ede:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014ee0:	9207      	str	r2, [sp, #28]
 8014ee2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014ee4:	1c55      	adds	r5, r2, #1
 8014ee6:	9511      	str	r5, [sp, #68]	; 0x44
 8014ee8:	7852      	ldrb	r2, [r2, #1]
 8014eea:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8014eee:	2e09      	cmp	r6, #9
 8014ef0:	d937      	bls.n	8014f62 <_strtod_l+0x342>
 8014ef2:	9e07      	ldr	r6, [sp, #28]
 8014ef4:	1bad      	subs	r5, r5, r6
 8014ef6:	2d08      	cmp	r5, #8
 8014ef8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8014efc:	dc02      	bgt.n	8014f04 <_strtod_l+0x2e4>
 8014efe:	4565      	cmp	r5, ip
 8014f00:	bfa8      	it	ge
 8014f02:	4665      	movge	r5, ip
 8014f04:	f1be 0f00 	cmp.w	lr, #0
 8014f08:	d000      	beq.n	8014f0c <_strtod_l+0x2ec>
 8014f0a:	426d      	negs	r5, r5
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d14d      	bne.n	8014fac <_strtod_l+0x38c>
 8014f10:	9b04      	ldr	r3, [sp, #16]
 8014f12:	4303      	orrs	r3, r0
 8014f14:	f47f aec8 	bne.w	8014ca8 <_strtod_l+0x88>
 8014f18:	2900      	cmp	r1, #0
 8014f1a:	f47f aee2 	bne.w	8014ce2 <_strtod_l+0xc2>
 8014f1e:	2a69      	cmp	r2, #105	; 0x69
 8014f20:	d027      	beq.n	8014f72 <_strtod_l+0x352>
 8014f22:	dc24      	bgt.n	8014f6e <_strtod_l+0x34e>
 8014f24:	2a49      	cmp	r2, #73	; 0x49
 8014f26:	d024      	beq.n	8014f72 <_strtod_l+0x352>
 8014f28:	2a4e      	cmp	r2, #78	; 0x4e
 8014f2a:	f47f aeda 	bne.w	8014ce2 <_strtod_l+0xc2>
 8014f2e:	4996      	ldr	r1, [pc, #600]	; (8015188 <_strtod_l+0x568>)
 8014f30:	a811      	add	r0, sp, #68	; 0x44
 8014f32:	f001 f80f 	bl	8015f54 <__match>
 8014f36:	2800      	cmp	r0, #0
 8014f38:	f43f aed3 	beq.w	8014ce2 <_strtod_l+0xc2>
 8014f3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f3e:	781b      	ldrb	r3, [r3, #0]
 8014f40:	2b28      	cmp	r3, #40	; 0x28
 8014f42:	d12d      	bne.n	8014fa0 <_strtod_l+0x380>
 8014f44:	4991      	ldr	r1, [pc, #580]	; (801518c <_strtod_l+0x56c>)
 8014f46:	aa14      	add	r2, sp, #80	; 0x50
 8014f48:	a811      	add	r0, sp, #68	; 0x44
 8014f4a:	f001 f817 	bl	8015f7c <__hexnan>
 8014f4e:	2805      	cmp	r0, #5
 8014f50:	d126      	bne.n	8014fa0 <_strtod_l+0x380>
 8014f52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f54:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8014f58:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014f5c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014f60:	e6a2      	b.n	8014ca8 <_strtod_l+0x88>
 8014f62:	250a      	movs	r5, #10
 8014f64:	fb05 250c 	mla	r5, r5, ip, r2
 8014f68:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8014f6c:	e7b9      	b.n	8014ee2 <_strtod_l+0x2c2>
 8014f6e:	2a6e      	cmp	r2, #110	; 0x6e
 8014f70:	e7db      	b.n	8014f2a <_strtod_l+0x30a>
 8014f72:	4987      	ldr	r1, [pc, #540]	; (8015190 <_strtod_l+0x570>)
 8014f74:	a811      	add	r0, sp, #68	; 0x44
 8014f76:	f000 ffed 	bl	8015f54 <__match>
 8014f7a:	2800      	cmp	r0, #0
 8014f7c:	f43f aeb1 	beq.w	8014ce2 <_strtod_l+0xc2>
 8014f80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f82:	4984      	ldr	r1, [pc, #528]	; (8015194 <_strtod_l+0x574>)
 8014f84:	3b01      	subs	r3, #1
 8014f86:	a811      	add	r0, sp, #68	; 0x44
 8014f88:	9311      	str	r3, [sp, #68]	; 0x44
 8014f8a:	f000 ffe3 	bl	8015f54 <__match>
 8014f8e:	b910      	cbnz	r0, 8014f96 <_strtod_l+0x376>
 8014f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f92:	3301      	adds	r3, #1
 8014f94:	9311      	str	r3, [sp, #68]	; 0x44
 8014f96:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80151a8 <_strtod_l+0x588>
 8014f9a:	f04f 0800 	mov.w	r8, #0
 8014f9e:	e683      	b.n	8014ca8 <_strtod_l+0x88>
 8014fa0:	487d      	ldr	r0, [pc, #500]	; (8015198 <_strtod_l+0x578>)
 8014fa2:	f002 faa1 	bl	80174e8 <nan>
 8014fa6:	ec59 8b10 	vmov	r8, r9, d0
 8014faa:	e67d      	b.n	8014ca8 <_strtod_l+0x88>
 8014fac:	1bea      	subs	r2, r5, r7
 8014fae:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8014fb2:	9207      	str	r2, [sp, #28]
 8014fb4:	9a06      	ldr	r2, [sp, #24]
 8014fb6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014fba:	2a00      	cmp	r2, #0
 8014fbc:	bf08      	it	eq
 8014fbe:	461a      	moveq	r2, r3
 8014fc0:	2b10      	cmp	r3, #16
 8014fc2:	9206      	str	r2, [sp, #24]
 8014fc4:	461a      	mov	r2, r3
 8014fc6:	bfa8      	it	ge
 8014fc8:	2210      	movge	r2, #16
 8014fca:	2b09      	cmp	r3, #9
 8014fcc:	ec59 8b17 	vmov	r8, r9, d7
 8014fd0:	dd0c      	ble.n	8014fec <_strtod_l+0x3cc>
 8014fd2:	4972      	ldr	r1, [pc, #456]	; (801519c <_strtod_l+0x57c>)
 8014fd4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014fd8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8014fdc:	ee06 aa90 	vmov	s13, sl
 8014fe0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8014fe4:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014fe8:	ec59 8b16 	vmov	r8, r9, d6
 8014fec:	2b0f      	cmp	r3, #15
 8014fee:	dc36      	bgt.n	801505e <_strtod_l+0x43e>
 8014ff0:	9907      	ldr	r1, [sp, #28]
 8014ff2:	2900      	cmp	r1, #0
 8014ff4:	f43f ae58 	beq.w	8014ca8 <_strtod_l+0x88>
 8014ff8:	dd23      	ble.n	8015042 <_strtod_l+0x422>
 8014ffa:	2916      	cmp	r1, #22
 8014ffc:	dc0b      	bgt.n	8015016 <_strtod_l+0x3f6>
 8014ffe:	4b67      	ldr	r3, [pc, #412]	; (801519c <_strtod_l+0x57c>)
 8015000:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8015004:	ed93 7b00 	vldr	d7, [r3]
 8015008:	ec49 8b16 	vmov	d6, r8, r9
 801500c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015010:	ec59 8b17 	vmov	r8, r9, d7
 8015014:	e648      	b.n	8014ca8 <_strtod_l+0x88>
 8015016:	9807      	ldr	r0, [sp, #28]
 8015018:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801501c:	4281      	cmp	r1, r0
 801501e:	db1e      	blt.n	801505e <_strtod_l+0x43e>
 8015020:	4a5e      	ldr	r2, [pc, #376]	; (801519c <_strtod_l+0x57c>)
 8015022:	f1c3 030f 	rsb	r3, r3, #15
 8015026:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801502a:	ed91 7b00 	vldr	d7, [r1]
 801502e:	ec49 8b16 	vmov	d6, r8, r9
 8015032:	1ac3      	subs	r3, r0, r3
 8015034:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8015038:	ee27 7b06 	vmul.f64	d7, d7, d6
 801503c:	ed92 6b00 	vldr	d6, [r2]
 8015040:	e7e4      	b.n	801500c <_strtod_l+0x3ec>
 8015042:	9907      	ldr	r1, [sp, #28]
 8015044:	3116      	adds	r1, #22
 8015046:	db0a      	blt.n	801505e <_strtod_l+0x43e>
 8015048:	4b54      	ldr	r3, [pc, #336]	; (801519c <_strtod_l+0x57c>)
 801504a:	1b7d      	subs	r5, r7, r5
 801504c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015050:	ed95 7b00 	vldr	d7, [r5]
 8015054:	ec49 8b16 	vmov	d6, r8, r9
 8015058:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801505c:	e7d8      	b.n	8015010 <_strtod_l+0x3f0>
 801505e:	9907      	ldr	r1, [sp, #28]
 8015060:	1a9a      	subs	r2, r3, r2
 8015062:	440a      	add	r2, r1
 8015064:	2a00      	cmp	r2, #0
 8015066:	dd6f      	ble.n	8015148 <_strtod_l+0x528>
 8015068:	f012 000f 	ands.w	r0, r2, #15
 801506c:	d00a      	beq.n	8015084 <_strtod_l+0x464>
 801506e:	494b      	ldr	r1, [pc, #300]	; (801519c <_strtod_l+0x57c>)
 8015070:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015074:	ed91 7b00 	vldr	d7, [r1]
 8015078:	ec49 8b16 	vmov	d6, r8, r9
 801507c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015080:	ec59 8b17 	vmov	r8, r9, d7
 8015084:	f032 020f 	bics.w	r2, r2, #15
 8015088:	d04f      	beq.n	801512a <_strtod_l+0x50a>
 801508a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801508e:	dd22      	ble.n	80150d6 <_strtod_l+0x4b6>
 8015090:	2500      	movs	r5, #0
 8015092:	462e      	mov	r6, r5
 8015094:	9506      	str	r5, [sp, #24]
 8015096:	462f      	mov	r7, r5
 8015098:	2322      	movs	r3, #34	; 0x22
 801509a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80151a8 <_strtod_l+0x588>
 801509e:	6023      	str	r3, [r4, #0]
 80150a0:	f04f 0800 	mov.w	r8, #0
 80150a4:	9b06      	ldr	r3, [sp, #24]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	f43f adfe 	beq.w	8014ca8 <_strtod_l+0x88>
 80150ac:	9912      	ldr	r1, [sp, #72]	; 0x48
 80150ae:	4620      	mov	r0, r4
 80150b0:	f001 f85a 	bl	8016168 <_Bfree>
 80150b4:	4639      	mov	r1, r7
 80150b6:	4620      	mov	r0, r4
 80150b8:	f001 f856 	bl	8016168 <_Bfree>
 80150bc:	4631      	mov	r1, r6
 80150be:	4620      	mov	r0, r4
 80150c0:	f001 f852 	bl	8016168 <_Bfree>
 80150c4:	9906      	ldr	r1, [sp, #24]
 80150c6:	4620      	mov	r0, r4
 80150c8:	f001 f84e 	bl	8016168 <_Bfree>
 80150cc:	4629      	mov	r1, r5
 80150ce:	4620      	mov	r0, r4
 80150d0:	f001 f84a 	bl	8016168 <_Bfree>
 80150d4:	e5e8      	b.n	8014ca8 <_strtod_l+0x88>
 80150d6:	2000      	movs	r0, #0
 80150d8:	ec49 8b17 	vmov	d7, r8, r9
 80150dc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80151a0 <_strtod_l+0x580>
 80150e0:	1112      	asrs	r2, r2, #4
 80150e2:	4601      	mov	r1, r0
 80150e4:	2a01      	cmp	r2, #1
 80150e6:	dc23      	bgt.n	8015130 <_strtod_l+0x510>
 80150e8:	b108      	cbz	r0, 80150ee <_strtod_l+0x4ce>
 80150ea:	ec59 8b17 	vmov	r8, r9, d7
 80150ee:	4a2c      	ldr	r2, [pc, #176]	; (80151a0 <_strtod_l+0x580>)
 80150f0:	482c      	ldr	r0, [pc, #176]	; (80151a4 <_strtod_l+0x584>)
 80150f2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80150f6:	ed92 7b00 	vldr	d7, [r2]
 80150fa:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80150fe:	ec49 8b16 	vmov	d6, r8, r9
 8015102:	4a29      	ldr	r2, [pc, #164]	; (80151a8 <_strtod_l+0x588>)
 8015104:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015108:	ee17 1a90 	vmov	r1, s15
 801510c:	400a      	ands	r2, r1
 801510e:	4282      	cmp	r2, r0
 8015110:	ec59 8b17 	vmov	r8, r9, d7
 8015114:	d8bc      	bhi.n	8015090 <_strtod_l+0x470>
 8015116:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801511a:	4282      	cmp	r2, r0
 801511c:	bf86      	itte	hi
 801511e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80151ac <_strtod_l+0x58c>
 8015122:	f04f 38ff 	movhi.w	r8, #4294967295
 8015126:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801512a:	2200      	movs	r2, #0
 801512c:	9204      	str	r2, [sp, #16]
 801512e:	e078      	b.n	8015222 <_strtod_l+0x602>
 8015130:	07d6      	lsls	r6, r2, #31
 8015132:	d504      	bpl.n	801513e <_strtod_l+0x51e>
 8015134:	ed9c 6b00 	vldr	d6, [ip]
 8015138:	2001      	movs	r0, #1
 801513a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801513e:	3101      	adds	r1, #1
 8015140:	1052      	asrs	r2, r2, #1
 8015142:	f10c 0c08 	add.w	ip, ip, #8
 8015146:	e7cd      	b.n	80150e4 <_strtod_l+0x4c4>
 8015148:	d0ef      	beq.n	801512a <_strtod_l+0x50a>
 801514a:	4252      	negs	r2, r2
 801514c:	f012 000f 	ands.w	r0, r2, #15
 8015150:	d00a      	beq.n	8015168 <_strtod_l+0x548>
 8015152:	4912      	ldr	r1, [pc, #72]	; (801519c <_strtod_l+0x57c>)
 8015154:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015158:	ed91 7b00 	vldr	d7, [r1]
 801515c:	ec49 8b16 	vmov	d6, r8, r9
 8015160:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015164:	ec59 8b17 	vmov	r8, r9, d7
 8015168:	1112      	asrs	r2, r2, #4
 801516a:	d0de      	beq.n	801512a <_strtod_l+0x50a>
 801516c:	2a1f      	cmp	r2, #31
 801516e:	dd1f      	ble.n	80151b0 <_strtod_l+0x590>
 8015170:	2500      	movs	r5, #0
 8015172:	462e      	mov	r6, r5
 8015174:	9506      	str	r5, [sp, #24]
 8015176:	462f      	mov	r7, r5
 8015178:	2322      	movs	r3, #34	; 0x22
 801517a:	f04f 0800 	mov.w	r8, #0
 801517e:	f04f 0900 	mov.w	r9, #0
 8015182:	6023      	str	r3, [r4, #0]
 8015184:	e78e      	b.n	80150a4 <_strtod_l+0x484>
 8015186:	bf00      	nop
 8015188:	08018205 	.word	0x08018205
 801518c:	0801821c 	.word	0x0801821c
 8015190:	080181fc 	.word	0x080181fc
 8015194:	080181ff 	.word	0x080181ff
 8015198:	08018307 	.word	0x08018307
 801519c:	08018518 	.word	0x08018518
 80151a0:	080184f0 	.word	0x080184f0
 80151a4:	7ca00000 	.word	0x7ca00000
 80151a8:	7ff00000 	.word	0x7ff00000
 80151ac:	7fefffff 	.word	0x7fefffff
 80151b0:	f012 0110 	ands.w	r1, r2, #16
 80151b4:	bf18      	it	ne
 80151b6:	216a      	movne	r1, #106	; 0x6a
 80151b8:	9104      	str	r1, [sp, #16]
 80151ba:	ec49 8b17 	vmov	d7, r8, r9
 80151be:	49be      	ldr	r1, [pc, #760]	; (80154b8 <_strtod_l+0x898>)
 80151c0:	2000      	movs	r0, #0
 80151c2:	07d6      	lsls	r6, r2, #31
 80151c4:	d504      	bpl.n	80151d0 <_strtod_l+0x5b0>
 80151c6:	ed91 6b00 	vldr	d6, [r1]
 80151ca:	2001      	movs	r0, #1
 80151cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80151d0:	1052      	asrs	r2, r2, #1
 80151d2:	f101 0108 	add.w	r1, r1, #8
 80151d6:	d1f4      	bne.n	80151c2 <_strtod_l+0x5a2>
 80151d8:	b108      	cbz	r0, 80151de <_strtod_l+0x5be>
 80151da:	ec59 8b17 	vmov	r8, r9, d7
 80151de:	9a04      	ldr	r2, [sp, #16]
 80151e0:	b1c2      	cbz	r2, 8015214 <_strtod_l+0x5f4>
 80151e2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80151e6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80151ea:	2a00      	cmp	r2, #0
 80151ec:	4648      	mov	r0, r9
 80151ee:	dd11      	ble.n	8015214 <_strtod_l+0x5f4>
 80151f0:	2a1f      	cmp	r2, #31
 80151f2:	f340 812e 	ble.w	8015452 <_strtod_l+0x832>
 80151f6:	2a34      	cmp	r2, #52	; 0x34
 80151f8:	bfde      	ittt	le
 80151fa:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80151fe:	f04f 32ff 	movle.w	r2, #4294967295
 8015202:	fa02 f101 	lslle.w	r1, r2, r1
 8015206:	f04f 0800 	mov.w	r8, #0
 801520a:	bfcc      	ite	gt
 801520c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8015210:	ea01 0900 	andle.w	r9, r1, r0
 8015214:	ec49 8b17 	vmov	d7, r8, r9
 8015218:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801521c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015220:	d0a6      	beq.n	8015170 <_strtod_l+0x550>
 8015222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015224:	9200      	str	r2, [sp, #0]
 8015226:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015228:	9a06      	ldr	r2, [sp, #24]
 801522a:	4620      	mov	r0, r4
 801522c:	f001 f804 	bl	8016238 <__s2b>
 8015230:	9006      	str	r0, [sp, #24]
 8015232:	2800      	cmp	r0, #0
 8015234:	f43f af2c 	beq.w	8015090 <_strtod_l+0x470>
 8015238:	9b07      	ldr	r3, [sp, #28]
 801523a:	1b7d      	subs	r5, r7, r5
 801523c:	2b00      	cmp	r3, #0
 801523e:	bfb4      	ite	lt
 8015240:	462b      	movlt	r3, r5
 8015242:	2300      	movge	r3, #0
 8015244:	9309      	str	r3, [sp, #36]	; 0x24
 8015246:	9b07      	ldr	r3, [sp, #28]
 8015248:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8015498 <_strtod_l+0x878>
 801524c:	ed9f ab94 	vldr	d10, [pc, #592]	; 80154a0 <_strtod_l+0x880>
 8015250:	ed9f bb95 	vldr	d11, [pc, #596]	; 80154a8 <_strtod_l+0x888>
 8015254:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015258:	2500      	movs	r5, #0
 801525a:	930c      	str	r3, [sp, #48]	; 0x30
 801525c:	462e      	mov	r6, r5
 801525e:	9b06      	ldr	r3, [sp, #24]
 8015260:	4620      	mov	r0, r4
 8015262:	6859      	ldr	r1, [r3, #4]
 8015264:	f000 ff40 	bl	80160e8 <_Balloc>
 8015268:	4607      	mov	r7, r0
 801526a:	2800      	cmp	r0, #0
 801526c:	f43f af14 	beq.w	8015098 <_strtod_l+0x478>
 8015270:	9b06      	ldr	r3, [sp, #24]
 8015272:	691a      	ldr	r2, [r3, #16]
 8015274:	3202      	adds	r2, #2
 8015276:	f103 010c 	add.w	r1, r3, #12
 801527a:	0092      	lsls	r2, r2, #2
 801527c:	300c      	adds	r0, #12
 801527e:	f7ff fc7d 	bl	8014b7c <memcpy>
 8015282:	ec49 8b10 	vmov	d0, r8, r9
 8015286:	aa14      	add	r2, sp, #80	; 0x50
 8015288:	a913      	add	r1, sp, #76	; 0x4c
 801528a:	4620      	mov	r0, r4
 801528c:	f001 fb1a 	bl	80168c4 <__d2b>
 8015290:	ec49 8b18 	vmov	d8, r8, r9
 8015294:	9012      	str	r0, [sp, #72]	; 0x48
 8015296:	2800      	cmp	r0, #0
 8015298:	f43f aefe 	beq.w	8015098 <_strtod_l+0x478>
 801529c:	2101      	movs	r1, #1
 801529e:	4620      	mov	r0, r4
 80152a0:	f001 f864 	bl	801636c <__i2b>
 80152a4:	4606      	mov	r6, r0
 80152a6:	2800      	cmp	r0, #0
 80152a8:	f43f aef6 	beq.w	8015098 <_strtod_l+0x478>
 80152ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80152ae:	9914      	ldr	r1, [sp, #80]	; 0x50
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	bfab      	itete	ge
 80152b4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80152b6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80152b8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80152bc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80152c0:	bfac      	ite	ge
 80152c2:	eb03 0b02 	addge.w	fp, r3, r2
 80152c6:	eba2 0a03 	sublt.w	sl, r2, r3
 80152ca:	9a04      	ldr	r2, [sp, #16]
 80152cc:	1a9b      	subs	r3, r3, r2
 80152ce:	440b      	add	r3, r1
 80152d0:	4a7a      	ldr	r2, [pc, #488]	; (80154bc <_strtod_l+0x89c>)
 80152d2:	3b01      	subs	r3, #1
 80152d4:	4293      	cmp	r3, r2
 80152d6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80152da:	f280 80cd 	bge.w	8015478 <_strtod_l+0x858>
 80152de:	1ad2      	subs	r2, r2, r3
 80152e0:	2a1f      	cmp	r2, #31
 80152e2:	eba1 0102 	sub.w	r1, r1, r2
 80152e6:	f04f 0001 	mov.w	r0, #1
 80152ea:	f300 80b9 	bgt.w	8015460 <_strtod_l+0x840>
 80152ee:	fa00 f302 	lsl.w	r3, r0, r2
 80152f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80152f4:	2300      	movs	r3, #0
 80152f6:	930a      	str	r3, [sp, #40]	; 0x28
 80152f8:	eb0b 0301 	add.w	r3, fp, r1
 80152fc:	9a04      	ldr	r2, [sp, #16]
 80152fe:	459b      	cmp	fp, r3
 8015300:	448a      	add	sl, r1
 8015302:	4492      	add	sl, r2
 8015304:	465a      	mov	r2, fp
 8015306:	bfa8      	it	ge
 8015308:	461a      	movge	r2, r3
 801530a:	4552      	cmp	r2, sl
 801530c:	bfa8      	it	ge
 801530e:	4652      	movge	r2, sl
 8015310:	2a00      	cmp	r2, #0
 8015312:	bfc2      	ittt	gt
 8015314:	1a9b      	subgt	r3, r3, r2
 8015316:	ebaa 0a02 	subgt.w	sl, sl, r2
 801531a:	ebab 0b02 	subgt.w	fp, fp, r2
 801531e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015320:	2a00      	cmp	r2, #0
 8015322:	dd18      	ble.n	8015356 <_strtod_l+0x736>
 8015324:	4631      	mov	r1, r6
 8015326:	4620      	mov	r0, r4
 8015328:	930f      	str	r3, [sp, #60]	; 0x3c
 801532a:	f001 f8df 	bl	80164ec <__pow5mult>
 801532e:	4606      	mov	r6, r0
 8015330:	2800      	cmp	r0, #0
 8015332:	f43f aeb1 	beq.w	8015098 <_strtod_l+0x478>
 8015336:	4601      	mov	r1, r0
 8015338:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801533a:	4620      	mov	r0, r4
 801533c:	f001 f82c 	bl	8016398 <__multiply>
 8015340:	900e      	str	r0, [sp, #56]	; 0x38
 8015342:	2800      	cmp	r0, #0
 8015344:	f43f aea8 	beq.w	8015098 <_strtod_l+0x478>
 8015348:	9912      	ldr	r1, [sp, #72]	; 0x48
 801534a:	4620      	mov	r0, r4
 801534c:	f000 ff0c 	bl	8016168 <_Bfree>
 8015350:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015352:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015354:	9212      	str	r2, [sp, #72]	; 0x48
 8015356:	2b00      	cmp	r3, #0
 8015358:	f300 8093 	bgt.w	8015482 <_strtod_l+0x862>
 801535c:	9b07      	ldr	r3, [sp, #28]
 801535e:	2b00      	cmp	r3, #0
 8015360:	dd08      	ble.n	8015374 <_strtod_l+0x754>
 8015362:	4639      	mov	r1, r7
 8015364:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015366:	4620      	mov	r0, r4
 8015368:	f001 f8c0 	bl	80164ec <__pow5mult>
 801536c:	4607      	mov	r7, r0
 801536e:	2800      	cmp	r0, #0
 8015370:	f43f ae92 	beq.w	8015098 <_strtod_l+0x478>
 8015374:	f1ba 0f00 	cmp.w	sl, #0
 8015378:	dd08      	ble.n	801538c <_strtod_l+0x76c>
 801537a:	4639      	mov	r1, r7
 801537c:	4652      	mov	r2, sl
 801537e:	4620      	mov	r0, r4
 8015380:	f001 f90e 	bl	80165a0 <__lshift>
 8015384:	4607      	mov	r7, r0
 8015386:	2800      	cmp	r0, #0
 8015388:	f43f ae86 	beq.w	8015098 <_strtod_l+0x478>
 801538c:	f1bb 0f00 	cmp.w	fp, #0
 8015390:	dd08      	ble.n	80153a4 <_strtod_l+0x784>
 8015392:	4631      	mov	r1, r6
 8015394:	465a      	mov	r2, fp
 8015396:	4620      	mov	r0, r4
 8015398:	f001 f902 	bl	80165a0 <__lshift>
 801539c:	4606      	mov	r6, r0
 801539e:	2800      	cmp	r0, #0
 80153a0:	f43f ae7a 	beq.w	8015098 <_strtod_l+0x478>
 80153a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80153a6:	463a      	mov	r2, r7
 80153a8:	4620      	mov	r0, r4
 80153aa:	f001 f985 	bl	80166b8 <__mdiff>
 80153ae:	4605      	mov	r5, r0
 80153b0:	2800      	cmp	r0, #0
 80153b2:	f43f ae71 	beq.w	8015098 <_strtod_l+0x478>
 80153b6:	2300      	movs	r3, #0
 80153b8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80153bc:	60c3      	str	r3, [r0, #12]
 80153be:	4631      	mov	r1, r6
 80153c0:	f001 f95e 	bl	8016680 <__mcmp>
 80153c4:	2800      	cmp	r0, #0
 80153c6:	da7d      	bge.n	80154c4 <_strtod_l+0x8a4>
 80153c8:	ea5a 0308 	orrs.w	r3, sl, r8
 80153cc:	f040 80a3 	bne.w	8015516 <_strtod_l+0x8f6>
 80153d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	f040 809e 	bne.w	8015516 <_strtod_l+0x8f6>
 80153da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80153de:	0d1b      	lsrs	r3, r3, #20
 80153e0:	051b      	lsls	r3, r3, #20
 80153e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80153e6:	f240 8096 	bls.w	8015516 <_strtod_l+0x8f6>
 80153ea:	696b      	ldr	r3, [r5, #20]
 80153ec:	b91b      	cbnz	r3, 80153f6 <_strtod_l+0x7d6>
 80153ee:	692b      	ldr	r3, [r5, #16]
 80153f0:	2b01      	cmp	r3, #1
 80153f2:	f340 8090 	ble.w	8015516 <_strtod_l+0x8f6>
 80153f6:	4629      	mov	r1, r5
 80153f8:	2201      	movs	r2, #1
 80153fa:	4620      	mov	r0, r4
 80153fc:	f001 f8d0 	bl	80165a0 <__lshift>
 8015400:	4631      	mov	r1, r6
 8015402:	4605      	mov	r5, r0
 8015404:	f001 f93c 	bl	8016680 <__mcmp>
 8015408:	2800      	cmp	r0, #0
 801540a:	f340 8084 	ble.w	8015516 <_strtod_l+0x8f6>
 801540e:	9904      	ldr	r1, [sp, #16]
 8015410:	4a2b      	ldr	r2, [pc, #172]	; (80154c0 <_strtod_l+0x8a0>)
 8015412:	464b      	mov	r3, r9
 8015414:	2900      	cmp	r1, #0
 8015416:	f000 809d 	beq.w	8015554 <_strtod_l+0x934>
 801541a:	ea02 0109 	and.w	r1, r2, r9
 801541e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015422:	f300 8097 	bgt.w	8015554 <_strtod_l+0x934>
 8015426:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801542a:	f77f aea5 	ble.w	8015178 <_strtod_l+0x558>
 801542e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80154b0 <_strtod_l+0x890>
 8015432:	ec49 8b16 	vmov	d6, r8, r9
 8015436:	ee26 7b07 	vmul.f64	d7, d6, d7
 801543a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801543e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015442:	4313      	orrs	r3, r2
 8015444:	bf08      	it	eq
 8015446:	2322      	moveq	r3, #34	; 0x22
 8015448:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801544c:	bf08      	it	eq
 801544e:	6023      	streq	r3, [r4, #0]
 8015450:	e62c      	b.n	80150ac <_strtod_l+0x48c>
 8015452:	f04f 31ff 	mov.w	r1, #4294967295
 8015456:	fa01 f202 	lsl.w	r2, r1, r2
 801545a:	ea02 0808 	and.w	r8, r2, r8
 801545e:	e6d9      	b.n	8015214 <_strtod_l+0x5f4>
 8015460:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8015464:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8015468:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801546c:	33e2      	adds	r3, #226	; 0xe2
 801546e:	fa00 f303 	lsl.w	r3, r0, r3
 8015472:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8015476:	e73f      	b.n	80152f8 <_strtod_l+0x6d8>
 8015478:	2200      	movs	r2, #0
 801547a:	2301      	movs	r3, #1
 801547c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015480:	e73a      	b.n	80152f8 <_strtod_l+0x6d8>
 8015482:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015484:	461a      	mov	r2, r3
 8015486:	4620      	mov	r0, r4
 8015488:	f001 f88a 	bl	80165a0 <__lshift>
 801548c:	9012      	str	r0, [sp, #72]	; 0x48
 801548e:	2800      	cmp	r0, #0
 8015490:	f47f af64 	bne.w	801535c <_strtod_l+0x73c>
 8015494:	e600      	b.n	8015098 <_strtod_l+0x478>
 8015496:	bf00      	nop
 8015498:	94a03595 	.word	0x94a03595
 801549c:	3fcfffff 	.word	0x3fcfffff
 80154a0:	94a03595 	.word	0x94a03595
 80154a4:	3fdfffff 	.word	0x3fdfffff
 80154a8:	35afe535 	.word	0x35afe535
 80154ac:	3fe00000 	.word	0x3fe00000
 80154b0:	00000000 	.word	0x00000000
 80154b4:	39500000 	.word	0x39500000
 80154b8:	08018230 	.word	0x08018230
 80154bc:	fffffc02 	.word	0xfffffc02
 80154c0:	7ff00000 	.word	0x7ff00000
 80154c4:	46cb      	mov	fp, r9
 80154c6:	d15f      	bne.n	8015588 <_strtod_l+0x968>
 80154c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80154cc:	f1ba 0f00 	cmp.w	sl, #0
 80154d0:	d02a      	beq.n	8015528 <_strtod_l+0x908>
 80154d2:	4aa7      	ldr	r2, [pc, #668]	; (8015770 <_strtod_l+0xb50>)
 80154d4:	4293      	cmp	r3, r2
 80154d6:	d12b      	bne.n	8015530 <_strtod_l+0x910>
 80154d8:	9b04      	ldr	r3, [sp, #16]
 80154da:	4642      	mov	r2, r8
 80154dc:	b1fb      	cbz	r3, 801551e <_strtod_l+0x8fe>
 80154de:	4ba5      	ldr	r3, [pc, #660]	; (8015774 <_strtod_l+0xb54>)
 80154e0:	ea09 0303 	and.w	r3, r9, r3
 80154e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80154e8:	f04f 31ff 	mov.w	r1, #4294967295
 80154ec:	d81a      	bhi.n	8015524 <_strtod_l+0x904>
 80154ee:	0d1b      	lsrs	r3, r3, #20
 80154f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80154f4:	fa01 f303 	lsl.w	r3, r1, r3
 80154f8:	429a      	cmp	r2, r3
 80154fa:	d119      	bne.n	8015530 <_strtod_l+0x910>
 80154fc:	4b9e      	ldr	r3, [pc, #632]	; (8015778 <_strtod_l+0xb58>)
 80154fe:	459b      	cmp	fp, r3
 8015500:	d102      	bne.n	8015508 <_strtod_l+0x8e8>
 8015502:	3201      	adds	r2, #1
 8015504:	f43f adc8 	beq.w	8015098 <_strtod_l+0x478>
 8015508:	4b9a      	ldr	r3, [pc, #616]	; (8015774 <_strtod_l+0xb54>)
 801550a:	ea0b 0303 	and.w	r3, fp, r3
 801550e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8015512:	f04f 0800 	mov.w	r8, #0
 8015516:	9b04      	ldr	r3, [sp, #16]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d188      	bne.n	801542e <_strtod_l+0x80e>
 801551c:	e5c6      	b.n	80150ac <_strtod_l+0x48c>
 801551e:	f04f 33ff 	mov.w	r3, #4294967295
 8015522:	e7e9      	b.n	80154f8 <_strtod_l+0x8d8>
 8015524:	460b      	mov	r3, r1
 8015526:	e7e7      	b.n	80154f8 <_strtod_l+0x8d8>
 8015528:	ea53 0308 	orrs.w	r3, r3, r8
 801552c:	f43f af6f 	beq.w	801540e <_strtod_l+0x7ee>
 8015530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015532:	b1cb      	cbz	r3, 8015568 <_strtod_l+0x948>
 8015534:	ea13 0f0b 	tst.w	r3, fp
 8015538:	d0ed      	beq.n	8015516 <_strtod_l+0x8f6>
 801553a:	9a04      	ldr	r2, [sp, #16]
 801553c:	4640      	mov	r0, r8
 801553e:	4649      	mov	r1, r9
 8015540:	f1ba 0f00 	cmp.w	sl, #0
 8015544:	d014      	beq.n	8015570 <_strtod_l+0x950>
 8015546:	f7ff fb4f 	bl	8014be8 <sulp>
 801554a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801554e:	ec59 8b17 	vmov	r8, r9, d7
 8015552:	e7e0      	b.n	8015516 <_strtod_l+0x8f6>
 8015554:	4013      	ands	r3, r2
 8015556:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801555a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801555e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8015562:	f04f 38ff 	mov.w	r8, #4294967295
 8015566:	e7d6      	b.n	8015516 <_strtod_l+0x8f6>
 8015568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801556a:	ea13 0f08 	tst.w	r3, r8
 801556e:	e7e3      	b.n	8015538 <_strtod_l+0x918>
 8015570:	f7ff fb3a 	bl	8014be8 <sulp>
 8015574:	ee38 0b40 	vsub.f64	d0, d8, d0
 8015578:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801557c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015580:	ec59 8b10 	vmov	r8, r9, d0
 8015584:	d1c7      	bne.n	8015516 <_strtod_l+0x8f6>
 8015586:	e5f7      	b.n	8015178 <_strtod_l+0x558>
 8015588:	4631      	mov	r1, r6
 801558a:	4628      	mov	r0, r5
 801558c:	f001 f9f6 	bl	801697c <__ratio>
 8015590:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8015594:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801559c:	d865      	bhi.n	801566a <_strtod_l+0xa4a>
 801559e:	f1ba 0f00 	cmp.w	sl, #0
 80155a2:	d042      	beq.n	801562a <_strtod_l+0xa0a>
 80155a4:	4b75      	ldr	r3, [pc, #468]	; (801577c <_strtod_l+0xb5c>)
 80155a6:	2200      	movs	r2, #0
 80155a8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80155ac:	4871      	ldr	r0, [pc, #452]	; (8015774 <_strtod_l+0xb54>)
 80155ae:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8015788 <_strtod_l+0xb68>
 80155b2:	ea0b 0100 	and.w	r1, fp, r0
 80155b6:	4561      	cmp	r1, ip
 80155b8:	f040 808e 	bne.w	80156d8 <_strtod_l+0xab8>
 80155bc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80155c0:	ec49 8b10 	vmov	d0, r8, r9
 80155c4:	ec43 2b1c 	vmov	d12, r2, r3
 80155c8:	910a      	str	r1, [sp, #40]	; 0x28
 80155ca:	f001 f8ff 	bl	80167cc <__ulp>
 80155ce:	ec49 8b1e 	vmov	d14, r8, r9
 80155d2:	4868      	ldr	r0, [pc, #416]	; (8015774 <_strtod_l+0xb54>)
 80155d4:	eeac eb00 	vfma.f64	d14, d12, d0
 80155d8:	ee1e 3a90 	vmov	r3, s29
 80155dc:	4a68      	ldr	r2, [pc, #416]	; (8015780 <_strtod_l+0xb60>)
 80155de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80155e0:	4018      	ands	r0, r3
 80155e2:	4290      	cmp	r0, r2
 80155e4:	ec59 8b1e 	vmov	r8, r9, d14
 80155e8:	d94e      	bls.n	8015688 <_strtod_l+0xa68>
 80155ea:	ee18 3a90 	vmov	r3, s17
 80155ee:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80155f2:	4293      	cmp	r3, r2
 80155f4:	d104      	bne.n	8015600 <_strtod_l+0x9e0>
 80155f6:	ee18 3a10 	vmov	r3, s16
 80155fa:	3301      	adds	r3, #1
 80155fc:	f43f ad4c 	beq.w	8015098 <_strtod_l+0x478>
 8015600:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8015778 <_strtod_l+0xb58>
 8015604:	f04f 38ff 	mov.w	r8, #4294967295
 8015608:	9912      	ldr	r1, [sp, #72]	; 0x48
 801560a:	4620      	mov	r0, r4
 801560c:	f000 fdac 	bl	8016168 <_Bfree>
 8015610:	4639      	mov	r1, r7
 8015612:	4620      	mov	r0, r4
 8015614:	f000 fda8 	bl	8016168 <_Bfree>
 8015618:	4631      	mov	r1, r6
 801561a:	4620      	mov	r0, r4
 801561c:	f000 fda4 	bl	8016168 <_Bfree>
 8015620:	4629      	mov	r1, r5
 8015622:	4620      	mov	r0, r4
 8015624:	f000 fda0 	bl	8016168 <_Bfree>
 8015628:	e619      	b.n	801525e <_strtod_l+0x63e>
 801562a:	f1b8 0f00 	cmp.w	r8, #0
 801562e:	d112      	bne.n	8015656 <_strtod_l+0xa36>
 8015630:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015634:	b9b3      	cbnz	r3, 8015664 <_strtod_l+0xa44>
 8015636:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801563a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801563e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015642:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8015646:	bf58      	it	pl
 8015648:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801564c:	eeb1 7b4d 	vneg.f64	d7, d13
 8015650:	ec53 2b17 	vmov	r2, r3, d7
 8015654:	e7aa      	b.n	80155ac <_strtod_l+0x98c>
 8015656:	f1b8 0f01 	cmp.w	r8, #1
 801565a:	d103      	bne.n	8015664 <_strtod_l+0xa44>
 801565c:	f1b9 0f00 	cmp.w	r9, #0
 8015660:	f43f ad8a 	beq.w	8015178 <_strtod_l+0x558>
 8015664:	4b47      	ldr	r3, [pc, #284]	; (8015784 <_strtod_l+0xb64>)
 8015666:	2200      	movs	r2, #0
 8015668:	e79e      	b.n	80155a8 <_strtod_l+0x988>
 801566a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801566e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8015672:	f1ba 0f00 	cmp.w	sl, #0
 8015676:	d104      	bne.n	8015682 <_strtod_l+0xa62>
 8015678:	eeb1 7b4d 	vneg.f64	d7, d13
 801567c:	ec53 2b17 	vmov	r2, r3, d7
 8015680:	e794      	b.n	80155ac <_strtod_l+0x98c>
 8015682:	eeb0 7b4d 	vmov.f64	d7, d13
 8015686:	e7f9      	b.n	801567c <_strtod_l+0xa5c>
 8015688:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801568c:	9b04      	ldr	r3, [sp, #16]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d1ba      	bne.n	8015608 <_strtod_l+0x9e8>
 8015692:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015696:	0d1b      	lsrs	r3, r3, #20
 8015698:	051b      	lsls	r3, r3, #20
 801569a:	4299      	cmp	r1, r3
 801569c:	d1b4      	bne.n	8015608 <_strtod_l+0x9e8>
 801569e:	ec51 0b1d 	vmov	r0, r1, d13
 80156a2:	f7eb f861 	bl	8000768 <__aeabi_d2lz>
 80156a6:	f7eb f819 	bl	80006dc <__aeabi_l2d>
 80156aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80156ae:	ec41 0b17 	vmov	d7, r0, r1
 80156b2:	ea43 0308 	orr.w	r3, r3, r8
 80156b6:	ea53 030a 	orrs.w	r3, r3, sl
 80156ba:	ee3d db47 	vsub.f64	d13, d13, d7
 80156be:	d03c      	beq.n	801573a <_strtod_l+0xb1a>
 80156c0:	eeb4 dbca 	vcmpe.f64	d13, d10
 80156c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156c8:	f53f acf0 	bmi.w	80150ac <_strtod_l+0x48c>
 80156cc:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80156d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156d4:	dd98      	ble.n	8015608 <_strtod_l+0x9e8>
 80156d6:	e4e9      	b.n	80150ac <_strtod_l+0x48c>
 80156d8:	9804      	ldr	r0, [sp, #16]
 80156da:	b1f0      	cbz	r0, 801571a <_strtod_l+0xafa>
 80156dc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80156e0:	d81b      	bhi.n	801571a <_strtod_l+0xafa>
 80156e2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8015768 <_strtod_l+0xb48>
 80156e6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80156ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156ee:	d811      	bhi.n	8015714 <_strtod_l+0xaf4>
 80156f0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80156f4:	ee1d 3a10 	vmov	r3, s26
 80156f8:	2b01      	cmp	r3, #1
 80156fa:	bf38      	it	cc
 80156fc:	2301      	movcc	r3, #1
 80156fe:	ee0d 3a10 	vmov	s26, r3
 8015702:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8015706:	f1ba 0f00 	cmp.w	sl, #0
 801570a:	d113      	bne.n	8015734 <_strtod_l+0xb14>
 801570c:	eeb1 7b4d 	vneg.f64	d7, d13
 8015710:	ec53 2b17 	vmov	r2, r3, d7
 8015714:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8015718:	1a43      	subs	r3, r0, r1
 801571a:	eeb0 0b48 	vmov.f64	d0, d8
 801571e:	ec43 2b1c 	vmov	d12, r2, r3
 8015722:	910a      	str	r1, [sp, #40]	; 0x28
 8015724:	f001 f852 	bl	80167cc <__ulp>
 8015728:	990a      	ldr	r1, [sp, #40]	; 0x28
 801572a:	eeac 8b00 	vfma.f64	d8, d12, d0
 801572e:	ec59 8b18 	vmov	r8, r9, d8
 8015732:	e7ab      	b.n	801568c <_strtod_l+0xa6c>
 8015734:	eeb0 7b4d 	vmov.f64	d7, d13
 8015738:	e7ea      	b.n	8015710 <_strtod_l+0xaf0>
 801573a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801573e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015742:	f57f af61 	bpl.w	8015608 <_strtod_l+0x9e8>
 8015746:	e4b1      	b.n	80150ac <_strtod_l+0x48c>
 8015748:	2300      	movs	r3, #0
 801574a:	9308      	str	r3, [sp, #32]
 801574c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801574e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015750:	6013      	str	r3, [r2, #0]
 8015752:	f7ff baad 	b.w	8014cb0 <_strtod_l+0x90>
 8015756:	2a65      	cmp	r2, #101	; 0x65
 8015758:	f43f ab9f 	beq.w	8014e9a <_strtod_l+0x27a>
 801575c:	2a45      	cmp	r2, #69	; 0x45
 801575e:	f43f ab9c 	beq.w	8014e9a <_strtod_l+0x27a>
 8015762:	2101      	movs	r1, #1
 8015764:	f7ff bbd4 	b.w	8014f10 <_strtod_l+0x2f0>
 8015768:	ffc00000 	.word	0xffc00000
 801576c:	41dfffff 	.word	0x41dfffff
 8015770:	000fffff 	.word	0x000fffff
 8015774:	7ff00000 	.word	0x7ff00000
 8015778:	7fefffff 	.word	0x7fefffff
 801577c:	3ff00000 	.word	0x3ff00000
 8015780:	7c9fffff 	.word	0x7c9fffff
 8015784:	bff00000 	.word	0xbff00000
 8015788:	7fe00000 	.word	0x7fe00000

0801578c <strtod>:
 801578c:	460a      	mov	r2, r1
 801578e:	4601      	mov	r1, r0
 8015790:	4802      	ldr	r0, [pc, #8]	; (801579c <strtod+0x10>)
 8015792:	4b03      	ldr	r3, [pc, #12]	; (80157a0 <strtod+0x14>)
 8015794:	6800      	ldr	r0, [r0, #0]
 8015796:	f7ff ba43 	b.w	8014c20 <_strtod_l>
 801579a:	bf00      	nop
 801579c:	2400001c 	.word	0x2400001c
 80157a0:	24000084 	.word	0x24000084

080157a4 <strtok>:
 80157a4:	4b16      	ldr	r3, [pc, #88]	; (8015800 <strtok+0x5c>)
 80157a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80157a8:	681e      	ldr	r6, [r3, #0]
 80157aa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80157ac:	4605      	mov	r5, r0
 80157ae:	b9fc      	cbnz	r4, 80157f0 <strtok+0x4c>
 80157b0:	2050      	movs	r0, #80	; 0x50
 80157b2:	9101      	str	r1, [sp, #4]
 80157b4:	f000 fc7e 	bl	80160b4 <malloc>
 80157b8:	9901      	ldr	r1, [sp, #4]
 80157ba:	65b0      	str	r0, [r6, #88]	; 0x58
 80157bc:	4602      	mov	r2, r0
 80157be:	b920      	cbnz	r0, 80157ca <strtok+0x26>
 80157c0:	4b10      	ldr	r3, [pc, #64]	; (8015804 <strtok+0x60>)
 80157c2:	4811      	ldr	r0, [pc, #68]	; (8015808 <strtok+0x64>)
 80157c4:	2157      	movs	r1, #87	; 0x57
 80157c6:	f000 f8d5 	bl	8015974 <__assert_func>
 80157ca:	e9c0 4400 	strd	r4, r4, [r0]
 80157ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80157d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80157d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80157da:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80157de:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80157e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80157e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80157ea:	6184      	str	r4, [r0, #24]
 80157ec:	7704      	strb	r4, [r0, #28]
 80157ee:	6244      	str	r4, [r0, #36]	; 0x24
 80157f0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80157f2:	2301      	movs	r3, #1
 80157f4:	4628      	mov	r0, r5
 80157f6:	b002      	add	sp, #8
 80157f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80157fc:	f000 b806 	b.w	801580c <__strtok_r>
 8015800:	2400001c 	.word	0x2400001c
 8015804:	08018258 	.word	0x08018258
 8015808:	0801826f 	.word	0x0801826f

0801580c <__strtok_r>:
 801580c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801580e:	b908      	cbnz	r0, 8015814 <__strtok_r+0x8>
 8015810:	6810      	ldr	r0, [r2, #0]
 8015812:	b188      	cbz	r0, 8015838 <__strtok_r+0x2c>
 8015814:	4604      	mov	r4, r0
 8015816:	4620      	mov	r0, r4
 8015818:	f814 5b01 	ldrb.w	r5, [r4], #1
 801581c:	460f      	mov	r7, r1
 801581e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8015822:	b91e      	cbnz	r6, 801582c <__strtok_r+0x20>
 8015824:	b965      	cbnz	r5, 8015840 <__strtok_r+0x34>
 8015826:	6015      	str	r5, [r2, #0]
 8015828:	4628      	mov	r0, r5
 801582a:	e005      	b.n	8015838 <__strtok_r+0x2c>
 801582c:	42b5      	cmp	r5, r6
 801582e:	d1f6      	bne.n	801581e <__strtok_r+0x12>
 8015830:	2b00      	cmp	r3, #0
 8015832:	d1f0      	bne.n	8015816 <__strtok_r+0xa>
 8015834:	6014      	str	r4, [r2, #0]
 8015836:	7003      	strb	r3, [r0, #0]
 8015838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801583a:	461c      	mov	r4, r3
 801583c:	e00c      	b.n	8015858 <__strtok_r+0x4c>
 801583e:	b915      	cbnz	r5, 8015846 <__strtok_r+0x3a>
 8015840:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015844:	460e      	mov	r6, r1
 8015846:	f816 5b01 	ldrb.w	r5, [r6], #1
 801584a:	42ab      	cmp	r3, r5
 801584c:	d1f7      	bne.n	801583e <__strtok_r+0x32>
 801584e:	2b00      	cmp	r3, #0
 8015850:	d0f3      	beq.n	801583a <__strtok_r+0x2e>
 8015852:	2300      	movs	r3, #0
 8015854:	f804 3c01 	strb.w	r3, [r4, #-1]
 8015858:	6014      	str	r4, [r2, #0]
 801585a:	e7ed      	b.n	8015838 <__strtok_r+0x2c>

0801585c <_strtol_l.constprop.0>:
 801585c:	2b01      	cmp	r3, #1
 801585e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015862:	d001      	beq.n	8015868 <_strtol_l.constprop.0+0xc>
 8015864:	2b24      	cmp	r3, #36	; 0x24
 8015866:	d906      	bls.n	8015876 <_strtol_l.constprop.0+0x1a>
 8015868:	f7ff f95e 	bl	8014b28 <__errno>
 801586c:	2316      	movs	r3, #22
 801586e:	6003      	str	r3, [r0, #0]
 8015870:	2000      	movs	r0, #0
 8015872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015876:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801595c <_strtol_l.constprop.0+0x100>
 801587a:	460d      	mov	r5, r1
 801587c:	462e      	mov	r6, r5
 801587e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015882:	f814 700c 	ldrb.w	r7, [r4, ip]
 8015886:	f017 0708 	ands.w	r7, r7, #8
 801588a:	d1f7      	bne.n	801587c <_strtol_l.constprop.0+0x20>
 801588c:	2c2d      	cmp	r4, #45	; 0x2d
 801588e:	d132      	bne.n	80158f6 <_strtol_l.constprop.0+0x9a>
 8015890:	782c      	ldrb	r4, [r5, #0]
 8015892:	2701      	movs	r7, #1
 8015894:	1cb5      	adds	r5, r6, #2
 8015896:	2b00      	cmp	r3, #0
 8015898:	d05b      	beq.n	8015952 <_strtol_l.constprop.0+0xf6>
 801589a:	2b10      	cmp	r3, #16
 801589c:	d109      	bne.n	80158b2 <_strtol_l.constprop.0+0x56>
 801589e:	2c30      	cmp	r4, #48	; 0x30
 80158a0:	d107      	bne.n	80158b2 <_strtol_l.constprop.0+0x56>
 80158a2:	782c      	ldrb	r4, [r5, #0]
 80158a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80158a8:	2c58      	cmp	r4, #88	; 0x58
 80158aa:	d14d      	bne.n	8015948 <_strtol_l.constprop.0+0xec>
 80158ac:	786c      	ldrb	r4, [r5, #1]
 80158ae:	2310      	movs	r3, #16
 80158b0:	3502      	adds	r5, #2
 80158b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80158b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80158ba:	f04f 0c00 	mov.w	ip, #0
 80158be:	fbb8 f9f3 	udiv	r9, r8, r3
 80158c2:	4666      	mov	r6, ip
 80158c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80158c8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80158cc:	f1be 0f09 	cmp.w	lr, #9
 80158d0:	d816      	bhi.n	8015900 <_strtol_l.constprop.0+0xa4>
 80158d2:	4674      	mov	r4, lr
 80158d4:	42a3      	cmp	r3, r4
 80158d6:	dd24      	ble.n	8015922 <_strtol_l.constprop.0+0xc6>
 80158d8:	f1bc 0f00 	cmp.w	ip, #0
 80158dc:	db1e      	blt.n	801591c <_strtol_l.constprop.0+0xc0>
 80158de:	45b1      	cmp	r9, r6
 80158e0:	d31c      	bcc.n	801591c <_strtol_l.constprop.0+0xc0>
 80158e2:	d101      	bne.n	80158e8 <_strtol_l.constprop.0+0x8c>
 80158e4:	45a2      	cmp	sl, r4
 80158e6:	db19      	blt.n	801591c <_strtol_l.constprop.0+0xc0>
 80158e8:	fb06 4603 	mla	r6, r6, r3, r4
 80158ec:	f04f 0c01 	mov.w	ip, #1
 80158f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80158f4:	e7e8      	b.n	80158c8 <_strtol_l.constprop.0+0x6c>
 80158f6:	2c2b      	cmp	r4, #43	; 0x2b
 80158f8:	bf04      	itt	eq
 80158fa:	782c      	ldrbeq	r4, [r5, #0]
 80158fc:	1cb5      	addeq	r5, r6, #2
 80158fe:	e7ca      	b.n	8015896 <_strtol_l.constprop.0+0x3a>
 8015900:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8015904:	f1be 0f19 	cmp.w	lr, #25
 8015908:	d801      	bhi.n	801590e <_strtol_l.constprop.0+0xb2>
 801590a:	3c37      	subs	r4, #55	; 0x37
 801590c:	e7e2      	b.n	80158d4 <_strtol_l.constprop.0+0x78>
 801590e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8015912:	f1be 0f19 	cmp.w	lr, #25
 8015916:	d804      	bhi.n	8015922 <_strtol_l.constprop.0+0xc6>
 8015918:	3c57      	subs	r4, #87	; 0x57
 801591a:	e7db      	b.n	80158d4 <_strtol_l.constprop.0+0x78>
 801591c:	f04f 3cff 	mov.w	ip, #4294967295
 8015920:	e7e6      	b.n	80158f0 <_strtol_l.constprop.0+0x94>
 8015922:	f1bc 0f00 	cmp.w	ip, #0
 8015926:	da05      	bge.n	8015934 <_strtol_l.constprop.0+0xd8>
 8015928:	2322      	movs	r3, #34	; 0x22
 801592a:	6003      	str	r3, [r0, #0]
 801592c:	4646      	mov	r6, r8
 801592e:	b942      	cbnz	r2, 8015942 <_strtol_l.constprop.0+0xe6>
 8015930:	4630      	mov	r0, r6
 8015932:	e79e      	b.n	8015872 <_strtol_l.constprop.0+0x16>
 8015934:	b107      	cbz	r7, 8015938 <_strtol_l.constprop.0+0xdc>
 8015936:	4276      	negs	r6, r6
 8015938:	2a00      	cmp	r2, #0
 801593a:	d0f9      	beq.n	8015930 <_strtol_l.constprop.0+0xd4>
 801593c:	f1bc 0f00 	cmp.w	ip, #0
 8015940:	d000      	beq.n	8015944 <_strtol_l.constprop.0+0xe8>
 8015942:	1e69      	subs	r1, r5, #1
 8015944:	6011      	str	r1, [r2, #0]
 8015946:	e7f3      	b.n	8015930 <_strtol_l.constprop.0+0xd4>
 8015948:	2430      	movs	r4, #48	; 0x30
 801594a:	2b00      	cmp	r3, #0
 801594c:	d1b1      	bne.n	80158b2 <_strtol_l.constprop.0+0x56>
 801594e:	2308      	movs	r3, #8
 8015950:	e7af      	b.n	80158b2 <_strtol_l.constprop.0+0x56>
 8015952:	2c30      	cmp	r4, #48	; 0x30
 8015954:	d0a5      	beq.n	80158a2 <_strtol_l.constprop.0+0x46>
 8015956:	230a      	movs	r3, #10
 8015958:	e7ab      	b.n	80158b2 <_strtol_l.constprop.0+0x56>
 801595a:	bf00      	nop
 801595c:	08018309 	.word	0x08018309

08015960 <strtol>:
 8015960:	4613      	mov	r3, r2
 8015962:	460a      	mov	r2, r1
 8015964:	4601      	mov	r1, r0
 8015966:	4802      	ldr	r0, [pc, #8]	; (8015970 <strtol+0x10>)
 8015968:	6800      	ldr	r0, [r0, #0]
 801596a:	f7ff bf77 	b.w	801585c <_strtol_l.constprop.0>
 801596e:	bf00      	nop
 8015970:	2400001c 	.word	0x2400001c

08015974 <__assert_func>:
 8015974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015976:	4614      	mov	r4, r2
 8015978:	461a      	mov	r2, r3
 801597a:	4b09      	ldr	r3, [pc, #36]	; (80159a0 <__assert_func+0x2c>)
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	4605      	mov	r5, r0
 8015980:	68d8      	ldr	r0, [r3, #12]
 8015982:	b14c      	cbz	r4, 8015998 <__assert_func+0x24>
 8015984:	4b07      	ldr	r3, [pc, #28]	; (80159a4 <__assert_func+0x30>)
 8015986:	9100      	str	r1, [sp, #0]
 8015988:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801598c:	4906      	ldr	r1, [pc, #24]	; (80159a8 <__assert_func+0x34>)
 801598e:	462b      	mov	r3, r5
 8015990:	f000 f80e 	bl	80159b0 <fiprintf>
 8015994:	f001 fea2 	bl	80176dc <abort>
 8015998:	4b04      	ldr	r3, [pc, #16]	; (80159ac <__assert_func+0x38>)
 801599a:	461c      	mov	r4, r3
 801599c:	e7f3      	b.n	8015986 <__assert_func+0x12>
 801599e:	bf00      	nop
 80159a0:	2400001c 	.word	0x2400001c
 80159a4:	080182cc 	.word	0x080182cc
 80159a8:	080182d9 	.word	0x080182d9
 80159ac:	08018307 	.word	0x08018307

080159b0 <fiprintf>:
 80159b0:	b40e      	push	{r1, r2, r3}
 80159b2:	b503      	push	{r0, r1, lr}
 80159b4:	4601      	mov	r1, r0
 80159b6:	ab03      	add	r3, sp, #12
 80159b8:	4805      	ldr	r0, [pc, #20]	; (80159d0 <fiprintf+0x20>)
 80159ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80159be:	6800      	ldr	r0, [r0, #0]
 80159c0:	9301      	str	r3, [sp, #4]
 80159c2:	f001 facb 	bl	8016f5c <_vfiprintf_r>
 80159c6:	b002      	add	sp, #8
 80159c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80159cc:	b003      	add	sp, #12
 80159ce:	4770      	bx	lr
 80159d0:	2400001c 	.word	0x2400001c

080159d4 <rshift>:
 80159d4:	6903      	ldr	r3, [r0, #16]
 80159d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80159da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80159e2:	f100 0414 	add.w	r4, r0, #20
 80159e6:	dd45      	ble.n	8015a74 <rshift+0xa0>
 80159e8:	f011 011f 	ands.w	r1, r1, #31
 80159ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80159f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80159f4:	d10c      	bne.n	8015a10 <rshift+0x3c>
 80159f6:	f100 0710 	add.w	r7, r0, #16
 80159fa:	4629      	mov	r1, r5
 80159fc:	42b1      	cmp	r1, r6
 80159fe:	d334      	bcc.n	8015a6a <rshift+0x96>
 8015a00:	1a9b      	subs	r3, r3, r2
 8015a02:	009b      	lsls	r3, r3, #2
 8015a04:	1eea      	subs	r2, r5, #3
 8015a06:	4296      	cmp	r6, r2
 8015a08:	bf38      	it	cc
 8015a0a:	2300      	movcc	r3, #0
 8015a0c:	4423      	add	r3, r4
 8015a0e:	e015      	b.n	8015a3c <rshift+0x68>
 8015a10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015a14:	f1c1 0820 	rsb	r8, r1, #32
 8015a18:	40cf      	lsrs	r7, r1
 8015a1a:	f105 0e04 	add.w	lr, r5, #4
 8015a1e:	46a1      	mov	r9, r4
 8015a20:	4576      	cmp	r6, lr
 8015a22:	46f4      	mov	ip, lr
 8015a24:	d815      	bhi.n	8015a52 <rshift+0x7e>
 8015a26:	1a9a      	subs	r2, r3, r2
 8015a28:	0092      	lsls	r2, r2, #2
 8015a2a:	3a04      	subs	r2, #4
 8015a2c:	3501      	adds	r5, #1
 8015a2e:	42ae      	cmp	r6, r5
 8015a30:	bf38      	it	cc
 8015a32:	2200      	movcc	r2, #0
 8015a34:	18a3      	adds	r3, r4, r2
 8015a36:	50a7      	str	r7, [r4, r2]
 8015a38:	b107      	cbz	r7, 8015a3c <rshift+0x68>
 8015a3a:	3304      	adds	r3, #4
 8015a3c:	1b1a      	subs	r2, r3, r4
 8015a3e:	42a3      	cmp	r3, r4
 8015a40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015a44:	bf08      	it	eq
 8015a46:	2300      	moveq	r3, #0
 8015a48:	6102      	str	r2, [r0, #16]
 8015a4a:	bf08      	it	eq
 8015a4c:	6143      	streq	r3, [r0, #20]
 8015a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a52:	f8dc c000 	ldr.w	ip, [ip]
 8015a56:	fa0c fc08 	lsl.w	ip, ip, r8
 8015a5a:	ea4c 0707 	orr.w	r7, ip, r7
 8015a5e:	f849 7b04 	str.w	r7, [r9], #4
 8015a62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015a66:	40cf      	lsrs	r7, r1
 8015a68:	e7da      	b.n	8015a20 <rshift+0x4c>
 8015a6a:	f851 cb04 	ldr.w	ip, [r1], #4
 8015a6e:	f847 cf04 	str.w	ip, [r7, #4]!
 8015a72:	e7c3      	b.n	80159fc <rshift+0x28>
 8015a74:	4623      	mov	r3, r4
 8015a76:	e7e1      	b.n	8015a3c <rshift+0x68>

08015a78 <__hexdig_fun>:
 8015a78:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015a7c:	2b09      	cmp	r3, #9
 8015a7e:	d802      	bhi.n	8015a86 <__hexdig_fun+0xe>
 8015a80:	3820      	subs	r0, #32
 8015a82:	b2c0      	uxtb	r0, r0
 8015a84:	4770      	bx	lr
 8015a86:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015a8a:	2b05      	cmp	r3, #5
 8015a8c:	d801      	bhi.n	8015a92 <__hexdig_fun+0x1a>
 8015a8e:	3847      	subs	r0, #71	; 0x47
 8015a90:	e7f7      	b.n	8015a82 <__hexdig_fun+0xa>
 8015a92:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015a96:	2b05      	cmp	r3, #5
 8015a98:	d801      	bhi.n	8015a9e <__hexdig_fun+0x26>
 8015a9a:	3827      	subs	r0, #39	; 0x27
 8015a9c:	e7f1      	b.n	8015a82 <__hexdig_fun+0xa>
 8015a9e:	2000      	movs	r0, #0
 8015aa0:	4770      	bx	lr
	...

08015aa4 <__gethex>:
 8015aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aa8:	ed2d 8b02 	vpush	{d8}
 8015aac:	b089      	sub	sp, #36	; 0x24
 8015aae:	ee08 0a10 	vmov	s16, r0
 8015ab2:	9304      	str	r3, [sp, #16]
 8015ab4:	4bb4      	ldr	r3, [pc, #720]	; (8015d88 <__gethex+0x2e4>)
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	9301      	str	r3, [sp, #4]
 8015aba:	4618      	mov	r0, r3
 8015abc:	468b      	mov	fp, r1
 8015abe:	4690      	mov	r8, r2
 8015ac0:	f7ea fc20 	bl	8000304 <strlen>
 8015ac4:	9b01      	ldr	r3, [sp, #4]
 8015ac6:	f8db 2000 	ldr.w	r2, [fp]
 8015aca:	4403      	add	r3, r0
 8015acc:	4682      	mov	sl, r0
 8015ace:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015ad2:	9305      	str	r3, [sp, #20]
 8015ad4:	1c93      	adds	r3, r2, #2
 8015ad6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015ada:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015ade:	32fe      	adds	r2, #254	; 0xfe
 8015ae0:	18d1      	adds	r1, r2, r3
 8015ae2:	461f      	mov	r7, r3
 8015ae4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015ae8:	9100      	str	r1, [sp, #0]
 8015aea:	2830      	cmp	r0, #48	; 0x30
 8015aec:	d0f8      	beq.n	8015ae0 <__gethex+0x3c>
 8015aee:	f7ff ffc3 	bl	8015a78 <__hexdig_fun>
 8015af2:	4604      	mov	r4, r0
 8015af4:	2800      	cmp	r0, #0
 8015af6:	d13a      	bne.n	8015b6e <__gethex+0xca>
 8015af8:	9901      	ldr	r1, [sp, #4]
 8015afa:	4652      	mov	r2, sl
 8015afc:	4638      	mov	r0, r7
 8015afe:	f001 fd0b 	bl	8017518 <strncmp>
 8015b02:	4605      	mov	r5, r0
 8015b04:	2800      	cmp	r0, #0
 8015b06:	d168      	bne.n	8015bda <__gethex+0x136>
 8015b08:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015b0c:	eb07 060a 	add.w	r6, r7, sl
 8015b10:	f7ff ffb2 	bl	8015a78 <__hexdig_fun>
 8015b14:	2800      	cmp	r0, #0
 8015b16:	d062      	beq.n	8015bde <__gethex+0x13a>
 8015b18:	4633      	mov	r3, r6
 8015b1a:	7818      	ldrb	r0, [r3, #0]
 8015b1c:	2830      	cmp	r0, #48	; 0x30
 8015b1e:	461f      	mov	r7, r3
 8015b20:	f103 0301 	add.w	r3, r3, #1
 8015b24:	d0f9      	beq.n	8015b1a <__gethex+0x76>
 8015b26:	f7ff ffa7 	bl	8015a78 <__hexdig_fun>
 8015b2a:	2301      	movs	r3, #1
 8015b2c:	fab0 f480 	clz	r4, r0
 8015b30:	0964      	lsrs	r4, r4, #5
 8015b32:	4635      	mov	r5, r6
 8015b34:	9300      	str	r3, [sp, #0]
 8015b36:	463a      	mov	r2, r7
 8015b38:	4616      	mov	r6, r2
 8015b3a:	3201      	adds	r2, #1
 8015b3c:	7830      	ldrb	r0, [r6, #0]
 8015b3e:	f7ff ff9b 	bl	8015a78 <__hexdig_fun>
 8015b42:	2800      	cmp	r0, #0
 8015b44:	d1f8      	bne.n	8015b38 <__gethex+0x94>
 8015b46:	9901      	ldr	r1, [sp, #4]
 8015b48:	4652      	mov	r2, sl
 8015b4a:	4630      	mov	r0, r6
 8015b4c:	f001 fce4 	bl	8017518 <strncmp>
 8015b50:	b980      	cbnz	r0, 8015b74 <__gethex+0xd0>
 8015b52:	b94d      	cbnz	r5, 8015b68 <__gethex+0xc4>
 8015b54:	eb06 050a 	add.w	r5, r6, sl
 8015b58:	462a      	mov	r2, r5
 8015b5a:	4616      	mov	r6, r2
 8015b5c:	3201      	adds	r2, #1
 8015b5e:	7830      	ldrb	r0, [r6, #0]
 8015b60:	f7ff ff8a 	bl	8015a78 <__hexdig_fun>
 8015b64:	2800      	cmp	r0, #0
 8015b66:	d1f8      	bne.n	8015b5a <__gethex+0xb6>
 8015b68:	1bad      	subs	r5, r5, r6
 8015b6a:	00ad      	lsls	r5, r5, #2
 8015b6c:	e004      	b.n	8015b78 <__gethex+0xd4>
 8015b6e:	2400      	movs	r4, #0
 8015b70:	4625      	mov	r5, r4
 8015b72:	e7e0      	b.n	8015b36 <__gethex+0x92>
 8015b74:	2d00      	cmp	r5, #0
 8015b76:	d1f7      	bne.n	8015b68 <__gethex+0xc4>
 8015b78:	7833      	ldrb	r3, [r6, #0]
 8015b7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015b7e:	2b50      	cmp	r3, #80	; 0x50
 8015b80:	d13b      	bne.n	8015bfa <__gethex+0x156>
 8015b82:	7873      	ldrb	r3, [r6, #1]
 8015b84:	2b2b      	cmp	r3, #43	; 0x2b
 8015b86:	d02c      	beq.n	8015be2 <__gethex+0x13e>
 8015b88:	2b2d      	cmp	r3, #45	; 0x2d
 8015b8a:	d02e      	beq.n	8015bea <__gethex+0x146>
 8015b8c:	1c71      	adds	r1, r6, #1
 8015b8e:	f04f 0900 	mov.w	r9, #0
 8015b92:	7808      	ldrb	r0, [r1, #0]
 8015b94:	f7ff ff70 	bl	8015a78 <__hexdig_fun>
 8015b98:	1e43      	subs	r3, r0, #1
 8015b9a:	b2db      	uxtb	r3, r3
 8015b9c:	2b18      	cmp	r3, #24
 8015b9e:	d82c      	bhi.n	8015bfa <__gethex+0x156>
 8015ba0:	f1a0 0210 	sub.w	r2, r0, #16
 8015ba4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015ba8:	f7ff ff66 	bl	8015a78 <__hexdig_fun>
 8015bac:	1e43      	subs	r3, r0, #1
 8015bae:	b2db      	uxtb	r3, r3
 8015bb0:	2b18      	cmp	r3, #24
 8015bb2:	d91d      	bls.n	8015bf0 <__gethex+0x14c>
 8015bb4:	f1b9 0f00 	cmp.w	r9, #0
 8015bb8:	d000      	beq.n	8015bbc <__gethex+0x118>
 8015bba:	4252      	negs	r2, r2
 8015bbc:	4415      	add	r5, r2
 8015bbe:	f8cb 1000 	str.w	r1, [fp]
 8015bc2:	b1e4      	cbz	r4, 8015bfe <__gethex+0x15a>
 8015bc4:	9b00      	ldr	r3, [sp, #0]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	bf14      	ite	ne
 8015bca:	2700      	movne	r7, #0
 8015bcc:	2706      	moveq	r7, #6
 8015bce:	4638      	mov	r0, r7
 8015bd0:	b009      	add	sp, #36	; 0x24
 8015bd2:	ecbd 8b02 	vpop	{d8}
 8015bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bda:	463e      	mov	r6, r7
 8015bdc:	4625      	mov	r5, r4
 8015bde:	2401      	movs	r4, #1
 8015be0:	e7ca      	b.n	8015b78 <__gethex+0xd4>
 8015be2:	f04f 0900 	mov.w	r9, #0
 8015be6:	1cb1      	adds	r1, r6, #2
 8015be8:	e7d3      	b.n	8015b92 <__gethex+0xee>
 8015bea:	f04f 0901 	mov.w	r9, #1
 8015bee:	e7fa      	b.n	8015be6 <__gethex+0x142>
 8015bf0:	230a      	movs	r3, #10
 8015bf2:	fb03 0202 	mla	r2, r3, r2, r0
 8015bf6:	3a10      	subs	r2, #16
 8015bf8:	e7d4      	b.n	8015ba4 <__gethex+0x100>
 8015bfa:	4631      	mov	r1, r6
 8015bfc:	e7df      	b.n	8015bbe <__gethex+0x11a>
 8015bfe:	1bf3      	subs	r3, r6, r7
 8015c00:	3b01      	subs	r3, #1
 8015c02:	4621      	mov	r1, r4
 8015c04:	2b07      	cmp	r3, #7
 8015c06:	dc0b      	bgt.n	8015c20 <__gethex+0x17c>
 8015c08:	ee18 0a10 	vmov	r0, s16
 8015c0c:	f000 fa6c 	bl	80160e8 <_Balloc>
 8015c10:	4604      	mov	r4, r0
 8015c12:	b940      	cbnz	r0, 8015c26 <__gethex+0x182>
 8015c14:	4b5d      	ldr	r3, [pc, #372]	; (8015d8c <__gethex+0x2e8>)
 8015c16:	4602      	mov	r2, r0
 8015c18:	21de      	movs	r1, #222	; 0xde
 8015c1a:	485d      	ldr	r0, [pc, #372]	; (8015d90 <__gethex+0x2ec>)
 8015c1c:	f7ff feaa 	bl	8015974 <__assert_func>
 8015c20:	3101      	adds	r1, #1
 8015c22:	105b      	asrs	r3, r3, #1
 8015c24:	e7ee      	b.n	8015c04 <__gethex+0x160>
 8015c26:	f100 0914 	add.w	r9, r0, #20
 8015c2a:	f04f 0b00 	mov.w	fp, #0
 8015c2e:	f1ca 0301 	rsb	r3, sl, #1
 8015c32:	f8cd 9008 	str.w	r9, [sp, #8]
 8015c36:	f8cd b000 	str.w	fp, [sp]
 8015c3a:	9306      	str	r3, [sp, #24]
 8015c3c:	42b7      	cmp	r7, r6
 8015c3e:	d340      	bcc.n	8015cc2 <__gethex+0x21e>
 8015c40:	9802      	ldr	r0, [sp, #8]
 8015c42:	9b00      	ldr	r3, [sp, #0]
 8015c44:	f840 3b04 	str.w	r3, [r0], #4
 8015c48:	eba0 0009 	sub.w	r0, r0, r9
 8015c4c:	1080      	asrs	r0, r0, #2
 8015c4e:	0146      	lsls	r6, r0, #5
 8015c50:	6120      	str	r0, [r4, #16]
 8015c52:	4618      	mov	r0, r3
 8015c54:	f000 fb3a 	bl	80162cc <__hi0bits>
 8015c58:	1a30      	subs	r0, r6, r0
 8015c5a:	f8d8 6000 	ldr.w	r6, [r8]
 8015c5e:	42b0      	cmp	r0, r6
 8015c60:	dd63      	ble.n	8015d2a <__gethex+0x286>
 8015c62:	1b87      	subs	r7, r0, r6
 8015c64:	4639      	mov	r1, r7
 8015c66:	4620      	mov	r0, r4
 8015c68:	f000 fedb 	bl	8016a22 <__any_on>
 8015c6c:	4682      	mov	sl, r0
 8015c6e:	b1a8      	cbz	r0, 8015c9c <__gethex+0x1f8>
 8015c70:	1e7b      	subs	r3, r7, #1
 8015c72:	1159      	asrs	r1, r3, #5
 8015c74:	f003 021f 	and.w	r2, r3, #31
 8015c78:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015c7c:	f04f 0a01 	mov.w	sl, #1
 8015c80:	fa0a f202 	lsl.w	r2, sl, r2
 8015c84:	420a      	tst	r2, r1
 8015c86:	d009      	beq.n	8015c9c <__gethex+0x1f8>
 8015c88:	4553      	cmp	r3, sl
 8015c8a:	dd05      	ble.n	8015c98 <__gethex+0x1f4>
 8015c8c:	1eb9      	subs	r1, r7, #2
 8015c8e:	4620      	mov	r0, r4
 8015c90:	f000 fec7 	bl	8016a22 <__any_on>
 8015c94:	2800      	cmp	r0, #0
 8015c96:	d145      	bne.n	8015d24 <__gethex+0x280>
 8015c98:	f04f 0a02 	mov.w	sl, #2
 8015c9c:	4639      	mov	r1, r7
 8015c9e:	4620      	mov	r0, r4
 8015ca0:	f7ff fe98 	bl	80159d4 <rshift>
 8015ca4:	443d      	add	r5, r7
 8015ca6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015caa:	42ab      	cmp	r3, r5
 8015cac:	da4c      	bge.n	8015d48 <__gethex+0x2a4>
 8015cae:	ee18 0a10 	vmov	r0, s16
 8015cb2:	4621      	mov	r1, r4
 8015cb4:	f000 fa58 	bl	8016168 <_Bfree>
 8015cb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015cba:	2300      	movs	r3, #0
 8015cbc:	6013      	str	r3, [r2, #0]
 8015cbe:	27a3      	movs	r7, #163	; 0xa3
 8015cc0:	e785      	b.n	8015bce <__gethex+0x12a>
 8015cc2:	1e73      	subs	r3, r6, #1
 8015cc4:	9a05      	ldr	r2, [sp, #20]
 8015cc6:	9303      	str	r3, [sp, #12]
 8015cc8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015ccc:	4293      	cmp	r3, r2
 8015cce:	d019      	beq.n	8015d04 <__gethex+0x260>
 8015cd0:	f1bb 0f20 	cmp.w	fp, #32
 8015cd4:	d107      	bne.n	8015ce6 <__gethex+0x242>
 8015cd6:	9b02      	ldr	r3, [sp, #8]
 8015cd8:	9a00      	ldr	r2, [sp, #0]
 8015cda:	f843 2b04 	str.w	r2, [r3], #4
 8015cde:	9302      	str	r3, [sp, #8]
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	9300      	str	r3, [sp, #0]
 8015ce4:	469b      	mov	fp, r3
 8015ce6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015cea:	f7ff fec5 	bl	8015a78 <__hexdig_fun>
 8015cee:	9b00      	ldr	r3, [sp, #0]
 8015cf0:	f000 000f 	and.w	r0, r0, #15
 8015cf4:	fa00 f00b 	lsl.w	r0, r0, fp
 8015cf8:	4303      	orrs	r3, r0
 8015cfa:	9300      	str	r3, [sp, #0]
 8015cfc:	f10b 0b04 	add.w	fp, fp, #4
 8015d00:	9b03      	ldr	r3, [sp, #12]
 8015d02:	e00d      	b.n	8015d20 <__gethex+0x27c>
 8015d04:	9b03      	ldr	r3, [sp, #12]
 8015d06:	9a06      	ldr	r2, [sp, #24]
 8015d08:	4413      	add	r3, r2
 8015d0a:	42bb      	cmp	r3, r7
 8015d0c:	d3e0      	bcc.n	8015cd0 <__gethex+0x22c>
 8015d0e:	4618      	mov	r0, r3
 8015d10:	9901      	ldr	r1, [sp, #4]
 8015d12:	9307      	str	r3, [sp, #28]
 8015d14:	4652      	mov	r2, sl
 8015d16:	f001 fbff 	bl	8017518 <strncmp>
 8015d1a:	9b07      	ldr	r3, [sp, #28]
 8015d1c:	2800      	cmp	r0, #0
 8015d1e:	d1d7      	bne.n	8015cd0 <__gethex+0x22c>
 8015d20:	461e      	mov	r6, r3
 8015d22:	e78b      	b.n	8015c3c <__gethex+0x198>
 8015d24:	f04f 0a03 	mov.w	sl, #3
 8015d28:	e7b8      	b.n	8015c9c <__gethex+0x1f8>
 8015d2a:	da0a      	bge.n	8015d42 <__gethex+0x29e>
 8015d2c:	1a37      	subs	r7, r6, r0
 8015d2e:	4621      	mov	r1, r4
 8015d30:	ee18 0a10 	vmov	r0, s16
 8015d34:	463a      	mov	r2, r7
 8015d36:	f000 fc33 	bl	80165a0 <__lshift>
 8015d3a:	1bed      	subs	r5, r5, r7
 8015d3c:	4604      	mov	r4, r0
 8015d3e:	f100 0914 	add.w	r9, r0, #20
 8015d42:	f04f 0a00 	mov.w	sl, #0
 8015d46:	e7ae      	b.n	8015ca6 <__gethex+0x202>
 8015d48:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015d4c:	42a8      	cmp	r0, r5
 8015d4e:	dd72      	ble.n	8015e36 <__gethex+0x392>
 8015d50:	1b45      	subs	r5, r0, r5
 8015d52:	42ae      	cmp	r6, r5
 8015d54:	dc36      	bgt.n	8015dc4 <__gethex+0x320>
 8015d56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015d5a:	2b02      	cmp	r3, #2
 8015d5c:	d02a      	beq.n	8015db4 <__gethex+0x310>
 8015d5e:	2b03      	cmp	r3, #3
 8015d60:	d02c      	beq.n	8015dbc <__gethex+0x318>
 8015d62:	2b01      	cmp	r3, #1
 8015d64:	d11c      	bne.n	8015da0 <__gethex+0x2fc>
 8015d66:	42ae      	cmp	r6, r5
 8015d68:	d11a      	bne.n	8015da0 <__gethex+0x2fc>
 8015d6a:	2e01      	cmp	r6, #1
 8015d6c:	d112      	bne.n	8015d94 <__gethex+0x2f0>
 8015d6e:	9a04      	ldr	r2, [sp, #16]
 8015d70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015d74:	6013      	str	r3, [r2, #0]
 8015d76:	2301      	movs	r3, #1
 8015d78:	6123      	str	r3, [r4, #16]
 8015d7a:	f8c9 3000 	str.w	r3, [r9]
 8015d7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d80:	2762      	movs	r7, #98	; 0x62
 8015d82:	601c      	str	r4, [r3, #0]
 8015d84:	e723      	b.n	8015bce <__gethex+0x12a>
 8015d86:	bf00      	nop
 8015d88:	08018480 	.word	0x08018480
 8015d8c:	08018409 	.word	0x08018409
 8015d90:	0801841a 	.word	0x0801841a
 8015d94:	1e71      	subs	r1, r6, #1
 8015d96:	4620      	mov	r0, r4
 8015d98:	f000 fe43 	bl	8016a22 <__any_on>
 8015d9c:	2800      	cmp	r0, #0
 8015d9e:	d1e6      	bne.n	8015d6e <__gethex+0x2ca>
 8015da0:	ee18 0a10 	vmov	r0, s16
 8015da4:	4621      	mov	r1, r4
 8015da6:	f000 f9df 	bl	8016168 <_Bfree>
 8015daa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015dac:	2300      	movs	r3, #0
 8015dae:	6013      	str	r3, [r2, #0]
 8015db0:	2750      	movs	r7, #80	; 0x50
 8015db2:	e70c      	b.n	8015bce <__gethex+0x12a>
 8015db4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d1f2      	bne.n	8015da0 <__gethex+0x2fc>
 8015dba:	e7d8      	b.n	8015d6e <__gethex+0x2ca>
 8015dbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d1d5      	bne.n	8015d6e <__gethex+0x2ca>
 8015dc2:	e7ed      	b.n	8015da0 <__gethex+0x2fc>
 8015dc4:	1e6f      	subs	r7, r5, #1
 8015dc6:	f1ba 0f00 	cmp.w	sl, #0
 8015dca:	d131      	bne.n	8015e30 <__gethex+0x38c>
 8015dcc:	b127      	cbz	r7, 8015dd8 <__gethex+0x334>
 8015dce:	4639      	mov	r1, r7
 8015dd0:	4620      	mov	r0, r4
 8015dd2:	f000 fe26 	bl	8016a22 <__any_on>
 8015dd6:	4682      	mov	sl, r0
 8015dd8:	117b      	asrs	r3, r7, #5
 8015dda:	2101      	movs	r1, #1
 8015ddc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015de0:	f007 071f 	and.w	r7, r7, #31
 8015de4:	fa01 f707 	lsl.w	r7, r1, r7
 8015de8:	421f      	tst	r7, r3
 8015dea:	4629      	mov	r1, r5
 8015dec:	4620      	mov	r0, r4
 8015dee:	bf18      	it	ne
 8015df0:	f04a 0a02 	orrne.w	sl, sl, #2
 8015df4:	1b76      	subs	r6, r6, r5
 8015df6:	f7ff fded 	bl	80159d4 <rshift>
 8015dfa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015dfe:	2702      	movs	r7, #2
 8015e00:	f1ba 0f00 	cmp.w	sl, #0
 8015e04:	d048      	beq.n	8015e98 <__gethex+0x3f4>
 8015e06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015e0a:	2b02      	cmp	r3, #2
 8015e0c:	d015      	beq.n	8015e3a <__gethex+0x396>
 8015e0e:	2b03      	cmp	r3, #3
 8015e10:	d017      	beq.n	8015e42 <__gethex+0x39e>
 8015e12:	2b01      	cmp	r3, #1
 8015e14:	d109      	bne.n	8015e2a <__gethex+0x386>
 8015e16:	f01a 0f02 	tst.w	sl, #2
 8015e1a:	d006      	beq.n	8015e2a <__gethex+0x386>
 8015e1c:	f8d9 0000 	ldr.w	r0, [r9]
 8015e20:	ea4a 0a00 	orr.w	sl, sl, r0
 8015e24:	f01a 0f01 	tst.w	sl, #1
 8015e28:	d10e      	bne.n	8015e48 <__gethex+0x3a4>
 8015e2a:	f047 0710 	orr.w	r7, r7, #16
 8015e2e:	e033      	b.n	8015e98 <__gethex+0x3f4>
 8015e30:	f04f 0a01 	mov.w	sl, #1
 8015e34:	e7d0      	b.n	8015dd8 <__gethex+0x334>
 8015e36:	2701      	movs	r7, #1
 8015e38:	e7e2      	b.n	8015e00 <__gethex+0x35c>
 8015e3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e3c:	f1c3 0301 	rsb	r3, r3, #1
 8015e40:	9315      	str	r3, [sp, #84]	; 0x54
 8015e42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d0f0      	beq.n	8015e2a <__gethex+0x386>
 8015e48:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015e4c:	f104 0314 	add.w	r3, r4, #20
 8015e50:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015e54:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015e58:	f04f 0c00 	mov.w	ip, #0
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e62:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015e66:	d01c      	beq.n	8015ea2 <__gethex+0x3fe>
 8015e68:	3201      	adds	r2, #1
 8015e6a:	6002      	str	r2, [r0, #0]
 8015e6c:	2f02      	cmp	r7, #2
 8015e6e:	f104 0314 	add.w	r3, r4, #20
 8015e72:	d13f      	bne.n	8015ef4 <__gethex+0x450>
 8015e74:	f8d8 2000 	ldr.w	r2, [r8]
 8015e78:	3a01      	subs	r2, #1
 8015e7a:	42b2      	cmp	r2, r6
 8015e7c:	d10a      	bne.n	8015e94 <__gethex+0x3f0>
 8015e7e:	1171      	asrs	r1, r6, #5
 8015e80:	2201      	movs	r2, #1
 8015e82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015e86:	f006 061f 	and.w	r6, r6, #31
 8015e8a:	fa02 f606 	lsl.w	r6, r2, r6
 8015e8e:	421e      	tst	r6, r3
 8015e90:	bf18      	it	ne
 8015e92:	4617      	movne	r7, r2
 8015e94:	f047 0720 	orr.w	r7, r7, #32
 8015e98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e9a:	601c      	str	r4, [r3, #0]
 8015e9c:	9b04      	ldr	r3, [sp, #16]
 8015e9e:	601d      	str	r5, [r3, #0]
 8015ea0:	e695      	b.n	8015bce <__gethex+0x12a>
 8015ea2:	4299      	cmp	r1, r3
 8015ea4:	f843 cc04 	str.w	ip, [r3, #-4]
 8015ea8:	d8d8      	bhi.n	8015e5c <__gethex+0x3b8>
 8015eaa:	68a3      	ldr	r3, [r4, #8]
 8015eac:	459b      	cmp	fp, r3
 8015eae:	db19      	blt.n	8015ee4 <__gethex+0x440>
 8015eb0:	6861      	ldr	r1, [r4, #4]
 8015eb2:	ee18 0a10 	vmov	r0, s16
 8015eb6:	3101      	adds	r1, #1
 8015eb8:	f000 f916 	bl	80160e8 <_Balloc>
 8015ebc:	4681      	mov	r9, r0
 8015ebe:	b918      	cbnz	r0, 8015ec8 <__gethex+0x424>
 8015ec0:	4b1a      	ldr	r3, [pc, #104]	; (8015f2c <__gethex+0x488>)
 8015ec2:	4602      	mov	r2, r0
 8015ec4:	2184      	movs	r1, #132	; 0x84
 8015ec6:	e6a8      	b.n	8015c1a <__gethex+0x176>
 8015ec8:	6922      	ldr	r2, [r4, #16]
 8015eca:	3202      	adds	r2, #2
 8015ecc:	f104 010c 	add.w	r1, r4, #12
 8015ed0:	0092      	lsls	r2, r2, #2
 8015ed2:	300c      	adds	r0, #12
 8015ed4:	f7fe fe52 	bl	8014b7c <memcpy>
 8015ed8:	4621      	mov	r1, r4
 8015eda:	ee18 0a10 	vmov	r0, s16
 8015ede:	f000 f943 	bl	8016168 <_Bfree>
 8015ee2:	464c      	mov	r4, r9
 8015ee4:	6923      	ldr	r3, [r4, #16]
 8015ee6:	1c5a      	adds	r2, r3, #1
 8015ee8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015eec:	6122      	str	r2, [r4, #16]
 8015eee:	2201      	movs	r2, #1
 8015ef0:	615a      	str	r2, [r3, #20]
 8015ef2:	e7bb      	b.n	8015e6c <__gethex+0x3c8>
 8015ef4:	6922      	ldr	r2, [r4, #16]
 8015ef6:	455a      	cmp	r2, fp
 8015ef8:	dd0b      	ble.n	8015f12 <__gethex+0x46e>
 8015efa:	2101      	movs	r1, #1
 8015efc:	4620      	mov	r0, r4
 8015efe:	f7ff fd69 	bl	80159d4 <rshift>
 8015f02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015f06:	3501      	adds	r5, #1
 8015f08:	42ab      	cmp	r3, r5
 8015f0a:	f6ff aed0 	blt.w	8015cae <__gethex+0x20a>
 8015f0e:	2701      	movs	r7, #1
 8015f10:	e7c0      	b.n	8015e94 <__gethex+0x3f0>
 8015f12:	f016 061f 	ands.w	r6, r6, #31
 8015f16:	d0fa      	beq.n	8015f0e <__gethex+0x46a>
 8015f18:	4453      	add	r3, sl
 8015f1a:	f1c6 0620 	rsb	r6, r6, #32
 8015f1e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015f22:	f000 f9d3 	bl	80162cc <__hi0bits>
 8015f26:	42b0      	cmp	r0, r6
 8015f28:	dbe7      	blt.n	8015efa <__gethex+0x456>
 8015f2a:	e7f0      	b.n	8015f0e <__gethex+0x46a>
 8015f2c:	08018409 	.word	0x08018409

08015f30 <L_shift>:
 8015f30:	f1c2 0208 	rsb	r2, r2, #8
 8015f34:	0092      	lsls	r2, r2, #2
 8015f36:	b570      	push	{r4, r5, r6, lr}
 8015f38:	f1c2 0620 	rsb	r6, r2, #32
 8015f3c:	6843      	ldr	r3, [r0, #4]
 8015f3e:	6804      	ldr	r4, [r0, #0]
 8015f40:	fa03 f506 	lsl.w	r5, r3, r6
 8015f44:	432c      	orrs	r4, r5
 8015f46:	40d3      	lsrs	r3, r2
 8015f48:	6004      	str	r4, [r0, #0]
 8015f4a:	f840 3f04 	str.w	r3, [r0, #4]!
 8015f4e:	4288      	cmp	r0, r1
 8015f50:	d3f4      	bcc.n	8015f3c <L_shift+0xc>
 8015f52:	bd70      	pop	{r4, r5, r6, pc}

08015f54 <__match>:
 8015f54:	b530      	push	{r4, r5, lr}
 8015f56:	6803      	ldr	r3, [r0, #0]
 8015f58:	3301      	adds	r3, #1
 8015f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f5e:	b914      	cbnz	r4, 8015f66 <__match+0x12>
 8015f60:	6003      	str	r3, [r0, #0]
 8015f62:	2001      	movs	r0, #1
 8015f64:	bd30      	pop	{r4, r5, pc}
 8015f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f6a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015f6e:	2d19      	cmp	r5, #25
 8015f70:	bf98      	it	ls
 8015f72:	3220      	addls	r2, #32
 8015f74:	42a2      	cmp	r2, r4
 8015f76:	d0f0      	beq.n	8015f5a <__match+0x6>
 8015f78:	2000      	movs	r0, #0
 8015f7a:	e7f3      	b.n	8015f64 <__match+0x10>

08015f7c <__hexnan>:
 8015f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f80:	680b      	ldr	r3, [r1, #0]
 8015f82:	115e      	asrs	r6, r3, #5
 8015f84:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015f88:	f013 031f 	ands.w	r3, r3, #31
 8015f8c:	b087      	sub	sp, #28
 8015f8e:	bf18      	it	ne
 8015f90:	3604      	addne	r6, #4
 8015f92:	2500      	movs	r5, #0
 8015f94:	1f37      	subs	r7, r6, #4
 8015f96:	4690      	mov	r8, r2
 8015f98:	6802      	ldr	r2, [r0, #0]
 8015f9a:	9301      	str	r3, [sp, #4]
 8015f9c:	4682      	mov	sl, r0
 8015f9e:	f846 5c04 	str.w	r5, [r6, #-4]
 8015fa2:	46b9      	mov	r9, r7
 8015fa4:	463c      	mov	r4, r7
 8015fa6:	9502      	str	r5, [sp, #8]
 8015fa8:	46ab      	mov	fp, r5
 8015faa:	7851      	ldrb	r1, [r2, #1]
 8015fac:	1c53      	adds	r3, r2, #1
 8015fae:	9303      	str	r3, [sp, #12]
 8015fb0:	b341      	cbz	r1, 8016004 <__hexnan+0x88>
 8015fb2:	4608      	mov	r0, r1
 8015fb4:	9205      	str	r2, [sp, #20]
 8015fb6:	9104      	str	r1, [sp, #16]
 8015fb8:	f7ff fd5e 	bl	8015a78 <__hexdig_fun>
 8015fbc:	2800      	cmp	r0, #0
 8015fbe:	d14f      	bne.n	8016060 <__hexnan+0xe4>
 8015fc0:	9904      	ldr	r1, [sp, #16]
 8015fc2:	9a05      	ldr	r2, [sp, #20]
 8015fc4:	2920      	cmp	r1, #32
 8015fc6:	d818      	bhi.n	8015ffa <__hexnan+0x7e>
 8015fc8:	9b02      	ldr	r3, [sp, #8]
 8015fca:	459b      	cmp	fp, r3
 8015fcc:	dd13      	ble.n	8015ff6 <__hexnan+0x7a>
 8015fce:	454c      	cmp	r4, r9
 8015fd0:	d206      	bcs.n	8015fe0 <__hexnan+0x64>
 8015fd2:	2d07      	cmp	r5, #7
 8015fd4:	dc04      	bgt.n	8015fe0 <__hexnan+0x64>
 8015fd6:	462a      	mov	r2, r5
 8015fd8:	4649      	mov	r1, r9
 8015fda:	4620      	mov	r0, r4
 8015fdc:	f7ff ffa8 	bl	8015f30 <L_shift>
 8015fe0:	4544      	cmp	r4, r8
 8015fe2:	d950      	bls.n	8016086 <__hexnan+0x10a>
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	f1a4 0904 	sub.w	r9, r4, #4
 8015fea:	f844 3c04 	str.w	r3, [r4, #-4]
 8015fee:	f8cd b008 	str.w	fp, [sp, #8]
 8015ff2:	464c      	mov	r4, r9
 8015ff4:	461d      	mov	r5, r3
 8015ff6:	9a03      	ldr	r2, [sp, #12]
 8015ff8:	e7d7      	b.n	8015faa <__hexnan+0x2e>
 8015ffa:	2929      	cmp	r1, #41	; 0x29
 8015ffc:	d156      	bne.n	80160ac <__hexnan+0x130>
 8015ffe:	3202      	adds	r2, #2
 8016000:	f8ca 2000 	str.w	r2, [sl]
 8016004:	f1bb 0f00 	cmp.w	fp, #0
 8016008:	d050      	beq.n	80160ac <__hexnan+0x130>
 801600a:	454c      	cmp	r4, r9
 801600c:	d206      	bcs.n	801601c <__hexnan+0xa0>
 801600e:	2d07      	cmp	r5, #7
 8016010:	dc04      	bgt.n	801601c <__hexnan+0xa0>
 8016012:	462a      	mov	r2, r5
 8016014:	4649      	mov	r1, r9
 8016016:	4620      	mov	r0, r4
 8016018:	f7ff ff8a 	bl	8015f30 <L_shift>
 801601c:	4544      	cmp	r4, r8
 801601e:	d934      	bls.n	801608a <__hexnan+0x10e>
 8016020:	f1a8 0204 	sub.w	r2, r8, #4
 8016024:	4623      	mov	r3, r4
 8016026:	f853 1b04 	ldr.w	r1, [r3], #4
 801602a:	f842 1f04 	str.w	r1, [r2, #4]!
 801602e:	429f      	cmp	r7, r3
 8016030:	d2f9      	bcs.n	8016026 <__hexnan+0xaa>
 8016032:	1b3b      	subs	r3, r7, r4
 8016034:	f023 0303 	bic.w	r3, r3, #3
 8016038:	3304      	adds	r3, #4
 801603a:	3401      	adds	r4, #1
 801603c:	3e03      	subs	r6, #3
 801603e:	42b4      	cmp	r4, r6
 8016040:	bf88      	it	hi
 8016042:	2304      	movhi	r3, #4
 8016044:	4443      	add	r3, r8
 8016046:	2200      	movs	r2, #0
 8016048:	f843 2b04 	str.w	r2, [r3], #4
 801604c:	429f      	cmp	r7, r3
 801604e:	d2fb      	bcs.n	8016048 <__hexnan+0xcc>
 8016050:	683b      	ldr	r3, [r7, #0]
 8016052:	b91b      	cbnz	r3, 801605c <__hexnan+0xe0>
 8016054:	4547      	cmp	r7, r8
 8016056:	d127      	bne.n	80160a8 <__hexnan+0x12c>
 8016058:	2301      	movs	r3, #1
 801605a:	603b      	str	r3, [r7, #0]
 801605c:	2005      	movs	r0, #5
 801605e:	e026      	b.n	80160ae <__hexnan+0x132>
 8016060:	3501      	adds	r5, #1
 8016062:	2d08      	cmp	r5, #8
 8016064:	f10b 0b01 	add.w	fp, fp, #1
 8016068:	dd06      	ble.n	8016078 <__hexnan+0xfc>
 801606a:	4544      	cmp	r4, r8
 801606c:	d9c3      	bls.n	8015ff6 <__hexnan+0x7a>
 801606e:	2300      	movs	r3, #0
 8016070:	f844 3c04 	str.w	r3, [r4, #-4]
 8016074:	2501      	movs	r5, #1
 8016076:	3c04      	subs	r4, #4
 8016078:	6822      	ldr	r2, [r4, #0]
 801607a:	f000 000f 	and.w	r0, r0, #15
 801607e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8016082:	6022      	str	r2, [r4, #0]
 8016084:	e7b7      	b.n	8015ff6 <__hexnan+0x7a>
 8016086:	2508      	movs	r5, #8
 8016088:	e7b5      	b.n	8015ff6 <__hexnan+0x7a>
 801608a:	9b01      	ldr	r3, [sp, #4]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d0df      	beq.n	8016050 <__hexnan+0xd4>
 8016090:	f04f 32ff 	mov.w	r2, #4294967295
 8016094:	f1c3 0320 	rsb	r3, r3, #32
 8016098:	fa22 f303 	lsr.w	r3, r2, r3
 801609c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80160a0:	401a      	ands	r2, r3
 80160a2:	f846 2c04 	str.w	r2, [r6, #-4]
 80160a6:	e7d3      	b.n	8016050 <__hexnan+0xd4>
 80160a8:	3f04      	subs	r7, #4
 80160aa:	e7d1      	b.n	8016050 <__hexnan+0xd4>
 80160ac:	2004      	movs	r0, #4
 80160ae:	b007      	add	sp, #28
 80160b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080160b4 <malloc>:
 80160b4:	4b02      	ldr	r3, [pc, #8]	; (80160c0 <malloc+0xc>)
 80160b6:	4601      	mov	r1, r0
 80160b8:	6818      	ldr	r0, [r3, #0]
 80160ba:	f000 bd55 	b.w	8016b68 <_malloc_r>
 80160be:	bf00      	nop
 80160c0:	2400001c 	.word	0x2400001c

080160c4 <__ascii_mbtowc>:
 80160c4:	b082      	sub	sp, #8
 80160c6:	b901      	cbnz	r1, 80160ca <__ascii_mbtowc+0x6>
 80160c8:	a901      	add	r1, sp, #4
 80160ca:	b142      	cbz	r2, 80160de <__ascii_mbtowc+0x1a>
 80160cc:	b14b      	cbz	r3, 80160e2 <__ascii_mbtowc+0x1e>
 80160ce:	7813      	ldrb	r3, [r2, #0]
 80160d0:	600b      	str	r3, [r1, #0]
 80160d2:	7812      	ldrb	r2, [r2, #0]
 80160d4:	1e10      	subs	r0, r2, #0
 80160d6:	bf18      	it	ne
 80160d8:	2001      	movne	r0, #1
 80160da:	b002      	add	sp, #8
 80160dc:	4770      	bx	lr
 80160de:	4610      	mov	r0, r2
 80160e0:	e7fb      	b.n	80160da <__ascii_mbtowc+0x16>
 80160e2:	f06f 0001 	mvn.w	r0, #1
 80160e6:	e7f8      	b.n	80160da <__ascii_mbtowc+0x16>

080160e8 <_Balloc>:
 80160e8:	b570      	push	{r4, r5, r6, lr}
 80160ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80160ec:	4604      	mov	r4, r0
 80160ee:	460d      	mov	r5, r1
 80160f0:	b976      	cbnz	r6, 8016110 <_Balloc+0x28>
 80160f2:	2010      	movs	r0, #16
 80160f4:	f7ff ffde 	bl	80160b4 <malloc>
 80160f8:	4602      	mov	r2, r0
 80160fa:	6260      	str	r0, [r4, #36]	; 0x24
 80160fc:	b920      	cbnz	r0, 8016108 <_Balloc+0x20>
 80160fe:	4b18      	ldr	r3, [pc, #96]	; (8016160 <_Balloc+0x78>)
 8016100:	4818      	ldr	r0, [pc, #96]	; (8016164 <_Balloc+0x7c>)
 8016102:	2166      	movs	r1, #102	; 0x66
 8016104:	f7ff fc36 	bl	8015974 <__assert_func>
 8016108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801610c:	6006      	str	r6, [r0, #0]
 801610e:	60c6      	str	r6, [r0, #12]
 8016110:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016112:	68f3      	ldr	r3, [r6, #12]
 8016114:	b183      	cbz	r3, 8016138 <_Balloc+0x50>
 8016116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016118:	68db      	ldr	r3, [r3, #12]
 801611a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801611e:	b9b8      	cbnz	r0, 8016150 <_Balloc+0x68>
 8016120:	2101      	movs	r1, #1
 8016122:	fa01 f605 	lsl.w	r6, r1, r5
 8016126:	1d72      	adds	r2, r6, #5
 8016128:	0092      	lsls	r2, r2, #2
 801612a:	4620      	mov	r0, r4
 801612c:	f000 fc9a 	bl	8016a64 <_calloc_r>
 8016130:	b160      	cbz	r0, 801614c <_Balloc+0x64>
 8016132:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016136:	e00e      	b.n	8016156 <_Balloc+0x6e>
 8016138:	2221      	movs	r2, #33	; 0x21
 801613a:	2104      	movs	r1, #4
 801613c:	4620      	mov	r0, r4
 801613e:	f000 fc91 	bl	8016a64 <_calloc_r>
 8016142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016144:	60f0      	str	r0, [r6, #12]
 8016146:	68db      	ldr	r3, [r3, #12]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d1e4      	bne.n	8016116 <_Balloc+0x2e>
 801614c:	2000      	movs	r0, #0
 801614e:	bd70      	pop	{r4, r5, r6, pc}
 8016150:	6802      	ldr	r2, [r0, #0]
 8016152:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016156:	2300      	movs	r3, #0
 8016158:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801615c:	e7f7      	b.n	801614e <_Balloc+0x66>
 801615e:	bf00      	nop
 8016160:	08018258 	.word	0x08018258
 8016164:	08018494 	.word	0x08018494

08016168 <_Bfree>:
 8016168:	b570      	push	{r4, r5, r6, lr}
 801616a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801616c:	4605      	mov	r5, r0
 801616e:	460c      	mov	r4, r1
 8016170:	b976      	cbnz	r6, 8016190 <_Bfree+0x28>
 8016172:	2010      	movs	r0, #16
 8016174:	f7ff ff9e 	bl	80160b4 <malloc>
 8016178:	4602      	mov	r2, r0
 801617a:	6268      	str	r0, [r5, #36]	; 0x24
 801617c:	b920      	cbnz	r0, 8016188 <_Bfree+0x20>
 801617e:	4b09      	ldr	r3, [pc, #36]	; (80161a4 <_Bfree+0x3c>)
 8016180:	4809      	ldr	r0, [pc, #36]	; (80161a8 <_Bfree+0x40>)
 8016182:	218a      	movs	r1, #138	; 0x8a
 8016184:	f7ff fbf6 	bl	8015974 <__assert_func>
 8016188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801618c:	6006      	str	r6, [r0, #0]
 801618e:	60c6      	str	r6, [r0, #12]
 8016190:	b13c      	cbz	r4, 80161a2 <_Bfree+0x3a>
 8016192:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016194:	6862      	ldr	r2, [r4, #4]
 8016196:	68db      	ldr	r3, [r3, #12]
 8016198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801619c:	6021      	str	r1, [r4, #0]
 801619e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80161a2:	bd70      	pop	{r4, r5, r6, pc}
 80161a4:	08018258 	.word	0x08018258
 80161a8:	08018494 	.word	0x08018494

080161ac <__multadd>:
 80161ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161b0:	690d      	ldr	r5, [r1, #16]
 80161b2:	4607      	mov	r7, r0
 80161b4:	460c      	mov	r4, r1
 80161b6:	461e      	mov	r6, r3
 80161b8:	f101 0c14 	add.w	ip, r1, #20
 80161bc:	2000      	movs	r0, #0
 80161be:	f8dc 3000 	ldr.w	r3, [ip]
 80161c2:	b299      	uxth	r1, r3
 80161c4:	fb02 6101 	mla	r1, r2, r1, r6
 80161c8:	0c1e      	lsrs	r6, r3, #16
 80161ca:	0c0b      	lsrs	r3, r1, #16
 80161cc:	fb02 3306 	mla	r3, r2, r6, r3
 80161d0:	b289      	uxth	r1, r1
 80161d2:	3001      	adds	r0, #1
 80161d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80161d8:	4285      	cmp	r5, r0
 80161da:	f84c 1b04 	str.w	r1, [ip], #4
 80161de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80161e2:	dcec      	bgt.n	80161be <__multadd+0x12>
 80161e4:	b30e      	cbz	r6, 801622a <__multadd+0x7e>
 80161e6:	68a3      	ldr	r3, [r4, #8]
 80161e8:	42ab      	cmp	r3, r5
 80161ea:	dc19      	bgt.n	8016220 <__multadd+0x74>
 80161ec:	6861      	ldr	r1, [r4, #4]
 80161ee:	4638      	mov	r0, r7
 80161f0:	3101      	adds	r1, #1
 80161f2:	f7ff ff79 	bl	80160e8 <_Balloc>
 80161f6:	4680      	mov	r8, r0
 80161f8:	b928      	cbnz	r0, 8016206 <__multadd+0x5a>
 80161fa:	4602      	mov	r2, r0
 80161fc:	4b0c      	ldr	r3, [pc, #48]	; (8016230 <__multadd+0x84>)
 80161fe:	480d      	ldr	r0, [pc, #52]	; (8016234 <__multadd+0x88>)
 8016200:	21b5      	movs	r1, #181	; 0xb5
 8016202:	f7ff fbb7 	bl	8015974 <__assert_func>
 8016206:	6922      	ldr	r2, [r4, #16]
 8016208:	3202      	adds	r2, #2
 801620a:	f104 010c 	add.w	r1, r4, #12
 801620e:	0092      	lsls	r2, r2, #2
 8016210:	300c      	adds	r0, #12
 8016212:	f7fe fcb3 	bl	8014b7c <memcpy>
 8016216:	4621      	mov	r1, r4
 8016218:	4638      	mov	r0, r7
 801621a:	f7ff ffa5 	bl	8016168 <_Bfree>
 801621e:	4644      	mov	r4, r8
 8016220:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016224:	3501      	adds	r5, #1
 8016226:	615e      	str	r6, [r3, #20]
 8016228:	6125      	str	r5, [r4, #16]
 801622a:	4620      	mov	r0, r4
 801622c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016230:	08018409 	.word	0x08018409
 8016234:	08018494 	.word	0x08018494

08016238 <__s2b>:
 8016238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801623c:	460c      	mov	r4, r1
 801623e:	4615      	mov	r5, r2
 8016240:	461f      	mov	r7, r3
 8016242:	2209      	movs	r2, #9
 8016244:	3308      	adds	r3, #8
 8016246:	4606      	mov	r6, r0
 8016248:	fb93 f3f2 	sdiv	r3, r3, r2
 801624c:	2100      	movs	r1, #0
 801624e:	2201      	movs	r2, #1
 8016250:	429a      	cmp	r2, r3
 8016252:	db09      	blt.n	8016268 <__s2b+0x30>
 8016254:	4630      	mov	r0, r6
 8016256:	f7ff ff47 	bl	80160e8 <_Balloc>
 801625a:	b940      	cbnz	r0, 801626e <__s2b+0x36>
 801625c:	4602      	mov	r2, r0
 801625e:	4b19      	ldr	r3, [pc, #100]	; (80162c4 <__s2b+0x8c>)
 8016260:	4819      	ldr	r0, [pc, #100]	; (80162c8 <__s2b+0x90>)
 8016262:	21ce      	movs	r1, #206	; 0xce
 8016264:	f7ff fb86 	bl	8015974 <__assert_func>
 8016268:	0052      	lsls	r2, r2, #1
 801626a:	3101      	adds	r1, #1
 801626c:	e7f0      	b.n	8016250 <__s2b+0x18>
 801626e:	9b08      	ldr	r3, [sp, #32]
 8016270:	6143      	str	r3, [r0, #20]
 8016272:	2d09      	cmp	r5, #9
 8016274:	f04f 0301 	mov.w	r3, #1
 8016278:	6103      	str	r3, [r0, #16]
 801627a:	dd16      	ble.n	80162aa <__s2b+0x72>
 801627c:	f104 0909 	add.w	r9, r4, #9
 8016280:	46c8      	mov	r8, r9
 8016282:	442c      	add	r4, r5
 8016284:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016288:	4601      	mov	r1, r0
 801628a:	3b30      	subs	r3, #48	; 0x30
 801628c:	220a      	movs	r2, #10
 801628e:	4630      	mov	r0, r6
 8016290:	f7ff ff8c 	bl	80161ac <__multadd>
 8016294:	45a0      	cmp	r8, r4
 8016296:	d1f5      	bne.n	8016284 <__s2b+0x4c>
 8016298:	f1a5 0408 	sub.w	r4, r5, #8
 801629c:	444c      	add	r4, r9
 801629e:	1b2d      	subs	r5, r5, r4
 80162a0:	1963      	adds	r3, r4, r5
 80162a2:	42bb      	cmp	r3, r7
 80162a4:	db04      	blt.n	80162b0 <__s2b+0x78>
 80162a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162aa:	340a      	adds	r4, #10
 80162ac:	2509      	movs	r5, #9
 80162ae:	e7f6      	b.n	801629e <__s2b+0x66>
 80162b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80162b4:	4601      	mov	r1, r0
 80162b6:	3b30      	subs	r3, #48	; 0x30
 80162b8:	220a      	movs	r2, #10
 80162ba:	4630      	mov	r0, r6
 80162bc:	f7ff ff76 	bl	80161ac <__multadd>
 80162c0:	e7ee      	b.n	80162a0 <__s2b+0x68>
 80162c2:	bf00      	nop
 80162c4:	08018409 	.word	0x08018409
 80162c8:	08018494 	.word	0x08018494

080162cc <__hi0bits>:
 80162cc:	0c03      	lsrs	r3, r0, #16
 80162ce:	041b      	lsls	r3, r3, #16
 80162d0:	b9d3      	cbnz	r3, 8016308 <__hi0bits+0x3c>
 80162d2:	0400      	lsls	r0, r0, #16
 80162d4:	2310      	movs	r3, #16
 80162d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80162da:	bf04      	itt	eq
 80162dc:	0200      	lsleq	r0, r0, #8
 80162de:	3308      	addeq	r3, #8
 80162e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80162e4:	bf04      	itt	eq
 80162e6:	0100      	lsleq	r0, r0, #4
 80162e8:	3304      	addeq	r3, #4
 80162ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80162ee:	bf04      	itt	eq
 80162f0:	0080      	lsleq	r0, r0, #2
 80162f2:	3302      	addeq	r3, #2
 80162f4:	2800      	cmp	r0, #0
 80162f6:	db05      	blt.n	8016304 <__hi0bits+0x38>
 80162f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80162fc:	f103 0301 	add.w	r3, r3, #1
 8016300:	bf08      	it	eq
 8016302:	2320      	moveq	r3, #32
 8016304:	4618      	mov	r0, r3
 8016306:	4770      	bx	lr
 8016308:	2300      	movs	r3, #0
 801630a:	e7e4      	b.n	80162d6 <__hi0bits+0xa>

0801630c <__lo0bits>:
 801630c:	6803      	ldr	r3, [r0, #0]
 801630e:	f013 0207 	ands.w	r2, r3, #7
 8016312:	4601      	mov	r1, r0
 8016314:	d00b      	beq.n	801632e <__lo0bits+0x22>
 8016316:	07da      	lsls	r2, r3, #31
 8016318:	d423      	bmi.n	8016362 <__lo0bits+0x56>
 801631a:	0798      	lsls	r0, r3, #30
 801631c:	bf49      	itett	mi
 801631e:	085b      	lsrmi	r3, r3, #1
 8016320:	089b      	lsrpl	r3, r3, #2
 8016322:	2001      	movmi	r0, #1
 8016324:	600b      	strmi	r3, [r1, #0]
 8016326:	bf5c      	itt	pl
 8016328:	600b      	strpl	r3, [r1, #0]
 801632a:	2002      	movpl	r0, #2
 801632c:	4770      	bx	lr
 801632e:	b298      	uxth	r0, r3
 8016330:	b9a8      	cbnz	r0, 801635e <__lo0bits+0x52>
 8016332:	0c1b      	lsrs	r3, r3, #16
 8016334:	2010      	movs	r0, #16
 8016336:	b2da      	uxtb	r2, r3
 8016338:	b90a      	cbnz	r2, 801633e <__lo0bits+0x32>
 801633a:	3008      	adds	r0, #8
 801633c:	0a1b      	lsrs	r3, r3, #8
 801633e:	071a      	lsls	r2, r3, #28
 8016340:	bf04      	itt	eq
 8016342:	091b      	lsreq	r3, r3, #4
 8016344:	3004      	addeq	r0, #4
 8016346:	079a      	lsls	r2, r3, #30
 8016348:	bf04      	itt	eq
 801634a:	089b      	lsreq	r3, r3, #2
 801634c:	3002      	addeq	r0, #2
 801634e:	07da      	lsls	r2, r3, #31
 8016350:	d403      	bmi.n	801635a <__lo0bits+0x4e>
 8016352:	085b      	lsrs	r3, r3, #1
 8016354:	f100 0001 	add.w	r0, r0, #1
 8016358:	d005      	beq.n	8016366 <__lo0bits+0x5a>
 801635a:	600b      	str	r3, [r1, #0]
 801635c:	4770      	bx	lr
 801635e:	4610      	mov	r0, r2
 8016360:	e7e9      	b.n	8016336 <__lo0bits+0x2a>
 8016362:	2000      	movs	r0, #0
 8016364:	4770      	bx	lr
 8016366:	2020      	movs	r0, #32
 8016368:	4770      	bx	lr
	...

0801636c <__i2b>:
 801636c:	b510      	push	{r4, lr}
 801636e:	460c      	mov	r4, r1
 8016370:	2101      	movs	r1, #1
 8016372:	f7ff feb9 	bl	80160e8 <_Balloc>
 8016376:	4602      	mov	r2, r0
 8016378:	b928      	cbnz	r0, 8016386 <__i2b+0x1a>
 801637a:	4b05      	ldr	r3, [pc, #20]	; (8016390 <__i2b+0x24>)
 801637c:	4805      	ldr	r0, [pc, #20]	; (8016394 <__i2b+0x28>)
 801637e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016382:	f7ff faf7 	bl	8015974 <__assert_func>
 8016386:	2301      	movs	r3, #1
 8016388:	6144      	str	r4, [r0, #20]
 801638a:	6103      	str	r3, [r0, #16]
 801638c:	bd10      	pop	{r4, pc}
 801638e:	bf00      	nop
 8016390:	08018409 	.word	0x08018409
 8016394:	08018494 	.word	0x08018494

08016398 <__multiply>:
 8016398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801639c:	4691      	mov	r9, r2
 801639e:	690a      	ldr	r2, [r1, #16]
 80163a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80163a4:	429a      	cmp	r2, r3
 80163a6:	bfb8      	it	lt
 80163a8:	460b      	movlt	r3, r1
 80163aa:	460c      	mov	r4, r1
 80163ac:	bfbc      	itt	lt
 80163ae:	464c      	movlt	r4, r9
 80163b0:	4699      	movlt	r9, r3
 80163b2:	6927      	ldr	r7, [r4, #16]
 80163b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80163b8:	68a3      	ldr	r3, [r4, #8]
 80163ba:	6861      	ldr	r1, [r4, #4]
 80163bc:	eb07 060a 	add.w	r6, r7, sl
 80163c0:	42b3      	cmp	r3, r6
 80163c2:	b085      	sub	sp, #20
 80163c4:	bfb8      	it	lt
 80163c6:	3101      	addlt	r1, #1
 80163c8:	f7ff fe8e 	bl	80160e8 <_Balloc>
 80163cc:	b930      	cbnz	r0, 80163dc <__multiply+0x44>
 80163ce:	4602      	mov	r2, r0
 80163d0:	4b44      	ldr	r3, [pc, #272]	; (80164e4 <__multiply+0x14c>)
 80163d2:	4845      	ldr	r0, [pc, #276]	; (80164e8 <__multiply+0x150>)
 80163d4:	f240 115d 	movw	r1, #349	; 0x15d
 80163d8:	f7ff facc 	bl	8015974 <__assert_func>
 80163dc:	f100 0514 	add.w	r5, r0, #20
 80163e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80163e4:	462b      	mov	r3, r5
 80163e6:	2200      	movs	r2, #0
 80163e8:	4543      	cmp	r3, r8
 80163ea:	d321      	bcc.n	8016430 <__multiply+0x98>
 80163ec:	f104 0314 	add.w	r3, r4, #20
 80163f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80163f4:	f109 0314 	add.w	r3, r9, #20
 80163f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80163fc:	9202      	str	r2, [sp, #8]
 80163fe:	1b3a      	subs	r2, r7, r4
 8016400:	3a15      	subs	r2, #21
 8016402:	f022 0203 	bic.w	r2, r2, #3
 8016406:	3204      	adds	r2, #4
 8016408:	f104 0115 	add.w	r1, r4, #21
 801640c:	428f      	cmp	r7, r1
 801640e:	bf38      	it	cc
 8016410:	2204      	movcc	r2, #4
 8016412:	9201      	str	r2, [sp, #4]
 8016414:	9a02      	ldr	r2, [sp, #8]
 8016416:	9303      	str	r3, [sp, #12]
 8016418:	429a      	cmp	r2, r3
 801641a:	d80c      	bhi.n	8016436 <__multiply+0x9e>
 801641c:	2e00      	cmp	r6, #0
 801641e:	dd03      	ble.n	8016428 <__multiply+0x90>
 8016420:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016424:	2b00      	cmp	r3, #0
 8016426:	d05a      	beq.n	80164de <__multiply+0x146>
 8016428:	6106      	str	r6, [r0, #16]
 801642a:	b005      	add	sp, #20
 801642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016430:	f843 2b04 	str.w	r2, [r3], #4
 8016434:	e7d8      	b.n	80163e8 <__multiply+0x50>
 8016436:	f8b3 a000 	ldrh.w	sl, [r3]
 801643a:	f1ba 0f00 	cmp.w	sl, #0
 801643e:	d024      	beq.n	801648a <__multiply+0xf2>
 8016440:	f104 0e14 	add.w	lr, r4, #20
 8016444:	46a9      	mov	r9, r5
 8016446:	f04f 0c00 	mov.w	ip, #0
 801644a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801644e:	f8d9 1000 	ldr.w	r1, [r9]
 8016452:	fa1f fb82 	uxth.w	fp, r2
 8016456:	b289      	uxth	r1, r1
 8016458:	fb0a 110b 	mla	r1, sl, fp, r1
 801645c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016460:	f8d9 2000 	ldr.w	r2, [r9]
 8016464:	4461      	add	r1, ip
 8016466:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801646a:	fb0a c20b 	mla	r2, sl, fp, ip
 801646e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016472:	b289      	uxth	r1, r1
 8016474:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016478:	4577      	cmp	r7, lr
 801647a:	f849 1b04 	str.w	r1, [r9], #4
 801647e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016482:	d8e2      	bhi.n	801644a <__multiply+0xb2>
 8016484:	9a01      	ldr	r2, [sp, #4]
 8016486:	f845 c002 	str.w	ip, [r5, r2]
 801648a:	9a03      	ldr	r2, [sp, #12]
 801648c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016490:	3304      	adds	r3, #4
 8016492:	f1b9 0f00 	cmp.w	r9, #0
 8016496:	d020      	beq.n	80164da <__multiply+0x142>
 8016498:	6829      	ldr	r1, [r5, #0]
 801649a:	f104 0c14 	add.w	ip, r4, #20
 801649e:	46ae      	mov	lr, r5
 80164a0:	f04f 0a00 	mov.w	sl, #0
 80164a4:	f8bc b000 	ldrh.w	fp, [ip]
 80164a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80164ac:	fb09 220b 	mla	r2, r9, fp, r2
 80164b0:	4492      	add	sl, r2
 80164b2:	b289      	uxth	r1, r1
 80164b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80164b8:	f84e 1b04 	str.w	r1, [lr], #4
 80164bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80164c0:	f8be 1000 	ldrh.w	r1, [lr]
 80164c4:	0c12      	lsrs	r2, r2, #16
 80164c6:	fb09 1102 	mla	r1, r9, r2, r1
 80164ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80164ce:	4567      	cmp	r7, ip
 80164d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80164d4:	d8e6      	bhi.n	80164a4 <__multiply+0x10c>
 80164d6:	9a01      	ldr	r2, [sp, #4]
 80164d8:	50a9      	str	r1, [r5, r2]
 80164da:	3504      	adds	r5, #4
 80164dc:	e79a      	b.n	8016414 <__multiply+0x7c>
 80164de:	3e01      	subs	r6, #1
 80164e0:	e79c      	b.n	801641c <__multiply+0x84>
 80164e2:	bf00      	nop
 80164e4:	08018409 	.word	0x08018409
 80164e8:	08018494 	.word	0x08018494

080164ec <__pow5mult>:
 80164ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164f0:	4615      	mov	r5, r2
 80164f2:	f012 0203 	ands.w	r2, r2, #3
 80164f6:	4606      	mov	r6, r0
 80164f8:	460f      	mov	r7, r1
 80164fa:	d007      	beq.n	801650c <__pow5mult+0x20>
 80164fc:	4c25      	ldr	r4, [pc, #148]	; (8016594 <__pow5mult+0xa8>)
 80164fe:	3a01      	subs	r2, #1
 8016500:	2300      	movs	r3, #0
 8016502:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016506:	f7ff fe51 	bl	80161ac <__multadd>
 801650a:	4607      	mov	r7, r0
 801650c:	10ad      	asrs	r5, r5, #2
 801650e:	d03d      	beq.n	801658c <__pow5mult+0xa0>
 8016510:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016512:	b97c      	cbnz	r4, 8016534 <__pow5mult+0x48>
 8016514:	2010      	movs	r0, #16
 8016516:	f7ff fdcd 	bl	80160b4 <malloc>
 801651a:	4602      	mov	r2, r0
 801651c:	6270      	str	r0, [r6, #36]	; 0x24
 801651e:	b928      	cbnz	r0, 801652c <__pow5mult+0x40>
 8016520:	4b1d      	ldr	r3, [pc, #116]	; (8016598 <__pow5mult+0xac>)
 8016522:	481e      	ldr	r0, [pc, #120]	; (801659c <__pow5mult+0xb0>)
 8016524:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016528:	f7ff fa24 	bl	8015974 <__assert_func>
 801652c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016530:	6004      	str	r4, [r0, #0]
 8016532:	60c4      	str	r4, [r0, #12]
 8016534:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016538:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801653c:	b94c      	cbnz	r4, 8016552 <__pow5mult+0x66>
 801653e:	f240 2171 	movw	r1, #625	; 0x271
 8016542:	4630      	mov	r0, r6
 8016544:	f7ff ff12 	bl	801636c <__i2b>
 8016548:	2300      	movs	r3, #0
 801654a:	f8c8 0008 	str.w	r0, [r8, #8]
 801654e:	4604      	mov	r4, r0
 8016550:	6003      	str	r3, [r0, #0]
 8016552:	f04f 0900 	mov.w	r9, #0
 8016556:	07eb      	lsls	r3, r5, #31
 8016558:	d50a      	bpl.n	8016570 <__pow5mult+0x84>
 801655a:	4639      	mov	r1, r7
 801655c:	4622      	mov	r2, r4
 801655e:	4630      	mov	r0, r6
 8016560:	f7ff ff1a 	bl	8016398 <__multiply>
 8016564:	4639      	mov	r1, r7
 8016566:	4680      	mov	r8, r0
 8016568:	4630      	mov	r0, r6
 801656a:	f7ff fdfd 	bl	8016168 <_Bfree>
 801656e:	4647      	mov	r7, r8
 8016570:	106d      	asrs	r5, r5, #1
 8016572:	d00b      	beq.n	801658c <__pow5mult+0xa0>
 8016574:	6820      	ldr	r0, [r4, #0]
 8016576:	b938      	cbnz	r0, 8016588 <__pow5mult+0x9c>
 8016578:	4622      	mov	r2, r4
 801657a:	4621      	mov	r1, r4
 801657c:	4630      	mov	r0, r6
 801657e:	f7ff ff0b 	bl	8016398 <__multiply>
 8016582:	6020      	str	r0, [r4, #0]
 8016584:	f8c0 9000 	str.w	r9, [r0]
 8016588:	4604      	mov	r4, r0
 801658a:	e7e4      	b.n	8016556 <__pow5mult+0x6a>
 801658c:	4638      	mov	r0, r7
 801658e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016592:	bf00      	nop
 8016594:	080185e0 	.word	0x080185e0
 8016598:	08018258 	.word	0x08018258
 801659c:	08018494 	.word	0x08018494

080165a0 <__lshift>:
 80165a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165a4:	460c      	mov	r4, r1
 80165a6:	6849      	ldr	r1, [r1, #4]
 80165a8:	6923      	ldr	r3, [r4, #16]
 80165aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80165ae:	68a3      	ldr	r3, [r4, #8]
 80165b0:	4607      	mov	r7, r0
 80165b2:	4691      	mov	r9, r2
 80165b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80165b8:	f108 0601 	add.w	r6, r8, #1
 80165bc:	42b3      	cmp	r3, r6
 80165be:	db0b      	blt.n	80165d8 <__lshift+0x38>
 80165c0:	4638      	mov	r0, r7
 80165c2:	f7ff fd91 	bl	80160e8 <_Balloc>
 80165c6:	4605      	mov	r5, r0
 80165c8:	b948      	cbnz	r0, 80165de <__lshift+0x3e>
 80165ca:	4602      	mov	r2, r0
 80165cc:	4b2a      	ldr	r3, [pc, #168]	; (8016678 <__lshift+0xd8>)
 80165ce:	482b      	ldr	r0, [pc, #172]	; (801667c <__lshift+0xdc>)
 80165d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80165d4:	f7ff f9ce 	bl	8015974 <__assert_func>
 80165d8:	3101      	adds	r1, #1
 80165da:	005b      	lsls	r3, r3, #1
 80165dc:	e7ee      	b.n	80165bc <__lshift+0x1c>
 80165de:	2300      	movs	r3, #0
 80165e0:	f100 0114 	add.w	r1, r0, #20
 80165e4:	f100 0210 	add.w	r2, r0, #16
 80165e8:	4618      	mov	r0, r3
 80165ea:	4553      	cmp	r3, sl
 80165ec:	db37      	blt.n	801665e <__lshift+0xbe>
 80165ee:	6920      	ldr	r0, [r4, #16]
 80165f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80165f4:	f104 0314 	add.w	r3, r4, #20
 80165f8:	f019 091f 	ands.w	r9, r9, #31
 80165fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016600:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016604:	d02f      	beq.n	8016666 <__lshift+0xc6>
 8016606:	f1c9 0e20 	rsb	lr, r9, #32
 801660a:	468a      	mov	sl, r1
 801660c:	f04f 0c00 	mov.w	ip, #0
 8016610:	681a      	ldr	r2, [r3, #0]
 8016612:	fa02 f209 	lsl.w	r2, r2, r9
 8016616:	ea42 020c 	orr.w	r2, r2, ip
 801661a:	f84a 2b04 	str.w	r2, [sl], #4
 801661e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016622:	4298      	cmp	r0, r3
 8016624:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016628:	d8f2      	bhi.n	8016610 <__lshift+0x70>
 801662a:	1b03      	subs	r3, r0, r4
 801662c:	3b15      	subs	r3, #21
 801662e:	f023 0303 	bic.w	r3, r3, #3
 8016632:	3304      	adds	r3, #4
 8016634:	f104 0215 	add.w	r2, r4, #21
 8016638:	4290      	cmp	r0, r2
 801663a:	bf38      	it	cc
 801663c:	2304      	movcc	r3, #4
 801663e:	f841 c003 	str.w	ip, [r1, r3]
 8016642:	f1bc 0f00 	cmp.w	ip, #0
 8016646:	d001      	beq.n	801664c <__lshift+0xac>
 8016648:	f108 0602 	add.w	r6, r8, #2
 801664c:	3e01      	subs	r6, #1
 801664e:	4638      	mov	r0, r7
 8016650:	612e      	str	r6, [r5, #16]
 8016652:	4621      	mov	r1, r4
 8016654:	f7ff fd88 	bl	8016168 <_Bfree>
 8016658:	4628      	mov	r0, r5
 801665a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801665e:	f842 0f04 	str.w	r0, [r2, #4]!
 8016662:	3301      	adds	r3, #1
 8016664:	e7c1      	b.n	80165ea <__lshift+0x4a>
 8016666:	3904      	subs	r1, #4
 8016668:	f853 2b04 	ldr.w	r2, [r3], #4
 801666c:	f841 2f04 	str.w	r2, [r1, #4]!
 8016670:	4298      	cmp	r0, r3
 8016672:	d8f9      	bhi.n	8016668 <__lshift+0xc8>
 8016674:	e7ea      	b.n	801664c <__lshift+0xac>
 8016676:	bf00      	nop
 8016678:	08018409 	.word	0x08018409
 801667c:	08018494 	.word	0x08018494

08016680 <__mcmp>:
 8016680:	b530      	push	{r4, r5, lr}
 8016682:	6902      	ldr	r2, [r0, #16]
 8016684:	690c      	ldr	r4, [r1, #16]
 8016686:	1b12      	subs	r2, r2, r4
 8016688:	d10e      	bne.n	80166a8 <__mcmp+0x28>
 801668a:	f100 0314 	add.w	r3, r0, #20
 801668e:	3114      	adds	r1, #20
 8016690:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016694:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016698:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801669c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80166a0:	42a5      	cmp	r5, r4
 80166a2:	d003      	beq.n	80166ac <__mcmp+0x2c>
 80166a4:	d305      	bcc.n	80166b2 <__mcmp+0x32>
 80166a6:	2201      	movs	r2, #1
 80166a8:	4610      	mov	r0, r2
 80166aa:	bd30      	pop	{r4, r5, pc}
 80166ac:	4283      	cmp	r3, r0
 80166ae:	d3f3      	bcc.n	8016698 <__mcmp+0x18>
 80166b0:	e7fa      	b.n	80166a8 <__mcmp+0x28>
 80166b2:	f04f 32ff 	mov.w	r2, #4294967295
 80166b6:	e7f7      	b.n	80166a8 <__mcmp+0x28>

080166b8 <__mdiff>:
 80166b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166bc:	460c      	mov	r4, r1
 80166be:	4606      	mov	r6, r0
 80166c0:	4611      	mov	r1, r2
 80166c2:	4620      	mov	r0, r4
 80166c4:	4690      	mov	r8, r2
 80166c6:	f7ff ffdb 	bl	8016680 <__mcmp>
 80166ca:	1e05      	subs	r5, r0, #0
 80166cc:	d110      	bne.n	80166f0 <__mdiff+0x38>
 80166ce:	4629      	mov	r1, r5
 80166d0:	4630      	mov	r0, r6
 80166d2:	f7ff fd09 	bl	80160e8 <_Balloc>
 80166d6:	b930      	cbnz	r0, 80166e6 <__mdiff+0x2e>
 80166d8:	4b3a      	ldr	r3, [pc, #232]	; (80167c4 <__mdiff+0x10c>)
 80166da:	4602      	mov	r2, r0
 80166dc:	f240 2132 	movw	r1, #562	; 0x232
 80166e0:	4839      	ldr	r0, [pc, #228]	; (80167c8 <__mdiff+0x110>)
 80166e2:	f7ff f947 	bl	8015974 <__assert_func>
 80166e6:	2301      	movs	r3, #1
 80166e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80166ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166f0:	bfa4      	itt	ge
 80166f2:	4643      	movge	r3, r8
 80166f4:	46a0      	movge	r8, r4
 80166f6:	4630      	mov	r0, r6
 80166f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80166fc:	bfa6      	itte	ge
 80166fe:	461c      	movge	r4, r3
 8016700:	2500      	movge	r5, #0
 8016702:	2501      	movlt	r5, #1
 8016704:	f7ff fcf0 	bl	80160e8 <_Balloc>
 8016708:	b920      	cbnz	r0, 8016714 <__mdiff+0x5c>
 801670a:	4b2e      	ldr	r3, [pc, #184]	; (80167c4 <__mdiff+0x10c>)
 801670c:	4602      	mov	r2, r0
 801670e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016712:	e7e5      	b.n	80166e0 <__mdiff+0x28>
 8016714:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016718:	6926      	ldr	r6, [r4, #16]
 801671a:	60c5      	str	r5, [r0, #12]
 801671c:	f104 0914 	add.w	r9, r4, #20
 8016720:	f108 0514 	add.w	r5, r8, #20
 8016724:	f100 0e14 	add.w	lr, r0, #20
 8016728:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801672c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016730:	f108 0210 	add.w	r2, r8, #16
 8016734:	46f2      	mov	sl, lr
 8016736:	2100      	movs	r1, #0
 8016738:	f859 3b04 	ldr.w	r3, [r9], #4
 801673c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016740:	fa1f f883 	uxth.w	r8, r3
 8016744:	fa11 f18b 	uxtah	r1, r1, fp
 8016748:	0c1b      	lsrs	r3, r3, #16
 801674a:	eba1 0808 	sub.w	r8, r1, r8
 801674e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016752:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016756:	fa1f f888 	uxth.w	r8, r8
 801675a:	1419      	asrs	r1, r3, #16
 801675c:	454e      	cmp	r6, r9
 801675e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016762:	f84a 3b04 	str.w	r3, [sl], #4
 8016766:	d8e7      	bhi.n	8016738 <__mdiff+0x80>
 8016768:	1b33      	subs	r3, r6, r4
 801676a:	3b15      	subs	r3, #21
 801676c:	f023 0303 	bic.w	r3, r3, #3
 8016770:	3304      	adds	r3, #4
 8016772:	3415      	adds	r4, #21
 8016774:	42a6      	cmp	r6, r4
 8016776:	bf38      	it	cc
 8016778:	2304      	movcc	r3, #4
 801677a:	441d      	add	r5, r3
 801677c:	4473      	add	r3, lr
 801677e:	469e      	mov	lr, r3
 8016780:	462e      	mov	r6, r5
 8016782:	4566      	cmp	r6, ip
 8016784:	d30e      	bcc.n	80167a4 <__mdiff+0xec>
 8016786:	f10c 0203 	add.w	r2, ip, #3
 801678a:	1b52      	subs	r2, r2, r5
 801678c:	f022 0203 	bic.w	r2, r2, #3
 8016790:	3d03      	subs	r5, #3
 8016792:	45ac      	cmp	ip, r5
 8016794:	bf38      	it	cc
 8016796:	2200      	movcc	r2, #0
 8016798:	441a      	add	r2, r3
 801679a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801679e:	b17b      	cbz	r3, 80167c0 <__mdiff+0x108>
 80167a0:	6107      	str	r7, [r0, #16]
 80167a2:	e7a3      	b.n	80166ec <__mdiff+0x34>
 80167a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80167a8:	fa11 f288 	uxtah	r2, r1, r8
 80167ac:	1414      	asrs	r4, r2, #16
 80167ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80167b2:	b292      	uxth	r2, r2
 80167b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80167b8:	f84e 2b04 	str.w	r2, [lr], #4
 80167bc:	1421      	asrs	r1, r4, #16
 80167be:	e7e0      	b.n	8016782 <__mdiff+0xca>
 80167c0:	3f01      	subs	r7, #1
 80167c2:	e7ea      	b.n	801679a <__mdiff+0xe2>
 80167c4:	08018409 	.word	0x08018409
 80167c8:	08018494 	.word	0x08018494

080167cc <__ulp>:
 80167cc:	b082      	sub	sp, #8
 80167ce:	ed8d 0b00 	vstr	d0, [sp]
 80167d2:	9b01      	ldr	r3, [sp, #4]
 80167d4:	4912      	ldr	r1, [pc, #72]	; (8016820 <__ulp+0x54>)
 80167d6:	4019      	ands	r1, r3
 80167d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80167dc:	2900      	cmp	r1, #0
 80167de:	dd05      	ble.n	80167ec <__ulp+0x20>
 80167e0:	2200      	movs	r2, #0
 80167e2:	460b      	mov	r3, r1
 80167e4:	ec43 2b10 	vmov	d0, r2, r3
 80167e8:	b002      	add	sp, #8
 80167ea:	4770      	bx	lr
 80167ec:	4249      	negs	r1, r1
 80167ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80167f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80167f6:	f04f 0200 	mov.w	r2, #0
 80167fa:	f04f 0300 	mov.w	r3, #0
 80167fe:	da04      	bge.n	801680a <__ulp+0x3e>
 8016800:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016804:	fa41 f300 	asr.w	r3, r1, r0
 8016808:	e7ec      	b.n	80167e4 <__ulp+0x18>
 801680a:	f1a0 0114 	sub.w	r1, r0, #20
 801680e:	291e      	cmp	r1, #30
 8016810:	bfda      	itte	le
 8016812:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016816:	fa20 f101 	lsrle.w	r1, r0, r1
 801681a:	2101      	movgt	r1, #1
 801681c:	460a      	mov	r2, r1
 801681e:	e7e1      	b.n	80167e4 <__ulp+0x18>
 8016820:	7ff00000 	.word	0x7ff00000

08016824 <__b2d>:
 8016824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016826:	6905      	ldr	r5, [r0, #16]
 8016828:	f100 0714 	add.w	r7, r0, #20
 801682c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016830:	1f2e      	subs	r6, r5, #4
 8016832:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016836:	4620      	mov	r0, r4
 8016838:	f7ff fd48 	bl	80162cc <__hi0bits>
 801683c:	f1c0 0320 	rsb	r3, r0, #32
 8016840:	280a      	cmp	r0, #10
 8016842:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80168c0 <__b2d+0x9c>
 8016846:	600b      	str	r3, [r1, #0]
 8016848:	dc14      	bgt.n	8016874 <__b2d+0x50>
 801684a:	f1c0 0e0b 	rsb	lr, r0, #11
 801684e:	fa24 f10e 	lsr.w	r1, r4, lr
 8016852:	42b7      	cmp	r7, r6
 8016854:	ea41 030c 	orr.w	r3, r1, ip
 8016858:	bf34      	ite	cc
 801685a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801685e:	2100      	movcs	r1, #0
 8016860:	3015      	adds	r0, #21
 8016862:	fa04 f000 	lsl.w	r0, r4, r0
 8016866:	fa21 f10e 	lsr.w	r1, r1, lr
 801686a:	ea40 0201 	orr.w	r2, r0, r1
 801686e:	ec43 2b10 	vmov	d0, r2, r3
 8016872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016874:	42b7      	cmp	r7, r6
 8016876:	bf3a      	itte	cc
 8016878:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801687c:	f1a5 0608 	subcc.w	r6, r5, #8
 8016880:	2100      	movcs	r1, #0
 8016882:	380b      	subs	r0, #11
 8016884:	d017      	beq.n	80168b6 <__b2d+0x92>
 8016886:	f1c0 0c20 	rsb	ip, r0, #32
 801688a:	fa04 f500 	lsl.w	r5, r4, r0
 801688e:	42be      	cmp	r6, r7
 8016890:	fa21 f40c 	lsr.w	r4, r1, ip
 8016894:	ea45 0504 	orr.w	r5, r5, r4
 8016898:	bf8c      	ite	hi
 801689a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801689e:	2400      	movls	r4, #0
 80168a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80168a4:	fa01 f000 	lsl.w	r0, r1, r0
 80168a8:	fa24 f40c 	lsr.w	r4, r4, ip
 80168ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80168b0:	ea40 0204 	orr.w	r2, r0, r4
 80168b4:	e7db      	b.n	801686e <__b2d+0x4a>
 80168b6:	ea44 030c 	orr.w	r3, r4, ip
 80168ba:	460a      	mov	r2, r1
 80168bc:	e7d7      	b.n	801686e <__b2d+0x4a>
 80168be:	bf00      	nop
 80168c0:	3ff00000 	.word	0x3ff00000

080168c4 <__d2b>:
 80168c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80168c8:	4689      	mov	r9, r1
 80168ca:	2101      	movs	r1, #1
 80168cc:	ec57 6b10 	vmov	r6, r7, d0
 80168d0:	4690      	mov	r8, r2
 80168d2:	f7ff fc09 	bl	80160e8 <_Balloc>
 80168d6:	4604      	mov	r4, r0
 80168d8:	b930      	cbnz	r0, 80168e8 <__d2b+0x24>
 80168da:	4602      	mov	r2, r0
 80168dc:	4b25      	ldr	r3, [pc, #148]	; (8016974 <__d2b+0xb0>)
 80168de:	4826      	ldr	r0, [pc, #152]	; (8016978 <__d2b+0xb4>)
 80168e0:	f240 310a 	movw	r1, #778	; 0x30a
 80168e4:	f7ff f846 	bl	8015974 <__assert_func>
 80168e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80168ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80168f0:	bb35      	cbnz	r5, 8016940 <__d2b+0x7c>
 80168f2:	2e00      	cmp	r6, #0
 80168f4:	9301      	str	r3, [sp, #4]
 80168f6:	d028      	beq.n	801694a <__d2b+0x86>
 80168f8:	4668      	mov	r0, sp
 80168fa:	9600      	str	r6, [sp, #0]
 80168fc:	f7ff fd06 	bl	801630c <__lo0bits>
 8016900:	9900      	ldr	r1, [sp, #0]
 8016902:	b300      	cbz	r0, 8016946 <__d2b+0x82>
 8016904:	9a01      	ldr	r2, [sp, #4]
 8016906:	f1c0 0320 	rsb	r3, r0, #32
 801690a:	fa02 f303 	lsl.w	r3, r2, r3
 801690e:	430b      	orrs	r3, r1
 8016910:	40c2      	lsrs	r2, r0
 8016912:	6163      	str	r3, [r4, #20]
 8016914:	9201      	str	r2, [sp, #4]
 8016916:	9b01      	ldr	r3, [sp, #4]
 8016918:	61a3      	str	r3, [r4, #24]
 801691a:	2b00      	cmp	r3, #0
 801691c:	bf14      	ite	ne
 801691e:	2202      	movne	r2, #2
 8016920:	2201      	moveq	r2, #1
 8016922:	6122      	str	r2, [r4, #16]
 8016924:	b1d5      	cbz	r5, 801695c <__d2b+0x98>
 8016926:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801692a:	4405      	add	r5, r0
 801692c:	f8c9 5000 	str.w	r5, [r9]
 8016930:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016934:	f8c8 0000 	str.w	r0, [r8]
 8016938:	4620      	mov	r0, r4
 801693a:	b003      	add	sp, #12
 801693c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016940:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016944:	e7d5      	b.n	80168f2 <__d2b+0x2e>
 8016946:	6161      	str	r1, [r4, #20]
 8016948:	e7e5      	b.n	8016916 <__d2b+0x52>
 801694a:	a801      	add	r0, sp, #4
 801694c:	f7ff fcde 	bl	801630c <__lo0bits>
 8016950:	9b01      	ldr	r3, [sp, #4]
 8016952:	6163      	str	r3, [r4, #20]
 8016954:	2201      	movs	r2, #1
 8016956:	6122      	str	r2, [r4, #16]
 8016958:	3020      	adds	r0, #32
 801695a:	e7e3      	b.n	8016924 <__d2b+0x60>
 801695c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016960:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016964:	f8c9 0000 	str.w	r0, [r9]
 8016968:	6918      	ldr	r0, [r3, #16]
 801696a:	f7ff fcaf 	bl	80162cc <__hi0bits>
 801696e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016972:	e7df      	b.n	8016934 <__d2b+0x70>
 8016974:	08018409 	.word	0x08018409
 8016978:	08018494 	.word	0x08018494

0801697c <__ratio>:
 801697c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016980:	4688      	mov	r8, r1
 8016982:	4669      	mov	r1, sp
 8016984:	4681      	mov	r9, r0
 8016986:	f7ff ff4d 	bl	8016824 <__b2d>
 801698a:	a901      	add	r1, sp, #4
 801698c:	4640      	mov	r0, r8
 801698e:	ec55 4b10 	vmov	r4, r5, d0
 8016992:	ee10 aa10 	vmov	sl, s0
 8016996:	f7ff ff45 	bl	8016824 <__b2d>
 801699a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801699e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80169a2:	1a59      	subs	r1, r3, r1
 80169a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80169a8:	1ad3      	subs	r3, r2, r3
 80169aa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80169ae:	ec57 6b10 	vmov	r6, r7, d0
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	bfd6      	itet	le
 80169b6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80169ba:	462a      	movgt	r2, r5
 80169bc:	463a      	movle	r2, r7
 80169be:	46ab      	mov	fp, r5
 80169c0:	bfd6      	itet	le
 80169c2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80169c6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80169ca:	ee00 3a90 	vmovle	s1, r3
 80169ce:	ec4b ab17 	vmov	d7, sl, fp
 80169d2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80169d6:	b003      	add	sp, #12
 80169d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080169dc <__copybits>:
 80169dc:	3901      	subs	r1, #1
 80169de:	b570      	push	{r4, r5, r6, lr}
 80169e0:	1149      	asrs	r1, r1, #5
 80169e2:	6914      	ldr	r4, [r2, #16]
 80169e4:	3101      	adds	r1, #1
 80169e6:	f102 0314 	add.w	r3, r2, #20
 80169ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80169ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80169f2:	1f05      	subs	r5, r0, #4
 80169f4:	42a3      	cmp	r3, r4
 80169f6:	d30c      	bcc.n	8016a12 <__copybits+0x36>
 80169f8:	1aa3      	subs	r3, r4, r2
 80169fa:	3b11      	subs	r3, #17
 80169fc:	f023 0303 	bic.w	r3, r3, #3
 8016a00:	3211      	adds	r2, #17
 8016a02:	42a2      	cmp	r2, r4
 8016a04:	bf88      	it	hi
 8016a06:	2300      	movhi	r3, #0
 8016a08:	4418      	add	r0, r3
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	4288      	cmp	r0, r1
 8016a0e:	d305      	bcc.n	8016a1c <__copybits+0x40>
 8016a10:	bd70      	pop	{r4, r5, r6, pc}
 8016a12:	f853 6b04 	ldr.w	r6, [r3], #4
 8016a16:	f845 6f04 	str.w	r6, [r5, #4]!
 8016a1a:	e7eb      	b.n	80169f4 <__copybits+0x18>
 8016a1c:	f840 3b04 	str.w	r3, [r0], #4
 8016a20:	e7f4      	b.n	8016a0c <__copybits+0x30>

08016a22 <__any_on>:
 8016a22:	f100 0214 	add.w	r2, r0, #20
 8016a26:	6900      	ldr	r0, [r0, #16]
 8016a28:	114b      	asrs	r3, r1, #5
 8016a2a:	4298      	cmp	r0, r3
 8016a2c:	b510      	push	{r4, lr}
 8016a2e:	db11      	blt.n	8016a54 <__any_on+0x32>
 8016a30:	dd0a      	ble.n	8016a48 <__any_on+0x26>
 8016a32:	f011 011f 	ands.w	r1, r1, #31
 8016a36:	d007      	beq.n	8016a48 <__any_on+0x26>
 8016a38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016a3c:	fa24 f001 	lsr.w	r0, r4, r1
 8016a40:	fa00 f101 	lsl.w	r1, r0, r1
 8016a44:	428c      	cmp	r4, r1
 8016a46:	d10b      	bne.n	8016a60 <__any_on+0x3e>
 8016a48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016a4c:	4293      	cmp	r3, r2
 8016a4e:	d803      	bhi.n	8016a58 <__any_on+0x36>
 8016a50:	2000      	movs	r0, #0
 8016a52:	bd10      	pop	{r4, pc}
 8016a54:	4603      	mov	r3, r0
 8016a56:	e7f7      	b.n	8016a48 <__any_on+0x26>
 8016a58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016a5c:	2900      	cmp	r1, #0
 8016a5e:	d0f5      	beq.n	8016a4c <__any_on+0x2a>
 8016a60:	2001      	movs	r0, #1
 8016a62:	e7f6      	b.n	8016a52 <__any_on+0x30>

08016a64 <_calloc_r>:
 8016a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a66:	fba1 2402 	umull	r2, r4, r1, r2
 8016a6a:	b94c      	cbnz	r4, 8016a80 <_calloc_r+0x1c>
 8016a6c:	4611      	mov	r1, r2
 8016a6e:	9201      	str	r2, [sp, #4]
 8016a70:	f000 f87a 	bl	8016b68 <_malloc_r>
 8016a74:	9a01      	ldr	r2, [sp, #4]
 8016a76:	4605      	mov	r5, r0
 8016a78:	b930      	cbnz	r0, 8016a88 <_calloc_r+0x24>
 8016a7a:	4628      	mov	r0, r5
 8016a7c:	b003      	add	sp, #12
 8016a7e:	bd30      	pop	{r4, r5, pc}
 8016a80:	220c      	movs	r2, #12
 8016a82:	6002      	str	r2, [r0, #0]
 8016a84:	2500      	movs	r5, #0
 8016a86:	e7f8      	b.n	8016a7a <_calloc_r+0x16>
 8016a88:	4621      	mov	r1, r4
 8016a8a:	f7fe f885 	bl	8014b98 <memset>
 8016a8e:	e7f4      	b.n	8016a7a <_calloc_r+0x16>

08016a90 <_free_r>:
 8016a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a92:	2900      	cmp	r1, #0
 8016a94:	d044      	beq.n	8016b20 <_free_r+0x90>
 8016a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a9a:	9001      	str	r0, [sp, #4]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	f1a1 0404 	sub.w	r4, r1, #4
 8016aa2:	bfb8      	it	lt
 8016aa4:	18e4      	addlt	r4, r4, r3
 8016aa6:	f001 f85b 	bl	8017b60 <__malloc_lock>
 8016aaa:	4a1e      	ldr	r2, [pc, #120]	; (8016b24 <_free_r+0x94>)
 8016aac:	9801      	ldr	r0, [sp, #4]
 8016aae:	6813      	ldr	r3, [r2, #0]
 8016ab0:	b933      	cbnz	r3, 8016ac0 <_free_r+0x30>
 8016ab2:	6063      	str	r3, [r4, #4]
 8016ab4:	6014      	str	r4, [r2, #0]
 8016ab6:	b003      	add	sp, #12
 8016ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016abc:	f001 b856 	b.w	8017b6c <__malloc_unlock>
 8016ac0:	42a3      	cmp	r3, r4
 8016ac2:	d908      	bls.n	8016ad6 <_free_r+0x46>
 8016ac4:	6825      	ldr	r5, [r4, #0]
 8016ac6:	1961      	adds	r1, r4, r5
 8016ac8:	428b      	cmp	r3, r1
 8016aca:	bf01      	itttt	eq
 8016acc:	6819      	ldreq	r1, [r3, #0]
 8016ace:	685b      	ldreq	r3, [r3, #4]
 8016ad0:	1949      	addeq	r1, r1, r5
 8016ad2:	6021      	streq	r1, [r4, #0]
 8016ad4:	e7ed      	b.n	8016ab2 <_free_r+0x22>
 8016ad6:	461a      	mov	r2, r3
 8016ad8:	685b      	ldr	r3, [r3, #4]
 8016ada:	b10b      	cbz	r3, 8016ae0 <_free_r+0x50>
 8016adc:	42a3      	cmp	r3, r4
 8016ade:	d9fa      	bls.n	8016ad6 <_free_r+0x46>
 8016ae0:	6811      	ldr	r1, [r2, #0]
 8016ae2:	1855      	adds	r5, r2, r1
 8016ae4:	42a5      	cmp	r5, r4
 8016ae6:	d10b      	bne.n	8016b00 <_free_r+0x70>
 8016ae8:	6824      	ldr	r4, [r4, #0]
 8016aea:	4421      	add	r1, r4
 8016aec:	1854      	adds	r4, r2, r1
 8016aee:	42a3      	cmp	r3, r4
 8016af0:	6011      	str	r1, [r2, #0]
 8016af2:	d1e0      	bne.n	8016ab6 <_free_r+0x26>
 8016af4:	681c      	ldr	r4, [r3, #0]
 8016af6:	685b      	ldr	r3, [r3, #4]
 8016af8:	6053      	str	r3, [r2, #4]
 8016afa:	4421      	add	r1, r4
 8016afc:	6011      	str	r1, [r2, #0]
 8016afe:	e7da      	b.n	8016ab6 <_free_r+0x26>
 8016b00:	d902      	bls.n	8016b08 <_free_r+0x78>
 8016b02:	230c      	movs	r3, #12
 8016b04:	6003      	str	r3, [r0, #0]
 8016b06:	e7d6      	b.n	8016ab6 <_free_r+0x26>
 8016b08:	6825      	ldr	r5, [r4, #0]
 8016b0a:	1961      	adds	r1, r4, r5
 8016b0c:	428b      	cmp	r3, r1
 8016b0e:	bf04      	itt	eq
 8016b10:	6819      	ldreq	r1, [r3, #0]
 8016b12:	685b      	ldreq	r3, [r3, #4]
 8016b14:	6063      	str	r3, [r4, #4]
 8016b16:	bf04      	itt	eq
 8016b18:	1949      	addeq	r1, r1, r5
 8016b1a:	6021      	streq	r1, [r4, #0]
 8016b1c:	6054      	str	r4, [r2, #4]
 8016b1e:	e7ca      	b.n	8016ab6 <_free_r+0x26>
 8016b20:	b003      	add	sp, #12
 8016b22:	bd30      	pop	{r4, r5, pc}
 8016b24:	24008eb8 	.word	0x24008eb8

08016b28 <sbrk_aligned>:
 8016b28:	b570      	push	{r4, r5, r6, lr}
 8016b2a:	4e0e      	ldr	r6, [pc, #56]	; (8016b64 <sbrk_aligned+0x3c>)
 8016b2c:	460c      	mov	r4, r1
 8016b2e:	6831      	ldr	r1, [r6, #0]
 8016b30:	4605      	mov	r5, r0
 8016b32:	b911      	cbnz	r1, 8016b3a <sbrk_aligned+0x12>
 8016b34:	f000 fce0 	bl	80174f8 <_sbrk_r>
 8016b38:	6030      	str	r0, [r6, #0]
 8016b3a:	4621      	mov	r1, r4
 8016b3c:	4628      	mov	r0, r5
 8016b3e:	f000 fcdb 	bl	80174f8 <_sbrk_r>
 8016b42:	1c43      	adds	r3, r0, #1
 8016b44:	d00a      	beq.n	8016b5c <sbrk_aligned+0x34>
 8016b46:	1cc4      	adds	r4, r0, #3
 8016b48:	f024 0403 	bic.w	r4, r4, #3
 8016b4c:	42a0      	cmp	r0, r4
 8016b4e:	d007      	beq.n	8016b60 <sbrk_aligned+0x38>
 8016b50:	1a21      	subs	r1, r4, r0
 8016b52:	4628      	mov	r0, r5
 8016b54:	f000 fcd0 	bl	80174f8 <_sbrk_r>
 8016b58:	3001      	adds	r0, #1
 8016b5a:	d101      	bne.n	8016b60 <sbrk_aligned+0x38>
 8016b5c:	f04f 34ff 	mov.w	r4, #4294967295
 8016b60:	4620      	mov	r0, r4
 8016b62:	bd70      	pop	{r4, r5, r6, pc}
 8016b64:	24008ebc 	.word	0x24008ebc

08016b68 <_malloc_r>:
 8016b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b6c:	1ccd      	adds	r5, r1, #3
 8016b6e:	f025 0503 	bic.w	r5, r5, #3
 8016b72:	3508      	adds	r5, #8
 8016b74:	2d0c      	cmp	r5, #12
 8016b76:	bf38      	it	cc
 8016b78:	250c      	movcc	r5, #12
 8016b7a:	2d00      	cmp	r5, #0
 8016b7c:	4607      	mov	r7, r0
 8016b7e:	db01      	blt.n	8016b84 <_malloc_r+0x1c>
 8016b80:	42a9      	cmp	r1, r5
 8016b82:	d905      	bls.n	8016b90 <_malloc_r+0x28>
 8016b84:	230c      	movs	r3, #12
 8016b86:	603b      	str	r3, [r7, #0]
 8016b88:	2600      	movs	r6, #0
 8016b8a:	4630      	mov	r0, r6
 8016b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b90:	4e2e      	ldr	r6, [pc, #184]	; (8016c4c <_malloc_r+0xe4>)
 8016b92:	f000 ffe5 	bl	8017b60 <__malloc_lock>
 8016b96:	6833      	ldr	r3, [r6, #0]
 8016b98:	461c      	mov	r4, r3
 8016b9a:	bb34      	cbnz	r4, 8016bea <_malloc_r+0x82>
 8016b9c:	4629      	mov	r1, r5
 8016b9e:	4638      	mov	r0, r7
 8016ba0:	f7ff ffc2 	bl	8016b28 <sbrk_aligned>
 8016ba4:	1c43      	adds	r3, r0, #1
 8016ba6:	4604      	mov	r4, r0
 8016ba8:	d14d      	bne.n	8016c46 <_malloc_r+0xde>
 8016baa:	6834      	ldr	r4, [r6, #0]
 8016bac:	4626      	mov	r6, r4
 8016bae:	2e00      	cmp	r6, #0
 8016bb0:	d140      	bne.n	8016c34 <_malloc_r+0xcc>
 8016bb2:	6823      	ldr	r3, [r4, #0]
 8016bb4:	4631      	mov	r1, r6
 8016bb6:	4638      	mov	r0, r7
 8016bb8:	eb04 0803 	add.w	r8, r4, r3
 8016bbc:	f000 fc9c 	bl	80174f8 <_sbrk_r>
 8016bc0:	4580      	cmp	r8, r0
 8016bc2:	d13a      	bne.n	8016c3a <_malloc_r+0xd2>
 8016bc4:	6821      	ldr	r1, [r4, #0]
 8016bc6:	3503      	adds	r5, #3
 8016bc8:	1a6d      	subs	r5, r5, r1
 8016bca:	f025 0503 	bic.w	r5, r5, #3
 8016bce:	3508      	adds	r5, #8
 8016bd0:	2d0c      	cmp	r5, #12
 8016bd2:	bf38      	it	cc
 8016bd4:	250c      	movcc	r5, #12
 8016bd6:	4629      	mov	r1, r5
 8016bd8:	4638      	mov	r0, r7
 8016bda:	f7ff ffa5 	bl	8016b28 <sbrk_aligned>
 8016bde:	3001      	adds	r0, #1
 8016be0:	d02b      	beq.n	8016c3a <_malloc_r+0xd2>
 8016be2:	6823      	ldr	r3, [r4, #0]
 8016be4:	442b      	add	r3, r5
 8016be6:	6023      	str	r3, [r4, #0]
 8016be8:	e00e      	b.n	8016c08 <_malloc_r+0xa0>
 8016bea:	6822      	ldr	r2, [r4, #0]
 8016bec:	1b52      	subs	r2, r2, r5
 8016bee:	d41e      	bmi.n	8016c2e <_malloc_r+0xc6>
 8016bf0:	2a0b      	cmp	r2, #11
 8016bf2:	d916      	bls.n	8016c22 <_malloc_r+0xba>
 8016bf4:	1961      	adds	r1, r4, r5
 8016bf6:	42a3      	cmp	r3, r4
 8016bf8:	6025      	str	r5, [r4, #0]
 8016bfa:	bf18      	it	ne
 8016bfc:	6059      	strne	r1, [r3, #4]
 8016bfe:	6863      	ldr	r3, [r4, #4]
 8016c00:	bf08      	it	eq
 8016c02:	6031      	streq	r1, [r6, #0]
 8016c04:	5162      	str	r2, [r4, r5]
 8016c06:	604b      	str	r3, [r1, #4]
 8016c08:	4638      	mov	r0, r7
 8016c0a:	f104 060b 	add.w	r6, r4, #11
 8016c0e:	f000 ffad 	bl	8017b6c <__malloc_unlock>
 8016c12:	f026 0607 	bic.w	r6, r6, #7
 8016c16:	1d23      	adds	r3, r4, #4
 8016c18:	1af2      	subs	r2, r6, r3
 8016c1a:	d0b6      	beq.n	8016b8a <_malloc_r+0x22>
 8016c1c:	1b9b      	subs	r3, r3, r6
 8016c1e:	50a3      	str	r3, [r4, r2]
 8016c20:	e7b3      	b.n	8016b8a <_malloc_r+0x22>
 8016c22:	6862      	ldr	r2, [r4, #4]
 8016c24:	42a3      	cmp	r3, r4
 8016c26:	bf0c      	ite	eq
 8016c28:	6032      	streq	r2, [r6, #0]
 8016c2a:	605a      	strne	r2, [r3, #4]
 8016c2c:	e7ec      	b.n	8016c08 <_malloc_r+0xa0>
 8016c2e:	4623      	mov	r3, r4
 8016c30:	6864      	ldr	r4, [r4, #4]
 8016c32:	e7b2      	b.n	8016b9a <_malloc_r+0x32>
 8016c34:	4634      	mov	r4, r6
 8016c36:	6876      	ldr	r6, [r6, #4]
 8016c38:	e7b9      	b.n	8016bae <_malloc_r+0x46>
 8016c3a:	230c      	movs	r3, #12
 8016c3c:	603b      	str	r3, [r7, #0]
 8016c3e:	4638      	mov	r0, r7
 8016c40:	f000 ff94 	bl	8017b6c <__malloc_unlock>
 8016c44:	e7a1      	b.n	8016b8a <_malloc_r+0x22>
 8016c46:	6025      	str	r5, [r4, #0]
 8016c48:	e7de      	b.n	8016c08 <_malloc_r+0xa0>
 8016c4a:	bf00      	nop
 8016c4c:	24008eb8 	.word	0x24008eb8

08016c50 <__ssputs_r>:
 8016c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c54:	688e      	ldr	r6, [r1, #8]
 8016c56:	429e      	cmp	r6, r3
 8016c58:	4682      	mov	sl, r0
 8016c5a:	460c      	mov	r4, r1
 8016c5c:	4690      	mov	r8, r2
 8016c5e:	461f      	mov	r7, r3
 8016c60:	d838      	bhi.n	8016cd4 <__ssputs_r+0x84>
 8016c62:	898a      	ldrh	r2, [r1, #12]
 8016c64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016c68:	d032      	beq.n	8016cd0 <__ssputs_r+0x80>
 8016c6a:	6825      	ldr	r5, [r4, #0]
 8016c6c:	6909      	ldr	r1, [r1, #16]
 8016c6e:	eba5 0901 	sub.w	r9, r5, r1
 8016c72:	6965      	ldr	r5, [r4, #20]
 8016c74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016c78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016c7c:	3301      	adds	r3, #1
 8016c7e:	444b      	add	r3, r9
 8016c80:	106d      	asrs	r5, r5, #1
 8016c82:	429d      	cmp	r5, r3
 8016c84:	bf38      	it	cc
 8016c86:	461d      	movcc	r5, r3
 8016c88:	0553      	lsls	r3, r2, #21
 8016c8a:	d531      	bpl.n	8016cf0 <__ssputs_r+0xa0>
 8016c8c:	4629      	mov	r1, r5
 8016c8e:	f7ff ff6b 	bl	8016b68 <_malloc_r>
 8016c92:	4606      	mov	r6, r0
 8016c94:	b950      	cbnz	r0, 8016cac <__ssputs_r+0x5c>
 8016c96:	230c      	movs	r3, #12
 8016c98:	f8ca 3000 	str.w	r3, [sl]
 8016c9c:	89a3      	ldrh	r3, [r4, #12]
 8016c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ca2:	81a3      	strh	r3, [r4, #12]
 8016ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8016ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cac:	6921      	ldr	r1, [r4, #16]
 8016cae:	464a      	mov	r2, r9
 8016cb0:	f7fd ff64 	bl	8014b7c <memcpy>
 8016cb4:	89a3      	ldrh	r3, [r4, #12]
 8016cb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016cbe:	81a3      	strh	r3, [r4, #12]
 8016cc0:	6126      	str	r6, [r4, #16]
 8016cc2:	6165      	str	r5, [r4, #20]
 8016cc4:	444e      	add	r6, r9
 8016cc6:	eba5 0509 	sub.w	r5, r5, r9
 8016cca:	6026      	str	r6, [r4, #0]
 8016ccc:	60a5      	str	r5, [r4, #8]
 8016cce:	463e      	mov	r6, r7
 8016cd0:	42be      	cmp	r6, r7
 8016cd2:	d900      	bls.n	8016cd6 <__ssputs_r+0x86>
 8016cd4:	463e      	mov	r6, r7
 8016cd6:	6820      	ldr	r0, [r4, #0]
 8016cd8:	4632      	mov	r2, r6
 8016cda:	4641      	mov	r1, r8
 8016cdc:	f000 ff26 	bl	8017b2c <memmove>
 8016ce0:	68a3      	ldr	r3, [r4, #8]
 8016ce2:	1b9b      	subs	r3, r3, r6
 8016ce4:	60a3      	str	r3, [r4, #8]
 8016ce6:	6823      	ldr	r3, [r4, #0]
 8016ce8:	4433      	add	r3, r6
 8016cea:	6023      	str	r3, [r4, #0]
 8016cec:	2000      	movs	r0, #0
 8016cee:	e7db      	b.n	8016ca8 <__ssputs_r+0x58>
 8016cf0:	462a      	mov	r2, r5
 8016cf2:	f000 ff41 	bl	8017b78 <_realloc_r>
 8016cf6:	4606      	mov	r6, r0
 8016cf8:	2800      	cmp	r0, #0
 8016cfa:	d1e1      	bne.n	8016cc0 <__ssputs_r+0x70>
 8016cfc:	6921      	ldr	r1, [r4, #16]
 8016cfe:	4650      	mov	r0, sl
 8016d00:	f7ff fec6 	bl	8016a90 <_free_r>
 8016d04:	e7c7      	b.n	8016c96 <__ssputs_r+0x46>
	...

08016d08 <_svfiprintf_r>:
 8016d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d0c:	4698      	mov	r8, r3
 8016d0e:	898b      	ldrh	r3, [r1, #12]
 8016d10:	061b      	lsls	r3, r3, #24
 8016d12:	b09d      	sub	sp, #116	; 0x74
 8016d14:	4607      	mov	r7, r0
 8016d16:	460d      	mov	r5, r1
 8016d18:	4614      	mov	r4, r2
 8016d1a:	d50e      	bpl.n	8016d3a <_svfiprintf_r+0x32>
 8016d1c:	690b      	ldr	r3, [r1, #16]
 8016d1e:	b963      	cbnz	r3, 8016d3a <_svfiprintf_r+0x32>
 8016d20:	2140      	movs	r1, #64	; 0x40
 8016d22:	f7ff ff21 	bl	8016b68 <_malloc_r>
 8016d26:	6028      	str	r0, [r5, #0]
 8016d28:	6128      	str	r0, [r5, #16]
 8016d2a:	b920      	cbnz	r0, 8016d36 <_svfiprintf_r+0x2e>
 8016d2c:	230c      	movs	r3, #12
 8016d2e:	603b      	str	r3, [r7, #0]
 8016d30:	f04f 30ff 	mov.w	r0, #4294967295
 8016d34:	e0d1      	b.n	8016eda <_svfiprintf_r+0x1d2>
 8016d36:	2340      	movs	r3, #64	; 0x40
 8016d38:	616b      	str	r3, [r5, #20]
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8016d3e:	2320      	movs	r3, #32
 8016d40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8016d48:	2330      	movs	r3, #48	; 0x30
 8016d4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016ef4 <_svfiprintf_r+0x1ec>
 8016d4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016d52:	f04f 0901 	mov.w	r9, #1
 8016d56:	4623      	mov	r3, r4
 8016d58:	469a      	mov	sl, r3
 8016d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d5e:	b10a      	cbz	r2, 8016d64 <_svfiprintf_r+0x5c>
 8016d60:	2a25      	cmp	r2, #37	; 0x25
 8016d62:	d1f9      	bne.n	8016d58 <_svfiprintf_r+0x50>
 8016d64:	ebba 0b04 	subs.w	fp, sl, r4
 8016d68:	d00b      	beq.n	8016d82 <_svfiprintf_r+0x7a>
 8016d6a:	465b      	mov	r3, fp
 8016d6c:	4622      	mov	r2, r4
 8016d6e:	4629      	mov	r1, r5
 8016d70:	4638      	mov	r0, r7
 8016d72:	f7ff ff6d 	bl	8016c50 <__ssputs_r>
 8016d76:	3001      	adds	r0, #1
 8016d78:	f000 80aa 	beq.w	8016ed0 <_svfiprintf_r+0x1c8>
 8016d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d7e:	445a      	add	r2, fp
 8016d80:	9209      	str	r2, [sp, #36]	; 0x24
 8016d82:	f89a 3000 	ldrb.w	r3, [sl]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	f000 80a2 	beq.w	8016ed0 <_svfiprintf_r+0x1c8>
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8016d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d96:	f10a 0a01 	add.w	sl, sl, #1
 8016d9a:	9304      	str	r3, [sp, #16]
 8016d9c:	9307      	str	r3, [sp, #28]
 8016d9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016da2:	931a      	str	r3, [sp, #104]	; 0x68
 8016da4:	4654      	mov	r4, sl
 8016da6:	2205      	movs	r2, #5
 8016da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016dac:	4851      	ldr	r0, [pc, #324]	; (8016ef4 <_svfiprintf_r+0x1ec>)
 8016dae:	f7e9 fab7 	bl	8000320 <memchr>
 8016db2:	9a04      	ldr	r2, [sp, #16]
 8016db4:	b9d8      	cbnz	r0, 8016dee <_svfiprintf_r+0xe6>
 8016db6:	06d0      	lsls	r0, r2, #27
 8016db8:	bf44      	itt	mi
 8016dba:	2320      	movmi	r3, #32
 8016dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016dc0:	0711      	lsls	r1, r2, #28
 8016dc2:	bf44      	itt	mi
 8016dc4:	232b      	movmi	r3, #43	; 0x2b
 8016dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016dca:	f89a 3000 	ldrb.w	r3, [sl]
 8016dce:	2b2a      	cmp	r3, #42	; 0x2a
 8016dd0:	d015      	beq.n	8016dfe <_svfiprintf_r+0xf6>
 8016dd2:	9a07      	ldr	r2, [sp, #28]
 8016dd4:	4654      	mov	r4, sl
 8016dd6:	2000      	movs	r0, #0
 8016dd8:	f04f 0c0a 	mov.w	ip, #10
 8016ddc:	4621      	mov	r1, r4
 8016dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016de2:	3b30      	subs	r3, #48	; 0x30
 8016de4:	2b09      	cmp	r3, #9
 8016de6:	d94e      	bls.n	8016e86 <_svfiprintf_r+0x17e>
 8016de8:	b1b0      	cbz	r0, 8016e18 <_svfiprintf_r+0x110>
 8016dea:	9207      	str	r2, [sp, #28]
 8016dec:	e014      	b.n	8016e18 <_svfiprintf_r+0x110>
 8016dee:	eba0 0308 	sub.w	r3, r0, r8
 8016df2:	fa09 f303 	lsl.w	r3, r9, r3
 8016df6:	4313      	orrs	r3, r2
 8016df8:	9304      	str	r3, [sp, #16]
 8016dfa:	46a2      	mov	sl, r4
 8016dfc:	e7d2      	b.n	8016da4 <_svfiprintf_r+0x9c>
 8016dfe:	9b03      	ldr	r3, [sp, #12]
 8016e00:	1d19      	adds	r1, r3, #4
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	9103      	str	r1, [sp, #12]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	bfbb      	ittet	lt
 8016e0a:	425b      	neglt	r3, r3
 8016e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8016e10:	9307      	strge	r3, [sp, #28]
 8016e12:	9307      	strlt	r3, [sp, #28]
 8016e14:	bfb8      	it	lt
 8016e16:	9204      	strlt	r2, [sp, #16]
 8016e18:	7823      	ldrb	r3, [r4, #0]
 8016e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8016e1c:	d10c      	bne.n	8016e38 <_svfiprintf_r+0x130>
 8016e1e:	7863      	ldrb	r3, [r4, #1]
 8016e20:	2b2a      	cmp	r3, #42	; 0x2a
 8016e22:	d135      	bne.n	8016e90 <_svfiprintf_r+0x188>
 8016e24:	9b03      	ldr	r3, [sp, #12]
 8016e26:	1d1a      	adds	r2, r3, #4
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	9203      	str	r2, [sp, #12]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	bfb8      	it	lt
 8016e30:	f04f 33ff 	movlt.w	r3, #4294967295
 8016e34:	3402      	adds	r4, #2
 8016e36:	9305      	str	r3, [sp, #20]
 8016e38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016f04 <_svfiprintf_r+0x1fc>
 8016e3c:	7821      	ldrb	r1, [r4, #0]
 8016e3e:	2203      	movs	r2, #3
 8016e40:	4650      	mov	r0, sl
 8016e42:	f7e9 fa6d 	bl	8000320 <memchr>
 8016e46:	b140      	cbz	r0, 8016e5a <_svfiprintf_r+0x152>
 8016e48:	2340      	movs	r3, #64	; 0x40
 8016e4a:	eba0 000a 	sub.w	r0, r0, sl
 8016e4e:	fa03 f000 	lsl.w	r0, r3, r0
 8016e52:	9b04      	ldr	r3, [sp, #16]
 8016e54:	4303      	orrs	r3, r0
 8016e56:	3401      	adds	r4, #1
 8016e58:	9304      	str	r3, [sp, #16]
 8016e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e5e:	4826      	ldr	r0, [pc, #152]	; (8016ef8 <_svfiprintf_r+0x1f0>)
 8016e60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016e64:	2206      	movs	r2, #6
 8016e66:	f7e9 fa5b 	bl	8000320 <memchr>
 8016e6a:	2800      	cmp	r0, #0
 8016e6c:	d038      	beq.n	8016ee0 <_svfiprintf_r+0x1d8>
 8016e6e:	4b23      	ldr	r3, [pc, #140]	; (8016efc <_svfiprintf_r+0x1f4>)
 8016e70:	bb1b      	cbnz	r3, 8016eba <_svfiprintf_r+0x1b2>
 8016e72:	9b03      	ldr	r3, [sp, #12]
 8016e74:	3307      	adds	r3, #7
 8016e76:	f023 0307 	bic.w	r3, r3, #7
 8016e7a:	3308      	adds	r3, #8
 8016e7c:	9303      	str	r3, [sp, #12]
 8016e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e80:	4433      	add	r3, r6
 8016e82:	9309      	str	r3, [sp, #36]	; 0x24
 8016e84:	e767      	b.n	8016d56 <_svfiprintf_r+0x4e>
 8016e86:	fb0c 3202 	mla	r2, ip, r2, r3
 8016e8a:	460c      	mov	r4, r1
 8016e8c:	2001      	movs	r0, #1
 8016e8e:	e7a5      	b.n	8016ddc <_svfiprintf_r+0xd4>
 8016e90:	2300      	movs	r3, #0
 8016e92:	3401      	adds	r4, #1
 8016e94:	9305      	str	r3, [sp, #20]
 8016e96:	4619      	mov	r1, r3
 8016e98:	f04f 0c0a 	mov.w	ip, #10
 8016e9c:	4620      	mov	r0, r4
 8016e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ea2:	3a30      	subs	r2, #48	; 0x30
 8016ea4:	2a09      	cmp	r2, #9
 8016ea6:	d903      	bls.n	8016eb0 <_svfiprintf_r+0x1a8>
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d0c5      	beq.n	8016e38 <_svfiprintf_r+0x130>
 8016eac:	9105      	str	r1, [sp, #20]
 8016eae:	e7c3      	b.n	8016e38 <_svfiprintf_r+0x130>
 8016eb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8016eb4:	4604      	mov	r4, r0
 8016eb6:	2301      	movs	r3, #1
 8016eb8:	e7f0      	b.n	8016e9c <_svfiprintf_r+0x194>
 8016eba:	ab03      	add	r3, sp, #12
 8016ebc:	9300      	str	r3, [sp, #0]
 8016ebe:	462a      	mov	r2, r5
 8016ec0:	4b0f      	ldr	r3, [pc, #60]	; (8016f00 <_svfiprintf_r+0x1f8>)
 8016ec2:	a904      	add	r1, sp, #16
 8016ec4:	4638      	mov	r0, r7
 8016ec6:	f3af 8000 	nop.w
 8016eca:	1c42      	adds	r2, r0, #1
 8016ecc:	4606      	mov	r6, r0
 8016ece:	d1d6      	bne.n	8016e7e <_svfiprintf_r+0x176>
 8016ed0:	89ab      	ldrh	r3, [r5, #12]
 8016ed2:	065b      	lsls	r3, r3, #25
 8016ed4:	f53f af2c 	bmi.w	8016d30 <_svfiprintf_r+0x28>
 8016ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016eda:	b01d      	add	sp, #116	; 0x74
 8016edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ee0:	ab03      	add	r3, sp, #12
 8016ee2:	9300      	str	r3, [sp, #0]
 8016ee4:	462a      	mov	r2, r5
 8016ee6:	4b06      	ldr	r3, [pc, #24]	; (8016f00 <_svfiprintf_r+0x1f8>)
 8016ee8:	a904      	add	r1, sp, #16
 8016eea:	4638      	mov	r0, r7
 8016eec:	f000 f9d4 	bl	8017298 <_printf_i>
 8016ef0:	e7eb      	b.n	8016eca <_svfiprintf_r+0x1c2>
 8016ef2:	bf00      	nop
 8016ef4:	080185ec 	.word	0x080185ec
 8016ef8:	080185f6 	.word	0x080185f6
 8016efc:	00000000 	.word	0x00000000
 8016f00:	08016c51 	.word	0x08016c51
 8016f04:	080185f2 	.word	0x080185f2

08016f08 <__sfputc_r>:
 8016f08:	6893      	ldr	r3, [r2, #8]
 8016f0a:	3b01      	subs	r3, #1
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	b410      	push	{r4}
 8016f10:	6093      	str	r3, [r2, #8]
 8016f12:	da08      	bge.n	8016f26 <__sfputc_r+0x1e>
 8016f14:	6994      	ldr	r4, [r2, #24]
 8016f16:	42a3      	cmp	r3, r4
 8016f18:	db01      	blt.n	8016f1e <__sfputc_r+0x16>
 8016f1a:	290a      	cmp	r1, #10
 8016f1c:	d103      	bne.n	8016f26 <__sfputc_r+0x1e>
 8016f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f22:	f000 bb0d 	b.w	8017540 <__swbuf_r>
 8016f26:	6813      	ldr	r3, [r2, #0]
 8016f28:	1c58      	adds	r0, r3, #1
 8016f2a:	6010      	str	r0, [r2, #0]
 8016f2c:	7019      	strb	r1, [r3, #0]
 8016f2e:	4608      	mov	r0, r1
 8016f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f34:	4770      	bx	lr

08016f36 <__sfputs_r>:
 8016f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f38:	4606      	mov	r6, r0
 8016f3a:	460f      	mov	r7, r1
 8016f3c:	4614      	mov	r4, r2
 8016f3e:	18d5      	adds	r5, r2, r3
 8016f40:	42ac      	cmp	r4, r5
 8016f42:	d101      	bne.n	8016f48 <__sfputs_r+0x12>
 8016f44:	2000      	movs	r0, #0
 8016f46:	e007      	b.n	8016f58 <__sfputs_r+0x22>
 8016f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f4c:	463a      	mov	r2, r7
 8016f4e:	4630      	mov	r0, r6
 8016f50:	f7ff ffda 	bl	8016f08 <__sfputc_r>
 8016f54:	1c43      	adds	r3, r0, #1
 8016f56:	d1f3      	bne.n	8016f40 <__sfputs_r+0xa>
 8016f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016f5c <_vfiprintf_r>:
 8016f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f60:	460d      	mov	r5, r1
 8016f62:	b09d      	sub	sp, #116	; 0x74
 8016f64:	4614      	mov	r4, r2
 8016f66:	4698      	mov	r8, r3
 8016f68:	4606      	mov	r6, r0
 8016f6a:	b118      	cbz	r0, 8016f74 <_vfiprintf_r+0x18>
 8016f6c:	6983      	ldr	r3, [r0, #24]
 8016f6e:	b90b      	cbnz	r3, 8016f74 <_vfiprintf_r+0x18>
 8016f70:	f000 fcd6 	bl	8017920 <__sinit>
 8016f74:	4b89      	ldr	r3, [pc, #548]	; (801719c <_vfiprintf_r+0x240>)
 8016f76:	429d      	cmp	r5, r3
 8016f78:	d11b      	bne.n	8016fb2 <_vfiprintf_r+0x56>
 8016f7a:	6875      	ldr	r5, [r6, #4]
 8016f7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016f7e:	07d9      	lsls	r1, r3, #31
 8016f80:	d405      	bmi.n	8016f8e <_vfiprintf_r+0x32>
 8016f82:	89ab      	ldrh	r3, [r5, #12]
 8016f84:	059a      	lsls	r2, r3, #22
 8016f86:	d402      	bmi.n	8016f8e <_vfiprintf_r+0x32>
 8016f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016f8a:	f000 fd67 	bl	8017a5c <__retarget_lock_acquire_recursive>
 8016f8e:	89ab      	ldrh	r3, [r5, #12]
 8016f90:	071b      	lsls	r3, r3, #28
 8016f92:	d501      	bpl.n	8016f98 <_vfiprintf_r+0x3c>
 8016f94:	692b      	ldr	r3, [r5, #16]
 8016f96:	b9eb      	cbnz	r3, 8016fd4 <_vfiprintf_r+0x78>
 8016f98:	4629      	mov	r1, r5
 8016f9a:	4630      	mov	r0, r6
 8016f9c:	f000 fb30 	bl	8017600 <__swsetup_r>
 8016fa0:	b1c0      	cbz	r0, 8016fd4 <_vfiprintf_r+0x78>
 8016fa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016fa4:	07dc      	lsls	r4, r3, #31
 8016fa6:	d50e      	bpl.n	8016fc6 <_vfiprintf_r+0x6a>
 8016fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8016fac:	b01d      	add	sp, #116	; 0x74
 8016fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fb2:	4b7b      	ldr	r3, [pc, #492]	; (80171a0 <_vfiprintf_r+0x244>)
 8016fb4:	429d      	cmp	r5, r3
 8016fb6:	d101      	bne.n	8016fbc <_vfiprintf_r+0x60>
 8016fb8:	68b5      	ldr	r5, [r6, #8]
 8016fba:	e7df      	b.n	8016f7c <_vfiprintf_r+0x20>
 8016fbc:	4b79      	ldr	r3, [pc, #484]	; (80171a4 <_vfiprintf_r+0x248>)
 8016fbe:	429d      	cmp	r5, r3
 8016fc0:	bf08      	it	eq
 8016fc2:	68f5      	ldreq	r5, [r6, #12]
 8016fc4:	e7da      	b.n	8016f7c <_vfiprintf_r+0x20>
 8016fc6:	89ab      	ldrh	r3, [r5, #12]
 8016fc8:	0598      	lsls	r0, r3, #22
 8016fca:	d4ed      	bmi.n	8016fa8 <_vfiprintf_r+0x4c>
 8016fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016fce:	f000 fd46 	bl	8017a5e <__retarget_lock_release_recursive>
 8016fd2:	e7e9      	b.n	8016fa8 <_vfiprintf_r+0x4c>
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8016fd8:	2320      	movs	r3, #32
 8016fda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8016fe2:	2330      	movs	r3, #48	; 0x30
 8016fe4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80171a8 <_vfiprintf_r+0x24c>
 8016fe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016fec:	f04f 0901 	mov.w	r9, #1
 8016ff0:	4623      	mov	r3, r4
 8016ff2:	469a      	mov	sl, r3
 8016ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ff8:	b10a      	cbz	r2, 8016ffe <_vfiprintf_r+0xa2>
 8016ffa:	2a25      	cmp	r2, #37	; 0x25
 8016ffc:	d1f9      	bne.n	8016ff2 <_vfiprintf_r+0x96>
 8016ffe:	ebba 0b04 	subs.w	fp, sl, r4
 8017002:	d00b      	beq.n	801701c <_vfiprintf_r+0xc0>
 8017004:	465b      	mov	r3, fp
 8017006:	4622      	mov	r2, r4
 8017008:	4629      	mov	r1, r5
 801700a:	4630      	mov	r0, r6
 801700c:	f7ff ff93 	bl	8016f36 <__sfputs_r>
 8017010:	3001      	adds	r0, #1
 8017012:	f000 80aa 	beq.w	801716a <_vfiprintf_r+0x20e>
 8017016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017018:	445a      	add	r2, fp
 801701a:	9209      	str	r2, [sp, #36]	; 0x24
 801701c:	f89a 3000 	ldrb.w	r3, [sl]
 8017020:	2b00      	cmp	r3, #0
 8017022:	f000 80a2 	beq.w	801716a <_vfiprintf_r+0x20e>
 8017026:	2300      	movs	r3, #0
 8017028:	f04f 32ff 	mov.w	r2, #4294967295
 801702c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017030:	f10a 0a01 	add.w	sl, sl, #1
 8017034:	9304      	str	r3, [sp, #16]
 8017036:	9307      	str	r3, [sp, #28]
 8017038:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801703c:	931a      	str	r3, [sp, #104]	; 0x68
 801703e:	4654      	mov	r4, sl
 8017040:	2205      	movs	r2, #5
 8017042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017046:	4858      	ldr	r0, [pc, #352]	; (80171a8 <_vfiprintf_r+0x24c>)
 8017048:	f7e9 f96a 	bl	8000320 <memchr>
 801704c:	9a04      	ldr	r2, [sp, #16]
 801704e:	b9d8      	cbnz	r0, 8017088 <_vfiprintf_r+0x12c>
 8017050:	06d1      	lsls	r1, r2, #27
 8017052:	bf44      	itt	mi
 8017054:	2320      	movmi	r3, #32
 8017056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801705a:	0713      	lsls	r3, r2, #28
 801705c:	bf44      	itt	mi
 801705e:	232b      	movmi	r3, #43	; 0x2b
 8017060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017064:	f89a 3000 	ldrb.w	r3, [sl]
 8017068:	2b2a      	cmp	r3, #42	; 0x2a
 801706a:	d015      	beq.n	8017098 <_vfiprintf_r+0x13c>
 801706c:	9a07      	ldr	r2, [sp, #28]
 801706e:	4654      	mov	r4, sl
 8017070:	2000      	movs	r0, #0
 8017072:	f04f 0c0a 	mov.w	ip, #10
 8017076:	4621      	mov	r1, r4
 8017078:	f811 3b01 	ldrb.w	r3, [r1], #1
 801707c:	3b30      	subs	r3, #48	; 0x30
 801707e:	2b09      	cmp	r3, #9
 8017080:	d94e      	bls.n	8017120 <_vfiprintf_r+0x1c4>
 8017082:	b1b0      	cbz	r0, 80170b2 <_vfiprintf_r+0x156>
 8017084:	9207      	str	r2, [sp, #28]
 8017086:	e014      	b.n	80170b2 <_vfiprintf_r+0x156>
 8017088:	eba0 0308 	sub.w	r3, r0, r8
 801708c:	fa09 f303 	lsl.w	r3, r9, r3
 8017090:	4313      	orrs	r3, r2
 8017092:	9304      	str	r3, [sp, #16]
 8017094:	46a2      	mov	sl, r4
 8017096:	e7d2      	b.n	801703e <_vfiprintf_r+0xe2>
 8017098:	9b03      	ldr	r3, [sp, #12]
 801709a:	1d19      	adds	r1, r3, #4
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	9103      	str	r1, [sp, #12]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	bfbb      	ittet	lt
 80170a4:	425b      	neglt	r3, r3
 80170a6:	f042 0202 	orrlt.w	r2, r2, #2
 80170aa:	9307      	strge	r3, [sp, #28]
 80170ac:	9307      	strlt	r3, [sp, #28]
 80170ae:	bfb8      	it	lt
 80170b0:	9204      	strlt	r2, [sp, #16]
 80170b2:	7823      	ldrb	r3, [r4, #0]
 80170b4:	2b2e      	cmp	r3, #46	; 0x2e
 80170b6:	d10c      	bne.n	80170d2 <_vfiprintf_r+0x176>
 80170b8:	7863      	ldrb	r3, [r4, #1]
 80170ba:	2b2a      	cmp	r3, #42	; 0x2a
 80170bc:	d135      	bne.n	801712a <_vfiprintf_r+0x1ce>
 80170be:	9b03      	ldr	r3, [sp, #12]
 80170c0:	1d1a      	adds	r2, r3, #4
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	9203      	str	r2, [sp, #12]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	bfb8      	it	lt
 80170ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80170ce:	3402      	adds	r4, #2
 80170d0:	9305      	str	r3, [sp, #20]
 80170d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80171b8 <_vfiprintf_r+0x25c>
 80170d6:	7821      	ldrb	r1, [r4, #0]
 80170d8:	2203      	movs	r2, #3
 80170da:	4650      	mov	r0, sl
 80170dc:	f7e9 f920 	bl	8000320 <memchr>
 80170e0:	b140      	cbz	r0, 80170f4 <_vfiprintf_r+0x198>
 80170e2:	2340      	movs	r3, #64	; 0x40
 80170e4:	eba0 000a 	sub.w	r0, r0, sl
 80170e8:	fa03 f000 	lsl.w	r0, r3, r0
 80170ec:	9b04      	ldr	r3, [sp, #16]
 80170ee:	4303      	orrs	r3, r0
 80170f0:	3401      	adds	r4, #1
 80170f2:	9304      	str	r3, [sp, #16]
 80170f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170f8:	482c      	ldr	r0, [pc, #176]	; (80171ac <_vfiprintf_r+0x250>)
 80170fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80170fe:	2206      	movs	r2, #6
 8017100:	f7e9 f90e 	bl	8000320 <memchr>
 8017104:	2800      	cmp	r0, #0
 8017106:	d03f      	beq.n	8017188 <_vfiprintf_r+0x22c>
 8017108:	4b29      	ldr	r3, [pc, #164]	; (80171b0 <_vfiprintf_r+0x254>)
 801710a:	bb1b      	cbnz	r3, 8017154 <_vfiprintf_r+0x1f8>
 801710c:	9b03      	ldr	r3, [sp, #12]
 801710e:	3307      	adds	r3, #7
 8017110:	f023 0307 	bic.w	r3, r3, #7
 8017114:	3308      	adds	r3, #8
 8017116:	9303      	str	r3, [sp, #12]
 8017118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801711a:	443b      	add	r3, r7
 801711c:	9309      	str	r3, [sp, #36]	; 0x24
 801711e:	e767      	b.n	8016ff0 <_vfiprintf_r+0x94>
 8017120:	fb0c 3202 	mla	r2, ip, r2, r3
 8017124:	460c      	mov	r4, r1
 8017126:	2001      	movs	r0, #1
 8017128:	e7a5      	b.n	8017076 <_vfiprintf_r+0x11a>
 801712a:	2300      	movs	r3, #0
 801712c:	3401      	adds	r4, #1
 801712e:	9305      	str	r3, [sp, #20]
 8017130:	4619      	mov	r1, r3
 8017132:	f04f 0c0a 	mov.w	ip, #10
 8017136:	4620      	mov	r0, r4
 8017138:	f810 2b01 	ldrb.w	r2, [r0], #1
 801713c:	3a30      	subs	r2, #48	; 0x30
 801713e:	2a09      	cmp	r2, #9
 8017140:	d903      	bls.n	801714a <_vfiprintf_r+0x1ee>
 8017142:	2b00      	cmp	r3, #0
 8017144:	d0c5      	beq.n	80170d2 <_vfiprintf_r+0x176>
 8017146:	9105      	str	r1, [sp, #20]
 8017148:	e7c3      	b.n	80170d2 <_vfiprintf_r+0x176>
 801714a:	fb0c 2101 	mla	r1, ip, r1, r2
 801714e:	4604      	mov	r4, r0
 8017150:	2301      	movs	r3, #1
 8017152:	e7f0      	b.n	8017136 <_vfiprintf_r+0x1da>
 8017154:	ab03      	add	r3, sp, #12
 8017156:	9300      	str	r3, [sp, #0]
 8017158:	462a      	mov	r2, r5
 801715a:	4b16      	ldr	r3, [pc, #88]	; (80171b4 <_vfiprintf_r+0x258>)
 801715c:	a904      	add	r1, sp, #16
 801715e:	4630      	mov	r0, r6
 8017160:	f3af 8000 	nop.w
 8017164:	4607      	mov	r7, r0
 8017166:	1c78      	adds	r0, r7, #1
 8017168:	d1d6      	bne.n	8017118 <_vfiprintf_r+0x1bc>
 801716a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801716c:	07d9      	lsls	r1, r3, #31
 801716e:	d405      	bmi.n	801717c <_vfiprintf_r+0x220>
 8017170:	89ab      	ldrh	r3, [r5, #12]
 8017172:	059a      	lsls	r2, r3, #22
 8017174:	d402      	bmi.n	801717c <_vfiprintf_r+0x220>
 8017176:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017178:	f000 fc71 	bl	8017a5e <__retarget_lock_release_recursive>
 801717c:	89ab      	ldrh	r3, [r5, #12]
 801717e:	065b      	lsls	r3, r3, #25
 8017180:	f53f af12 	bmi.w	8016fa8 <_vfiprintf_r+0x4c>
 8017184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017186:	e711      	b.n	8016fac <_vfiprintf_r+0x50>
 8017188:	ab03      	add	r3, sp, #12
 801718a:	9300      	str	r3, [sp, #0]
 801718c:	462a      	mov	r2, r5
 801718e:	4b09      	ldr	r3, [pc, #36]	; (80171b4 <_vfiprintf_r+0x258>)
 8017190:	a904      	add	r1, sp, #16
 8017192:	4630      	mov	r0, r6
 8017194:	f000 f880 	bl	8017298 <_printf_i>
 8017198:	e7e4      	b.n	8017164 <_vfiprintf_r+0x208>
 801719a:	bf00      	nop
 801719c:	08018640 	.word	0x08018640
 80171a0:	08018660 	.word	0x08018660
 80171a4:	08018620 	.word	0x08018620
 80171a8:	080185ec 	.word	0x080185ec
 80171ac:	080185f6 	.word	0x080185f6
 80171b0:	00000000 	.word	0x00000000
 80171b4:	08016f37 	.word	0x08016f37
 80171b8:	080185f2 	.word	0x080185f2

080171bc <_printf_common>:
 80171bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171c0:	4616      	mov	r6, r2
 80171c2:	4699      	mov	r9, r3
 80171c4:	688a      	ldr	r2, [r1, #8]
 80171c6:	690b      	ldr	r3, [r1, #16]
 80171c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80171cc:	4293      	cmp	r3, r2
 80171ce:	bfb8      	it	lt
 80171d0:	4613      	movlt	r3, r2
 80171d2:	6033      	str	r3, [r6, #0]
 80171d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80171d8:	4607      	mov	r7, r0
 80171da:	460c      	mov	r4, r1
 80171dc:	b10a      	cbz	r2, 80171e2 <_printf_common+0x26>
 80171de:	3301      	adds	r3, #1
 80171e0:	6033      	str	r3, [r6, #0]
 80171e2:	6823      	ldr	r3, [r4, #0]
 80171e4:	0699      	lsls	r1, r3, #26
 80171e6:	bf42      	ittt	mi
 80171e8:	6833      	ldrmi	r3, [r6, #0]
 80171ea:	3302      	addmi	r3, #2
 80171ec:	6033      	strmi	r3, [r6, #0]
 80171ee:	6825      	ldr	r5, [r4, #0]
 80171f0:	f015 0506 	ands.w	r5, r5, #6
 80171f4:	d106      	bne.n	8017204 <_printf_common+0x48>
 80171f6:	f104 0a19 	add.w	sl, r4, #25
 80171fa:	68e3      	ldr	r3, [r4, #12]
 80171fc:	6832      	ldr	r2, [r6, #0]
 80171fe:	1a9b      	subs	r3, r3, r2
 8017200:	42ab      	cmp	r3, r5
 8017202:	dc26      	bgt.n	8017252 <_printf_common+0x96>
 8017204:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017208:	1e13      	subs	r3, r2, #0
 801720a:	6822      	ldr	r2, [r4, #0]
 801720c:	bf18      	it	ne
 801720e:	2301      	movne	r3, #1
 8017210:	0692      	lsls	r2, r2, #26
 8017212:	d42b      	bmi.n	801726c <_printf_common+0xb0>
 8017214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017218:	4649      	mov	r1, r9
 801721a:	4638      	mov	r0, r7
 801721c:	47c0      	blx	r8
 801721e:	3001      	adds	r0, #1
 8017220:	d01e      	beq.n	8017260 <_printf_common+0xa4>
 8017222:	6823      	ldr	r3, [r4, #0]
 8017224:	68e5      	ldr	r5, [r4, #12]
 8017226:	6832      	ldr	r2, [r6, #0]
 8017228:	f003 0306 	and.w	r3, r3, #6
 801722c:	2b04      	cmp	r3, #4
 801722e:	bf08      	it	eq
 8017230:	1aad      	subeq	r5, r5, r2
 8017232:	68a3      	ldr	r3, [r4, #8]
 8017234:	6922      	ldr	r2, [r4, #16]
 8017236:	bf0c      	ite	eq
 8017238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801723c:	2500      	movne	r5, #0
 801723e:	4293      	cmp	r3, r2
 8017240:	bfc4      	itt	gt
 8017242:	1a9b      	subgt	r3, r3, r2
 8017244:	18ed      	addgt	r5, r5, r3
 8017246:	2600      	movs	r6, #0
 8017248:	341a      	adds	r4, #26
 801724a:	42b5      	cmp	r5, r6
 801724c:	d11a      	bne.n	8017284 <_printf_common+0xc8>
 801724e:	2000      	movs	r0, #0
 8017250:	e008      	b.n	8017264 <_printf_common+0xa8>
 8017252:	2301      	movs	r3, #1
 8017254:	4652      	mov	r2, sl
 8017256:	4649      	mov	r1, r9
 8017258:	4638      	mov	r0, r7
 801725a:	47c0      	blx	r8
 801725c:	3001      	adds	r0, #1
 801725e:	d103      	bne.n	8017268 <_printf_common+0xac>
 8017260:	f04f 30ff 	mov.w	r0, #4294967295
 8017264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017268:	3501      	adds	r5, #1
 801726a:	e7c6      	b.n	80171fa <_printf_common+0x3e>
 801726c:	18e1      	adds	r1, r4, r3
 801726e:	1c5a      	adds	r2, r3, #1
 8017270:	2030      	movs	r0, #48	; 0x30
 8017272:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017276:	4422      	add	r2, r4
 8017278:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801727c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017280:	3302      	adds	r3, #2
 8017282:	e7c7      	b.n	8017214 <_printf_common+0x58>
 8017284:	2301      	movs	r3, #1
 8017286:	4622      	mov	r2, r4
 8017288:	4649      	mov	r1, r9
 801728a:	4638      	mov	r0, r7
 801728c:	47c0      	blx	r8
 801728e:	3001      	adds	r0, #1
 8017290:	d0e6      	beq.n	8017260 <_printf_common+0xa4>
 8017292:	3601      	adds	r6, #1
 8017294:	e7d9      	b.n	801724a <_printf_common+0x8e>
	...

08017298 <_printf_i>:
 8017298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801729c:	7e0f      	ldrb	r7, [r1, #24]
 801729e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80172a0:	2f78      	cmp	r7, #120	; 0x78
 80172a2:	4691      	mov	r9, r2
 80172a4:	4680      	mov	r8, r0
 80172a6:	460c      	mov	r4, r1
 80172a8:	469a      	mov	sl, r3
 80172aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80172ae:	d807      	bhi.n	80172c0 <_printf_i+0x28>
 80172b0:	2f62      	cmp	r7, #98	; 0x62
 80172b2:	d80a      	bhi.n	80172ca <_printf_i+0x32>
 80172b4:	2f00      	cmp	r7, #0
 80172b6:	f000 80d8 	beq.w	801746a <_printf_i+0x1d2>
 80172ba:	2f58      	cmp	r7, #88	; 0x58
 80172bc:	f000 80a3 	beq.w	8017406 <_printf_i+0x16e>
 80172c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80172c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80172c8:	e03a      	b.n	8017340 <_printf_i+0xa8>
 80172ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80172ce:	2b15      	cmp	r3, #21
 80172d0:	d8f6      	bhi.n	80172c0 <_printf_i+0x28>
 80172d2:	a101      	add	r1, pc, #4	; (adr r1, 80172d8 <_printf_i+0x40>)
 80172d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80172d8:	08017331 	.word	0x08017331
 80172dc:	08017345 	.word	0x08017345
 80172e0:	080172c1 	.word	0x080172c1
 80172e4:	080172c1 	.word	0x080172c1
 80172e8:	080172c1 	.word	0x080172c1
 80172ec:	080172c1 	.word	0x080172c1
 80172f0:	08017345 	.word	0x08017345
 80172f4:	080172c1 	.word	0x080172c1
 80172f8:	080172c1 	.word	0x080172c1
 80172fc:	080172c1 	.word	0x080172c1
 8017300:	080172c1 	.word	0x080172c1
 8017304:	08017451 	.word	0x08017451
 8017308:	08017375 	.word	0x08017375
 801730c:	08017433 	.word	0x08017433
 8017310:	080172c1 	.word	0x080172c1
 8017314:	080172c1 	.word	0x080172c1
 8017318:	08017473 	.word	0x08017473
 801731c:	080172c1 	.word	0x080172c1
 8017320:	08017375 	.word	0x08017375
 8017324:	080172c1 	.word	0x080172c1
 8017328:	080172c1 	.word	0x080172c1
 801732c:	0801743b 	.word	0x0801743b
 8017330:	682b      	ldr	r3, [r5, #0]
 8017332:	1d1a      	adds	r2, r3, #4
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	602a      	str	r2, [r5, #0]
 8017338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801733c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017340:	2301      	movs	r3, #1
 8017342:	e0a3      	b.n	801748c <_printf_i+0x1f4>
 8017344:	6820      	ldr	r0, [r4, #0]
 8017346:	6829      	ldr	r1, [r5, #0]
 8017348:	0606      	lsls	r6, r0, #24
 801734a:	f101 0304 	add.w	r3, r1, #4
 801734e:	d50a      	bpl.n	8017366 <_printf_i+0xce>
 8017350:	680e      	ldr	r6, [r1, #0]
 8017352:	602b      	str	r3, [r5, #0]
 8017354:	2e00      	cmp	r6, #0
 8017356:	da03      	bge.n	8017360 <_printf_i+0xc8>
 8017358:	232d      	movs	r3, #45	; 0x2d
 801735a:	4276      	negs	r6, r6
 801735c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017360:	485e      	ldr	r0, [pc, #376]	; (80174dc <_printf_i+0x244>)
 8017362:	230a      	movs	r3, #10
 8017364:	e019      	b.n	801739a <_printf_i+0x102>
 8017366:	680e      	ldr	r6, [r1, #0]
 8017368:	602b      	str	r3, [r5, #0]
 801736a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801736e:	bf18      	it	ne
 8017370:	b236      	sxthne	r6, r6
 8017372:	e7ef      	b.n	8017354 <_printf_i+0xbc>
 8017374:	682b      	ldr	r3, [r5, #0]
 8017376:	6820      	ldr	r0, [r4, #0]
 8017378:	1d19      	adds	r1, r3, #4
 801737a:	6029      	str	r1, [r5, #0]
 801737c:	0601      	lsls	r1, r0, #24
 801737e:	d501      	bpl.n	8017384 <_printf_i+0xec>
 8017380:	681e      	ldr	r6, [r3, #0]
 8017382:	e002      	b.n	801738a <_printf_i+0xf2>
 8017384:	0646      	lsls	r6, r0, #25
 8017386:	d5fb      	bpl.n	8017380 <_printf_i+0xe8>
 8017388:	881e      	ldrh	r6, [r3, #0]
 801738a:	4854      	ldr	r0, [pc, #336]	; (80174dc <_printf_i+0x244>)
 801738c:	2f6f      	cmp	r7, #111	; 0x6f
 801738e:	bf0c      	ite	eq
 8017390:	2308      	moveq	r3, #8
 8017392:	230a      	movne	r3, #10
 8017394:	2100      	movs	r1, #0
 8017396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801739a:	6865      	ldr	r5, [r4, #4]
 801739c:	60a5      	str	r5, [r4, #8]
 801739e:	2d00      	cmp	r5, #0
 80173a0:	bfa2      	ittt	ge
 80173a2:	6821      	ldrge	r1, [r4, #0]
 80173a4:	f021 0104 	bicge.w	r1, r1, #4
 80173a8:	6021      	strge	r1, [r4, #0]
 80173aa:	b90e      	cbnz	r6, 80173b0 <_printf_i+0x118>
 80173ac:	2d00      	cmp	r5, #0
 80173ae:	d04d      	beq.n	801744c <_printf_i+0x1b4>
 80173b0:	4615      	mov	r5, r2
 80173b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80173b6:	fb03 6711 	mls	r7, r3, r1, r6
 80173ba:	5dc7      	ldrb	r7, [r0, r7]
 80173bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80173c0:	4637      	mov	r7, r6
 80173c2:	42bb      	cmp	r3, r7
 80173c4:	460e      	mov	r6, r1
 80173c6:	d9f4      	bls.n	80173b2 <_printf_i+0x11a>
 80173c8:	2b08      	cmp	r3, #8
 80173ca:	d10b      	bne.n	80173e4 <_printf_i+0x14c>
 80173cc:	6823      	ldr	r3, [r4, #0]
 80173ce:	07de      	lsls	r6, r3, #31
 80173d0:	d508      	bpl.n	80173e4 <_printf_i+0x14c>
 80173d2:	6923      	ldr	r3, [r4, #16]
 80173d4:	6861      	ldr	r1, [r4, #4]
 80173d6:	4299      	cmp	r1, r3
 80173d8:	bfde      	ittt	le
 80173da:	2330      	movle	r3, #48	; 0x30
 80173dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80173e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80173e4:	1b52      	subs	r2, r2, r5
 80173e6:	6122      	str	r2, [r4, #16]
 80173e8:	f8cd a000 	str.w	sl, [sp]
 80173ec:	464b      	mov	r3, r9
 80173ee:	aa03      	add	r2, sp, #12
 80173f0:	4621      	mov	r1, r4
 80173f2:	4640      	mov	r0, r8
 80173f4:	f7ff fee2 	bl	80171bc <_printf_common>
 80173f8:	3001      	adds	r0, #1
 80173fa:	d14c      	bne.n	8017496 <_printf_i+0x1fe>
 80173fc:	f04f 30ff 	mov.w	r0, #4294967295
 8017400:	b004      	add	sp, #16
 8017402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017406:	4835      	ldr	r0, [pc, #212]	; (80174dc <_printf_i+0x244>)
 8017408:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801740c:	6829      	ldr	r1, [r5, #0]
 801740e:	6823      	ldr	r3, [r4, #0]
 8017410:	f851 6b04 	ldr.w	r6, [r1], #4
 8017414:	6029      	str	r1, [r5, #0]
 8017416:	061d      	lsls	r5, r3, #24
 8017418:	d514      	bpl.n	8017444 <_printf_i+0x1ac>
 801741a:	07df      	lsls	r7, r3, #31
 801741c:	bf44      	itt	mi
 801741e:	f043 0320 	orrmi.w	r3, r3, #32
 8017422:	6023      	strmi	r3, [r4, #0]
 8017424:	b91e      	cbnz	r6, 801742e <_printf_i+0x196>
 8017426:	6823      	ldr	r3, [r4, #0]
 8017428:	f023 0320 	bic.w	r3, r3, #32
 801742c:	6023      	str	r3, [r4, #0]
 801742e:	2310      	movs	r3, #16
 8017430:	e7b0      	b.n	8017394 <_printf_i+0xfc>
 8017432:	6823      	ldr	r3, [r4, #0]
 8017434:	f043 0320 	orr.w	r3, r3, #32
 8017438:	6023      	str	r3, [r4, #0]
 801743a:	2378      	movs	r3, #120	; 0x78
 801743c:	4828      	ldr	r0, [pc, #160]	; (80174e0 <_printf_i+0x248>)
 801743e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017442:	e7e3      	b.n	801740c <_printf_i+0x174>
 8017444:	0659      	lsls	r1, r3, #25
 8017446:	bf48      	it	mi
 8017448:	b2b6      	uxthmi	r6, r6
 801744a:	e7e6      	b.n	801741a <_printf_i+0x182>
 801744c:	4615      	mov	r5, r2
 801744e:	e7bb      	b.n	80173c8 <_printf_i+0x130>
 8017450:	682b      	ldr	r3, [r5, #0]
 8017452:	6826      	ldr	r6, [r4, #0]
 8017454:	6961      	ldr	r1, [r4, #20]
 8017456:	1d18      	adds	r0, r3, #4
 8017458:	6028      	str	r0, [r5, #0]
 801745a:	0635      	lsls	r5, r6, #24
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	d501      	bpl.n	8017464 <_printf_i+0x1cc>
 8017460:	6019      	str	r1, [r3, #0]
 8017462:	e002      	b.n	801746a <_printf_i+0x1d2>
 8017464:	0670      	lsls	r0, r6, #25
 8017466:	d5fb      	bpl.n	8017460 <_printf_i+0x1c8>
 8017468:	8019      	strh	r1, [r3, #0]
 801746a:	2300      	movs	r3, #0
 801746c:	6123      	str	r3, [r4, #16]
 801746e:	4615      	mov	r5, r2
 8017470:	e7ba      	b.n	80173e8 <_printf_i+0x150>
 8017472:	682b      	ldr	r3, [r5, #0]
 8017474:	1d1a      	adds	r2, r3, #4
 8017476:	602a      	str	r2, [r5, #0]
 8017478:	681d      	ldr	r5, [r3, #0]
 801747a:	6862      	ldr	r2, [r4, #4]
 801747c:	2100      	movs	r1, #0
 801747e:	4628      	mov	r0, r5
 8017480:	f7e8 ff4e 	bl	8000320 <memchr>
 8017484:	b108      	cbz	r0, 801748a <_printf_i+0x1f2>
 8017486:	1b40      	subs	r0, r0, r5
 8017488:	6060      	str	r0, [r4, #4]
 801748a:	6863      	ldr	r3, [r4, #4]
 801748c:	6123      	str	r3, [r4, #16]
 801748e:	2300      	movs	r3, #0
 8017490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017494:	e7a8      	b.n	80173e8 <_printf_i+0x150>
 8017496:	6923      	ldr	r3, [r4, #16]
 8017498:	462a      	mov	r2, r5
 801749a:	4649      	mov	r1, r9
 801749c:	4640      	mov	r0, r8
 801749e:	47d0      	blx	sl
 80174a0:	3001      	adds	r0, #1
 80174a2:	d0ab      	beq.n	80173fc <_printf_i+0x164>
 80174a4:	6823      	ldr	r3, [r4, #0]
 80174a6:	079b      	lsls	r3, r3, #30
 80174a8:	d413      	bmi.n	80174d2 <_printf_i+0x23a>
 80174aa:	68e0      	ldr	r0, [r4, #12]
 80174ac:	9b03      	ldr	r3, [sp, #12]
 80174ae:	4298      	cmp	r0, r3
 80174b0:	bfb8      	it	lt
 80174b2:	4618      	movlt	r0, r3
 80174b4:	e7a4      	b.n	8017400 <_printf_i+0x168>
 80174b6:	2301      	movs	r3, #1
 80174b8:	4632      	mov	r2, r6
 80174ba:	4649      	mov	r1, r9
 80174bc:	4640      	mov	r0, r8
 80174be:	47d0      	blx	sl
 80174c0:	3001      	adds	r0, #1
 80174c2:	d09b      	beq.n	80173fc <_printf_i+0x164>
 80174c4:	3501      	adds	r5, #1
 80174c6:	68e3      	ldr	r3, [r4, #12]
 80174c8:	9903      	ldr	r1, [sp, #12]
 80174ca:	1a5b      	subs	r3, r3, r1
 80174cc:	42ab      	cmp	r3, r5
 80174ce:	dcf2      	bgt.n	80174b6 <_printf_i+0x21e>
 80174d0:	e7eb      	b.n	80174aa <_printf_i+0x212>
 80174d2:	2500      	movs	r5, #0
 80174d4:	f104 0619 	add.w	r6, r4, #25
 80174d8:	e7f5      	b.n	80174c6 <_printf_i+0x22e>
 80174da:	bf00      	nop
 80174dc:	080185fd 	.word	0x080185fd
 80174e0:	0801860e 	.word	0x0801860e
 80174e4:	00000000 	.word	0x00000000

080174e8 <nan>:
 80174e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80174f0 <nan+0x8>
 80174ec:	4770      	bx	lr
 80174ee:	bf00      	nop
 80174f0:	00000000 	.word	0x00000000
 80174f4:	7ff80000 	.word	0x7ff80000

080174f8 <_sbrk_r>:
 80174f8:	b538      	push	{r3, r4, r5, lr}
 80174fa:	4d06      	ldr	r5, [pc, #24]	; (8017514 <_sbrk_r+0x1c>)
 80174fc:	2300      	movs	r3, #0
 80174fe:	4604      	mov	r4, r0
 8017500:	4608      	mov	r0, r1
 8017502:	602b      	str	r3, [r5, #0]
 8017504:	f7ec fbb4 	bl	8003c70 <_sbrk>
 8017508:	1c43      	adds	r3, r0, #1
 801750a:	d102      	bne.n	8017512 <_sbrk_r+0x1a>
 801750c:	682b      	ldr	r3, [r5, #0]
 801750e:	b103      	cbz	r3, 8017512 <_sbrk_r+0x1a>
 8017510:	6023      	str	r3, [r4, #0]
 8017512:	bd38      	pop	{r3, r4, r5, pc}
 8017514:	24008ec4 	.word	0x24008ec4

08017518 <strncmp>:
 8017518:	b510      	push	{r4, lr}
 801751a:	b17a      	cbz	r2, 801753c <strncmp+0x24>
 801751c:	4603      	mov	r3, r0
 801751e:	3901      	subs	r1, #1
 8017520:	1884      	adds	r4, r0, r2
 8017522:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017526:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801752a:	4290      	cmp	r0, r2
 801752c:	d101      	bne.n	8017532 <strncmp+0x1a>
 801752e:	42a3      	cmp	r3, r4
 8017530:	d101      	bne.n	8017536 <strncmp+0x1e>
 8017532:	1a80      	subs	r0, r0, r2
 8017534:	bd10      	pop	{r4, pc}
 8017536:	2800      	cmp	r0, #0
 8017538:	d1f3      	bne.n	8017522 <strncmp+0xa>
 801753a:	e7fa      	b.n	8017532 <strncmp+0x1a>
 801753c:	4610      	mov	r0, r2
 801753e:	e7f9      	b.n	8017534 <strncmp+0x1c>

08017540 <__swbuf_r>:
 8017540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017542:	460e      	mov	r6, r1
 8017544:	4614      	mov	r4, r2
 8017546:	4605      	mov	r5, r0
 8017548:	b118      	cbz	r0, 8017552 <__swbuf_r+0x12>
 801754a:	6983      	ldr	r3, [r0, #24]
 801754c:	b90b      	cbnz	r3, 8017552 <__swbuf_r+0x12>
 801754e:	f000 f9e7 	bl	8017920 <__sinit>
 8017552:	4b21      	ldr	r3, [pc, #132]	; (80175d8 <__swbuf_r+0x98>)
 8017554:	429c      	cmp	r4, r3
 8017556:	d12b      	bne.n	80175b0 <__swbuf_r+0x70>
 8017558:	686c      	ldr	r4, [r5, #4]
 801755a:	69a3      	ldr	r3, [r4, #24]
 801755c:	60a3      	str	r3, [r4, #8]
 801755e:	89a3      	ldrh	r3, [r4, #12]
 8017560:	071a      	lsls	r2, r3, #28
 8017562:	d52f      	bpl.n	80175c4 <__swbuf_r+0x84>
 8017564:	6923      	ldr	r3, [r4, #16]
 8017566:	b36b      	cbz	r3, 80175c4 <__swbuf_r+0x84>
 8017568:	6923      	ldr	r3, [r4, #16]
 801756a:	6820      	ldr	r0, [r4, #0]
 801756c:	1ac0      	subs	r0, r0, r3
 801756e:	6963      	ldr	r3, [r4, #20]
 8017570:	b2f6      	uxtb	r6, r6
 8017572:	4283      	cmp	r3, r0
 8017574:	4637      	mov	r7, r6
 8017576:	dc04      	bgt.n	8017582 <__swbuf_r+0x42>
 8017578:	4621      	mov	r1, r4
 801757a:	4628      	mov	r0, r5
 801757c:	f000 f93c 	bl	80177f8 <_fflush_r>
 8017580:	bb30      	cbnz	r0, 80175d0 <__swbuf_r+0x90>
 8017582:	68a3      	ldr	r3, [r4, #8]
 8017584:	3b01      	subs	r3, #1
 8017586:	60a3      	str	r3, [r4, #8]
 8017588:	6823      	ldr	r3, [r4, #0]
 801758a:	1c5a      	adds	r2, r3, #1
 801758c:	6022      	str	r2, [r4, #0]
 801758e:	701e      	strb	r6, [r3, #0]
 8017590:	6963      	ldr	r3, [r4, #20]
 8017592:	3001      	adds	r0, #1
 8017594:	4283      	cmp	r3, r0
 8017596:	d004      	beq.n	80175a2 <__swbuf_r+0x62>
 8017598:	89a3      	ldrh	r3, [r4, #12]
 801759a:	07db      	lsls	r3, r3, #31
 801759c:	d506      	bpl.n	80175ac <__swbuf_r+0x6c>
 801759e:	2e0a      	cmp	r6, #10
 80175a0:	d104      	bne.n	80175ac <__swbuf_r+0x6c>
 80175a2:	4621      	mov	r1, r4
 80175a4:	4628      	mov	r0, r5
 80175a6:	f000 f927 	bl	80177f8 <_fflush_r>
 80175aa:	b988      	cbnz	r0, 80175d0 <__swbuf_r+0x90>
 80175ac:	4638      	mov	r0, r7
 80175ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175b0:	4b0a      	ldr	r3, [pc, #40]	; (80175dc <__swbuf_r+0x9c>)
 80175b2:	429c      	cmp	r4, r3
 80175b4:	d101      	bne.n	80175ba <__swbuf_r+0x7a>
 80175b6:	68ac      	ldr	r4, [r5, #8]
 80175b8:	e7cf      	b.n	801755a <__swbuf_r+0x1a>
 80175ba:	4b09      	ldr	r3, [pc, #36]	; (80175e0 <__swbuf_r+0xa0>)
 80175bc:	429c      	cmp	r4, r3
 80175be:	bf08      	it	eq
 80175c0:	68ec      	ldreq	r4, [r5, #12]
 80175c2:	e7ca      	b.n	801755a <__swbuf_r+0x1a>
 80175c4:	4621      	mov	r1, r4
 80175c6:	4628      	mov	r0, r5
 80175c8:	f000 f81a 	bl	8017600 <__swsetup_r>
 80175cc:	2800      	cmp	r0, #0
 80175ce:	d0cb      	beq.n	8017568 <__swbuf_r+0x28>
 80175d0:	f04f 37ff 	mov.w	r7, #4294967295
 80175d4:	e7ea      	b.n	80175ac <__swbuf_r+0x6c>
 80175d6:	bf00      	nop
 80175d8:	08018640 	.word	0x08018640
 80175dc:	08018660 	.word	0x08018660
 80175e0:	08018620 	.word	0x08018620

080175e4 <__ascii_wctomb>:
 80175e4:	b149      	cbz	r1, 80175fa <__ascii_wctomb+0x16>
 80175e6:	2aff      	cmp	r2, #255	; 0xff
 80175e8:	bf85      	ittet	hi
 80175ea:	238a      	movhi	r3, #138	; 0x8a
 80175ec:	6003      	strhi	r3, [r0, #0]
 80175ee:	700a      	strbls	r2, [r1, #0]
 80175f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80175f4:	bf98      	it	ls
 80175f6:	2001      	movls	r0, #1
 80175f8:	4770      	bx	lr
 80175fa:	4608      	mov	r0, r1
 80175fc:	4770      	bx	lr
	...

08017600 <__swsetup_r>:
 8017600:	4b32      	ldr	r3, [pc, #200]	; (80176cc <__swsetup_r+0xcc>)
 8017602:	b570      	push	{r4, r5, r6, lr}
 8017604:	681d      	ldr	r5, [r3, #0]
 8017606:	4606      	mov	r6, r0
 8017608:	460c      	mov	r4, r1
 801760a:	b125      	cbz	r5, 8017616 <__swsetup_r+0x16>
 801760c:	69ab      	ldr	r3, [r5, #24]
 801760e:	b913      	cbnz	r3, 8017616 <__swsetup_r+0x16>
 8017610:	4628      	mov	r0, r5
 8017612:	f000 f985 	bl	8017920 <__sinit>
 8017616:	4b2e      	ldr	r3, [pc, #184]	; (80176d0 <__swsetup_r+0xd0>)
 8017618:	429c      	cmp	r4, r3
 801761a:	d10f      	bne.n	801763c <__swsetup_r+0x3c>
 801761c:	686c      	ldr	r4, [r5, #4]
 801761e:	89a3      	ldrh	r3, [r4, #12]
 8017620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017624:	0719      	lsls	r1, r3, #28
 8017626:	d42c      	bmi.n	8017682 <__swsetup_r+0x82>
 8017628:	06dd      	lsls	r5, r3, #27
 801762a:	d411      	bmi.n	8017650 <__swsetup_r+0x50>
 801762c:	2309      	movs	r3, #9
 801762e:	6033      	str	r3, [r6, #0]
 8017630:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017634:	81a3      	strh	r3, [r4, #12]
 8017636:	f04f 30ff 	mov.w	r0, #4294967295
 801763a:	e03e      	b.n	80176ba <__swsetup_r+0xba>
 801763c:	4b25      	ldr	r3, [pc, #148]	; (80176d4 <__swsetup_r+0xd4>)
 801763e:	429c      	cmp	r4, r3
 8017640:	d101      	bne.n	8017646 <__swsetup_r+0x46>
 8017642:	68ac      	ldr	r4, [r5, #8]
 8017644:	e7eb      	b.n	801761e <__swsetup_r+0x1e>
 8017646:	4b24      	ldr	r3, [pc, #144]	; (80176d8 <__swsetup_r+0xd8>)
 8017648:	429c      	cmp	r4, r3
 801764a:	bf08      	it	eq
 801764c:	68ec      	ldreq	r4, [r5, #12]
 801764e:	e7e6      	b.n	801761e <__swsetup_r+0x1e>
 8017650:	0758      	lsls	r0, r3, #29
 8017652:	d512      	bpl.n	801767a <__swsetup_r+0x7a>
 8017654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017656:	b141      	cbz	r1, 801766a <__swsetup_r+0x6a>
 8017658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801765c:	4299      	cmp	r1, r3
 801765e:	d002      	beq.n	8017666 <__swsetup_r+0x66>
 8017660:	4630      	mov	r0, r6
 8017662:	f7ff fa15 	bl	8016a90 <_free_r>
 8017666:	2300      	movs	r3, #0
 8017668:	6363      	str	r3, [r4, #52]	; 0x34
 801766a:	89a3      	ldrh	r3, [r4, #12]
 801766c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017670:	81a3      	strh	r3, [r4, #12]
 8017672:	2300      	movs	r3, #0
 8017674:	6063      	str	r3, [r4, #4]
 8017676:	6923      	ldr	r3, [r4, #16]
 8017678:	6023      	str	r3, [r4, #0]
 801767a:	89a3      	ldrh	r3, [r4, #12]
 801767c:	f043 0308 	orr.w	r3, r3, #8
 8017680:	81a3      	strh	r3, [r4, #12]
 8017682:	6923      	ldr	r3, [r4, #16]
 8017684:	b94b      	cbnz	r3, 801769a <__swsetup_r+0x9a>
 8017686:	89a3      	ldrh	r3, [r4, #12]
 8017688:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801768c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017690:	d003      	beq.n	801769a <__swsetup_r+0x9a>
 8017692:	4621      	mov	r1, r4
 8017694:	4630      	mov	r0, r6
 8017696:	f000 fa09 	bl	8017aac <__smakebuf_r>
 801769a:	89a0      	ldrh	r0, [r4, #12]
 801769c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80176a0:	f010 0301 	ands.w	r3, r0, #1
 80176a4:	d00a      	beq.n	80176bc <__swsetup_r+0xbc>
 80176a6:	2300      	movs	r3, #0
 80176a8:	60a3      	str	r3, [r4, #8]
 80176aa:	6963      	ldr	r3, [r4, #20]
 80176ac:	425b      	negs	r3, r3
 80176ae:	61a3      	str	r3, [r4, #24]
 80176b0:	6923      	ldr	r3, [r4, #16]
 80176b2:	b943      	cbnz	r3, 80176c6 <__swsetup_r+0xc6>
 80176b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80176b8:	d1ba      	bne.n	8017630 <__swsetup_r+0x30>
 80176ba:	bd70      	pop	{r4, r5, r6, pc}
 80176bc:	0781      	lsls	r1, r0, #30
 80176be:	bf58      	it	pl
 80176c0:	6963      	ldrpl	r3, [r4, #20]
 80176c2:	60a3      	str	r3, [r4, #8]
 80176c4:	e7f4      	b.n	80176b0 <__swsetup_r+0xb0>
 80176c6:	2000      	movs	r0, #0
 80176c8:	e7f7      	b.n	80176ba <__swsetup_r+0xba>
 80176ca:	bf00      	nop
 80176cc:	2400001c 	.word	0x2400001c
 80176d0:	08018640 	.word	0x08018640
 80176d4:	08018660 	.word	0x08018660
 80176d8:	08018620 	.word	0x08018620

080176dc <abort>:
 80176dc:	b508      	push	{r3, lr}
 80176de:	2006      	movs	r0, #6
 80176e0:	f000 faa2 	bl	8017c28 <raise>
 80176e4:	2001      	movs	r0, #1
 80176e6:	f7ec fa4c 	bl	8003b82 <_exit>
	...

080176ec <__sflush_r>:
 80176ec:	898a      	ldrh	r2, [r1, #12]
 80176ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176f2:	4605      	mov	r5, r0
 80176f4:	0710      	lsls	r0, r2, #28
 80176f6:	460c      	mov	r4, r1
 80176f8:	d458      	bmi.n	80177ac <__sflush_r+0xc0>
 80176fa:	684b      	ldr	r3, [r1, #4]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	dc05      	bgt.n	801770c <__sflush_r+0x20>
 8017700:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017702:	2b00      	cmp	r3, #0
 8017704:	dc02      	bgt.n	801770c <__sflush_r+0x20>
 8017706:	2000      	movs	r0, #0
 8017708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801770c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801770e:	2e00      	cmp	r6, #0
 8017710:	d0f9      	beq.n	8017706 <__sflush_r+0x1a>
 8017712:	2300      	movs	r3, #0
 8017714:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017718:	682f      	ldr	r7, [r5, #0]
 801771a:	602b      	str	r3, [r5, #0]
 801771c:	d032      	beq.n	8017784 <__sflush_r+0x98>
 801771e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017720:	89a3      	ldrh	r3, [r4, #12]
 8017722:	075a      	lsls	r2, r3, #29
 8017724:	d505      	bpl.n	8017732 <__sflush_r+0x46>
 8017726:	6863      	ldr	r3, [r4, #4]
 8017728:	1ac0      	subs	r0, r0, r3
 801772a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801772c:	b10b      	cbz	r3, 8017732 <__sflush_r+0x46>
 801772e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017730:	1ac0      	subs	r0, r0, r3
 8017732:	2300      	movs	r3, #0
 8017734:	4602      	mov	r2, r0
 8017736:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017738:	6a21      	ldr	r1, [r4, #32]
 801773a:	4628      	mov	r0, r5
 801773c:	47b0      	blx	r6
 801773e:	1c43      	adds	r3, r0, #1
 8017740:	89a3      	ldrh	r3, [r4, #12]
 8017742:	d106      	bne.n	8017752 <__sflush_r+0x66>
 8017744:	6829      	ldr	r1, [r5, #0]
 8017746:	291d      	cmp	r1, #29
 8017748:	d82c      	bhi.n	80177a4 <__sflush_r+0xb8>
 801774a:	4a2a      	ldr	r2, [pc, #168]	; (80177f4 <__sflush_r+0x108>)
 801774c:	40ca      	lsrs	r2, r1
 801774e:	07d6      	lsls	r6, r2, #31
 8017750:	d528      	bpl.n	80177a4 <__sflush_r+0xb8>
 8017752:	2200      	movs	r2, #0
 8017754:	6062      	str	r2, [r4, #4]
 8017756:	04d9      	lsls	r1, r3, #19
 8017758:	6922      	ldr	r2, [r4, #16]
 801775a:	6022      	str	r2, [r4, #0]
 801775c:	d504      	bpl.n	8017768 <__sflush_r+0x7c>
 801775e:	1c42      	adds	r2, r0, #1
 8017760:	d101      	bne.n	8017766 <__sflush_r+0x7a>
 8017762:	682b      	ldr	r3, [r5, #0]
 8017764:	b903      	cbnz	r3, 8017768 <__sflush_r+0x7c>
 8017766:	6560      	str	r0, [r4, #84]	; 0x54
 8017768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801776a:	602f      	str	r7, [r5, #0]
 801776c:	2900      	cmp	r1, #0
 801776e:	d0ca      	beq.n	8017706 <__sflush_r+0x1a>
 8017770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017774:	4299      	cmp	r1, r3
 8017776:	d002      	beq.n	801777e <__sflush_r+0x92>
 8017778:	4628      	mov	r0, r5
 801777a:	f7ff f989 	bl	8016a90 <_free_r>
 801777e:	2000      	movs	r0, #0
 8017780:	6360      	str	r0, [r4, #52]	; 0x34
 8017782:	e7c1      	b.n	8017708 <__sflush_r+0x1c>
 8017784:	6a21      	ldr	r1, [r4, #32]
 8017786:	2301      	movs	r3, #1
 8017788:	4628      	mov	r0, r5
 801778a:	47b0      	blx	r6
 801778c:	1c41      	adds	r1, r0, #1
 801778e:	d1c7      	bne.n	8017720 <__sflush_r+0x34>
 8017790:	682b      	ldr	r3, [r5, #0]
 8017792:	2b00      	cmp	r3, #0
 8017794:	d0c4      	beq.n	8017720 <__sflush_r+0x34>
 8017796:	2b1d      	cmp	r3, #29
 8017798:	d001      	beq.n	801779e <__sflush_r+0xb2>
 801779a:	2b16      	cmp	r3, #22
 801779c:	d101      	bne.n	80177a2 <__sflush_r+0xb6>
 801779e:	602f      	str	r7, [r5, #0]
 80177a0:	e7b1      	b.n	8017706 <__sflush_r+0x1a>
 80177a2:	89a3      	ldrh	r3, [r4, #12]
 80177a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177a8:	81a3      	strh	r3, [r4, #12]
 80177aa:	e7ad      	b.n	8017708 <__sflush_r+0x1c>
 80177ac:	690f      	ldr	r7, [r1, #16]
 80177ae:	2f00      	cmp	r7, #0
 80177b0:	d0a9      	beq.n	8017706 <__sflush_r+0x1a>
 80177b2:	0793      	lsls	r3, r2, #30
 80177b4:	680e      	ldr	r6, [r1, #0]
 80177b6:	bf08      	it	eq
 80177b8:	694b      	ldreq	r3, [r1, #20]
 80177ba:	600f      	str	r7, [r1, #0]
 80177bc:	bf18      	it	ne
 80177be:	2300      	movne	r3, #0
 80177c0:	eba6 0807 	sub.w	r8, r6, r7
 80177c4:	608b      	str	r3, [r1, #8]
 80177c6:	f1b8 0f00 	cmp.w	r8, #0
 80177ca:	dd9c      	ble.n	8017706 <__sflush_r+0x1a>
 80177cc:	6a21      	ldr	r1, [r4, #32]
 80177ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80177d0:	4643      	mov	r3, r8
 80177d2:	463a      	mov	r2, r7
 80177d4:	4628      	mov	r0, r5
 80177d6:	47b0      	blx	r6
 80177d8:	2800      	cmp	r0, #0
 80177da:	dc06      	bgt.n	80177ea <__sflush_r+0xfe>
 80177dc:	89a3      	ldrh	r3, [r4, #12]
 80177de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177e2:	81a3      	strh	r3, [r4, #12]
 80177e4:	f04f 30ff 	mov.w	r0, #4294967295
 80177e8:	e78e      	b.n	8017708 <__sflush_r+0x1c>
 80177ea:	4407      	add	r7, r0
 80177ec:	eba8 0800 	sub.w	r8, r8, r0
 80177f0:	e7e9      	b.n	80177c6 <__sflush_r+0xda>
 80177f2:	bf00      	nop
 80177f4:	20400001 	.word	0x20400001

080177f8 <_fflush_r>:
 80177f8:	b538      	push	{r3, r4, r5, lr}
 80177fa:	690b      	ldr	r3, [r1, #16]
 80177fc:	4605      	mov	r5, r0
 80177fe:	460c      	mov	r4, r1
 8017800:	b913      	cbnz	r3, 8017808 <_fflush_r+0x10>
 8017802:	2500      	movs	r5, #0
 8017804:	4628      	mov	r0, r5
 8017806:	bd38      	pop	{r3, r4, r5, pc}
 8017808:	b118      	cbz	r0, 8017812 <_fflush_r+0x1a>
 801780a:	6983      	ldr	r3, [r0, #24]
 801780c:	b90b      	cbnz	r3, 8017812 <_fflush_r+0x1a>
 801780e:	f000 f887 	bl	8017920 <__sinit>
 8017812:	4b14      	ldr	r3, [pc, #80]	; (8017864 <_fflush_r+0x6c>)
 8017814:	429c      	cmp	r4, r3
 8017816:	d11b      	bne.n	8017850 <_fflush_r+0x58>
 8017818:	686c      	ldr	r4, [r5, #4]
 801781a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d0ef      	beq.n	8017802 <_fflush_r+0xa>
 8017822:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017824:	07d0      	lsls	r0, r2, #31
 8017826:	d404      	bmi.n	8017832 <_fflush_r+0x3a>
 8017828:	0599      	lsls	r1, r3, #22
 801782a:	d402      	bmi.n	8017832 <_fflush_r+0x3a>
 801782c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801782e:	f000 f915 	bl	8017a5c <__retarget_lock_acquire_recursive>
 8017832:	4628      	mov	r0, r5
 8017834:	4621      	mov	r1, r4
 8017836:	f7ff ff59 	bl	80176ec <__sflush_r>
 801783a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801783c:	07da      	lsls	r2, r3, #31
 801783e:	4605      	mov	r5, r0
 8017840:	d4e0      	bmi.n	8017804 <_fflush_r+0xc>
 8017842:	89a3      	ldrh	r3, [r4, #12]
 8017844:	059b      	lsls	r3, r3, #22
 8017846:	d4dd      	bmi.n	8017804 <_fflush_r+0xc>
 8017848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801784a:	f000 f908 	bl	8017a5e <__retarget_lock_release_recursive>
 801784e:	e7d9      	b.n	8017804 <_fflush_r+0xc>
 8017850:	4b05      	ldr	r3, [pc, #20]	; (8017868 <_fflush_r+0x70>)
 8017852:	429c      	cmp	r4, r3
 8017854:	d101      	bne.n	801785a <_fflush_r+0x62>
 8017856:	68ac      	ldr	r4, [r5, #8]
 8017858:	e7df      	b.n	801781a <_fflush_r+0x22>
 801785a:	4b04      	ldr	r3, [pc, #16]	; (801786c <_fflush_r+0x74>)
 801785c:	429c      	cmp	r4, r3
 801785e:	bf08      	it	eq
 8017860:	68ec      	ldreq	r4, [r5, #12]
 8017862:	e7da      	b.n	801781a <_fflush_r+0x22>
 8017864:	08018640 	.word	0x08018640
 8017868:	08018660 	.word	0x08018660
 801786c:	08018620 	.word	0x08018620

08017870 <std>:
 8017870:	2300      	movs	r3, #0
 8017872:	b510      	push	{r4, lr}
 8017874:	4604      	mov	r4, r0
 8017876:	e9c0 3300 	strd	r3, r3, [r0]
 801787a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801787e:	6083      	str	r3, [r0, #8]
 8017880:	8181      	strh	r1, [r0, #12]
 8017882:	6643      	str	r3, [r0, #100]	; 0x64
 8017884:	81c2      	strh	r2, [r0, #14]
 8017886:	6183      	str	r3, [r0, #24]
 8017888:	4619      	mov	r1, r3
 801788a:	2208      	movs	r2, #8
 801788c:	305c      	adds	r0, #92	; 0x5c
 801788e:	f7fd f983 	bl	8014b98 <memset>
 8017892:	4b05      	ldr	r3, [pc, #20]	; (80178a8 <std+0x38>)
 8017894:	6263      	str	r3, [r4, #36]	; 0x24
 8017896:	4b05      	ldr	r3, [pc, #20]	; (80178ac <std+0x3c>)
 8017898:	62a3      	str	r3, [r4, #40]	; 0x28
 801789a:	4b05      	ldr	r3, [pc, #20]	; (80178b0 <std+0x40>)
 801789c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801789e:	4b05      	ldr	r3, [pc, #20]	; (80178b4 <std+0x44>)
 80178a0:	6224      	str	r4, [r4, #32]
 80178a2:	6323      	str	r3, [r4, #48]	; 0x30
 80178a4:	bd10      	pop	{r4, pc}
 80178a6:	bf00      	nop
 80178a8:	08017c61 	.word	0x08017c61
 80178ac:	08017c83 	.word	0x08017c83
 80178b0:	08017cbb 	.word	0x08017cbb
 80178b4:	08017cdf 	.word	0x08017cdf

080178b8 <_cleanup_r>:
 80178b8:	4901      	ldr	r1, [pc, #4]	; (80178c0 <_cleanup_r+0x8>)
 80178ba:	f000 b8af 	b.w	8017a1c <_fwalk_reent>
 80178be:	bf00      	nop
 80178c0:	080177f9 	.word	0x080177f9

080178c4 <__sfmoreglue>:
 80178c4:	b570      	push	{r4, r5, r6, lr}
 80178c6:	2268      	movs	r2, #104	; 0x68
 80178c8:	1e4d      	subs	r5, r1, #1
 80178ca:	4355      	muls	r5, r2
 80178cc:	460e      	mov	r6, r1
 80178ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80178d2:	f7ff f949 	bl	8016b68 <_malloc_r>
 80178d6:	4604      	mov	r4, r0
 80178d8:	b140      	cbz	r0, 80178ec <__sfmoreglue+0x28>
 80178da:	2100      	movs	r1, #0
 80178dc:	e9c0 1600 	strd	r1, r6, [r0]
 80178e0:	300c      	adds	r0, #12
 80178e2:	60a0      	str	r0, [r4, #8]
 80178e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80178e8:	f7fd f956 	bl	8014b98 <memset>
 80178ec:	4620      	mov	r0, r4
 80178ee:	bd70      	pop	{r4, r5, r6, pc}

080178f0 <__sfp_lock_acquire>:
 80178f0:	4801      	ldr	r0, [pc, #4]	; (80178f8 <__sfp_lock_acquire+0x8>)
 80178f2:	f000 b8b3 	b.w	8017a5c <__retarget_lock_acquire_recursive>
 80178f6:	bf00      	nop
 80178f8:	24008ec1 	.word	0x24008ec1

080178fc <__sfp_lock_release>:
 80178fc:	4801      	ldr	r0, [pc, #4]	; (8017904 <__sfp_lock_release+0x8>)
 80178fe:	f000 b8ae 	b.w	8017a5e <__retarget_lock_release_recursive>
 8017902:	bf00      	nop
 8017904:	24008ec1 	.word	0x24008ec1

08017908 <__sinit_lock_acquire>:
 8017908:	4801      	ldr	r0, [pc, #4]	; (8017910 <__sinit_lock_acquire+0x8>)
 801790a:	f000 b8a7 	b.w	8017a5c <__retarget_lock_acquire_recursive>
 801790e:	bf00      	nop
 8017910:	24008ec2 	.word	0x24008ec2

08017914 <__sinit_lock_release>:
 8017914:	4801      	ldr	r0, [pc, #4]	; (801791c <__sinit_lock_release+0x8>)
 8017916:	f000 b8a2 	b.w	8017a5e <__retarget_lock_release_recursive>
 801791a:	bf00      	nop
 801791c:	24008ec2 	.word	0x24008ec2

08017920 <__sinit>:
 8017920:	b510      	push	{r4, lr}
 8017922:	4604      	mov	r4, r0
 8017924:	f7ff fff0 	bl	8017908 <__sinit_lock_acquire>
 8017928:	69a3      	ldr	r3, [r4, #24]
 801792a:	b11b      	cbz	r3, 8017934 <__sinit+0x14>
 801792c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017930:	f7ff bff0 	b.w	8017914 <__sinit_lock_release>
 8017934:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017938:	6523      	str	r3, [r4, #80]	; 0x50
 801793a:	4b13      	ldr	r3, [pc, #76]	; (8017988 <__sinit+0x68>)
 801793c:	4a13      	ldr	r2, [pc, #76]	; (801798c <__sinit+0x6c>)
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	62a2      	str	r2, [r4, #40]	; 0x28
 8017942:	42a3      	cmp	r3, r4
 8017944:	bf04      	itt	eq
 8017946:	2301      	moveq	r3, #1
 8017948:	61a3      	streq	r3, [r4, #24]
 801794a:	4620      	mov	r0, r4
 801794c:	f000 f820 	bl	8017990 <__sfp>
 8017950:	6060      	str	r0, [r4, #4]
 8017952:	4620      	mov	r0, r4
 8017954:	f000 f81c 	bl	8017990 <__sfp>
 8017958:	60a0      	str	r0, [r4, #8]
 801795a:	4620      	mov	r0, r4
 801795c:	f000 f818 	bl	8017990 <__sfp>
 8017960:	2200      	movs	r2, #0
 8017962:	60e0      	str	r0, [r4, #12]
 8017964:	2104      	movs	r1, #4
 8017966:	6860      	ldr	r0, [r4, #4]
 8017968:	f7ff ff82 	bl	8017870 <std>
 801796c:	68a0      	ldr	r0, [r4, #8]
 801796e:	2201      	movs	r2, #1
 8017970:	2109      	movs	r1, #9
 8017972:	f7ff ff7d 	bl	8017870 <std>
 8017976:	68e0      	ldr	r0, [r4, #12]
 8017978:	2202      	movs	r2, #2
 801797a:	2112      	movs	r1, #18
 801797c:	f7ff ff78 	bl	8017870 <std>
 8017980:	2301      	movs	r3, #1
 8017982:	61a3      	str	r3, [r4, #24]
 8017984:	e7d2      	b.n	801792c <__sinit+0xc>
 8017986:	bf00      	nop
 8017988:	080181f8 	.word	0x080181f8
 801798c:	080178b9 	.word	0x080178b9

08017990 <__sfp>:
 8017990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017992:	4607      	mov	r7, r0
 8017994:	f7ff ffac 	bl	80178f0 <__sfp_lock_acquire>
 8017998:	4b1e      	ldr	r3, [pc, #120]	; (8017a14 <__sfp+0x84>)
 801799a:	681e      	ldr	r6, [r3, #0]
 801799c:	69b3      	ldr	r3, [r6, #24]
 801799e:	b913      	cbnz	r3, 80179a6 <__sfp+0x16>
 80179a0:	4630      	mov	r0, r6
 80179a2:	f7ff ffbd 	bl	8017920 <__sinit>
 80179a6:	3648      	adds	r6, #72	; 0x48
 80179a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80179ac:	3b01      	subs	r3, #1
 80179ae:	d503      	bpl.n	80179b8 <__sfp+0x28>
 80179b0:	6833      	ldr	r3, [r6, #0]
 80179b2:	b30b      	cbz	r3, 80179f8 <__sfp+0x68>
 80179b4:	6836      	ldr	r6, [r6, #0]
 80179b6:	e7f7      	b.n	80179a8 <__sfp+0x18>
 80179b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80179bc:	b9d5      	cbnz	r5, 80179f4 <__sfp+0x64>
 80179be:	4b16      	ldr	r3, [pc, #88]	; (8017a18 <__sfp+0x88>)
 80179c0:	60e3      	str	r3, [r4, #12]
 80179c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80179c6:	6665      	str	r5, [r4, #100]	; 0x64
 80179c8:	f000 f847 	bl	8017a5a <__retarget_lock_init_recursive>
 80179cc:	f7ff ff96 	bl	80178fc <__sfp_lock_release>
 80179d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80179d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80179d8:	6025      	str	r5, [r4, #0]
 80179da:	61a5      	str	r5, [r4, #24]
 80179dc:	2208      	movs	r2, #8
 80179de:	4629      	mov	r1, r5
 80179e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80179e4:	f7fd f8d8 	bl	8014b98 <memset>
 80179e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80179ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80179f0:	4620      	mov	r0, r4
 80179f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179f4:	3468      	adds	r4, #104	; 0x68
 80179f6:	e7d9      	b.n	80179ac <__sfp+0x1c>
 80179f8:	2104      	movs	r1, #4
 80179fa:	4638      	mov	r0, r7
 80179fc:	f7ff ff62 	bl	80178c4 <__sfmoreglue>
 8017a00:	4604      	mov	r4, r0
 8017a02:	6030      	str	r0, [r6, #0]
 8017a04:	2800      	cmp	r0, #0
 8017a06:	d1d5      	bne.n	80179b4 <__sfp+0x24>
 8017a08:	f7ff ff78 	bl	80178fc <__sfp_lock_release>
 8017a0c:	230c      	movs	r3, #12
 8017a0e:	603b      	str	r3, [r7, #0]
 8017a10:	e7ee      	b.n	80179f0 <__sfp+0x60>
 8017a12:	bf00      	nop
 8017a14:	080181f8 	.word	0x080181f8
 8017a18:	ffff0001 	.word	0xffff0001

08017a1c <_fwalk_reent>:
 8017a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a20:	4606      	mov	r6, r0
 8017a22:	4688      	mov	r8, r1
 8017a24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017a28:	2700      	movs	r7, #0
 8017a2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017a2e:	f1b9 0901 	subs.w	r9, r9, #1
 8017a32:	d505      	bpl.n	8017a40 <_fwalk_reent+0x24>
 8017a34:	6824      	ldr	r4, [r4, #0]
 8017a36:	2c00      	cmp	r4, #0
 8017a38:	d1f7      	bne.n	8017a2a <_fwalk_reent+0xe>
 8017a3a:	4638      	mov	r0, r7
 8017a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a40:	89ab      	ldrh	r3, [r5, #12]
 8017a42:	2b01      	cmp	r3, #1
 8017a44:	d907      	bls.n	8017a56 <_fwalk_reent+0x3a>
 8017a46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017a4a:	3301      	adds	r3, #1
 8017a4c:	d003      	beq.n	8017a56 <_fwalk_reent+0x3a>
 8017a4e:	4629      	mov	r1, r5
 8017a50:	4630      	mov	r0, r6
 8017a52:	47c0      	blx	r8
 8017a54:	4307      	orrs	r7, r0
 8017a56:	3568      	adds	r5, #104	; 0x68
 8017a58:	e7e9      	b.n	8017a2e <_fwalk_reent+0x12>

08017a5a <__retarget_lock_init_recursive>:
 8017a5a:	4770      	bx	lr

08017a5c <__retarget_lock_acquire_recursive>:
 8017a5c:	4770      	bx	lr

08017a5e <__retarget_lock_release_recursive>:
 8017a5e:	4770      	bx	lr

08017a60 <__swhatbuf_r>:
 8017a60:	b570      	push	{r4, r5, r6, lr}
 8017a62:	460e      	mov	r6, r1
 8017a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a68:	2900      	cmp	r1, #0
 8017a6a:	b096      	sub	sp, #88	; 0x58
 8017a6c:	4614      	mov	r4, r2
 8017a6e:	461d      	mov	r5, r3
 8017a70:	da08      	bge.n	8017a84 <__swhatbuf_r+0x24>
 8017a72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017a76:	2200      	movs	r2, #0
 8017a78:	602a      	str	r2, [r5, #0]
 8017a7a:	061a      	lsls	r2, r3, #24
 8017a7c:	d410      	bmi.n	8017aa0 <__swhatbuf_r+0x40>
 8017a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017a82:	e00e      	b.n	8017aa2 <__swhatbuf_r+0x42>
 8017a84:	466a      	mov	r2, sp
 8017a86:	f000 f951 	bl	8017d2c <_fstat_r>
 8017a8a:	2800      	cmp	r0, #0
 8017a8c:	dbf1      	blt.n	8017a72 <__swhatbuf_r+0x12>
 8017a8e:	9a01      	ldr	r2, [sp, #4]
 8017a90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017a94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017a98:	425a      	negs	r2, r3
 8017a9a:	415a      	adcs	r2, r3
 8017a9c:	602a      	str	r2, [r5, #0]
 8017a9e:	e7ee      	b.n	8017a7e <__swhatbuf_r+0x1e>
 8017aa0:	2340      	movs	r3, #64	; 0x40
 8017aa2:	2000      	movs	r0, #0
 8017aa4:	6023      	str	r3, [r4, #0]
 8017aa6:	b016      	add	sp, #88	; 0x58
 8017aa8:	bd70      	pop	{r4, r5, r6, pc}
	...

08017aac <__smakebuf_r>:
 8017aac:	898b      	ldrh	r3, [r1, #12]
 8017aae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017ab0:	079d      	lsls	r5, r3, #30
 8017ab2:	4606      	mov	r6, r0
 8017ab4:	460c      	mov	r4, r1
 8017ab6:	d507      	bpl.n	8017ac8 <__smakebuf_r+0x1c>
 8017ab8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017abc:	6023      	str	r3, [r4, #0]
 8017abe:	6123      	str	r3, [r4, #16]
 8017ac0:	2301      	movs	r3, #1
 8017ac2:	6163      	str	r3, [r4, #20]
 8017ac4:	b002      	add	sp, #8
 8017ac6:	bd70      	pop	{r4, r5, r6, pc}
 8017ac8:	ab01      	add	r3, sp, #4
 8017aca:	466a      	mov	r2, sp
 8017acc:	f7ff ffc8 	bl	8017a60 <__swhatbuf_r>
 8017ad0:	9900      	ldr	r1, [sp, #0]
 8017ad2:	4605      	mov	r5, r0
 8017ad4:	4630      	mov	r0, r6
 8017ad6:	f7ff f847 	bl	8016b68 <_malloc_r>
 8017ada:	b948      	cbnz	r0, 8017af0 <__smakebuf_r+0x44>
 8017adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ae0:	059a      	lsls	r2, r3, #22
 8017ae2:	d4ef      	bmi.n	8017ac4 <__smakebuf_r+0x18>
 8017ae4:	f023 0303 	bic.w	r3, r3, #3
 8017ae8:	f043 0302 	orr.w	r3, r3, #2
 8017aec:	81a3      	strh	r3, [r4, #12]
 8017aee:	e7e3      	b.n	8017ab8 <__smakebuf_r+0xc>
 8017af0:	4b0d      	ldr	r3, [pc, #52]	; (8017b28 <__smakebuf_r+0x7c>)
 8017af2:	62b3      	str	r3, [r6, #40]	; 0x28
 8017af4:	89a3      	ldrh	r3, [r4, #12]
 8017af6:	6020      	str	r0, [r4, #0]
 8017af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017afc:	81a3      	strh	r3, [r4, #12]
 8017afe:	9b00      	ldr	r3, [sp, #0]
 8017b00:	6163      	str	r3, [r4, #20]
 8017b02:	9b01      	ldr	r3, [sp, #4]
 8017b04:	6120      	str	r0, [r4, #16]
 8017b06:	b15b      	cbz	r3, 8017b20 <__smakebuf_r+0x74>
 8017b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b0c:	4630      	mov	r0, r6
 8017b0e:	f000 f91f 	bl	8017d50 <_isatty_r>
 8017b12:	b128      	cbz	r0, 8017b20 <__smakebuf_r+0x74>
 8017b14:	89a3      	ldrh	r3, [r4, #12]
 8017b16:	f023 0303 	bic.w	r3, r3, #3
 8017b1a:	f043 0301 	orr.w	r3, r3, #1
 8017b1e:	81a3      	strh	r3, [r4, #12]
 8017b20:	89a0      	ldrh	r0, [r4, #12]
 8017b22:	4305      	orrs	r5, r0
 8017b24:	81a5      	strh	r5, [r4, #12]
 8017b26:	e7cd      	b.n	8017ac4 <__smakebuf_r+0x18>
 8017b28:	080178b9 	.word	0x080178b9

08017b2c <memmove>:
 8017b2c:	4288      	cmp	r0, r1
 8017b2e:	b510      	push	{r4, lr}
 8017b30:	eb01 0402 	add.w	r4, r1, r2
 8017b34:	d902      	bls.n	8017b3c <memmove+0x10>
 8017b36:	4284      	cmp	r4, r0
 8017b38:	4623      	mov	r3, r4
 8017b3a:	d807      	bhi.n	8017b4c <memmove+0x20>
 8017b3c:	1e43      	subs	r3, r0, #1
 8017b3e:	42a1      	cmp	r1, r4
 8017b40:	d008      	beq.n	8017b54 <memmove+0x28>
 8017b42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017b46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017b4a:	e7f8      	b.n	8017b3e <memmove+0x12>
 8017b4c:	4402      	add	r2, r0
 8017b4e:	4601      	mov	r1, r0
 8017b50:	428a      	cmp	r2, r1
 8017b52:	d100      	bne.n	8017b56 <memmove+0x2a>
 8017b54:	bd10      	pop	{r4, pc}
 8017b56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017b5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017b5e:	e7f7      	b.n	8017b50 <memmove+0x24>

08017b60 <__malloc_lock>:
 8017b60:	4801      	ldr	r0, [pc, #4]	; (8017b68 <__malloc_lock+0x8>)
 8017b62:	f7ff bf7b 	b.w	8017a5c <__retarget_lock_acquire_recursive>
 8017b66:	bf00      	nop
 8017b68:	24008ec0 	.word	0x24008ec0

08017b6c <__malloc_unlock>:
 8017b6c:	4801      	ldr	r0, [pc, #4]	; (8017b74 <__malloc_unlock+0x8>)
 8017b6e:	f7ff bf76 	b.w	8017a5e <__retarget_lock_release_recursive>
 8017b72:	bf00      	nop
 8017b74:	24008ec0 	.word	0x24008ec0

08017b78 <_realloc_r>:
 8017b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b7c:	4680      	mov	r8, r0
 8017b7e:	4614      	mov	r4, r2
 8017b80:	460e      	mov	r6, r1
 8017b82:	b921      	cbnz	r1, 8017b8e <_realloc_r+0x16>
 8017b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b88:	4611      	mov	r1, r2
 8017b8a:	f7fe bfed 	b.w	8016b68 <_malloc_r>
 8017b8e:	b92a      	cbnz	r2, 8017b9c <_realloc_r+0x24>
 8017b90:	f7fe ff7e 	bl	8016a90 <_free_r>
 8017b94:	4625      	mov	r5, r4
 8017b96:	4628      	mov	r0, r5
 8017b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b9c:	f000 f8fa 	bl	8017d94 <_malloc_usable_size_r>
 8017ba0:	4284      	cmp	r4, r0
 8017ba2:	4607      	mov	r7, r0
 8017ba4:	d802      	bhi.n	8017bac <_realloc_r+0x34>
 8017ba6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017baa:	d812      	bhi.n	8017bd2 <_realloc_r+0x5a>
 8017bac:	4621      	mov	r1, r4
 8017bae:	4640      	mov	r0, r8
 8017bb0:	f7fe ffda 	bl	8016b68 <_malloc_r>
 8017bb4:	4605      	mov	r5, r0
 8017bb6:	2800      	cmp	r0, #0
 8017bb8:	d0ed      	beq.n	8017b96 <_realloc_r+0x1e>
 8017bba:	42bc      	cmp	r4, r7
 8017bbc:	4622      	mov	r2, r4
 8017bbe:	4631      	mov	r1, r6
 8017bc0:	bf28      	it	cs
 8017bc2:	463a      	movcs	r2, r7
 8017bc4:	f7fc ffda 	bl	8014b7c <memcpy>
 8017bc8:	4631      	mov	r1, r6
 8017bca:	4640      	mov	r0, r8
 8017bcc:	f7fe ff60 	bl	8016a90 <_free_r>
 8017bd0:	e7e1      	b.n	8017b96 <_realloc_r+0x1e>
 8017bd2:	4635      	mov	r5, r6
 8017bd4:	e7df      	b.n	8017b96 <_realloc_r+0x1e>

08017bd6 <_raise_r>:
 8017bd6:	291f      	cmp	r1, #31
 8017bd8:	b538      	push	{r3, r4, r5, lr}
 8017bda:	4604      	mov	r4, r0
 8017bdc:	460d      	mov	r5, r1
 8017bde:	d904      	bls.n	8017bea <_raise_r+0x14>
 8017be0:	2316      	movs	r3, #22
 8017be2:	6003      	str	r3, [r0, #0]
 8017be4:	f04f 30ff 	mov.w	r0, #4294967295
 8017be8:	bd38      	pop	{r3, r4, r5, pc}
 8017bea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017bec:	b112      	cbz	r2, 8017bf4 <_raise_r+0x1e>
 8017bee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017bf2:	b94b      	cbnz	r3, 8017c08 <_raise_r+0x32>
 8017bf4:	4620      	mov	r0, r4
 8017bf6:	f000 f831 	bl	8017c5c <_getpid_r>
 8017bfa:	462a      	mov	r2, r5
 8017bfc:	4601      	mov	r1, r0
 8017bfe:	4620      	mov	r0, r4
 8017c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c04:	f000 b818 	b.w	8017c38 <_kill_r>
 8017c08:	2b01      	cmp	r3, #1
 8017c0a:	d00a      	beq.n	8017c22 <_raise_r+0x4c>
 8017c0c:	1c59      	adds	r1, r3, #1
 8017c0e:	d103      	bne.n	8017c18 <_raise_r+0x42>
 8017c10:	2316      	movs	r3, #22
 8017c12:	6003      	str	r3, [r0, #0]
 8017c14:	2001      	movs	r0, #1
 8017c16:	e7e7      	b.n	8017be8 <_raise_r+0x12>
 8017c18:	2400      	movs	r4, #0
 8017c1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017c1e:	4628      	mov	r0, r5
 8017c20:	4798      	blx	r3
 8017c22:	2000      	movs	r0, #0
 8017c24:	e7e0      	b.n	8017be8 <_raise_r+0x12>
	...

08017c28 <raise>:
 8017c28:	4b02      	ldr	r3, [pc, #8]	; (8017c34 <raise+0xc>)
 8017c2a:	4601      	mov	r1, r0
 8017c2c:	6818      	ldr	r0, [r3, #0]
 8017c2e:	f7ff bfd2 	b.w	8017bd6 <_raise_r>
 8017c32:	bf00      	nop
 8017c34:	2400001c 	.word	0x2400001c

08017c38 <_kill_r>:
 8017c38:	b538      	push	{r3, r4, r5, lr}
 8017c3a:	4d07      	ldr	r5, [pc, #28]	; (8017c58 <_kill_r+0x20>)
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	4604      	mov	r4, r0
 8017c40:	4608      	mov	r0, r1
 8017c42:	4611      	mov	r1, r2
 8017c44:	602b      	str	r3, [r5, #0]
 8017c46:	f7eb ff8c 	bl	8003b62 <_kill>
 8017c4a:	1c43      	adds	r3, r0, #1
 8017c4c:	d102      	bne.n	8017c54 <_kill_r+0x1c>
 8017c4e:	682b      	ldr	r3, [r5, #0]
 8017c50:	b103      	cbz	r3, 8017c54 <_kill_r+0x1c>
 8017c52:	6023      	str	r3, [r4, #0]
 8017c54:	bd38      	pop	{r3, r4, r5, pc}
 8017c56:	bf00      	nop
 8017c58:	24008ec4 	.word	0x24008ec4

08017c5c <_getpid_r>:
 8017c5c:	f7eb bf79 	b.w	8003b52 <_getpid>

08017c60 <__sread>:
 8017c60:	b510      	push	{r4, lr}
 8017c62:	460c      	mov	r4, r1
 8017c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c68:	f000 f89c 	bl	8017da4 <_read_r>
 8017c6c:	2800      	cmp	r0, #0
 8017c6e:	bfab      	itete	ge
 8017c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017c72:	89a3      	ldrhlt	r3, [r4, #12]
 8017c74:	181b      	addge	r3, r3, r0
 8017c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017c7a:	bfac      	ite	ge
 8017c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8017c7e:	81a3      	strhlt	r3, [r4, #12]
 8017c80:	bd10      	pop	{r4, pc}

08017c82 <__swrite>:
 8017c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c86:	461f      	mov	r7, r3
 8017c88:	898b      	ldrh	r3, [r1, #12]
 8017c8a:	05db      	lsls	r3, r3, #23
 8017c8c:	4605      	mov	r5, r0
 8017c8e:	460c      	mov	r4, r1
 8017c90:	4616      	mov	r6, r2
 8017c92:	d505      	bpl.n	8017ca0 <__swrite+0x1e>
 8017c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c98:	2302      	movs	r3, #2
 8017c9a:	2200      	movs	r2, #0
 8017c9c:	f000 f868 	bl	8017d70 <_lseek_r>
 8017ca0:	89a3      	ldrh	r3, [r4, #12]
 8017ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017caa:	81a3      	strh	r3, [r4, #12]
 8017cac:	4632      	mov	r2, r6
 8017cae:	463b      	mov	r3, r7
 8017cb0:	4628      	mov	r0, r5
 8017cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cb6:	f000 b817 	b.w	8017ce8 <_write_r>

08017cba <__sseek>:
 8017cba:	b510      	push	{r4, lr}
 8017cbc:	460c      	mov	r4, r1
 8017cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cc2:	f000 f855 	bl	8017d70 <_lseek_r>
 8017cc6:	1c43      	adds	r3, r0, #1
 8017cc8:	89a3      	ldrh	r3, [r4, #12]
 8017cca:	bf15      	itete	ne
 8017ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8017cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017cd6:	81a3      	strheq	r3, [r4, #12]
 8017cd8:	bf18      	it	ne
 8017cda:	81a3      	strhne	r3, [r4, #12]
 8017cdc:	bd10      	pop	{r4, pc}

08017cde <__sclose>:
 8017cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ce2:	f000 b813 	b.w	8017d0c <_close_r>
	...

08017ce8 <_write_r>:
 8017ce8:	b538      	push	{r3, r4, r5, lr}
 8017cea:	4d07      	ldr	r5, [pc, #28]	; (8017d08 <_write_r+0x20>)
 8017cec:	4604      	mov	r4, r0
 8017cee:	4608      	mov	r0, r1
 8017cf0:	4611      	mov	r1, r2
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	602a      	str	r2, [r5, #0]
 8017cf6:	461a      	mov	r2, r3
 8017cf8:	f7eb ff6a 	bl	8003bd0 <_write>
 8017cfc:	1c43      	adds	r3, r0, #1
 8017cfe:	d102      	bne.n	8017d06 <_write_r+0x1e>
 8017d00:	682b      	ldr	r3, [r5, #0]
 8017d02:	b103      	cbz	r3, 8017d06 <_write_r+0x1e>
 8017d04:	6023      	str	r3, [r4, #0]
 8017d06:	bd38      	pop	{r3, r4, r5, pc}
 8017d08:	24008ec4 	.word	0x24008ec4

08017d0c <_close_r>:
 8017d0c:	b538      	push	{r3, r4, r5, lr}
 8017d0e:	4d06      	ldr	r5, [pc, #24]	; (8017d28 <_close_r+0x1c>)
 8017d10:	2300      	movs	r3, #0
 8017d12:	4604      	mov	r4, r0
 8017d14:	4608      	mov	r0, r1
 8017d16:	602b      	str	r3, [r5, #0]
 8017d18:	f7eb ff76 	bl	8003c08 <_close>
 8017d1c:	1c43      	adds	r3, r0, #1
 8017d1e:	d102      	bne.n	8017d26 <_close_r+0x1a>
 8017d20:	682b      	ldr	r3, [r5, #0]
 8017d22:	b103      	cbz	r3, 8017d26 <_close_r+0x1a>
 8017d24:	6023      	str	r3, [r4, #0]
 8017d26:	bd38      	pop	{r3, r4, r5, pc}
 8017d28:	24008ec4 	.word	0x24008ec4

08017d2c <_fstat_r>:
 8017d2c:	b538      	push	{r3, r4, r5, lr}
 8017d2e:	4d07      	ldr	r5, [pc, #28]	; (8017d4c <_fstat_r+0x20>)
 8017d30:	2300      	movs	r3, #0
 8017d32:	4604      	mov	r4, r0
 8017d34:	4608      	mov	r0, r1
 8017d36:	4611      	mov	r1, r2
 8017d38:	602b      	str	r3, [r5, #0]
 8017d3a:	f7eb ff71 	bl	8003c20 <_fstat>
 8017d3e:	1c43      	adds	r3, r0, #1
 8017d40:	d102      	bne.n	8017d48 <_fstat_r+0x1c>
 8017d42:	682b      	ldr	r3, [r5, #0]
 8017d44:	b103      	cbz	r3, 8017d48 <_fstat_r+0x1c>
 8017d46:	6023      	str	r3, [r4, #0]
 8017d48:	bd38      	pop	{r3, r4, r5, pc}
 8017d4a:	bf00      	nop
 8017d4c:	24008ec4 	.word	0x24008ec4

08017d50 <_isatty_r>:
 8017d50:	b538      	push	{r3, r4, r5, lr}
 8017d52:	4d06      	ldr	r5, [pc, #24]	; (8017d6c <_isatty_r+0x1c>)
 8017d54:	2300      	movs	r3, #0
 8017d56:	4604      	mov	r4, r0
 8017d58:	4608      	mov	r0, r1
 8017d5a:	602b      	str	r3, [r5, #0]
 8017d5c:	f7eb ff70 	bl	8003c40 <_isatty>
 8017d60:	1c43      	adds	r3, r0, #1
 8017d62:	d102      	bne.n	8017d6a <_isatty_r+0x1a>
 8017d64:	682b      	ldr	r3, [r5, #0]
 8017d66:	b103      	cbz	r3, 8017d6a <_isatty_r+0x1a>
 8017d68:	6023      	str	r3, [r4, #0]
 8017d6a:	bd38      	pop	{r3, r4, r5, pc}
 8017d6c:	24008ec4 	.word	0x24008ec4

08017d70 <_lseek_r>:
 8017d70:	b538      	push	{r3, r4, r5, lr}
 8017d72:	4d07      	ldr	r5, [pc, #28]	; (8017d90 <_lseek_r+0x20>)
 8017d74:	4604      	mov	r4, r0
 8017d76:	4608      	mov	r0, r1
 8017d78:	4611      	mov	r1, r2
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	602a      	str	r2, [r5, #0]
 8017d7e:	461a      	mov	r2, r3
 8017d80:	f7eb ff69 	bl	8003c56 <_lseek>
 8017d84:	1c43      	adds	r3, r0, #1
 8017d86:	d102      	bne.n	8017d8e <_lseek_r+0x1e>
 8017d88:	682b      	ldr	r3, [r5, #0]
 8017d8a:	b103      	cbz	r3, 8017d8e <_lseek_r+0x1e>
 8017d8c:	6023      	str	r3, [r4, #0]
 8017d8e:	bd38      	pop	{r3, r4, r5, pc}
 8017d90:	24008ec4 	.word	0x24008ec4

08017d94 <_malloc_usable_size_r>:
 8017d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d98:	1f18      	subs	r0, r3, #4
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	bfbc      	itt	lt
 8017d9e:	580b      	ldrlt	r3, [r1, r0]
 8017da0:	18c0      	addlt	r0, r0, r3
 8017da2:	4770      	bx	lr

08017da4 <_read_r>:
 8017da4:	b538      	push	{r3, r4, r5, lr}
 8017da6:	4d07      	ldr	r5, [pc, #28]	; (8017dc4 <_read_r+0x20>)
 8017da8:	4604      	mov	r4, r0
 8017daa:	4608      	mov	r0, r1
 8017dac:	4611      	mov	r1, r2
 8017dae:	2200      	movs	r2, #0
 8017db0:	602a      	str	r2, [r5, #0]
 8017db2:	461a      	mov	r2, r3
 8017db4:	f7eb feef 	bl	8003b96 <_read>
 8017db8:	1c43      	adds	r3, r0, #1
 8017dba:	d102      	bne.n	8017dc2 <_read_r+0x1e>
 8017dbc:	682b      	ldr	r3, [r5, #0]
 8017dbe:	b103      	cbz	r3, 8017dc2 <_read_r+0x1e>
 8017dc0:	6023      	str	r3, [r4, #0]
 8017dc2:	bd38      	pop	{r3, r4, r5, pc}
 8017dc4:	24008ec4 	.word	0x24008ec4

08017dc8 <_init>:
 8017dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dca:	bf00      	nop
 8017dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017dce:	bc08      	pop	{r3}
 8017dd0:	469e      	mov	lr, r3
 8017dd2:	4770      	bx	lr

08017dd4 <_fini>:
 8017dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dd6:	bf00      	nop
 8017dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017dda:	bc08      	pop	{r3}
 8017ddc:	469e      	mov	lr, r3
 8017dde:	4770      	bx	lr
