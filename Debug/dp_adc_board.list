
dp_adc_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012590  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08012840  08012840  00022840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012918  08012918  00022918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012920  08012920  00022920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012924  08012924  00022924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08012928  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000089ec  2400007c  080129a4  0003007c  2**2
                  ALLOC
  8 .sdram_section 00000000  c0000000  c0000000  0003007c  2**0
                  CONTENTS
  9 ._user_heap_stack 00000c00  24008a68  24008a68  00038a68  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002699a  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004217  00000000  00000000  00056a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001ce8  00000000  00000000  0005ac60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001b30  00000000  00000000  0005c948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036080  00000000  00000000  0005e478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00028480  00000000  00000000  000944f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015086b  00000000  00000000  000bc978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0020d1e3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007e68  00000000  00000000  0020d234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08012828 	.word	0x08012828

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	08012828 	.word	0x08012828

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SDRAM_Startup_Sequence>:
uint32_t aTxBuffer[BUFFER_SIZE];
uint32_t aRxBuffer[BUFFER_SIZE];
uint32_t uwIndex = 0;
__IO uint32_t uwWriteReadStatus = 0;

void SDRAM_Startup_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
  /* Program the SDRAM external device */
  SDRAM_Initialization_Sequence(hsdram, Command);
 800069e:	6839      	ldr	r1, [r7, #0]
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f875 	bl	8000790 <SDRAM_Initialization_Sequence>

  /*##-2- SDRAM memory read/write access #####################################*/
  //*(__IO uint32_t*) (TEST_WRITE) = 0x1;

  /* Fill the buffer to write */
  Fill_Buffer(aTxBuffer, BUFFER_SIZE, 0xA244250F);
 80006a6:	4a34      	ldr	r2, [pc, #208]	; (8000778 <SDRAM_Startup_Sequence+0xe4>)
 80006a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ac:	4833      	ldr	r0, [pc, #204]	; (800077c <SDRAM_Startup_Sequence+0xe8>)
 80006ae:	f000 f8cc 	bl	800084a <Fill_Buffer>

    /* Fill the Read buffer */
  Fill_Buffer(aRxBuffer, BUFFER_SIZE, 0xBBBBBBBB);
 80006b2:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 80006b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ba:	4831      	ldr	r0, [pc, #196]	; (8000780 <SDRAM_Startup_Sequence+0xec>)
 80006bc:	f000 f8c5 	bl	800084a <Fill_Buffer>

  /* Write data to the SDRAM memory */
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	e010      	b.n	80006ea <SDRAM_Startup_Sequence+0x56>
  {
    *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uwIndex) = aTxBuffer[uwIndex];
 80006c8:	4b2e      	ldr	r3, [pc, #184]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006ce:	6819      	ldr	r1, [r3, #0]
 80006d0:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SDRAM_Startup_Sequence+0xf4>)
 80006d2:	440b      	add	r3, r1
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4619      	mov	r1, r3
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <SDRAM_Startup_Sequence+0xe8>)
 80006da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006de:	600b      	str	r3, [r1, #0]
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	4a27      	ldr	r2, [pc, #156]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006e8:	6013      	str	r3, [r2, #0]
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006f2:	d3e9      	bcc.n	80006c8 <SDRAM_Startup_Sequence+0x34>
  }

  /* Read back data from the SDRAM memory */
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	e010      	b.n	800071e <SDRAM_Startup_Sequence+0x8a>
  {
    aRxBuffer[uwIndex] = *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uwIndex);
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SDRAM_Startup_Sequence+0xf4>)
 8000702:	4413      	add	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	461a      	mov	r2, r3
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	6812      	ldr	r2, [r2, #0]
 800070e:	491c      	ldr	r1, [pc, #112]	; (8000780 <SDRAM_Startup_Sequence+0xec>)
 8000710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	4a1a      	ldr	r2, [pc, #104]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800071c:	6013      	str	r3, [r2, #0]
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000726:	d3e9      	bcc.n	80006fc <SDRAM_Startup_Sequence+0x68>
  }

  /*##-3- Checking data integrity ############################################*/

  for (uwIndex = 0; (uwIndex < BUFFER_SIZE) && (uwWriteReadStatus == 0); uwIndex++)
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	e015      	b.n	800075c <SDRAM_Startup_Sequence+0xc8>
  {
    if (aRxBuffer[uwIndex] != aTxBuffer[uwIndex])
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <SDRAM_Startup_Sequence+0xec>)
 8000736:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	490f      	ldr	r1, [pc, #60]	; (800077c <SDRAM_Startup_Sequence+0xe8>)
 8000740:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000744:	429a      	cmp	r2, r3
 8000746:	d004      	beq.n	8000752 <SDRAM_Startup_Sequence+0xbe>
    {
      uwWriteReadStatus++;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <SDRAM_Startup_Sequence+0xf8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <SDRAM_Startup_Sequence+0xf8>)
 8000750:	6013      	str	r3, [r2, #0]
  for (uwIndex = 0; (uwIndex < BUFFER_SIZE) && (uwWriteReadStatus == 0); uwIndex++)
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000764:	d203      	bcs.n	800076e <SDRAM_Startup_Sequence+0xda>
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <SDRAM_Startup_Sequence+0xf8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d0e0      	beq.n	8000730 <SDRAM_Startup_Sequence+0x9c>
    }
  }
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	a244250f 	.word	0xa244250f
 800077c:	24000098 	.word	0x24000098
 8000780:	24004098 	.word	0x24004098
 8000784:	24008098 	.word	0x24008098
 8000788:	30000200 	.word	0x30000200
 800078c:	2400809c 	.word	0x2400809c

08000790 <SDRAM_Initialization_Sequence>:



void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	2201      	movs	r2, #1
 80007a2:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2210      	movs	r2, #16
 80007a8:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	2201      	movs	r2, #1
 80007ae:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80007b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ba:	6839      	ldr	r1, [r7, #0]
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f00a fb71 	bl	800aea4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f002 fc0a 	bl	8002fdc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	2202      	movs	r2, #2
 80007cc:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	2210      	movs	r2, #16
 80007d2:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	2201      	movs	r2, #1
 80007d8:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80007e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e4:	6839      	ldr	r1, [r7, #0]
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f00a fb5c 	bl	800aea4 <HAL_SDRAM_SendCommand>

  /* Step 4 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2203      	movs	r2, #3
 80007f0:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	2210      	movs	r2, #16
 80007f6:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	2208      	movs	r2, #8
 80007fc:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000808:	6839      	ldr	r1, [r7, #0]
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f00a fb4a 	bl	800aea4 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000810:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000814:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	2204      	movs	r2, #4
 800081a:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	2210      	movs	r2, #16
 8000820:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	2201      	movs	r2, #1
 8000826:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800082e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000832:	6839      	ldr	r1, [r7, #0]
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f00a fb35 	bl	800aea4 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, 230);
 800083a:	21e6      	movs	r1, #230	; 0xe6
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f00a fb66 	bl	800af0e <HAL_SDRAM_ProgramRefreshRate>
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <Fill_Buffer>:

void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
 800084a:	b480      	push	{r7}
 800084c:	b087      	sub	sp, #28
 800084e:	af00      	add	r7, sp, #0
 8000850:	60f8      	str	r0, [r7, #12]
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	e00a      	b.n	8000876 <Fill_Buffer+0x2c>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	4413      	add	r3, r2
 8000868:	6979      	ldr	r1, [r7, #20]
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	440a      	add	r2, r1
 800086e:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	3301      	adds	r3, #1
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	429a      	cmp	r2, r3
 800087c:	d3f0      	bcc.n	8000860 <Fill_Buffer+0x16>
  }
}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	371c      	adds	r7, #28
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f002 fb12 	bl	8002eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f9b6 	bl	8000c04 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000898:	f000 fa30 	bl	8000cfc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */
//TODO: need to move DMA init everytime up after GPIO init!!
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089c:	f000 fdcc 	bl	8001438 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a0:	f000 fd18 	bl	80012d4 <MX_DMA_Init>
  MX_SPI1_Init();
 80008a4:	f000 fa7a 	bl	8000d9c <MX_SPI1_Init>
  MX_TIM1_Init();
 80008a8:	f000 fb80 	bl	8000fac <MX_TIM1_Init>
  MX_UART4_Init();
 80008ac:	f000 fcc4 	bl	8001238 <MX_UART4_Init>
  MX_FMC_Init();
 80008b0:	f000 fd70 	bl	8001394 <MX_FMC_Init>
  MX_SPI2_Init();
 80008b4:	f000 faca 	bl	8000e4c <MX_SPI2_Init>
  MX_SPI4_Init();
 80008b8:	f000 fb20 	bl	8000efc <MX_SPI4_Init>
  MX_TIM2_Init();
 80008bc:	f000 fc22 	bl	8001104 <MX_TIM2_Init>
  MX_SDMMC1_SD_Init();
 80008c0:	f000 fa4e 	bl	8000d60 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80008c4:	f010 fc0a 	bl	80110dc <MX_FATFS_Init>
  MX_TIM16_Init();
 80008c8:	f000 fc8e 	bl	80011e8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  // setting up timer for time measuring
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80008cc:	4bbb      	ldr	r3, [pc, #748]	; (8000bbc <main+0x330>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	4aba      	ldr	r2, [pc, #744]	; (8000bbc <main+0x330>)
 80008d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008d6:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 80008d8:	4bb9      	ldr	r3, [pc, #740]	; (8000bc0 <main+0x334>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80008de:	4bb8      	ldr	r3, [pc, #736]	; (8000bc0 <main+0x334>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4ab7      	ldr	r2, [pc, #732]	; (8000bc0 <main+0x334>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6013      	str	r3, [r2, #0]
  HAL_Delay(500);
 80008ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ee:	f002 fb75 	bl	8002fdc <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SDRAM_Startup_Sequence(&hsdram1, &fmc_command);
 80008f2:	49b4      	ldr	r1, [pc, #720]	; (8000bc4 <main+0x338>)
 80008f4:	48b4      	ldr	r0, [pc, #720]	; (8000bc8 <main+0x33c>)
 80008f6:	f7ff fecd 	bl	8000694 <SDRAM_Startup_Sequence>
  sd_card_init();
 80008fa:	f000 ff97 	bl	800182c <sd_card_init>
  HAL_Delay(1000);
 80008fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000902:	f002 fb6b 	bl	8002fdc <HAL_Delay>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 4);
 8000906:	2204      	movs	r2, #4
 8000908:	2104      	movs	r1, #4
 800090a:	2017      	movs	r0, #23
 800090c:	f002 fc89 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 1);
 8000910:	2201      	movs	r2, #1
 8000912:	2101      	movs	r1, #1
 8000914:	2028      	movs	r0, #40	; 0x28
 8000916:	f002 fc84 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800091a:	2017      	movs	r0, #23
 800091c:	f002 fca9 	bl	8003272 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000920:	2028      	movs	r0, #40	; 0x28
 8000922:	f002 fca6 	bl	8003272 <HAL_NVIC_DisableIRQ>

  spi1_soft_reset();
 8000926:	f001 fa31 	bl	8001d8c <spi1_soft_reset>
  spi2_soft_reset();
 800092a:	f001 fa55 	bl	8001dd8 <spi2_soft_reset>
  spi4_soft_reset();
 800092e:	f001 fa79 	bl	8001e24 <spi4_soft_reset>
  spi1_adc_init(SPS_VALUE_5);
 8000932:	4ba6      	ldr	r3, [pc, #664]	; (8000bcc <main+0x340>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 ff90 	bl	800185c <spi1_adc_init>
  spi2_adc_init(SPS_VALUE_5);
 800093c:	4ba3      	ldr	r3, [pc, #652]	; (8000bcc <main+0x340>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f001 f863 	bl	8001a0c <spi2_adc_init>
  spi4_adc_init(SPS_VALUE_5);
 8000946:	4ba1      	ldr	r3, [pc, #644]	; (8000bcc <main+0x340>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f001 f936 	bl	8001bbc <spi4_adc_init>
//  readRegister();
//  t1 = DWT->CYCCNT;
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8000950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000954:	2220      	movs	r2, #32
 8000956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 800095a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800095e:	2240      	movs	r2, #64	; 0x40
 8000960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8000964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000968:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800096c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000970:	2017      	movs	r0, #23
 8000972:	f002 fc70 	bl	8003256 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000976:	2028      	movs	r0, #40	; 0x28
 8000978:	f002 fc6d 	bl	8003256 <HAL_NVIC_EnableIRQ>

  // uart IT enable
  HAL_UART_Receive_IT (&huart4, rxUart4Buffer, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	4994      	ldr	r1, [pc, #592]	; (8000bd0 <main+0x344>)
 8000980:	4894      	ldr	r0, [pc, #592]	; (8000bd4 <main+0x348>)
 8000982:	f00d f959 	bl	800dc38 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_IT (&huart5, rxUart4Buffer, 1);

  // LED timer enable
  HAL_TIM_Base_Start_IT(&htim16);
 8000986:	4894      	ldr	r0, [pc, #592]	; (8000bd8 <main+0x34c>)
 8000988:	f00b fb96 	bl	800c0b8 <HAL_TIM_Base_Start_IT>

  // FIXME main
  //sd_card_test_script();

  //initial setup:
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2120      	movs	r1, #32
 8000990:	4892      	ldr	r0, [pc, #584]	; (8000bdc <main+0x350>)
 8000992:	f005 fd25 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2110      	movs	r1, #16
 800099a:	4891      	ldr	r0, [pc, #580]	; (8000be0 <main+0x354>)
 800099c:	f005 fd20 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2101      	movs	r1, #1
 80009a4:	488f      	ldr	r0, [pc, #572]	; (8000be4 <main+0x358>)
 80009a6:	f005 fd1b 	bl	80063e0 <HAL_GPIO_WritePin>

  //run all before main loop
  run_all_adc();
 80009aa:	f001 f9d3 	bl	8001d54 <run_all_adc>

    while (1){

      if (uartNewCommand == true){
 80009ae:	4b8e      	ldr	r3, [pc, #568]	; (8000be8 <main+0x35c>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0fa      	beq.n	80009ae <main+0x122>
        switch (uartCommand) {
 80009b8:	4b8c      	ldr	r3, [pc, #560]	; (8000bec <main+0x360>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3b30      	subs	r3, #48	; 0x30
 80009c0:	2b41      	cmp	r3, #65	; 0x41
 80009c2:	f200 80f5 	bhi.w	8000bb0 <main+0x324>
 80009c6:	a201      	add	r2, pc, #4	; (adr r2, 80009cc <main+0x140>)
 80009c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009cc:	08000b75 	.word	0x08000b75
 80009d0:	08000b81 	.word	0x08000b81
 80009d4:	08000b8d 	.word	0x08000b8d
 80009d8:	08000b99 	.word	0x08000b99
 80009dc:	08000ba5 	.word	0x08000ba5
 80009e0:	08000bb1 	.word	0x08000bb1
 80009e4:	08000bb1 	.word	0x08000bb1
 80009e8:	08000bb1 	.word	0x08000bb1
 80009ec:	08000bb1 	.word	0x08000bb1
 80009f0:	08000bb1 	.word	0x08000bb1
 80009f4:	08000bb1 	.word	0x08000bb1
 80009f8:	08000bb1 	.word	0x08000bb1
 80009fc:	08000bb1 	.word	0x08000bb1
 8000a00:	08000bb1 	.word	0x08000bb1
 8000a04:	08000bb1 	.word	0x08000bb1
 8000a08:	08000bb1 	.word	0x08000bb1
 8000a0c:	08000bb1 	.word	0x08000bb1
 8000a10:	08000bb1 	.word	0x08000bb1
 8000a14:	08000bb1 	.word	0x08000bb1
 8000a18:	08000bb1 	.word	0x08000bb1
 8000a1c:	08000bb1 	.word	0x08000bb1
 8000a20:	08000bb1 	.word	0x08000bb1
 8000a24:	08000bb1 	.word	0x08000bb1
 8000a28:	08000bb1 	.word	0x08000bb1
 8000a2c:	08000bb1 	.word	0x08000bb1
 8000a30:	08000bb1 	.word	0x08000bb1
 8000a34:	08000bb1 	.word	0x08000bb1
 8000a38:	08000bb1 	.word	0x08000bb1
 8000a3c:	08000bb1 	.word	0x08000bb1
 8000a40:	08000bb1 	.word	0x08000bb1
 8000a44:	08000bb1 	.word	0x08000bb1
 8000a48:	08000bb1 	.word	0x08000bb1
 8000a4c:	08000bb1 	.word	0x08000bb1
 8000a50:	08000bb1 	.word	0x08000bb1
 8000a54:	08000bb1 	.word	0x08000bb1
 8000a58:	08000bb1 	.word	0x08000bb1
 8000a5c:	08000bb1 	.word	0x08000bb1
 8000a60:	08000bb1 	.word	0x08000bb1
 8000a64:	08000bb1 	.word	0x08000bb1
 8000a68:	08000bb1 	.word	0x08000bb1
 8000a6c:	08000bb1 	.word	0x08000bb1
 8000a70:	08000bb1 	.word	0x08000bb1
 8000a74:	08000bb1 	.word	0x08000bb1
 8000a78:	08000bb1 	.word	0x08000bb1
 8000a7c:	08000bb1 	.word	0x08000bb1
 8000a80:	08000bb1 	.word	0x08000bb1
 8000a84:	08000bb1 	.word	0x08000bb1
 8000a88:	08000bb1 	.word	0x08000bb1
 8000a8c:	08000bb1 	.word	0x08000bb1
 8000a90:	08000ad5 	.word	0x08000ad5
 8000a94:	08000aed 	.word	0x08000aed
 8000a98:	08000b05 	.word	0x08000b05
 8000a9c:	08000b1d 	.word	0x08000b1d
 8000aa0:	08000b35 	.word	0x08000b35
 8000aa4:	08000b4d 	.word	0x08000b4d
 8000aa8:	08000bb1 	.word	0x08000bb1
 8000aac:	08000bb1 	.word	0x08000bb1
 8000ab0:	08000bb1 	.word	0x08000bb1
 8000ab4:	08000bb1 	.word	0x08000bb1
 8000ab8:	08000bb1 	.word	0x08000bb1
 8000abc:	08000bb1 	.word	0x08000bb1
 8000ac0:	08000bb1 	.word	0x08000bb1
 8000ac4:	08000bb1 	.word	0x08000bb1
 8000ac8:	08000bb1 	.word	0x08000bb1
 8000acc:	08000b65 	.word	0x08000b65
 8000ad0:	08000b6d 	.word	0x08000b6d
          case 'a': // multiplexer X -> 0
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	4840      	ldr	r0, [pc, #256]	; (8000bdc <main+0x350>)
 8000ada:	f005 fc81 	bl	80063e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae4:	483d      	ldr	r0, [pc, #244]	; (8000bdc <main+0x350>)
 8000ae6:	f005 fc7b 	bl	80063e0 <HAL_GPIO_WritePin>
            break;
 8000aea:	e062      	b.n	8000bb2 <main+0x326>
          case 'b': // multiplexer X -> 1
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2120      	movs	r1, #32
 8000af0:	483a      	ldr	r0, [pc, #232]	; (8000bdc <main+0x350>)
 8000af2:	f005 fc75 	bl	80063e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afc:	4837      	ldr	r0, [pc, #220]	; (8000bdc <main+0x350>)
 8000afe:	f005 fc6f 	bl	80063e0 <HAL_GPIO_WritePin>
            break;
 8000b02:	e056      	b.n	8000bb2 <main+0x326>

          case 'c': // multiplexer Y -> 0
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2110      	movs	r1, #16
 8000b08:	4835      	ldr	r0, [pc, #212]	; (8000be0 <main+0x354>)
 8000b0a:	f005 fc69 	bl	80063e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b14:	4831      	ldr	r0, [pc, #196]	; (8000bdc <main+0x350>)
 8000b16:	f005 fc63 	bl	80063e0 <HAL_GPIO_WritePin>
            break;
 8000b1a:	e04a      	b.n	8000bb2 <main+0x326>

          case 'd': // multiplexer Y -> 1
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2110      	movs	r1, #16
 8000b20:	482f      	ldr	r0, [pc, #188]	; (8000be0 <main+0x354>)
 8000b22:	f005 fc5d 	bl	80063e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2c:	482b      	ldr	r0, [pc, #172]	; (8000bdc <main+0x350>)
 8000b2e:	f005 fc57 	bl	80063e0 <HAL_GPIO_WritePin>
            break;
 8000b32:	e03e      	b.n	8000bb2 <main+0x326>

          case 'e': // multiplexer Z -> 0
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2101      	movs	r1, #1
 8000b38:	482a      	ldr	r0, [pc, #168]	; (8000be4 <main+0x358>)
 8000b3a:	f005 fc51 	bl	80063e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b44:	4825      	ldr	r0, [pc, #148]	; (8000bdc <main+0x350>)
 8000b46:	f005 fc4b 	bl	80063e0 <HAL_GPIO_WritePin>
            break;
 8000b4a:	e032      	b.n	8000bb2 <main+0x326>

          case 'f': // multiplexer Z -> 1
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4824      	ldr	r0, [pc, #144]	; (8000be4 <main+0x358>)
 8000b52:	f005 fc45 	bl	80063e0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b5c:	481f      	ldr	r0, [pc, #124]	; (8000bdc <main+0x350>)
 8000b5e:	f005 fc3f 	bl	80063e0 <HAL_GPIO_WritePin>
            break;
 8000b62:	e026      	b.n	8000bb2 <main+0x326>
//            enableSPI1Interrupt = false;
//            //HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
//            break;

          case 'p':
            sd_card_write_values_enable = true;
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <main+0x364>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
            break;
 8000b6a:	e022      	b.n	8000bb2 <main+0x326>

          case 'q':
            sd_card_write_values_enable = false;
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <main+0x364>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
            break;
 8000b72:	e01e      	b.n	8000bb2 <main+0x326>
//            break;

         // Numbers reserved for SPS values
          case '0':
            //set SPS to 5
            setNewSPStoAllADCs(SPS_VALUE_5);
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <main+0x340>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 fa3d 	bl	8001ff8 <setNewSPStoAllADCs>
            break;
 8000b7e:	e018      	b.n	8000bb2 <main+0x326>
          case '1':
            //set SPS to 20
            setNewSPStoAllADCs(SPS_VALUE_20);
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <main+0x368>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f001 fa37 	bl	8001ff8 <setNewSPStoAllADCs>
            break;
 8000b8a:	e012      	b.n	8000bb2 <main+0x326>
          case '2':
            //set SPS to 100
            setNewSPStoAllADCs(SPS_VALUE_100);
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <main+0x36c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 fa31 	bl	8001ff8 <setNewSPStoAllADCs>
            break;
 8000b96:	e00c      	b.n	8000bb2 <main+0x326>
          case '3':
            //set SPS to 500
            setNewSPStoAllADCs(SPS_VALUE_500);
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <main+0x370>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f001 fa2b 	bl	8001ff8 <setNewSPStoAllADCs>
            break;
 8000ba2:	e006      	b.n	8000bb2 <main+0x326>
          case '4':
            //set SPS to 1000
            setNewSPStoAllADCs(SPS_VALUE_1000);
 8000ba4:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <main+0x374>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f001 fa25 	bl	8001ff8 <setNewSPStoAllADCs>
            break;
 8000bae:	e000      	b.n	8000bb2 <main+0x326>
          default:
            break;
 8000bb0:	bf00      	nop
        }
        uartNewCommand = false;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <main+0x35c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
      if (uartNewCommand == true){
 8000bb8:	e6f9      	b.n	80009ae <main+0x122>
 8000bba:	bf00      	nop
 8000bbc:	e000edf0 	.word	0xe000edf0
 8000bc0:	e0001000 	.word	0xe0001000
 8000bc4:	240087a4 	.word	0x240087a4
 8000bc8:	24008770 	.word	0x24008770
 8000bcc:	24000000 	.word	0x24000000
 8000bd0:	240087d0 	.word	0x240087d0
 8000bd4:	24008668 	.word	0x24008668
 8000bd8:	2400861c 	.word	0x2400861c
 8000bdc:	58020000 	.word	0x58020000
 8000be0:	58020800 	.word	0x58020800
 8000be4:	58020400 	.word	0x58020400
 8000be8:	240087d2 	.word	0x240087d2
 8000bec:	240087d1 	.word	0x240087d1
 8000bf0:	240087b4 	.word	0x240087b4
 8000bf4:	24000001 	.word	0x24000001
 8000bf8:	24000002 	.word	0x24000002
 8000bfc:	24000003 	.word	0x24000003
 8000c00:	24000004 	.word	0x24000004

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b09c      	sub	sp, #112	; 0x70
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	224c      	movs	r2, #76	; 0x4c
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f011 f992 	bl	8011f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f011 f98c 	bl	8011f3c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000c24:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <SystemClock_Config+0xf0>)
 8000c26:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f005 fc24 	bl	800647c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c34:	2300      	movs	r3, #0
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <SystemClock_Config+0xf4>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a2e      	ldr	r2, [pc, #184]	; (8000cf8 <SystemClock_Config+0xf4>)
 8000c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <SystemClock_Config+0xf4>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c50:	bf00      	nop
 8000c52:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <SystemClock_Config+0xf4>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c5e:	d1f8      	bne.n	8000c52 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000c60:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <SystemClock_Config+0xf0>)
 8000c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c64:	4a23      	ldr	r2, [pc, #140]	; (8000cf4 <SystemClock_Config+0xf0>)
 8000c66:	f023 0303 	bic.w	r3, r3, #3
 8000c6a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c74:	2340      	movs	r3, #64	; 0x40
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c80:	2304      	movs	r3, #4
 8000c82:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000c84:	2323      	movs	r3, #35	; 0x23
 8000c86:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c94:	230c      	movs	r3, #12
 8000c96:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f005 fc23 	bl	80064f0 <HAL_RCC_OscConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000cb0:	f000 fdb6 	bl	8001820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb4:	233f      	movs	r3, #63	; 0x3f
 8000cb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cc4:	2340      	movs	r3, #64	; 0x40
 8000cc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cc8:	2340      	movs	r3, #64	; 0x40
 8000cca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cd2:	2340      	movs	r3, #64	; 0x40
 8000cd4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2107      	movs	r1, #7
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f006 f80e 	bl	8006cfc <HAL_RCC_ClockConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000ce6:	f000 fd9b 	bl	8001820 <Error_Handler>
  }
}
 8000cea:	bf00      	nop
 8000cec:	3770      	adds	r7, #112	; 0x70
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	58024400 	.word	0x58024400
 8000cf8:	58024800 	.word	0x58024800

08000cfc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0ae      	sub	sp, #184	; 0xb8
 8000d00:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d02:	463b      	mov	r3, r7
 8000d04:	22b8      	movs	r2, #184	; 0xb8
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f011 f917 	bl	8011f3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <PeriphCommonClock_Config+0x60>)
 8000d10:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d12:	2304      	movs	r3, #4
 8000d14:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 8;
 8000d16:	2308      	movs	r3, #8
 8000d18:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d22:	2302      	movs	r3, #2
 8000d24:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d26:	23c0      	movs	r3, #192	; 0xc0
 8000d28:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000d32:	2302      	movs	r3, #2
 8000d34:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d40:	463b      	mov	r3, r7
 8000d42:	4618      	mov	r0, r3
 8000d44:	f006 fb66 	bl	8007414 <HAL_RCCEx_PeriphCLKConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000d4e:	f000 fd67 	bl	8001820 <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	37b8      	adds	r7, #184	; 0xb8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	81010000 	.word	0x81010000

08000d60 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_SDMMC1_SD_Init+0x34>)
 8000d66:	4a0c      	ldr	r2, [pc, #48]	; (8000d98 <MX_SDMMC1_SD_Init+0x38>)
 8000d68:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MX_SDMMC1_SD_Init+0x34>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_SDMMC1_SD_Init+0x34>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <MX_SDMMC1_SD_Init+0x34>)
 8000d78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d7c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <MX_SDMMC1_SD_Init+0x34>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 64;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <MX_SDMMC1_SD_Init+0x34>)
 8000d86:	2240      	movs	r2, #64	; 0x40
 8000d88:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	240080a0 	.word	0x240080a0
 8000d98:	52007000 	.word	0x52007000

08000d9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000da0:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000da2:	4a29      	ldr	r2, [pc, #164]	; (8000e48 <MX_SPI1_Init+0xac>)
 8000da4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000da6:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000da8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000dac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dae:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000db6:	2207      	movs	r2, #7
 8000db8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000dba:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000dc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000dc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000dc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000dcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000dd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000dd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_SPI1_Init+0xa8>)
 8000e30:	f00a f896 	bl	800af60 <HAL_SPI_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000e3a:	f000 fcf1 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2400811c 	.word	0x2400811c
 8000e48:	40013000 	.word	0x40013000

08000e4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e50:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000e52:	4a29      	ldr	r2, [pc, #164]	; (8000ef8 <MX_SPI2_Init+0xac>)
 8000e54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e56:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000e58:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e5e:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e64:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000e66:	2207      	movs	r2, #7
 8000e68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e6a:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000e6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e70:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000e74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000e7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000e84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e88:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_SPI2_Init+0xa8>)
 8000ee0:	f00a f83e 	bl	800af60 <HAL_SPI_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000eea:	f000 fc99 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	240081a4 	.word	0x240081a4
 8000ef8:	40003800 	.word	0x40003800

08000efc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000f00:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f02:	4a29      	ldr	r2, [pc, #164]	; (8000fa8 <MX_SPI4_Init+0xac>)
 8000f04:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f08:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f0c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000f0e:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f16:	2207      	movs	r2, #7
 8000f18:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f20:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f28:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f30:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f38:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_SPI4_Init+0xa8>)
 8000f90:	f009 ffe6 	bl	800af60 <HAL_SPI_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8000f9a:	f000 fc41 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2400822c 	.word	0x2400822c
 8000fa8:	40013400 	.word	0x40013400

08000fac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b09c      	sub	sp, #112	; 0x70
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]
 8000fde:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	2234      	movs	r2, #52	; 0x34
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f010 ffa8 	bl	8011f3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fec:	4b43      	ldr	r3, [pc, #268]	; (80010fc <MX_TIM1_Init+0x150>)
 8000fee:	4a44      	ldr	r2, [pc, #272]	; (8001100 <MX_TIM1_Init+0x154>)
 8000ff0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ff2:	4b42      	ldr	r3, [pc, #264]	; (80010fc <MX_TIM1_Init+0x150>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff8:	4b40      	ldr	r3, [pc, #256]	; (80010fc <MX_TIM1_Init+0x150>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <MX_TIM1_Init+0x150>)
 8001000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001004:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001006:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <MX_TIM1_Init+0x150>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800100c:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <MX_TIM1_Init+0x150>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001012:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <MX_TIM1_Init+0x150>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001018:	4838      	ldr	r0, [pc, #224]	; (80010fc <MX_TIM1_Init+0x150>)
 800101a:	f00a fff6 	bl	800c00a <HAL_TIM_Base_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001024:	f000 fbfc 	bl	8001820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800102e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001032:	4619      	mov	r1, r3
 8001034:	4831      	ldr	r0, [pc, #196]	; (80010fc <MX_TIM1_Init+0x150>)
 8001036:	f00b fc49 	bl	800c8cc <HAL_TIM_ConfigClockSource>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001040:	f000 fbee 	bl	8001820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001044:	482d      	ldr	r0, [pc, #180]	; (80010fc <MX_TIM1_Init+0x150>)
 8001046:	f00b f8af 	bl	800c1a8 <HAL_TIM_PWM_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001050:	f000 fbe6 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001060:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001064:	4619      	mov	r1, r3
 8001066:	4825      	ldr	r0, [pc, #148]	; (80010fc <MX_TIM1_Init+0x150>)
 8001068:	f00c fbb4 	bl	800d7d4 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001072:	f000 fbd5 	bl	8001820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001076:	2360      	movs	r3, #96	; 0x60
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107e:	2300      	movs	r3, #0
 8001080:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001082:	2300      	movs	r3, #0
 8001084:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800108a:	2300      	movs	r3, #0
 800108c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001092:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001096:	2200      	movs	r2, #0
 8001098:	4619      	mov	r1, r3
 800109a:	4818      	ldr	r0, [pc, #96]	; (80010fc <MX_TIM1_Init+0x150>)
 800109c:	f00b fb02 	bl	800c6a4 <HAL_TIM_PWM_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010a6:	f000 fbbb 	bl	8001820 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <MX_TIM1_Init+0x150>)
 80010e0:	f00c fc06 	bl	800d8f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80010ea:	f000 fb99 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <MX_TIM1_Init+0x150>)
 80010f0:	f001 fbde 	bl	80028b0 <HAL_TIM_MspPostInit>

}
 80010f4:	bf00      	nop
 80010f6:	3770      	adds	r7, #112	; 0x70
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	24008584 	.word	0x24008584
 8001100:	40010000 	.word	0x40010000

08001104 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	; 0x30
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001126:	463b      	mov	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001132:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <MX_TIM2_Init+0xe0>)
 8001134:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001138:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <MX_TIM2_Init+0xe0>)
 800113c:	2200      	movs	r2, #0
 800113e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <MX_TIM2_Init+0xe0>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <MX_TIM2_Init+0xe0>)
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <MX_TIM2_Init+0xe0>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <MX_TIM2_Init+0xe0>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800115a:	4822      	ldr	r0, [pc, #136]	; (80011e4 <MX_TIM2_Init+0xe0>)
 800115c:	f00a ff55 	bl	800c00a <HAL_TIM_Base_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001166:	f000 fb5b 	bl	8001820 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800116a:	481e      	ldr	r0, [pc, #120]	; (80011e4 <MX_TIM2_Init+0xe0>)
 800116c:	f00b f87d 	bl	800c26a <HAL_TIM_IC_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001176:	f000 fb53 	bl	8001820 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800117a:	2307      	movs	r3, #7
 800117c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	4816      	ldr	r0, [pc, #88]	; (80011e4 <MX_TIM2_Init+0xe0>)
 800118a:	f00b fc97 	bl	800cabc <HAL_TIM_SlaveConfigSynchro>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001194:	f000 fb44 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	4619      	mov	r1, r3
 80011a6:	480f      	ldr	r0, [pc, #60]	; (80011e4 <MX_TIM2_Init+0xe0>)
 80011a8:	f00c fb14 	bl	800d7d4 <HAL_TIMEx_MasterConfigSynchronization>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80011b2:	f000 fb35 	bl	8001820 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011ba:	2301      	movs	r3, #1
 80011bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_TIM2_Init+0xe0>)
 80011ce:	f00b f9cc 	bl	800c56a <HAL_TIM_IC_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80011d8:	f000 fb22 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	3730      	adds	r7, #48	; 0x30
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	240085d0 	.word	0x240085d0

080011e8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <MX_TIM16_Init+0x48>)
 80011ee:	4a11      	ldr	r2, [pc, #68]	; (8001234 <MX_TIM16_Init+0x4c>)
 80011f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 28000-1;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_TIM16_Init+0x48>)
 80011f4:	f646 525f 	movw	r2, #27999	; 0x6d5f
 80011f8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <MX_TIM16_Init+0x48>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_TIM16_Init+0x48>)
 8001202:	f242 720f 	movw	r2, #9999	; 0x270f
 8001206:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_TIM16_Init+0x48>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_TIM16_Init+0x48>)
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_TIM16_Init+0x48>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_TIM16_Init+0x48>)
 800121c:	f00a fef5 	bl	800c00a <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001226:	f000 fafb 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2400861c 	.word	0x2400861c
 8001234:	40014400 	.word	0x40014400

08001238 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <MX_UART4_Init+0x90>)
 800123e:	4a23      	ldr	r2, [pc, #140]	; (80012cc <MX_UART4_Init+0x94>)
 8001240:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 3000000;
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <MX_UART4_Init+0x90>)
 8001244:	4a22      	ldr	r2, [pc, #136]	; (80012d0 <MX_UART4_Init+0x98>)
 8001246:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <MX_UART4_Init+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <MX_UART4_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_UART4_Init+0x90>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_UART4_Init+0x90>)
 800125c:	220c      	movs	r2, #12
 800125e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_UART4_Init+0x90>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_UART4_Init+0x90>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_UART4_Init+0x90>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <MX_UART4_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_UART4_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800127e:	4812      	ldr	r0, [pc, #72]	; (80012c8 <MX_UART4_Init+0x90>)
 8001280:	f00c fbf4 	bl	800da6c <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_UART4_Init+0x56>
  {
    Error_Handler();
 800128a:	f000 fac9 	bl	8001820 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800128e:	2100      	movs	r1, #0
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <MX_UART4_Init+0x90>)
 8001292:	f00e ff8c 	bl	80101ae <HAL_UARTEx_SetTxFifoThreshold>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 800129c:	f000 fac0 	bl	8001820 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a0:	2100      	movs	r1, #0
 80012a2:	4809      	ldr	r0, [pc, #36]	; (80012c8 <MX_UART4_Init+0x90>)
 80012a4:	f00e ffc1 	bl	801022a <HAL_UARTEx_SetRxFifoThreshold>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 80012ae:	f000 fab7 	bl	8001820 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_UART4_Init+0x90>)
 80012b4:	f00e ff42 	bl	801013c <HAL_UARTEx_DisableFifoMode>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 80012be:	f000 faaf 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	24008668 	.word	0x24008668
 80012cc:	40004c00 	.word	0x40004c00
 80012d0:	002dc6c0 	.word	0x002dc6c0

080012d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <MX_DMA_Init+0xbc>)
 80012dc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80012e0:	4a2b      	ldr	r2, [pc, #172]	; (8001390 <MX_DMA_Init+0xbc>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <MX_DMA_Init+0xbc>)
 80012ec:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012f8:	4b25      	ldr	r3, [pc, #148]	; (8001390 <MX_DMA_Init+0xbc>)
 80012fa:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80012fe:	4a24      	ldr	r2, [pc, #144]	; (8001390 <MX_DMA_Init+0xbc>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <MX_DMA_Init+0xbc>)
 800130a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	200b      	movs	r0, #11
 800131c:	f001 ff81 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001320:	200b      	movs	r0, #11
 8001322:	f001 ff98 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	200c      	movs	r0, #12
 800132c:	f001 ff79 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001330:	200c      	movs	r0, #12
 8001332:	f001 ff90 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	200d      	movs	r0, #13
 800133c:	f001 ff71 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001340:	200d      	movs	r0, #13
 8001342:	f001 ff88 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	200e      	movs	r0, #14
 800134c:	f001 ff69 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001350:	200e      	movs	r0, #14
 8001352:	f001 ff80 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	200f      	movs	r0, #15
 800135c:	f001 ff61 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001360:	200f      	movs	r0, #15
 8001362:	f001 ff78 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	202f      	movs	r0, #47	; 0x2f
 800136c:	f001 ff59 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001370:	202f      	movs	r0, #47	; 0x2f
 8001372:	f001 ff70 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2038      	movs	r0, #56	; 0x38
 800137c:	f001 ff51 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001380:	2038      	movs	r0, #56	; 0x38
 8001382:	f001 ff68 	bl	8003256 <HAL_NVIC_EnableIRQ>

}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	58024400 	.word	0x58024400

08001394 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
 80013a8:	615a      	str	r2, [r3, #20]
 80013aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80013ac:	4b20      	ldr	r3, [pc, #128]	; (8001430 <MX_FMC_Init+0x9c>)
 80013ae:	4a21      	ldr	r2, [pc, #132]	; (8001434 <MX_FMC_Init+0xa0>)
 80013b0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <MX_FMC_Init+0x9c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <MX_FMC_Init+0x9c>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <MX_FMC_Init+0x9c>)
 80013c0:	2208      	movs	r2, #8
 80013c2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <MX_FMC_Init+0x9c>)
 80013c6:	2210      	movs	r2, #16
 80013c8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <MX_FMC_Init+0x9c>)
 80013cc:	2240      	movs	r2, #64	; 0x40
 80013ce:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <MX_FMC_Init+0x9c>)
 80013d2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80013d6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <MX_FMC_Init+0x9c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_FMC_Init+0x9c>)
 80013e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013e4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <MX_FMC_Init+0x9c>)
 80013e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_FMC_Init+0x9c>)
 80013f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 80013fa:	2309      	movs	r3, #9
 80013fc:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 80013fe:	2306      	movs	r3, #6
 8001400:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 8001402:	2309      	movs	r3, #9
 8001404:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
 8001406:	2304      	movs	r3, #4
 8001408:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 800140a:	2303      	movs	r3, #3
 800140c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 800140e:	2303      	movs	r3, #3
 8001410:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	; (8001430 <MX_FMC_Init+0x9c>)
 8001418:	f009 fd08 	bl	800ae2c <HAL_SDRAM_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8001422:	f000 f9fd 	bl	8001820 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001426:	bf00      	nop
 8001428:	3720      	adds	r7, #32
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	24008770 	.word	0x24008770
 8001434:	52004140 	.word	0x52004140

08001438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	; 0x38
 800143c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800144e:	4b7d      	ldr	r3, [pc, #500]	; (8001644 <MX_GPIO_Init+0x20c>)
 8001450:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001454:	4a7b      	ldr	r2, [pc, #492]	; (8001644 <MX_GPIO_Init+0x20c>)
 8001456:	f043 0310 	orr.w	r3, r3, #16
 800145a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800145e:	4b79      	ldr	r3, [pc, #484]	; (8001644 <MX_GPIO_Init+0x20c>)
 8001460:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	623b      	str	r3, [r7, #32]
 800146a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146c:	4b75      	ldr	r3, [pc, #468]	; (8001644 <MX_GPIO_Init+0x20c>)
 800146e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001472:	4a74      	ldr	r2, [pc, #464]	; (8001644 <MX_GPIO_Init+0x20c>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800147c:	4b71      	ldr	r3, [pc, #452]	; (8001644 <MX_GPIO_Init+0x20c>)
 800147e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800148a:	4b6e      	ldr	r3, [pc, #440]	; (8001644 <MX_GPIO_Init+0x20c>)
 800148c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001490:	4a6c      	ldr	r2, [pc, #432]	; (8001644 <MX_GPIO_Init+0x20c>)
 8001492:	f043 0320 	orr.w	r3, r3, #32
 8001496:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800149a:	4b6a      	ldr	r3, [pc, #424]	; (8001644 <MX_GPIO_Init+0x20c>)
 800149c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014a0:	f003 0320 	and.w	r3, r3, #32
 80014a4:	61bb      	str	r3, [r7, #24]
 80014a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a8:	4b66      	ldr	r3, [pc, #408]	; (8001644 <MX_GPIO_Init+0x20c>)
 80014aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014ae:	4a65      	ldr	r2, [pc, #404]	; (8001644 <MX_GPIO_Init+0x20c>)
 80014b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014b8:	4b62      	ldr	r3, [pc, #392]	; (8001644 <MX_GPIO_Init+0x20c>)
 80014ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	4b5f      	ldr	r3, [pc, #380]	; (8001644 <MX_GPIO_Init+0x20c>)
 80014c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014cc:	4a5d      	ldr	r2, [pc, #372]	; (8001644 <MX_GPIO_Init+0x20c>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014d6:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <MX_GPIO_Init+0x20c>)
 80014d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e4:	4b57      	ldr	r3, [pc, #348]	; (8001644 <MX_GPIO_Init+0x20c>)
 80014e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014ea:	4a56      	ldr	r2, [pc, #344]	; (8001644 <MX_GPIO_Init+0x20c>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014f4:	4b53      	ldr	r3, [pc, #332]	; (8001644 <MX_GPIO_Init+0x20c>)
 80014f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001502:	4b50      	ldr	r3, [pc, #320]	; (8001644 <MX_GPIO_Init+0x20c>)
 8001504:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001508:	4a4e      	ldr	r2, [pc, #312]	; (8001644 <MX_GPIO_Init+0x20c>)
 800150a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800150e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001512:	4b4c      	ldr	r3, [pc, #304]	; (8001644 <MX_GPIO_Init+0x20c>)
 8001514:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001520:	4b48      	ldr	r3, [pc, #288]	; (8001644 <MX_GPIO_Init+0x20c>)
 8001522:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001526:	4a47      	ldr	r2, [pc, #284]	; (8001644 <MX_GPIO_Init+0x20c>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001530:	4b44      	ldr	r3, [pc, #272]	; (8001644 <MX_GPIO_Init+0x20c>)
 8001532:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2110      	movs	r1, #16
 8001542:	4841      	ldr	r0, [pc, #260]	; (8001648 <MX_GPIO_Init+0x210>)
 8001544:	f004 ff4c 	bl	80063e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MULT_IN_X_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 800154e:	483f      	ldr	r0, [pc, #252]	; (800164c <MX_GPIO_Init+0x214>)
 8001550:	f004 ff46 	bl	80063e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MULT_IN_Y_GPIO_Port, MULT_IN_Y_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2110      	movs	r1, #16
 8001558:	483d      	ldr	r0, [pc, #244]	; (8001650 <MX_GPIO_Init+0x218>)
 800155a:	f004 ff41 	bl	80063e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MULT_IN_Z_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f241 0101 	movw	r1, #4097	; 0x1001
 8001564:	483b      	ldr	r0, [pc, #236]	; (8001654 <MX_GPIO_Init+0x21c>)
 8001566:	f004 ff3b 	bl	80063e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10|USB_C_Reset_Pin|USB_C_Alert_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 8001570:	4839      	ldr	r0, [pc, #228]	; (8001658 <MX_GPIO_Init+0x220>)
 8001572:	f004 ff35 	bl	80063e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001576:	2310      	movs	r3, #16
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	4619      	mov	r1, r3
 800158c:	482e      	ldr	r0, [pc, #184]	; (8001648 <MX_GPIO_Init+0x210>)
 800158e:	f004 fd77 	bl	8006080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001592:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001598:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a6:	4619      	mov	r1, r3
 80015a8:	482c      	ldr	r0, [pc, #176]	; (800165c <MX_GPIO_Init+0x224>)
 80015aa:	f004 fd69 	bl	8006080 <HAL_GPIO_Init>

  /*Configure GPIO pins : MULT_IN_X_Pin PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = MULT_IN_X_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015ae:	f44f 53f1 	mov.w	r3, #7712	; 0x1e20
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	4821      	ldr	r0, [pc, #132]	; (800164c <MX_GPIO_Init+0x214>)
 80015c8:	f004 fd5a 	bl	8006080 <HAL_GPIO_Init>

  /*Configure GPIO pin : MULT_IN_Y_Pin */
  GPIO_InitStruct.Pin = MULT_IN_Y_Pin;
 80015cc:	2310      	movs	r3, #16
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MULT_IN_Y_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	481b      	ldr	r0, [pc, #108]	; (8001650 <MX_GPIO_Init+0x218>)
 80015e4:	f004 fd4c 	bl	8006080 <HAL_GPIO_Init>

  /*Configure GPIO pins : MULT_IN_Z_Pin PB12 */
  GPIO_InitStruct.Pin = MULT_IN_Z_Pin|GPIO_PIN_12;
 80015e8:	f241 0301 	movw	r3, #4097	; 0x1001
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	4814      	ldr	r0, [pc, #80]	; (8001654 <MX_GPIO_Init+0x21c>)
 8001602:	f004 fd3d 	bl	8006080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	4811      	ldr	r0, [pc, #68]	; (8001660 <MX_GPIO_Init+0x228>)
 800161a:	f004 fd31 	bl	8006080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 USB_C_Reset_Pin USB_C_Alert_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|USB_C_Reset_Pin|USB_C_Alert_Pin;
 800161e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	4619      	mov	r1, r3
 8001636:	4808      	ldr	r0, [pc, #32]	; (8001658 <MX_GPIO_Init+0x220>)
 8001638:	f004 fd22 	bl	8006080 <HAL_GPIO_Init>

}
 800163c:	bf00      	nop
 800163e:	3738      	adds	r7, #56	; 0x38
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	58024400 	.word	0x58024400
 8001648:	58021000 	.word	0x58021000
 800164c:	58020000 	.word	0x58020000
 8001650:	58020800 	.word	0x58020800
 8001654:	58020400 	.word	0x58020400
 8001658:	58021800 	.word	0x58021800
 800165c:	58021400 	.word	0x58021400
 8001660:	58020c00 	.word	0x58020c00

08001664 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// TODO:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]

  //SPI1 MISO
  if (GPIO_Pin == GPIO_PIN_6){
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	2b40      	cmp	r3, #64	; 0x40
 8001672:	d109      	bne.n	8001688 <HAL_GPIO_EXTI_Callback+0x24>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001674:	2017      	movs	r0, #23
 8001676:	f001 fdfc 	bl	8003272 <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi1, pTxData, spi1Buffer, 4);
 800167a:	2304      	movs	r3, #4
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x80>)
 800167e:	491a      	ldr	r1, [pc, #104]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x84>)
 8001680:	481a      	ldr	r0, [pc, #104]	; (80016ec <HAL_GPIO_EXTI_Callback+0x88>)
 8001682:	f009 ff65 	bl	800b550 <HAL_SPI_TransmitReceive_DMA>
  }
  else if (GPIO_Pin == GPIO_PIN_9){
    __NOP();
    //sendToSDcard = true;
  }
}
 8001686:	e028      	b.n	80016da <HAL_GPIO_EXTI_Callback+0x76>
  else if (GPIO_Pin == GPIO_PIN_14){
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800168e:	d109      	bne.n	80016a4 <HAL_GPIO_EXTI_Callback+0x40>
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001690:	2028      	movs	r0, #40	; 0x28
 8001692:	f001 fdee 	bl	8003272 <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi2, pTxData, spi2Buffer, 4);
 8001696:	2304      	movs	r3, #4
 8001698:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x8c>)
 800169a:	4913      	ldr	r1, [pc, #76]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x84>)
 800169c:	4815      	ldr	r0, [pc, #84]	; (80016f4 <HAL_GPIO_EXTI_Callback+0x90>)
 800169e:	f009 ff57 	bl	800b550 <HAL_SPI_TransmitReceive_DMA>
}
 80016a2:	e01a      	b.n	80016da <HAL_GPIO_EXTI_Callback+0x76>
  else if (GPIO_Pin == GPIO_PIN_5){
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	2b20      	cmp	r3, #32
 80016a8:	d10d      	bne.n	80016c6 <HAL_GPIO_EXTI_Callback+0x62>
    t1 = DWT->CYCCNT;
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x94>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4a13      	ldr	r2, [pc, #76]	; (80016fc <HAL_GPIO_EXTI_Callback+0x98>)
 80016b0:	6013      	str	r3, [r2, #0]
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80016b2:	2017      	movs	r0, #23
 80016b4:	f001 fddd 	bl	8003272 <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi4, pTxData, spi4Buffer, 4);
 80016b8:	2304      	movs	r3, #4
 80016ba:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_GPIO_EXTI_Callback+0x9c>)
 80016bc:	490a      	ldr	r1, [pc, #40]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x84>)
 80016be:	4811      	ldr	r0, [pc, #68]	; (8001704 <HAL_GPIO_EXTI_Callback+0xa0>)
 80016c0:	f009 ff46 	bl	800b550 <HAL_SPI_TransmitReceive_DMA>
}
 80016c4:	e009      	b.n	80016da <HAL_GPIO_EXTI_Callback+0x76>
  else if (GPIO_Pin == GPIO_PIN_7){
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	2b80      	cmp	r3, #128	; 0x80
 80016ca:	d101      	bne.n	80016d0 <HAL_GPIO_EXTI_Callback+0x6c>
    __NOP();
 80016cc:	bf00      	nop
}
 80016ce:	e004      	b.n	80016da <HAL_GPIO_EXTI_Callback+0x76>
  else if (GPIO_Pin == GPIO_PIN_9){
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016d6:	d100      	bne.n	80016da <HAL_GPIO_EXTI_Callback+0x76>
    __NOP();
 80016d8:	bf00      	nop
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	240087bc 	.word	0x240087bc
 80016e8:	240087b8 	.word	0x240087b8
 80016ec:	2400811c 	.word	0x2400811c
 80016f0:	240087c0 	.word	0x240087c0
 80016f4:	240081a4 	.word	0x240081a4
 80016f8:	e0001000 	.word	0xe0001000
 80016fc:	240087c8 	.word	0x240087c8
 8001700:	240087c4 	.word	0x240087c4
 8001704:	2400822c 	.word	0x2400822c

08001708 <HAL_SPI_TxRxCpltCallback>:

//FIXME: changed here from TxRx to Rx
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if (hspi == &hspi1){
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <HAL_SPI_TxRxCpltCallback+0x80>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d107      	bne.n	8001728 <HAL_SPI_TxRxCpltCallback+0x20>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8001718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171c:	2240      	movs	r2, #64	; 0x40
 800171e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001722:	2017      	movs	r0, #23
 8001724:	f001 fd97 	bl	8003256 <HAL_NVIC_EnableIRQ>
  }

  if (hspi == &hspi2){
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a18      	ldr	r2, [pc, #96]	; (800178c <HAL_SPI_TxRxCpltCallback+0x84>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d108      	bne.n	8001742 <HAL_SPI_TxRxCpltCallback+0x3a>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8001730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001734:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800173c:	2028      	movs	r0, #40	; 0x28
 800173e:	f001 fd8a 	bl	8003256 <HAL_NVIC_EnableIRQ>
  }

  if (hspi == &hspi4){
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a12      	ldr	r2, [pc, #72]	; (8001790 <HAL_SPI_TxRxCpltCallback+0x88>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d11a      	bne.n	8001780 <HAL_SPI_TxRxCpltCallback+0x78>
//    spi1ValuesStorage[spiValuesBufferCounter] = spi1Buffer;
//    spi1ValuesStorage[spiValuesBufferCounter] = spi2Buffer;
//    spi1ValuesStorage[spiValuesBufferCounter] = spi4Buffer;
//    spiValuesBufferCounter++;
    spi_send_all_three_values(spi1Buffer, spi2Buffer, spi4Buffer);
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <HAL_SPI_TxRxCpltCallback+0x8c>)
 800174c:	4912      	ldr	r1, [pc, #72]	; (8001798 <HAL_SPI_TxRxCpltCallback+0x90>)
 800174e:	4813      	ldr	r0, [pc, #76]	; (800179c <HAL_SPI_TxRxCpltCallback+0x94>)
 8001750:	f000 fb8c 	bl	8001e6c <spi_send_all_three_values>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8001754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001758:	2220      	movs	r2, #32
 800175a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800175e:	2017      	movs	r0, #23
 8001760:	f001 fd79 	bl	8003256 <HAL_NVIC_EnableIRQ>
    enableSPI4Interrupt = true;
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_SPI_TxRxCpltCallback+0x98>)
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
    t2 = DWT->CYCCNT;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HAL_SPI_TxRxCpltCallback+0x9c>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <HAL_SPI_TxRxCpltCallback+0xa0>)
 8001770:	6013      	str	r3, [r2, #0]
    unsigned long diff = t2 - t1;
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_SPI_TxRxCpltCallback+0xa0>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_SPI_TxRxCpltCallback+0xa4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	60fb      	str	r3, [r7, #12]
    __NOP();
 800177e:	bf00      	nop
  }
}
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2400811c 	.word	0x2400811c
 800178c:	240081a4 	.word	0x240081a4
 8001790:	2400822c 	.word	0x2400822c
 8001794:	240087c4 	.word	0x240087c4
 8001798:	240087c0 	.word	0x240087c0
 800179c:	240087bc 	.word	0x240087bc
 80017a0:	240087d3 	.word	0x240087d3
 80017a4:	e0001000 	.word	0xe0001000
 80017a8:	240087cc 	.word	0x240087cc
 80017ac:	240087c8 	.word	0x240087c8

080017b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if (huart == &huart4){
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <HAL_UART_RxCpltCallback+0x34>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d10c      	bne.n	80017da <HAL_UART_RxCpltCallback+0x2a>
    HAL_UART_Receive_IT (&huart4, rxUart4Buffer, 1);
 80017c0:	2201      	movs	r2, #1
 80017c2:	4909      	ldr	r1, [pc, #36]	; (80017e8 <HAL_UART_RxCpltCallback+0x38>)
 80017c4:	4807      	ldr	r0, [pc, #28]	; (80017e4 <HAL_UART_RxCpltCallback+0x34>)
 80017c6:	f00c fa37 	bl	800dc38 <HAL_UART_Receive_IT>
    uartCommand = rxUart4Buffer[0];
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <HAL_UART_RxCpltCallback+0x38>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_UART_RxCpltCallback+0x3c>)
 80017d2:	701a      	strb	r2, [r3, #0]
    uartNewCommand = true;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_UART_RxCpltCallback+0x40>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
//  }else if (huart == &huart5){
//    HAL_UART_Receive_IT (&huart5, rxUart5Buffer, 1);
//    uartCommand = rxUart5Buffer[0];
//    uartNewCommand = true;
  }
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	24008668 	.word	0x24008668
 80017e8:	240087d0 	.word	0x240087d0
 80017ec:	240087d1 	.word	0x240087d1
 80017f0:	240087d2 	.word	0x240087d2

080017f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(htim == &htim16){
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a06      	ldr	r2, [pc, #24]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d104      	bne.n	800180e <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8001804:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800180a:	f004 fe02 	bl	8006412 <HAL_GPIO_TogglePin>
  }
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2400861c 	.word	0x2400861c
 800181c:	58020000 	.word	0x58020000

08001820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001824:	b672      	cpsid	i
}
 8001826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001828:	e7fe      	b.n	8001828 <Error_Handler+0x8>
	...

0800182c <sd_card_init>:
FILINFO fno;
uint8_t nameFileNumber = 1;
bool newMeasurement = false;

void sd_card_init (void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	4907      	ldr	r1, [pc, #28]	; (8001850 <sd_card_init+0x24>)
 8001834:	4807      	ldr	r0, [pc, #28]	; (8001854 <sd_card_init+0x28>)
 8001836:	f010 fab5 	bl	8011da4 <f_mount>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <sd_card_init+0x2c>)
 8001840:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK){
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <sd_card_init+0x2c>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d000      	beq.n	800184c <sd_card_init+0x20>
    __NOP(); // TODO error handling
 800184a:	bf00      	nop
  }
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	240087e8 	.word	0x240087e8
 8001854:	240087ec 	.word	0x240087ec
 8001858:	240087d4 	.word	0x240087d4

0800185c <spi1_adc_init>:


uint32_t readIndex=0;
uint8_t adc_values[80];

void spi1_adc_init(uint8_t spsValue){
 800185c:	b580      	push	{r7, lr}
 800185e:	b08e      	sub	sp, #56	; 0x38
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  //GPIOG->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8001866:	2320      	movs	r3, #32
 8001868:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 800186c:	2310      	movs	r3, #16
 800186e:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8001870:	2301      	movs	r3, #1
 8001872:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 8001876:	2300      	movs	r3, #0
 8001878:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 800187a:	2310      	movs	r3, #16
 800187c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8001880:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001884:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8001886:	2302      	movs	r3, #2
 8001888:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 800188a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 800188e:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 8001890:	2328      	movs	r3, #40	; 0x28
 8001892:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 8001894:	2305      	movs	r3, #5
 8001896:	743b      	strb	r3, [r7, #16]
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 800189c:	2306      	movs	r3, #6
 800189e:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 80018a0:	2300      	movs	r3, #0
 80018a2:	813b      	strh	r3, [r7, #8]

  /*Start init ADC1*/
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018aa:	4856      	ldr	r0, [pc, #344]	; (8001a04 <spi1_adc_init+0x1a8>)
 80018ac:	f004 fd98 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi1, adcChannelRegister, 1, 100);
 80018b0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80018b4:	2364      	movs	r3, #100	; 0x64
 80018b6:	2201      	movs	r2, #1
 80018b8:	4853      	ldr	r0, [pc, #332]	; (8001a08 <spi1_adc_init+0x1ac>)
 80018ba:	f009 fc57 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, adcChannel, 2, 100);
 80018be:	f107 0120 	add.w	r1, r7, #32
 80018c2:	2364      	movs	r3, #100	; 0x64
 80018c4:	2202      	movs	r2, #2
 80018c6:	4850      	ldr	r0, [pc, #320]	; (8001a08 <spi1_adc_init+0x1ac>)
 80018c8:	f009 fc50 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d2:	484c      	ldr	r0, [pc, #304]	; (8001a04 <spi1_adc_init+0x1a8>)
 80018d4:	f004 fd84 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80018d8:	2001      	movs	r0, #1
 80018da:	f001 fb7f 	bl	8002fdc <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018e4:	4847      	ldr	r0, [pc, #284]	; (8001a04 <spi1_adc_init+0x1a8>)
 80018e6:	f004 fd7b 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi1, setupConfigurationRegister, 1, 100);
 80018ea:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80018ee:	2364      	movs	r3, #100	; 0x64
 80018f0:	2201      	movs	r2, #1
 80018f2:	4845      	ldr	r0, [pc, #276]	; (8001a08 <spi1_adc_init+0x1ac>)
 80018f4:	f009 fc3a 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, setupConfiguration, 2, 100);
 80018f8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80018fc:	2364      	movs	r3, #100	; 0x64
 80018fe:	2202      	movs	r2, #2
 8001900:	4841      	ldr	r0, [pc, #260]	; (8001a08 <spi1_adc_init+0x1ac>)
 8001902:	f009 fc33 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8001906:	2201      	movs	r2, #1
 8001908:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800190c:	483d      	ldr	r0, [pc, #244]	; (8001a04 <spi1_adc_init+0x1a8>)
 800190e:	f004 fd67 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001912:	2001      	movs	r0, #1
 8001914:	f001 fb62 	bl	8002fdc <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800191e:	4839      	ldr	r0, [pc, #228]	; (8001a04 <spi1_adc_init+0x1a8>)
 8001920:	f004 fd5e 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi1, adcModeRegister, 1, 100);
 8001924:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001928:	2364      	movs	r3, #100	; 0x64
 800192a:	2201      	movs	r2, #1
 800192c:	4836      	ldr	r0, [pc, #216]	; (8001a08 <spi1_adc_init+0x1ac>)
 800192e:	f009 fc1d 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, adcMode, 2, 100);
 8001932:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001936:	2364      	movs	r3, #100	; 0x64
 8001938:	2202      	movs	r2, #2
 800193a:	4833      	ldr	r0, [pc, #204]	; (8001a08 <spi1_adc_init+0x1ac>)
 800193c:	f009 fc16 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8001940:	2201      	movs	r2, #1
 8001942:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001946:	482f      	ldr	r0, [pc, #188]	; (8001a04 <spi1_adc_init+0x1a8>)
 8001948:	f004 fd4a 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800194c:	2001      	movs	r0, #1
 800194e:	f001 fb45 	bl	8002fdc <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001958:	482a      	ldr	r0, [pc, #168]	; (8001a04 <spi1_adc_init+0x1a8>)
 800195a:	f004 fd41 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi1, dataWriteSPS_REGISTER, 1, 100);
 800195e:	f107 0114 	add.w	r1, r7, #20
 8001962:	2364      	movs	r3, #100	; 0x64
 8001964:	2201      	movs	r2, #1
 8001966:	4828      	ldr	r0, [pc, #160]	; (8001a08 <spi1_adc_init+0x1ac>)
 8001968:	f009 fc00 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, dataWriteSPS, 2, 100);
 800196c:	f107 0110 	add.w	r1, r7, #16
 8001970:	2364      	movs	r3, #100	; 0x64
 8001972:	2202      	movs	r2, #2
 8001974:	4824      	ldr	r0, [pc, #144]	; (8001a08 <spi1_adc_init+0x1ac>)
 8001976:	f009 fbf9 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 800197a:	2201      	movs	r2, #1
 800197c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001980:	4820      	ldr	r0, [pc, #128]	; (8001a04 <spi1_adc_init+0x1a8>)
 8001982:	f004 fd2d 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001986:	2001      	movs	r0, #1
 8001988:	f001 fb28 	bl	8002fdc <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001992:	481c      	ldr	r0, [pc, #112]	; (8001a04 <spi1_adc_init+0x1a8>)
 8001994:	f004 fd24 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi1, dataWriteSyncError_REGISTER, 1, 100);
 8001998:	f107 010c 	add.w	r1, r7, #12
 800199c:	2364      	movs	r3, #100	; 0x64
 800199e:	2201      	movs	r2, #1
 80019a0:	4819      	ldr	r0, [pc, #100]	; (8001a08 <spi1_adc_init+0x1ac>)
 80019a2:	f009 fbe3 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, dataWriteSyncError, 2, 100);
 80019a6:	f107 0108 	add.w	r1, r7, #8
 80019aa:	2364      	movs	r3, #100	; 0x64
 80019ac:	2202      	movs	r2, #2
 80019ae:	4816      	ldr	r0, [pc, #88]	; (8001a08 <spi1_adc_init+0x1ac>)
 80019b0:	f009 fbdc 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 80019b4:	2201      	movs	r2, #1
 80019b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ba:	4812      	ldr	r0, [pc, #72]	; (8001a04 <spi1_adc_init+0x1a8>)
 80019bc:	f004 fd10 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f001 fb0b 	bl	8002fdc <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019cc:	480d      	ldr	r0, [pc, #52]	; (8001a04 <spi1_adc_init+0x1a8>)
 80019ce:	f004 fd07 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi1, continuousConvEnableRegister, 1, 100);
 80019d2:	f107 011c 	add.w	r1, r7, #28
 80019d6:	2364      	movs	r3, #100	; 0x64
 80019d8:	2201      	movs	r2, #1
 80019da:	480b      	ldr	r0, [pc, #44]	; (8001a08 <spi1_adc_init+0x1ac>)
 80019dc:	f009 fbc6 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, continuousConvEnable, 2, 100);
 80019e0:	f107 0118 	add.w	r1, r7, #24
 80019e4:	2364      	movs	r3, #100	; 0x64
 80019e6:	2202      	movs	r2, #2
 80019e8:	4807      	ldr	r0, [pc, #28]	; (8001a08 <spi1_adc_init+0x1ac>)
 80019ea:	f009 fbbf 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 80019ee:	2201      	movs	r2, #1
 80019f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <spi1_adc_init+0x1a8>)
 80019f6:	f004 fcf3 	bl	80063e0 <HAL_GPIO_WritePin>
}
 80019fa:	bf00      	nop
 80019fc:	3738      	adds	r7, #56	; 0x38
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	58021800 	.word	0x58021800
 8001a08:	2400811c 	.word	0x2400811c

08001a0c <spi2_adc_init>:

void spi2_adc_init(uint8_t spsValue){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
//  GPIOC->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8001a16:	2320      	movs	r3, #32
 8001a18:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 8001a1c:	2310      	movs	r3, #16
 8001a1e:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8001a20:	2301      	movs	r3, #1
 8001a22:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 8001a26:	2300      	movs	r3, #0
 8001a28:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 8001a2a:	2310      	movs	r3, #16
 8001a2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8001a30:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001a34:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8001a36:	2302      	movs	r3, #2
 8001a38:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 8001a3a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8001a3e:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 8001a40:	2328      	movs	r3, #40	; 0x28
 8001a42:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 8001a44:	2305      	movs	r3, #5
 8001a46:	743b      	strb	r3, [r7, #16]
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 8001a4c:	2306      	movs	r3, #6
 8001a4e:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 8001a50:	2300      	movs	r3, #0
 8001a52:	813b      	strh	r3, [r7, #8]

  /*Start init ADC2*/
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a5a:	4856      	ldr	r0, [pc, #344]	; (8001bb4 <spi2_adc_init+0x1a8>)
 8001a5c:	f004 fcc0 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi2, adcChannelRegister, 1, 100);
 8001a60:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001a64:	2364      	movs	r3, #100	; 0x64
 8001a66:	2201      	movs	r2, #1
 8001a68:	4853      	ldr	r0, [pc, #332]	; (8001bb8 <spi2_adc_init+0x1ac>)
 8001a6a:	f009 fb7f 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, adcChannel, 2, 100);
 8001a6e:	f107 0120 	add.w	r1, r7, #32
 8001a72:	2364      	movs	r3, #100	; 0x64
 8001a74:	2202      	movs	r2, #2
 8001a76:	4850      	ldr	r0, [pc, #320]	; (8001bb8 <spi2_adc_init+0x1ac>)
 8001a78:	f009 fb78 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a82:	484c      	ldr	r0, [pc, #304]	; (8001bb4 <spi2_adc_init+0x1a8>)
 8001a84:	f004 fcac 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f001 faa7 	bl	8002fdc <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a94:	4847      	ldr	r0, [pc, #284]	; (8001bb4 <spi2_adc_init+0x1a8>)
 8001a96:	f004 fca3 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi2, setupConfigurationRegister, 1, 100);
 8001a9a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001a9e:	2364      	movs	r3, #100	; 0x64
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4845      	ldr	r0, [pc, #276]	; (8001bb8 <spi2_adc_init+0x1ac>)
 8001aa4:	f009 fb62 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, setupConfiguration, 2, 100);
 8001aa8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001aac:	2364      	movs	r3, #100	; 0x64
 8001aae:	2202      	movs	r2, #2
 8001ab0:	4841      	ldr	r0, [pc, #260]	; (8001bb8 <spi2_adc_init+0x1ac>)
 8001ab2:	f009 fb5b 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001abc:	483d      	ldr	r0, [pc, #244]	; (8001bb4 <spi2_adc_init+0x1a8>)
 8001abe:	f004 fc8f 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f001 fa8a 	bl	8002fdc <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ace:	4839      	ldr	r0, [pc, #228]	; (8001bb4 <spi2_adc_init+0x1a8>)
 8001ad0:	f004 fc86 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi2, adcModeRegister, 1, 100);
 8001ad4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001ad8:	2364      	movs	r3, #100	; 0x64
 8001ada:	2201      	movs	r2, #1
 8001adc:	4836      	ldr	r0, [pc, #216]	; (8001bb8 <spi2_adc_init+0x1ac>)
 8001ade:	f009 fb45 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, adcMode, 2, 100);
 8001ae2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ae6:	2364      	movs	r3, #100	; 0x64
 8001ae8:	2202      	movs	r2, #2
 8001aea:	4833      	ldr	r0, [pc, #204]	; (8001bb8 <spi2_adc_init+0x1ac>)
 8001aec:	f009 fb3e 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001af0:	2201      	movs	r2, #1
 8001af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af6:	482f      	ldr	r0, [pc, #188]	; (8001bb4 <spi2_adc_init+0x1a8>)
 8001af8:	f004 fc72 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001afc:	2001      	movs	r0, #1
 8001afe:	f001 fa6d 	bl	8002fdc <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b08:	482a      	ldr	r0, [pc, #168]	; (8001bb4 <spi2_adc_init+0x1a8>)
 8001b0a:	f004 fc69 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi2, dataWriteSPS_REGISTER, 1, 100);
 8001b0e:	f107 0114 	add.w	r1, r7, #20
 8001b12:	2364      	movs	r3, #100	; 0x64
 8001b14:	2201      	movs	r2, #1
 8001b16:	4828      	ldr	r0, [pc, #160]	; (8001bb8 <spi2_adc_init+0x1ac>)
 8001b18:	f009 fb28 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, dataWriteSPS, 2, 100);
 8001b1c:	f107 0110 	add.w	r1, r7, #16
 8001b20:	2364      	movs	r3, #100	; 0x64
 8001b22:	2202      	movs	r2, #2
 8001b24:	4824      	ldr	r0, [pc, #144]	; (8001bb8 <spi2_adc_init+0x1ac>)
 8001b26:	f009 fb21 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b30:	4820      	ldr	r0, [pc, #128]	; (8001bb4 <spi2_adc_init+0x1a8>)
 8001b32:	f004 fc55 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001b36:	2001      	movs	r0, #1
 8001b38:	f001 fa50 	bl	8002fdc <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b42:	481c      	ldr	r0, [pc, #112]	; (8001bb4 <spi2_adc_init+0x1a8>)
 8001b44:	f004 fc4c 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi2, dataWriteSyncError_REGISTER, 1, 100);
 8001b48:	f107 010c 	add.w	r1, r7, #12
 8001b4c:	2364      	movs	r3, #100	; 0x64
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4819      	ldr	r0, [pc, #100]	; (8001bb8 <spi2_adc_init+0x1ac>)
 8001b52:	f009 fb0b 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, dataWriteSyncError, 2, 100);
 8001b56:	f107 0108 	add.w	r1, r7, #8
 8001b5a:	2364      	movs	r3, #100	; 0x64
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	4816      	ldr	r0, [pc, #88]	; (8001bb8 <spi2_adc_init+0x1ac>)
 8001b60:	f009 fb04 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6a:	4812      	ldr	r0, [pc, #72]	; (8001bb4 <spi2_adc_init+0x1a8>)
 8001b6c:	f004 fc38 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001b70:	2001      	movs	r0, #1
 8001b72:	f001 fa33 	bl	8002fdc <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <spi2_adc_init+0x1a8>)
 8001b7e:	f004 fc2f 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi2, continuousConvEnableRegister, 1, 100);
 8001b82:	f107 011c 	add.w	r1, r7, #28
 8001b86:	2364      	movs	r3, #100	; 0x64
 8001b88:	2201      	movs	r2, #1
 8001b8a:	480b      	ldr	r0, [pc, #44]	; (8001bb8 <spi2_adc_init+0x1ac>)
 8001b8c:	f009 faee 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, continuousConvEnable, 2, 100);
 8001b90:	f107 0118 	add.w	r1, r7, #24
 8001b94:	2364      	movs	r3, #100	; 0x64
 8001b96:	2202      	movs	r2, #2
 8001b98:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <spi2_adc_init+0x1ac>)
 8001b9a:	f009 fae7 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba4:	4803      	ldr	r0, [pc, #12]	; (8001bb4 <spi2_adc_init+0x1a8>)
 8001ba6:	f004 fc1b 	bl	80063e0 <HAL_GPIO_WritePin>
}
 8001baa:	bf00      	nop
 8001bac:	3738      	adds	r7, #56	; 0x38
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	58020400 	.word	0x58020400
 8001bb8:	240081a4 	.word	0x240081a4

08001bbc <spi4_adc_init>:

void spi4_adc_init(uint8_t spsValue){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08e      	sub	sp, #56	; 0x38
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
//  GPIOC->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8001bc6:	2320      	movs	r3, #32
 8001bc8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 8001bcc:	2310      	movs	r3, #16
 8001bce:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 8001bda:	2310      	movs	r3, #16
 8001bdc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8001be0:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001be4:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8001be6:	2302      	movs	r3, #2
 8001be8:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 8001bea:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8001bee:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 8001bf0:	2328      	movs	r3, #40	; 0x28
 8001bf2:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	743b      	strb	r3, [r7, #16]
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 8001bfc:	2306      	movs	r3, #6
 8001bfe:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 8001c00:	2300      	movs	r3, #0
 8001c02:	813b      	strh	r3, [r7, #8]

  /*Start init ADC4*/
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2110      	movs	r1, #16
 8001c08:	4850      	ldr	r0, [pc, #320]	; (8001d4c <spi4_adc_init+0x190>)
 8001c0a:	f004 fbe9 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi4, adcChannelRegister, 1, 100);
 8001c0e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001c12:	2364      	movs	r3, #100	; 0x64
 8001c14:	2201      	movs	r2, #1
 8001c16:	484e      	ldr	r0, [pc, #312]	; (8001d50 <spi4_adc_init+0x194>)
 8001c18:	f009 faa8 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, adcChannel, 2, 100);
 8001c1c:	f107 0120 	add.w	r1, r7, #32
 8001c20:	2364      	movs	r3, #100	; 0x64
 8001c22:	2202      	movs	r2, #2
 8001c24:	484a      	ldr	r0, [pc, #296]	; (8001d50 <spi4_adc_init+0x194>)
 8001c26:	f009 faa1 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	4847      	ldr	r0, [pc, #284]	; (8001d4c <spi4_adc_init+0x190>)
 8001c30:	f004 fbd6 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001c34:	2001      	movs	r0, #1
 8001c36:	f001 f9d1 	bl	8002fdc <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2110      	movs	r1, #16
 8001c3e:	4843      	ldr	r0, [pc, #268]	; (8001d4c <spi4_adc_init+0x190>)
 8001c40:	f004 fbce 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi4, setupConfigurationRegister, 1, 100);
 8001c44:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001c48:	2364      	movs	r3, #100	; 0x64
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4840      	ldr	r0, [pc, #256]	; (8001d50 <spi4_adc_init+0x194>)
 8001c4e:	f009 fa8d 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, setupConfiguration, 2, 100);
 8001c52:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001c56:	2364      	movs	r3, #100	; 0x64
 8001c58:	2202      	movs	r2, #2
 8001c5a:	483d      	ldr	r0, [pc, #244]	; (8001d50 <spi4_adc_init+0x194>)
 8001c5c:	f009 fa86 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001c60:	2201      	movs	r2, #1
 8001c62:	2110      	movs	r1, #16
 8001c64:	4839      	ldr	r0, [pc, #228]	; (8001d4c <spi4_adc_init+0x190>)
 8001c66:	f004 fbbb 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f001 f9b6 	bl	8002fdc <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2110      	movs	r1, #16
 8001c74:	4835      	ldr	r0, [pc, #212]	; (8001d4c <spi4_adc_init+0x190>)
 8001c76:	f004 fbb3 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi4, adcModeRegister, 1, 100);
 8001c7a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001c7e:	2364      	movs	r3, #100	; 0x64
 8001c80:	2201      	movs	r2, #1
 8001c82:	4833      	ldr	r0, [pc, #204]	; (8001d50 <spi4_adc_init+0x194>)
 8001c84:	f009 fa72 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, adcMode, 2, 100);
 8001c88:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c8c:	2364      	movs	r3, #100	; 0x64
 8001c8e:	2202      	movs	r2, #2
 8001c90:	482f      	ldr	r0, [pc, #188]	; (8001d50 <spi4_adc_init+0x194>)
 8001c92:	f009 fa6b 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001c96:	2201      	movs	r2, #1
 8001c98:	2110      	movs	r1, #16
 8001c9a:	482c      	ldr	r0, [pc, #176]	; (8001d4c <spi4_adc_init+0x190>)
 8001c9c:	f004 fba0 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f001 f99b 	bl	8002fdc <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2110      	movs	r1, #16
 8001caa:	4828      	ldr	r0, [pc, #160]	; (8001d4c <spi4_adc_init+0x190>)
 8001cac:	f004 fb98 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi4, dataWriteSPS_REGISTER, 1, 100);
 8001cb0:	f107 0114 	add.w	r1, r7, #20
 8001cb4:	2364      	movs	r3, #100	; 0x64
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4825      	ldr	r0, [pc, #148]	; (8001d50 <spi4_adc_init+0x194>)
 8001cba:	f009 fa57 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, dataWriteSPS, 2, 100);
 8001cbe:	f107 0110 	add.w	r1, r7, #16
 8001cc2:	2364      	movs	r3, #100	; 0x64
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	4822      	ldr	r0, [pc, #136]	; (8001d50 <spi4_adc_init+0x194>)
 8001cc8:	f009 fa50 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2110      	movs	r1, #16
 8001cd0:	481e      	ldr	r0, [pc, #120]	; (8001d4c <spi4_adc_init+0x190>)
 8001cd2:	f004 fb85 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	f001 f980 	bl	8002fdc <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2110      	movs	r1, #16
 8001ce0:	481a      	ldr	r0, [pc, #104]	; (8001d4c <spi4_adc_init+0x190>)
 8001ce2:	f004 fb7d 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi4, dataWriteSyncError_REGISTER, 1, 100);
 8001ce6:	f107 010c 	add.w	r1, r7, #12
 8001cea:	2364      	movs	r3, #100	; 0x64
 8001cec:	2201      	movs	r2, #1
 8001cee:	4818      	ldr	r0, [pc, #96]	; (8001d50 <spi4_adc_init+0x194>)
 8001cf0:	f009 fa3c 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, dataWriteSyncError, 2, 100);
 8001cf4:	f107 0108 	add.w	r1, r7, #8
 8001cf8:	2364      	movs	r3, #100	; 0x64
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	4814      	ldr	r0, [pc, #80]	; (8001d50 <spi4_adc_init+0x194>)
 8001cfe:	f009 fa35 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001d02:	2201      	movs	r2, #1
 8001d04:	2110      	movs	r1, #16
 8001d06:	4811      	ldr	r0, [pc, #68]	; (8001d4c <spi4_adc_init+0x190>)
 8001d08:	f004 fb6a 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f001 f965 	bl	8002fdc <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2110      	movs	r1, #16
 8001d16:	480d      	ldr	r0, [pc, #52]	; (8001d4c <spi4_adc_init+0x190>)
 8001d18:	f004 fb62 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi4, continuousConvEnableRegister, 1, 100);
 8001d1c:	f107 011c 	add.w	r1, r7, #28
 8001d20:	2364      	movs	r3, #100	; 0x64
 8001d22:	2201      	movs	r2, #1
 8001d24:	480a      	ldr	r0, [pc, #40]	; (8001d50 <spi4_adc_init+0x194>)
 8001d26:	f009 fa21 	bl	800b16c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, continuousConvEnable, 2, 100);
 8001d2a:	f107 0118 	add.w	r1, r7, #24
 8001d2e:	2364      	movs	r3, #100	; 0x64
 8001d30:	2202      	movs	r2, #2
 8001d32:	4807      	ldr	r0, [pc, #28]	; (8001d50 <spi4_adc_init+0x194>)
 8001d34:	f009 fa1a 	bl	800b16c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2110      	movs	r1, #16
 8001d3c:	4803      	ldr	r0, [pc, #12]	; (8001d4c <spi4_adc_init+0x190>)
 8001d3e:	f004 fb4f 	bl	80063e0 <HAL_GPIO_WritePin>
}
 8001d42:	bf00      	nop
 8001d44:	3738      	adds	r7, #56	; 0x38
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	58021000 	.word	0x58021000
 8001d50:	2400822c 	.word	0x2400822c

08001d54 <run_all_adc>:


void run_all_adc(void){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d5e:	4808      	ldr	r0, [pc, #32]	; (8001d80 <run_all_adc+0x2c>)
 8001d60:	f004 fb3e 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d6a:	4806      	ldr	r0, [pc, #24]	; (8001d84 <run_all_adc+0x30>)
 8001d6c:	f004 fb38 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2110      	movs	r1, #16
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <run_all_adc+0x34>)
 8001d76:	f004 fb33 	bl	80063e0 <HAL_GPIO_WritePin>
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	58021800 	.word	0x58021800
 8001d84:	58020400 	.word	0x58020400
 8001d88:	58021000 	.word	0x58021000

08001d8c <spi1_soft_reset>:
      HAL_UART_Transmit(&huart5, (uint8_t*)", ", 2, 10);
      HAL_Delay(10);
  }
}

void spi1_soft_reset(void){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8001d92:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <spi1_soft_reset+0x40>)
 8001d94:	463b      	mov	r3, r7
 8001d96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d9a:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001da4:	480a      	ldr	r0, [pc, #40]	; (8001dd0 <spi1_soft_reset+0x44>)
 8001da6:	f004 fb1b 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, softResetValue, 8, 100);
 8001daa:	4639      	mov	r1, r7
 8001dac:	2364      	movs	r3, #100	; 0x64
 8001dae:	2208      	movs	r2, #8
 8001db0:	4808      	ldr	r0, [pc, #32]	; (8001dd4 <spi1_soft_reset+0x48>)
 8001db2:	f009 f9db 	bl	800b16c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8001db6:	2201      	movs	r2, #1
 8001db8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dbc:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <spi1_soft_reset+0x44>)
 8001dbe:	f004 fb0f 	bl	80063e0 <HAL_GPIO_WritePin>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	0801284c 	.word	0x0801284c
 8001dd0:	58021800 	.word	0x58021800
 8001dd4:	2400811c 	.word	0x2400811c

08001dd8 <spi2_soft_reset>:

void spi2_soft_reset(void){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8001dde:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <spi2_soft_reset+0x40>)
 8001de0:	463b      	mov	r3, r7
 8001de2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001de6:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df0:	480a      	ldr	r0, [pc, #40]	; (8001e1c <spi2_soft_reset+0x44>)
 8001df2:	f004 faf5 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, softResetValue, 8, 100);
 8001df6:	4639      	mov	r1, r7
 8001df8:	2364      	movs	r3, #100	; 0x64
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	4808      	ldr	r0, [pc, #32]	; (8001e20 <spi2_soft_reset+0x48>)
 8001dfe:	f009 f9b5 	bl	800b16c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001e02:	2201      	movs	r2, #1
 8001e04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e08:	4804      	ldr	r0, [pc, #16]	; (8001e1c <spi2_soft_reset+0x44>)
 8001e0a:	f004 fae9 	bl	80063e0 <HAL_GPIO_WritePin>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	0801284c 	.word	0x0801284c
 8001e1c:	58020400 	.word	0x58020400
 8001e20:	240081a4 	.word	0x240081a4

08001e24 <spi4_soft_reset>:

void spi4_soft_reset(void){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8001e2a:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <spi4_soft_reset+0x3c>)
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e32:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2110      	movs	r1, #16
 8001e3a:	480a      	ldr	r0, [pc, #40]	; (8001e64 <spi4_soft_reset+0x40>)
 8001e3c:	f004 fad0 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi4, softResetValue, 8, 100);
 8001e40:	4639      	mov	r1, r7
 8001e42:	2364      	movs	r3, #100	; 0x64
 8001e44:	2208      	movs	r2, #8
 8001e46:	4808      	ldr	r0, [pc, #32]	; (8001e68 <spi4_soft_reset+0x44>)
 8001e48:	f009 f990 	bl	800b16c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2110      	movs	r1, #16
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <spi4_soft_reset+0x40>)
 8001e52:	f004 fac5 	bl	80063e0 <HAL_GPIO_WritePin>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	0801284c 	.word	0x0801284c
 8001e64:	58021000 	.word	0x58021000
 8001e68:	2400822c 	.word	0x2400822c

08001e6c <spi_send_all_three_values>:
  }
  HAL_UART_Transmit(&huart4, (uint8_t*)"\n\r", 2, 10);
}


void spi_send_all_three_values(uint8_t* adcRawValue_x, uint8_t* adcRawValue_y, uint8_t* adcRawValue_z){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b0a4      	sub	sp, #144	; 0x90
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t value_x = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t value_y = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t value_z = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint8_t uartBuffer_x[14];
  uint8_t uartBuffer_y[14];
  uint8_t uartBuffer_z[14];
  uint8_t concatenatedBuffer[39];

  value_x = (uint32_t)adcRawValue_x[0];
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x<<8;
 8001e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x | adcRawValue_x[1];
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x<<8;
 8001eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x | adcRawValue_x[2];
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3302      	adds	r3, #2
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x<<8;
 8001ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x | adcRawValue_x[3];
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3303      	adds	r3, #3
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  value_y = (uint32_t)adcRawValue_y[0];
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y<<8;
 8001eec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y | adcRawValue_y[1];
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y<<8;
 8001f08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y | adcRawValue_y[2];
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	3302      	adds	r3, #2
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y<<8;
 8001f24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y | adcRawValue_y[3];
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3303      	adds	r3, #3
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  value_z = (uint32_t)adcRawValue_z[0];
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z<<8;
 8001f46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z | adcRawValue_z[1];
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f56:	4313      	orrs	r3, r2
 8001f58:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z<<8;
 8001f5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z | adcRawValue_z[2];
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3302      	adds	r3, #2
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z<<8;
 8001f6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z | adcRawValue_z[3];
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3303      	adds	r3, #3
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	67fb      	str	r3, [r7, #124]	; 0x7c

  int length_x = sprintf((char *)uartBuffer_x, "%10lu", value_x);
 8001f82:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f86:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f8a:	4918      	ldr	r1, [pc, #96]	; (8001fec <spi_send_all_three_values+0x180>)
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f00f ffdd 	bl	8011f4c <siprintf>
 8001f92:	67b8      	str	r0, [r7, #120]	; 0x78
  int length_y = sprintf((char *)uartBuffer_y, "%10lu", value_y);
 8001f94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001f9c:	4913      	ldr	r1, [pc, #76]	; (8001fec <spi_send_all_three_values+0x180>)
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f00f ffd4 	bl	8011f4c <siprintf>
 8001fa4:	6778      	str	r0, [r7, #116]	; 0x74
  int length_z = sprintf((char *)uartBuffer_z, "%10lu", value_z);
 8001fa6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001faa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001fac:	490f      	ldr	r1, [pc, #60]	; (8001fec <spi_send_all_three_values+0x180>)
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f00f ffcc 	bl	8011f4c <siprintf>
 8001fb4:	6738      	str	r0, [r7, #112]	; 0x70

  int lengthConCat = sprintf((char *)concatenatedBuffer, "%s %s %s\n", (char*)uartBuffer_x, (char*)uartBuffer_y, (char*)uartBuffer_z);
 8001fb6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001fba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fbe:	f107 0014 	add.w	r0, r7, #20
 8001fc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4909      	ldr	r1, [pc, #36]	; (8001ff0 <spi_send_all_three_values+0x184>)
 8001fcc:	f00f ffbe 	bl	8011f4c <siprintf>
 8001fd0:	66f8      	str	r0, [r7, #108]	; 0x6c

  HAL_UART_Transmit(&huart4, concatenatedBuffer, 34,100);
 8001fd2:	f107 0114 	add.w	r1, r7, #20
 8001fd6:	2364      	movs	r3, #100	; 0x64
 8001fd8:	2222      	movs	r2, #34	; 0x22
 8001fda:	4806      	ldr	r0, [pc, #24]	; (8001ff4 <spi_send_all_three_values+0x188>)
 8001fdc:	f00b fd96 	bl	800db0c <HAL_UART_Transmit>
  __NOP();
 8001fe0:	bf00      	nop
//  HAL_UART_Transmit(&huart4, uartBuffer_y, (uint16_t)length_y, 10);
//  HAL_UART_Transmit(&huart4, ", z: ", 5, 10);
//  HAL_UART_Transmit(&huart4, uartBuffer_z, (uint16_t)length_z, 10);
//  HAL_UART_Transmit(&huart4, "\n", 1, 10);

}
 8001fe2:	bf00      	nop
 8001fe4:	3788      	adds	r7, #136	; 0x88
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	08012874 	.word	0x08012874
 8001ff0:	0801287c 	.word	0x0801287c
 8001ff4:	24008668 	.word	0x24008668

08001ff8 <setNewSPStoAllADCs>:
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}



void setNewSPStoAllADCs(uint8_t spsValue){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002002:	2017      	movs	r0, #23
 8002004:	f001 f935 	bl	8003272 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8002008:	2028      	movs	r0, #40	; 0x28
 800200a:	f001 f932 	bl	8003272 <HAL_NVIC_DisableIRQ>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 800200e:	2201      	movs	r2, #1
 8002010:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002014:	481f      	ldr	r0, [pc, #124]	; (8002094 <setNewSPStoAllADCs+0x9c>)
 8002016:	f004 f9e3 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 800201a:	2201      	movs	r2, #1
 800201c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002020:	481d      	ldr	r0, [pc, #116]	; (8002098 <setNewSPStoAllADCs+0xa0>)
 8002022:	f004 f9dd 	bl	80063e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002026:	2201      	movs	r2, #1
 8002028:	2110      	movs	r1, #16
 800202a:	481c      	ldr	r0, [pc, #112]	; (800209c <setNewSPStoAllADCs+0xa4>)
 800202c:	f004 f9d8 	bl	80063e0 <HAL_GPIO_WritePin>
  spi1_soft_reset();
 8002030:	f7ff feac 	bl	8001d8c <spi1_soft_reset>
  spi2_soft_reset();
 8002034:	f7ff fed0 	bl	8001dd8 <spi2_soft_reset>
  spi4_soft_reset();
 8002038:	f7ff fef4 	bl	8001e24 <spi4_soft_reset>
  spi1_adc_init(spsValue);
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fc0c 	bl	800185c <spi1_adc_init>
  spi2_adc_init(spsValue);
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fce0 	bl	8001a0c <spi2_adc_init>
  spi4_adc_init(spsValue);
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fdb4 	bl	8001bbc <spi4_adc_init>
  run_all_adc();
 8002054:	f7ff fe7e 	bl	8001d54 <run_all_adc>
  HAL_Delay(1);
 8002058:	2001      	movs	r0, #1
 800205a:	f000 ffbf 	bl	8002fdc <HAL_Delay>
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 800205e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002062:	2220      	movs	r2, #32
 8002064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8002068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206c:	2240      	movs	r2, #64	; 0x40
 800206e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8002072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002076:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800207a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800207e:	2017      	movs	r0, #23
 8002080:	f001 f8e9 	bl	8003256 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002084:	2028      	movs	r0, #40	; 0x28
 8002086:	f001 f8e6 	bl	8003256 <HAL_NVIC_EnableIRQ>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	58021800 	.word	0x58021800
 8002098:	58020400 	.word	0x58020400
 800209c:	58021000 	.word	0x58021000

080020a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_MspInit+0x30>)
 80020a8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80020ac:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <HAL_MspInit+0x30>)
 80020ae:	f043 0302 	orr.w	r3, r3, #2
 80020b2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_MspInit+0x30>)
 80020b8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	58024400 	.word	0x58024400

080020d4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08c      	sub	sp, #48	; 0x30
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 031c 	add.w	r3, r7, #28
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a3e      	ldr	r2, [pc, #248]	; (80021ec <HAL_SD_MspInit+0x118>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d175      	bne.n	80021e2 <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80020f6:	4b3e      	ldr	r3, [pc, #248]	; (80021f0 <HAL_SD_MspInit+0x11c>)
 80020f8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80020fc:	4a3c      	ldr	r2, [pc, #240]	; (80021f0 <HAL_SD_MspInit+0x11c>)
 80020fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002102:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8002106:	4b3a      	ldr	r3, [pc, #232]	; (80021f0 <HAL_SD_MspInit+0x11c>)
 8002108:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800210c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002114:	4b36      	ldr	r3, [pc, #216]	; (80021f0 <HAL_SD_MspInit+0x11c>)
 8002116:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800211a:	4a35      	ldr	r2, [pc, #212]	; (80021f0 <HAL_SD_MspInit+0x11c>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002124:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <HAL_SD_MspInit+0x11c>)
 8002126:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002132:	4b2f      	ldr	r3, [pc, #188]	; (80021f0 <HAL_SD_MspInit+0x11c>)
 8002134:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002138:	4a2d      	ldr	r2, [pc, #180]	; (80021f0 <HAL_SD_MspInit+0x11c>)
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_SD_MspInit+0x11c>)
 8002144:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_SD_MspInit+0x11c>)
 8002152:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002156:	4a26      	ldr	r2, [pc, #152]	; (80021f0 <HAL_SD_MspInit+0x11c>)
 8002158:	f043 0308 	orr.w	r3, r3, #8
 800215c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <HAL_SD_MspInit+0x11c>)
 8002162:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800216e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217c:	2303      	movs	r3, #3
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002180:	230c      	movs	r3, #12
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	f107 031c 	add.w	r3, r7, #28
 8002188:	4619      	mov	r1, r3
 800218a:	481a      	ldr	r0, [pc, #104]	; (80021f4 <HAL_SD_MspInit+0x120>)
 800218c:	f003 ff78 	bl	8006080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002190:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219e:	2303      	movs	r3, #3
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80021a2:	230c      	movs	r3, #12
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	4619      	mov	r1, r3
 80021ac:	4812      	ldr	r0, [pc, #72]	; (80021f8 <HAL_SD_MspInit+0x124>)
 80021ae:	f003 ff67 	bl	8006080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021b2:	2304      	movs	r3, #4
 80021b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80021c2:	230c      	movs	r3, #12
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	4619      	mov	r1, r3
 80021cc:	480b      	ldr	r0, [pc, #44]	; (80021fc <HAL_SD_MspInit+0x128>)
 80021ce:	f003 ff57 	bl	8006080 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	2031      	movs	r0, #49	; 0x31
 80021d8:	f001 f823 	bl	8003222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80021dc:	2031      	movs	r0, #49	; 0x31
 80021de:	f001 f83a 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80021e2:	bf00      	nop
 80021e4:	3730      	adds	r7, #48	; 0x30
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	52007000 	.word	0x52007000
 80021f0:	58024400 	.word	0x58024400
 80021f4:	58020400 	.word	0x58020400
 80021f8:	58020800 	.word	0x58020800
 80021fc:	58020c00 	.word	0x58020c00

08002200 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b0be      	sub	sp, #248	; 0xf8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800221c:	22b8      	movs	r2, #184	; 0xb8
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f00f fe8b 	bl	8011f3c <memset>
  if(hspi->Instance==SPI1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a72      	ldr	r2, [pc, #456]	; (80023f4 <HAL_SPI_MspInit+0x1f4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	f040 80f3 	bne.w	8002418 <HAL_SPI_MspInit+0x218>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002238:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800223c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002244:	4618      	mov	r0, r3
 8002246:	f005 f8e5 	bl	8007414 <HAL_RCCEx_PeriphCLKConfig>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002250:	f7ff fae6 	bl	8001820 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002254:	4b68      	ldr	r3, [pc, #416]	; (80023f8 <HAL_SPI_MspInit+0x1f8>)
 8002256:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800225a:	4a67      	ldr	r2, [pc, #412]	; (80023f8 <HAL_SPI_MspInit+0x1f8>)
 800225c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002260:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002264:	4b64      	ldr	r3, [pc, #400]	; (80023f8 <HAL_SPI_MspInit+0x1f8>)
 8002266:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800226a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002270:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	4b61      	ldr	r3, [pc, #388]	; (80023f8 <HAL_SPI_MspInit+0x1f8>)
 8002274:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002278:	4a5f      	ldr	r2, [pc, #380]	; (80023f8 <HAL_SPI_MspInit+0x1f8>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002282:	4b5d      	ldr	r3, [pc, #372]	; (80023f8 <HAL_SPI_MspInit+0x1f8>)
 8002284:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002290:	4b59      	ldr	r3, [pc, #356]	; (80023f8 <HAL_SPI_MspInit+0x1f8>)
 8002292:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002296:	4a58      	ldr	r2, [pc, #352]	; (80023f8 <HAL_SPI_MspInit+0x1f8>)
 8002298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800229c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80022a0:	4b55      	ldr	r3, [pc, #340]	; (80023f8 <HAL_SPI_MspInit+0x1f8>)
 80022a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80022a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022aa:	623b      	str	r3, [r7, #32]
 80022ac:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ae:	23c0      	movs	r3, #192	; 0xc0
 80022b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022c6:	2305      	movs	r3, #5
 80022c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022d0:	4619      	mov	r1, r3
 80022d2:	484a      	ldr	r0, [pc, #296]	; (80023fc <HAL_SPI_MspInit+0x1fc>)
 80022d4:	f003 fed4 	bl	8006080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022f2:	2305      	movs	r3, #5
 80022f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022fc:	4619      	mov	r1, r3
 80022fe:	4840      	ldr	r0, [pc, #256]	; (8002400 <HAL_SPI_MspInit+0x200>)
 8002300:	f003 febe 	bl	8006080 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8002304:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <HAL_SPI_MspInit+0x204>)
 8002306:	4a40      	ldr	r2, [pc, #256]	; (8002408 <HAL_SPI_MspInit+0x208>)
 8002308:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800230a:	4b3e      	ldr	r3, [pc, #248]	; (8002404 <HAL_SPI_MspInit+0x204>)
 800230c:	2225      	movs	r2, #37	; 0x25
 800230e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002310:	4b3c      	ldr	r3, [pc, #240]	; (8002404 <HAL_SPI_MspInit+0x204>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002316:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <HAL_SPI_MspInit+0x204>)
 8002318:	2200      	movs	r2, #0
 800231a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800231c:	4b39      	ldr	r3, [pc, #228]	; (8002404 <HAL_SPI_MspInit+0x204>)
 800231e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002322:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002324:	4b37      	ldr	r3, [pc, #220]	; (8002404 <HAL_SPI_MspInit+0x204>)
 8002326:	2200      	movs	r2, #0
 8002328:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800232a:	4b36      	ldr	r3, [pc, #216]	; (8002404 <HAL_SPI_MspInit+0x204>)
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002330:	4b34      	ldr	r3, [pc, #208]	; (8002404 <HAL_SPI_MspInit+0x204>)
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002336:	4b33      	ldr	r3, [pc, #204]	; (8002404 <HAL_SPI_MspInit+0x204>)
 8002338:	2200      	movs	r2, #0
 800233a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <HAL_SPI_MspInit+0x204>)
 800233e:	2200      	movs	r2, #0
 8002340:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002342:	4830      	ldr	r0, [pc, #192]	; (8002404 <HAL_SPI_MspInit+0x204>)
 8002344:	f000 ffb0 	bl	80032a8 <HAL_DMA_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_SPI_MspInit+0x152>
    {
      Error_Handler();
 800234e:	f7ff fa67 	bl	8001820 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a2b      	ldr	r2, [pc, #172]	; (8002404 <HAL_SPI_MspInit+0x204>)
 8002356:	67da      	str	r2, [r3, #124]	; 0x7c
 8002358:	4a2a      	ldr	r2, [pc, #168]	; (8002404 <HAL_SPI_MspInit+0x204>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 800235e:	4b2b      	ldr	r3, [pc, #172]	; (800240c <HAL_SPI_MspInit+0x20c>)
 8002360:	4a2b      	ldr	r2, [pc, #172]	; (8002410 <HAL_SPI_MspInit+0x210>)
 8002362:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002364:	4b29      	ldr	r3, [pc, #164]	; (800240c <HAL_SPI_MspInit+0x20c>)
 8002366:	2226      	movs	r2, #38	; 0x26
 8002368:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800236a:	4b28      	ldr	r3, [pc, #160]	; (800240c <HAL_SPI_MspInit+0x20c>)
 800236c:	2240      	movs	r2, #64	; 0x40
 800236e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002370:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_SPI_MspInit+0x20c>)
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002376:	4b25      	ldr	r3, [pc, #148]	; (800240c <HAL_SPI_MspInit+0x20c>)
 8002378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800237c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800237e:	4b23      	ldr	r3, [pc, #140]	; (800240c <HAL_SPI_MspInit+0x20c>)
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002384:	4b21      	ldr	r3, [pc, #132]	; (800240c <HAL_SPI_MspInit+0x20c>)
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_SPI_MspInit+0x20c>)
 800238c:	2200      	movs	r2, #0
 800238e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002390:	4b1e      	ldr	r3, [pc, #120]	; (800240c <HAL_SPI_MspInit+0x20c>)
 8002392:	2200      	movs	r2, #0
 8002394:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_SPI_MspInit+0x20c>)
 8002398:	2200      	movs	r2, #0
 800239a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800239c:	481b      	ldr	r0, [pc, #108]	; (800240c <HAL_SPI_MspInit+0x20c>)
 800239e:	f000 ff83 	bl	80032a8 <HAL_DMA_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 80023a8:	f7ff fa3a 	bl	8001820 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a17      	ldr	r2, [pc, #92]	; (800240c <HAL_SPI_MspInit+0x20c>)
 80023b0:	679a      	str	r2, [r3, #120]	; 0x78
 80023b2:	4a16      	ldr	r2, [pc, #88]	; (800240c <HAL_SPI_MspInit+0x20c>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2100      	movs	r1, #0
 80023bc:	2023      	movs	r0, #35	; 0x23
 80023be:	f000 ff30 	bl	8003222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80023c2:	2023      	movs	r0, #35	; 0x23
 80023c4:	f000 ff47 	bl	8003256 <HAL_NVIC_EnableIRQ>
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
//    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

    // SPI1 MISO interrupt setting FIXME
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023c8:	2340      	movs	r3, #64	; 0x40
 80023ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING; //GPIO_MODE_AF_PP  | TRIGGER_RISING | TRIGGER_FALLING;
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_SPI_MspInit+0x214>)
 80023d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023e0:	2305      	movs	r3, #5
 80023e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023ea:	4619      	mov	r1, r3
 80023ec:	4803      	ldr	r0, [pc, #12]	; (80023fc <HAL_SPI_MspInit+0x1fc>)
 80023ee:	f003 fe47 	bl	8006080 <HAL_GPIO_Init>


  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80023f2:	e1cb      	b.n	800278c <HAL_SPI_MspInit+0x58c>
 80023f4:	40013000 	.word	0x40013000
 80023f8:	58024400 	.word	0x58024400
 80023fc:	58020000 	.word	0x58020000
 8002400:	58021800 	.word	0x58021800
 8002404:	240082b4 	.word	0x240082b4
 8002408:	40020010 	.word	0x40020010
 800240c:	2400832c 	.word	0x2400832c
 8002410:	40020028 	.word	0x40020028
 8002414:	00210002 	.word	0x00210002
  else if(hspi->Instance==SPI2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a72      	ldr	r2, [pc, #456]	; (80025e8 <HAL_SPI_MspInit+0x3e8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	f040 80f4 	bne.w	800260c <HAL_SPI_MspInit+0x40c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800242a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800242e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002436:	4618      	mov	r0, r3
 8002438:	f004 ffec 	bl	8007414 <HAL_RCCEx_PeriphCLKConfig>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_SPI_MspInit+0x246>
      Error_Handler();
 8002442:	f7ff f9ed 	bl	8001820 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002446:	4b69      	ldr	r3, [pc, #420]	; (80025ec <HAL_SPI_MspInit+0x3ec>)
 8002448:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800244c:	4a67      	ldr	r2, [pc, #412]	; (80025ec <HAL_SPI_MspInit+0x3ec>)
 800244e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002452:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002456:	4b65      	ldr	r3, [pc, #404]	; (80025ec <HAL_SPI_MspInit+0x3ec>)
 8002458:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800245c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002464:	4b61      	ldr	r3, [pc, #388]	; (80025ec <HAL_SPI_MspInit+0x3ec>)
 8002466:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800246a:	4a60      	ldr	r2, [pc, #384]	; (80025ec <HAL_SPI_MspInit+0x3ec>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002474:	4b5d      	ldr	r3, [pc, #372]	; (80025ec <HAL_SPI_MspInit+0x3ec>)
 8002476:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002482:	4b5a      	ldr	r3, [pc, #360]	; (80025ec <HAL_SPI_MspInit+0x3ec>)
 8002484:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002488:	4a58      	ldr	r2, [pc, #352]	; (80025ec <HAL_SPI_MspInit+0x3ec>)
 800248a:	f043 0302 	orr.w	r3, r3, #2
 800248e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002492:	4b56      	ldr	r3, [pc, #344]	; (80025ec <HAL_SPI_MspInit+0x3ec>)
 8002494:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024a0:	2302      	movs	r3, #2
 80024a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024b8:	2305      	movs	r3, #5
 80024ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024c2:	4619      	mov	r1, r3
 80024c4:	484a      	ldr	r0, [pc, #296]	; (80025f0 <HAL_SPI_MspInit+0x3f0>)
 80024c6:	f003 fddb 	bl	8006080 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 80024ca:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80024ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2300      	movs	r3, #0
 80024e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024e4:	2305      	movs	r3, #5
 80024e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024ee:	4619      	mov	r1, r3
 80024f0:	4840      	ldr	r0, [pc, #256]	; (80025f4 <HAL_SPI_MspInit+0x3f4>)
 80024f2:	f003 fdc5 	bl	8006080 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream7;
 80024f6:	4b40      	ldr	r3, [pc, #256]	; (80025f8 <HAL_SPI_MspInit+0x3f8>)
 80024f8:	4a40      	ldr	r2, [pc, #256]	; (80025fc <HAL_SPI_MspInit+0x3fc>)
 80024fa:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80024fc:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <HAL_SPI_MspInit+0x3f8>)
 80024fe:	2227      	movs	r2, #39	; 0x27
 8002500:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002502:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_SPI_MspInit+0x3f8>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002508:	4b3b      	ldr	r3, [pc, #236]	; (80025f8 <HAL_SPI_MspInit+0x3f8>)
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800250e:	4b3a      	ldr	r3, [pc, #232]	; (80025f8 <HAL_SPI_MspInit+0x3f8>)
 8002510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002514:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002516:	4b38      	ldr	r3, [pc, #224]	; (80025f8 <HAL_SPI_MspInit+0x3f8>)
 8002518:	2200      	movs	r2, #0
 800251a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800251c:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <HAL_SPI_MspInit+0x3f8>)
 800251e:	2200      	movs	r2, #0
 8002520:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002522:	4b35      	ldr	r3, [pc, #212]	; (80025f8 <HAL_SPI_MspInit+0x3f8>)
 8002524:	2200      	movs	r2, #0
 8002526:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002528:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <HAL_SPI_MspInit+0x3f8>)
 800252a:	2200      	movs	r2, #0
 800252c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800252e:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <HAL_SPI_MspInit+0x3f8>)
 8002530:	2200      	movs	r2, #0
 8002532:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002534:	4830      	ldr	r0, [pc, #192]	; (80025f8 <HAL_SPI_MspInit+0x3f8>)
 8002536:	f000 feb7 	bl	80032a8 <HAL_DMA_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_SPI_MspInit+0x344>
      Error_Handler();
 8002540:	f7ff f96e 	bl	8001820 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a2c      	ldr	r2, [pc, #176]	; (80025f8 <HAL_SPI_MspInit+0x3f8>)
 8002548:	67da      	str	r2, [r3, #124]	; 0x7c
 800254a:	4a2b      	ldr	r2, [pc, #172]	; (80025f8 <HAL_SPI_MspInit+0x3f8>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA2_Stream0;
 8002550:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <HAL_SPI_MspInit+0x400>)
 8002552:	4a2c      	ldr	r2, [pc, #176]	; (8002604 <HAL_SPI_MspInit+0x404>)
 8002554:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002556:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <HAL_SPI_MspInit+0x400>)
 8002558:	2228      	movs	r2, #40	; 0x28
 800255a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800255c:	4b28      	ldr	r3, [pc, #160]	; (8002600 <HAL_SPI_MspInit+0x400>)
 800255e:	2240      	movs	r2, #64	; 0x40
 8002560:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002562:	4b27      	ldr	r3, [pc, #156]	; (8002600 <HAL_SPI_MspInit+0x400>)
 8002564:	2200      	movs	r2, #0
 8002566:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002568:	4b25      	ldr	r3, [pc, #148]	; (8002600 <HAL_SPI_MspInit+0x400>)
 800256a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800256e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002570:	4b23      	ldr	r3, [pc, #140]	; (8002600 <HAL_SPI_MspInit+0x400>)
 8002572:	2200      	movs	r2, #0
 8002574:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002576:	4b22      	ldr	r3, [pc, #136]	; (8002600 <HAL_SPI_MspInit+0x400>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800257c:	4b20      	ldr	r3, [pc, #128]	; (8002600 <HAL_SPI_MspInit+0x400>)
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002582:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <HAL_SPI_MspInit+0x400>)
 8002584:	2200      	movs	r2, #0
 8002586:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002588:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_SPI_MspInit+0x400>)
 800258a:	2200      	movs	r2, #0
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800258e:	481c      	ldr	r0, [pc, #112]	; (8002600 <HAL_SPI_MspInit+0x400>)
 8002590:	f000 fe8a 	bl	80032a8 <HAL_DMA_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_SPI_MspInit+0x39e>
      Error_Handler();
 800259a:	f7ff f941 	bl	8001820 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a17      	ldr	r2, [pc, #92]	; (8002600 <HAL_SPI_MspInit+0x400>)
 80025a2:	679a      	str	r2, [r3, #120]	; 0x78
 80025a4:	4a16      	ldr	r2, [pc, #88]	; (8002600 <HAL_SPI_MspInit+0x400>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	2024      	movs	r0, #36	; 0x24
 80025b0:	f000 fe37 	bl	8003222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80025b4:	2024      	movs	r0, #36	; 0x24
 80025b6:	f000 fe4e 	bl	8003256 <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80025ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING;// | EXTI_IT | TRIGGER_FALLING;
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_SPI_MspInit+0x408>)
 80025c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025d4:	2305      	movs	r3, #5
 80025d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025da:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80025de:	4619      	mov	r1, r3
 80025e0:	4804      	ldr	r0, [pc, #16]	; (80025f4 <HAL_SPI_MspInit+0x3f4>)
 80025e2:	f003 fd4d 	bl	8006080 <HAL_GPIO_Init>
}
 80025e6:	e0d1      	b.n	800278c <HAL_SPI_MspInit+0x58c>
 80025e8:	40003800 	.word	0x40003800
 80025ec:	58024400 	.word	0x58024400
 80025f0:	58020800 	.word	0x58020800
 80025f4:	58020400 	.word	0x58020400
 80025f8:	240083a4 	.word	0x240083a4
 80025fc:	400200b8 	.word	0x400200b8
 8002600:	2400841c 	.word	0x2400841c
 8002604:	40020410 	.word	0x40020410
 8002608:	00210002 	.word	0x00210002
  else if(hspi->Instance==SPI4)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a60      	ldr	r2, [pc, #384]	; (8002794 <HAL_SPI_MspInit+0x594>)
 8002612:	4293      	cmp	r3, r2
 8002614:	f040 80ba 	bne.w	800278c <HAL_SPI_MspInit+0x58c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002628:	4618      	mov	r0, r3
 800262a:	f004 fef3 	bl	8007414 <HAL_RCCEx_PeriphCLKConfig>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_SPI_MspInit+0x438>
      Error_Handler();
 8002634:	f7ff f8f4 	bl	8001820 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002638:	4b57      	ldr	r3, [pc, #348]	; (8002798 <HAL_SPI_MspInit+0x598>)
 800263a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800263e:	4a56      	ldr	r2, [pc, #344]	; (8002798 <HAL_SPI_MspInit+0x598>)
 8002640:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002644:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002648:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_SPI_MspInit+0x598>)
 800264a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800264e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002656:	4b50      	ldr	r3, [pc, #320]	; (8002798 <HAL_SPI_MspInit+0x598>)
 8002658:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800265c:	4a4e      	ldr	r2, [pc, #312]	; (8002798 <HAL_SPI_MspInit+0x598>)
 800265e:	f043 0310 	orr.w	r3, r3, #16
 8002662:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002666:	4b4c      	ldr	r3, [pc, #304]	; (8002798 <HAL_SPI_MspInit+0x598>)
 8002668:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002674:	2364      	movs	r3, #100	; 0x64
 8002676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002686:	2300      	movs	r3, #0
 8002688:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800268c:	2305      	movs	r3, #5
 800268e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002692:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002696:	4619      	mov	r1, r3
 8002698:	4840      	ldr	r0, [pc, #256]	; (800279c <HAL_SPI_MspInit+0x59c>)
 800269a:	f003 fcf1 	bl	8006080 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA1_Stream2;
 800269e:	4b40      	ldr	r3, [pc, #256]	; (80027a0 <HAL_SPI_MspInit+0x5a0>)
 80026a0:	4a40      	ldr	r2, [pc, #256]	; (80027a4 <HAL_SPI_MspInit+0x5a4>)
 80026a2:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80026a4:	4b3e      	ldr	r3, [pc, #248]	; (80027a0 <HAL_SPI_MspInit+0x5a0>)
 80026a6:	2253      	movs	r2, #83	; 0x53
 80026a8:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026aa:	4b3d      	ldr	r3, [pc, #244]	; (80027a0 <HAL_SPI_MspInit+0x5a0>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b0:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <HAL_SPI_MspInit+0x5a0>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026b6:	4b3a      	ldr	r3, [pc, #232]	; (80027a0 <HAL_SPI_MspInit+0x5a0>)
 80026b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026bc:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026be:	4b38      	ldr	r3, [pc, #224]	; (80027a0 <HAL_SPI_MspInit+0x5a0>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026c4:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <HAL_SPI_MspInit+0x5a0>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80026ca:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <HAL_SPI_MspInit+0x5a0>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026d0:	4b33      	ldr	r3, [pc, #204]	; (80027a0 <HAL_SPI_MspInit+0x5a0>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026d6:	4b32      	ldr	r3, [pc, #200]	; (80027a0 <HAL_SPI_MspInit+0x5a0>)
 80026d8:	2200      	movs	r2, #0
 80026da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80026dc:	4830      	ldr	r0, [pc, #192]	; (80027a0 <HAL_SPI_MspInit+0x5a0>)
 80026de:	f000 fde3 	bl	80032a8 <HAL_DMA_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_SPI_MspInit+0x4ec>
      Error_Handler();
 80026e8:	f7ff f89a 	bl	8001820 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a2c      	ldr	r2, [pc, #176]	; (80027a0 <HAL_SPI_MspInit+0x5a0>)
 80026f0:	67da      	str	r2, [r3, #124]	; 0x7c
 80026f2:	4a2b      	ldr	r2, [pc, #172]	; (80027a0 <HAL_SPI_MspInit+0x5a0>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA1_Stream3;
 80026f8:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <HAL_SPI_MspInit+0x5a8>)
 80026fa:	4a2c      	ldr	r2, [pc, #176]	; (80027ac <HAL_SPI_MspInit+0x5ac>)
 80026fc:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80026fe:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <HAL_SPI_MspInit+0x5a8>)
 8002700:	2254      	movs	r2, #84	; 0x54
 8002702:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002704:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <HAL_SPI_MspInit+0x5a8>)
 8002706:	2240      	movs	r2, #64	; 0x40
 8002708:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800270a:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <HAL_SPI_MspInit+0x5a8>)
 800270c:	2200      	movs	r2, #0
 800270e:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002710:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <HAL_SPI_MspInit+0x5a8>)
 8002712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002716:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002718:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <HAL_SPI_MspInit+0x5a8>)
 800271a:	2200      	movs	r2, #0
 800271c:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <HAL_SPI_MspInit+0x5a8>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002724:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_SPI_MspInit+0x5a8>)
 8002726:	2200      	movs	r2, #0
 8002728:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800272a:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <HAL_SPI_MspInit+0x5a8>)
 800272c:	2200      	movs	r2, #0
 800272e:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002730:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_SPI_MspInit+0x5a8>)
 8002732:	2200      	movs	r2, #0
 8002734:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002736:	481c      	ldr	r0, [pc, #112]	; (80027a8 <HAL_SPI_MspInit+0x5a8>)
 8002738:	f000 fdb6 	bl	80032a8 <HAL_DMA_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_SPI_MspInit+0x546>
      Error_Handler();
 8002742:	f7ff f86d 	bl	8001820 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a17      	ldr	r2, [pc, #92]	; (80027a8 <HAL_SPI_MspInit+0x5a8>)
 800274a:	679a      	str	r2, [r3, #120]	; 0x78
 800274c:	4a16      	ldr	r2, [pc, #88]	; (80027a8 <HAL_SPI_MspInit+0x5a8>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2100      	movs	r1, #0
 8002756:	2054      	movs	r0, #84	; 0x54
 8002758:	f000 fd63 	bl	8003222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800275c:	2054      	movs	r0, #84	; 0x54
 800275e:	f000 fd7a 	bl	8003256 <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002762:	2320      	movs	r3, #32
 8002764:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING;// | EXTI_IT | TRIGGER_FALLING;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_SPI_MspInit+0x5b0>)
 800276a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800277a:	2305      	movs	r3, #5
 800277c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002780:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002784:	4619      	mov	r1, r3
 8002786:	4805      	ldr	r0, [pc, #20]	; (800279c <HAL_SPI_MspInit+0x59c>)
 8002788:	f003 fc7a 	bl	8006080 <HAL_GPIO_Init>
}
 800278c:	bf00      	nop
 800278e:	37f8      	adds	r7, #248	; 0xf8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40013400 	.word	0x40013400
 8002798:	58024400 	.word	0x58024400
 800279c:	58021000 	.word	0x58021000
 80027a0:	24008494 	.word	0x24008494
 80027a4:	40020040 	.word	0x40020040
 80027a8:	2400850c 	.word	0x2400850c
 80027ac:	40020058 	.word	0x40020058
 80027b0:	00210002 	.word	0x00210002

080027b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	; 0x30
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a33      	ldr	r2, [pc, #204]	; (80028a0 <HAL_TIM_Base_MspInit+0xec>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10f      	bne.n	80027f6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027d6:	4b33      	ldr	r3, [pc, #204]	; (80028a4 <HAL_TIM_Base_MspInit+0xf0>)
 80027d8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80027dc:	4a31      	ldr	r2, [pc, #196]	; (80028a4 <HAL_TIM_Base_MspInit+0xf0>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80027e6:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <HAL_TIM_Base_MspInit+0xf0>)
 80027e8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80027f4:	e050      	b.n	8002898 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fe:	d12f      	bne.n	8002860 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002800:	4b28      	ldr	r3, [pc, #160]	; (80028a4 <HAL_TIM_Base_MspInit+0xf0>)
 8002802:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002806:	4a27      	ldr	r2, [pc, #156]	; (80028a4 <HAL_TIM_Base_MspInit+0xf0>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002810:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_TIM_Base_MspInit+0xf0>)
 8002812:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <HAL_TIM_Base_MspInit+0xf0>)
 8002820:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002824:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <HAL_TIM_Base_MspInit+0xf0>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_TIM_Base_MspInit+0xf0>)
 8002830:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800283c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2302      	movs	r3, #2
 8002844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	2300      	movs	r3, #0
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800284e:	2301      	movs	r3, #1
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002852:	f107 031c 	add.w	r3, r7, #28
 8002856:	4619      	mov	r1, r3
 8002858:	4813      	ldr	r0, [pc, #76]	; (80028a8 <HAL_TIM_Base_MspInit+0xf4>)
 800285a:	f003 fc11 	bl	8006080 <HAL_GPIO_Init>
}
 800285e:	e01b      	b.n	8002898 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM16)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a11      	ldr	r2, [pc, #68]	; (80028ac <HAL_TIM_Base_MspInit+0xf8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d116      	bne.n	8002898 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <HAL_TIM_Base_MspInit+0xf0>)
 800286c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002870:	4a0c      	ldr	r2, [pc, #48]	; (80028a4 <HAL_TIM_Base_MspInit+0xf0>)
 8002872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002876:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_TIM_Base_MspInit+0xf0>)
 800287c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002888:	2200      	movs	r2, #0
 800288a:	2100      	movs	r1, #0
 800288c:	2075      	movs	r0, #117	; 0x75
 800288e:	f000 fcc8 	bl	8003222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002892:	2075      	movs	r0, #117	; 0x75
 8002894:	f000 fcdf 	bl	8003256 <HAL_NVIC_EnableIRQ>
}
 8002898:	bf00      	nop
 800289a:	3730      	adds	r7, #48	; 0x30
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40010000 	.word	0x40010000
 80028a4:	58024400 	.word	0x58024400
 80028a8:	58020000 	.word	0x58020000
 80028ac:	40014400 	.word	0x40014400

080028b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 030c 	add.w	r3, r7, #12
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a13      	ldr	r2, [pc, #76]	; (800291c <HAL_TIM_MspPostInit+0x6c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d11f      	bne.n	8002912 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d2:	4b13      	ldr	r3, [pc, #76]	; (8002920 <HAL_TIM_MspPostInit+0x70>)
 80028d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80028d8:	4a11      	ldr	r2, [pc, #68]	; (8002920 <HAL_TIM_MspPostInit+0x70>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80028e2:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <HAL_TIM_MspPostInit+0x70>)
 80028e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002902:	2301      	movs	r3, #1
 8002904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002906:	f107 030c 	add.w	r3, r7, #12
 800290a:	4619      	mov	r1, r3
 800290c:	4805      	ldr	r0, [pc, #20]	; (8002924 <HAL_TIM_MspPostInit+0x74>)
 800290e:	f003 fbb7 	bl	8006080 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002912:	bf00      	nop
 8002914:	3720      	adds	r7, #32
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40010000 	.word	0x40010000
 8002920:	58024400 	.word	0x58024400
 8002924:	58020000 	.word	0x58020000

08002928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b0b8      	sub	sp, #224	; 0xe0
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	22b8      	movs	r2, #184	; 0xb8
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f00f faf7 	bl	8011f3c <memset>
  if(huart->Instance==UART4)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a3f      	ldr	r2, [pc, #252]	; (8002a50 <HAL_UART_MspInit+0x128>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d176      	bne.n	8002a46 <HAL_UART_MspInit+0x11e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002958:	2302      	movs	r3, #2
 800295a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800295c:	2300      	movs	r3, #0
 800295e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002962:	f107 0314 	add.w	r3, r7, #20
 8002966:	4618      	mov	r0, r3
 8002968:	f004 fd54 	bl	8007414 <HAL_RCCEx_PeriphCLKConfig>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002972:	f7fe ff55 	bl	8001820 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002976:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <HAL_UART_MspInit+0x12c>)
 8002978:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800297c:	4a35      	ldr	r2, [pc, #212]	; (8002a54 <HAL_UART_MspInit+0x12c>)
 800297e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002982:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002986:	4b33      	ldr	r3, [pc, #204]	; (8002a54 <HAL_UART_MspInit+0x12c>)
 8002988:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800298c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002994:	4b2f      	ldr	r3, [pc, #188]	; (8002a54 <HAL_UART_MspInit+0x12c>)
 8002996:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800299a:	4a2e      	ldr	r2, [pc, #184]	; (8002a54 <HAL_UART_MspInit+0x12c>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80029a4:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <HAL_UART_MspInit+0x12c>)
 80029a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029b2:	2303      	movs	r3, #3
 80029b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029ca:	2308      	movs	r3, #8
 80029cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029d4:	4619      	mov	r1, r3
 80029d6:	4820      	ldr	r0, [pc, #128]	; (8002a58 <HAL_UART_MspInit+0x130>)
 80029d8:	f003 fb52 	bl	8006080 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80029dc:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <HAL_UART_MspInit+0x134>)
 80029de:	4a20      	ldr	r2, [pc, #128]	; (8002a60 <HAL_UART_MspInit+0x138>)
 80029e0:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_UART_MspInit+0x134>)
 80029e4:	2240      	movs	r2, #64	; 0x40
 80029e6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029e8:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <HAL_UART_MspInit+0x134>)
 80029ea:	2240      	movs	r2, #64	; 0x40
 80029ec:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ee:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_UART_MspInit+0x134>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029f4:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <HAL_UART_MspInit+0x134>)
 80029f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029fa:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <HAL_UART_MspInit+0x134>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a02:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <HAL_UART_MspInit+0x134>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_UART_MspInit+0x134>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a0e:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <HAL_UART_MspInit+0x134>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <HAL_UART_MspInit+0x134>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002a1a:	4810      	ldr	r0, [pc, #64]	; (8002a5c <HAL_UART_MspInit+0x134>)
 8002a1c:	f000 fc44 	bl	80032a8 <HAL_DMA_Init>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8002a26:	f7fe fefb 	bl	8001820 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a0b      	ldr	r2, [pc, #44]	; (8002a5c <HAL_UART_MspInit+0x134>)
 8002a2e:	679a      	str	r2, [r3, #120]	; 0x78
 8002a30:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <HAL_UART_MspInit+0x134>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002a36:	2200      	movs	r2, #0
 8002a38:	2100      	movs	r1, #0
 8002a3a:	2034      	movs	r0, #52	; 0x34
 8002a3c:	f000 fbf1 	bl	8003222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002a40:	2034      	movs	r0, #52	; 0x34
 8002a42:	f000 fc08 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002a46:	bf00      	nop
 8002a48:	37e0      	adds	r7, #224	; 0xe0
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40004c00 	.word	0x40004c00
 8002a54:	58024400 	.word	0x58024400
 8002a58:	58020000 	.word	0x58020000
 8002a5c:	240086f8 	.word	0x240086f8
 8002a60:	40020070 	.word	0x40020070

08002a64 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002a78:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <HAL_FMC_MspInit+0xe8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d161      	bne.n	8002b44 <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 8002a80:	4b32      	ldr	r3, [pc, #200]	; (8002b4c <HAL_FMC_MspInit+0xe8>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a86:	4b32      	ldr	r3, [pc, #200]	; (8002b50 <HAL_FMC_MspInit+0xec>)
 8002a88:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002a8c:	4a30      	ldr	r2, [pc, #192]	; (8002b50 <HAL_FMC_MspInit+0xec>)
 8002a8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a92:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8002a96:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <HAL_FMC_MspInit+0xec>)
 8002a98:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa0:	603b      	str	r3, [r7, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002aa4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002aa8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ab6:	230c      	movs	r3, #12
 8002ab8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	4619      	mov	r1, r3
 8002abe:	4825      	ldr	r0, [pc, #148]	; (8002b54 <HAL_FMC_MspInit+0xf0>)
 8002ac0:	f003 fade 	bl	8006080 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002ac4:	230d      	movs	r3, #13
 8002ac6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ad4:	230c      	movs	r3, #12
 8002ad6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	4619      	mov	r1, r3
 8002adc:	481e      	ldr	r0, [pc, #120]	; (8002b58 <HAL_FMC_MspInit+0xf4>)
 8002ade:	f003 facf 	bl	8006080 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002ae2:	f248 1337 	movw	r3, #33079	; 0x8137
 8002ae6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af0:	2303      	movs	r3, #3
 8002af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002af4:	230c      	movs	r3, #12
 8002af6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	4619      	mov	r1, r3
 8002afc:	4817      	ldr	r0, [pc, #92]	; (8002b5c <HAL_FMC_MspInit+0xf8>)
 8002afe:	f003 fabf 	bl	8006080 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002b02:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002b06:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b10:	2303      	movs	r3, #3
 8002b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b14:	230c      	movs	r3, #12
 8002b16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b18:	1d3b      	adds	r3, r7, #4
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4810      	ldr	r0, [pc, #64]	; (8002b60 <HAL_FMC_MspInit+0xfc>)
 8002b1e:	f003 faaf 	bl	8006080 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002b22:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002b26:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b30:	2303      	movs	r3, #3
 8002b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b34:	230c      	movs	r3, #12
 8002b36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4809      	ldr	r0, [pc, #36]	; (8002b64 <HAL_FMC_MspInit+0x100>)
 8002b3e:	f003 fa9f 	bl	8006080 <HAL_GPIO_Init>
 8002b42:	e000      	b.n	8002b46 <HAL_FMC_MspInit+0xe2>
    return;
 8002b44:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	240087d8 	.word	0x240087d8
 8002b50:	58024400 	.word	0x58024400
 8002b54:	58021400 	.word	0x58021400
 8002b58:	58020800 	.word	0x58020800
 8002b5c:	58021800 	.word	0x58021800
 8002b60:	58021000 	.word	0x58021000
 8002b64:	58020c00 	.word	0x58020c00

08002b68 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002b70:	f7ff ff78 	bl	8002a64 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <NMI_Handler+0x4>

08002b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b86:	e7fe      	b.n	8002b86 <HardFault_Handler+0x4>

08002b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <MemManage_Handler+0x4>

08002b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b92:	e7fe      	b.n	8002b92 <BusFault_Handler+0x4>

08002b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b98:	e7fe      	b.n	8002b98 <UsageFault_Handler+0x4>

08002b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bc8:	f000 f9e8 	bl	8002f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002bd4:	4802      	ldr	r0, [pc, #8]	; (8002be0 <DMA1_Stream0_IRQHandler+0x10>)
 8002bd6:	f001 fec5 	bl	8004964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	240082b4 	.word	0x240082b4

08002be4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002be8:	4802      	ldr	r0, [pc, #8]	; (8002bf4 <DMA1_Stream1_IRQHandler+0x10>)
 8002bea:	f001 febb 	bl	8004964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	2400832c 	.word	0x2400832c

08002bf8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8002bfc:	4802      	ldr	r0, [pc, #8]	; (8002c08 <DMA1_Stream2_IRQHandler+0x10>)
 8002bfe:	f001 feb1 	bl	8004964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	24008494 	.word	0x24008494

08002c0c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002c10:	4802      	ldr	r0, [pc, #8]	; (8002c1c <DMA1_Stream3_IRQHandler+0x10>)
 8002c12:	f001 fea7 	bl	8004964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2400850c 	.word	0x2400850c

08002c20 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002c24:	4802      	ldr	r0, [pc, #8]	; (8002c30 <DMA1_Stream4_IRQHandler+0x10>)
 8002c26:	f001 fe9d 	bl	8004964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	240086f8 	.word	0x240086f8

08002c34 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c38:	4802      	ldr	r0, [pc, #8]	; (8002c44 <SPI1_IRQHandler+0x10>)
 8002c3a:	f008 fe5f 	bl	800b8fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	2400811c 	.word	0x2400811c

08002c48 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <SPI2_IRQHandler+0x10>)
 8002c4e:	f008 fe55 	bl	800b8fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	240081a4 	.word	0x240081a4

08002c5c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002c60:	4802      	ldr	r0, [pc, #8]	; (8002c6c <DMA1_Stream7_IRQHandler+0x10>)
 8002c62:	f001 fe7f 	bl	8004964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	240083a4 	.word	0x240083a4

08002c70 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002c74:	4802      	ldr	r0, [pc, #8]	; (8002c80 <SDMMC1_IRQHandler+0x10>)
 8002c76:	f006 fee5 	bl	8009a44 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	240080a0 	.word	0x240080a0

08002c84 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <UART4_IRQHandler+0x10>)
 8002c8a:	f00b f82b 	bl	800dce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	24008668 	.word	0x24008668

08002c98 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <DMA2_Stream0_IRQHandler+0x10>)
 8002c9e:	f001 fe61 	bl	8004964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	2400841c 	.word	0x2400841c

08002cac <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <SPI4_IRQHandler+0x10>)
 8002cb2:	f008 fe23 	bl	800b8fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	2400822c 	.word	0x2400822c

08002cc0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002cc4:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <TIM16_IRQHandler+0x10>)
 8002cc6:	f009 fb31 	bl	800c32c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	2400861c 	.word	0x2400861c

08002cd4 <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI9_5_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002cd8:	2020      	movs	r0, #32
 8002cda:	f003 fbb4 	bl	8006446 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002cde:	2040      	movs	r0, #64	; 0x40
 8002ce0:	f003 fbb1 	bl	8006446 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002ce4:	2080      	movs	r0, #128	; 0x80
 8002ce6:	f003 fbae 	bl	8006446 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002cea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002cee:	f003 fbaa 	bl	8006446 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002cfa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002cfe:	f003 fba2 	bl	8006446 <HAL_GPIO_EXTI_IRQHandler>

}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d10:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <_sbrk+0x5c>)
 8002d12:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <_sbrk+0x60>)
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d1c:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <_sbrk+0x64>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <_sbrk+0x64>)
 8002d26:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <_sbrk+0x68>)
 8002d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <_sbrk+0x64>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d207      	bcs.n	8002d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d38:	f00f f8d6 	bl	8011ee8 <__errno>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	220c      	movs	r2, #12
 8002d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d42:	f04f 33ff 	mov.w	r3, #4294967295
 8002d46:	e009      	b.n	8002d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <_sbrk+0x64>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <_sbrk+0x64>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <_sbrk+0x64>)
 8002d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	24100000 	.word	0x24100000
 8002d68:	00000800 	.word	0x00000800
 8002d6c:	240087dc 	.word	0x240087dc
 8002d70:	24008a68 	.word	0x24008a68

08002d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d78:	4b32      	ldr	r3, [pc, #200]	; (8002e44 <SystemInit+0xd0>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	4a31      	ldr	r2, [pc, #196]	; (8002e44 <SystemInit+0xd0>)
 8002d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d88:	4b2f      	ldr	r3, [pc, #188]	; (8002e48 <SystemInit+0xd4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d807      	bhi.n	8002da4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d94:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <SystemInit+0xd4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f023 030f 	bic.w	r3, r3, #15
 8002d9c:	4a2a      	ldr	r2, [pc, #168]	; (8002e48 <SystemInit+0xd4>)
 8002d9e:	f043 0303 	orr.w	r3, r3, #3
 8002da2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002da4:	4b29      	ldr	r3, [pc, #164]	; (8002e4c <SystemInit+0xd8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a28      	ldr	r2, [pc, #160]	; (8002e4c <SystemInit+0xd8>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002db0:	4b26      	ldr	r3, [pc, #152]	; (8002e4c <SystemInit+0xd8>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002db6:	4b25      	ldr	r3, [pc, #148]	; (8002e4c <SystemInit+0xd8>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4924      	ldr	r1, [pc, #144]	; (8002e4c <SystemInit+0xd8>)
 8002dbc:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <SystemInit+0xdc>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002dc2:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <SystemInit+0xd4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d007      	beq.n	8002dde <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002dce:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <SystemInit+0xd4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 030f 	bic.w	r3, r3, #15
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	; (8002e48 <SystemInit+0xd4>)
 8002dd8:	f043 0303 	orr.w	r3, r3, #3
 8002ddc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002dde:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <SystemInit+0xd8>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <SystemInit+0xd8>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002dea:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <SystemInit+0xd8>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002df0:	4b16      	ldr	r3, [pc, #88]	; (8002e4c <SystemInit+0xd8>)
 8002df2:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <SystemInit+0xe0>)
 8002df4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <SystemInit+0xd8>)
 8002df8:	4a17      	ldr	r2, [pc, #92]	; (8002e58 <SystemInit+0xe4>)
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002dfc:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <SystemInit+0xd8>)
 8002dfe:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <SystemInit+0xe8>)
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e02:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <SystemInit+0xd8>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002e08:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <SystemInit+0xd8>)
 8002e0a:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <SystemInit+0xe8>)
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <SystemInit+0xd8>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <SystemInit+0xd8>)
 8002e16:	4a11      	ldr	r2, [pc, #68]	; (8002e5c <SystemInit+0xe8>)
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e1a:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <SystemInit+0xd8>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <SystemInit+0xd8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <SystemInit+0xd8>)
 8002e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e2c:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <SystemInit+0xd8>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e32:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <SystemInit+0xec>)
 8002e34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002e38:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e3a:	bf00      	nop
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000ed00 	.word	0xe000ed00
 8002e48:	52002000 	.word	0x52002000
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e54:	02020200 	.word	0x02020200
 8002e58:	01ff0000 	.word	0x01ff0000
 8002e5c:	01010280 	.word	0x01010280
 8002e60:	52004000 	.word	0x52004000

08002e64 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 8002e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e68:	f7ff ff84 	bl	8002d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e6c:	480c      	ldr	r0, [pc, #48]	; (8002ea0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e6e:	490d      	ldr	r1, [pc, #52]	; (8002ea4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e70:	4a0d      	ldr	r2, [pc, #52]	; (8002ea8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e74:	e002      	b.n	8002e7c <LoopCopyDataInit>

08002e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e7a:	3304      	adds	r3, #4

08002e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e80:	d3f9      	bcc.n	8002e76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e82:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e84:	4c0a      	ldr	r4, [pc, #40]	; (8002eb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e88:	e001      	b.n	8002e8e <LoopFillZerobss>

08002e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e8c:	3204      	adds	r2, #4

08002e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e90:	d3fb      	bcc.n	8002e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e92:	f00f f82f 	bl	8011ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e96:	f7fd fcf9 	bl	800088c <main>
  bx  lr
 8002e9a:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 8002e9c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002ea0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ea4:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8002ea8:	08012928 	.word	0x08012928
  ldr r2, =_sbss
 8002eac:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8002eb0:	24008a68 	.word	0x24008a68

08002eb4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eb4:	e7fe      	b.n	8002eb4 <ADC_IRQHandler>
	...

08002eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ebe:	2003      	movs	r0, #3
 8002ec0:	f000 f9a4 	bl	800320c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002ec4:	f004 f8d0 	bl	8007068 <HAL_RCC_GetSysClockFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <HAL_Init+0x68>)
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	4913      	ldr	r1, [pc, #76]	; (8002f24 <HAL_Init+0x6c>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_Init+0x68>)
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	4a0e      	ldr	r2, [pc, #56]	; (8002f24 <HAL_Init+0x6c>)
 8002eec:	5cd3      	ldrb	r3, [r2, r3]
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef8:	4a0b      	ldr	r2, [pc, #44]	; (8002f28 <HAL_Init+0x70>)
 8002efa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002efc:	4a0b      	ldr	r2, [pc, #44]	; (8002f2c <HAL_Init+0x74>)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f02:	200e      	movs	r0, #14
 8002f04:	f000 f814 	bl	8002f30 <HAL_InitTick>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e002      	b.n	8002f18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f12:	f7ff f8c5 	bl	80020a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	58024400 	.word	0x58024400
 8002f24:	08012890 	.word	0x08012890
 8002f28:	2400000c 	.word	0x2400000c
 8002f2c:	24000008 	.word	0x24000008

08002f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f38:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <HAL_InitTick+0x60>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e021      	b.n	8002f88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f44:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <HAL_InitTick+0x64>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_InitTick+0x60>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f997 	bl	800328e <HAL_SYSTICK_Config>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e00e      	b.n	8002f88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b0f      	cmp	r3, #15
 8002f6e:	d80a      	bhi.n	8002f86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f70:	2200      	movs	r2, #0
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	f04f 30ff 	mov.w	r0, #4294967295
 8002f78:	f000 f953 	bl	8003222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f7c:	4a06      	ldr	r2, [pc, #24]	; (8002f98 <HAL_InitTick+0x68>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e000      	b.n	8002f88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	24000014 	.word	0x24000014
 8002f94:	24000008 	.word	0x24000008
 8002f98:	24000010 	.word	0x24000010

08002f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_IncTick+0x20>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_IncTick+0x24>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <HAL_IncTick+0x24>)
 8002fae:	6013      	str	r3, [r2, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	24000014 	.word	0x24000014
 8002fc0:	240087e0 	.word	0x240087e0

08002fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <HAL_GetTick+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	240087e0 	.word	0x240087e0

08002fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe4:	f7ff ffee 	bl	8002fc4 <HAL_GetTick>
 8002fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d005      	beq.n	8003002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <HAL_Delay+0x44>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003002:	bf00      	nop
 8003004:	f7ff ffde 	bl	8002fc4 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	429a      	cmp	r2, r3
 8003012:	d8f7      	bhi.n	8003004 <HAL_Delay+0x28>
  {
  }
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	24000014 	.word	0x24000014

08003024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <__NVIC_SetPriorityGrouping+0x40>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003040:	4013      	ands	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <__NVIC_SetPriorityGrouping+0x44>)
 800304e:	4313      	orrs	r3, r2
 8003050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003052:	4a04      	ldr	r2, [pc, #16]	; (8003064 <__NVIC_SetPriorityGrouping+0x40>)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	60d3      	str	r3, [r2, #12]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00
 8003068:	05fa0000 	.word	0x05fa0000

0800306c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <__NVIC_GetPriorityGrouping+0x18>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	f003 0307 	and.w	r3, r3, #7
}
 800307a:	4618      	mov	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	e000ed00 	.word	0xe000ed00

08003088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003096:	2b00      	cmp	r3, #0
 8003098:	db0b      	blt.n	80030b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	f003 021f 	and.w	r2, r3, #31
 80030a0:	4907      	ldr	r1, [pc, #28]	; (80030c0 <__NVIC_EnableIRQ+0x38>)
 80030a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	2001      	movs	r0, #1
 80030aa:	fa00 f202 	lsl.w	r2, r0, r2
 80030ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000e100 	.word	0xe000e100

080030c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	db12      	blt.n	80030fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	f003 021f 	and.w	r2, r3, #31
 80030dc:	490a      	ldr	r1, [pc, #40]	; (8003108 <__NVIC_DisableIRQ+0x44>)
 80030de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	2001      	movs	r0, #1
 80030e6:	fa00 f202 	lsl.w	r2, r0, r2
 80030ea:	3320      	adds	r3, #32
 80030ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80030f0:	f3bf 8f4f 	dsb	sy
}
 80030f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030f6:	f3bf 8f6f 	isb	sy
}
 80030fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000e100 	.word	0xe000e100

0800310c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	6039      	str	r1, [r7, #0]
 8003116:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003118:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800311c:	2b00      	cmp	r3, #0
 800311e:	db0a      	blt.n	8003136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	b2da      	uxtb	r2, r3
 8003124:	490c      	ldr	r1, [pc, #48]	; (8003158 <__NVIC_SetPriority+0x4c>)
 8003126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800312a:	0112      	lsls	r2, r2, #4
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	440b      	add	r3, r1
 8003130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003134:	e00a      	b.n	800314c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	b2da      	uxtb	r2, r3
 800313a:	4908      	ldr	r1, [pc, #32]	; (800315c <__NVIC_SetPriority+0x50>)
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	3b04      	subs	r3, #4
 8003144:	0112      	lsls	r2, r2, #4
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	440b      	add	r3, r1
 800314a:	761a      	strb	r2, [r3, #24]
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000e100 	.word	0xe000e100
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	; 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f1c3 0307 	rsb	r3, r3, #7
 800317a:	2b04      	cmp	r3, #4
 800317c:	bf28      	it	cs
 800317e:	2304      	movcs	r3, #4
 8003180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	3304      	adds	r3, #4
 8003186:	2b06      	cmp	r3, #6
 8003188:	d902      	bls.n	8003190 <NVIC_EncodePriority+0x30>
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3b03      	subs	r3, #3
 800318e:	e000      	b.n	8003192 <NVIC_EncodePriority+0x32>
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003194:	f04f 32ff 	mov.w	r2, #4294967295
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43da      	mvns	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	401a      	ands	r2, r3
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031a8:	f04f 31ff 	mov.w	r1, #4294967295
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	43d9      	mvns	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b8:	4313      	orrs	r3, r2
         );
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3724      	adds	r7, #36	; 0x24
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d8:	d301      	bcc.n	80031de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031da:	2301      	movs	r3, #1
 80031dc:	e00f      	b.n	80031fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031de:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <SysTick_Config+0x40>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031e6:	210f      	movs	r1, #15
 80031e8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ec:	f7ff ff8e 	bl	800310c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <SysTick_Config+0x40>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031f6:	4b04      	ldr	r3, [pc, #16]	; (8003208 <SysTick_Config+0x40>)
 80031f8:	2207      	movs	r2, #7
 80031fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	e000e010 	.word	0xe000e010

0800320c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff ff05 	bl	8003024 <__NVIC_SetPriorityGrouping>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b086      	sub	sp, #24
 8003226:	af00      	add	r7, sp, #0
 8003228:	4603      	mov	r3, r0
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
 800322e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003230:	f7ff ff1c 	bl	800306c <__NVIC_GetPriorityGrouping>
 8003234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	6978      	ldr	r0, [r7, #20]
 800323c:	f7ff ff90 	bl	8003160 <NVIC_EncodePriority>
 8003240:	4602      	mov	r2, r0
 8003242:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff5f 	bl	800310c <__NVIC_SetPriority>
}
 800324e:	bf00      	nop
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ff0f 	bl	8003088 <__NVIC_EnableIRQ>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	4603      	mov	r3, r0
 800327a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800327c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff1f 	bl	80030c4 <__NVIC_DisableIRQ>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ff96 	bl	80031c8 <SysTick_Config>
 800329c:	4603      	mov	r3, r0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80032b0:	f7ff fe88 	bl	8002fc4 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e37f      	b.n	80039c0 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a66      	ldr	r2, [pc, #408]	; (8003460 <HAL_DMA_Init+0x1b8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d04a      	beq.n	8003360 <HAL_DMA_Init+0xb8>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a65      	ldr	r2, [pc, #404]	; (8003464 <HAL_DMA_Init+0x1bc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d045      	beq.n	8003360 <HAL_DMA_Init+0xb8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a63      	ldr	r2, [pc, #396]	; (8003468 <HAL_DMA_Init+0x1c0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d040      	beq.n	8003360 <HAL_DMA_Init+0xb8>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a62      	ldr	r2, [pc, #392]	; (800346c <HAL_DMA_Init+0x1c4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d03b      	beq.n	8003360 <HAL_DMA_Init+0xb8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a60      	ldr	r2, [pc, #384]	; (8003470 <HAL_DMA_Init+0x1c8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d036      	beq.n	8003360 <HAL_DMA_Init+0xb8>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a5f      	ldr	r2, [pc, #380]	; (8003474 <HAL_DMA_Init+0x1cc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d031      	beq.n	8003360 <HAL_DMA_Init+0xb8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a5d      	ldr	r2, [pc, #372]	; (8003478 <HAL_DMA_Init+0x1d0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d02c      	beq.n	8003360 <HAL_DMA_Init+0xb8>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a5c      	ldr	r2, [pc, #368]	; (800347c <HAL_DMA_Init+0x1d4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d027      	beq.n	8003360 <HAL_DMA_Init+0xb8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a5a      	ldr	r2, [pc, #360]	; (8003480 <HAL_DMA_Init+0x1d8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d022      	beq.n	8003360 <HAL_DMA_Init+0xb8>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a59      	ldr	r2, [pc, #356]	; (8003484 <HAL_DMA_Init+0x1dc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d01d      	beq.n	8003360 <HAL_DMA_Init+0xb8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a57      	ldr	r2, [pc, #348]	; (8003488 <HAL_DMA_Init+0x1e0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d018      	beq.n	8003360 <HAL_DMA_Init+0xb8>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a56      	ldr	r2, [pc, #344]	; (800348c <HAL_DMA_Init+0x1e4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d013      	beq.n	8003360 <HAL_DMA_Init+0xb8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a54      	ldr	r2, [pc, #336]	; (8003490 <HAL_DMA_Init+0x1e8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00e      	beq.n	8003360 <HAL_DMA_Init+0xb8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a53      	ldr	r2, [pc, #332]	; (8003494 <HAL_DMA_Init+0x1ec>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d009      	beq.n	8003360 <HAL_DMA_Init+0xb8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a51      	ldr	r2, [pc, #324]	; (8003498 <HAL_DMA_Init+0x1f0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d004      	beq.n	8003360 <HAL_DMA_Init+0xb8>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a50      	ldr	r2, [pc, #320]	; (800349c <HAL_DMA_Init+0x1f4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d101      	bne.n	8003364 <HAL_DMA_Init+0xbc>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <HAL_DMA_Init+0xbe>
 8003364:	2300      	movs	r3, #0
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 813c 	beq.w	80035e4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a37      	ldr	r2, [pc, #220]	; (8003460 <HAL_DMA_Init+0x1b8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d04a      	beq.n	800341c <HAL_DMA_Init+0x174>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a36      	ldr	r2, [pc, #216]	; (8003464 <HAL_DMA_Init+0x1bc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d045      	beq.n	800341c <HAL_DMA_Init+0x174>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a34      	ldr	r2, [pc, #208]	; (8003468 <HAL_DMA_Init+0x1c0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d040      	beq.n	800341c <HAL_DMA_Init+0x174>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a33      	ldr	r2, [pc, #204]	; (800346c <HAL_DMA_Init+0x1c4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d03b      	beq.n	800341c <HAL_DMA_Init+0x174>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a31      	ldr	r2, [pc, #196]	; (8003470 <HAL_DMA_Init+0x1c8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d036      	beq.n	800341c <HAL_DMA_Init+0x174>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a30      	ldr	r2, [pc, #192]	; (8003474 <HAL_DMA_Init+0x1cc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d031      	beq.n	800341c <HAL_DMA_Init+0x174>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a2e      	ldr	r2, [pc, #184]	; (8003478 <HAL_DMA_Init+0x1d0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d02c      	beq.n	800341c <HAL_DMA_Init+0x174>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a2d      	ldr	r2, [pc, #180]	; (800347c <HAL_DMA_Init+0x1d4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d027      	beq.n	800341c <HAL_DMA_Init+0x174>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a2b      	ldr	r2, [pc, #172]	; (8003480 <HAL_DMA_Init+0x1d8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d022      	beq.n	800341c <HAL_DMA_Init+0x174>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a2a      	ldr	r2, [pc, #168]	; (8003484 <HAL_DMA_Init+0x1dc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d01d      	beq.n	800341c <HAL_DMA_Init+0x174>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a28      	ldr	r2, [pc, #160]	; (8003488 <HAL_DMA_Init+0x1e0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d018      	beq.n	800341c <HAL_DMA_Init+0x174>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a27      	ldr	r2, [pc, #156]	; (800348c <HAL_DMA_Init+0x1e4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d013      	beq.n	800341c <HAL_DMA_Init+0x174>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a25      	ldr	r2, [pc, #148]	; (8003490 <HAL_DMA_Init+0x1e8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00e      	beq.n	800341c <HAL_DMA_Init+0x174>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a24      	ldr	r2, [pc, #144]	; (8003494 <HAL_DMA_Init+0x1ec>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d009      	beq.n	800341c <HAL_DMA_Init+0x174>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a22      	ldr	r2, [pc, #136]	; (8003498 <HAL_DMA_Init+0x1f0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d004      	beq.n	800341c <HAL_DMA_Init+0x174>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a21      	ldr	r2, [pc, #132]	; (800349c <HAL_DMA_Init+0x1f4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d108      	bne.n	800342e <HAL_DMA_Init+0x186>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e007      	b.n	800343e <HAL_DMA_Init+0x196>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0201 	bic.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800343e:	e02f      	b.n	80034a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003440:	f7ff fdc0 	bl	8002fc4 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b05      	cmp	r3, #5
 800344c:	d928      	bls.n	80034a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2220      	movs	r2, #32
 8003452:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2203      	movs	r2, #3
 8003458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e2af      	b.n	80039c0 <HAL_DMA_Init+0x718>
 8003460:	40020010 	.word	0x40020010
 8003464:	40020028 	.word	0x40020028
 8003468:	40020040 	.word	0x40020040
 800346c:	40020058 	.word	0x40020058
 8003470:	40020070 	.word	0x40020070
 8003474:	40020088 	.word	0x40020088
 8003478:	400200a0 	.word	0x400200a0
 800347c:	400200b8 	.word	0x400200b8
 8003480:	40020410 	.word	0x40020410
 8003484:	40020428 	.word	0x40020428
 8003488:	40020440 	.word	0x40020440
 800348c:	40020458 	.word	0x40020458
 8003490:	40020470 	.word	0x40020470
 8003494:	40020488 	.word	0x40020488
 8003498:	400204a0 	.word	0x400204a0
 800349c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1c8      	bne.n	8003440 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4b73      	ldr	r3, [pc, #460]	; (8003688 <HAL_DMA_Init+0x3e0>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80034c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d107      	bne.n	8003504 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	4313      	orrs	r3, r2
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b28      	cmp	r3, #40	; 0x28
 800350a:	d903      	bls.n	8003514 <HAL_DMA_Init+0x26c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b2e      	cmp	r3, #46	; 0x2e
 8003512:	d91f      	bls.n	8003554 <HAL_DMA_Init+0x2ac>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b3e      	cmp	r3, #62	; 0x3e
 800351a:	d903      	bls.n	8003524 <HAL_DMA_Init+0x27c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b42      	cmp	r3, #66	; 0x42
 8003522:	d917      	bls.n	8003554 <HAL_DMA_Init+0x2ac>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b46      	cmp	r3, #70	; 0x46
 800352a:	d903      	bls.n	8003534 <HAL_DMA_Init+0x28c>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b48      	cmp	r3, #72	; 0x48
 8003532:	d90f      	bls.n	8003554 <HAL_DMA_Init+0x2ac>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b4e      	cmp	r3, #78	; 0x4e
 800353a:	d903      	bls.n	8003544 <HAL_DMA_Init+0x29c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b52      	cmp	r3, #82	; 0x52
 8003542:	d907      	bls.n	8003554 <HAL_DMA_Init+0x2ac>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b73      	cmp	r3, #115	; 0x73
 800354a:	d905      	bls.n	8003558 <HAL_DMA_Init+0x2b0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b77      	cmp	r3, #119	; 0x77
 8003552:	d801      	bhi.n	8003558 <HAL_DMA_Init+0x2b0>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <HAL_DMA_Init+0x2b2>
 8003558:	2300      	movs	r3, #0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003564:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f023 0307 	bic.w	r3, r3, #7
 800357c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	2b04      	cmp	r3, #4
 800358e:	d117      	bne.n	80035c0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00e      	beq.n	80035c0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f002 fbe2 	bl	8005d6c <DMA_CheckFifoParam>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2240      	movs	r2, #64	; 0x40
 80035b2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e1ff      	b.n	80039c0 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f002 fb1d 	bl	8005c08 <DMA_CalcBaseAndBitshift>
 80035ce:	4603      	mov	r3, r0
 80035d0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	223f      	movs	r2, #63	; 0x3f
 80035dc:	409a      	lsls	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	609a      	str	r2, [r3, #8]
 80035e2:	e0fe      	b.n	80037e2 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a28      	ldr	r2, [pc, #160]	; (800368c <HAL_DMA_Init+0x3e4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d04a      	beq.n	8003684 <HAL_DMA_Init+0x3dc>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a27      	ldr	r2, [pc, #156]	; (8003690 <HAL_DMA_Init+0x3e8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d045      	beq.n	8003684 <HAL_DMA_Init+0x3dc>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a25      	ldr	r2, [pc, #148]	; (8003694 <HAL_DMA_Init+0x3ec>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d040      	beq.n	8003684 <HAL_DMA_Init+0x3dc>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a24      	ldr	r2, [pc, #144]	; (8003698 <HAL_DMA_Init+0x3f0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d03b      	beq.n	8003684 <HAL_DMA_Init+0x3dc>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a22      	ldr	r2, [pc, #136]	; (800369c <HAL_DMA_Init+0x3f4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d036      	beq.n	8003684 <HAL_DMA_Init+0x3dc>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a21      	ldr	r2, [pc, #132]	; (80036a0 <HAL_DMA_Init+0x3f8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d031      	beq.n	8003684 <HAL_DMA_Init+0x3dc>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1f      	ldr	r2, [pc, #124]	; (80036a4 <HAL_DMA_Init+0x3fc>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d02c      	beq.n	8003684 <HAL_DMA_Init+0x3dc>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1e      	ldr	r2, [pc, #120]	; (80036a8 <HAL_DMA_Init+0x400>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d027      	beq.n	8003684 <HAL_DMA_Init+0x3dc>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <HAL_DMA_Init+0x404>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d022      	beq.n	8003684 <HAL_DMA_Init+0x3dc>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a1b      	ldr	r2, [pc, #108]	; (80036b0 <HAL_DMA_Init+0x408>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d01d      	beq.n	8003684 <HAL_DMA_Init+0x3dc>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <HAL_DMA_Init+0x40c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d018      	beq.n	8003684 <HAL_DMA_Init+0x3dc>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <HAL_DMA_Init+0x410>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d013      	beq.n	8003684 <HAL_DMA_Init+0x3dc>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a16      	ldr	r2, [pc, #88]	; (80036bc <HAL_DMA_Init+0x414>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00e      	beq.n	8003684 <HAL_DMA_Init+0x3dc>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a15      	ldr	r2, [pc, #84]	; (80036c0 <HAL_DMA_Init+0x418>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d009      	beq.n	8003684 <HAL_DMA_Init+0x3dc>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a13      	ldr	r2, [pc, #76]	; (80036c4 <HAL_DMA_Init+0x41c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_DMA_Init+0x3dc>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <HAL_DMA_Init+0x420>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d123      	bne.n	80036cc <HAL_DMA_Init+0x424>
 8003684:	2301      	movs	r3, #1
 8003686:	e022      	b.n	80036ce <HAL_DMA_Init+0x426>
 8003688:	fe10803f 	.word	0xfe10803f
 800368c:	48022c08 	.word	0x48022c08
 8003690:	48022c1c 	.word	0x48022c1c
 8003694:	48022c30 	.word	0x48022c30
 8003698:	48022c44 	.word	0x48022c44
 800369c:	48022c58 	.word	0x48022c58
 80036a0:	48022c6c 	.word	0x48022c6c
 80036a4:	48022c80 	.word	0x48022c80
 80036a8:	48022c94 	.word	0x48022c94
 80036ac:	58025408 	.word	0x58025408
 80036b0:	5802541c 	.word	0x5802541c
 80036b4:	58025430 	.word	0x58025430
 80036b8:	58025444 	.word	0x58025444
 80036bc:	58025458 	.word	0x58025458
 80036c0:	5802546c 	.word	0x5802546c
 80036c4:	58025480 	.word	0x58025480
 80036c8:	58025494 	.word	0x58025494
 80036cc:	2300      	movs	r3, #0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d07e      	beq.n	80037d0 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a80      	ldr	r2, [pc, #512]	; (80038d8 <HAL_DMA_Init+0x630>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d021      	beq.n	8003720 <HAL_DMA_Init+0x478>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a7e      	ldr	r2, [pc, #504]	; (80038dc <HAL_DMA_Init+0x634>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01c      	beq.n	8003720 <HAL_DMA_Init+0x478>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a7d      	ldr	r2, [pc, #500]	; (80038e0 <HAL_DMA_Init+0x638>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d017      	beq.n	8003720 <HAL_DMA_Init+0x478>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a7b      	ldr	r2, [pc, #492]	; (80038e4 <HAL_DMA_Init+0x63c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d012      	beq.n	8003720 <HAL_DMA_Init+0x478>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a7a      	ldr	r2, [pc, #488]	; (80038e8 <HAL_DMA_Init+0x640>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00d      	beq.n	8003720 <HAL_DMA_Init+0x478>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a78      	ldr	r2, [pc, #480]	; (80038ec <HAL_DMA_Init+0x644>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d008      	beq.n	8003720 <HAL_DMA_Init+0x478>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a77      	ldr	r2, [pc, #476]	; (80038f0 <HAL_DMA_Init+0x648>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d003      	beq.n	8003720 <HAL_DMA_Init+0x478>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a75      	ldr	r2, [pc, #468]	; (80038f4 <HAL_DMA_Init+0x64c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4b6e      	ldr	r3, [pc, #440]	; (80038f8 <HAL_DMA_Init+0x650>)
 800373e:	4013      	ands	r3, r2
 8003740:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b40      	cmp	r3, #64	; 0x40
 8003748:	d008      	beq.n	800375c <HAL_DMA_Init+0x4b4>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b80      	cmp	r3, #128	; 0x80
 8003750:	d102      	bne.n	8003758 <HAL_DMA_Init+0x4b0>
 8003752:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003756:	e002      	b.n	800375e <HAL_DMA_Init+0x4b6>
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <HAL_DMA_Init+0x4b6>
 800375c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68d2      	ldr	r2, [r2, #12]
 8003762:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003764:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800376c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003774:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800377c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003784:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800378c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b56      	ldr	r3, [pc, #344]	; (80038fc <HAL_DMA_Init+0x654>)
 80037a4:	4413      	add	r3, r2
 80037a6:	4a56      	ldr	r2, [pc, #344]	; (8003900 <HAL_DMA_Init+0x658>)
 80037a8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	009a      	lsls	r2, r3, #2
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f002 fa27 	bl	8005c08 <DMA_CalcBaseAndBitshift>
 80037ba:	4603      	mov	r3, r0
 80037bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	2201      	movs	r2, #1
 80037c8:	409a      	lsls	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	e008      	b.n	80037e2 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2240      	movs	r2, #64	; 0x40
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2203      	movs	r2, #3
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e0ee      	b.n	80039c0 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a47      	ldr	r2, [pc, #284]	; (8003904 <HAL_DMA_Init+0x65c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d072      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a45      	ldr	r2, [pc, #276]	; (8003908 <HAL_DMA_Init+0x660>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d06d      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a44      	ldr	r2, [pc, #272]	; (800390c <HAL_DMA_Init+0x664>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d068      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a42      	ldr	r2, [pc, #264]	; (8003910 <HAL_DMA_Init+0x668>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d063      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a41      	ldr	r2, [pc, #260]	; (8003914 <HAL_DMA_Init+0x66c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d05e      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a3f      	ldr	r2, [pc, #252]	; (8003918 <HAL_DMA_Init+0x670>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d059      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a3e      	ldr	r2, [pc, #248]	; (800391c <HAL_DMA_Init+0x674>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d054      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a3c      	ldr	r2, [pc, #240]	; (8003920 <HAL_DMA_Init+0x678>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d04f      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a3b      	ldr	r2, [pc, #236]	; (8003924 <HAL_DMA_Init+0x67c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d04a      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a39      	ldr	r2, [pc, #228]	; (8003928 <HAL_DMA_Init+0x680>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d045      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a38      	ldr	r2, [pc, #224]	; (800392c <HAL_DMA_Init+0x684>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d040      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a36      	ldr	r2, [pc, #216]	; (8003930 <HAL_DMA_Init+0x688>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d03b      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a35      	ldr	r2, [pc, #212]	; (8003934 <HAL_DMA_Init+0x68c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d036      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a33      	ldr	r2, [pc, #204]	; (8003938 <HAL_DMA_Init+0x690>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d031      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a32      	ldr	r2, [pc, #200]	; (800393c <HAL_DMA_Init+0x694>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d02c      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a30      	ldr	r2, [pc, #192]	; (8003940 <HAL_DMA_Init+0x698>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d027      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <HAL_DMA_Init+0x630>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d022      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a12      	ldr	r2, [pc, #72]	; (80038dc <HAL_DMA_Init+0x634>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d01d      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a11      	ldr	r2, [pc, #68]	; (80038e0 <HAL_DMA_Init+0x638>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d018      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a0f      	ldr	r2, [pc, #60]	; (80038e4 <HAL_DMA_Init+0x63c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d013      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a0e      	ldr	r2, [pc, #56]	; (80038e8 <HAL_DMA_Init+0x640>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00e      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0c      	ldr	r2, [pc, #48]	; (80038ec <HAL_DMA_Init+0x644>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d009      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a0b      	ldr	r2, [pc, #44]	; (80038f0 <HAL_DMA_Init+0x648>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d004      	beq.n	80038d2 <HAL_DMA_Init+0x62a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <HAL_DMA_Init+0x64c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d138      	bne.n	8003944 <HAL_DMA_Init+0x69c>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e037      	b.n	8003946 <HAL_DMA_Init+0x69e>
 80038d6:	bf00      	nop
 80038d8:	58025408 	.word	0x58025408
 80038dc:	5802541c 	.word	0x5802541c
 80038e0:	58025430 	.word	0x58025430
 80038e4:	58025444 	.word	0x58025444
 80038e8:	58025458 	.word	0x58025458
 80038ec:	5802546c 	.word	0x5802546c
 80038f0:	58025480 	.word	0x58025480
 80038f4:	58025494 	.word	0x58025494
 80038f8:	fffe000f 	.word	0xfffe000f
 80038fc:	a7fdabf8 	.word	0xa7fdabf8
 8003900:	cccccccd 	.word	0xcccccccd
 8003904:	40020010 	.word	0x40020010
 8003908:	40020028 	.word	0x40020028
 800390c:	40020040 	.word	0x40020040
 8003910:	40020058 	.word	0x40020058
 8003914:	40020070 	.word	0x40020070
 8003918:	40020088 	.word	0x40020088
 800391c:	400200a0 	.word	0x400200a0
 8003920:	400200b8 	.word	0x400200b8
 8003924:	40020410 	.word	0x40020410
 8003928:	40020428 	.word	0x40020428
 800392c:	40020440 	.word	0x40020440
 8003930:	40020458 	.word	0x40020458
 8003934:	40020470 	.word	0x40020470
 8003938:	40020488 	.word	0x40020488
 800393c:	400204a0 	.word	0x400204a0
 8003940:	400204b8 	.word	0x400204b8
 8003944:	2300      	movs	r3, #0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d032      	beq.n	80039b0 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f002 fa8a 	bl	8005e64 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b80      	cmp	r3, #128	; 0x80
 8003956:	d102      	bne.n	800395e <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003972:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d010      	beq.n	800399e <HAL_DMA_Init+0x6f6>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d80c      	bhi.n	800399e <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f002 fb07 	bl	8005f98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800399a:	605a      	str	r2, [r3, #4]
 800399c:	e008      	b.n	80039b0 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e226      	b.n	8003e32 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_DMA_Start_IT+0x2a>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e21f      	b.n	8003e32 <HAL_DMA_Start_IT+0x46a>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	f040 820a 	bne.w	8003e1c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a68      	ldr	r2, [pc, #416]	; (8003bbc <HAL_DMA_Start_IT+0x1f4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d04a      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a66      	ldr	r2, [pc, #408]	; (8003bc0 <HAL_DMA_Start_IT+0x1f8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d045      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a65      	ldr	r2, [pc, #404]	; (8003bc4 <HAL_DMA_Start_IT+0x1fc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d040      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a63      	ldr	r2, [pc, #396]	; (8003bc8 <HAL_DMA_Start_IT+0x200>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d03b      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a62      	ldr	r2, [pc, #392]	; (8003bcc <HAL_DMA_Start_IT+0x204>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d036      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a60      	ldr	r2, [pc, #384]	; (8003bd0 <HAL_DMA_Start_IT+0x208>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d031      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a5f      	ldr	r2, [pc, #380]	; (8003bd4 <HAL_DMA_Start_IT+0x20c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d02c      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a5d      	ldr	r2, [pc, #372]	; (8003bd8 <HAL_DMA_Start_IT+0x210>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d027      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a5c      	ldr	r2, [pc, #368]	; (8003bdc <HAL_DMA_Start_IT+0x214>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d022      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a5a      	ldr	r2, [pc, #360]	; (8003be0 <HAL_DMA_Start_IT+0x218>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01d      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a59      	ldr	r2, [pc, #356]	; (8003be4 <HAL_DMA_Start_IT+0x21c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d018      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a57      	ldr	r2, [pc, #348]	; (8003be8 <HAL_DMA_Start_IT+0x220>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a56      	ldr	r2, [pc, #344]	; (8003bec <HAL_DMA_Start_IT+0x224>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00e      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a54      	ldr	r2, [pc, #336]	; (8003bf0 <HAL_DMA_Start_IT+0x228>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d009      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a53      	ldr	r2, [pc, #332]	; (8003bf4 <HAL_DMA_Start_IT+0x22c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a51      	ldr	r2, [pc, #324]	; (8003bf8 <HAL_DMA_Start_IT+0x230>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d108      	bne.n	8003ac8 <HAL_DMA_Start_IT+0x100>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0201 	bic.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e007      	b.n	8003ad8 <HAL_DMA_Start_IT+0x110>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f001 feae 	bl	8005840 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a34      	ldr	r2, [pc, #208]	; (8003bbc <HAL_DMA_Start_IT+0x1f4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d04a      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a33      	ldr	r2, [pc, #204]	; (8003bc0 <HAL_DMA_Start_IT+0x1f8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d045      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a31      	ldr	r2, [pc, #196]	; (8003bc4 <HAL_DMA_Start_IT+0x1fc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d040      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a30      	ldr	r2, [pc, #192]	; (8003bc8 <HAL_DMA_Start_IT+0x200>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d03b      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a2e      	ldr	r2, [pc, #184]	; (8003bcc <HAL_DMA_Start_IT+0x204>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d036      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2d      	ldr	r2, [pc, #180]	; (8003bd0 <HAL_DMA_Start_IT+0x208>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d031      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2b      	ldr	r2, [pc, #172]	; (8003bd4 <HAL_DMA_Start_IT+0x20c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d02c      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <HAL_DMA_Start_IT+0x210>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d027      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a28      	ldr	r2, [pc, #160]	; (8003bdc <HAL_DMA_Start_IT+0x214>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d022      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a27      	ldr	r2, [pc, #156]	; (8003be0 <HAL_DMA_Start_IT+0x218>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d01d      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a25      	ldr	r2, [pc, #148]	; (8003be4 <HAL_DMA_Start_IT+0x21c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d018      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a24      	ldr	r2, [pc, #144]	; (8003be8 <HAL_DMA_Start_IT+0x220>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d013      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a22      	ldr	r2, [pc, #136]	; (8003bec <HAL_DMA_Start_IT+0x224>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00e      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a21      	ldr	r2, [pc, #132]	; (8003bf0 <HAL_DMA_Start_IT+0x228>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d009      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <HAL_DMA_Start_IT+0x22c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d004      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1e      	ldr	r2, [pc, #120]	; (8003bf8 <HAL_DMA_Start_IT+0x230>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d101      	bne.n	8003b88 <HAL_DMA_Start_IT+0x1c0>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <HAL_DMA_Start_IT+0x1c2>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d036      	beq.n	8003bfc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f023 021e 	bic.w	r2, r3, #30
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0216 	orr.w	r2, r2, #22
 8003ba0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d03e      	beq.n	8003c28 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0208 	orr.w	r2, r2, #8
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e035      	b.n	8003c28 <HAL_DMA_Start_IT+0x260>
 8003bbc:	40020010 	.word	0x40020010
 8003bc0:	40020028 	.word	0x40020028
 8003bc4:	40020040 	.word	0x40020040
 8003bc8:	40020058 	.word	0x40020058
 8003bcc:	40020070 	.word	0x40020070
 8003bd0:	40020088 	.word	0x40020088
 8003bd4:	400200a0 	.word	0x400200a0
 8003bd8:	400200b8 	.word	0x400200b8
 8003bdc:	40020410 	.word	0x40020410
 8003be0:	40020428 	.word	0x40020428
 8003be4:	40020440 	.word	0x40020440
 8003be8:	40020458 	.word	0x40020458
 8003bec:	40020470 	.word	0x40020470
 8003bf0:	40020488 	.word	0x40020488
 8003bf4:	400204a0 	.word	0x400204a0
 8003bf8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f023 020e 	bic.w	r2, r3, #14
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 020a 	orr.w	r2, r2, #10
 8003c0e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0204 	orr.w	r2, r2, #4
 8003c26:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a83      	ldr	r2, [pc, #524]	; (8003e3c <HAL_DMA_Start_IT+0x474>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d072      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a82      	ldr	r2, [pc, #520]	; (8003e40 <HAL_DMA_Start_IT+0x478>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d06d      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a80      	ldr	r2, [pc, #512]	; (8003e44 <HAL_DMA_Start_IT+0x47c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d068      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a7f      	ldr	r2, [pc, #508]	; (8003e48 <HAL_DMA_Start_IT+0x480>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d063      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a7d      	ldr	r2, [pc, #500]	; (8003e4c <HAL_DMA_Start_IT+0x484>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d05e      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a7c      	ldr	r2, [pc, #496]	; (8003e50 <HAL_DMA_Start_IT+0x488>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d059      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a7a      	ldr	r2, [pc, #488]	; (8003e54 <HAL_DMA_Start_IT+0x48c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d054      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a79      	ldr	r2, [pc, #484]	; (8003e58 <HAL_DMA_Start_IT+0x490>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d04f      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a77      	ldr	r2, [pc, #476]	; (8003e5c <HAL_DMA_Start_IT+0x494>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d04a      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a76      	ldr	r2, [pc, #472]	; (8003e60 <HAL_DMA_Start_IT+0x498>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d045      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a74      	ldr	r2, [pc, #464]	; (8003e64 <HAL_DMA_Start_IT+0x49c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d040      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a73      	ldr	r2, [pc, #460]	; (8003e68 <HAL_DMA_Start_IT+0x4a0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d03b      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a71      	ldr	r2, [pc, #452]	; (8003e6c <HAL_DMA_Start_IT+0x4a4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d036      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a70      	ldr	r2, [pc, #448]	; (8003e70 <HAL_DMA_Start_IT+0x4a8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d031      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a6e      	ldr	r2, [pc, #440]	; (8003e74 <HAL_DMA_Start_IT+0x4ac>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d02c      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6d      	ldr	r2, [pc, #436]	; (8003e78 <HAL_DMA_Start_IT+0x4b0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d027      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a6b      	ldr	r2, [pc, #428]	; (8003e7c <HAL_DMA_Start_IT+0x4b4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d022      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a6a      	ldr	r2, [pc, #424]	; (8003e80 <HAL_DMA_Start_IT+0x4b8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d01d      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a68      	ldr	r2, [pc, #416]	; (8003e84 <HAL_DMA_Start_IT+0x4bc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d018      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a67      	ldr	r2, [pc, #412]	; (8003e88 <HAL_DMA_Start_IT+0x4c0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d013      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a65      	ldr	r2, [pc, #404]	; (8003e8c <HAL_DMA_Start_IT+0x4c4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00e      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a64      	ldr	r2, [pc, #400]	; (8003e90 <HAL_DMA_Start_IT+0x4c8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d009      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a62      	ldr	r2, [pc, #392]	; (8003e94 <HAL_DMA_Start_IT+0x4cc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d004      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a61      	ldr	r2, [pc, #388]	; (8003e98 <HAL_DMA_Start_IT+0x4d0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d101      	bne.n	8003d1c <HAL_DMA_Start_IT+0x354>
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e000      	b.n	8003d1e <HAL_DMA_Start_IT+0x356>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01a      	beq.n	8003d58 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d3e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d56:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a37      	ldr	r2, [pc, #220]	; (8003e3c <HAL_DMA_Start_IT+0x474>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d04a      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a36      	ldr	r2, [pc, #216]	; (8003e40 <HAL_DMA_Start_IT+0x478>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d045      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a34      	ldr	r2, [pc, #208]	; (8003e44 <HAL_DMA_Start_IT+0x47c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d040      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a33      	ldr	r2, [pc, #204]	; (8003e48 <HAL_DMA_Start_IT+0x480>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d03b      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a31      	ldr	r2, [pc, #196]	; (8003e4c <HAL_DMA_Start_IT+0x484>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d036      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a30      	ldr	r2, [pc, #192]	; (8003e50 <HAL_DMA_Start_IT+0x488>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d031      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a2e      	ldr	r2, [pc, #184]	; (8003e54 <HAL_DMA_Start_IT+0x48c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d02c      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a2d      	ldr	r2, [pc, #180]	; (8003e58 <HAL_DMA_Start_IT+0x490>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d027      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2b      	ldr	r2, [pc, #172]	; (8003e5c <HAL_DMA_Start_IT+0x494>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d022      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a2a      	ldr	r2, [pc, #168]	; (8003e60 <HAL_DMA_Start_IT+0x498>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d01d      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a28      	ldr	r2, [pc, #160]	; (8003e64 <HAL_DMA_Start_IT+0x49c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d018      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a27      	ldr	r2, [pc, #156]	; (8003e68 <HAL_DMA_Start_IT+0x4a0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d013      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a25      	ldr	r2, [pc, #148]	; (8003e6c <HAL_DMA_Start_IT+0x4a4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00e      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a24      	ldr	r2, [pc, #144]	; (8003e70 <HAL_DMA_Start_IT+0x4a8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d009      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a22      	ldr	r2, [pc, #136]	; (8003e74 <HAL_DMA_Start_IT+0x4ac>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d004      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a21      	ldr	r2, [pc, #132]	; (8003e78 <HAL_DMA_Start_IT+0x4b0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d108      	bne.n	8003e0a <HAL_DMA_Start_IT+0x442>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	e012      	b.n	8003e30 <HAL_DMA_Start_IT+0x468>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0201 	orr.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e009      	b.n	8003e30 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40020010 	.word	0x40020010
 8003e40:	40020028 	.word	0x40020028
 8003e44:	40020040 	.word	0x40020040
 8003e48:	40020058 	.word	0x40020058
 8003e4c:	40020070 	.word	0x40020070
 8003e50:	40020088 	.word	0x40020088
 8003e54:	400200a0 	.word	0x400200a0
 8003e58:	400200b8 	.word	0x400200b8
 8003e5c:	40020410 	.word	0x40020410
 8003e60:	40020428 	.word	0x40020428
 8003e64:	40020440 	.word	0x40020440
 8003e68:	40020458 	.word	0x40020458
 8003e6c:	40020470 	.word	0x40020470
 8003e70:	40020488 	.word	0x40020488
 8003e74:	400204a0 	.word	0x400204a0
 8003e78:	400204b8 	.word	0x400204b8
 8003e7c:	58025408 	.word	0x58025408
 8003e80:	5802541c 	.word	0x5802541c
 8003e84:	58025430 	.word	0x58025430
 8003e88:	58025444 	.word	0x58025444
 8003e8c:	58025458 	.word	0x58025458
 8003e90:	5802546c 	.word	0x5802546c
 8003e94:	58025480 	.word	0x58025480
 8003e98:	58025494 	.word	0x58025494

08003e9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003ea4:	f7ff f88e 	bl	8002fc4 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e2dc      	b.n	800446e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d008      	beq.n	8003ed2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2280      	movs	r2, #128	; 0x80
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e2cd      	b.n	800446e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a76      	ldr	r2, [pc, #472]	; (80040b0 <HAL_DMA_Abort+0x214>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d04a      	beq.n	8003f72 <HAL_DMA_Abort+0xd6>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a74      	ldr	r2, [pc, #464]	; (80040b4 <HAL_DMA_Abort+0x218>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d045      	beq.n	8003f72 <HAL_DMA_Abort+0xd6>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a73      	ldr	r2, [pc, #460]	; (80040b8 <HAL_DMA_Abort+0x21c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d040      	beq.n	8003f72 <HAL_DMA_Abort+0xd6>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a71      	ldr	r2, [pc, #452]	; (80040bc <HAL_DMA_Abort+0x220>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d03b      	beq.n	8003f72 <HAL_DMA_Abort+0xd6>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a70      	ldr	r2, [pc, #448]	; (80040c0 <HAL_DMA_Abort+0x224>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d036      	beq.n	8003f72 <HAL_DMA_Abort+0xd6>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a6e      	ldr	r2, [pc, #440]	; (80040c4 <HAL_DMA_Abort+0x228>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d031      	beq.n	8003f72 <HAL_DMA_Abort+0xd6>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a6d      	ldr	r2, [pc, #436]	; (80040c8 <HAL_DMA_Abort+0x22c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d02c      	beq.n	8003f72 <HAL_DMA_Abort+0xd6>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a6b      	ldr	r2, [pc, #428]	; (80040cc <HAL_DMA_Abort+0x230>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d027      	beq.n	8003f72 <HAL_DMA_Abort+0xd6>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a6a      	ldr	r2, [pc, #424]	; (80040d0 <HAL_DMA_Abort+0x234>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d022      	beq.n	8003f72 <HAL_DMA_Abort+0xd6>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a68      	ldr	r2, [pc, #416]	; (80040d4 <HAL_DMA_Abort+0x238>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d01d      	beq.n	8003f72 <HAL_DMA_Abort+0xd6>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a67      	ldr	r2, [pc, #412]	; (80040d8 <HAL_DMA_Abort+0x23c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d018      	beq.n	8003f72 <HAL_DMA_Abort+0xd6>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a65      	ldr	r2, [pc, #404]	; (80040dc <HAL_DMA_Abort+0x240>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d013      	beq.n	8003f72 <HAL_DMA_Abort+0xd6>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a64      	ldr	r2, [pc, #400]	; (80040e0 <HAL_DMA_Abort+0x244>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00e      	beq.n	8003f72 <HAL_DMA_Abort+0xd6>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a62      	ldr	r2, [pc, #392]	; (80040e4 <HAL_DMA_Abort+0x248>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d009      	beq.n	8003f72 <HAL_DMA_Abort+0xd6>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a61      	ldr	r2, [pc, #388]	; (80040e8 <HAL_DMA_Abort+0x24c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d004      	beq.n	8003f72 <HAL_DMA_Abort+0xd6>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a5f      	ldr	r2, [pc, #380]	; (80040ec <HAL_DMA_Abort+0x250>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d101      	bne.n	8003f76 <HAL_DMA_Abort+0xda>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <HAL_DMA_Abort+0xdc>
 8003f76:	2300      	movs	r3, #0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d013      	beq.n	8003fa4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 021e 	bic.w	r2, r2, #30
 8003f8a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f9a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	e00a      	b.n	8003fba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 020e 	bic.w	r2, r2, #14
 8003fb2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a3c      	ldr	r2, [pc, #240]	; (80040b0 <HAL_DMA_Abort+0x214>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d072      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a3a      	ldr	r2, [pc, #232]	; (80040b4 <HAL_DMA_Abort+0x218>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d06d      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a39      	ldr	r2, [pc, #228]	; (80040b8 <HAL_DMA_Abort+0x21c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d068      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a37      	ldr	r2, [pc, #220]	; (80040bc <HAL_DMA_Abort+0x220>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d063      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a36      	ldr	r2, [pc, #216]	; (80040c0 <HAL_DMA_Abort+0x224>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d05e      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a34      	ldr	r2, [pc, #208]	; (80040c4 <HAL_DMA_Abort+0x228>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d059      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a33      	ldr	r2, [pc, #204]	; (80040c8 <HAL_DMA_Abort+0x22c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d054      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a31      	ldr	r2, [pc, #196]	; (80040cc <HAL_DMA_Abort+0x230>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d04f      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a30      	ldr	r2, [pc, #192]	; (80040d0 <HAL_DMA_Abort+0x234>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d04a      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2e      	ldr	r2, [pc, #184]	; (80040d4 <HAL_DMA_Abort+0x238>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d045      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a2d      	ldr	r2, [pc, #180]	; (80040d8 <HAL_DMA_Abort+0x23c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d040      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a2b      	ldr	r2, [pc, #172]	; (80040dc <HAL_DMA_Abort+0x240>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d03b      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a2a      	ldr	r2, [pc, #168]	; (80040e0 <HAL_DMA_Abort+0x244>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d036      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a28      	ldr	r2, [pc, #160]	; (80040e4 <HAL_DMA_Abort+0x248>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d031      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a27      	ldr	r2, [pc, #156]	; (80040e8 <HAL_DMA_Abort+0x24c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d02c      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a25      	ldr	r2, [pc, #148]	; (80040ec <HAL_DMA_Abort+0x250>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d027      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a24      	ldr	r2, [pc, #144]	; (80040f0 <HAL_DMA_Abort+0x254>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d022      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <HAL_DMA_Abort+0x258>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01d      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a21      	ldr	r2, [pc, #132]	; (80040f8 <HAL_DMA_Abort+0x25c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d018      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1f      	ldr	r2, [pc, #124]	; (80040fc <HAL_DMA_Abort+0x260>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <HAL_DMA_Abort+0x264>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00e      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1c      	ldr	r2, [pc, #112]	; (8004104 <HAL_DMA_Abort+0x268>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d009      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1b      	ldr	r2, [pc, #108]	; (8004108 <HAL_DMA_Abort+0x26c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d004      	beq.n	80040aa <HAL_DMA_Abort+0x20e>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a19      	ldr	r2, [pc, #100]	; (800410c <HAL_DMA_Abort+0x270>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d132      	bne.n	8004110 <HAL_DMA_Abort+0x274>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e031      	b.n	8004112 <HAL_DMA_Abort+0x276>
 80040ae:	bf00      	nop
 80040b0:	40020010 	.word	0x40020010
 80040b4:	40020028 	.word	0x40020028
 80040b8:	40020040 	.word	0x40020040
 80040bc:	40020058 	.word	0x40020058
 80040c0:	40020070 	.word	0x40020070
 80040c4:	40020088 	.word	0x40020088
 80040c8:	400200a0 	.word	0x400200a0
 80040cc:	400200b8 	.word	0x400200b8
 80040d0:	40020410 	.word	0x40020410
 80040d4:	40020428 	.word	0x40020428
 80040d8:	40020440 	.word	0x40020440
 80040dc:	40020458 	.word	0x40020458
 80040e0:	40020470 	.word	0x40020470
 80040e4:	40020488 	.word	0x40020488
 80040e8:	400204a0 	.word	0x400204a0
 80040ec:	400204b8 	.word	0x400204b8
 80040f0:	58025408 	.word	0x58025408
 80040f4:	5802541c 	.word	0x5802541c
 80040f8:	58025430 	.word	0x58025430
 80040fc:	58025444 	.word	0x58025444
 8004100:	58025458 	.word	0x58025458
 8004104:	5802546c 	.word	0x5802546c
 8004108:	58025480 	.word	0x58025480
 800410c:	58025494 	.word	0x58025494
 8004110:	2300      	movs	r3, #0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d007      	beq.n	8004126 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004124:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a6d      	ldr	r2, [pc, #436]	; (80042e0 <HAL_DMA_Abort+0x444>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d04a      	beq.n	80041c6 <HAL_DMA_Abort+0x32a>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a6b      	ldr	r2, [pc, #428]	; (80042e4 <HAL_DMA_Abort+0x448>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d045      	beq.n	80041c6 <HAL_DMA_Abort+0x32a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a6a      	ldr	r2, [pc, #424]	; (80042e8 <HAL_DMA_Abort+0x44c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d040      	beq.n	80041c6 <HAL_DMA_Abort+0x32a>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a68      	ldr	r2, [pc, #416]	; (80042ec <HAL_DMA_Abort+0x450>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d03b      	beq.n	80041c6 <HAL_DMA_Abort+0x32a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a67      	ldr	r2, [pc, #412]	; (80042f0 <HAL_DMA_Abort+0x454>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d036      	beq.n	80041c6 <HAL_DMA_Abort+0x32a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a65      	ldr	r2, [pc, #404]	; (80042f4 <HAL_DMA_Abort+0x458>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d031      	beq.n	80041c6 <HAL_DMA_Abort+0x32a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a64      	ldr	r2, [pc, #400]	; (80042f8 <HAL_DMA_Abort+0x45c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d02c      	beq.n	80041c6 <HAL_DMA_Abort+0x32a>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a62      	ldr	r2, [pc, #392]	; (80042fc <HAL_DMA_Abort+0x460>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d027      	beq.n	80041c6 <HAL_DMA_Abort+0x32a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a61      	ldr	r2, [pc, #388]	; (8004300 <HAL_DMA_Abort+0x464>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d022      	beq.n	80041c6 <HAL_DMA_Abort+0x32a>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a5f      	ldr	r2, [pc, #380]	; (8004304 <HAL_DMA_Abort+0x468>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d01d      	beq.n	80041c6 <HAL_DMA_Abort+0x32a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a5e      	ldr	r2, [pc, #376]	; (8004308 <HAL_DMA_Abort+0x46c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d018      	beq.n	80041c6 <HAL_DMA_Abort+0x32a>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a5c      	ldr	r2, [pc, #368]	; (800430c <HAL_DMA_Abort+0x470>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <HAL_DMA_Abort+0x32a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a5b      	ldr	r2, [pc, #364]	; (8004310 <HAL_DMA_Abort+0x474>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00e      	beq.n	80041c6 <HAL_DMA_Abort+0x32a>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a59      	ldr	r2, [pc, #356]	; (8004314 <HAL_DMA_Abort+0x478>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d009      	beq.n	80041c6 <HAL_DMA_Abort+0x32a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a58      	ldr	r2, [pc, #352]	; (8004318 <HAL_DMA_Abort+0x47c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d004      	beq.n	80041c6 <HAL_DMA_Abort+0x32a>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a56      	ldr	r2, [pc, #344]	; (800431c <HAL_DMA_Abort+0x480>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d108      	bne.n	80041d8 <HAL_DMA_Abort+0x33c>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e007      	b.n	80041e8 <HAL_DMA_Abort+0x34c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0201 	bic.w	r2, r2, #1
 80041e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80041e8:	e013      	b.n	8004212 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041ea:	f7fe feeb 	bl	8002fc4 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b05      	cmp	r3, #5
 80041f6:	d90c      	bls.n	8004212 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2203      	movs	r2, #3
 8004202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e12d      	b.n	800446e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e5      	bne.n	80041ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a2f      	ldr	r2, [pc, #188]	; (80042e0 <HAL_DMA_Abort+0x444>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d04a      	beq.n	80042be <HAL_DMA_Abort+0x422>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a2d      	ldr	r2, [pc, #180]	; (80042e4 <HAL_DMA_Abort+0x448>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d045      	beq.n	80042be <HAL_DMA_Abort+0x422>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2c      	ldr	r2, [pc, #176]	; (80042e8 <HAL_DMA_Abort+0x44c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d040      	beq.n	80042be <HAL_DMA_Abort+0x422>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a2a      	ldr	r2, [pc, #168]	; (80042ec <HAL_DMA_Abort+0x450>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d03b      	beq.n	80042be <HAL_DMA_Abort+0x422>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a29      	ldr	r2, [pc, #164]	; (80042f0 <HAL_DMA_Abort+0x454>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d036      	beq.n	80042be <HAL_DMA_Abort+0x422>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a27      	ldr	r2, [pc, #156]	; (80042f4 <HAL_DMA_Abort+0x458>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d031      	beq.n	80042be <HAL_DMA_Abort+0x422>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a26      	ldr	r2, [pc, #152]	; (80042f8 <HAL_DMA_Abort+0x45c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d02c      	beq.n	80042be <HAL_DMA_Abort+0x422>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a24      	ldr	r2, [pc, #144]	; (80042fc <HAL_DMA_Abort+0x460>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d027      	beq.n	80042be <HAL_DMA_Abort+0x422>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a23      	ldr	r2, [pc, #140]	; (8004300 <HAL_DMA_Abort+0x464>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d022      	beq.n	80042be <HAL_DMA_Abort+0x422>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <HAL_DMA_Abort+0x468>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d01d      	beq.n	80042be <HAL_DMA_Abort+0x422>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a20      	ldr	r2, [pc, #128]	; (8004308 <HAL_DMA_Abort+0x46c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d018      	beq.n	80042be <HAL_DMA_Abort+0x422>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1e      	ldr	r2, [pc, #120]	; (800430c <HAL_DMA_Abort+0x470>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d013      	beq.n	80042be <HAL_DMA_Abort+0x422>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <HAL_DMA_Abort+0x474>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00e      	beq.n	80042be <HAL_DMA_Abort+0x422>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1b      	ldr	r2, [pc, #108]	; (8004314 <HAL_DMA_Abort+0x478>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d009      	beq.n	80042be <HAL_DMA_Abort+0x422>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1a      	ldr	r2, [pc, #104]	; (8004318 <HAL_DMA_Abort+0x47c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d004      	beq.n	80042be <HAL_DMA_Abort+0x422>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a18      	ldr	r2, [pc, #96]	; (800431c <HAL_DMA_Abort+0x480>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d101      	bne.n	80042c2 <HAL_DMA_Abort+0x426>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <HAL_DMA_Abort+0x428>
 80042c2:	2300      	movs	r3, #0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d02b      	beq.n	8004320 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	223f      	movs	r2, #63	; 0x3f
 80042d8:	409a      	lsls	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	609a      	str	r2, [r3, #8]
 80042de:	e02a      	b.n	8004336 <HAL_DMA_Abort+0x49a>
 80042e0:	40020010 	.word	0x40020010
 80042e4:	40020028 	.word	0x40020028
 80042e8:	40020040 	.word	0x40020040
 80042ec:	40020058 	.word	0x40020058
 80042f0:	40020070 	.word	0x40020070
 80042f4:	40020088 	.word	0x40020088
 80042f8:	400200a0 	.word	0x400200a0
 80042fc:	400200b8 	.word	0x400200b8
 8004300:	40020410 	.word	0x40020410
 8004304:	40020428 	.word	0x40020428
 8004308:	40020440 	.word	0x40020440
 800430c:	40020458 	.word	0x40020458
 8004310:	40020470 	.word	0x40020470
 8004314:	40020488 	.word	0x40020488
 8004318:	400204a0 	.word	0x400204a0
 800431c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	2201      	movs	r2, #1
 8004330:	409a      	lsls	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a4f      	ldr	r2, [pc, #316]	; (8004478 <HAL_DMA_Abort+0x5dc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d072      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a4d      	ldr	r2, [pc, #308]	; (800447c <HAL_DMA_Abort+0x5e0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d06d      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a4c      	ldr	r2, [pc, #304]	; (8004480 <HAL_DMA_Abort+0x5e4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d068      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a4a      	ldr	r2, [pc, #296]	; (8004484 <HAL_DMA_Abort+0x5e8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d063      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a49      	ldr	r2, [pc, #292]	; (8004488 <HAL_DMA_Abort+0x5ec>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d05e      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a47      	ldr	r2, [pc, #284]	; (800448c <HAL_DMA_Abort+0x5f0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d059      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a46      	ldr	r2, [pc, #280]	; (8004490 <HAL_DMA_Abort+0x5f4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d054      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a44      	ldr	r2, [pc, #272]	; (8004494 <HAL_DMA_Abort+0x5f8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d04f      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a43      	ldr	r2, [pc, #268]	; (8004498 <HAL_DMA_Abort+0x5fc>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d04a      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a41      	ldr	r2, [pc, #260]	; (800449c <HAL_DMA_Abort+0x600>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d045      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a40      	ldr	r2, [pc, #256]	; (80044a0 <HAL_DMA_Abort+0x604>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d040      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a3e      	ldr	r2, [pc, #248]	; (80044a4 <HAL_DMA_Abort+0x608>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d03b      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a3d      	ldr	r2, [pc, #244]	; (80044a8 <HAL_DMA_Abort+0x60c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d036      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a3b      	ldr	r2, [pc, #236]	; (80044ac <HAL_DMA_Abort+0x610>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d031      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a3a      	ldr	r2, [pc, #232]	; (80044b0 <HAL_DMA_Abort+0x614>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d02c      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a38      	ldr	r2, [pc, #224]	; (80044b4 <HAL_DMA_Abort+0x618>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d027      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a37      	ldr	r2, [pc, #220]	; (80044b8 <HAL_DMA_Abort+0x61c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d022      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a35      	ldr	r2, [pc, #212]	; (80044bc <HAL_DMA_Abort+0x620>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d01d      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a34      	ldr	r2, [pc, #208]	; (80044c0 <HAL_DMA_Abort+0x624>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d018      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a32      	ldr	r2, [pc, #200]	; (80044c4 <HAL_DMA_Abort+0x628>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a31      	ldr	r2, [pc, #196]	; (80044c8 <HAL_DMA_Abort+0x62c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00e      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a2f      	ldr	r2, [pc, #188]	; (80044cc <HAL_DMA_Abort+0x630>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d009      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2e      	ldr	r2, [pc, #184]	; (80044d0 <HAL_DMA_Abort+0x634>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d004      	beq.n	8004426 <HAL_DMA_Abort+0x58a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a2c      	ldr	r2, [pc, #176]	; (80044d4 <HAL_DMA_Abort+0x638>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d101      	bne.n	800442a <HAL_DMA_Abort+0x58e>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <HAL_DMA_Abort+0x590>
 800442a:	2300      	movs	r3, #0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d015      	beq.n	800445c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004438:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00c      	beq.n	800445c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800444c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004450:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800445a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40020010 	.word	0x40020010
 800447c:	40020028 	.word	0x40020028
 8004480:	40020040 	.word	0x40020040
 8004484:	40020058 	.word	0x40020058
 8004488:	40020070 	.word	0x40020070
 800448c:	40020088 	.word	0x40020088
 8004490:	400200a0 	.word	0x400200a0
 8004494:	400200b8 	.word	0x400200b8
 8004498:	40020410 	.word	0x40020410
 800449c:	40020428 	.word	0x40020428
 80044a0:	40020440 	.word	0x40020440
 80044a4:	40020458 	.word	0x40020458
 80044a8:	40020470 	.word	0x40020470
 80044ac:	40020488 	.word	0x40020488
 80044b0:	400204a0 	.word	0x400204a0
 80044b4:	400204b8 	.word	0x400204b8
 80044b8:	58025408 	.word	0x58025408
 80044bc:	5802541c 	.word	0x5802541c
 80044c0:	58025430 	.word	0x58025430
 80044c4:	58025444 	.word	0x58025444
 80044c8:	58025458 	.word	0x58025458
 80044cc:	5802546c 	.word	0x5802546c
 80044d0:	58025480 	.word	0x58025480
 80044d4:	58025494 	.word	0x58025494

080044d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e237      	b.n	800495a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d004      	beq.n	8004500 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2280      	movs	r2, #128	; 0x80
 80044fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e22c      	b.n	800495a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a5c      	ldr	r2, [pc, #368]	; (8004678 <HAL_DMA_Abort_IT+0x1a0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d04a      	beq.n	80045a0 <HAL_DMA_Abort_IT+0xc8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a5b      	ldr	r2, [pc, #364]	; (800467c <HAL_DMA_Abort_IT+0x1a4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d045      	beq.n	80045a0 <HAL_DMA_Abort_IT+0xc8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a59      	ldr	r2, [pc, #356]	; (8004680 <HAL_DMA_Abort_IT+0x1a8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d040      	beq.n	80045a0 <HAL_DMA_Abort_IT+0xc8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a58      	ldr	r2, [pc, #352]	; (8004684 <HAL_DMA_Abort_IT+0x1ac>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d03b      	beq.n	80045a0 <HAL_DMA_Abort_IT+0xc8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a56      	ldr	r2, [pc, #344]	; (8004688 <HAL_DMA_Abort_IT+0x1b0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d036      	beq.n	80045a0 <HAL_DMA_Abort_IT+0xc8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a55      	ldr	r2, [pc, #340]	; (800468c <HAL_DMA_Abort_IT+0x1b4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d031      	beq.n	80045a0 <HAL_DMA_Abort_IT+0xc8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a53      	ldr	r2, [pc, #332]	; (8004690 <HAL_DMA_Abort_IT+0x1b8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d02c      	beq.n	80045a0 <HAL_DMA_Abort_IT+0xc8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a52      	ldr	r2, [pc, #328]	; (8004694 <HAL_DMA_Abort_IT+0x1bc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d027      	beq.n	80045a0 <HAL_DMA_Abort_IT+0xc8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a50      	ldr	r2, [pc, #320]	; (8004698 <HAL_DMA_Abort_IT+0x1c0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d022      	beq.n	80045a0 <HAL_DMA_Abort_IT+0xc8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a4f      	ldr	r2, [pc, #316]	; (800469c <HAL_DMA_Abort_IT+0x1c4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d01d      	beq.n	80045a0 <HAL_DMA_Abort_IT+0xc8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a4d      	ldr	r2, [pc, #308]	; (80046a0 <HAL_DMA_Abort_IT+0x1c8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d018      	beq.n	80045a0 <HAL_DMA_Abort_IT+0xc8>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a4c      	ldr	r2, [pc, #304]	; (80046a4 <HAL_DMA_Abort_IT+0x1cc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d013      	beq.n	80045a0 <HAL_DMA_Abort_IT+0xc8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a4a      	ldr	r2, [pc, #296]	; (80046a8 <HAL_DMA_Abort_IT+0x1d0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <HAL_DMA_Abort_IT+0xc8>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a49      	ldr	r2, [pc, #292]	; (80046ac <HAL_DMA_Abort_IT+0x1d4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_DMA_Abort_IT+0xc8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a47      	ldr	r2, [pc, #284]	; (80046b0 <HAL_DMA_Abort_IT+0x1d8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_DMA_Abort_IT+0xc8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a46      	ldr	r2, [pc, #280]	; (80046b4 <HAL_DMA_Abort_IT+0x1dc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d101      	bne.n	80045a4 <HAL_DMA_Abort_IT+0xcc>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <HAL_DMA_Abort_IT+0xce>
 80045a4:	2300      	movs	r3, #0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 8086 	beq.w	80046b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2204      	movs	r2, #4
 80045b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a2f      	ldr	r2, [pc, #188]	; (8004678 <HAL_DMA_Abort_IT+0x1a0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d04a      	beq.n	8004654 <HAL_DMA_Abort_IT+0x17c>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a2e      	ldr	r2, [pc, #184]	; (800467c <HAL_DMA_Abort_IT+0x1a4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d045      	beq.n	8004654 <HAL_DMA_Abort_IT+0x17c>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2c      	ldr	r2, [pc, #176]	; (8004680 <HAL_DMA_Abort_IT+0x1a8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d040      	beq.n	8004654 <HAL_DMA_Abort_IT+0x17c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a2b      	ldr	r2, [pc, #172]	; (8004684 <HAL_DMA_Abort_IT+0x1ac>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d03b      	beq.n	8004654 <HAL_DMA_Abort_IT+0x17c>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a29      	ldr	r2, [pc, #164]	; (8004688 <HAL_DMA_Abort_IT+0x1b0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d036      	beq.n	8004654 <HAL_DMA_Abort_IT+0x17c>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a28      	ldr	r2, [pc, #160]	; (800468c <HAL_DMA_Abort_IT+0x1b4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d031      	beq.n	8004654 <HAL_DMA_Abort_IT+0x17c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a26      	ldr	r2, [pc, #152]	; (8004690 <HAL_DMA_Abort_IT+0x1b8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d02c      	beq.n	8004654 <HAL_DMA_Abort_IT+0x17c>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a25      	ldr	r2, [pc, #148]	; (8004694 <HAL_DMA_Abort_IT+0x1bc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d027      	beq.n	8004654 <HAL_DMA_Abort_IT+0x17c>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a23      	ldr	r2, [pc, #140]	; (8004698 <HAL_DMA_Abort_IT+0x1c0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d022      	beq.n	8004654 <HAL_DMA_Abort_IT+0x17c>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a22      	ldr	r2, [pc, #136]	; (800469c <HAL_DMA_Abort_IT+0x1c4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d01d      	beq.n	8004654 <HAL_DMA_Abort_IT+0x17c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a20      	ldr	r2, [pc, #128]	; (80046a0 <HAL_DMA_Abort_IT+0x1c8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d018      	beq.n	8004654 <HAL_DMA_Abort_IT+0x17c>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1f      	ldr	r2, [pc, #124]	; (80046a4 <HAL_DMA_Abort_IT+0x1cc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d013      	beq.n	8004654 <HAL_DMA_Abort_IT+0x17c>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1d      	ldr	r2, [pc, #116]	; (80046a8 <HAL_DMA_Abort_IT+0x1d0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00e      	beq.n	8004654 <HAL_DMA_Abort_IT+0x17c>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a1c      	ldr	r2, [pc, #112]	; (80046ac <HAL_DMA_Abort_IT+0x1d4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d009      	beq.n	8004654 <HAL_DMA_Abort_IT+0x17c>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a1a      	ldr	r2, [pc, #104]	; (80046b0 <HAL_DMA_Abort_IT+0x1d8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d004      	beq.n	8004654 <HAL_DMA_Abort_IT+0x17c>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a19      	ldr	r2, [pc, #100]	; (80046b4 <HAL_DMA_Abort_IT+0x1dc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d108      	bne.n	8004666 <HAL_DMA_Abort_IT+0x18e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0201 	bic.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	e178      	b.n	8004958 <HAL_DMA_Abort_IT+0x480>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0201 	bic.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	e16f      	b.n	8004958 <HAL_DMA_Abort_IT+0x480>
 8004678:	40020010 	.word	0x40020010
 800467c:	40020028 	.word	0x40020028
 8004680:	40020040 	.word	0x40020040
 8004684:	40020058 	.word	0x40020058
 8004688:	40020070 	.word	0x40020070
 800468c:	40020088 	.word	0x40020088
 8004690:	400200a0 	.word	0x400200a0
 8004694:	400200b8 	.word	0x400200b8
 8004698:	40020410 	.word	0x40020410
 800469c:	40020428 	.word	0x40020428
 80046a0:	40020440 	.word	0x40020440
 80046a4:	40020458 	.word	0x40020458
 80046a8:	40020470 	.word	0x40020470
 80046ac:	40020488 	.word	0x40020488
 80046b0:	400204a0 	.word	0x400204a0
 80046b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 020e 	bic.w	r2, r2, #14
 80046c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a6c      	ldr	r2, [pc, #432]	; (8004880 <HAL_DMA_Abort_IT+0x3a8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d04a      	beq.n	8004768 <HAL_DMA_Abort_IT+0x290>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a6b      	ldr	r2, [pc, #428]	; (8004884 <HAL_DMA_Abort_IT+0x3ac>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d045      	beq.n	8004768 <HAL_DMA_Abort_IT+0x290>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a69      	ldr	r2, [pc, #420]	; (8004888 <HAL_DMA_Abort_IT+0x3b0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d040      	beq.n	8004768 <HAL_DMA_Abort_IT+0x290>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a68      	ldr	r2, [pc, #416]	; (800488c <HAL_DMA_Abort_IT+0x3b4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d03b      	beq.n	8004768 <HAL_DMA_Abort_IT+0x290>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a66      	ldr	r2, [pc, #408]	; (8004890 <HAL_DMA_Abort_IT+0x3b8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d036      	beq.n	8004768 <HAL_DMA_Abort_IT+0x290>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a65      	ldr	r2, [pc, #404]	; (8004894 <HAL_DMA_Abort_IT+0x3bc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d031      	beq.n	8004768 <HAL_DMA_Abort_IT+0x290>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a63      	ldr	r2, [pc, #396]	; (8004898 <HAL_DMA_Abort_IT+0x3c0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d02c      	beq.n	8004768 <HAL_DMA_Abort_IT+0x290>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a62      	ldr	r2, [pc, #392]	; (800489c <HAL_DMA_Abort_IT+0x3c4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d027      	beq.n	8004768 <HAL_DMA_Abort_IT+0x290>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a60      	ldr	r2, [pc, #384]	; (80048a0 <HAL_DMA_Abort_IT+0x3c8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d022      	beq.n	8004768 <HAL_DMA_Abort_IT+0x290>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a5f      	ldr	r2, [pc, #380]	; (80048a4 <HAL_DMA_Abort_IT+0x3cc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d01d      	beq.n	8004768 <HAL_DMA_Abort_IT+0x290>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a5d      	ldr	r2, [pc, #372]	; (80048a8 <HAL_DMA_Abort_IT+0x3d0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d018      	beq.n	8004768 <HAL_DMA_Abort_IT+0x290>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a5c      	ldr	r2, [pc, #368]	; (80048ac <HAL_DMA_Abort_IT+0x3d4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d013      	beq.n	8004768 <HAL_DMA_Abort_IT+0x290>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a5a      	ldr	r2, [pc, #360]	; (80048b0 <HAL_DMA_Abort_IT+0x3d8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00e      	beq.n	8004768 <HAL_DMA_Abort_IT+0x290>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a59      	ldr	r2, [pc, #356]	; (80048b4 <HAL_DMA_Abort_IT+0x3dc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_DMA_Abort_IT+0x290>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a57      	ldr	r2, [pc, #348]	; (80048b8 <HAL_DMA_Abort_IT+0x3e0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <HAL_DMA_Abort_IT+0x290>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a56      	ldr	r2, [pc, #344]	; (80048bc <HAL_DMA_Abort_IT+0x3e4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d108      	bne.n	800477a <HAL_DMA_Abort_IT+0x2a2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0201 	bic.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	e007      	b.n	800478a <HAL_DMA_Abort_IT+0x2b2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0201 	bic.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a3c      	ldr	r2, [pc, #240]	; (8004880 <HAL_DMA_Abort_IT+0x3a8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d072      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a3a      	ldr	r2, [pc, #232]	; (8004884 <HAL_DMA_Abort_IT+0x3ac>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d06d      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a39      	ldr	r2, [pc, #228]	; (8004888 <HAL_DMA_Abort_IT+0x3b0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d068      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a37      	ldr	r2, [pc, #220]	; (800488c <HAL_DMA_Abort_IT+0x3b4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d063      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a36      	ldr	r2, [pc, #216]	; (8004890 <HAL_DMA_Abort_IT+0x3b8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d05e      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a34      	ldr	r2, [pc, #208]	; (8004894 <HAL_DMA_Abort_IT+0x3bc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d059      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a33      	ldr	r2, [pc, #204]	; (8004898 <HAL_DMA_Abort_IT+0x3c0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d054      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a31      	ldr	r2, [pc, #196]	; (800489c <HAL_DMA_Abort_IT+0x3c4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d04f      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a30      	ldr	r2, [pc, #192]	; (80048a0 <HAL_DMA_Abort_IT+0x3c8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d04a      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a2e      	ldr	r2, [pc, #184]	; (80048a4 <HAL_DMA_Abort_IT+0x3cc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d045      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2d      	ldr	r2, [pc, #180]	; (80048a8 <HAL_DMA_Abort_IT+0x3d0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d040      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a2b      	ldr	r2, [pc, #172]	; (80048ac <HAL_DMA_Abort_IT+0x3d4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d03b      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a2a      	ldr	r2, [pc, #168]	; (80048b0 <HAL_DMA_Abort_IT+0x3d8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d036      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a28      	ldr	r2, [pc, #160]	; (80048b4 <HAL_DMA_Abort_IT+0x3dc>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d031      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a27      	ldr	r2, [pc, #156]	; (80048b8 <HAL_DMA_Abort_IT+0x3e0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d02c      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a25      	ldr	r2, [pc, #148]	; (80048bc <HAL_DMA_Abort_IT+0x3e4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d027      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a24      	ldr	r2, [pc, #144]	; (80048c0 <HAL_DMA_Abort_IT+0x3e8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d022      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a22      	ldr	r2, [pc, #136]	; (80048c4 <HAL_DMA_Abort_IT+0x3ec>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01d      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a21      	ldr	r2, [pc, #132]	; (80048c8 <HAL_DMA_Abort_IT+0x3f0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d018      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1f      	ldr	r2, [pc, #124]	; (80048cc <HAL_DMA_Abort_IT+0x3f4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1e      	ldr	r2, [pc, #120]	; (80048d0 <HAL_DMA_Abort_IT+0x3f8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00e      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1c      	ldr	r2, [pc, #112]	; (80048d4 <HAL_DMA_Abort_IT+0x3fc>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d009      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1b      	ldr	r2, [pc, #108]	; (80048d8 <HAL_DMA_Abort_IT+0x400>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d004      	beq.n	800487a <HAL_DMA_Abort_IT+0x3a2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a19      	ldr	r2, [pc, #100]	; (80048dc <HAL_DMA_Abort_IT+0x404>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d132      	bne.n	80048e0 <HAL_DMA_Abort_IT+0x408>
 800487a:	2301      	movs	r3, #1
 800487c:	e031      	b.n	80048e2 <HAL_DMA_Abort_IT+0x40a>
 800487e:	bf00      	nop
 8004880:	40020010 	.word	0x40020010
 8004884:	40020028 	.word	0x40020028
 8004888:	40020040 	.word	0x40020040
 800488c:	40020058 	.word	0x40020058
 8004890:	40020070 	.word	0x40020070
 8004894:	40020088 	.word	0x40020088
 8004898:	400200a0 	.word	0x400200a0
 800489c:	400200b8 	.word	0x400200b8
 80048a0:	40020410 	.word	0x40020410
 80048a4:	40020428 	.word	0x40020428
 80048a8:	40020440 	.word	0x40020440
 80048ac:	40020458 	.word	0x40020458
 80048b0:	40020470 	.word	0x40020470
 80048b4:	40020488 	.word	0x40020488
 80048b8:	400204a0 	.word	0x400204a0
 80048bc:	400204b8 	.word	0x400204b8
 80048c0:	58025408 	.word	0x58025408
 80048c4:	5802541c 	.word	0x5802541c
 80048c8:	58025430 	.word	0x58025430
 80048cc:	58025444 	.word	0x58025444
 80048d0:	58025458 	.word	0x58025458
 80048d4:	5802546c 	.word	0x5802546c
 80048d8:	58025480 	.word	0x58025480
 80048dc:	58025494 	.word	0x58025494
 80048e0:	2300      	movs	r3, #0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d028      	beq.n	8004938 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004900:	f003 031f 	and.w	r3, r3, #31
 8004904:	2201      	movs	r2, #1
 8004906:	409a      	lsls	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004914:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00c      	beq.n	8004938 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004928:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800492c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004936:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop

08004964 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08a      	sub	sp, #40	; 0x28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004970:	4b67      	ldr	r3, [pc, #412]	; (8004b10 <HAL_DMA_IRQHandler+0x1ac>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a67      	ldr	r2, [pc, #412]	; (8004b14 <HAL_DMA_IRQHandler+0x1b0>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	0a9b      	lsrs	r3, r3, #10
 800497c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a5f      	ldr	r2, [pc, #380]	; (8004b18 <HAL_DMA_IRQHandler+0x1b4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d04a      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a5d      	ldr	r2, [pc, #372]	; (8004b1c <HAL_DMA_IRQHandler+0x1b8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d045      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a5c      	ldr	r2, [pc, #368]	; (8004b20 <HAL_DMA_IRQHandler+0x1bc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d040      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a5a      	ldr	r2, [pc, #360]	; (8004b24 <HAL_DMA_IRQHandler+0x1c0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d03b      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a59      	ldr	r2, [pc, #356]	; (8004b28 <HAL_DMA_IRQHandler+0x1c4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d036      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a57      	ldr	r2, [pc, #348]	; (8004b2c <HAL_DMA_IRQHandler+0x1c8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d031      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a56      	ldr	r2, [pc, #344]	; (8004b30 <HAL_DMA_IRQHandler+0x1cc>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d02c      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a54      	ldr	r2, [pc, #336]	; (8004b34 <HAL_DMA_IRQHandler+0x1d0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d027      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a53      	ldr	r2, [pc, #332]	; (8004b38 <HAL_DMA_IRQHandler+0x1d4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d022      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a51      	ldr	r2, [pc, #324]	; (8004b3c <HAL_DMA_IRQHandler+0x1d8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01d      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a50      	ldr	r2, [pc, #320]	; (8004b40 <HAL_DMA_IRQHandler+0x1dc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d018      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a4e      	ldr	r2, [pc, #312]	; (8004b44 <HAL_DMA_IRQHandler+0x1e0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a4d      	ldr	r2, [pc, #308]	; (8004b48 <HAL_DMA_IRQHandler+0x1e4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a4b      	ldr	r2, [pc, #300]	; (8004b4c <HAL_DMA_IRQHandler+0x1e8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a4a      	ldr	r2, [pc, #296]	; (8004b50 <HAL_DMA_IRQHandler+0x1ec>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a48      	ldr	r2, [pc, #288]	; (8004b54 <HAL_DMA_IRQHandler+0x1f0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <HAL_DMA_IRQHandler+0xd6>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_DMA_IRQHandler+0xd8>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 842b 	beq.w	8005298 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 80a2 	beq.w	8004b9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a2e      	ldr	r2, [pc, #184]	; (8004b18 <HAL_DMA_IRQHandler+0x1b4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d04a      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a2d      	ldr	r2, [pc, #180]	; (8004b1c <HAL_DMA_IRQHandler+0x1b8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d045      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a2b      	ldr	r2, [pc, #172]	; (8004b20 <HAL_DMA_IRQHandler+0x1bc>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d040      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a2a      	ldr	r2, [pc, #168]	; (8004b24 <HAL_DMA_IRQHandler+0x1c0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d03b      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a28      	ldr	r2, [pc, #160]	; (8004b28 <HAL_DMA_IRQHandler+0x1c4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d036      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a27      	ldr	r2, [pc, #156]	; (8004b2c <HAL_DMA_IRQHandler+0x1c8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d031      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a25      	ldr	r2, [pc, #148]	; (8004b30 <HAL_DMA_IRQHandler+0x1cc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d02c      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a24      	ldr	r2, [pc, #144]	; (8004b34 <HAL_DMA_IRQHandler+0x1d0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d027      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a22      	ldr	r2, [pc, #136]	; (8004b38 <HAL_DMA_IRQHandler+0x1d4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d022      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a21      	ldr	r2, [pc, #132]	; (8004b3c <HAL_DMA_IRQHandler+0x1d8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d01d      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1f      	ldr	r2, [pc, #124]	; (8004b40 <HAL_DMA_IRQHandler+0x1dc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d018      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1e      	ldr	r2, [pc, #120]	; (8004b44 <HAL_DMA_IRQHandler+0x1e0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <HAL_DMA_IRQHandler+0x1e4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00e      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <HAL_DMA_IRQHandler+0x1e8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d009      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a19      	ldr	r2, [pc, #100]	; (8004b50 <HAL_DMA_IRQHandler+0x1ec>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <HAL_DMA_IRQHandler+0x1f0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d12f      	bne.n	8004b58 <HAL_DMA_IRQHandler+0x1f4>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	bf14      	ite	ne
 8004b06:	2301      	movne	r3, #1
 8004b08:	2300      	moveq	r3, #0
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	e02e      	b.n	8004b6c <HAL_DMA_IRQHandler+0x208>
 8004b0e:	bf00      	nop
 8004b10:	24000008 	.word	0x24000008
 8004b14:	1b4e81b5 	.word	0x1b4e81b5
 8004b18:	40020010 	.word	0x40020010
 8004b1c:	40020028 	.word	0x40020028
 8004b20:	40020040 	.word	0x40020040
 8004b24:	40020058 	.word	0x40020058
 8004b28:	40020070 	.word	0x40020070
 8004b2c:	40020088 	.word	0x40020088
 8004b30:	400200a0 	.word	0x400200a0
 8004b34:	400200b8 	.word	0x400200b8
 8004b38:	40020410 	.word	0x40020410
 8004b3c:	40020428 	.word	0x40020428
 8004b40:	40020440 	.word	0x40020440
 8004b44:	40020458 	.word	0x40020458
 8004b48:	40020470 	.word	0x40020470
 8004b4c:	40020488 	.word	0x40020488
 8004b50:	400204a0 	.word	0x400204a0
 8004b54:	400204b8 	.word	0x400204b8
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bf14      	ite	ne
 8004b66:	2301      	movne	r3, #1
 8004b68:	2300      	moveq	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d015      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0204 	bic.w	r2, r2, #4
 8004b7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b84:	f003 031f 	and.w	r3, r3, #31
 8004b88:	2208      	movs	r2, #8
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b94:	f043 0201 	orr.w	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d06e      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a69      	ldr	r2, [pc, #420]	; (8004d5c <HAL_DMA_IRQHandler+0x3f8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d04a      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a67      	ldr	r2, [pc, #412]	; (8004d60 <HAL_DMA_IRQHandler+0x3fc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d045      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a66      	ldr	r2, [pc, #408]	; (8004d64 <HAL_DMA_IRQHandler+0x400>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d040      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a64      	ldr	r2, [pc, #400]	; (8004d68 <HAL_DMA_IRQHandler+0x404>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d03b      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a63      	ldr	r2, [pc, #396]	; (8004d6c <HAL_DMA_IRQHandler+0x408>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d036      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a61      	ldr	r2, [pc, #388]	; (8004d70 <HAL_DMA_IRQHandler+0x40c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d031      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a60      	ldr	r2, [pc, #384]	; (8004d74 <HAL_DMA_IRQHandler+0x410>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d02c      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a5e      	ldr	r2, [pc, #376]	; (8004d78 <HAL_DMA_IRQHandler+0x414>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d027      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a5d      	ldr	r2, [pc, #372]	; (8004d7c <HAL_DMA_IRQHandler+0x418>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d022      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a5b      	ldr	r2, [pc, #364]	; (8004d80 <HAL_DMA_IRQHandler+0x41c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01d      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a5a      	ldr	r2, [pc, #360]	; (8004d84 <HAL_DMA_IRQHandler+0x420>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d018      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a58      	ldr	r2, [pc, #352]	; (8004d88 <HAL_DMA_IRQHandler+0x424>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a57      	ldr	r2, [pc, #348]	; (8004d8c <HAL_DMA_IRQHandler+0x428>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a55      	ldr	r2, [pc, #340]	; (8004d90 <HAL_DMA_IRQHandler+0x42c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a54      	ldr	r2, [pc, #336]	; (8004d94 <HAL_DMA_IRQHandler+0x430>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a52      	ldr	r2, [pc, #328]	; (8004d98 <HAL_DMA_IRQHandler+0x434>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d10a      	bne.n	8004c68 <HAL_DMA_IRQHandler+0x304>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e003      	b.n	8004c70 <HAL_DMA_IRQHandler+0x30c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00d      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	f043 0202 	orr.w	r2, r3, #2
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c94:	f003 031f 	and.w	r3, r3, #31
 8004c98:	2204      	movs	r2, #4
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 808f 	beq.w	8004dc4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2c      	ldr	r2, [pc, #176]	; (8004d5c <HAL_DMA_IRQHandler+0x3f8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d04a      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a2a      	ldr	r2, [pc, #168]	; (8004d60 <HAL_DMA_IRQHandler+0x3fc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d045      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a29      	ldr	r2, [pc, #164]	; (8004d64 <HAL_DMA_IRQHandler+0x400>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d040      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a27      	ldr	r2, [pc, #156]	; (8004d68 <HAL_DMA_IRQHandler+0x404>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d03b      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a26      	ldr	r2, [pc, #152]	; (8004d6c <HAL_DMA_IRQHandler+0x408>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d036      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a24      	ldr	r2, [pc, #144]	; (8004d70 <HAL_DMA_IRQHandler+0x40c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d031      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a23      	ldr	r2, [pc, #140]	; (8004d74 <HAL_DMA_IRQHandler+0x410>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d02c      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a21      	ldr	r2, [pc, #132]	; (8004d78 <HAL_DMA_IRQHandler+0x414>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d027      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a20      	ldr	r2, [pc, #128]	; (8004d7c <HAL_DMA_IRQHandler+0x418>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d022      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1e      	ldr	r2, [pc, #120]	; (8004d80 <HAL_DMA_IRQHandler+0x41c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d01d      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <HAL_DMA_IRQHandler+0x420>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d018      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <HAL_DMA_IRQHandler+0x424>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d013      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a1a      	ldr	r2, [pc, #104]	; (8004d8c <HAL_DMA_IRQHandler+0x428>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00e      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a18      	ldr	r2, [pc, #96]	; (8004d90 <HAL_DMA_IRQHandler+0x42c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d009      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a17      	ldr	r2, [pc, #92]	; (8004d94 <HAL_DMA_IRQHandler+0x430>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d004      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <HAL_DMA_IRQHandler+0x434>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d12a      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x438>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	e023      	b.n	8004da4 <HAL_DMA_IRQHandler+0x440>
 8004d5c:	40020010 	.word	0x40020010
 8004d60:	40020028 	.word	0x40020028
 8004d64:	40020040 	.word	0x40020040
 8004d68:	40020058 	.word	0x40020058
 8004d6c:	40020070 	.word	0x40020070
 8004d70:	40020088 	.word	0x40020088
 8004d74:	400200a0 	.word	0x400200a0
 8004d78:	400200b8 	.word	0x400200b8
 8004d7c:	40020410 	.word	0x40020410
 8004d80:	40020428 	.word	0x40020428
 8004d84:	40020440 	.word	0x40020440
 8004d88:	40020458 	.word	0x40020458
 8004d8c:	40020470 	.word	0x40020470
 8004d90:	40020488 	.word	0x40020488
 8004d94:	400204a0 	.word	0x400204a0
 8004d98:	400204b8 	.word	0x400204b8
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2300      	movs	r3, #0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00d      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	2204      	movs	r2, #4
 8004db2:	409a      	lsls	r2, r3
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbc:	f043 0204 	orr.w	r2, r3, #4
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc8:	f003 031f 	and.w	r3, r3, #31
 8004dcc:	2210      	movs	r2, #16
 8004dce:	409a      	lsls	r2, r3
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 80a6 	beq.w	8004f26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a85      	ldr	r2, [pc, #532]	; (8004ff4 <HAL_DMA_IRQHandler+0x690>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d04a      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a83      	ldr	r2, [pc, #524]	; (8004ff8 <HAL_DMA_IRQHandler+0x694>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d045      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a82      	ldr	r2, [pc, #520]	; (8004ffc <HAL_DMA_IRQHandler+0x698>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d040      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a80      	ldr	r2, [pc, #512]	; (8005000 <HAL_DMA_IRQHandler+0x69c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d03b      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a7f      	ldr	r2, [pc, #508]	; (8005004 <HAL_DMA_IRQHandler+0x6a0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d036      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a7d      	ldr	r2, [pc, #500]	; (8005008 <HAL_DMA_IRQHandler+0x6a4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d031      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a7c      	ldr	r2, [pc, #496]	; (800500c <HAL_DMA_IRQHandler+0x6a8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d02c      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a7a      	ldr	r2, [pc, #488]	; (8005010 <HAL_DMA_IRQHandler+0x6ac>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d027      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a79      	ldr	r2, [pc, #484]	; (8005014 <HAL_DMA_IRQHandler+0x6b0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d022      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a77      	ldr	r2, [pc, #476]	; (8005018 <HAL_DMA_IRQHandler+0x6b4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d01d      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a76      	ldr	r2, [pc, #472]	; (800501c <HAL_DMA_IRQHandler+0x6b8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d018      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a74      	ldr	r2, [pc, #464]	; (8005020 <HAL_DMA_IRQHandler+0x6bc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a73      	ldr	r2, [pc, #460]	; (8005024 <HAL_DMA_IRQHandler+0x6c0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00e      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a71      	ldr	r2, [pc, #452]	; (8005028 <HAL_DMA_IRQHandler+0x6c4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d009      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a70      	ldr	r2, [pc, #448]	; (800502c <HAL_DMA_IRQHandler+0x6c8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d004      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a6e      	ldr	r2, [pc, #440]	; (8005030 <HAL_DMA_IRQHandler+0x6cc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d10a      	bne.n	8004e90 <HAL_DMA_IRQHandler+0x52c>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	e009      	b.n	8004ea4 <HAL_DMA_IRQHandler+0x540>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	bf14      	ite	ne
 8004e9e:	2301      	movne	r3, #1
 8004ea0:	2300      	moveq	r3, #0
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d03e      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2210      	movs	r2, #16
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d018      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d108      	bne.n	8004ee6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d024      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	4798      	blx	r3
 8004ee4:	e01f      	b.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01b      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	4798      	blx	r3
 8004ef6:	e016      	b.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d107      	bne.n	8004f16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0208 	bic.w	r2, r2, #8
 8004f14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	2220      	movs	r2, #32
 8004f30:	409a      	lsls	r2, r3
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8110 	beq.w	800515c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2c      	ldr	r2, [pc, #176]	; (8004ff4 <HAL_DMA_IRQHandler+0x690>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d04a      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2b      	ldr	r2, [pc, #172]	; (8004ff8 <HAL_DMA_IRQHandler+0x694>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d045      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a29      	ldr	r2, [pc, #164]	; (8004ffc <HAL_DMA_IRQHandler+0x698>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d040      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a28      	ldr	r2, [pc, #160]	; (8005000 <HAL_DMA_IRQHandler+0x69c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d03b      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a26      	ldr	r2, [pc, #152]	; (8005004 <HAL_DMA_IRQHandler+0x6a0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d036      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a25      	ldr	r2, [pc, #148]	; (8005008 <HAL_DMA_IRQHandler+0x6a4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d031      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a23      	ldr	r2, [pc, #140]	; (800500c <HAL_DMA_IRQHandler+0x6a8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d02c      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a22      	ldr	r2, [pc, #136]	; (8005010 <HAL_DMA_IRQHandler+0x6ac>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d027      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a20      	ldr	r2, [pc, #128]	; (8005014 <HAL_DMA_IRQHandler+0x6b0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d022      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <HAL_DMA_IRQHandler+0x6b4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d01d      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1d      	ldr	r2, [pc, #116]	; (800501c <HAL_DMA_IRQHandler+0x6b8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d018      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <HAL_DMA_IRQHandler+0x6bc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d013      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <HAL_DMA_IRQHandler+0x6c0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00e      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a19      	ldr	r2, [pc, #100]	; (8005028 <HAL_DMA_IRQHandler+0x6c4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d009      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a17      	ldr	r2, [pc, #92]	; (800502c <HAL_DMA_IRQHandler+0x6c8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a16      	ldr	r2, [pc, #88]	; (8005030 <HAL_DMA_IRQHandler+0x6cc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d12b      	bne.n	8005034 <HAL_DMA_IRQHandler+0x6d0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bf14      	ite	ne
 8004fea:	2301      	movne	r3, #1
 8004fec:	2300      	moveq	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	e02a      	b.n	8005048 <HAL_DMA_IRQHandler+0x6e4>
 8004ff2:	bf00      	nop
 8004ff4:	40020010 	.word	0x40020010
 8004ff8:	40020028 	.word	0x40020028
 8004ffc:	40020040 	.word	0x40020040
 8005000:	40020058 	.word	0x40020058
 8005004:	40020070 	.word	0x40020070
 8005008:	40020088 	.word	0x40020088
 800500c:	400200a0 	.word	0x400200a0
 8005010:	400200b8 	.word	0x400200b8
 8005014:	40020410 	.word	0x40020410
 8005018:	40020428 	.word	0x40020428
 800501c:	40020440 	.word	0x40020440
 8005020:	40020458 	.word	0x40020458
 8005024:	40020470 	.word	0x40020470
 8005028:	40020488 	.word	0x40020488
 800502c:	400204a0 	.word	0x400204a0
 8005030:	400204b8 	.word	0x400204b8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	bf14      	ite	ne
 8005042:	2301      	movne	r3, #1
 8005044:	2300      	moveq	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8087 	beq.w	800515c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	2220      	movs	r2, #32
 8005058:	409a      	lsls	r2, r3
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b04      	cmp	r3, #4
 8005068:	d139      	bne.n	80050de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0216 	bic.w	r2, r2, #22
 8005078:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005088:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d103      	bne.n	800509a <HAL_DMA_IRQHandler+0x736>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0208 	bic.w	r2, r2, #8
 80050a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ae:	f003 031f 	and.w	r3, r3, #31
 80050b2:	223f      	movs	r2, #63	; 0x3f
 80050b4:	409a      	lsls	r2, r3
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 8382 	beq.w	80057d8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	4798      	blx	r3
          }
          return;
 80050dc:	e37c      	b.n	80057d8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d018      	beq.n	800511e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d108      	bne.n	800510c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d02c      	beq.n	800515c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	4798      	blx	r3
 800510a:	e027      	b.n	800515c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005110:	2b00      	cmp	r3, #0
 8005112:	d023      	beq.n	800515c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	4798      	blx	r3
 800511c:	e01e      	b.n	800515c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10f      	bne.n	800514c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0210 	bic.w	r2, r2, #16
 800513a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 833e 	beq.w	80057e2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8088 	beq.w	8005284 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2204      	movs	r2, #4
 8005178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a89      	ldr	r2, [pc, #548]	; (80053a8 <HAL_DMA_IRQHandler+0xa44>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d04a      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a88      	ldr	r2, [pc, #544]	; (80053ac <HAL_DMA_IRQHandler+0xa48>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d045      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a86      	ldr	r2, [pc, #536]	; (80053b0 <HAL_DMA_IRQHandler+0xa4c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d040      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a85      	ldr	r2, [pc, #532]	; (80053b4 <HAL_DMA_IRQHandler+0xa50>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d03b      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a83      	ldr	r2, [pc, #524]	; (80053b8 <HAL_DMA_IRQHandler+0xa54>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d036      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a82      	ldr	r2, [pc, #520]	; (80053bc <HAL_DMA_IRQHandler+0xa58>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d031      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a80      	ldr	r2, [pc, #512]	; (80053c0 <HAL_DMA_IRQHandler+0xa5c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d02c      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a7f      	ldr	r2, [pc, #508]	; (80053c4 <HAL_DMA_IRQHandler+0xa60>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d027      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a7d      	ldr	r2, [pc, #500]	; (80053c8 <HAL_DMA_IRQHandler+0xa64>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d022      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a7c      	ldr	r2, [pc, #496]	; (80053cc <HAL_DMA_IRQHandler+0xa68>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d01d      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a7a      	ldr	r2, [pc, #488]	; (80053d0 <HAL_DMA_IRQHandler+0xa6c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d018      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a79      	ldr	r2, [pc, #484]	; (80053d4 <HAL_DMA_IRQHandler+0xa70>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d013      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a77      	ldr	r2, [pc, #476]	; (80053d8 <HAL_DMA_IRQHandler+0xa74>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00e      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a76      	ldr	r2, [pc, #472]	; (80053dc <HAL_DMA_IRQHandler+0xa78>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d009      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a74      	ldr	r2, [pc, #464]	; (80053e0 <HAL_DMA_IRQHandler+0xa7c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a73      	ldr	r2, [pc, #460]	; (80053e4 <HAL_DMA_IRQHandler+0xa80>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d108      	bne.n	800522e <HAL_DMA_IRQHandler+0x8ca>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	e007      	b.n	800523e <HAL_DMA_IRQHandler+0x8da>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0201 	bic.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005246:	429a      	cmp	r2, r3
 8005248:	d307      	bcc.n	800525a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f2      	bne.n	800523e <HAL_DMA_IRQHandler+0x8da>
 8005258:	e000      	b.n	800525c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800525a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d004      	beq.n	8005274 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2203      	movs	r2, #3
 800526e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005272:	e003      	b.n	800527c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 82aa 	beq.w	80057e2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	4798      	blx	r3
 8005296:	e2a4      	b.n	80057e2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a52      	ldr	r2, [pc, #328]	; (80053e8 <HAL_DMA_IRQHandler+0xa84>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d04a      	beq.n	8005338 <HAL_DMA_IRQHandler+0x9d4>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a51      	ldr	r2, [pc, #324]	; (80053ec <HAL_DMA_IRQHandler+0xa88>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d045      	beq.n	8005338 <HAL_DMA_IRQHandler+0x9d4>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a4f      	ldr	r2, [pc, #316]	; (80053f0 <HAL_DMA_IRQHandler+0xa8c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d040      	beq.n	8005338 <HAL_DMA_IRQHandler+0x9d4>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a4e      	ldr	r2, [pc, #312]	; (80053f4 <HAL_DMA_IRQHandler+0xa90>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d03b      	beq.n	8005338 <HAL_DMA_IRQHandler+0x9d4>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a4c      	ldr	r2, [pc, #304]	; (80053f8 <HAL_DMA_IRQHandler+0xa94>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d036      	beq.n	8005338 <HAL_DMA_IRQHandler+0x9d4>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a4b      	ldr	r2, [pc, #300]	; (80053fc <HAL_DMA_IRQHandler+0xa98>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d031      	beq.n	8005338 <HAL_DMA_IRQHandler+0x9d4>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a49      	ldr	r2, [pc, #292]	; (8005400 <HAL_DMA_IRQHandler+0xa9c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d02c      	beq.n	8005338 <HAL_DMA_IRQHandler+0x9d4>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a48      	ldr	r2, [pc, #288]	; (8005404 <HAL_DMA_IRQHandler+0xaa0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d027      	beq.n	8005338 <HAL_DMA_IRQHandler+0x9d4>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a46      	ldr	r2, [pc, #280]	; (8005408 <HAL_DMA_IRQHandler+0xaa4>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d022      	beq.n	8005338 <HAL_DMA_IRQHandler+0x9d4>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a45      	ldr	r2, [pc, #276]	; (800540c <HAL_DMA_IRQHandler+0xaa8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d01d      	beq.n	8005338 <HAL_DMA_IRQHandler+0x9d4>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a43      	ldr	r2, [pc, #268]	; (8005410 <HAL_DMA_IRQHandler+0xaac>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d018      	beq.n	8005338 <HAL_DMA_IRQHandler+0x9d4>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a42      	ldr	r2, [pc, #264]	; (8005414 <HAL_DMA_IRQHandler+0xab0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d013      	beq.n	8005338 <HAL_DMA_IRQHandler+0x9d4>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a40      	ldr	r2, [pc, #256]	; (8005418 <HAL_DMA_IRQHandler+0xab4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00e      	beq.n	8005338 <HAL_DMA_IRQHandler+0x9d4>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a3f      	ldr	r2, [pc, #252]	; (800541c <HAL_DMA_IRQHandler+0xab8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d009      	beq.n	8005338 <HAL_DMA_IRQHandler+0x9d4>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a3d      	ldr	r2, [pc, #244]	; (8005420 <HAL_DMA_IRQHandler+0xabc>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d004      	beq.n	8005338 <HAL_DMA_IRQHandler+0x9d4>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a3c      	ldr	r2, [pc, #240]	; (8005424 <HAL_DMA_IRQHandler+0xac0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d101      	bne.n	800533c <HAL_DMA_IRQHandler+0x9d8>
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <HAL_DMA_IRQHandler+0x9da>
 800533c:	2300      	movs	r3, #0
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 824f 	beq.w	80057e2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	2204      	movs	r2, #4
 8005356:	409a      	lsls	r2, r3
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	4013      	ands	r3, r2
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 80dd 	beq.w	800551c <HAL_DMA_IRQHandler+0xbb8>
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80d7 	beq.w	800551c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005372:	f003 031f 	and.w	r3, r3, #31
 8005376:	2204      	movs	r2, #4
 8005378:	409a      	lsls	r2, r3
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d059      	beq.n	800543c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d14a      	bne.n	8005428 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 8220 	beq.w	80057dc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053a4:	e21a      	b.n	80057dc <HAL_DMA_IRQHandler+0xe78>
 80053a6:	bf00      	nop
 80053a8:	40020010 	.word	0x40020010
 80053ac:	40020028 	.word	0x40020028
 80053b0:	40020040 	.word	0x40020040
 80053b4:	40020058 	.word	0x40020058
 80053b8:	40020070 	.word	0x40020070
 80053bc:	40020088 	.word	0x40020088
 80053c0:	400200a0 	.word	0x400200a0
 80053c4:	400200b8 	.word	0x400200b8
 80053c8:	40020410 	.word	0x40020410
 80053cc:	40020428 	.word	0x40020428
 80053d0:	40020440 	.word	0x40020440
 80053d4:	40020458 	.word	0x40020458
 80053d8:	40020470 	.word	0x40020470
 80053dc:	40020488 	.word	0x40020488
 80053e0:	400204a0 	.word	0x400204a0
 80053e4:	400204b8 	.word	0x400204b8
 80053e8:	48022c08 	.word	0x48022c08
 80053ec:	48022c1c 	.word	0x48022c1c
 80053f0:	48022c30 	.word	0x48022c30
 80053f4:	48022c44 	.word	0x48022c44
 80053f8:	48022c58 	.word	0x48022c58
 80053fc:	48022c6c 	.word	0x48022c6c
 8005400:	48022c80 	.word	0x48022c80
 8005404:	48022c94 	.word	0x48022c94
 8005408:	58025408 	.word	0x58025408
 800540c:	5802541c 	.word	0x5802541c
 8005410:	58025430 	.word	0x58025430
 8005414:	58025444 	.word	0x58025444
 8005418:	58025458 	.word	0x58025458
 800541c:	5802546c 	.word	0x5802546c
 8005420:	58025480 	.word	0x58025480
 8005424:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 81d5 	beq.w	80057dc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800543a:	e1cf      	b.n	80057dc <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	d160      	bne.n	8005508 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a7f      	ldr	r2, [pc, #508]	; (8005648 <HAL_DMA_IRQHandler+0xce4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d04a      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xb82>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a7d      	ldr	r2, [pc, #500]	; (800564c <HAL_DMA_IRQHandler+0xce8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d045      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xb82>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a7c      	ldr	r2, [pc, #496]	; (8005650 <HAL_DMA_IRQHandler+0xcec>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d040      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xb82>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a7a      	ldr	r2, [pc, #488]	; (8005654 <HAL_DMA_IRQHandler+0xcf0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d03b      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xb82>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a79      	ldr	r2, [pc, #484]	; (8005658 <HAL_DMA_IRQHandler+0xcf4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d036      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xb82>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a77      	ldr	r2, [pc, #476]	; (800565c <HAL_DMA_IRQHandler+0xcf8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d031      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xb82>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a76      	ldr	r2, [pc, #472]	; (8005660 <HAL_DMA_IRQHandler+0xcfc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d02c      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xb82>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a74      	ldr	r2, [pc, #464]	; (8005664 <HAL_DMA_IRQHandler+0xd00>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d027      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xb82>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a73      	ldr	r2, [pc, #460]	; (8005668 <HAL_DMA_IRQHandler+0xd04>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d022      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xb82>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a71      	ldr	r2, [pc, #452]	; (800566c <HAL_DMA_IRQHandler+0xd08>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01d      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xb82>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a70      	ldr	r2, [pc, #448]	; (8005670 <HAL_DMA_IRQHandler+0xd0c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d018      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xb82>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a6e      	ldr	r2, [pc, #440]	; (8005674 <HAL_DMA_IRQHandler+0xd10>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d013      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xb82>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a6d      	ldr	r2, [pc, #436]	; (8005678 <HAL_DMA_IRQHandler+0xd14>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00e      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xb82>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a6b      	ldr	r2, [pc, #428]	; (800567c <HAL_DMA_IRQHandler+0xd18>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d009      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xb82>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a6a      	ldr	r2, [pc, #424]	; (8005680 <HAL_DMA_IRQHandler+0xd1c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d004      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xb82>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a68      	ldr	r2, [pc, #416]	; (8005684 <HAL_DMA_IRQHandler+0xd20>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d108      	bne.n	80054f8 <HAL_DMA_IRQHandler+0xb94>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0208 	bic.w	r2, r2, #8
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	e007      	b.n	8005508 <HAL_DMA_IRQHandler+0xba4>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0204 	bic.w	r2, r2, #4
 8005506:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 8165 	beq.w	80057dc <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800551a:	e15f      	b.n	80057dc <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005520:	f003 031f 	and.w	r3, r3, #31
 8005524:	2202      	movs	r2, #2
 8005526:	409a      	lsls	r2, r3
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	4013      	ands	r3, r2
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 80c5 	beq.w	80056bc <HAL_DMA_IRQHandler+0xd58>
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80bf 	beq.w	80056bc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	2202      	movs	r2, #2
 8005548:	409a      	lsls	r2, r3
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d018      	beq.n	800558a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 813a 	beq.w	80057e0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005574:	e134      	b.n	80057e0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 8130 	beq.w	80057e0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005588:	e12a      	b.n	80057e0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b00      	cmp	r3, #0
 8005592:	f040 8089 	bne.w	80056a8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a2b      	ldr	r2, [pc, #172]	; (8005648 <HAL_DMA_IRQHandler+0xce4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d04a      	beq.n	8005636 <HAL_DMA_IRQHandler+0xcd2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a29      	ldr	r2, [pc, #164]	; (800564c <HAL_DMA_IRQHandler+0xce8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d045      	beq.n	8005636 <HAL_DMA_IRQHandler+0xcd2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a28      	ldr	r2, [pc, #160]	; (8005650 <HAL_DMA_IRQHandler+0xcec>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d040      	beq.n	8005636 <HAL_DMA_IRQHandler+0xcd2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a26      	ldr	r2, [pc, #152]	; (8005654 <HAL_DMA_IRQHandler+0xcf0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d03b      	beq.n	8005636 <HAL_DMA_IRQHandler+0xcd2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a25      	ldr	r2, [pc, #148]	; (8005658 <HAL_DMA_IRQHandler+0xcf4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d036      	beq.n	8005636 <HAL_DMA_IRQHandler+0xcd2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a23      	ldr	r2, [pc, #140]	; (800565c <HAL_DMA_IRQHandler+0xcf8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d031      	beq.n	8005636 <HAL_DMA_IRQHandler+0xcd2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a22      	ldr	r2, [pc, #136]	; (8005660 <HAL_DMA_IRQHandler+0xcfc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d02c      	beq.n	8005636 <HAL_DMA_IRQHandler+0xcd2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a20      	ldr	r2, [pc, #128]	; (8005664 <HAL_DMA_IRQHandler+0xd00>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d027      	beq.n	8005636 <HAL_DMA_IRQHandler+0xcd2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1f      	ldr	r2, [pc, #124]	; (8005668 <HAL_DMA_IRQHandler+0xd04>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d022      	beq.n	8005636 <HAL_DMA_IRQHandler+0xcd2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1d      	ldr	r2, [pc, #116]	; (800566c <HAL_DMA_IRQHandler+0xd08>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d01d      	beq.n	8005636 <HAL_DMA_IRQHandler+0xcd2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1c      	ldr	r2, [pc, #112]	; (8005670 <HAL_DMA_IRQHandler+0xd0c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d018      	beq.n	8005636 <HAL_DMA_IRQHandler+0xcd2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1a      	ldr	r2, [pc, #104]	; (8005674 <HAL_DMA_IRQHandler+0xd10>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <HAL_DMA_IRQHandler+0xcd2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a19      	ldr	r2, [pc, #100]	; (8005678 <HAL_DMA_IRQHandler+0xd14>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00e      	beq.n	8005636 <HAL_DMA_IRQHandler+0xcd2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a17      	ldr	r2, [pc, #92]	; (800567c <HAL_DMA_IRQHandler+0xd18>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d009      	beq.n	8005636 <HAL_DMA_IRQHandler+0xcd2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a16      	ldr	r2, [pc, #88]	; (8005680 <HAL_DMA_IRQHandler+0xd1c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d004      	beq.n	8005636 <HAL_DMA_IRQHandler+0xcd2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a14      	ldr	r2, [pc, #80]	; (8005684 <HAL_DMA_IRQHandler+0xd20>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d128      	bne.n	8005688 <HAL_DMA_IRQHandler+0xd24>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0214 	bic.w	r2, r2, #20
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	e027      	b.n	8005698 <HAL_DMA_IRQHandler+0xd34>
 8005648:	40020010 	.word	0x40020010
 800564c:	40020028 	.word	0x40020028
 8005650:	40020040 	.word	0x40020040
 8005654:	40020058 	.word	0x40020058
 8005658:	40020070 	.word	0x40020070
 800565c:	40020088 	.word	0x40020088
 8005660:	400200a0 	.word	0x400200a0
 8005664:	400200b8 	.word	0x400200b8
 8005668:	40020410 	.word	0x40020410
 800566c:	40020428 	.word	0x40020428
 8005670:	40020440 	.word	0x40020440
 8005674:	40020458 	.word	0x40020458
 8005678:	40020470 	.word	0x40020470
 800567c:	40020488 	.word	0x40020488
 8005680:	400204a0 	.word	0x400204a0
 8005684:	400204b8 	.word	0x400204b8
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 020a 	bic.w	r2, r2, #10
 8005696:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8097 	beq.w	80057e0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056ba:	e091      	b.n	80057e0 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c0:	f003 031f 	and.w	r3, r3, #31
 80056c4:	2208      	movs	r2, #8
 80056c6:	409a      	lsls	r2, r3
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 8088 	beq.w	80057e2 <HAL_DMA_IRQHandler+0xe7e>
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 8082 	beq.w	80057e2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a41      	ldr	r2, [pc, #260]	; (80057e8 <HAL_DMA_IRQHandler+0xe84>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d04a      	beq.n	800577e <HAL_DMA_IRQHandler+0xe1a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a3f      	ldr	r2, [pc, #252]	; (80057ec <HAL_DMA_IRQHandler+0xe88>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d045      	beq.n	800577e <HAL_DMA_IRQHandler+0xe1a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a3e      	ldr	r2, [pc, #248]	; (80057f0 <HAL_DMA_IRQHandler+0xe8c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d040      	beq.n	800577e <HAL_DMA_IRQHandler+0xe1a>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a3c      	ldr	r2, [pc, #240]	; (80057f4 <HAL_DMA_IRQHandler+0xe90>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d03b      	beq.n	800577e <HAL_DMA_IRQHandler+0xe1a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a3b      	ldr	r2, [pc, #236]	; (80057f8 <HAL_DMA_IRQHandler+0xe94>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d036      	beq.n	800577e <HAL_DMA_IRQHandler+0xe1a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a39      	ldr	r2, [pc, #228]	; (80057fc <HAL_DMA_IRQHandler+0xe98>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d031      	beq.n	800577e <HAL_DMA_IRQHandler+0xe1a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a38      	ldr	r2, [pc, #224]	; (8005800 <HAL_DMA_IRQHandler+0xe9c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d02c      	beq.n	800577e <HAL_DMA_IRQHandler+0xe1a>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a36      	ldr	r2, [pc, #216]	; (8005804 <HAL_DMA_IRQHandler+0xea0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d027      	beq.n	800577e <HAL_DMA_IRQHandler+0xe1a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a35      	ldr	r2, [pc, #212]	; (8005808 <HAL_DMA_IRQHandler+0xea4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d022      	beq.n	800577e <HAL_DMA_IRQHandler+0xe1a>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a33      	ldr	r2, [pc, #204]	; (800580c <HAL_DMA_IRQHandler+0xea8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d01d      	beq.n	800577e <HAL_DMA_IRQHandler+0xe1a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a32      	ldr	r2, [pc, #200]	; (8005810 <HAL_DMA_IRQHandler+0xeac>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d018      	beq.n	800577e <HAL_DMA_IRQHandler+0xe1a>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a30      	ldr	r2, [pc, #192]	; (8005814 <HAL_DMA_IRQHandler+0xeb0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d013      	beq.n	800577e <HAL_DMA_IRQHandler+0xe1a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a2f      	ldr	r2, [pc, #188]	; (8005818 <HAL_DMA_IRQHandler+0xeb4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00e      	beq.n	800577e <HAL_DMA_IRQHandler+0xe1a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a2d      	ldr	r2, [pc, #180]	; (800581c <HAL_DMA_IRQHandler+0xeb8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d009      	beq.n	800577e <HAL_DMA_IRQHandler+0xe1a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a2c      	ldr	r2, [pc, #176]	; (8005820 <HAL_DMA_IRQHandler+0xebc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d004      	beq.n	800577e <HAL_DMA_IRQHandler+0xe1a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a2a      	ldr	r2, [pc, #168]	; (8005824 <HAL_DMA_IRQHandler+0xec0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d108      	bne.n	8005790 <HAL_DMA_IRQHandler+0xe2c>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 021c 	bic.w	r2, r2, #28
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e007      	b.n	80057a0 <HAL_DMA_IRQHandler+0xe3c>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 020e 	bic.w	r2, r2, #14
 800579e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a4:	f003 031f 	and.w	r3, r3, #31
 80057a8:	2201      	movs	r2, #1
 80057aa:	409a      	lsls	r2, r3
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d009      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	4798      	blx	r3
 80057d6:	e004      	b.n	80057e2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80057d8:	bf00      	nop
 80057da:	e002      	b.n	80057e2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057dc:	bf00      	nop
 80057de:	e000      	b.n	80057e2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80057e2:	3728      	adds	r7, #40	; 0x28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40020010 	.word	0x40020010
 80057ec:	40020028 	.word	0x40020028
 80057f0:	40020040 	.word	0x40020040
 80057f4:	40020058 	.word	0x40020058
 80057f8:	40020070 	.word	0x40020070
 80057fc:	40020088 	.word	0x40020088
 8005800:	400200a0 	.word	0x400200a0
 8005804:	400200b8 	.word	0x400200b8
 8005808:	40020410 	.word	0x40020410
 800580c:	40020428 	.word	0x40020428
 8005810:	40020440 	.word	0x40020440
 8005814:	40020458 	.word	0x40020458
 8005818:	40020470 	.word	0x40020470
 800581c:	40020488 	.word	0x40020488
 8005820:	400204a0 	.word	0x400204a0
 8005824:	400204b8 	.word	0x400204b8

08005828 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005834:	4618      	mov	r0, r3
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005852:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005858:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a7f      	ldr	r2, [pc, #508]	; (8005a5c <DMA_SetConfig+0x21c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d072      	beq.n	800594a <DMA_SetConfig+0x10a>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a7d      	ldr	r2, [pc, #500]	; (8005a60 <DMA_SetConfig+0x220>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d06d      	beq.n	800594a <DMA_SetConfig+0x10a>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a7c      	ldr	r2, [pc, #496]	; (8005a64 <DMA_SetConfig+0x224>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d068      	beq.n	800594a <DMA_SetConfig+0x10a>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a7a      	ldr	r2, [pc, #488]	; (8005a68 <DMA_SetConfig+0x228>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d063      	beq.n	800594a <DMA_SetConfig+0x10a>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a79      	ldr	r2, [pc, #484]	; (8005a6c <DMA_SetConfig+0x22c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d05e      	beq.n	800594a <DMA_SetConfig+0x10a>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a77      	ldr	r2, [pc, #476]	; (8005a70 <DMA_SetConfig+0x230>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d059      	beq.n	800594a <DMA_SetConfig+0x10a>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a76      	ldr	r2, [pc, #472]	; (8005a74 <DMA_SetConfig+0x234>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d054      	beq.n	800594a <DMA_SetConfig+0x10a>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a74      	ldr	r2, [pc, #464]	; (8005a78 <DMA_SetConfig+0x238>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d04f      	beq.n	800594a <DMA_SetConfig+0x10a>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a73      	ldr	r2, [pc, #460]	; (8005a7c <DMA_SetConfig+0x23c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d04a      	beq.n	800594a <DMA_SetConfig+0x10a>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a71      	ldr	r2, [pc, #452]	; (8005a80 <DMA_SetConfig+0x240>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d045      	beq.n	800594a <DMA_SetConfig+0x10a>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a70      	ldr	r2, [pc, #448]	; (8005a84 <DMA_SetConfig+0x244>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d040      	beq.n	800594a <DMA_SetConfig+0x10a>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a6e      	ldr	r2, [pc, #440]	; (8005a88 <DMA_SetConfig+0x248>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d03b      	beq.n	800594a <DMA_SetConfig+0x10a>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a6d      	ldr	r2, [pc, #436]	; (8005a8c <DMA_SetConfig+0x24c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d036      	beq.n	800594a <DMA_SetConfig+0x10a>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a6b      	ldr	r2, [pc, #428]	; (8005a90 <DMA_SetConfig+0x250>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d031      	beq.n	800594a <DMA_SetConfig+0x10a>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a6a      	ldr	r2, [pc, #424]	; (8005a94 <DMA_SetConfig+0x254>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d02c      	beq.n	800594a <DMA_SetConfig+0x10a>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a68      	ldr	r2, [pc, #416]	; (8005a98 <DMA_SetConfig+0x258>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d027      	beq.n	800594a <DMA_SetConfig+0x10a>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a67      	ldr	r2, [pc, #412]	; (8005a9c <DMA_SetConfig+0x25c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d022      	beq.n	800594a <DMA_SetConfig+0x10a>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a65      	ldr	r2, [pc, #404]	; (8005aa0 <DMA_SetConfig+0x260>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d01d      	beq.n	800594a <DMA_SetConfig+0x10a>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a64      	ldr	r2, [pc, #400]	; (8005aa4 <DMA_SetConfig+0x264>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d018      	beq.n	800594a <DMA_SetConfig+0x10a>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a62      	ldr	r2, [pc, #392]	; (8005aa8 <DMA_SetConfig+0x268>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d013      	beq.n	800594a <DMA_SetConfig+0x10a>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a61      	ldr	r2, [pc, #388]	; (8005aac <DMA_SetConfig+0x26c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00e      	beq.n	800594a <DMA_SetConfig+0x10a>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a5f      	ldr	r2, [pc, #380]	; (8005ab0 <DMA_SetConfig+0x270>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d009      	beq.n	800594a <DMA_SetConfig+0x10a>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a5e      	ldr	r2, [pc, #376]	; (8005ab4 <DMA_SetConfig+0x274>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d004      	beq.n	800594a <DMA_SetConfig+0x10a>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a5c      	ldr	r2, [pc, #368]	; (8005ab8 <DMA_SetConfig+0x278>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d101      	bne.n	800594e <DMA_SetConfig+0x10e>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <DMA_SetConfig+0x110>
 800594e:	2300      	movs	r3, #0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00d      	beq.n	8005970 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800595c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d004      	beq.n	8005970 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800596e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a39      	ldr	r2, [pc, #228]	; (8005a5c <DMA_SetConfig+0x21c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d04a      	beq.n	8005a10 <DMA_SetConfig+0x1d0>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a38      	ldr	r2, [pc, #224]	; (8005a60 <DMA_SetConfig+0x220>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d045      	beq.n	8005a10 <DMA_SetConfig+0x1d0>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a36      	ldr	r2, [pc, #216]	; (8005a64 <DMA_SetConfig+0x224>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d040      	beq.n	8005a10 <DMA_SetConfig+0x1d0>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a35      	ldr	r2, [pc, #212]	; (8005a68 <DMA_SetConfig+0x228>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d03b      	beq.n	8005a10 <DMA_SetConfig+0x1d0>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a33      	ldr	r2, [pc, #204]	; (8005a6c <DMA_SetConfig+0x22c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d036      	beq.n	8005a10 <DMA_SetConfig+0x1d0>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a32      	ldr	r2, [pc, #200]	; (8005a70 <DMA_SetConfig+0x230>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d031      	beq.n	8005a10 <DMA_SetConfig+0x1d0>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a30      	ldr	r2, [pc, #192]	; (8005a74 <DMA_SetConfig+0x234>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d02c      	beq.n	8005a10 <DMA_SetConfig+0x1d0>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a2f      	ldr	r2, [pc, #188]	; (8005a78 <DMA_SetConfig+0x238>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d027      	beq.n	8005a10 <DMA_SetConfig+0x1d0>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a2d      	ldr	r2, [pc, #180]	; (8005a7c <DMA_SetConfig+0x23c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d022      	beq.n	8005a10 <DMA_SetConfig+0x1d0>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a2c      	ldr	r2, [pc, #176]	; (8005a80 <DMA_SetConfig+0x240>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d01d      	beq.n	8005a10 <DMA_SetConfig+0x1d0>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a2a      	ldr	r2, [pc, #168]	; (8005a84 <DMA_SetConfig+0x244>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d018      	beq.n	8005a10 <DMA_SetConfig+0x1d0>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a29      	ldr	r2, [pc, #164]	; (8005a88 <DMA_SetConfig+0x248>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d013      	beq.n	8005a10 <DMA_SetConfig+0x1d0>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a27      	ldr	r2, [pc, #156]	; (8005a8c <DMA_SetConfig+0x24c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00e      	beq.n	8005a10 <DMA_SetConfig+0x1d0>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a26      	ldr	r2, [pc, #152]	; (8005a90 <DMA_SetConfig+0x250>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d009      	beq.n	8005a10 <DMA_SetConfig+0x1d0>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a24      	ldr	r2, [pc, #144]	; (8005a94 <DMA_SetConfig+0x254>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <DMA_SetConfig+0x1d0>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a23      	ldr	r2, [pc, #140]	; (8005a98 <DMA_SetConfig+0x258>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d101      	bne.n	8005a14 <DMA_SetConfig+0x1d4>
 8005a10:	2301      	movs	r3, #1
 8005a12:	e000      	b.n	8005a16 <DMA_SetConfig+0x1d6>
 8005a14:	2300      	movs	r3, #0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d059      	beq.n	8005ace <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1e:	f003 031f 	and.w	r3, r3, #31
 8005a22:	223f      	movs	r2, #63	; 0x3f
 8005a24:	409a      	lsls	r2, r3
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a38:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b40      	cmp	r3, #64	; 0x40
 8005a48:	d138      	bne.n	8005abc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005a5a:	e0ae      	b.n	8005bba <DMA_SetConfig+0x37a>
 8005a5c:	40020010 	.word	0x40020010
 8005a60:	40020028 	.word	0x40020028
 8005a64:	40020040 	.word	0x40020040
 8005a68:	40020058 	.word	0x40020058
 8005a6c:	40020070 	.word	0x40020070
 8005a70:	40020088 	.word	0x40020088
 8005a74:	400200a0 	.word	0x400200a0
 8005a78:	400200b8 	.word	0x400200b8
 8005a7c:	40020410 	.word	0x40020410
 8005a80:	40020428 	.word	0x40020428
 8005a84:	40020440 	.word	0x40020440
 8005a88:	40020458 	.word	0x40020458
 8005a8c:	40020470 	.word	0x40020470
 8005a90:	40020488 	.word	0x40020488
 8005a94:	400204a0 	.word	0x400204a0
 8005a98:	400204b8 	.word	0x400204b8
 8005a9c:	58025408 	.word	0x58025408
 8005aa0:	5802541c 	.word	0x5802541c
 8005aa4:	58025430 	.word	0x58025430
 8005aa8:	58025444 	.word	0x58025444
 8005aac:	58025458 	.word	0x58025458
 8005ab0:	5802546c 	.word	0x5802546c
 8005ab4:	58025480 	.word	0x58025480
 8005ab8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	60da      	str	r2, [r3, #12]
}
 8005acc:	e075      	b.n	8005bba <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a3d      	ldr	r2, [pc, #244]	; (8005bc8 <DMA_SetConfig+0x388>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d04a      	beq.n	8005b6e <DMA_SetConfig+0x32e>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a3b      	ldr	r2, [pc, #236]	; (8005bcc <DMA_SetConfig+0x38c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d045      	beq.n	8005b6e <DMA_SetConfig+0x32e>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a3a      	ldr	r2, [pc, #232]	; (8005bd0 <DMA_SetConfig+0x390>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d040      	beq.n	8005b6e <DMA_SetConfig+0x32e>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a38      	ldr	r2, [pc, #224]	; (8005bd4 <DMA_SetConfig+0x394>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d03b      	beq.n	8005b6e <DMA_SetConfig+0x32e>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a37      	ldr	r2, [pc, #220]	; (8005bd8 <DMA_SetConfig+0x398>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d036      	beq.n	8005b6e <DMA_SetConfig+0x32e>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a35      	ldr	r2, [pc, #212]	; (8005bdc <DMA_SetConfig+0x39c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d031      	beq.n	8005b6e <DMA_SetConfig+0x32e>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a34      	ldr	r2, [pc, #208]	; (8005be0 <DMA_SetConfig+0x3a0>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d02c      	beq.n	8005b6e <DMA_SetConfig+0x32e>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a32      	ldr	r2, [pc, #200]	; (8005be4 <DMA_SetConfig+0x3a4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d027      	beq.n	8005b6e <DMA_SetConfig+0x32e>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a31      	ldr	r2, [pc, #196]	; (8005be8 <DMA_SetConfig+0x3a8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d022      	beq.n	8005b6e <DMA_SetConfig+0x32e>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a2f      	ldr	r2, [pc, #188]	; (8005bec <DMA_SetConfig+0x3ac>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d01d      	beq.n	8005b6e <DMA_SetConfig+0x32e>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a2e      	ldr	r2, [pc, #184]	; (8005bf0 <DMA_SetConfig+0x3b0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d018      	beq.n	8005b6e <DMA_SetConfig+0x32e>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a2c      	ldr	r2, [pc, #176]	; (8005bf4 <DMA_SetConfig+0x3b4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <DMA_SetConfig+0x32e>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a2b      	ldr	r2, [pc, #172]	; (8005bf8 <DMA_SetConfig+0x3b8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00e      	beq.n	8005b6e <DMA_SetConfig+0x32e>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a29      	ldr	r2, [pc, #164]	; (8005bfc <DMA_SetConfig+0x3bc>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d009      	beq.n	8005b6e <DMA_SetConfig+0x32e>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a28      	ldr	r2, [pc, #160]	; (8005c00 <DMA_SetConfig+0x3c0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d004      	beq.n	8005b6e <DMA_SetConfig+0x32e>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a26      	ldr	r2, [pc, #152]	; (8005c04 <DMA_SetConfig+0x3c4>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d101      	bne.n	8005b72 <DMA_SetConfig+0x332>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <DMA_SetConfig+0x334>
 8005b72:	2300      	movs	r3, #0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d020      	beq.n	8005bba <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7c:	f003 031f 	and.w	r3, r3, #31
 8005b80:	2201      	movs	r2, #1
 8005b82:	409a      	lsls	r2, r3
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	2b40      	cmp	r3, #64	; 0x40
 8005b96:	d108      	bne.n	8005baa <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	60da      	str	r2, [r3, #12]
}
 8005ba8:	e007      	b.n	8005bba <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	60da      	str	r2, [r3, #12]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	48022c08 	.word	0x48022c08
 8005bcc:	48022c1c 	.word	0x48022c1c
 8005bd0:	48022c30 	.word	0x48022c30
 8005bd4:	48022c44 	.word	0x48022c44
 8005bd8:	48022c58 	.word	0x48022c58
 8005bdc:	48022c6c 	.word	0x48022c6c
 8005be0:	48022c80 	.word	0x48022c80
 8005be4:	48022c94 	.word	0x48022c94
 8005be8:	58025408 	.word	0x58025408
 8005bec:	5802541c 	.word	0x5802541c
 8005bf0:	58025430 	.word	0x58025430
 8005bf4:	58025444 	.word	0x58025444
 8005bf8:	58025458 	.word	0x58025458
 8005bfc:	5802546c 	.word	0x5802546c
 8005c00:	58025480 	.word	0x58025480
 8005c04:	58025494 	.word	0x58025494

08005c08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a42      	ldr	r2, [pc, #264]	; (8005d20 <DMA_CalcBaseAndBitshift+0x118>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d04a      	beq.n	8005cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a41      	ldr	r2, [pc, #260]	; (8005d24 <DMA_CalcBaseAndBitshift+0x11c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d045      	beq.n	8005cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a3f      	ldr	r2, [pc, #252]	; (8005d28 <DMA_CalcBaseAndBitshift+0x120>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d040      	beq.n	8005cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a3e      	ldr	r2, [pc, #248]	; (8005d2c <DMA_CalcBaseAndBitshift+0x124>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d03b      	beq.n	8005cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a3c      	ldr	r2, [pc, #240]	; (8005d30 <DMA_CalcBaseAndBitshift+0x128>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d036      	beq.n	8005cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a3b      	ldr	r2, [pc, #236]	; (8005d34 <DMA_CalcBaseAndBitshift+0x12c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d031      	beq.n	8005cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a39      	ldr	r2, [pc, #228]	; (8005d38 <DMA_CalcBaseAndBitshift+0x130>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d02c      	beq.n	8005cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a38      	ldr	r2, [pc, #224]	; (8005d3c <DMA_CalcBaseAndBitshift+0x134>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d027      	beq.n	8005cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a36      	ldr	r2, [pc, #216]	; (8005d40 <DMA_CalcBaseAndBitshift+0x138>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d022      	beq.n	8005cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a35      	ldr	r2, [pc, #212]	; (8005d44 <DMA_CalcBaseAndBitshift+0x13c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d01d      	beq.n	8005cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a33      	ldr	r2, [pc, #204]	; (8005d48 <DMA_CalcBaseAndBitshift+0x140>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d018      	beq.n	8005cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a32      	ldr	r2, [pc, #200]	; (8005d4c <DMA_CalcBaseAndBitshift+0x144>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d013      	beq.n	8005cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a30      	ldr	r2, [pc, #192]	; (8005d50 <DMA_CalcBaseAndBitshift+0x148>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00e      	beq.n	8005cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a2f      	ldr	r2, [pc, #188]	; (8005d54 <DMA_CalcBaseAndBitshift+0x14c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d009      	beq.n	8005cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a2d      	ldr	r2, [pc, #180]	; (8005d58 <DMA_CalcBaseAndBitshift+0x150>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d004      	beq.n	8005cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a2c      	ldr	r2, [pc, #176]	; (8005d5c <DMA_CalcBaseAndBitshift+0x154>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d101      	bne.n	8005cb4 <DMA_CalcBaseAndBitshift+0xac>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e000      	b.n	8005cb6 <DMA_CalcBaseAndBitshift+0xae>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d024      	beq.n	8005d04 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	3b10      	subs	r3, #16
 8005cc2:	4a27      	ldr	r2, [pc, #156]	; (8005d60 <DMA_CalcBaseAndBitshift+0x158>)
 8005cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc8:	091b      	lsrs	r3, r3, #4
 8005cca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	4a24      	ldr	r2, [pc, #144]	; (8005d64 <DMA_CalcBaseAndBitshift+0x15c>)
 8005cd4:	5cd3      	ldrb	r3, [r2, r3]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d908      	bls.n	8005cf4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	4b1f      	ldr	r3, [pc, #124]	; (8005d68 <DMA_CalcBaseAndBitshift+0x160>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	1d1a      	adds	r2, r3, #4
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	659a      	str	r2, [r3, #88]	; 0x58
 8005cf2:	e00d      	b.n	8005d10 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	4b1b      	ldr	r3, [pc, #108]	; (8005d68 <DMA_CalcBaseAndBitshift+0x160>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6593      	str	r3, [r2, #88]	; 0x58
 8005d02:	e005      	b.n	8005d10 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	40020010 	.word	0x40020010
 8005d24:	40020028 	.word	0x40020028
 8005d28:	40020040 	.word	0x40020040
 8005d2c:	40020058 	.word	0x40020058
 8005d30:	40020070 	.word	0x40020070
 8005d34:	40020088 	.word	0x40020088
 8005d38:	400200a0 	.word	0x400200a0
 8005d3c:	400200b8 	.word	0x400200b8
 8005d40:	40020410 	.word	0x40020410
 8005d44:	40020428 	.word	0x40020428
 8005d48:	40020440 	.word	0x40020440
 8005d4c:	40020458 	.word	0x40020458
 8005d50:	40020470 	.word	0x40020470
 8005d54:	40020488 	.word	0x40020488
 8005d58:	400204a0 	.word	0x400204a0
 8005d5c:	400204b8 	.word	0x400204b8
 8005d60:	aaaaaaab 	.word	0xaaaaaaab
 8005d64:	080128a0 	.word	0x080128a0
 8005d68:	fffffc00 	.word	0xfffffc00

08005d6c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d120      	bne.n	8005dc2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d858      	bhi.n	8005e3a <DMA_CheckFifoParam+0xce>
 8005d88:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <DMA_CheckFifoParam+0x24>)
 8005d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8e:	bf00      	nop
 8005d90:	08005da1 	.word	0x08005da1
 8005d94:	08005db3 	.word	0x08005db3
 8005d98:	08005da1 	.word	0x08005da1
 8005d9c:	08005e3b 	.word	0x08005e3b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d048      	beq.n	8005e3e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005db0:	e045      	b.n	8005e3e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005dba:	d142      	bne.n	8005e42 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005dc0:	e03f      	b.n	8005e42 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dca:	d123      	bne.n	8005e14 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d838      	bhi.n	8005e46 <DMA_CheckFifoParam+0xda>
 8005dd4:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <DMA_CheckFifoParam+0x70>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005ded 	.word	0x08005ded
 8005de0:	08005df3 	.word	0x08005df3
 8005de4:	08005ded 	.word	0x08005ded
 8005de8:	08005e05 	.word	0x08005e05
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	73fb      	strb	r3, [r7, #15]
        break;
 8005df0:	e030      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d025      	beq.n	8005e4a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e02:	e022      	b.n	8005e4a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e0c:	d11f      	bne.n	8005e4e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e12:	e01c      	b.n	8005e4e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d902      	bls.n	8005e22 <DMA_CheckFifoParam+0xb6>
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d003      	beq.n	8005e28 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005e20:	e018      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	73fb      	strb	r3, [r7, #15]
        break;
 8005e26:	e015      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00e      	beq.n	8005e52 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	73fb      	strb	r3, [r7, #15]
    break;
 8005e38:	e00b      	b.n	8005e52 <DMA_CheckFifoParam+0xe6>
        break;
 8005e3a:	bf00      	nop
 8005e3c:	e00a      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
        break;
 8005e3e:	bf00      	nop
 8005e40:	e008      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
        break;
 8005e42:	bf00      	nop
 8005e44:	e006      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
        break;
 8005e46:	bf00      	nop
 8005e48:	e004      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
        break;
 8005e4a:	bf00      	nop
 8005e4c:	e002      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
        break;
 8005e4e:	bf00      	nop
 8005e50:	e000      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
    break;
 8005e52:	bf00      	nop
    }
  }

  return status;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop

08005e64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a38      	ldr	r2, [pc, #224]	; (8005f58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d022      	beq.n	8005ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a36      	ldr	r2, [pc, #216]	; (8005f5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d01d      	beq.n	8005ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a35      	ldr	r2, [pc, #212]	; (8005f60 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d018      	beq.n	8005ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a33      	ldr	r2, [pc, #204]	; (8005f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d013      	beq.n	8005ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a32      	ldr	r2, [pc, #200]	; (8005f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00e      	beq.n	8005ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a30      	ldr	r2, [pc, #192]	; (8005f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d009      	beq.n	8005ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a2f      	ldr	r2, [pc, #188]	; (8005f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d004      	beq.n	8005ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a2d      	ldr	r2, [pc, #180]	; (8005f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d101      	bne.n	8005ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01a      	beq.n	8005f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	3b08      	subs	r3, #8
 8005ed4:	4a28      	ldr	r2, [pc, #160]	; (8005f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	091b      	lsrs	r3, r3, #4
 8005edc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4b26      	ldr	r3, [pc, #152]	; (8005f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005ee2:	4413      	add	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a24      	ldr	r2, [pc, #144]	; (8005f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ef0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	2201      	movs	r2, #1
 8005efa:	409a      	lsls	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005f00:	e024      	b.n	8005f4c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	3b10      	subs	r3, #16
 8005f0a:	4a1e      	ldr	r2, [pc, #120]	; (8005f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f10:	091b      	lsrs	r3, r3, #4
 8005f12:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4a1c      	ldr	r2, [pc, #112]	; (8005f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d806      	bhi.n	8005f2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4a1b      	ldr	r2, [pc, #108]	; (8005f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d902      	bls.n	8005f2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3308      	adds	r3, #8
 8005f28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4b18      	ldr	r3, [pc, #96]	; (8005f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	461a      	mov	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a16      	ldr	r2, [pc, #88]	; (8005f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005f3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f003 031f 	and.w	r3, r3, #31
 8005f44:	2201      	movs	r2, #1
 8005f46:	409a      	lsls	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f4c:	bf00      	nop
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	58025408 	.word	0x58025408
 8005f5c:	5802541c 	.word	0x5802541c
 8005f60:	58025430 	.word	0x58025430
 8005f64:	58025444 	.word	0x58025444
 8005f68:	58025458 	.word	0x58025458
 8005f6c:	5802546c 	.word	0x5802546c
 8005f70:	58025480 	.word	0x58025480
 8005f74:	58025494 	.word	0x58025494
 8005f78:	cccccccd 	.word	0xcccccccd
 8005f7c:	16009600 	.word	0x16009600
 8005f80:	58025880 	.word	0x58025880
 8005f84:	aaaaaaab 	.word	0xaaaaaaab
 8005f88:	400204b8 	.word	0x400204b8
 8005f8c:	4002040f 	.word	0x4002040f
 8005f90:	10008200 	.word	0x10008200
 8005f94:	40020880 	.word	0x40020880

08005f98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d04a      	beq.n	8006044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d847      	bhi.n	8006044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a25      	ldr	r2, [pc, #148]	; (8006050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d022      	beq.n	8006004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a24      	ldr	r2, [pc, #144]	; (8006054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d01d      	beq.n	8006004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a22      	ldr	r2, [pc, #136]	; (8006058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d018      	beq.n	8006004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a21      	ldr	r2, [pc, #132]	; (800605c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d013      	beq.n	8006004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1f      	ldr	r2, [pc, #124]	; (8006060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00e      	beq.n	8006004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a1e      	ldr	r2, [pc, #120]	; (8006064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d009      	beq.n	8006004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a1c      	ldr	r2, [pc, #112]	; (8006068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d004      	beq.n	8006004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1b      	ldr	r2, [pc, #108]	; (800606c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d101      	bne.n	8006008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006004:	2301      	movs	r3, #1
 8006006:	e000      	b.n	800600a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006008:	2300      	movs	r3, #0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4b17      	ldr	r3, [pc, #92]	; (8006070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	461a      	mov	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a15      	ldr	r2, [pc, #84]	; (8006074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006020:	671a      	str	r2, [r3, #112]	; 0x70
 8006022:	e009      	b.n	8006038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4b14      	ldr	r3, [pc, #80]	; (8006078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	461a      	mov	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a11      	ldr	r2, [pc, #68]	; (800607c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006036:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	3b01      	subs	r3, #1
 800603c:	2201      	movs	r2, #1
 800603e:	409a      	lsls	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006044:	bf00      	nop
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	58025408 	.word	0x58025408
 8006054:	5802541c 	.word	0x5802541c
 8006058:	58025430 	.word	0x58025430
 800605c:	58025444 	.word	0x58025444
 8006060:	58025458 	.word	0x58025458
 8006064:	5802546c 	.word	0x5802546c
 8006068:	58025480 	.word	0x58025480
 800606c:	58025494 	.word	0x58025494
 8006070:	1600963f 	.word	0x1600963f
 8006074:	58025940 	.word	0x58025940
 8006078:	1000823f 	.word	0x1000823f
 800607c:	40020940 	.word	0x40020940

08006080 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006080:	b480      	push	{r7}
 8006082:	b089      	sub	sp, #36	; 0x24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800608e:	4b89      	ldr	r3, [pc, #548]	; (80062b4 <HAL_GPIO_Init+0x234>)
 8006090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006092:	e194      	b.n	80063be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	2101      	movs	r1, #1
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	fa01 f303 	lsl.w	r3, r1, r3
 80060a0:	4013      	ands	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 8186 	beq.w	80063b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f003 0303 	and.w	r3, r3, #3
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d005      	beq.n	80060c4 <HAL_GPIO_Init+0x44>
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f003 0303 	and.w	r3, r3, #3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d130      	bne.n	8006126 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	2203      	movs	r2, #3
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	43db      	mvns	r3, r3
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	4013      	ands	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060fa:	2201      	movs	r2, #1
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006102:	43db      	mvns	r3, r3
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	4013      	ands	r3, r2
 8006108:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	091b      	lsrs	r3, r3, #4
 8006110:	f003 0201 	and.w	r2, r3, #1
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	4313      	orrs	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f003 0303 	and.w	r3, r3, #3
 800612e:	2b03      	cmp	r3, #3
 8006130:	d017      	beq.n	8006162 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	2203      	movs	r2, #3
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	43db      	mvns	r3, r3
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	4013      	ands	r3, r2
 8006148:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	4313      	orrs	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d123      	bne.n	80061b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	08da      	lsrs	r2, r3, #3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3208      	adds	r2, #8
 8006176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800617a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	220f      	movs	r2, #15
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	43db      	mvns	r3, r3
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	4013      	ands	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	691a      	ldr	r2, [r3, #16]
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	08da      	lsrs	r2, r3, #3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3208      	adds	r2, #8
 80061b0:	69b9      	ldr	r1, [r7, #24]
 80061b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	2203      	movs	r2, #3
 80061c2:	fa02 f303 	lsl.w	r3, r2, r3
 80061c6:	43db      	mvns	r3, r3
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	4013      	ands	r3, r2
 80061cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f003 0203 	and.w	r2, r3, #3
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 80e0 	beq.w	80063b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061f8:	4b2f      	ldr	r3, [pc, #188]	; (80062b8 <HAL_GPIO_Init+0x238>)
 80061fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80061fe:	4a2e      	ldr	r2, [pc, #184]	; (80062b8 <HAL_GPIO_Init+0x238>)
 8006200:	f043 0302 	orr.w	r3, r3, #2
 8006204:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8006208:	4b2b      	ldr	r3, [pc, #172]	; (80062b8 <HAL_GPIO_Init+0x238>)
 800620a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006216:	4a29      	ldr	r2, [pc, #164]	; (80062bc <HAL_GPIO_Init+0x23c>)
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	089b      	lsrs	r3, r3, #2
 800621c:	3302      	adds	r3, #2
 800621e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	220f      	movs	r2, #15
 800622e:	fa02 f303 	lsl.w	r3, r2, r3
 8006232:	43db      	mvns	r3, r3
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	4013      	ands	r3, r2
 8006238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a20      	ldr	r2, [pc, #128]	; (80062c0 <HAL_GPIO_Init+0x240>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d052      	beq.n	80062e8 <HAL_GPIO_Init+0x268>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a1f      	ldr	r2, [pc, #124]	; (80062c4 <HAL_GPIO_Init+0x244>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d031      	beq.n	80062ae <HAL_GPIO_Init+0x22e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a1e      	ldr	r2, [pc, #120]	; (80062c8 <HAL_GPIO_Init+0x248>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d02b      	beq.n	80062aa <HAL_GPIO_Init+0x22a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a1d      	ldr	r2, [pc, #116]	; (80062cc <HAL_GPIO_Init+0x24c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d025      	beq.n	80062a6 <HAL_GPIO_Init+0x226>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a1c      	ldr	r2, [pc, #112]	; (80062d0 <HAL_GPIO_Init+0x250>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d01f      	beq.n	80062a2 <HAL_GPIO_Init+0x222>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a1b      	ldr	r2, [pc, #108]	; (80062d4 <HAL_GPIO_Init+0x254>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d019      	beq.n	800629e <HAL_GPIO_Init+0x21e>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a1a      	ldr	r2, [pc, #104]	; (80062d8 <HAL_GPIO_Init+0x258>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <HAL_GPIO_Init+0x21a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a19      	ldr	r2, [pc, #100]	; (80062dc <HAL_GPIO_Init+0x25c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00d      	beq.n	8006296 <HAL_GPIO_Init+0x216>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a18      	ldr	r2, [pc, #96]	; (80062e0 <HAL_GPIO_Init+0x260>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d007      	beq.n	8006292 <HAL_GPIO_Init+0x212>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a17      	ldr	r2, [pc, #92]	; (80062e4 <HAL_GPIO_Init+0x264>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d101      	bne.n	800628e <HAL_GPIO_Init+0x20e>
 800628a:	2309      	movs	r3, #9
 800628c:	e02d      	b.n	80062ea <HAL_GPIO_Init+0x26a>
 800628e:	230a      	movs	r3, #10
 8006290:	e02b      	b.n	80062ea <HAL_GPIO_Init+0x26a>
 8006292:	2308      	movs	r3, #8
 8006294:	e029      	b.n	80062ea <HAL_GPIO_Init+0x26a>
 8006296:	2307      	movs	r3, #7
 8006298:	e027      	b.n	80062ea <HAL_GPIO_Init+0x26a>
 800629a:	2306      	movs	r3, #6
 800629c:	e025      	b.n	80062ea <HAL_GPIO_Init+0x26a>
 800629e:	2305      	movs	r3, #5
 80062a0:	e023      	b.n	80062ea <HAL_GPIO_Init+0x26a>
 80062a2:	2304      	movs	r3, #4
 80062a4:	e021      	b.n	80062ea <HAL_GPIO_Init+0x26a>
 80062a6:	2303      	movs	r3, #3
 80062a8:	e01f      	b.n	80062ea <HAL_GPIO_Init+0x26a>
 80062aa:	2302      	movs	r3, #2
 80062ac:	e01d      	b.n	80062ea <HAL_GPIO_Init+0x26a>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e01b      	b.n	80062ea <HAL_GPIO_Init+0x26a>
 80062b2:	bf00      	nop
 80062b4:	58000080 	.word	0x58000080
 80062b8:	58024400 	.word	0x58024400
 80062bc:	58000400 	.word	0x58000400
 80062c0:	58020000 	.word	0x58020000
 80062c4:	58020400 	.word	0x58020400
 80062c8:	58020800 	.word	0x58020800
 80062cc:	58020c00 	.word	0x58020c00
 80062d0:	58021000 	.word	0x58021000
 80062d4:	58021400 	.word	0x58021400
 80062d8:	58021800 	.word	0x58021800
 80062dc:	58021c00 	.word	0x58021c00
 80062e0:	58022000 	.word	0x58022000
 80062e4:	58022400 	.word	0x58022400
 80062e8:	2300      	movs	r3, #0
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	f002 0203 	and.w	r2, r2, #3
 80062f0:	0092      	lsls	r2, r2, #2
 80062f2:	4093      	lsls	r3, r2
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062fa:	4938      	ldr	r1, [pc, #224]	; (80063dc <HAL_GPIO_Init+0x35c>)
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	089b      	lsrs	r3, r3, #2
 8006300:	3302      	adds	r3, #2
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	43db      	mvns	r3, r3
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	4013      	ands	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	4313      	orrs	r3, r2
 800632c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800632e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	43db      	mvns	r3, r3
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	4013      	ands	r3, r2
 8006346:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800635c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	43db      	mvns	r3, r3
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	4013      	ands	r3, r2
 8006372:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	43db      	mvns	r3, r3
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	4013      	ands	r3, r2
 800639c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	3301      	adds	r3, #1
 80063bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	fa22 f303 	lsr.w	r3, r2, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f47f ae63 	bne.w	8006094 <HAL_GPIO_Init+0x14>
  }
}
 80063ce:	bf00      	nop
 80063d0:	bf00      	nop
 80063d2:	3724      	adds	r7, #36	; 0x24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	58000400 	.word	0x58000400

080063e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	807b      	strh	r3, [r7, #2]
 80063ec:	4613      	mov	r3, r2
 80063ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063f0:	787b      	ldrb	r3, [r7, #1]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063f6:	887a      	ldrh	r2, [r7, #2]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063fc:	e003      	b.n	8006406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063fe:	887b      	ldrh	r3, [r7, #2]
 8006400:	041a      	lsls	r2, r3, #16
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	619a      	str	r2, [r3, #24]
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006412:	b480      	push	{r7}
 8006414:	b085      	sub	sp, #20
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006424:	887a      	ldrh	r2, [r7, #2]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4013      	ands	r3, r2
 800642a:	041a      	lsls	r2, r3, #16
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	43d9      	mvns	r1, r3
 8006430:	887b      	ldrh	r3, [r7, #2]
 8006432:	400b      	ands	r3, r1
 8006434:	431a      	orrs	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	619a      	str	r2, [r3, #24]
}
 800643a:	bf00      	nop
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b082      	sub	sp, #8
 800644a:	af00      	add	r7, sp, #0
 800644c:	4603      	mov	r3, r0
 800644e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006454:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006458:	88fb      	ldrh	r3, [r7, #6]
 800645a:	4013      	ands	r3, r2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d008      	beq.n	8006472 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006460:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006464:	88fb      	ldrh	r3, [r7, #6]
 8006466:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800646a:	88fb      	ldrh	r3, [r7, #6]
 800646c:	4618      	mov	r0, r3
 800646e:	f7fb f8f9 	bl	8001664 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006472:	bf00      	nop
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006484:	4b19      	ldr	r3, [pc, #100]	; (80064ec <HAL_PWREx_ConfigSupply+0x70>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b04      	cmp	r3, #4
 800648e:	d00a      	beq.n	80064a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006490:	4b16      	ldr	r3, [pc, #88]	; (80064ec <HAL_PWREx_ConfigSupply+0x70>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	429a      	cmp	r2, r3
 800649c:	d001      	beq.n	80064a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e01f      	b.n	80064e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e01d      	b.n	80064e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <HAL_PWREx_ConfigSupply+0x70>)
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f023 0207 	bic.w	r2, r3, #7
 80064ae:	490f      	ldr	r1, [pc, #60]	; (80064ec <HAL_PWREx_ConfigSupply+0x70>)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80064b6:	f7fc fd85 	bl	8002fc4 <HAL_GetTick>
 80064ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064bc:	e009      	b.n	80064d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064be:	f7fc fd81 	bl	8002fc4 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064cc:	d901      	bls.n	80064d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e007      	b.n	80064e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064d2:	4b06      	ldr	r3, [pc, #24]	; (80064ec <HAL_PWREx_ConfigSupply+0x70>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064de:	d1ee      	bne.n	80064be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	58024800 	.word	0x58024800

080064f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08c      	sub	sp, #48	; 0x30
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e3f6      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 80b5 	beq.w	800667a <HAL_RCC_OscConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006510:	4b96      	ldr	r3, [pc, #600]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800651a:	4b94      	ldr	r3, [pc, #592]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006522:	2b10      	cmp	r3, #16
 8006524:	d007      	beq.n	8006536 <HAL_RCC_OscConfig+0x46>
 8006526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006528:	2b18      	cmp	r3, #24
 800652a:	d112      	bne.n	8006552 <HAL_RCC_OscConfig+0x62>
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	f003 0303 	and.w	r3, r3, #3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d10d      	bne.n	8006552 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006536:	4b8d      	ldr	r3, [pc, #564]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 809a 	beq.w	8006678 <HAL_RCC_OscConfig+0x188>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	f040 8095 	bne.w	8006678 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e3ce      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655a:	d106      	bne.n	800656a <HAL_RCC_OscConfig+0x7a>
 800655c:	4b83      	ldr	r3, [pc, #524]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a82      	ldr	r2, [pc, #520]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 8006562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	e058      	b.n	800661c <HAL_RCC_OscConfig+0x12c>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d112      	bne.n	8006598 <HAL_RCC_OscConfig+0xa8>
 8006572:	4b7e      	ldr	r3, [pc, #504]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a7d      	ldr	r2, [pc, #500]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 8006578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	4b7b      	ldr	r3, [pc, #492]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a7a      	ldr	r2, [pc, #488]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 8006584:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	4b78      	ldr	r3, [pc, #480]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a77      	ldr	r2, [pc, #476]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 8006590:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	e041      	b.n	800661c <HAL_RCC_OscConfig+0x12c>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065a0:	d112      	bne.n	80065c8 <HAL_RCC_OscConfig+0xd8>
 80065a2:	4b72      	ldr	r3, [pc, #456]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a71      	ldr	r2, [pc, #452]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80065a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	4b6f      	ldr	r3, [pc, #444]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a6e      	ldr	r2, [pc, #440]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80065b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	4b6c      	ldr	r3, [pc, #432]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a6b      	ldr	r2, [pc, #428]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80065c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065c4:	6013      	str	r3, [r2, #0]
 80065c6:	e029      	b.n	800661c <HAL_RCC_OscConfig+0x12c>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80065d0:	d112      	bne.n	80065f8 <HAL_RCC_OscConfig+0x108>
 80065d2:	4b66      	ldr	r3, [pc, #408]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a65      	ldr	r2, [pc, #404]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80065d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	4b63      	ldr	r3, [pc, #396]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a62      	ldr	r2, [pc, #392]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80065e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	4b60      	ldr	r3, [pc, #384]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a5f      	ldr	r2, [pc, #380]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80065f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	e011      	b.n	800661c <HAL_RCC_OscConfig+0x12c>
 80065f8:	4b5c      	ldr	r3, [pc, #368]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a5b      	ldr	r2, [pc, #364]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80065fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	4b59      	ldr	r3, [pc, #356]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a58      	ldr	r2, [pc, #352]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 800660a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	4b56      	ldr	r3, [pc, #344]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a55      	ldr	r2, [pc, #340]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 8006616:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800661a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d014      	beq.n	800664e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006624:	f7fc fcce 	bl	8002fc4 <HAL_GetTick>
 8006628:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800662a:	e009      	b.n	8006640 <HAL_RCC_OscConfig+0x150>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800662c:	f7fc fcca 	bl	8002fc4 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e357      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006640:	4b4a      	ldr	r3, [pc, #296]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0ef      	beq.n	800662c <HAL_RCC_OscConfig+0x13c>
 800664c:	e015      	b.n	800667a <HAL_RCC_OscConfig+0x18a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664e:	f7fc fcb9 	bl	8002fc4 <HAL_GetTick>
 8006652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006654:	e009      	b.n	800666a <HAL_RCC_OscConfig+0x17a>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006656:	f7fc fcb5 	bl	8002fc4 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e342      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800666a:	4b40      	ldr	r3, [pc, #256]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1ef      	bne.n	8006656 <HAL_RCC_OscConfig+0x166>
 8006676:	e000      	b.n	800667a <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 808d 	beq.w	80067a2 <HAL_RCC_OscConfig+0x2b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006688:	4b38      	ldr	r3, [pc, #224]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006690:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006692:	4b36      	ldr	r3, [pc, #216]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d007      	beq.n	80066ae <HAL_RCC_OscConfig+0x1be>
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	2b18      	cmp	r3, #24
 80066a2:	d137      	bne.n	8006714 <HAL_RCC_OscConfig+0x224>
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d132      	bne.n	8006714 <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066ae:	4b2f      	ldr	r3, [pc, #188]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0304 	and.w	r3, r3, #4
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <HAL_RCC_OscConfig+0x1d6>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e314      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066c6:	4b29      	ldr	r3, [pc, #164]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f023 0219 	bic.w	r2, r3, #25
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	4926      	ldr	r1, [pc, #152]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066d8:	f7fc fc74 	bl	8002fc4 <HAL_GetTick>
 80066dc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066de:	e008      	b.n	80066f2 <HAL_RCC_OscConfig+0x202>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066e0:	f7fc fc70 	bl	8002fc4 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_OscConfig+0x202>
            {
              return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e2fe      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066f2:	4b1e      	ldr	r3, [pc, #120]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0f0      	beq.n	80066e0 <HAL_RCC_OscConfig+0x1f0>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066fe:	4b1b      	ldr	r3, [pc, #108]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	061b      	lsls	r3, r3, #24
 800670c:	4917      	ldr	r1, [pc, #92]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 800670e:	4313      	orrs	r3, r2
 8006710:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006712:	e046      	b.n	80067a2 <HAL_RCC_OscConfig+0x2b2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d029      	beq.n	8006770 <HAL_RCC_OscConfig+0x280>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800671c:	4b13      	ldr	r3, [pc, #76]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f023 0219 	bic.w	r2, r3, #25
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	4910      	ldr	r1, [pc, #64]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 800672a:	4313      	orrs	r3, r2
 800672c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672e:	f7fc fc49 	bl	8002fc4 <HAL_GetTick>
 8006732:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006734:	e008      	b.n	8006748 <HAL_RCC_OscConfig+0x258>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006736:	f7fc fc45 	bl	8002fc4 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d901      	bls.n	8006748 <HAL_RCC_OscConfig+0x258>
          {
            return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e2d3      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006748:	4b08      	ldr	r3, [pc, #32]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b00      	cmp	r3, #0
 8006752:	d0f0      	beq.n	8006736 <HAL_RCC_OscConfig+0x246>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006754:	4b05      	ldr	r3, [pc, #20]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	061b      	lsls	r3, r3, #24
 8006762:	4902      	ldr	r1, [pc, #8]	; (800676c <HAL_RCC_OscConfig+0x27c>)
 8006764:	4313      	orrs	r3, r2
 8006766:	604b      	str	r3, [r1, #4]
 8006768:	e01b      	b.n	80067a2 <HAL_RCC_OscConfig+0x2b2>
 800676a:	bf00      	nop
 800676c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006770:	4b97      	ldr	r3, [pc, #604]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a96      	ldr	r2, [pc, #600]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 8006776:	f023 0301 	bic.w	r3, r3, #1
 800677a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677c:	f7fc fc22 	bl	8002fc4 <HAL_GetTick>
 8006780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006782:	e008      	b.n	8006796 <HAL_RCC_OscConfig+0x2a6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006784:	f7fc fc1e 	bl	8002fc4 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e2ac      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006796:	4b8e      	ldr	r3, [pc, #568]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0304 	and.w	r3, r3, #4
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1f0      	bne.n	8006784 <HAL_RCC_OscConfig+0x294>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d06a      	beq.n	8006884 <HAL_RCC_OscConfig+0x394>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067ae:	4b88      	ldr	r3, [pc, #544]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067b8:	4b85      	ldr	r3, [pc, #532]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 80067ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067bc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d007      	beq.n	80067d4 <HAL_RCC_OscConfig+0x2e4>
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	2b18      	cmp	r3, #24
 80067c8:	d11b      	bne.n	8006802 <HAL_RCC_OscConfig+0x312>
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f003 0303 	and.w	r3, r3, #3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d116      	bne.n	8006802 <HAL_RCC_OscConfig+0x312>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067d4:	4b7e      	ldr	r3, [pc, #504]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <HAL_RCC_OscConfig+0x2fc>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	2b80      	cmp	r3, #128	; 0x80
 80067e6:	d001      	beq.n	80067ec <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e281      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067ec:	4b78      	ldr	r3, [pc, #480]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	061b      	lsls	r3, r3, #24
 80067fa:	4975      	ldr	r1, [pc, #468]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006800:	e040      	b.n	8006884 <HAL_RCC_OscConfig+0x394>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d023      	beq.n	8006852 <HAL_RCC_OscConfig+0x362>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800680a:	4b71      	ldr	r3, [pc, #452]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a70      	ldr	r2, [pc, #448]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 8006810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006816:	f7fc fbd5 	bl	8002fc4 <HAL_GetTick>
 800681a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800681c:	e008      	b.n	8006830 <HAL_RCC_OscConfig+0x340>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800681e:	f7fc fbd1 	bl	8002fc4 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	2b02      	cmp	r3, #2
 800682a:	d901      	bls.n	8006830 <HAL_RCC_OscConfig+0x340>
          {
            return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e25f      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006830:	4b67      	ldr	r3, [pc, #412]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006838:	2b00      	cmp	r3, #0
 800683a:	d0f0      	beq.n	800681e <HAL_RCC_OscConfig+0x32e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800683c:	4b64      	ldr	r3, [pc, #400]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	061b      	lsls	r3, r3, #24
 800684a:	4961      	ldr	r1, [pc, #388]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 800684c:	4313      	orrs	r3, r2
 800684e:	60cb      	str	r3, [r1, #12]
 8006850:	e018      	b.n	8006884 <HAL_RCC_OscConfig+0x394>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006852:	4b5f      	ldr	r3, [pc, #380]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a5e      	ldr	r2, [pc, #376]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 8006858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800685c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685e:	f7fc fbb1 	bl	8002fc4 <HAL_GetTick>
 8006862:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006864:	e008      	b.n	8006878 <HAL_RCC_OscConfig+0x388>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006866:	f7fc fbad 	bl	8002fc4 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	2b02      	cmp	r3, #2
 8006872:	d901      	bls.n	8006878 <HAL_RCC_OscConfig+0x388>
          {
            return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e23b      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006878:	4b55      	ldr	r3, [pc, #340]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1f0      	bne.n	8006866 <HAL_RCC_OscConfig+0x376>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0308 	and.w	r3, r3, #8
 800688c:	2b00      	cmp	r3, #0
 800688e:	d036      	beq.n	80068fe <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d019      	beq.n	80068cc <HAL_RCC_OscConfig+0x3dc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006898:	4b4d      	ldr	r3, [pc, #308]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 800689a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800689c:	4a4c      	ldr	r2, [pc, #304]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 800689e:	f043 0301 	orr.w	r3, r3, #1
 80068a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a4:	f7fc fb8e 	bl	8002fc4 <HAL_GetTick>
 80068a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0x3ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068ac:	f7fc fb8a 	bl	8002fc4 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e218      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068be:	4b44      	ldr	r3, [pc, #272]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 80068c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0f0      	beq.n	80068ac <HAL_RCC_OscConfig+0x3bc>
 80068ca:	e018      	b.n	80068fe <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068cc:	4b40      	ldr	r3, [pc, #256]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 80068ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d0:	4a3f      	ldr	r2, [pc, #252]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 80068d2:	f023 0301 	bic.w	r3, r3, #1
 80068d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d8:	f7fc fb74 	bl	8002fc4 <HAL_GetTick>
 80068dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068e0:	f7fc fb70 	bl	8002fc4 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e1fe      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068f2:	4b37      	ldr	r3, [pc, #220]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 80068f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f0      	bne.n	80068e0 <HAL_RCC_OscConfig+0x3f0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b00      	cmp	r3, #0
 8006908:	d036      	beq.n	8006978 <HAL_RCC_OscConfig+0x488>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d019      	beq.n	8006946 <HAL_RCC_OscConfig+0x456>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006912:	4b2f      	ldr	r3, [pc, #188]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a2e      	ldr	r2, [pc, #184]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 8006918:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800691c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800691e:	f7fc fb51 	bl	8002fc4 <HAL_GetTick>
 8006922:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006924:	e008      	b.n	8006938 <HAL_RCC_OscConfig+0x448>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006926:	f7fc fb4d 	bl	8002fc4 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d901      	bls.n	8006938 <HAL_RCC_OscConfig+0x448>
        {
          return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e1db      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006938:	4b25      	ldr	r3, [pc, #148]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0f0      	beq.n	8006926 <HAL_RCC_OscConfig+0x436>
 8006944:	e018      	b.n	8006978 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006946:	4b22      	ldr	r3, [pc, #136]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a21      	ldr	r2, [pc, #132]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 800694c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006950:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006952:	f7fc fb37 	bl	8002fc4 <HAL_GetTick>
 8006956:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006958:	e008      	b.n	800696c <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800695a:	f7fc fb33 	bl	8002fc4 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e1c1      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800696c:	4b18      	ldr	r3, [pc, #96]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1f0      	bne.n	800695a <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0304 	and.w	r3, r3, #4
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 80af 	beq.w	8006ae4 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006986:	4b13      	ldr	r3, [pc, #76]	; (80069d4 <HAL_RCC_OscConfig+0x4e4>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a12      	ldr	r2, [pc, #72]	; (80069d4 <HAL_RCC_OscConfig+0x4e4>)
 800698c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006990:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006992:	f7fc fb17 	bl	8002fc4 <HAL_GetTick>
 8006996:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x4bc>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800699a:	f7fc fb13 	bl	8002fc4 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b64      	cmp	r3, #100	; 0x64
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x4bc>
      {
        return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e1a1      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069ac:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <HAL_RCC_OscConfig+0x4e4>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0f0      	beq.n	800699a <HAL_RCC_OscConfig+0x4aa>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d10b      	bne.n	80069d8 <HAL_RCC_OscConfig+0x4e8>
 80069c0:	4b03      	ldr	r3, [pc, #12]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 80069c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c4:	4a02      	ldr	r2, [pc, #8]	; (80069d0 <HAL_RCC_OscConfig+0x4e0>)
 80069c6:	f043 0301 	orr.w	r3, r3, #1
 80069ca:	6713      	str	r3, [r2, #112]	; 0x70
 80069cc:	e05b      	b.n	8006a86 <HAL_RCC_OscConfig+0x596>
 80069ce:	bf00      	nop
 80069d0:	58024400 	.word	0x58024400
 80069d4:	58024800 	.word	0x58024800
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d112      	bne.n	8006a06 <HAL_RCC_OscConfig+0x516>
 80069e0:	4b9d      	ldr	r3, [pc, #628]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 80069e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e4:	4a9c      	ldr	r2, [pc, #624]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 80069e6:	f023 0301 	bic.w	r3, r3, #1
 80069ea:	6713      	str	r3, [r2, #112]	; 0x70
 80069ec:	4b9a      	ldr	r3, [pc, #616]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 80069ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f0:	4a99      	ldr	r2, [pc, #612]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 80069f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069f6:	6713      	str	r3, [r2, #112]	; 0x70
 80069f8:	4b97      	ldr	r3, [pc, #604]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 80069fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fc:	4a96      	ldr	r2, [pc, #600]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 80069fe:	f023 0304 	bic.w	r3, r3, #4
 8006a02:	6713      	str	r3, [r2, #112]	; 0x70
 8006a04:	e03f      	b.n	8006a86 <HAL_RCC_OscConfig+0x596>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	2b05      	cmp	r3, #5
 8006a0c:	d112      	bne.n	8006a34 <HAL_RCC_OscConfig+0x544>
 8006a0e:	4b92      	ldr	r3, [pc, #584]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a12:	4a91      	ldr	r2, [pc, #580]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a14:	f043 0304 	orr.w	r3, r3, #4
 8006a18:	6713      	str	r3, [r2, #112]	; 0x70
 8006a1a:	4b8f      	ldr	r3, [pc, #572]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	4a8e      	ldr	r2, [pc, #568]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a24:	6713      	str	r3, [r2, #112]	; 0x70
 8006a26:	4b8c      	ldr	r3, [pc, #560]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2a:	4a8b      	ldr	r2, [pc, #556]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	6713      	str	r3, [r2, #112]	; 0x70
 8006a32:	e028      	b.n	8006a86 <HAL_RCC_OscConfig+0x596>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	2b85      	cmp	r3, #133	; 0x85
 8006a3a:	d112      	bne.n	8006a62 <HAL_RCC_OscConfig+0x572>
 8006a3c:	4b86      	ldr	r3, [pc, #536]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a40:	4a85      	ldr	r2, [pc, #532]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a42:	f043 0304 	orr.w	r3, r3, #4
 8006a46:	6713      	str	r3, [r2, #112]	; 0x70
 8006a48:	4b83      	ldr	r3, [pc, #524]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4c:	4a82      	ldr	r2, [pc, #520]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a52:	6713      	str	r3, [r2, #112]	; 0x70
 8006a54:	4b80      	ldr	r3, [pc, #512]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a58:	4a7f      	ldr	r2, [pc, #508]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a5a:	f043 0301 	orr.w	r3, r3, #1
 8006a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a60:	e011      	b.n	8006a86 <HAL_RCC_OscConfig+0x596>
 8006a62:	4b7d      	ldr	r3, [pc, #500]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a66:	4a7c      	ldr	r2, [pc, #496]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a68:	f023 0301 	bic.w	r3, r3, #1
 8006a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a6e:	4b7a      	ldr	r3, [pc, #488]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a72:	4a79      	ldr	r2, [pc, #484]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a74:	f023 0304 	bic.w	r3, r3, #4
 8006a78:	6713      	str	r3, [r2, #112]	; 0x70
 8006a7a:	4b77      	ldr	r3, [pc, #476]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7e:	4a76      	ldr	r2, [pc, #472]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d015      	beq.n	8006aba <HAL_RCC_OscConfig+0x5ca>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a8e:	f7fc fa99 	bl	8002fc4 <HAL_GetTick>
 8006a92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a94:	e00a      	b.n	8006aac <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a96:	f7fc fa95 	bl	8002fc4 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d901      	bls.n	8006aac <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e121      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006aac:	4b6a      	ldr	r3, [pc, #424]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0ee      	beq.n	8006a96 <HAL_RCC_OscConfig+0x5a6>
 8006ab8:	e014      	b.n	8006ae4 <HAL_RCC_OscConfig+0x5f4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aba:	f7fc fa83 	bl	8002fc4 <HAL_GetTick>
 8006abe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ac0:	e00a      	b.n	8006ad8 <HAL_RCC_OscConfig+0x5e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ac2:	f7fc fa7f 	bl	8002fc4 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x5e8>
        {
          return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e10b      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ad8:	4b5f      	ldr	r3, [pc, #380]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1ee      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x5d2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 8100 	beq.w	8006cee <HAL_RCC_OscConfig+0x7fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006aee:	4b5a      	ldr	r3, [pc, #360]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006af6:	2b18      	cmp	r3, #24
 8006af8:	f000 80bb 	beq.w	8006c72 <HAL_RCC_OscConfig+0x782>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	f040 8095 	bne.w	8006c30 <HAL_RCC_OscConfig+0x740>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b06:	4b54      	ldr	r3, [pc, #336]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a53      	ldr	r2, [pc, #332]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006b0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b12:	f7fc fa57 	bl	8002fc4 <HAL_GetTick>
 8006b16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b18:	e008      	b.n	8006b2c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b1a:	f7fc fa53 	bl	8002fc4 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e0e1      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b2c:	4b4a      	ldr	r3, [pc, #296]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1f0      	bne.n	8006b1a <HAL_RCC_OscConfig+0x62a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b38:	4b47      	ldr	r3, [pc, #284]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b3c:	4b47      	ldr	r3, [pc, #284]	; (8006c5c <HAL_RCC_OscConfig+0x76c>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b48:	0112      	lsls	r2, r2, #4
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	4942      	ldr	r1, [pc, #264]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	628b      	str	r3, [r1, #40]	; 0x28
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	3b01      	subs	r3, #1
 8006b58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b60:	3b01      	subs	r3, #1
 8006b62:	025b      	lsls	r3, r3, #9
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	041b      	lsls	r3, r3, #16
 8006b70:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b74:	431a      	orrs	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	061b      	lsls	r3, r3, #24
 8006b7e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b82:	4935      	ldr	r1, [pc, #212]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006b88:	4b33      	ldr	r3, [pc, #204]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	4a32      	ldr	r2, [pc, #200]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006b8e:	f023 0301 	bic.w	r3, r3, #1
 8006b92:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b94:	4b30      	ldr	r3, [pc, #192]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b98:	4b31      	ldr	r3, [pc, #196]	; (8006c60 <HAL_RCC_OscConfig+0x770>)
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ba0:	00d2      	lsls	r2, r2, #3
 8006ba2:	492d      	ldr	r1, [pc, #180]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ba8:	4b2b      	ldr	r3, [pc, #172]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	f023 020c 	bic.w	r2, r3, #12
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	4928      	ldr	r1, [pc, #160]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006bba:	4b27      	ldr	r3, [pc, #156]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbe:	f023 0202 	bic.w	r2, r3, #2
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc6:	4924      	ldr	r1, [pc, #144]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006bcc:	4b22      	ldr	r3, [pc, #136]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	4a21      	ldr	r2, [pc, #132]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd8:	4b1f      	ldr	r3, [pc, #124]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	4a1e      	ldr	r2, [pc, #120]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006be2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006be4:	4b1c      	ldr	r3, [pc, #112]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	4a1b      	ldr	r2, [pc, #108]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006bea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006bf0:	4b19      	ldr	r3, [pc, #100]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	4a18      	ldr	r2, [pc, #96]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006bf6:	f043 0301 	orr.w	r3, r3, #1
 8006bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bfc:	4b16      	ldr	r3, [pc, #88]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a15      	ldr	r2, [pc, #84]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c08:	f7fc f9dc 	bl	8002fc4 <HAL_GetTick>
 8006c0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x732>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c10:	f7fc f9d8 	bl	8002fc4 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x732>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e066      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c22:	4b0d      	ldr	r3, [pc, #52]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0f0      	beq.n	8006c10 <HAL_RCC_OscConfig+0x720>
 8006c2e:	e05e      	b.n	8006cee <HAL_RCC_OscConfig+0x7fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c30:	4b09      	ldr	r3, [pc, #36]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a08      	ldr	r2, [pc, #32]	; (8006c58 <HAL_RCC_OscConfig+0x768>)
 8006c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3c:	f7fc f9c2 	bl	8002fc4 <HAL_GetTick>
 8006c40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c42:	e00f      	b.n	8006c64 <HAL_RCC_OscConfig+0x774>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c44:	f7fc f9be 	bl	8002fc4 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d908      	bls.n	8006c64 <HAL_RCC_OscConfig+0x774>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e04c      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
 8006c56:	bf00      	nop
 8006c58:	58024400 	.word	0x58024400
 8006c5c:	fffffc0c 	.word	0xfffffc0c
 8006c60:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c64:	4b24      	ldr	r3, [pc, #144]	; (8006cf8 <HAL_RCC_OscConfig+0x808>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e9      	bne.n	8006c44 <HAL_RCC_OscConfig+0x754>
 8006c70:	e03d      	b.n	8006cee <HAL_RCC_OscConfig+0x7fe>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006c72:	4b21      	ldr	r3, [pc, #132]	; (8006cf8 <HAL_RCC_OscConfig+0x808>)
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006c78:	4b1f      	ldr	r3, [pc, #124]	; (8006cf8 <HAL_RCC_OscConfig+0x808>)
 8006c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d031      	beq.n	8006cea <HAL_RCC_OscConfig+0x7fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f003 0203 	and.w	r2, r3, #3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d12a      	bne.n	8006cea <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	091b      	lsrs	r3, r3, #4
 8006c98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d122      	bne.n	8006cea <HAL_RCC_OscConfig+0x7fa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d11a      	bne.n	8006cea <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	0a5b      	lsrs	r3, r3, #9
 8006cb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d111      	bne.n	8006cea <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	0c1b      	lsrs	r3, r3, #16
 8006cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d108      	bne.n	8006cea <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	0e1b      	lsrs	r3, r3, #24
 8006cdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d001      	beq.n	8006cee <HAL_RCC_OscConfig+0x7fe>
      {
        return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <HAL_RCC_OscConfig+0x800>
      }
    }
  }
  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3730      	adds	r7, #48	; 0x30
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	58024400 	.word	0x58024400

08006cfc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e19c      	b.n	800704a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d10:	4b8a      	ldr	r3, [pc, #552]	; (8006f3c <HAL_RCC_ClockConfig+0x240>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 030f 	and.w	r3, r3, #15
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d910      	bls.n	8006d40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d1e:	4b87      	ldr	r3, [pc, #540]	; (8006f3c <HAL_RCC_ClockConfig+0x240>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f023 020f 	bic.w	r2, r3, #15
 8006d26:	4985      	ldr	r1, [pc, #532]	; (8006f3c <HAL_RCC_ClockConfig+0x240>)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d2e:	4b83      	ldr	r3, [pc, #524]	; (8006f3c <HAL_RCC_ClockConfig+0x240>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d001      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e184      	b.n	800704a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d010      	beq.n	8006d6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	4b7b      	ldr	r3, [pc, #492]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d908      	bls.n	8006d6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d5c:	4b78      	ldr	r3, [pc, #480]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	4975      	ldr	r1, [pc, #468]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d010      	beq.n	8006d9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695a      	ldr	r2, [r3, #20]
 8006d7e:	4b70      	ldr	r3, [pc, #448]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d908      	bls.n	8006d9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d8a:	4b6d      	ldr	r3, [pc, #436]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	496a      	ldr	r1, [pc, #424]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0310 	and.w	r3, r3, #16
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d010      	beq.n	8006dca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	699a      	ldr	r2, [r3, #24]
 8006dac:	4b64      	ldr	r3, [pc, #400]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d908      	bls.n	8006dca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006db8:	4b61      	ldr	r3, [pc, #388]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	495e      	ldr	r1, [pc, #376]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d010      	beq.n	8006df8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	69da      	ldr	r2, [r3, #28]
 8006dda:	4b59      	ldr	r3, [pc, #356]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d908      	bls.n	8006df8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006de6:	4b56      	ldr	r3, [pc, #344]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	4953      	ldr	r1, [pc, #332]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d010      	beq.n	8006e26 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68da      	ldr	r2, [r3, #12]
 8006e08:	4b4d      	ldr	r3, [pc, #308]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	f003 030f 	and.w	r3, r3, #15
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d908      	bls.n	8006e26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e14:	4b4a      	ldr	r3, [pc, #296]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	f023 020f 	bic.w	r2, r3, #15
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	4947      	ldr	r1, [pc, #284]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d055      	beq.n	8006ede <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e32:	4b43      	ldr	r3, [pc, #268]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	4940      	ldr	r1, [pc, #256]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d107      	bne.n	8006e5c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e4c:	4b3c      	ldr	r3, [pc, #240]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d121      	bne.n	8006e9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e0f6      	b.n	800704a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d107      	bne.n	8006e74 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e64:	4b36      	ldr	r3, [pc, #216]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d115      	bne.n	8006e9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e0ea      	b.n	800704a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d107      	bne.n	8006e8c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e7c:	4b30      	ldr	r3, [pc, #192]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d109      	bne.n	8006e9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e0de      	b.n	800704a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e8c:	4b2c      	ldr	r3, [pc, #176]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e0d6      	b.n	800704a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e9c:	4b28      	ldr	r3, [pc, #160]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f023 0207 	bic.w	r2, r3, #7
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	4925      	ldr	r1, [pc, #148]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eae:	f7fc f889 	bl	8002fc4 <HAL_GetTick>
 8006eb2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eb4:	e00a      	b.n	8006ecc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eb6:	f7fc f885 	bl	8002fc4 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d901      	bls.n	8006ecc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e0be      	b.n	800704a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ecc:	4b1c      	ldr	r3, [pc, #112]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d1eb      	bne.n	8006eb6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d010      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	4b14      	ldr	r3, [pc, #80]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	f003 030f 	and.w	r3, r3, #15
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d208      	bcs.n	8006f0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006efa:	4b11      	ldr	r3, [pc, #68]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	f023 020f 	bic.w	r2, r3, #15
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	490e      	ldr	r1, [pc, #56]	; (8006f40 <HAL_RCC_ClockConfig+0x244>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f0c:	4b0b      	ldr	r3, [pc, #44]	; (8006f3c <HAL_RCC_ClockConfig+0x240>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 030f 	and.w	r3, r3, #15
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d214      	bcs.n	8006f44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f1a:	4b08      	ldr	r3, [pc, #32]	; (8006f3c <HAL_RCC_ClockConfig+0x240>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f023 020f 	bic.w	r2, r3, #15
 8006f22:	4906      	ldr	r1, [pc, #24]	; (8006f3c <HAL_RCC_ClockConfig+0x240>)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f2a:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <HAL_RCC_ClockConfig+0x240>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 030f 	and.w	r3, r3, #15
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d005      	beq.n	8006f44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e086      	b.n	800704a <HAL_RCC_ClockConfig+0x34e>
 8006f3c:	52002000 	.word	0x52002000
 8006f40:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d010      	beq.n	8006f72 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	691a      	ldr	r2, [r3, #16]
 8006f54:	4b3f      	ldr	r3, [pc, #252]	; (8007054 <HAL_RCC_ClockConfig+0x358>)
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d208      	bcs.n	8006f72 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f60:	4b3c      	ldr	r3, [pc, #240]	; (8007054 <HAL_RCC_ClockConfig+0x358>)
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	4939      	ldr	r1, [pc, #228]	; (8007054 <HAL_RCC_ClockConfig+0x358>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0308 	and.w	r3, r3, #8
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d010      	beq.n	8006fa0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	695a      	ldr	r2, [r3, #20]
 8006f82:	4b34      	ldr	r3, [pc, #208]	; (8007054 <HAL_RCC_ClockConfig+0x358>)
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d208      	bcs.n	8006fa0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f8e:	4b31      	ldr	r3, [pc, #196]	; (8007054 <HAL_RCC_ClockConfig+0x358>)
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	492e      	ldr	r1, [pc, #184]	; (8007054 <HAL_RCC_ClockConfig+0x358>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0310 	and.w	r3, r3, #16
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d010      	beq.n	8006fce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	699a      	ldr	r2, [r3, #24]
 8006fb0:	4b28      	ldr	r3, [pc, #160]	; (8007054 <HAL_RCC_ClockConfig+0x358>)
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d208      	bcs.n	8006fce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006fbc:	4b25      	ldr	r3, [pc, #148]	; (8007054 <HAL_RCC_ClockConfig+0x358>)
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	4922      	ldr	r1, [pc, #136]	; (8007054 <HAL_RCC_ClockConfig+0x358>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0320 	and.w	r3, r3, #32
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d010      	beq.n	8006ffc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	69da      	ldr	r2, [r3, #28]
 8006fde:	4b1d      	ldr	r3, [pc, #116]	; (8007054 <HAL_RCC_ClockConfig+0x358>)
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d208      	bcs.n	8006ffc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006fea:	4b1a      	ldr	r3, [pc, #104]	; (8007054 <HAL_RCC_ClockConfig+0x358>)
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	4917      	ldr	r1, [pc, #92]	; (8007054 <HAL_RCC_ClockConfig+0x358>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006ffc:	f000 f834 	bl	8007068 <HAL_RCC_GetSysClockFreq>
 8007000:	4602      	mov	r2, r0
 8007002:	4b14      	ldr	r3, [pc, #80]	; (8007054 <HAL_RCC_ClockConfig+0x358>)
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	0a1b      	lsrs	r3, r3, #8
 8007008:	f003 030f 	and.w	r3, r3, #15
 800700c:	4912      	ldr	r1, [pc, #72]	; (8007058 <HAL_RCC_ClockConfig+0x35c>)
 800700e:	5ccb      	ldrb	r3, [r1, r3]
 8007010:	f003 031f 	and.w	r3, r3, #31
 8007014:	fa22 f303 	lsr.w	r3, r2, r3
 8007018:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800701a:	4b0e      	ldr	r3, [pc, #56]	; (8007054 <HAL_RCC_ClockConfig+0x358>)
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	4a0d      	ldr	r2, [pc, #52]	; (8007058 <HAL_RCC_ClockConfig+0x35c>)
 8007024:	5cd3      	ldrb	r3, [r2, r3]
 8007026:	f003 031f 	and.w	r3, r3, #31
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	fa22 f303 	lsr.w	r3, r2, r3
 8007030:	4a0a      	ldr	r2, [pc, #40]	; (800705c <HAL_RCC_ClockConfig+0x360>)
 8007032:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007034:	4a0a      	ldr	r2, [pc, #40]	; (8007060 <HAL_RCC_ClockConfig+0x364>)
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800703a:	4b0a      	ldr	r3, [pc, #40]	; (8007064 <HAL_RCC_ClockConfig+0x368>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4618      	mov	r0, r3
 8007040:	f7fb ff76 	bl	8002f30 <HAL_InitTick>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007048:	7bfb      	ldrb	r3, [r7, #15]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	58024400 	.word	0x58024400
 8007058:	08012890 	.word	0x08012890
 800705c:	2400000c 	.word	0x2400000c
 8007060:	24000008 	.word	0x24000008
 8007064:	24000010 	.word	0x24000010

08007068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007068:	b480      	push	{r7}
 800706a:	b089      	sub	sp, #36	; 0x24
 800706c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800706e:	4bb3      	ldr	r3, [pc, #716]	; (800733c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007076:	2b18      	cmp	r3, #24
 8007078:	f200 8155 	bhi.w	8007326 <HAL_RCC_GetSysClockFreq+0x2be>
 800707c:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <HAL_RCC_GetSysClockFreq+0x1c>)
 800707e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007082:	bf00      	nop
 8007084:	080070e9 	.word	0x080070e9
 8007088:	08007327 	.word	0x08007327
 800708c:	08007327 	.word	0x08007327
 8007090:	08007327 	.word	0x08007327
 8007094:	08007327 	.word	0x08007327
 8007098:	08007327 	.word	0x08007327
 800709c:	08007327 	.word	0x08007327
 80070a0:	08007327 	.word	0x08007327
 80070a4:	0800710f 	.word	0x0800710f
 80070a8:	08007327 	.word	0x08007327
 80070ac:	08007327 	.word	0x08007327
 80070b0:	08007327 	.word	0x08007327
 80070b4:	08007327 	.word	0x08007327
 80070b8:	08007327 	.word	0x08007327
 80070bc:	08007327 	.word	0x08007327
 80070c0:	08007327 	.word	0x08007327
 80070c4:	08007115 	.word	0x08007115
 80070c8:	08007327 	.word	0x08007327
 80070cc:	08007327 	.word	0x08007327
 80070d0:	08007327 	.word	0x08007327
 80070d4:	08007327 	.word	0x08007327
 80070d8:	08007327 	.word	0x08007327
 80070dc:	08007327 	.word	0x08007327
 80070e0:	08007327 	.word	0x08007327
 80070e4:	0800711b 	.word	0x0800711b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070e8:	4b94      	ldr	r3, [pc, #592]	; (800733c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0320 	and.w	r3, r3, #32
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d009      	beq.n	8007108 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070f4:	4b91      	ldr	r3, [pc, #580]	; (800733c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	08db      	lsrs	r3, r3, #3
 80070fa:	f003 0303 	and.w	r3, r3, #3
 80070fe:	4a90      	ldr	r2, [pc, #576]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007100:	fa22 f303 	lsr.w	r3, r2, r3
 8007104:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007106:	e111      	b.n	800732c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007108:	4b8d      	ldr	r3, [pc, #564]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800710a:	61bb      	str	r3, [r7, #24]
    break;
 800710c:	e10e      	b.n	800732c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800710e:	4b8d      	ldr	r3, [pc, #564]	; (8007344 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007110:	61bb      	str	r3, [r7, #24]
    break;
 8007112:	e10b      	b.n	800732c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007114:	4b8c      	ldr	r3, [pc, #560]	; (8007348 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007116:	61bb      	str	r3, [r7, #24]
    break;
 8007118:	e108      	b.n	800732c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800711a:	4b88      	ldr	r3, [pc, #544]	; (800733c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007124:	4b85      	ldr	r3, [pc, #532]	; (800733c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007128:	091b      	lsrs	r3, r3, #4
 800712a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800712e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007130:	4b82      	ldr	r3, [pc, #520]	; (800733c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800713a:	4b80      	ldr	r3, [pc, #512]	; (800733c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800713c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713e:	08db      	lsrs	r3, r3, #3
 8007140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	fb02 f303 	mul.w	r3, r2, r3
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007152:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80e1 	beq.w	8007320 <HAL_RCC_GetSysClockFreq+0x2b8>
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b02      	cmp	r3, #2
 8007162:	f000 8083 	beq.w	800726c <HAL_RCC_GetSysClockFreq+0x204>
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b02      	cmp	r3, #2
 800716a:	f200 80a1 	bhi.w	80072b0 <HAL_RCC_GetSysClockFreq+0x248>
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_RCC_GetSysClockFreq+0x114>
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d056      	beq.n	8007228 <HAL_RCC_GetSysClockFreq+0x1c0>
 800717a:	e099      	b.n	80072b0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800717c:	4b6f      	ldr	r3, [pc, #444]	; (800733c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0320 	and.w	r3, r3, #32
 8007184:	2b00      	cmp	r3, #0
 8007186:	d02d      	beq.n	80071e4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007188:	4b6c      	ldr	r3, [pc, #432]	; (800733c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	08db      	lsrs	r3, r3, #3
 800718e:	f003 0303 	and.w	r3, r3, #3
 8007192:	4a6b      	ldr	r2, [pc, #428]	; (8007340 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007194:	fa22 f303 	lsr.w	r3, r2, r3
 8007198:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	ee07 3a90 	vmov	s15, r3
 80071a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b2:	4b62      	ldr	r3, [pc, #392]	; (800733c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80071c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800734c <HAL_RCC_GetSysClockFreq+0x2e4>
 80071ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80071e2:	e087      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007350 <HAL_RCC_GetSysClockFreq+0x2e8>
 80071f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f6:	4b51      	ldr	r3, [pc, #324]	; (800733c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007206:	ed97 6a02 	vldr	s12, [r7, #8]
 800720a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800734c <HAL_RCC_GetSysClockFreq+0x2e4>
 800720e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800721a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800721e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007226:	e065      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007232:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007354 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800723a:	4b40      	ldr	r3, [pc, #256]	; (800733c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724a:	ed97 6a02 	vldr	s12, [r7, #8]
 800724e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800734c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800725a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800725e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800726a:	e043      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007276:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007358 <HAL_RCC_GetSysClockFreq+0x2f0>
 800727a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800727e:	4b2f      	ldr	r3, [pc, #188]	; (800733c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007292:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800734c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800729e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ae:	e021      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007354 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c2:	4b1e      	ldr	r3, [pc, #120]	; (800733c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80072d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800734c <HAL_RCC_GetSysClockFreq+0x2e4>
 80072da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072f2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80072f4:	4b11      	ldr	r3, [pc, #68]	; (800733c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f8:	0a5b      	lsrs	r3, r3, #9
 80072fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072fe:	3301      	adds	r3, #1
 8007300:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	ee07 3a90 	vmov	s15, r3
 8007308:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800730c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007318:	ee17 3a90 	vmov	r3, s15
 800731c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800731e:	e005      	b.n	800732c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	61bb      	str	r3, [r7, #24]
    break;
 8007324:	e002      	b.n	800732c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007326:	4b07      	ldr	r3, [pc, #28]	; (8007344 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007328:	61bb      	str	r3, [r7, #24]
    break;
 800732a:	bf00      	nop
  }

  return sysclockfreq;
 800732c:	69bb      	ldr	r3, [r7, #24]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3724      	adds	r7, #36	; 0x24
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	58024400 	.word	0x58024400
 8007340:	03d09000 	.word	0x03d09000
 8007344:	003d0900 	.word	0x003d0900
 8007348:	016e3600 	.word	0x016e3600
 800734c:	46000000 	.word	0x46000000
 8007350:	4c742400 	.word	0x4c742400
 8007354:	4a742400 	.word	0x4a742400
 8007358:	4bb71b00 	.word	0x4bb71b00

0800735c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007362:	f7ff fe81 	bl	8007068 <HAL_RCC_GetSysClockFreq>
 8007366:	4602      	mov	r2, r0
 8007368:	4b10      	ldr	r3, [pc, #64]	; (80073ac <HAL_RCC_GetHCLKFreq+0x50>)
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	0a1b      	lsrs	r3, r3, #8
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	490f      	ldr	r1, [pc, #60]	; (80073b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007374:	5ccb      	ldrb	r3, [r1, r3]
 8007376:	f003 031f 	and.w	r3, r3, #31
 800737a:	fa22 f303 	lsr.w	r3, r2, r3
 800737e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007380:	4b0a      	ldr	r3, [pc, #40]	; (80073ac <HAL_RCC_GetHCLKFreq+0x50>)
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	f003 030f 	and.w	r3, r3, #15
 8007388:	4a09      	ldr	r2, [pc, #36]	; (80073b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800738a:	5cd3      	ldrb	r3, [r2, r3]
 800738c:	f003 031f 	and.w	r3, r3, #31
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	fa22 f303 	lsr.w	r3, r2, r3
 8007396:	4a07      	ldr	r2, [pc, #28]	; (80073b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007398:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800739a:	4a07      	ldr	r2, [pc, #28]	; (80073b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80073a0:	4b04      	ldr	r3, [pc, #16]	; (80073b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80073a2:	681b      	ldr	r3, [r3, #0]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	58024400 	.word	0x58024400
 80073b0:	08012890 	.word	0x08012890
 80073b4:	2400000c 	.word	0x2400000c
 80073b8:	24000008 	.word	0x24000008

080073bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80073c0:	f7ff ffcc 	bl	800735c <HAL_RCC_GetHCLKFreq>
 80073c4:	4602      	mov	r2, r0
 80073c6:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	091b      	lsrs	r3, r3, #4
 80073cc:	f003 0307 	and.w	r3, r3, #7
 80073d0:	4904      	ldr	r1, [pc, #16]	; (80073e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073d2:	5ccb      	ldrb	r3, [r1, r3]
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80073dc:	4618      	mov	r0, r3
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	58024400 	.word	0x58024400
 80073e4:	08012890 	.word	0x08012890

080073e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80073ec:	f7ff ffb6 	bl	800735c <HAL_RCC_GetHCLKFreq>
 80073f0:	4602      	mov	r2, r0
 80073f2:	4b06      	ldr	r3, [pc, #24]	; (800740c <HAL_RCC_GetPCLK2Freq+0x24>)
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	0a1b      	lsrs	r3, r3, #8
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	4904      	ldr	r1, [pc, #16]	; (8007410 <HAL_RCC_GetPCLK2Freq+0x28>)
 80073fe:	5ccb      	ldrb	r3, [r1, r3]
 8007400:	f003 031f 	and.w	r3, r3, #31
 8007404:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007408:	4618      	mov	r0, r3
 800740a:	bd80      	pop	{r7, pc}
 800740c:	58024400 	.word	0x58024400
 8007410:	08012890 	.word	0x08012890

08007414 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800741c:	2300      	movs	r3, #0
 800741e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007420:	2300      	movs	r3, #0
 8007422:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d03f      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007434:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007438:	d02a      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800743a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800743e:	d824      	bhi.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007440:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007444:	d018      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800744a:	d81e      	bhi.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007454:	d007      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007456:	e018      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007458:	4b9f      	ldr	r3, [pc, #636]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	4a9e      	ldr	r2, [pc, #632]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800745e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007462:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007464:	e015      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3304      	adds	r3, #4
 800746a:	2102      	movs	r1, #2
 800746c:	4618      	mov	r0, r3
 800746e:	f001 ff1b 	bl	80092a8 <RCCEx_PLL2_Config>
 8007472:	4603      	mov	r3, r0
 8007474:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007476:	e00c      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3324      	adds	r3, #36	; 0x24
 800747c:	2102      	movs	r1, #2
 800747e:	4618      	mov	r0, r3
 8007480:	f001 ffc4 	bl	800940c <RCCEx_PLL3_Config>
 8007484:	4603      	mov	r3, r0
 8007486:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007488:	e003      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	75fb      	strb	r3, [r7, #23]
      break;
 800748e:	e000      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007492:	7dfb      	ldrb	r3, [r7, #23]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d109      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007498:	4b8f      	ldr	r3, [pc, #572]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800749a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800749c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074a4:	498c      	ldr	r1, [pc, #560]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	650b      	str	r3, [r1, #80]	; 0x50
 80074aa:	e001      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ac:	7dfb      	ldrb	r3, [r7, #23]
 80074ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d03d      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d826      	bhi.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80074c4:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80074c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ca:	bf00      	nop
 80074cc:	080074e1 	.word	0x080074e1
 80074d0:	080074ef 	.word	0x080074ef
 80074d4:	08007501 	.word	0x08007501
 80074d8:	08007519 	.word	0x08007519
 80074dc:	08007519 	.word	0x08007519
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e0:	4b7d      	ldr	r3, [pc, #500]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	4a7c      	ldr	r2, [pc, #496]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80074e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074ec:	e015      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3304      	adds	r3, #4
 80074f2:	2100      	movs	r1, #0
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 fed7 	bl	80092a8 <RCCEx_PLL2_Config>
 80074fa:	4603      	mov	r3, r0
 80074fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074fe:	e00c      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3324      	adds	r3, #36	; 0x24
 8007504:	2100      	movs	r1, #0
 8007506:	4618      	mov	r0, r3
 8007508:	f001 ff80 	bl	800940c <RCCEx_PLL3_Config>
 800750c:	4603      	mov	r3, r0
 800750e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007510:	e003      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	75fb      	strb	r3, [r7, #23]
      break;
 8007516:	e000      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d109      	bne.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007520:	4b6d      	ldr	r3, [pc, #436]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007524:	f023 0207 	bic.w	r2, r3, #7
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752c:	496a      	ldr	r1, [pc, #424]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800752e:	4313      	orrs	r3, r2
 8007530:	650b      	str	r3, [r1, #80]	; 0x50
 8007532:	e001      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007534:	7dfb      	ldrb	r3, [r7, #23]
 8007536:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007540:	2b00      	cmp	r3, #0
 8007542:	d04a      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007548:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800754c:	d031      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800754e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007552:	d82b      	bhi.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007558:	d02d      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800755a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800755e:	d825      	bhi.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007560:	2bc0      	cmp	r3, #192	; 0xc0
 8007562:	d02a      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007564:	2bc0      	cmp	r3, #192	; 0xc0
 8007566:	d821      	bhi.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007568:	2b80      	cmp	r3, #128	; 0x80
 800756a:	d016      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800756c:	2b80      	cmp	r3, #128	; 0x80
 800756e:	d81d      	bhi.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007574:	2b40      	cmp	r3, #64	; 0x40
 8007576:	d007      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8007578:	e018      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800757a:	4b57      	ldr	r3, [pc, #348]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	4a56      	ldr	r2, [pc, #344]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007584:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8007586:	e019      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3304      	adds	r3, #4
 800758c:	2100      	movs	r1, #0
 800758e:	4618      	mov	r0, r3
 8007590:	f001 fe8a 	bl	80092a8 <RCCEx_PLL2_Config>
 8007594:	4603      	mov	r3, r0
 8007596:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8007598:	e010      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3324      	adds	r3, #36	; 0x24
 800759e:	2100      	movs	r1, #0
 80075a0:	4618      	mov	r0, r3
 80075a2:	f001 ff33 	bl	800940c <RCCEx_PLL3_Config>
 80075a6:	4603      	mov	r3, r0
 80075a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80075aa:	e007      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	75fb      	strb	r3, [r7, #23]
      break;
 80075b0:	e004      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80075b2:	bf00      	nop
 80075b4:	e002      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80075b6:	bf00      	nop
 80075b8:	e000      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80075ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075bc:	7dfb      	ldrb	r3, [r7, #23]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d109      	bne.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80075c2:	4b45      	ldr	r3, [pc, #276]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80075c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ce:	4942      	ldr	r1, [pc, #264]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	650b      	str	r3, [r1, #80]	; 0x50
 80075d4:	e001      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
 80075d8:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d04f      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ea:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80075ee:	d036      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80075f0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80075f4:	d830      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80075f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075fa:	d032      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80075fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007600:	d82a      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007602:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007606:	d02e      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8007608:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800760c:	d824      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800760e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007612:	d018      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8007614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007618:	d81e      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800761e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007622:	d007      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8007624:	e018      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007626:	4b2c      	ldr	r3, [pc, #176]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	4a2b      	ldr	r2, [pc, #172]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800762c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007630:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007632:	e019      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	3304      	adds	r3, #4
 8007638:	2100      	movs	r1, #0
 800763a:	4618      	mov	r0, r3
 800763c:	f001 fe34 	bl	80092a8 <RCCEx_PLL2_Config>
 8007640:	4603      	mov	r3, r0
 8007642:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007644:	e010      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3324      	adds	r3, #36	; 0x24
 800764a:	2100      	movs	r1, #0
 800764c:	4618      	mov	r0, r3
 800764e:	f001 fedd 	bl	800940c <RCCEx_PLL3_Config>
 8007652:	4603      	mov	r3, r0
 8007654:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007656:	e007      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	75fb      	strb	r3, [r7, #23]
      break;
 800765c:	e004      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800765e:	bf00      	nop
 8007660:	e002      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007662:	bf00      	nop
 8007664:	e000      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007668:	7dfb      	ldrb	r3, [r7, #23]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d109      	bne.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800766e:	4b1a      	ldr	r3, [pc, #104]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007672:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800767a:	4917      	ldr	r1, [pc, #92]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800767c:	4313      	orrs	r3, r2
 800767e:	650b      	str	r3, [r1, #80]	; 0x50
 8007680:	e001      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007682:	7dfb      	ldrb	r3, [r7, #23]
 8007684:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d034      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007696:	2b30      	cmp	r3, #48	; 0x30
 8007698:	d01c      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800769a:	2b30      	cmp	r3, #48	; 0x30
 800769c:	d817      	bhi.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800769e:	2b20      	cmp	r3, #32
 80076a0:	d00c      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80076a2:	2b20      	cmp	r3, #32
 80076a4:	d813      	bhi.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d018      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80076aa:	2b10      	cmp	r3, #16
 80076ac:	d10f      	bne.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076ae:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80076b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b2:	4a09      	ldr	r2, [pc, #36]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80076b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80076ba:	e010      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3304      	adds	r3, #4
 80076c0:	2102      	movs	r1, #2
 80076c2:	4618      	mov	r0, r3
 80076c4:	f001 fdf0 	bl	80092a8 <RCCEx_PLL2_Config>
 80076c8:	4603      	mov	r3, r0
 80076ca:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80076cc:	e007      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	75fb      	strb	r3, [r7, #23]
      break;
 80076d2:	e004      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 80076d4:	bf00      	nop
 80076d6:	e002      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80076d8:	58024400 	.word	0x58024400
      break;
 80076dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076de:	7dfb      	ldrb	r3, [r7, #23]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d109      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80076e4:	4b9b      	ldr	r3, [pc, #620]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80076e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f0:	4998      	ldr	r1, [pc, #608]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80076f6:	e001      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
 80076fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d047      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800770c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007710:	d030      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007712:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007716:	d82a      	bhi.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007718:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800771c:	d02c      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800771e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007722:	d824      	bhi.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007728:	d018      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x348>
 800772a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800772e:	d81e      	bhi.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007738:	d007      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800773a:	e018      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800773c:	4b85      	ldr	r3, [pc, #532]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	4a84      	ldr	r2, [pc, #528]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007746:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007748:	e017      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3304      	adds	r3, #4
 800774e:	2100      	movs	r1, #0
 8007750:	4618      	mov	r0, r3
 8007752:	f001 fda9 	bl	80092a8 <RCCEx_PLL2_Config>
 8007756:	4603      	mov	r3, r0
 8007758:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800775a:	e00e      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3324      	adds	r3, #36	; 0x24
 8007760:	2100      	movs	r1, #0
 8007762:	4618      	mov	r0, r3
 8007764:	f001 fe52 	bl	800940c <RCCEx_PLL3_Config>
 8007768:	4603      	mov	r3, r0
 800776a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800776c:	e005      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	75fb      	strb	r3, [r7, #23]
      break;
 8007772:	e002      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8007774:	bf00      	nop
 8007776:	e000      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8007778:	bf00      	nop
    }

    if(ret == HAL_OK)
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d109      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007780:	4b74      	ldr	r3, [pc, #464]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007784:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800778c:	4971      	ldr	r1, [pc, #452]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800778e:	4313      	orrs	r3, r2
 8007790:	650b      	str	r3, [r1, #80]	; 0x50
 8007792:	e001      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007794:	7dfb      	ldrb	r3, [r7, #23]
 8007796:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d049      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077ac:	d02e      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80077ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077b2:	d828      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80077b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077b8:	d02a      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80077ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077be:	d822      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80077c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077c4:	d026      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80077c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077ca:	d81c      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80077cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077d0:	d010      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80077d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077d6:	d816      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d01d      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80077dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077e0:	d111      	bne.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3304      	adds	r3, #4
 80077e6:	2101      	movs	r1, #1
 80077e8:	4618      	mov	r0, r3
 80077ea:	f001 fd5d 	bl	80092a8 <RCCEx_PLL2_Config>
 80077ee:	4603      	mov	r3, r0
 80077f0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80077f2:	e012      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3324      	adds	r3, #36	; 0x24
 80077f8:	2101      	movs	r1, #1
 80077fa:	4618      	mov	r0, r3
 80077fc:	f001 fe06 	bl	800940c <RCCEx_PLL3_Config>
 8007800:	4603      	mov	r3, r0
 8007802:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007804:	e009      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	75fb      	strb	r3, [r7, #23]
      break;
 800780a:	e006      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800780c:	bf00      	nop
 800780e:	e004      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007810:	bf00      	nop
 8007812:	e002      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007814:	bf00      	nop
 8007816:	e000      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007818:	bf00      	nop
    }

    if(ret == HAL_OK)
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d109      	bne.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007820:	4b4c      	ldr	r3, [pc, #304]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007824:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800782c:	4949      	ldr	r1, [pc, #292]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800782e:	4313      	orrs	r3, r2
 8007830:	650b      	str	r3, [r1, #80]	; 0x50
 8007832:	e001      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d053      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800784a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800784e:	d034      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007850:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007854:	d82e      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007856:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800785a:	d030      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800785c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007860:	d828      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007866:	d02c      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800786c:	d822      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800786e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007872:	d028      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007874:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007878:	d81c      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800787a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800787e:	d010      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8007880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007884:	d816      	bhi.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01f      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800788a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800788e:	d111      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3304      	adds	r3, #4
 8007894:	2101      	movs	r1, #1
 8007896:	4618      	mov	r0, r3
 8007898:	f001 fd06 	bl	80092a8 <RCCEx_PLL2_Config>
 800789c:	4603      	mov	r3, r0
 800789e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80078a0:	e014      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	3324      	adds	r3, #36	; 0x24
 80078a6:	2101      	movs	r1, #1
 80078a8:	4618      	mov	r0, r3
 80078aa:	f001 fdaf 	bl	800940c <RCCEx_PLL3_Config>
 80078ae:	4603      	mov	r3, r0
 80078b0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80078b2:	e00b      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	75fb      	strb	r3, [r7, #23]
      break;
 80078b8:	e008      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80078ba:	bf00      	nop
 80078bc:	e006      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80078be:	bf00      	nop
 80078c0:	e004      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80078c2:	bf00      	nop
 80078c4:	e002      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80078c6:	bf00      	nop
 80078c8:	e000      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80078ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10a      	bne.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078d2:	4b20      	ldr	r3, [pc, #128]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80078d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078e0:	491c      	ldr	r1, [pc, #112]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	658b      	str	r3, [r1, #88]	; 0x58
 80078e6:	e001      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e8:	7dfb      	ldrb	r3, [r7, #23]
 80078ea:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d031      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007900:	d00e      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007906:	d814      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007908:	2b00      	cmp	r3, #0
 800790a:	d015      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800790c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007910:	d10f      	bne.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007912:	4b10      	ldr	r3, [pc, #64]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007916:	4a0f      	ldr	r2, [pc, #60]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800791c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800791e:	e00c      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3304      	adds	r3, #4
 8007924:	2101      	movs	r1, #1
 8007926:	4618      	mov	r0, r3
 8007928:	f001 fcbe 	bl	80092a8 <RCCEx_PLL2_Config>
 800792c:	4603      	mov	r3, r0
 800792e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007930:	e003      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	75fb      	strb	r3, [r7, #23]
      break;
 8007936:	e000      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8007938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800793a:	7dfb      	ldrb	r3, [r7, #23]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10b      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007940:	4b04      	ldr	r3, [pc, #16]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007944:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800794c:	4901      	ldr	r1, [pc, #4]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800794e:	4313      	orrs	r3, r2
 8007950:	650b      	str	r3, [r1, #80]	; 0x50
 8007952:	e003      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x548>
 8007954:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007958:	7dfb      	ldrb	r3, [r7, #23]
 800795a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d032      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796c:	2b03      	cmp	r3, #3
 800796e:	d81b      	bhi.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007970:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007976:	bf00      	nop
 8007978:	080079af 	.word	0x080079af
 800797c:	08007989 	.word	0x08007989
 8007980:	08007997 	.word	0x08007997
 8007984:	080079af 	.word	0x080079af
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007988:	4bb2      	ldr	r3, [pc, #712]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800798a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798c:	4ab1      	ldr	r2, [pc, #708]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800798e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007992:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007994:	e00c      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	3304      	adds	r3, #4
 800799a:	2102      	movs	r1, #2
 800799c:	4618      	mov	r0, r3
 800799e:	f001 fc83 	bl	80092a8 <RCCEx_PLL2_Config>
 80079a2:	4603      	mov	r3, r0
 80079a4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80079a6:	e003      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	75fb      	strb	r3, [r7, #23]
      break;
 80079ac:	e000      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80079ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d109      	bne.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80079b6:	4ba7      	ldr	r3, [pc, #668]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80079b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ba:	f023 0203 	bic.w	r2, r3, #3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c2:	49a4      	ldr	r1, [pc, #656]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80079c4:	4313      	orrs	r3, r2
 80079c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80079c8:	e001      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ca:	7dfb      	ldrb	r3, [r7, #23]
 80079cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 8086 	beq.w	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079dc:	4b9e      	ldr	r3, [pc, #632]	; (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a9d      	ldr	r2, [pc, #628]	; (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80079e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079e8:	f7fb faec 	bl	8002fc4 <HAL_GetTick>
 80079ec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079ee:	e009      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079f0:	f7fb fae8 	bl	8002fc4 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b64      	cmp	r3, #100	; 0x64
 80079fc:	d902      	bls.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	75fb      	strb	r3, [r7, #23]
        break;
 8007a02:	e005      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a04:	4b94      	ldr	r3, [pc, #592]	; (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0ef      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007a10:	7dfb      	ldrb	r3, [r7, #23]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d166      	bne.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a16:	4b8f      	ldr	r3, [pc, #572]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a20:	4053      	eors	r3, r2
 8007a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d013      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a2a:	4b8a      	ldr	r3, [pc, #552]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a32:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a34:	4b87      	ldr	r3, [pc, #540]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a38:	4a86      	ldr	r2, [pc, #536]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a3e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a40:	4b84      	ldr	r3, [pc, #528]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a44:	4a83      	ldr	r2, [pc, #524]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a4a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a4c:	4a81      	ldr	r2, [pc, #516]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a5c:	d115      	bne.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a5e:	f7fb fab1 	bl	8002fc4 <HAL_GetTick>
 8007a62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a64:	e00b      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a66:	f7fb faad 	bl	8002fc4 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d902      	bls.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	75fb      	strb	r3, [r7, #23]
            break;
 8007a7c:	e005      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a7e:	4b75      	ldr	r3, [pc, #468]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d0ed      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d126      	bne.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a9e:	d10d      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8007aa0:	4b6c      	ldr	r3, [pc, #432]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007aae:	0919      	lsrs	r1, r3, #4
 8007ab0:	4b6a      	ldr	r3, [pc, #424]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007ab2:	400b      	ands	r3, r1
 8007ab4:	4967      	ldr	r1, [pc, #412]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	610b      	str	r3, [r1, #16]
 8007aba:	e005      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8007abc:	4b65      	ldr	r3, [pc, #404]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	4a64      	ldr	r2, [pc, #400]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007ac2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007ac6:	6113      	str	r3, [r2, #16]
 8007ac8:	4b62      	ldr	r3, [pc, #392]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007aca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ad6:	495f      	ldr	r1, [pc, #380]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	670b      	str	r3, [r1, #112]	; 0x70
 8007adc:	e004      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ade:	7dfb      	ldrb	r3, [r7, #23]
 8007ae0:	75bb      	strb	r3, [r7, #22]
 8007ae2:	e001      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
 8007ae6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d07f      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007afa:	2b28      	cmp	r3, #40	; 0x28
 8007afc:	d866      	bhi.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8007afe:	a201      	add	r2, pc, #4	; (adr r2, 8007b04 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8007b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b04:	08007bd3 	.word	0x08007bd3
 8007b08:	08007bcd 	.word	0x08007bcd
 8007b0c:	08007bcd 	.word	0x08007bcd
 8007b10:	08007bcd 	.word	0x08007bcd
 8007b14:	08007bcd 	.word	0x08007bcd
 8007b18:	08007bcd 	.word	0x08007bcd
 8007b1c:	08007bcd 	.word	0x08007bcd
 8007b20:	08007bcd 	.word	0x08007bcd
 8007b24:	08007ba9 	.word	0x08007ba9
 8007b28:	08007bcd 	.word	0x08007bcd
 8007b2c:	08007bcd 	.word	0x08007bcd
 8007b30:	08007bcd 	.word	0x08007bcd
 8007b34:	08007bcd 	.word	0x08007bcd
 8007b38:	08007bcd 	.word	0x08007bcd
 8007b3c:	08007bcd 	.word	0x08007bcd
 8007b40:	08007bcd 	.word	0x08007bcd
 8007b44:	08007bbb 	.word	0x08007bbb
 8007b48:	08007bcd 	.word	0x08007bcd
 8007b4c:	08007bcd 	.word	0x08007bcd
 8007b50:	08007bcd 	.word	0x08007bcd
 8007b54:	08007bcd 	.word	0x08007bcd
 8007b58:	08007bcd 	.word	0x08007bcd
 8007b5c:	08007bcd 	.word	0x08007bcd
 8007b60:	08007bcd 	.word	0x08007bcd
 8007b64:	08007bd3 	.word	0x08007bd3
 8007b68:	08007bcd 	.word	0x08007bcd
 8007b6c:	08007bcd 	.word	0x08007bcd
 8007b70:	08007bcd 	.word	0x08007bcd
 8007b74:	08007bcd 	.word	0x08007bcd
 8007b78:	08007bcd 	.word	0x08007bcd
 8007b7c:	08007bcd 	.word	0x08007bcd
 8007b80:	08007bcd 	.word	0x08007bcd
 8007b84:	08007bd3 	.word	0x08007bd3
 8007b88:	08007bcd 	.word	0x08007bcd
 8007b8c:	08007bcd 	.word	0x08007bcd
 8007b90:	08007bcd 	.word	0x08007bcd
 8007b94:	08007bcd 	.word	0x08007bcd
 8007b98:	08007bcd 	.word	0x08007bcd
 8007b9c:	08007bcd 	.word	0x08007bcd
 8007ba0:	08007bcd 	.word	0x08007bcd
 8007ba4:	08007bd3 	.word	0x08007bd3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3304      	adds	r3, #4
 8007bac:	2101      	movs	r1, #1
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f001 fb7a 	bl	80092a8 <RCCEx_PLL2_Config>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007bb8:	e00c      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	3324      	adds	r3, #36	; 0x24
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 fc23 	bl	800940c <RCCEx_PLL3_Config>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007bca:	e003      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd0:	e000      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8007bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10a      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007bda:	4b1e      	ldr	r3, [pc, #120]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bde:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007be8:	491a      	ldr	r1, [pc, #104]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	654b      	str	r3, [r1, #84]	; 0x54
 8007bee:	e001      	b.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d03f      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c04:	2b05      	cmp	r3, #5
 8007c06:	d821      	bhi.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8007c08:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007c61 	.word	0x08007c61
 8007c14:	08007c29 	.word	0x08007c29
 8007c18:	08007c3b 	.word	0x08007c3b
 8007c1c:	08007c61 	.word	0x08007c61
 8007c20:	08007c61 	.word	0x08007c61
 8007c24:	08007c61 	.word	0x08007c61
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f001 fb3a 	bl	80092a8 <RCCEx_PLL2_Config>
 8007c34:	4603      	mov	r3, r0
 8007c36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c38:	e013      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	3324      	adds	r3, #36	; 0x24
 8007c3e:	2101      	movs	r1, #1
 8007c40:	4618      	mov	r0, r3
 8007c42:	f001 fbe3 	bl	800940c <RCCEx_PLL3_Config>
 8007c46:	4603      	mov	r3, r0
 8007c48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c4a:	e00a      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c50:	e007      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8007c52:	bf00      	nop
 8007c54:	58024400 	.word	0x58024400
 8007c58:	58024800 	.word	0x58024800
 8007c5c:	00ffffcf 	.word	0x00ffffcf
      break;
 8007c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d109      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c68:	4b9f      	ldr	r3, [pc, #636]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6c:	f023 0207 	bic.w	r2, r3, #7
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c74:	499c      	ldr	r1, [pc, #624]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	654b      	str	r3, [r1, #84]	; 0x54
 8007c7a:	e001      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d039      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c92:	2b05      	cmp	r3, #5
 8007c94:	d820      	bhi.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8007c96:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8007c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9c:	08007cdf 	.word	0x08007cdf
 8007ca0:	08007cb5 	.word	0x08007cb5
 8007ca4:	08007cc7 	.word	0x08007cc7
 8007ca8:	08007cdf 	.word	0x08007cdf
 8007cac:	08007cdf 	.word	0x08007cdf
 8007cb0:	08007cdf 	.word	0x08007cdf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	2101      	movs	r1, #1
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f001 faf4 	bl	80092a8 <RCCEx_PLL2_Config>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007cc4:	e00c      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	3324      	adds	r3, #36	; 0x24
 8007cca:	2101      	movs	r1, #1
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f001 fb9d 	bl	800940c <RCCEx_PLL3_Config>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007cd6:	e003      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	75fb      	strb	r3, [r7, #23]
      break;
 8007cdc:	e000      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8007cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10a      	bne.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ce6:	4b80      	ldr	r3, [pc, #512]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cea:	f023 0207 	bic.w	r2, r3, #7
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cf4:	497c      	ldr	r1, [pc, #496]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	658b      	str	r3, [r1, #88]	; 0x58
 8007cfa:	e001      	b.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
 8007cfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0320 	and.w	r3, r3, #32
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d04b      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d16:	d02e      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8007d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d1c:	d828      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d22:	d02a      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d28:	d822      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007d2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d2e:	d026      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007d30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d34:	d81c      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d3a:	d010      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8007d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d40:	d816      	bhi.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d01d      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007d46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d4a:	d111      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	3304      	adds	r3, #4
 8007d50:	2100      	movs	r1, #0
 8007d52:	4618      	mov	r0, r3
 8007d54:	f001 faa8 	bl	80092a8 <RCCEx_PLL2_Config>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d5c:	e012      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3324      	adds	r3, #36	; 0x24
 8007d62:	2102      	movs	r1, #2
 8007d64:	4618      	mov	r0, r3
 8007d66:	f001 fb51 	bl	800940c <RCCEx_PLL3_Config>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d6e:	e009      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	75fb      	strb	r3, [r7, #23]
      break;
 8007d74:	e006      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007d76:	bf00      	nop
 8007d78:	e004      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007d7a:	bf00      	nop
 8007d7c:	e002      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007d7e:	bf00      	nop
 8007d80:	e000      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d84:	7dfb      	ldrb	r3, [r7, #23]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10a      	bne.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d8a:	4b57      	ldr	r3, [pc, #348]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d98:	4953      	ldr	r1, [pc, #332]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	654b      	str	r3, [r1, #84]	; 0x54
 8007d9e:	e001      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d04b      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007db6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007dba:	d02e      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8007dbc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007dc0:	d828      	bhi.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc6:	d02a      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dcc:	d822      	bhi.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007dce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dd2:	d026      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007dd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dd8:	d81c      	bhi.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dde:	d010      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8007de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de4:	d816      	bhi.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d01d      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dee:	d111      	bne.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3304      	adds	r3, #4
 8007df4:	2100      	movs	r1, #0
 8007df6:	4618      	mov	r0, r3
 8007df8:	f001 fa56 	bl	80092a8 <RCCEx_PLL2_Config>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e00:	e012      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3324      	adds	r3, #36	; 0x24
 8007e06:	2102      	movs	r1, #2
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f001 faff 	bl	800940c <RCCEx_PLL3_Config>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e12:	e009      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	75fb      	strb	r3, [r7, #23]
      break;
 8007e18:	e006      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007e1a:	bf00      	nop
 8007e1c:	e004      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007e1e:	bf00      	nop
 8007e20:	e002      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007e22:	bf00      	nop
 8007e24:	e000      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10a      	bne.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e2e:	4b2e      	ldr	r3, [pc, #184]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e32:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e3c:	492a      	ldr	r1, [pc, #168]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	658b      	str	r3, [r1, #88]	; 0x58
 8007e42:	e001      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d04d      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e5a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e5e:	d02e      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8007e60:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e64:	d828      	bhi.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e6a:	d02a      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e70:	d822      	bhi.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007e72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e76:	d026      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007e78:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e7c:	d81c      	bhi.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e82:	d010      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8007e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e88:	d816      	bhi.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d01d      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e92:	d111      	bne.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3304      	adds	r3, #4
 8007e98:	2100      	movs	r1, #0
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f001 fa04 	bl	80092a8 <RCCEx_PLL2_Config>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007ea4:	e012      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	3324      	adds	r3, #36	; 0x24
 8007eaa:	2102      	movs	r1, #2
 8007eac:	4618      	mov	r0, r3
 8007eae:	f001 faad 	bl	800940c <RCCEx_PLL3_Config>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007eb6:	e009      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	75fb      	strb	r3, [r7, #23]
      break;
 8007ebc:	e006      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007ebe:	bf00      	nop
 8007ec0:	e004      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007ec2:	bf00      	nop
 8007ec4:	e002      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007ec6:	bf00      	nop
 8007ec8:	e000      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ecc:	7dfb      	ldrb	r3, [r7, #23]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10c      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ed2:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ee0:	4901      	ldr	r1, [pc, #4]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	658b      	str	r3, [r1, #88]	; 0x58
 8007ee6:	e003      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007ee8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
 8007eee:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0308 	and.w	r3, r3, #8
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d01a      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f06:	d10a      	bne.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3324      	adds	r3, #36	; 0x24
 8007f0c:	2102      	movs	r1, #2
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f001 fa7c 	bl	800940c <RCCEx_PLL3_Config>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f1e:	4b8c      	ldr	r3, [pc, #560]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2c:	4988      	ldr	r1, [pc, #544]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0310 	and.w	r3, r3, #16
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d01a      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f48:	d10a      	bne.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	3324      	adds	r3, #36	; 0x24
 8007f4e:	2102      	movs	r1, #2
 8007f50:	4618      	mov	r0, r3
 8007f52:	f001 fa5b 	bl	800940c <RCCEx_PLL3_Config>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f60:	4b7b      	ldr	r3, [pc, #492]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f6e:	4978      	ldr	r1, [pc, #480]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d034      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f8a:	d01d      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8007f8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f90:	d817      	bhi.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8007f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f9a:	d009      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007f9c:	e011      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f001 f97f 	bl	80092a8 <RCCEx_PLL2_Config>
 8007faa:	4603      	mov	r3, r0
 8007fac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007fae:	e00c      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3324      	adds	r3, #36	; 0x24
 8007fb4:	2102      	movs	r1, #2
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f001 fa28 	bl	800940c <RCCEx_PLL3_Config>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007fc0:	e003      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fc6:	e000      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8007fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10a      	bne.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fd0:	4b5f      	ldr	r3, [pc, #380]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007fde:	495c      	ldr	r1, [pc, #368]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	658b      	str	r3, [r1, #88]	; 0x58
 8007fe4:	e001      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
 8007fe8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d033      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ffc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008000:	d01c      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008002:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008006:	d816      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800800c:	d003      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800800e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008012:	d007      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008014:	e00f      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008016:	4b4e      	ldr	r3, [pc, #312]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801a:	4a4d      	ldr	r2, [pc, #308]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800801c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008020:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008022:	e00c      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3324      	adds	r3, #36	; 0x24
 8008028:	2101      	movs	r1, #1
 800802a:	4618      	mov	r0, r3
 800802c:	f001 f9ee 	bl	800940c <RCCEx_PLL3_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008034:	e003      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	75fb      	strb	r3, [r7, #23]
      break;
 800803a:	e000      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800803c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10a      	bne.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008044:	4b42      	ldr	r3, [pc, #264]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008048:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008052:	493f      	ldr	r1, [pc, #252]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008054:	4313      	orrs	r3, r2
 8008056:	654b      	str	r3, [r1, #84]	; 0x54
 8008058:	e001      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d029      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8008072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008076:	d007      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008078:	e00f      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800807a:	4b35      	ldr	r3, [pc, #212]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800807c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807e:	4a34      	ldr	r2, [pc, #208]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008084:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008086:	e00b      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3304      	adds	r3, #4
 800808c:	2102      	movs	r1, #2
 800808e:	4618      	mov	r0, r3
 8008090:	f001 f90a 	bl	80092a8 <RCCEx_PLL2_Config>
 8008094:	4603      	mov	r3, r0
 8008096:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008098:	e002      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	75fb      	strb	r3, [r7, #23]
      break;
 800809e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080a6:	4b2a      	ldr	r3, [pc, #168]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80080a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080b2:	4927      	ldr	r1, [pc, #156]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080b8:	e001      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	3324      	adds	r3, #36	; 0x24
 80080ce:	2102      	movs	r1, #2
 80080d0:	4618      	mov	r0, r3
 80080d2:	f001 f99b 	bl	800940c <RCCEx_PLL3_Config>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d035      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080f6:	d017      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80080f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080fc:	d811      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80080fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008102:	d013      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008108:	d80b      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d010      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800810e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008112:	d106      	bne.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008114:	4b0e      	ldr	r3, [pc, #56]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008118:	4a0d      	ldr	r2, [pc, #52]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800811a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800811e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008120:	e007      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	75fb      	strb	r3, [r7, #23]
      break;
 8008126:	e004      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008128:	bf00      	nop
 800812a:	e002      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800812c:	bf00      	nop
 800812e:	e000      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008132:	7dfb      	ldrb	r3, [r7, #23]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10d      	bne.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008138:	4b05      	ldr	r3, [pc, #20]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800813a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008146:	4902      	ldr	r1, [pc, #8]	; (8008150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008148:	4313      	orrs	r3, r2
 800814a:	654b      	str	r3, [r1, #84]	; 0x54
 800814c:	e004      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800814e:	bf00      	nop
 8008150:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d008      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008164:	4b30      	ldr	r3, [pc, #192]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008168:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008170:	492d      	ldr	r1, [pc, #180]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008172:	4313      	orrs	r3, r2
 8008174:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d008      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008182:	4b29      	ldr	r3, [pc, #164]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008186:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800818e:	4926      	ldr	r1, [pc, #152]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008190:	4313      	orrs	r3, r2
 8008192:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800819c:	2b00      	cmp	r3, #0
 800819e:	d008      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80081a0:	4b21      	ldr	r3, [pc, #132]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80081a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ac:	491e      	ldr	r1, [pc, #120]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00d      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081be:	4b1a      	ldr	r3, [pc, #104]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	4a19      	ldr	r2, [pc, #100]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80081c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081c8:	6113      	str	r3, [r2, #16]
 80081ca:	4b17      	ldr	r3, [pc, #92]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80081cc:	691a      	ldr	r2, [r3, #16]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80081d4:	4914      	ldr	r1, [pc, #80]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	da08      	bge.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80081e2:	4b11      	ldr	r3, [pc, #68]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80081e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ee:	490e      	ldr	r1, [pc, #56]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d009      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008200:	4b09      	ldr	r3, [pc, #36]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008204:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820e:	4906      	ldr	r1, [pc, #24]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008210:	4313      	orrs	r3, r2
 8008212:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008214:	7dbb      	ldrb	r3, [r7, #22]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	e000      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	58024400 	.word	0x58024400

0800822c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b090      	sub	sp, #64	; 0x40
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800823a:	f040 8089 	bne.w	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800823e:	4b91      	ldr	r3, [pc, #580]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824a:	2b04      	cmp	r3, #4
 800824c:	d87d      	bhi.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800824e:	a201      	add	r2, pc, #4	; (adr r2, 8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008254:	08008269 	.word	0x08008269
 8008258:	0800828d 	.word	0x0800828d
 800825c:	080082b1 	.word	0x080082b1
 8008260:	08008345 	.word	0x08008345
 8008264:	080082d5 	.word	0x080082d5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008268:	4b86      	ldr	r3, [pc, #536]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008274:	d107      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fec2 	bl	8009004 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008284:	e3f4      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008286:	2300      	movs	r3, #0
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800828a:	e3f1      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800828c:	4b7d      	ldr	r3, [pc, #500]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008298:	d107      	bne.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800829a:	f107 0318 	add.w	r3, r7, #24
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fc08 	bl	8008ab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80082a8:	e3e2      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082ae:	e3df      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082b0:	4b74      	ldr	r3, [pc, #464]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082bc:	d107      	bne.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082be:	f107 030c 	add.w	r3, r7, #12
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fd4a 	bl	8008d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80082cc:	e3d0      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082d2:	e3cd      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80082d4:	4b6b      	ldr	r3, [pc, #428]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082dc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082de:	4b69      	ldr	r3, [pc, #420]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0304 	and.w	r3, r3, #4
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d10c      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80082ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d109      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082f0:	4b64      	ldr	r3, [pc, #400]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	08db      	lsrs	r3, r3, #3
 80082f6:	f003 0303 	and.w	r3, r3, #3
 80082fa:	4a63      	ldr	r2, [pc, #396]	; (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80082fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008302:	e01e      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008304:	4b5f      	ldr	r3, [pc, #380]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800830c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008310:	d106      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008318:	d102      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800831a:	4b5c      	ldr	r3, [pc, #368]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800831c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800831e:	e010      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008320:	4b58      	ldr	r3, [pc, #352]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800832c:	d106      	bne.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800832e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008334:	d102      	bne.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008336:	4b56      	ldr	r3, [pc, #344]	; (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800833a:	e002      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800833c:	2300      	movs	r3, #0
 800833e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008340:	e396      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008342:	e395      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008344:	4b53      	ldr	r3, [pc, #332]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008346:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008348:	e392      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 800834a:	2300      	movs	r3, #0
 800834c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800834e:	e38f      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008356:	f040 809f 	bne.w	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 800835a:	4b4a      	ldr	r3, [pc, #296]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800835c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800835e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008362:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800836a:	d04d      	beq.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008372:	f200 8084 	bhi.w	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008378:	2bc0      	cmp	r3, #192	; 0xc0
 800837a:	d07d      	beq.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 800837c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837e:	2bc0      	cmp	r3, #192	; 0xc0
 8008380:	d87d      	bhi.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008384:	2b80      	cmp	r3, #128	; 0x80
 8008386:	d02d      	beq.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8008388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838a:	2b80      	cmp	r3, #128	; 0x80
 800838c:	d877      	bhi.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8008394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008396:	2b40      	cmp	r3, #64	; 0x40
 8008398:	d012      	beq.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800839a:	e070      	b.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800839c:	4b39      	ldr	r3, [pc, #228]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083a8:	d107      	bne.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fe28 	bl	8009004 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083b8:	e35a      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083be:	e357      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083c0:	4b30      	ldr	r3, [pc, #192]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083cc:	d107      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083ce:	f107 0318 	add.w	r3, r7, #24
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fb6e 	bl	8008ab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083dc:	e348      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083e2:	e345      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083e4:	4b27      	ldr	r3, [pc, #156]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083f0:	d107      	bne.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083f2:	f107 030c 	add.w	r3, r7, #12
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fcb0 	bl	8008d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008400:	e336      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008406:	e333      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008408:	4b1e      	ldr	r3, [pc, #120]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800840a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800840c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008410:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008412:	4b1c      	ldr	r3, [pc, #112]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0304 	and.w	r3, r3, #4
 800841a:	2b04      	cmp	r3, #4
 800841c:	d10c      	bne.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 800841e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008420:	2b00      	cmp	r3, #0
 8008422:	d109      	bne.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008424:	4b17      	ldr	r3, [pc, #92]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	08db      	lsrs	r3, r3, #3
 800842a:	f003 0303 	and.w	r3, r3, #3
 800842e:	4a16      	ldr	r2, [pc, #88]	; (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008430:	fa22 f303 	lsr.w	r3, r2, r3
 8008434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008436:	e01e      	b.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008438:	4b12      	ldr	r3, [pc, #72]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008444:	d106      	bne.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8008446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800844c:	d102      	bne.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800844e:	4b0f      	ldr	r3, [pc, #60]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008452:	e010      	b.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008454:	4b0b      	ldr	r3, [pc, #44]	; (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800845c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008460:	d106      	bne.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008468:	d102      	bne.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800846a:	4b09      	ldr	r3, [pc, #36]	; (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800846c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800846e:	e002      	b.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008470:	2300      	movs	r3, #0
 8008472:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008474:	e2fc      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008476:	e2fb      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008478:	4b06      	ldr	r3, [pc, #24]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800847a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800847c:	e2f8      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008482:	e2f5      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008484:	58024400 	.word	0x58024400
 8008488:	03d09000 	.word	0x03d09000
 800848c:	003d0900 	.word	0x003d0900
 8008490:	016e3600 	.word	0x016e3600
 8008494:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800849e:	f040 809c 	bne.w	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 80084a2:	4b9d      	ldr	r3, [pc, #628]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80084a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80084aa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80084ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084b2:	d054      	beq.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084ba:	f200 808b 	bhi.w	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 80084be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80084c4:	f000 8083 	beq.w	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80084ce:	f200 8081 	bhi.w	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d8:	d02f      	beq.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80084da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084e0:	d878      	bhi.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 80084e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d004      	beq.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80084e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084ee:	d012      	beq.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80084f0:	e070      	b.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084f2:	4b89      	ldr	r3, [pc, #548]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084fe:	d107      	bne.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008504:	4618      	mov	r0, r3
 8008506:	f000 fd7d 	bl	8009004 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800850a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800850e:	e2af      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008514:	e2ac      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008516:	4b80      	ldr	r3, [pc, #512]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800851e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008522:	d107      	bne.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008524:	f107 0318 	add.w	r3, r7, #24
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fac3 	bl	8008ab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008532:	e29d      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008538:	e29a      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800853a:	4b77      	ldr	r3, [pc, #476]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008546:	d107      	bne.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008548:	f107 030c 	add.w	r3, r7, #12
 800854c:	4618      	mov	r0, r3
 800854e:	f000 fc05 	bl	8008d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008556:	e28b      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008558:	2300      	movs	r3, #0
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800855c:	e288      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800855e:	4b6e      	ldr	r3, [pc, #440]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008562:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008566:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008568:	4b6b      	ldr	r3, [pc, #428]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0304 	and.w	r3, r3, #4
 8008570:	2b04      	cmp	r3, #4
 8008572:	d10c      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8008574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008576:	2b00      	cmp	r3, #0
 8008578:	d109      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800857a:	4b67      	ldr	r3, [pc, #412]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	08db      	lsrs	r3, r3, #3
 8008580:	f003 0303 	and.w	r3, r3, #3
 8008584:	4a65      	ldr	r2, [pc, #404]	; (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8008586:	fa22 f303 	lsr.w	r3, r2, r3
 800858a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800858c:	e01e      	b.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800858e:	4b62      	ldr	r3, [pc, #392]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800859a:	d106      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800859c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800859e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085a2:	d102      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80085a4:	4b5e      	ldr	r3, [pc, #376]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80085a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085a8:	e010      	b.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085aa:	4b5b      	ldr	r3, [pc, #364]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085b6:	d106      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80085b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085be:	d102      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80085c0:	4b58      	ldr	r3, [pc, #352]	; (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 80085c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085c4:	e002      	b.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 80085ca:	e251      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80085cc:	e250      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80085ce:	4b56      	ldr	r3, [pc, #344]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80085d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085d2:	e24d      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80085d4:	2300      	movs	r3, #0
 80085d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085d8:	e24a      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085e0:	f040 80a7 	bne.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80085e4:	4b4c      	ldr	r3, [pc, #304]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80085e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80085ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085f4:	d055      	beq.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80085f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085fc:	f200 8096 	bhi.w	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8008600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008602:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008606:	f000 8084 	beq.w	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 800860a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008610:	f200 808c 	bhi.w	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800861a:	d030      	beq.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008622:	f200 8083 	bhi.w	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8008626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008628:	2b00      	cmp	r3, #0
 800862a:	d004      	beq.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 800862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008632:	d012      	beq.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8008634:	e07a      	b.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008636:	4b38      	ldr	r3, [pc, #224]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800863e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008642:	d107      	bne.n	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008648:	4618      	mov	r0, r3
 800864a:	f000 fcdb 	bl	8009004 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008652:	e20d      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008654:	2300      	movs	r3, #0
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008658:	e20a      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800865a:	4b2f      	ldr	r3, [pc, #188]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008666:	d107      	bne.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008668:	f107 0318 	add.w	r3, r7, #24
 800866c:	4618      	mov	r0, r3
 800866e:	f000 fa21 	bl	8008ab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008676:	e1fb      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800867c:	e1f8      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800867e:	4b26      	ldr	r3, [pc, #152]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800868a:	d107      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800868c:	f107 030c 	add.w	r3, r7, #12
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fb63 	bl	8008d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800869a:	e1e9      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800869c:	2300      	movs	r3, #0
 800869e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086a0:	e1e6      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80086a2:	4b1d      	ldr	r3, [pc, #116]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80086a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086aa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086ac:	4b1a      	ldr	r3, [pc, #104]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	d10c      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80086b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d109      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086be:	4b16      	ldr	r3, [pc, #88]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	08db      	lsrs	r3, r3, #3
 80086c4:	f003 0303 	and.w	r3, r3, #3
 80086c8:	4a14      	ldr	r2, [pc, #80]	; (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 80086ca:	fa22 f303 	lsr.w	r3, r2, r3
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086d0:	e01e      	b.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086d2:	4b11      	ldr	r3, [pc, #68]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086de:	d106      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 80086e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086e6:	d102      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80086e8:	4b0d      	ldr	r3, [pc, #52]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80086ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086ec:	e010      	b.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086ee:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086fa:	d106      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80086fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008702:	d102      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008704:	4b07      	ldr	r3, [pc, #28]	; (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8008706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008708:	e002      	b.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800870e:	e1af      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008710:	e1ae      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008712:	4b05      	ldr	r3, [pc, #20]	; (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008714:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008716:	e1ab      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008718:	58024400 	.word	0x58024400
 800871c:	03d09000 	.word	0x03d09000
 8008720:	003d0900 	.word	0x003d0900
 8008724:	016e3600 	.word	0x016e3600
 8008728:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008730:	e19e      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008738:	d173      	bne.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800873a:	4b9d      	ldr	r3, [pc, #628]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800873c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800873e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008742:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008746:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800874a:	d02f      	beq.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 800874c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008752:	d863      	bhi.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008756:	2b00      	cmp	r3, #0
 8008758:	d004      	beq.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008760:	d012      	beq.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8008762:	e05b      	b.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008764:	4b92      	ldr	r3, [pc, #584]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800876c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008770:	d107      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008772:	f107 0318 	add.w	r3, r7, #24
 8008776:	4618      	mov	r0, r3
 8008778:	f000 f99c 	bl	8008ab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008780:	e176      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008782:	2300      	movs	r3, #0
 8008784:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008786:	e173      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008788:	4b89      	ldr	r3, [pc, #548]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008794:	d107      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008796:	f107 030c 	add.w	r3, r7, #12
 800879a:	4618      	mov	r0, r3
 800879c:	f000 fade 	bl	8008d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80087a4:	e164      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80087a6:	2300      	movs	r3, #0
 80087a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087aa:	e161      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80087ac:	4b80      	ldr	r3, [pc, #512]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80087ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087b4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087b6:	4b7e      	ldr	r3, [pc, #504]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0304 	and.w	r3, r3, #4
 80087be:	2b04      	cmp	r3, #4
 80087c0:	d10c      	bne.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 80087c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d109      	bne.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087c8:	4b79      	ldr	r3, [pc, #484]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	08db      	lsrs	r3, r3, #3
 80087ce:	f003 0303 	and.w	r3, r3, #3
 80087d2:	4a78      	ldr	r2, [pc, #480]	; (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80087d4:	fa22 f303 	lsr.w	r3, r2, r3
 80087d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087da:	e01e      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087dc:	4b74      	ldr	r3, [pc, #464]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087e8:	d106      	bne.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80087ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087f0:	d102      	bne.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80087f2:	4b71      	ldr	r3, [pc, #452]	; (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80087f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087f6:	e010      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087f8:	4b6d      	ldr	r3, [pc, #436]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008804:	d106      	bne.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800880c:	d102      	bne.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800880e:	4b6b      	ldr	r3, [pc, #428]	; (80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008812:	e002      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008814:	2300      	movs	r3, #0
 8008816:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008818:	e12a      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800881a:	e129      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008820:	e126      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008828:	d133      	bne.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800882a:	4b61      	ldr	r3, [pc, #388]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800882c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800882e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008832:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	2b00      	cmp	r3, #0
 8008838:	d004      	beq.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800883a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008840:	d012      	beq.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8008842:	e023      	b.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008844:	4b5a      	ldr	r3, [pc, #360]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800884c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008850:	d107      	bne.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fbd4 	bl	8009004 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008860:	e106      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008862:	2300      	movs	r3, #0
 8008864:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008866:	e103      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008868:	4b51      	ldr	r3, [pc, #324]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008870:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008874:	d107      	bne.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008876:	f107 0318 	add.w	r3, r7, #24
 800887a:	4618      	mov	r0, r3
 800887c:	f000 f91a 	bl	8008ab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008884:	e0f4      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800888a:	e0f1      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008890:	e0ee      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008898:	f040 809b 	bne.w	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800889c:	4b44      	ldr	r3, [pc, #272]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800889e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80088a4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80088a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80088ac:	f000 808b 	beq.w	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80088b6:	f200 8089 	bhi.w	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80088ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088c0:	d06c      	beq.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80088c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088c8:	f200 8080 	bhi.w	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80088cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088d2:	d056      	beq.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80088d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088da:	d877      	bhi.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088e2:	d03b      	beq.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 80088e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088ea:	d86f      	bhi.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80088ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088f2:	d021      	beq.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088fa:	d867      	bhi.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80088fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d004      	beq.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008904:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008908:	d004      	beq.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 800890a:	e05f      	b.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800890c:	f000 f8bc 	bl	8008a88 <HAL_RCCEx_GetD3PCLK1Freq>
 8008910:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008912:	e0ad      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008914:	4b26      	ldr	r3, [pc, #152]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800891c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008920:	d107      	bne.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008922:	f107 0318 	add.w	r3, r7, #24
 8008926:	4618      	mov	r0, r3
 8008928:	f000 f8c4 	bl	8008ab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008930:	e09e      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008936:	e09b      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008938:	4b1d      	ldr	r3, [pc, #116]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008944:	d107      	bne.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008946:	f107 030c 	add.w	r3, r7, #12
 800894a:	4618      	mov	r0, r3
 800894c:	f000 fa06 	bl	8008d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008954:	e08c      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008956:	2300      	movs	r3, #0
 8008958:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800895a:	e089      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800895c:	4b14      	ldr	r3, [pc, #80]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0304 	and.w	r3, r3, #4
 8008964:	2b04      	cmp	r3, #4
 8008966:	d109      	bne.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008968:	4b11      	ldr	r3, [pc, #68]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	08db      	lsrs	r3, r3, #3
 800896e:	f003 0303 	and.w	r3, r3, #3
 8008972:	4a10      	ldr	r2, [pc, #64]	; (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008974:	fa22 f303 	lsr.w	r3, r2, r3
 8008978:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800897a:	e079      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008980:	e076      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008982:	4b0b      	ldr	r3, [pc, #44]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800898a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800898e:	d102      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8008990:	4b09      	ldr	r3, [pc, #36]	; (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008992:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008994:	e06c      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800899a:	e069      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800899c:	4b04      	ldr	r3, [pc, #16]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089a8:	d10a      	bne.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 80089aa:	4b04      	ldr	r3, [pc, #16]	; (80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80089ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80089ae:	e05f      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80089b0:	58024400 	.word	0x58024400
 80089b4:	03d09000 	.word	0x03d09000
 80089b8:	003d0900 	.word	0x003d0900
 80089bc:	016e3600 	.word	0x016e3600
          frequency = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089c4:	e054      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80089c6:	4b2d      	ldr	r3, [pc, #180]	; (8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80089c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089ca:	e051      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089d0:	e04e      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089d8:	d148      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80089da:	4b29      	ldr	r3, [pc, #164]	; (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80089dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80089e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089ea:	d02a      	beq.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80089ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089f2:	d838      	bhi.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d004      	beq.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 80089fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a00:	d00d      	beq.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008a02:	e030      	b.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a04:	4b1e      	ldr	r3, [pc, #120]	; (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a10:	d102      	bne.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 8008a12:	4b1c      	ldr	r3, [pc, #112]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008a14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a16:	e02b      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a1c:	e028      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a1e:	4b18      	ldr	r3, [pc, #96]	; (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a2a:	d107      	bne.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 fae7 	bl	8009004 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a3a:	e019      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a40:	e016      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a42:	4b0f      	ldr	r3, [pc, #60]	; (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a4e:	d107      	bne.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a50:	f107 0318 	add.w	r3, r7, #24
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 f82d 	bl	8008ab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a5e:	e007      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a64:	e004      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8008a66:	2300      	movs	r3, #0
 8008a68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a6a:	e001      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3740      	adds	r7, #64	; 0x40
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	00bb8000 	.word	0x00bb8000
 8008a80:	58024400 	.word	0x58024400
 8008a84:	016e3600 	.word	0x016e3600

08008a88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008a8c:	f7fe fc66 	bl	800735c <HAL_RCC_GetHCLKFreq>
 8008a90:	4602      	mov	r2, r0
 8008a92:	4b06      	ldr	r3, [pc, #24]	; (8008aac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	091b      	lsrs	r3, r3, #4
 8008a98:	f003 0307 	and.w	r3, r3, #7
 8008a9c:	4904      	ldr	r1, [pc, #16]	; (8008ab0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008a9e:	5ccb      	ldrb	r3, [r1, r3]
 8008aa0:	f003 031f 	and.w	r3, r3, #31
 8008aa4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	58024400 	.word	0x58024400
 8008ab0:	08012890 	.word	0x08012890

08008ab4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b089      	sub	sp, #36	; 0x24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008abc:	4ba1      	ldr	r3, [pc, #644]	; (8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac0:	f003 0303 	and.w	r3, r3, #3
 8008ac4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008ac6:	4b9f      	ldr	r3, [pc, #636]	; (8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aca:	0b1b      	lsrs	r3, r3, #12
 8008acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ad0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008ad2:	4b9c      	ldr	r3, [pc, #624]	; (8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad6:	091b      	lsrs	r3, r3, #4
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008ade:	4b99      	ldr	r3, [pc, #612]	; (8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae2:	08db      	lsrs	r3, r3, #3
 8008ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	fb02 f303 	mul.w	r3, r2, r3
 8008aee:	ee07 3a90 	vmov	s15, r3
 8008af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 8111 	beq.w	8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	f000 8083 	beq.w	8008c10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	f200 80a1 	bhi.w	8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d003      	beq.n	8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d056      	beq.n	8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008b1e:	e099      	b.n	8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b20:	4b88      	ldr	r3, [pc, #544]	; (8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0320 	and.w	r3, r3, #32
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d02d      	beq.n	8008b88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b2c:	4b85      	ldr	r3, [pc, #532]	; (8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	08db      	lsrs	r3, r3, #3
 8008b32:	f003 0303 	and.w	r3, r3, #3
 8008b36:	4a84      	ldr	r2, [pc, #528]	; (8008d48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008b38:	fa22 f303 	lsr.w	r3, r2, r3
 8008b3c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	ee07 3a90 	vmov	s15, r3
 8008b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b56:	4b7b      	ldr	r3, [pc, #492]	; (8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008b86:	e087      	b.n	8008c98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	ee07 3a90 	vmov	s15, r3
 8008b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b9a:	4b6a      	ldr	r3, [pc, #424]	; (8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba2:	ee07 3a90 	vmov	s15, r3
 8008ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bca:	e065      	b.n	8008c98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	ee07 3a90 	vmov	s15, r3
 8008bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bde:	4b59      	ldr	r3, [pc, #356]	; (8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be6:	ee07 3a90 	vmov	s15, r3
 8008bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bf2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c0e:	e043      	b.n	8008c98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	ee07 3a90 	vmov	s15, r3
 8008c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c22:	4b48      	ldr	r3, [pc, #288]	; (8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c2a:	ee07 3a90 	vmov	s15, r3
 8008c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c36:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c52:	e021      	b.n	8008c98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	ee07 3a90 	vmov	s15, r3
 8008c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c66:	4b37      	ldr	r3, [pc, #220]	; (8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c6e:	ee07 3a90 	vmov	s15, r3
 8008c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008c98:	4b2a      	ldr	r3, [pc, #168]	; (8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9c:	0a5b      	lsrs	r3, r3, #9
 8008c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cbe:	ee17 2a90 	vmov	r2, s15
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008cc6:	4b1f      	ldr	r3, [pc, #124]	; (8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cca:	0c1b      	lsrs	r3, r3, #16
 8008ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cd0:	ee07 3a90 	vmov	s15, r3
 8008cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ce0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cec:	ee17 2a90 	vmov	r2, s15
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008cf4:	4b13      	ldr	r3, [pc, #76]	; (8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf8:	0e1b      	lsrs	r3, r3, #24
 8008cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cfe:	ee07 3a90 	vmov	s15, r3
 8008d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d1a:	ee17 2a90 	vmov	r2, s15
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008d22:	e008      	b.n	8008d36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	609a      	str	r2, [r3, #8]
}
 8008d36:	bf00      	nop
 8008d38:	3724      	adds	r7, #36	; 0x24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	58024400 	.word	0x58024400
 8008d48:	03d09000 	.word	0x03d09000
 8008d4c:	46000000 	.word	0x46000000
 8008d50:	4c742400 	.word	0x4c742400
 8008d54:	4a742400 	.word	0x4a742400
 8008d58:	4bb71b00 	.word	0x4bb71b00

08008d5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b089      	sub	sp, #36	; 0x24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d64:	4ba1      	ldr	r3, [pc, #644]	; (8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d68:	f003 0303 	and.w	r3, r3, #3
 8008d6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008d6e:	4b9f      	ldr	r3, [pc, #636]	; (8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d72:	0d1b      	lsrs	r3, r3, #20
 8008d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008d7a:	4b9c      	ldr	r3, [pc, #624]	; (8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	0a1b      	lsrs	r3, r3, #8
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008d86:	4b99      	ldr	r3, [pc, #612]	; (8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d8a:	08db      	lsrs	r3, r3, #3
 8008d8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	fb02 f303 	mul.w	r3, r2, r3
 8008d96:	ee07 3a90 	vmov	s15, r3
 8008d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 8111 	beq.w	8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	f000 8083 	beq.w	8008eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	f200 80a1 	bhi.w	8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d003      	beq.n	8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d056      	beq.n	8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008dc6:	e099      	b.n	8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dc8:	4b88      	ldr	r3, [pc, #544]	; (8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0320 	and.w	r3, r3, #32
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d02d      	beq.n	8008e30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008dd4:	4b85      	ldr	r3, [pc, #532]	; (8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	08db      	lsrs	r3, r3, #3
 8008dda:	f003 0303 	and.w	r3, r3, #3
 8008dde:	4a84      	ldr	r2, [pc, #528]	; (8008ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008de0:	fa22 f303 	lsr.w	r3, r2, r3
 8008de4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	ee07 3a90 	vmov	s15, r3
 8008dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	ee07 3a90 	vmov	s15, r3
 8008df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfe:	4b7b      	ldr	r3, [pc, #492]	; (8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e06:	ee07 3a90 	vmov	s15, r3
 8008e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e2a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008e2e:	e087      	b.n	8008f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	ee07 3a90 	vmov	s15, r3
 8008e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e42:	4b6a      	ldr	r3, [pc, #424]	; (8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4a:	ee07 3a90 	vmov	s15, r3
 8008e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e72:	e065      	b.n	8008f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	ee07 3a90 	vmov	s15, r3
 8008e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008ffc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e86:	4b59      	ldr	r3, [pc, #356]	; (8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8e:	ee07 3a90 	vmov	s15, r3
 8008e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008eb6:	e043      	b.n	8008f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	ee07 3a90 	vmov	s15, r3
 8008ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eca:	4b48      	ldr	r3, [pc, #288]	; (8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed2:	ee07 3a90 	vmov	s15, r3
 8008ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ede:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008efa:	e021      	b.n	8008f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	ee07 3a90 	vmov	s15, r3
 8008f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008ffc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f0e:	4b37      	ldr	r3, [pc, #220]	; (8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f16:	ee07 3a90 	vmov	s15, r3
 8008f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008f40:	4b2a      	ldr	r3, [pc, #168]	; (8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f44:	0a5b      	lsrs	r3, r3, #9
 8008f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f4a:	ee07 3a90 	vmov	s15, r3
 8008f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f66:	ee17 2a90 	vmov	r2, s15
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008f6e:	4b1f      	ldr	r3, [pc, #124]	; (8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f72:	0c1b      	lsrs	r3, r3, #16
 8008f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f78:	ee07 3a90 	vmov	s15, r3
 8008f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f94:	ee17 2a90 	vmov	r2, s15
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008f9c:	4b13      	ldr	r3, [pc, #76]	; (8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa0:	0e1b      	lsrs	r3, r3, #24
 8008fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fa6:	ee07 3a90 	vmov	s15, r3
 8008faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fc2:	ee17 2a90 	vmov	r2, s15
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008fca:	e008      	b.n	8008fde <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	609a      	str	r2, [r3, #8]
}
 8008fde:	bf00      	nop
 8008fe0:	3724      	adds	r7, #36	; 0x24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	58024400 	.word	0x58024400
 8008ff0:	03d09000 	.word	0x03d09000
 8008ff4:	46000000 	.word	0x46000000
 8008ff8:	4c742400 	.word	0x4c742400
 8008ffc:	4a742400 	.word	0x4a742400
 8009000:	4bb71b00 	.word	0x4bb71b00

08009004 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009004:	b480      	push	{r7}
 8009006:	b089      	sub	sp, #36	; 0x24
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800900c:	4ba0      	ldr	r3, [pc, #640]	; (8009290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800900e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009010:	f003 0303 	and.w	r3, r3, #3
 8009014:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009016:	4b9e      	ldr	r3, [pc, #632]	; (8009290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901a:	091b      	lsrs	r3, r3, #4
 800901c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009020:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009022:	4b9b      	ldr	r3, [pc, #620]	; (8009290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800902c:	4b98      	ldr	r3, [pc, #608]	; (8009290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800902e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009030:	08db      	lsrs	r3, r3, #3
 8009032:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	fb02 f303 	mul.w	r3, r2, r3
 800903c:	ee07 3a90 	vmov	s15, r3
 8009040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009044:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 8111 	beq.w	8009272 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	2b02      	cmp	r3, #2
 8009054:	f000 8083 	beq.w	800915e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	2b02      	cmp	r3, #2
 800905c:	f200 80a1 	bhi.w	80091a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d003      	beq.n	800906e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d056      	beq.n	800911a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800906c:	e099      	b.n	80091a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800906e:	4b88      	ldr	r3, [pc, #544]	; (8009290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0320 	and.w	r3, r3, #32
 8009076:	2b00      	cmp	r3, #0
 8009078:	d02d      	beq.n	80090d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800907a:	4b85      	ldr	r3, [pc, #532]	; (8009290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	08db      	lsrs	r3, r3, #3
 8009080:	f003 0303 	and.w	r3, r3, #3
 8009084:	4a83      	ldr	r2, [pc, #524]	; (8009294 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009086:	fa22 f303 	lsr.w	r3, r2, r3
 800908a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	ee07 3a90 	vmov	s15, r3
 8009092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	ee07 3a90 	vmov	s15, r3
 800909c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a4:	4b7a      	ldr	r3, [pc, #488]	; (8009290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ac:	ee07 3a90 	vmov	s15, r3
 80090b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80090b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80090d4:	e087      	b.n	80091e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	ee07 3a90 	vmov	s15, r3
 80090dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800929c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80090e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e8:	4b69      	ldr	r3, [pc, #420]	; (8009290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f0:	ee07 3a90 	vmov	s15, r3
 80090f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80090fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800910c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009114:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009118:	e065      	b.n	80091e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	ee07 3a90 	vmov	s15, r3
 8009120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009124:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80092a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800912c:	4b58      	ldr	r3, [pc, #352]	; (8009290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800912e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009134:	ee07 3a90 	vmov	s15, r3
 8009138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800913c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009140:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800914c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009158:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800915c:	e043      	b.n	80091e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	ee07 3a90 	vmov	s15, r3
 8009164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009168:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80092a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800916c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009170:	4b47      	ldr	r3, [pc, #284]	; (8009290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009178:	ee07 3a90 	vmov	s15, r3
 800917c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009180:	ed97 6a03 	vldr	s12, [r7, #12]
 8009184:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009188:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800918c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009190:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009194:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091a0:	e021      	b.n	80091e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	ee07 3a90 	vmov	s15, r3
 80091a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ac:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800929c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80091b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091b4:	4b36      	ldr	r3, [pc, #216]	; (8009290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091bc:	ee07 3a90 	vmov	s15, r3
 80091c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80091c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009298 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80091e6:	4b2a      	ldr	r3, [pc, #168]	; (8009290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ea:	0a5b      	lsrs	r3, r3, #9
 80091ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091f0:	ee07 3a90 	vmov	s15, r3
 80091f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009200:	edd7 6a07 	vldr	s13, [r7, #28]
 8009204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800920c:	ee17 2a90 	vmov	r2, s15
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009214:	4b1e      	ldr	r3, [pc, #120]	; (8009290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009218:	0c1b      	lsrs	r3, r3, #16
 800921a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800921e:	ee07 3a90 	vmov	s15, r3
 8009222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009226:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800922a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800922e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800923a:	ee17 2a90 	vmov	r2, s15
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009242:	4b13      	ldr	r3, [pc, #76]	; (8009290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009246:	0e1b      	lsrs	r3, r3, #24
 8009248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800924c:	ee07 3a90 	vmov	s15, r3
 8009250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009254:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009258:	ee37 7a87 	vadd.f32	s14, s15, s14
 800925c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009268:	ee17 2a90 	vmov	r2, s15
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009270:	e008      	b.n	8009284 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	609a      	str	r2, [r3, #8]
}
 8009284:	bf00      	nop
 8009286:	3724      	adds	r7, #36	; 0x24
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	58024400 	.word	0x58024400
 8009294:	03d09000 	.word	0x03d09000
 8009298:	46000000 	.word	0x46000000
 800929c:	4c742400 	.word	0x4c742400
 80092a0:	4a742400 	.word	0x4a742400
 80092a4:	4bb71b00 	.word	0x4bb71b00

080092a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80092b6:	4b53      	ldr	r3, [pc, #332]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 80092b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ba:	f003 0303 	and.w	r3, r3, #3
 80092be:	2b03      	cmp	r3, #3
 80092c0:	d101      	bne.n	80092c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e099      	b.n	80093fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80092c6:	4b4f      	ldr	r3, [pc, #316]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a4e      	ldr	r2, [pc, #312]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 80092cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80092d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092d2:	f7f9 fe77 	bl	8002fc4 <HAL_GetTick>
 80092d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80092d8:	e008      	b.n	80092ec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80092da:	f7f9 fe73 	bl	8002fc4 <HAL_GetTick>
 80092de:	4602      	mov	r2, r0
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d901      	bls.n	80092ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e086      	b.n	80093fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80092ec:	4b45      	ldr	r3, [pc, #276]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1f0      	bne.n	80092da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80092f8:	4b42      	ldr	r3, [pc, #264]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 80092fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	031b      	lsls	r3, r3, #12
 8009306:	493f      	ldr	r1, [pc, #252]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 8009308:	4313      	orrs	r3, r2
 800930a:	628b      	str	r3, [r1, #40]	; 0x28
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	3b01      	subs	r3, #1
 8009312:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	3b01      	subs	r3, #1
 800931c:	025b      	lsls	r3, r3, #9
 800931e:	b29b      	uxth	r3, r3
 8009320:	431a      	orrs	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	3b01      	subs	r3, #1
 8009328:	041b      	lsls	r3, r3, #16
 800932a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800932e:	431a      	orrs	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	3b01      	subs	r3, #1
 8009336:	061b      	lsls	r3, r3, #24
 8009338:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800933c:	4931      	ldr	r1, [pc, #196]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 800933e:	4313      	orrs	r3, r2
 8009340:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009342:	4b30      	ldr	r3, [pc, #192]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 8009344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009346:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	492d      	ldr	r1, [pc, #180]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 8009350:	4313      	orrs	r3, r2
 8009352:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009354:	4b2b      	ldr	r3, [pc, #172]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 8009356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009358:	f023 0220 	bic.w	r2, r3, #32
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	4928      	ldr	r1, [pc, #160]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 8009362:	4313      	orrs	r3, r2
 8009364:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009366:	4b27      	ldr	r3, [pc, #156]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 8009368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936a:	4a26      	ldr	r2, [pc, #152]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 800936c:	f023 0310 	bic.w	r3, r3, #16
 8009370:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009372:	4b24      	ldr	r3, [pc, #144]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 8009374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009376:	4b24      	ldr	r3, [pc, #144]	; (8009408 <RCCEx_PLL2_Config+0x160>)
 8009378:	4013      	ands	r3, r2
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	69d2      	ldr	r2, [r2, #28]
 800937e:	00d2      	lsls	r2, r2, #3
 8009380:	4920      	ldr	r1, [pc, #128]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 8009382:	4313      	orrs	r3, r2
 8009384:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009386:	4b1f      	ldr	r3, [pc, #124]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 8009388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938a:	4a1e      	ldr	r2, [pc, #120]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 800938c:	f043 0310 	orr.w	r3, r3, #16
 8009390:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d106      	bne.n	80093a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009398:	4b1a      	ldr	r3, [pc, #104]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 800939a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939c:	4a19      	ldr	r2, [pc, #100]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 800939e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093a4:	e00f      	b.n	80093c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d106      	bne.n	80093ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80093ac:	4b15      	ldr	r3, [pc, #84]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	4a14      	ldr	r2, [pc, #80]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 80093b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093b8:	e005      	b.n	80093c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80093ba:	4b12      	ldr	r3, [pc, #72]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 80093bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093be:	4a11      	ldr	r2, [pc, #68]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 80093c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80093c6:	4b0f      	ldr	r3, [pc, #60]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a0e      	ldr	r2, [pc, #56]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 80093cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093d2:	f7f9 fdf7 	bl	8002fc4 <HAL_GetTick>
 80093d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093d8:	e008      	b.n	80093ec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80093da:	f7f9 fdf3 	bl	8002fc4 <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d901      	bls.n	80093ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e006      	b.n	80093fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093ec:	4b05      	ldr	r3, [pc, #20]	; (8009404 <RCCEx_PLL2_Config+0x15c>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d0f0      	beq.n	80093da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	58024400 	.word	0x58024400
 8009408:	ffff0007 	.word	0xffff0007

0800940c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800941a:	4b53      	ldr	r3, [pc, #332]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 800941c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941e:	f003 0303 	and.w	r3, r3, #3
 8009422:	2b03      	cmp	r3, #3
 8009424:	d101      	bne.n	800942a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e099      	b.n	800955e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800942a:	4b4f      	ldr	r3, [pc, #316]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a4e      	ldr	r2, [pc, #312]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 8009430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009436:	f7f9 fdc5 	bl	8002fc4 <HAL_GetTick>
 800943a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800943c:	e008      	b.n	8009450 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800943e:	f7f9 fdc1 	bl	8002fc4 <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	2b02      	cmp	r3, #2
 800944a:	d901      	bls.n	8009450 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800944c:	2303      	movs	r3, #3
 800944e:	e086      	b.n	800955e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009450:	4b45      	ldr	r3, [pc, #276]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1f0      	bne.n	800943e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800945c:	4b42      	ldr	r3, [pc, #264]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 800945e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009460:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	051b      	lsls	r3, r3, #20
 800946a:	493f      	ldr	r1, [pc, #252]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 800946c:	4313      	orrs	r3, r2
 800946e:	628b      	str	r3, [r1, #40]	; 0x28
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	3b01      	subs	r3, #1
 8009476:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	3b01      	subs	r3, #1
 8009480:	025b      	lsls	r3, r3, #9
 8009482:	b29b      	uxth	r3, r3
 8009484:	431a      	orrs	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	3b01      	subs	r3, #1
 800948c:	041b      	lsls	r3, r3, #16
 800948e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009492:	431a      	orrs	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	3b01      	subs	r3, #1
 800949a:	061b      	lsls	r3, r3, #24
 800949c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094a0:	4931      	ldr	r1, [pc, #196]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 80094a2:	4313      	orrs	r3, r2
 80094a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80094a6:	4b30      	ldr	r3, [pc, #192]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 80094a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	492d      	ldr	r1, [pc, #180]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 80094b4:	4313      	orrs	r3, r2
 80094b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80094b8:	4b2b      	ldr	r3, [pc, #172]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 80094ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	4928      	ldr	r1, [pc, #160]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80094ca:	4b27      	ldr	r3, [pc, #156]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 80094cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ce:	4a26      	ldr	r2, [pc, #152]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 80094d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80094d6:	4b24      	ldr	r3, [pc, #144]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 80094d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094da:	4b24      	ldr	r3, [pc, #144]	; (800956c <RCCEx_PLL3_Config+0x160>)
 80094dc:	4013      	ands	r3, r2
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	69d2      	ldr	r2, [r2, #28]
 80094e2:	00d2      	lsls	r2, r2, #3
 80094e4:	4920      	ldr	r1, [pc, #128]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80094ea:	4b1f      	ldr	r3, [pc, #124]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 80094ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ee:	4a1e      	ldr	r2, [pc, #120]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 80094f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d106      	bne.n	800950a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80094fc:	4b1a      	ldr	r3, [pc, #104]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 80094fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009500:	4a19      	ldr	r2, [pc, #100]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 8009502:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009506:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009508:	e00f      	b.n	800952a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d106      	bne.n	800951e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009510:	4b15      	ldr	r3, [pc, #84]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 8009512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009514:	4a14      	ldr	r2, [pc, #80]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 8009516:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800951a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800951c:	e005      	b.n	800952a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800951e:	4b12      	ldr	r3, [pc, #72]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 8009520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009522:	4a11      	ldr	r2, [pc, #68]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 8009524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009528:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800952a:	4b0f      	ldr	r3, [pc, #60]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a0e      	ldr	r2, [pc, #56]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 8009530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009536:	f7f9 fd45 	bl	8002fc4 <HAL_GetTick>
 800953a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800953c:	e008      	b.n	8009550 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800953e:	f7f9 fd41 	bl	8002fc4 <HAL_GetTick>
 8009542:	4602      	mov	r2, r0
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	2b02      	cmp	r3, #2
 800954a:	d901      	bls.n	8009550 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800954c:	2303      	movs	r3, #3
 800954e:	e006      	b.n	800955e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009550:	4b05      	ldr	r3, [pc, #20]	; (8009568 <RCCEx_PLL3_Config+0x15c>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d0f0      	beq.n	800953e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800955c:	7bfb      	ldrb	r3, [r7, #15]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	58024400 	.word	0x58024400
 800956c:	ffff0007 	.word	0xffff0007

08009570 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b08a      	sub	sp, #40	; 0x28
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e075      	b.n	800966e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	d105      	bne.n	800959a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7f8 fd9d 	bl	80020d4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2204      	movs	r2, #4
 800959e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f868 	bl	8009678 <HAL_SD_InitCard>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e05d      	b.n	800966e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80095b2:	f107 0308 	add.w	r3, r7, #8
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fda9 	bl	800a110 <HAL_SD_GetCardStatus>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e052      	b.n	800966e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80095c8:	7e3b      	ldrb	r3, [r7, #24]
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80095ce:	7e7b      	ldrb	r3, [r7, #25]
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d10a      	bne.n	80095f2 <HAL_SD_Init+0x82>
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d102      	bne.n	80095e8 <HAL_SD_Init+0x78>
 80095e2:	6a3b      	ldr	r3, [r7, #32]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d004      	beq.n	80095f2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095ee:	659a      	str	r2, [r3, #88]	; 0x58
 80095f0:	e00b      	b.n	800960a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d104      	bne.n	8009604 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009600:	659a      	str	r2, [r3, #88]	; 0x58
 8009602:	e002      	b.n	800960a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	4619      	mov	r1, r3
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 fe67 	bl	800a2e4 <HAL_SD_ConfigWideBusOperation>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e026      	b.n	800966e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009620:	f7f9 fcd0 	bl	8002fc4 <HAL_GetTick>
 8009624:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009626:	e011      	b.n	800964c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009628:	f7f9 fccc 	bl	8002fc4 <HAL_GetTick>
 800962c:	4602      	mov	r2, r0
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009636:	d109      	bne.n	800964c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800963e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009648:	2303      	movs	r3, #3
 800964a:	e010      	b.n	800966e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 ff5b 	bl	800a508 <HAL_SD_GetCardState>
 8009652:	4603      	mov	r3, r0
 8009654:	2b04      	cmp	r3, #4
 8009656:	d1e7      	bne.n	8009628 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3728      	adds	r7, #40	; 0x28
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
	...

08009678 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009678:	b590      	push	{r4, r7, lr}
 800967a:	b08d      	sub	sp, #52	; 0x34
 800967c:	af02      	add	r7, sp, #8
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8009680:	2300      	movs	r3, #0
 8009682:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009684:	2300      	movs	r3, #0
 8009686:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009688:	2300      	movs	r3, #0
 800968a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800968c:	2300      	movs	r3, #0
 800968e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009690:	2300      	movs	r3, #0
 8009692:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009694:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009698:	f7fe fdc8 	bl	800822c <HAL_RCCEx_GetPeriphCLKFreq>
 800969c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d109      	bne.n	80096b8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80096b2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e06a      	b.n	800978e <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80096b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ba:	0a1b      	lsrs	r3, r3, #8
 80096bc:	4a36      	ldr	r2, [pc, #216]	; (8009798 <HAL_SD_InitCard+0x120>)
 80096be:	fba2 2303 	umull	r2, r3, r2, r3
 80096c2:	091b      	lsrs	r3, r3, #4
 80096c4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681c      	ldr	r4, [r3, #0]
 80096ca:	466a      	mov	r2, sp
 80096cc:	f107 0318 	add.w	r3, r7, #24
 80096d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80096d4:	e882 0003 	stmia.w	r2, {r0, r1}
 80096d8:	f107 030c 	add.w	r3, r7, #12
 80096dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096de:	4620      	mov	r0, r4
 80096e0:	f006 ff32 	bl	8010548 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f006 ff75 	bl	80105d8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	005b      	lsls	r3, r3, #1
 80096f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80096fa:	4a28      	ldr	r2, [pc, #160]	; (800979c <HAL_SD_InitCard+0x124>)
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009702:	3301      	adds	r3, #1
 8009704:	4618      	mov	r0, r3
 8009706:	f7f9 fc69 	bl	8002fdc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 ffea 	bl	800a6e4 <SD_PowerON>
 8009710:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009712:	6a3b      	ldr	r3, [r7, #32]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	431a      	orrs	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	e02e      	b.n	800978e <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 ff09 	bl	800a548 <SD_InitCard>
 8009736:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00b      	beq.n	8009756 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800974a:	6a3b      	ldr	r3, [r7, #32]
 800974c:	431a      	orrs	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e01b      	b.n	800978e <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800975e:	4618      	mov	r0, r3
 8009760:	f006 ffd0 	bl	8010704 <SDMMC_CmdBlockLength>
 8009764:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00f      	beq.n	800978c <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a0b      	ldr	r2, [pc, #44]	; (80097a0 <HAL_SD_InitCard+0x128>)
 8009772:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009778:	6a3b      	ldr	r3, [r7, #32]
 800977a:	431a      	orrs	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e000      	b.n	800978e <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	372c      	adds	r7, #44	; 0x2c
 8009792:	46bd      	mov	sp, r7
 8009794:	bd90      	pop	{r4, r7, pc}
 8009796:	bf00      	nop
 8009798:	014f8b59 	.word	0x014f8b59
 800979c:	00012110 	.word	0x00012110
 80097a0:	1fe00fff 	.word	0x1fe00fff

080097a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b08c      	sub	sp, #48	; 0x30
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
 80097b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d107      	bne.n	80097cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e08d      	b.n	80098e8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	f040 8086 	bne.w	80098e6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80097e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	441a      	add	r2, r3
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d907      	bls.n	80097fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e074      	b.n	80098e8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2203      	movs	r2, #3
 8009802:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2200      	movs	r2, #0
 800980c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	025a      	lsls	r2, r3, #9
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009820:	2b01      	cmp	r3, #1
 8009822:	d002      	beq.n	800982a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009826:	025b      	lsls	r3, r3, #9
 8009828:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800982a:	f04f 33ff 	mov.w	r3, #4294967295
 800982e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	025b      	lsls	r3, r3, #9
 8009834:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009836:	2390      	movs	r3, #144	; 0x90
 8009838:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800983a:	2302      	movs	r3, #2
 800983c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800983e:	2300      	movs	r3, #0
 8009840:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009842:	2300      	movs	r3, #0
 8009844:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f107 0210 	add.w	r2, r7, #16
 800984e:	4611      	mov	r1, r2
 8009850:	4618      	mov	r0, r3
 8009852:	f006 ff2b 	bl	80106ac <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68da      	ldr	r2, [r3, #12]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009864:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2201      	movs	r2, #1
 8009874:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d90a      	bls.n	8009892 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2282      	movs	r2, #130	; 0x82
 8009880:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009888:	4618      	mov	r0, r3
 800988a:	f006 ff81 	bl	8010790 <SDMMC_CmdReadMultiBlock>
 800988e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009890:	e009      	b.n	80098a6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2281      	movs	r2, #129	; 0x81
 8009896:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800989e:	4618      	mov	r0, r3
 80098a0:	f006 ff53 	bl	801074a <SDMMC_CmdReadSingleBlock>
 80098a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80098a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d012      	beq.n	80098d2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a0f      	ldr	r2, [pc, #60]	; (80098f0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80098b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ba:	431a      	orrs	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e00a      	b.n	80098e8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80098e0:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	e000      	b.n	80098e8 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80098e6:	2302      	movs	r3, #2
  }
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3730      	adds	r7, #48	; 0x30
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	1fe00fff 	.word	0x1fe00fff

080098f4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b08c      	sub	sp, #48	; 0x30
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
 8009900:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d107      	bne.n	800991c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009910:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e08d      	b.n	8009a38 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009922:	b2db      	uxtb	r3, r3
 8009924:	2b01      	cmp	r3, #1
 8009926:	f040 8086 	bne.w	8009a36 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	441a      	add	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800993a:	429a      	cmp	r2, r3
 800993c:	d907      	bls.n	800994e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009942:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e074      	b.n	8009a38 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2203      	movs	r2, #3
 8009952:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2200      	movs	r2, #0
 800995c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	68ba      	ldr	r2, [r7, #8]
 8009962:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	025a      	lsls	r2, r3, #9
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009970:	2b01      	cmp	r3, #1
 8009972:	d002      	beq.n	800997a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	025b      	lsls	r3, r3, #9
 8009978:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800997a:	f04f 33ff 	mov.w	r3, #4294967295
 800997e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	025b      	lsls	r3, r3, #9
 8009984:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009986:	2390      	movs	r3, #144	; 0x90
 8009988:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800998a:	2300      	movs	r3, #0
 800998c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800998e:	2300      	movs	r3, #0
 8009990:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009992:	2300      	movs	r3, #0
 8009994:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f107 0210 	add.w	r2, r7, #16
 800999e:	4611      	mov	r1, r2
 80099a0:	4618      	mov	r0, r3
 80099a2:	f006 fe83 	bl	80106ac <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68da      	ldr	r2, [r3, #12]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099b4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2201      	movs	r2, #1
 80099c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d90a      	bls.n	80099e2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	22a0      	movs	r2, #160	; 0xa0
 80099d0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099d8:	4618      	mov	r0, r3
 80099da:	f006 ff1f 	bl	801081c <SDMMC_CmdWriteMultiBlock>
 80099de:	62f8      	str	r0, [r7, #44]	; 0x2c
 80099e0:	e009      	b.n	80099f6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2290      	movs	r2, #144	; 0x90
 80099e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099ee:	4618      	mov	r0, r3
 80099f0:	f006 fef1 	bl	80107d6 <SDMMC_CmdWriteSingleBlock>
 80099f4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80099f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d012      	beq.n	8009a22 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a0f      	ldr	r2, [pc, #60]	; (8009a40 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8009a02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e00a      	b.n	8009a38 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8009a30:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	e000      	b.n	8009a38 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009a36:	2302      	movs	r3, #2
  }
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3730      	adds	r7, #48	; 0x30
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	1fe00fff 	.word	0x1fe00fff

08009a44 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a50:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d008      	beq.n	8009a72 <HAL_SD_IRQHandler+0x2e>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f003 0308 	and.w	r3, r3, #8
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d003      	beq.n	8009a72 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f001 f926 	bl	800acbc <SD_Read_IT>
 8009a70:	e19a      	b.n	8009da8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 80ac 	beq.w	8009bda <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a8a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	4b59      	ldr	r3, [pc, #356]	; (8009bfc <HAL_SD_IRQHandler+0x1b8>)
 8009a98:	400b      	ands	r3, r1
 8009a9a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009aaa:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68da      	ldr	r2, [r3, #12]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aba:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f003 0308 	and.w	r3, r3, #8
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d038      	beq.n	8009b38 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f003 0302 	and.w	r3, r3, #2
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d104      	bne.n	8009ada <HAL_SD_IRQHandler+0x96>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f003 0320 	and.w	r3, r3, #32
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d011      	beq.n	8009afe <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f006 fec0 	bl	8010864 <SDMMC_CmdStopTransfer>
 8009ae4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d008      	beq.n	8009afe <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	431a      	orrs	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 f95b 	bl	8009db4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a3f      	ldr	r2, [pc, #252]	; (8009c00 <HAL_SD_IRQHandler+0x1bc>)
 8009b04:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d104      	bne.n	8009b28 <HAL_SD_IRQHandler+0xe4>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f003 0302 	and.w	r3, r3, #2
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d003      	beq.n	8009b30 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f007 fb6b 	bl	8011204 <HAL_SD_RxCpltCallback>
 8009b2e:	e13b      	b.n	8009da8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f007 fb5d 	bl	80111f0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009b36:	e137      	b.n	8009da8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 8132 	beq.w	8009da8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2200      	movs	r2, #0
 8009b52:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d104      	bne.n	8009b70 <HAL_SD_IRQHandler+0x12c>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f003 0320 	and.w	r3, r3, #32
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d011      	beq.n	8009b94 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4618      	mov	r0, r3
 8009b76:	f006 fe75 	bl	8010864 <SDMMC_CmdStopTransfer>
 8009b7a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d008      	beq.n	8009b94 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	431a      	orrs	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f910 	bl	8009db4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f003 0310 	and.w	r3, r3, #16
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d104      	bne.n	8009bb6 <HAL_SD_IRQHandler+0x172>
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f003 0320 	and.w	r3, r3, #32
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d002      	beq.n	8009bbc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f007 fb1a 	bl	80111f0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d105      	bne.n	8009bd2 <HAL_SD_IRQHandler+0x18e>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f003 0302 	and.w	r3, r3, #2
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 80eb 	beq.w	8009da8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f007 fb16 	bl	8011204 <HAL_SD_RxCpltCallback>
}
 8009bd8:	e0e6      	b.n	8009da8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00d      	beq.n	8009c04 <HAL_SD_IRQHandler+0x1c0>
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f003 0308 	and.w	r3, r3, #8
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d008      	beq.n	8009c04 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f001 f8a8 	bl	800ad48 <SD_Write_IT>
 8009bf8:	e0d6      	b.n	8009da8 <HAL_SD_IRQHandler+0x364>
 8009bfa:	bf00      	nop
 8009bfc:	ffff3ec5 	.word	0xffff3ec5
 8009c00:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f000 809d 	beq.w	8009d4e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c1a:	f003 0302 	and.w	r3, r3, #2
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d005      	beq.n	8009c2e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c26:	f043 0202 	orr.w	r2, r3, #2
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c34:	f003 0308 	and.w	r3, r3, #8
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d005      	beq.n	8009c48 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c40:	f043 0208 	orr.w	r2, r3, #8
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c4e:	f003 0320 	and.w	r3, r3, #32
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d005      	beq.n	8009c62 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5a:	f043 0220 	orr.w	r2, r3, #32
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c68:	f003 0310 	and.w	r3, r3, #16
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d005      	beq.n	8009c7c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c74:	f043 0210 	orr.w	r2, r3, #16
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a4b      	ldr	r2, [pc, #300]	; (8009db0 <HAL_SD_IRQHandler+0x36c>)
 8009c82:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009c92:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68da      	ldr	r2, [r3, #12]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ca2:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cb2:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68da      	ldr	r2, [r3, #12]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009cc2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f006 fdcb 	bl	8010864 <SDMMC_CmdStopTransfer>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd4:	431a      	orrs	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68da      	ldr	r2, [r3, #12]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ce8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cf2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f003 0308 	and.w	r3, r3, #8
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00a      	beq.n	8009d14 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f851 	bl	8009db4 <HAL_SD_ErrorCallback>
}
 8009d12:	e049      	b.n	8009da8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d044      	beq.n	8009da8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d040      	beq.n	8009da8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009d34:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f834 	bl	8009db4 <HAL_SD_ErrorCallback>
}
 8009d4c:	e02c      	b.n	8009da8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d025      	beq.n	8009da8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d64:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d6c:	f003 0304 	and.w	r3, r3, #4
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10c      	bne.n	8009d8e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f003 0320 	and.w	r3, r3, #32
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f001 f84a 	bl	800ae18 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009d84:	e010      	b.n	8009da8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f001 f832 	bl	800adf0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8009d8c:	e00c      	b.n	8009da8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f003 0320 	and.w	r3, r3, #32
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d003      	beq.n	8009da0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f001 f833 	bl	800ae04 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8009d9e:	e003      	b.n	8009da8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f001 f81b 	bl	800addc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009da6:	e7ff      	b.n	8009da8 <HAL_SD_IRQHandler+0x364>
 8009da8:	bf00      	nop
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	18000f3a 	.word	0x18000f3a

08009db4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dd6:	0f9b      	lsrs	r3, r3, #30
 8009dd8:	b2da      	uxtb	r2, r3
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009de2:	0e9b      	lsrs	r3, r3, #26
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	f003 030f 	and.w	r3, r3, #15
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009df4:	0e1b      	lsrs	r3, r3, #24
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	f003 0303 	and.w	r3, r3, #3
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e06:	0c1b      	lsrs	r3, r3, #16
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e12:	0a1b      	lsrs	r3, r3, #8
 8009e14:	b2da      	uxtb	r2, r3
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e1e:	b2da      	uxtb	r2, r3
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e28:	0d1b      	lsrs	r3, r3, #20
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e34:	0c1b      	lsrs	r3, r3, #16
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	f003 030f 	and.w	r3, r3, #15
 8009e3c:	b2da      	uxtb	r2, r3
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e46:	0bdb      	lsrs	r3, r3, #15
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e58:	0b9b      	lsrs	r3, r3, #14
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	f003 0301 	and.w	r3, r3, #1
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e6a:	0b5b      	lsrs	r3, r3, #13
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	b2da      	uxtb	r2, r3
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e7c:	0b1b      	lsrs	r3, r3, #12
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	f003 0301 	and.w	r3, r3, #1
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d163      	bne.n	8009f60 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e9c:	009a      	lsls	r2, r3, #2
 8009e9e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009ea8:	0f92      	lsrs	r2, r2, #30
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eb4:	0edb      	lsrs	r3, r3, #27
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	f003 0307 	and.w	r3, r3, #7
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ec6:	0e1b      	lsrs	r3, r3, #24
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	f003 0307 	and.w	r3, r3, #7
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ed8:	0d5b      	lsrs	r3, r3, #21
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	f003 0307 	and.w	r3, r3, #7
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eea:	0c9b      	lsrs	r3, r3, #18
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	f003 0307 	and.w	r3, r3, #7
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009efc:	0bdb      	lsrs	r3, r3, #15
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	f003 0307 	and.w	r3, r3, #7
 8009f04:	b2da      	uxtb	r2, r3
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	7e1b      	ldrb	r3, [r3, #24]
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	f003 0307 	and.w	r3, r3, #7
 8009f1e:	3302      	adds	r3, #2
 8009f20:	2201      	movs	r2, #1
 8009f22:	fa02 f303 	lsl.w	r3, r2, r3
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f2a:	fb03 f202 	mul.w	r2, r3, r2
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	7a1b      	ldrb	r3, [r3, #8]
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	f003 030f 	and.w	r3, r3, #15
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	409a      	lsls	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009f4c:	0a52      	lsrs	r2, r2, #9
 8009f4e:	fb03 f202 	mul.w	r2, r3, r2
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f5c:	655a      	str	r2, [r3, #84]	; 0x54
 8009f5e:	e031      	b.n	8009fc4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d11d      	bne.n	8009fa4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f6c:	041b      	lsls	r3, r3, #16
 8009f6e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f76:	0c1b      	lsrs	r3, r3, #16
 8009f78:	431a      	orrs	r2, r3
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	3301      	adds	r3, #1
 8009f84:	029a      	lsls	r2, r3, #10
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f98:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	655a      	str	r2, [r3, #84]	; 0x54
 8009fa2:	e00f      	b.n	8009fc4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a58      	ldr	r2, [pc, #352]	; (800a10c <HAL_SD_GetCardCSD+0x344>)
 8009faa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e09d      	b.n	800a100 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fc8:	0b9b      	lsrs	r3, r3, #14
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fda:	09db      	lsrs	r3, r3, #7
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fe2:	b2da      	uxtb	r2, r3
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ff2:	b2da      	uxtb	r2, r3
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ffc:	0fdb      	lsrs	r3, r3, #31
 8009ffe:	b2da      	uxtb	r2, r3
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a008:	0f5b      	lsrs	r3, r3, #29
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	f003 0303 	and.w	r3, r3, #3
 800a010:	b2da      	uxtb	r2, r3
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a01a:	0e9b      	lsrs	r3, r3, #26
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	f003 0307 	and.w	r3, r3, #7
 800a022:	b2da      	uxtb	r2, r3
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a02c:	0d9b      	lsrs	r3, r3, #22
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	f003 030f 	and.w	r3, r3, #15
 800a034:	b2da      	uxtb	r2, r3
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a03e:	0d5b      	lsrs	r3, r3, #21
 800a040:	b2db      	uxtb	r3, r3
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	b2da      	uxtb	r2, r3
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	2200      	movs	r2, #0
 800a052:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a05a:	0c1b      	lsrs	r3, r3, #16
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	f003 0301 	and.w	r3, r3, #1
 800a062:	b2da      	uxtb	r2, r3
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a06e:	0bdb      	lsrs	r3, r3, #15
 800a070:	b2db      	uxtb	r3, r3
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	b2da      	uxtb	r2, r3
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a082:	0b9b      	lsrs	r3, r3, #14
 800a084:	b2db      	uxtb	r3, r3
 800a086:	f003 0301 	and.w	r3, r3, #1
 800a08a:	b2da      	uxtb	r2, r3
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a096:	0b5b      	lsrs	r3, r3, #13
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	f003 0301 	and.w	r3, r3, #1
 800a09e:	b2da      	uxtb	r2, r3
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0aa:	0b1b      	lsrs	r3, r3, #12
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	b2da      	uxtb	r2, r3
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0be:	0a9b      	lsrs	r3, r3, #10
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	f003 0303 	and.w	r3, r3, #3
 800a0c6:	b2da      	uxtb	r2, r3
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0d2:	0a1b      	lsrs	r3, r3, #8
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	f003 0303 	and.w	r3, r3, #3
 800a0da:	b2da      	uxtb	r2, r3
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0e6:	085b      	lsrs	r3, r3, #1
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0ee:	b2da      	uxtb	r2, r3
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	1fe00fff 	.word	0x1fe00fff

0800a110 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b094      	sub	sp, #80	; 0x50
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a126:	b2db      	uxtb	r3, r3
 800a128:	2b03      	cmp	r3, #3
 800a12a:	d101      	bne.n	800a130 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	e0a7      	b.n	800a280 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a130:	f107 0308 	add.w	r3, r7, #8
 800a134:	4619      	mov	r1, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fb62 	bl	800a800 <SD_SendSDStatus>
 800a13c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a13e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a140:	2b00      	cmp	r3, #0
 800a142:	d011      	beq.n	800a168 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a4f      	ldr	r2, [pc, #316]	; (800a288 <HAL_SD_GetCardStatus+0x178>)
 800a14a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a152:	431a      	orrs	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a166:	e070      	b.n	800a24a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	099b      	lsrs	r3, r3, #6
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	f003 0303 	and.w	r3, r3, #3
 800a172:	b2da      	uxtb	r2, r3
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	095b      	lsrs	r3, r3, #5
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	f003 0301 	and.w	r3, r3, #1
 800a182:	b2da      	uxtb	r2, r3
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	0a1b      	lsrs	r3, r3, #8
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a192:	b29a      	uxth	r2, r3
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	0e1b      	lsrs	r3, r3, #24
 800a198:	b29b      	uxth	r3, r3
 800a19a:	4313      	orrs	r3, r2
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	061a      	lsls	r2, r3, #24
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	021b      	lsls	r3, r3, #8
 800a1aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a1ae:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	0a1b      	lsrs	r3, r3, #8
 800a1b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a1b8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	0e1b      	lsrs	r3, r3, #24
 800a1be:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	0a1b      	lsrs	r3, r3, #8
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	0d1b      	lsrs	r3, r3, #20
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	f003 030f 	and.w	r3, r3, #15
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	0c1b      	lsrs	r3, r3, #16
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	0a9b      	lsrs	r3, r3, #10
 800a206:	b2db      	uxtb	r3, r3
 800a208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	0a1b      	lsrs	r3, r3, #8
 800a216:	b2db      	uxtb	r3, r3
 800a218:	f003 0303 	and.w	r3, r3, #3
 800a21c:	b2da      	uxtb	r2, r3
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	091b      	lsrs	r3, r3, #4
 800a226:	b2db      	uxtb	r3, r3
 800a228:	f003 030f 	and.w	r3, r3, #15
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	b2db      	uxtb	r3, r3
 800a236:	f003 030f 	and.w	r3, r3, #15
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	0e1b      	lsrs	r3, r3, #24
 800a244:	b2da      	uxtb	r2, r3
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a252:	4618      	mov	r0, r3
 800a254:	f006 fa56 	bl	8010704 <SDMMC_CmdBlockLength>
 800a258:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a25a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00d      	beq.n	800a27c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a08      	ldr	r2, [pc, #32]	; (800a288 <HAL_SD_GetCardStatus+0x178>)
 800a266:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a26c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800a27c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a280:	4618      	mov	r0, r3
 800a282:	3750      	adds	r7, #80	; 0x50
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	1fe00fff 	.word	0x1fe00fff

0800a28c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a2e4:	b590      	push	{r4, r7, lr}
 800a2e6:	b08d      	sub	sp, #52	; 0x34
 800a2e8:	af02      	add	r7, sp, #8
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2203      	movs	r2, #3
 800a2fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a304:	2b03      	cmp	r3, #3
 800a306:	d02e      	beq.n	800a366 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a30e:	d106      	bne.n	800a31e <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a314:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	635a      	str	r2, [r3, #52]	; 0x34
 800a31c:	e029      	b.n	800a372 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a324:	d10a      	bne.n	800a33c <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fb62 	bl	800a9f0 <SD_WideBus_Enable>
 800a32c:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	431a      	orrs	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	635a      	str	r2, [r3, #52]	; 0x34
 800a33a:	e01a      	b.n	800a372 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10a      	bne.n	800a358 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fb9f 	bl	800aa86 <SD_WideBus_Disable>
 800a348:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	431a      	orrs	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	635a      	str	r2, [r3, #52]	; 0x34
 800a356:	e00c      	b.n	800a372 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a35c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	635a      	str	r2, [r3, #52]	; 0x34
 800a364:	e005      	b.n	800a372 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a36a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a376:	2b00      	cmp	r3, #0
 800a378:	d007      	beq.n	800a38a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a5e      	ldr	r2, [pc, #376]	; (800a4f8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a380:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a388:	e094      	b.n	800a4b4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a38a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a38e:	f7fd ff4d 	bl	800822c <HAL_RCCEx_GetPeriphCLKFreq>
 800a392:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800a394:	6a3b      	ldr	r3, [r7, #32]
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 8083 	beq.w	800a4a2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	695a      	ldr	r2, [r3, #20]
 800a3b6:	6a3b      	ldr	r3, [r7, #32]
 800a3b8:	4950      	ldr	r1, [pc, #320]	; (800a4fc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a3ba:	fba1 1303 	umull	r1, r3, r1, r3
 800a3be:	0e1b      	lsrs	r3, r3, #24
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d303      	bcc.n	800a3cc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	61bb      	str	r3, [r7, #24]
 800a3ca:	e05a      	b.n	800a482 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3d4:	d103      	bne.n	800a3de <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	61bb      	str	r3, [r7, #24]
 800a3dc:	e051      	b.n	800a482 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3e6:	d126      	bne.n	800a436 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	695b      	ldr	r3, [r3, #20]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10e      	bne.n	800a40e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	4a43      	ldr	r2, [pc, #268]	; (800a500 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d906      	bls.n	800a406 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	4a40      	ldr	r2, [pc, #256]	; (800a4fc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a3fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a400:	0e5b      	lsrs	r3, r3, #25
 800a402:	61bb      	str	r3, [r7, #24]
 800a404:	e03d      	b.n	800a482 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	61bb      	str	r3, [r7, #24]
 800a40c:	e039      	b.n	800a482 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	005b      	lsls	r3, r3, #1
 800a414:	6a3a      	ldr	r2, [r7, #32]
 800a416:	fbb2 f3f3 	udiv	r3, r2, r3
 800a41a:	4a39      	ldr	r2, [pc, #228]	; (800a500 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d906      	bls.n	800a42e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a420:	6a3b      	ldr	r3, [r7, #32]
 800a422:	4a36      	ldr	r2, [pc, #216]	; (800a4fc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a424:	fba2 2303 	umull	r2, r3, r2, r3
 800a428:	0e5b      	lsrs	r3, r3, #25
 800a42a:	61bb      	str	r3, [r7, #24]
 800a42c:	e029      	b.n	800a482 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	61bb      	str	r3, [r7, #24]
 800a434:	e025      	b.n	800a482 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	695b      	ldr	r3, [r3, #20]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d10e      	bne.n	800a45c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a43e:	6a3b      	ldr	r3, [r7, #32]
 800a440:	4a30      	ldr	r2, [pc, #192]	; (800a504 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d906      	bls.n	800a454 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	4a2c      	ldr	r2, [pc, #176]	; (800a4fc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a44a:	fba2 2303 	umull	r2, r3, r2, r3
 800a44e:	0e1b      	lsrs	r3, r3, #24
 800a450:	61bb      	str	r3, [r7, #24]
 800a452:	e016      	b.n	800a482 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	61bb      	str	r3, [r7, #24]
 800a45a:	e012      	b.n	800a482 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	6a3a      	ldr	r2, [r7, #32]
 800a464:	fbb2 f3f3 	udiv	r3, r2, r3
 800a468:	4a26      	ldr	r2, [pc, #152]	; (800a504 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d906      	bls.n	800a47c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a46e:	6a3b      	ldr	r3, [r7, #32]
 800a470:	4a22      	ldr	r2, [pc, #136]	; (800a4fc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a472:	fba2 2303 	umull	r2, r3, r2, r3
 800a476:	0e1b      	lsrs	r3, r3, #24
 800a478:	61bb      	str	r3, [r7, #24]
 800a47a:	e002      	b.n	800a482 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	695b      	ldr	r3, [r3, #20]
 800a480:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681c      	ldr	r4, [r3, #0]
 800a486:	466a      	mov	r2, sp
 800a488:	f107 0314 	add.w	r3, r7, #20
 800a48c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a490:	e882 0003 	stmia.w	r2, {r0, r1}
 800a494:	f107 0308 	add.w	r3, r7, #8
 800a498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a49a:	4620      	mov	r0, r4
 800a49c:	f006 f854 	bl	8010548 <SDMMC_Init>
 800a4a0:	e008      	b.n	800a4b4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f006 f921 	bl	8010704 <SDMMC_CmdBlockLength>
 800a4c2:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00c      	beq.n	800a4e4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a0a      	ldr	r2, [pc, #40]	; (800a4f8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a4d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800a4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	372c      	adds	r7, #44	; 0x2c
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd90      	pop	{r4, r7, pc}
 800a4f8:	1fe00fff 	.word	0x1fe00fff
 800a4fc:	55e63b89 	.word	0x55e63b89
 800a500:	02faf080 	.word	0x02faf080
 800a504:	017d7840 	.word	0x017d7840

0800a508 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a510:	2300      	movs	r3, #0
 800a512:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a514:	f107 030c 	add.w	r3, r7, #12
 800a518:	4619      	mov	r1, r3
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fa40 	bl	800a9a0 <SD_SendStatus>
 800a520:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d005      	beq.n	800a534 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	431a      	orrs	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	0a5b      	lsrs	r3, r3, #9
 800a538:	f003 030f 	and.w	r3, r3, #15
 800a53c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a53e:	693b      	ldr	r3, [r7, #16]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b090      	sub	sp, #64	; 0x40
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800a550:	2300      	movs	r3, #0
 800a552:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800a554:	f7f8 fd36 	bl	8002fc4 <HAL_GetTick>
 800a558:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4618      	mov	r0, r3
 800a560:	f006 f84b 	bl	80105fa <SDMMC_GetPowerState>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d102      	bne.n	800a570 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a56a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a56e:	e0b5      	b.n	800a6dc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a574:	2b03      	cmp	r3, #3
 800a576:	d02e      	beq.n	800a5d6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f006 fa96 	bl	8010aae <SDMMC_CmdSendCID>
 800a582:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <SD_InitCard+0x46>
    {
      return errorstate;
 800a58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58c:	e0a6      	b.n	800a6dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2100      	movs	r1, #0
 800a594:	4618      	mov	r0, r3
 800a596:	f006 f876 	bl	8010686 <SDMMC_GetResponse>
 800a59a:	4602      	mov	r2, r0
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2104      	movs	r1, #4
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f006 f86d 	bl	8010686 <SDMMC_GetResponse>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2108      	movs	r1, #8
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f006 f864 	bl	8010686 <SDMMC_GetResponse>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	210c      	movs	r1, #12
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f006 f85b 	bl	8010686 <SDMMC_GetResponse>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5da:	2b03      	cmp	r3, #3
 800a5dc:	d01d      	beq.n	800a61a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800a5de:	e019      	b.n	800a614 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f107 020a 	add.w	r2, r7, #10
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f006 fa9e 	bl	8010b2c <SDMMC_CmdSetRelAdd>
 800a5f0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <SD_InitCard+0xb4>
      {
        return errorstate;
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fa:	e06f      	b.n	800a6dc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a5fc:	f7f8 fce2 	bl	8002fc4 <HAL_GetTick>
 800a600:	4602      	mov	r2, r0
 800a602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a604:	1ad3      	subs	r3, r2, r3
 800a606:	f241 3287 	movw	r2, #4999	; 0x1387
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d902      	bls.n	800a614 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800a60e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a612:	e063      	b.n	800a6dc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800a614:	897b      	ldrh	r3, [r7, #10]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d0e2      	beq.n	800a5e0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61e:	2b03      	cmp	r3, #3
 800a620:	d036      	beq.n	800a690 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a622:	897b      	ldrh	r3, [r7, #10]
 800a624:	461a      	mov	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a632:	041b      	lsls	r3, r3, #16
 800a634:	4619      	mov	r1, r3
 800a636:	4610      	mov	r0, r2
 800a638:	f006 fa58 	bl	8010aec <SDMMC_CmdSendCSD>
 800a63c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <SD_InitCard+0x100>
    {
      return errorstate;
 800a644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a646:	e049      	b.n	800a6dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2100      	movs	r1, #0
 800a64e:	4618      	mov	r0, r3
 800a650:	f006 f819 	bl	8010686 <SDMMC_GetResponse>
 800a654:	4602      	mov	r2, r0
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2104      	movs	r1, #4
 800a660:	4618      	mov	r0, r3
 800a662:	f006 f810 	bl	8010686 <SDMMC_GetResponse>
 800a666:	4602      	mov	r2, r0
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2108      	movs	r1, #8
 800a672:	4618      	mov	r0, r3
 800a674:	f006 f807 	bl	8010686 <SDMMC_GetResponse>
 800a678:	4602      	mov	r2, r0
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	210c      	movs	r1, #12
 800a684:	4618      	mov	r0, r3
 800a686:	f005 fffe 	bl	8010686 <SDMMC_GetResponse>
 800a68a:	4602      	mov	r2, r0
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2104      	movs	r1, #4
 800a696:	4618      	mov	r0, r3
 800a698:	f005 fff5 	bl	8010686 <SDMMC_GetResponse>
 800a69c:	4603      	mov	r3, r0
 800a69e:	0d1a      	lsrs	r2, r3, #20
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a6a4:	f107 030c 	add.w	r3, r7, #12
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7ff fb8c 	bl	8009dc8 <HAL_SD_GetCardCSD>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d002      	beq.n	800a6bc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a6b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a6ba:	e00f      	b.n	800a6dc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c4:	041b      	lsls	r3, r3, #16
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	f006 f907 	bl	80108dc <SDMMC_CmdSelDesel>
 800a6ce:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <SD_InitCard+0x192>
  {
    return errorstate;
 800a6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d8:	e000      	b.n	800a6dc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3740      	adds	r7, #64	; 0x40
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f006 f910 	bl	8010922 <SDMMC_CmdGoIdleState>
 800a702:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <SD_PowerON+0x2a>
  {
    return errorstate;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	e072      	b.n	800a7f4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4618      	mov	r0, r3
 800a714:	f006 f923 	bl	801095e <SDMMC_CmdOperCond>
 800a718:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a720:	d10d      	bne.n	800a73e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4618      	mov	r0, r3
 800a72e:	f006 f8f8 	bl	8010922 <SDMMC_CmdGoIdleState>
 800a732:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d004      	beq.n	800a744 <SD_PowerON+0x60>
    {
      return errorstate;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	e05a      	b.n	800a7f4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2201      	movs	r2, #1
 800a742:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d137      	bne.n	800a7bc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2100      	movs	r1, #0
 800a752:	4618      	mov	r0, r3
 800a754:	f006 f923 	bl	801099e <SDMMC_CmdAppCommand>
 800a758:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d02d      	beq.n	800a7bc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a760:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a764:	e046      	b.n	800a7f4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2100      	movs	r1, #0
 800a76c:	4618      	mov	r0, r3
 800a76e:	f006 f916 	bl	801099e <SDMMC_CmdAppCommand>
 800a772:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d001      	beq.n	800a77e <SD_PowerON+0x9a>
    {
      return errorstate;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	e03a      	b.n	800a7f4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	491e      	ldr	r1, [pc, #120]	; (800a7fc <SD_PowerON+0x118>)
 800a784:	4618      	mov	r0, r3
 800a786:	f006 f92d 	bl	80109e4 <SDMMC_CmdAppOperCommand>
 800a78a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d002      	beq.n	800a798 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a792:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a796:	e02d      	b.n	800a7f4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2100      	movs	r1, #0
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f005 ff71 	bl	8010686 <SDMMC_GetResponse>
 800a7a4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	0fdb      	lsrs	r3, r3, #31
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d101      	bne.n	800a7b2 <SD_PowerON+0xce>
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e000      	b.n	800a7b4 <SD_PowerON+0xd0>
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	613b      	str	r3, [r7, #16]

    count++;
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d802      	bhi.n	800a7cc <SD_PowerON+0xe8>
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d0cc      	beq.n	800a766 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d902      	bls.n	800a7dc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a7d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7da:	e00b      	b.n	800a7f4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d002      	beq.n	800a7f2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3718      	adds	r7, #24
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	c1100000 	.word	0xc1100000

0800a800 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b08c      	sub	sp, #48	; 0x30
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a80a:	f7f8 fbdb 	bl	8002fc4 <HAL_GetTick>
 800a80e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2100      	movs	r1, #0
 800a81a:	4618      	mov	r0, r3
 800a81c:	f005 ff33 	bl	8010686 <SDMMC_GetResponse>
 800a820:	4603      	mov	r3, r0
 800a822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a826:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a82a:	d102      	bne.n	800a832 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a82c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a830:	e0b0      	b.n	800a994 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2140      	movs	r1, #64	; 0x40
 800a838:	4618      	mov	r0, r3
 800a83a:	f005 ff63 	bl	8010704 <SDMMC_CmdBlockLength>
 800a83e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a840:	6a3b      	ldr	r3, [r7, #32]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d005      	beq.n	800a852 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a84e:	6a3b      	ldr	r3, [r7, #32]
 800a850:	e0a0      	b.n	800a994 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a85a:	041b      	lsls	r3, r3, #16
 800a85c:	4619      	mov	r1, r3
 800a85e:	4610      	mov	r0, r2
 800a860:	f006 f89d 	bl	801099e <SDMMC_CmdAppCommand>
 800a864:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a866:	6a3b      	ldr	r3, [r7, #32]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d005      	beq.n	800a878 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a874:	6a3b      	ldr	r3, [r7, #32]
 800a876:	e08d      	b.n	800a994 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a878:	f04f 33ff 	mov.w	r3, #4294967295
 800a87c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a87e:	2340      	movs	r3, #64	; 0x40
 800a880:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a882:	2360      	movs	r3, #96	; 0x60
 800a884:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a886:	2302      	movs	r3, #2
 800a888:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a88a:	2300      	movs	r3, #0
 800a88c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a88e:	2301      	movs	r3, #1
 800a890:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f107 0208 	add.w	r2, r7, #8
 800a89a:	4611      	mov	r1, r2
 800a89c:	4618      	mov	r0, r3
 800a89e:	f005 ff05 	bl	80106ac <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f006 f985 	bl	8010bb6 <SDMMC_CmdStatusRegister>
 800a8ac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a8ae:	6a3b      	ldr	r3, [r7, #32]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d02b      	beq.n	800a90c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a8bc:	6a3b      	ldr	r3, [r7, #32]
 800a8be:	e069      	b.n	800a994 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d013      	beq.n	800a8f6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8d2:	e00d      	b.n	800a8f0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f005 fe5f 	bl	801059c <SDMMC_ReadFIFO>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e2:	601a      	str	r2, [r3, #0]
        pData++;
 800a8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800a8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f2:	2b07      	cmp	r3, #7
 800a8f4:	d9ee      	bls.n	800a8d4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a8f6:	f7f8 fb65 	bl	8002fc4 <HAL_GetTick>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a904:	d102      	bne.n	800a90c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a906:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a90a:	e043      	b.n	800a994 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a912:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a916:	2b00      	cmp	r3, #0
 800a918:	d0d2      	beq.n	800a8c0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a920:	f003 0308 	and.w	r3, r3, #8
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a928:	2308      	movs	r3, #8
 800a92a:	e033      	b.n	800a994 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a932:	f003 0302 	and.w	r3, r3, #2
 800a936:	2b00      	cmp	r3, #0
 800a938:	d001      	beq.n	800a93e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a93a:	2302      	movs	r3, #2
 800a93c:	e02a      	b.n	800a994 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a944:	f003 0320 	and.w	r3, r3, #32
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d017      	beq.n	800a97c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a94c:	2320      	movs	r3, #32
 800a94e:	e021      	b.n	800a994 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4618      	mov	r0, r3
 800a956:	f005 fe21 	bl	801059c <SDMMC_ReadFIFO>
 800a95a:	4602      	mov	r2, r0
 800a95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95e:	601a      	str	r2, [r3, #0]
    pData++;
 800a960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a962:	3304      	adds	r3, #4
 800a964:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a966:	f7f8 fb2d 	bl	8002fc4 <HAL_GetTick>
 800a96a:	4602      	mov	r2, r0
 800a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96e:	1ad3      	subs	r3, r2, r3
 800a970:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a974:	d102      	bne.n	800a97c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a976:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a97a:	e00b      	b.n	800a994 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1e2      	bne.n	800a950 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a03      	ldr	r2, [pc, #12]	; (800a99c <SD_SendSDStatus+0x19c>)
 800a990:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	3730      	adds	r7, #48	; 0x30
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	18000f3a 	.word	0x18000f3a

0800a9a0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d102      	bne.n	800a9b6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a9b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9b4:	e018      	b.n	800a9e8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9be:	041b      	lsls	r3, r3, #16
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	f006 f8d4 	bl	8010b70 <SDMMC_CmdSendStatus>
 800a9c8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d001      	beq.n	800a9d4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	e009      	b.n	800a9e8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2100      	movs	r1, #0
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f005 fe53 	bl	8010686 <SDMMC_GetResponse>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	60fb      	str	r3, [r7, #12]
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2100      	movs	r1, #0
 800aa06:	4618      	mov	r0, r3
 800aa08:	f005 fe3d 	bl	8010686 <SDMMC_GetResponse>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa16:	d102      	bne.n	800aa1e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aa18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa1c:	e02f      	b.n	800aa7e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aa1e:	f107 030c 	add.w	r3, r7, #12
 800aa22:	4619      	mov	r1, r3
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 f879 	bl	800ab1c <SD_FindSCR>
 800aa2a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d001      	beq.n	800aa36 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	e023      	b.n	800aa7e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d01c      	beq.n	800aa7a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa48:	041b      	lsls	r3, r3, #16
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	f005 ffa6 	bl	801099e <SDMMC_CmdAppCommand>
 800aa52:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d001      	beq.n	800aa5e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	e00f      	b.n	800aa7e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2102      	movs	r1, #2
 800aa64:	4618      	mov	r0, r3
 800aa66:	f005 ffdd 	bl	8010a24 <SDMMC_CmdBusWidth>
 800aa6a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	e003      	b.n	800aa7e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aa76:	2300      	movs	r3, #0
 800aa78:	e001      	b.n	800aa7e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3718      	adds	r7, #24
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b086      	sub	sp, #24
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800aa8e:	2300      	movs	r3, #0
 800aa90:	60fb      	str	r3, [r7, #12]
 800aa92:	2300      	movs	r3, #0
 800aa94:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f005 fdf2 	bl	8010686 <SDMMC_GetResponse>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaac:	d102      	bne.n	800aab4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aaae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aab2:	e02f      	b.n	800ab14 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aab4:	f107 030c 	add.w	r3, r7, #12
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 f82e 	bl	800ab1c <SD_FindSCR>
 800aac0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	e023      	b.n	800ab14 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d01c      	beq.n	800ab10 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aade:	041b      	lsls	r3, r3, #16
 800aae0:	4619      	mov	r1, r3
 800aae2:	4610      	mov	r0, r2
 800aae4:	f005 ff5b 	bl	801099e <SDMMC_CmdAppCommand>
 800aae8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d001      	beq.n	800aaf4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	e00f      	b.n	800ab14 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2100      	movs	r1, #0
 800aafa:	4618      	mov	r0, r3
 800aafc:	f005 ff92 	bl	8010a24 <SDMMC_CmdBusWidth>
 800ab00:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d001      	beq.n	800ab0c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	e003      	b.n	800ab14 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	e001      	b.n	800ab14 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ab10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08e      	sub	sp, #56	; 0x38
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ab26:	f7f8 fa4d 	bl	8002fc4 <HAL_GetTick>
 800ab2a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ab30:	2300      	movs	r3, #0
 800ab32:	60bb      	str	r3, [r7, #8]
 800ab34:	2300      	movs	r3, #0
 800ab36:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2108      	movs	r1, #8
 800ab42:	4618      	mov	r0, r3
 800ab44:	f005 fdde 	bl	8010704 <SDMMC_CmdBlockLength>
 800ab48:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d001      	beq.n	800ab54 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab52:	e0ad      	b.n	800acb0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab5c:	041b      	lsls	r3, r3, #16
 800ab5e:	4619      	mov	r1, r3
 800ab60:	4610      	mov	r0, r2
 800ab62:	f005 ff1c 	bl	801099e <SDMMC_CmdAppCommand>
 800ab66:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d001      	beq.n	800ab72 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ab6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab70:	e09e      	b.n	800acb0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ab72:	f04f 33ff 	mov.w	r3, #4294967295
 800ab76:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ab78:	2308      	movs	r3, #8
 800ab7a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ab7c:	2330      	movs	r3, #48	; 0x30
 800ab7e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ab80:	2302      	movs	r3, #2
 800ab82:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f107 0210 	add.w	r2, r7, #16
 800ab94:	4611      	mov	r1, r2
 800ab96:	4618      	mov	r0, r3
 800ab98:	f005 fd88 	bl	80106ac <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f005 ff62 	bl	8010a6a <SDMMC_CmdSendSCR>
 800aba6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800aba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d027      	beq.n	800abfe <SD_FindSCR+0xe2>
  {
    return errorstate;
 800abae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb0:	e07e      	b.n	800acb0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d113      	bne.n	800abe8 <SD_FindSCR+0xcc>
 800abc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d110      	bne.n	800abe8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4618      	mov	r0, r3
 800abcc:	f005 fce6 	bl	801059c <SDMMC_ReadFIFO>
 800abd0:	4603      	mov	r3, r0
 800abd2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4618      	mov	r0, r3
 800abda:	f005 fcdf 	bl	801059c <SDMMC_ReadFIFO>
 800abde:	4603      	mov	r3, r0
 800abe0:	60fb      	str	r3, [r7, #12]
      index++;
 800abe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe4:	3301      	adds	r3, #1
 800abe6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800abe8:	f7f8 f9ec 	bl	8002fc4 <HAL_GetTick>
 800abec:	4602      	mov	r2, r0
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf6:	d102      	bne.n	800abfe <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800abf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abfc:	e058      	b.n	800acb0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac04:	f240 532a 	movw	r3, #1322	; 0x52a
 800ac08:	4013      	ands	r3, r2
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d0d1      	beq.n	800abb2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac14:	f003 0308 	and.w	r3, r3, #8
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d005      	beq.n	800ac28 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2208      	movs	r2, #8
 800ac22:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ac24:	2308      	movs	r3, #8
 800ac26:	e043      	b.n	800acb0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac2e:	f003 0302 	and.w	r3, r3, #2
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d005      	beq.n	800ac42 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac3e:	2302      	movs	r3, #2
 800ac40:	e036      	b.n	800acb0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac48:	f003 0320 	and.w	r3, r3, #32
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d005      	beq.n	800ac5c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2220      	movs	r2, #32
 800ac56:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ac58:	2320      	movs	r3, #32
 800ac5a:	e029      	b.n	800acb0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a15      	ldr	r2, [pc, #84]	; (800acb8 <SD_FindSCR+0x19c>)
 800ac62:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	061a      	lsls	r2, r3, #24
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	021b      	lsls	r3, r3, #8
 800ac6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac70:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	0a1b      	lsrs	r3, r3, #8
 800ac76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ac7a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	0e1b      	lsrs	r3, r3, #24
 800ac80:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ac82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac84:	601a      	str	r2, [r3, #0]
    scr++;
 800ac86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac88:	3304      	adds	r3, #4
 800ac8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	061a      	lsls	r2, r3, #24
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	021b      	lsls	r3, r3, #8
 800ac94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac98:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	0a1b      	lsrs	r3, r3, #8
 800ac9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800aca2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	0e1b      	lsrs	r3, r3, #24
 800aca8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800acaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acac:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3738      	adds	r7, #56	; 0x38
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	18000f3a 	.word	0x18000f3a

0800acbc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b086      	sub	sp, #24
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acce:	2b1f      	cmp	r3, #31
 800acd0:	d936      	bls.n	800ad40 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800acd2:	2300      	movs	r3, #0
 800acd4:	617b      	str	r3, [r7, #20]
 800acd6:	e027      	b.n	800ad28 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4618      	mov	r0, r3
 800acde:	f005 fc5d 	bl	801059c <SDMMC_ReadFIFO>
 800ace2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	3301      	adds	r3, #1
 800acf0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	0a1b      	lsrs	r3, r3, #8
 800acf6:	b2da      	uxtb	r2, r3
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	3301      	adds	r3, #1
 800ad00:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	0c1b      	lsrs	r3, r3, #16
 800ad06:	b2da      	uxtb	r2, r3
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	0e1b      	lsrs	r3, r3, #24
 800ad16:	b2da      	uxtb	r2, r3
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	3301      	adds	r3, #1
 800ad26:	617b      	str	r3, [r7, #20]
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	2b07      	cmp	r3, #7
 800ad2c:	d9d4      	bls.n	800acd8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	693a      	ldr	r2, [r7, #16]
 800ad32:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad38:	f1a3 0220 	sub.w	r2, r3, #32
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800ad40:	bf00      	nop
 800ad42:	3718      	adds	r7, #24
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b086      	sub	sp, #24
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	69db      	ldr	r3, [r3, #28]
 800ad54:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	2b1f      	cmp	r3, #31
 800ad5c:	d93a      	bls.n	800add4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ad5e:	2300      	movs	r3, #0
 800ad60:	617b      	str	r3, [r7, #20]
 800ad62:	e02b      	b.n	800adbc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	021a      	lsls	r2, r3, #8
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	041a      	lsls	r2, r3, #16
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	3301      	adds	r3, #1
 800ad92:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	061a      	lsls	r2, r3, #24
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	3301      	adds	r3, #1
 800ada4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f107 020c 	add.w	r2, r7, #12
 800adae:	4611      	mov	r1, r2
 800adb0:	4618      	mov	r0, r3
 800adb2:	f005 fc00 	bl	80105b6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	3301      	adds	r3, #1
 800adba:	617b      	str	r3, [r7, #20]
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	2b07      	cmp	r3, #7
 800adc0:	d9d0      	bls.n	800ad64 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	693a      	ldr	r2, [r7, #16]
 800adc6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a1b      	ldr	r3, [r3, #32]
 800adcc:	f1a3 0220 	sub.w	r2, r3, #32
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	621a      	str	r2, [r3, #32]
  }
}
 800add4:	bf00      	nop
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ade4:	bf00      	nop
 800ade6:	370c      	adds	r7, #12
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800adf8:	bf00      	nop
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ae0c:	bf00      	nop
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ae20:	bf00      	nop
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d101      	bne.n	800ae40 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e02b      	b.n	800ae98 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d106      	bne.n	800ae5a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f7f7 fe87 	bl	8002b68 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2202      	movs	r2, #2
 800ae5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	3304      	adds	r3, #4
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	f005 fa69 	bl	8010344 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6818      	ldr	r0, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	f005 fabd 	bl	80103fc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800ae82:	4b07      	ldr	r3, [pc, #28]	; (800aea0 <HAL_SDRAM_Init+0x74>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a06      	ldr	r2, [pc, #24]	; (800aea0 <HAL_SDRAM_Init+0x74>)
 800ae88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae8c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2201      	movs	r2, #1
 800ae92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	52004000 	.word	0x52004000

0800aea4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aeb6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800aeb8:	7dfb      	ldrb	r3, [r7, #23]
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d101      	bne.n	800aec2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800aebe:	2302      	movs	r3, #2
 800aec0:	e021      	b.n	800af06 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800aec2:	7dfb      	ldrb	r3, [r7, #23]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d002      	beq.n	800aece <HAL_SDRAM_SendCommand+0x2a>
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
 800aeca:	2b05      	cmp	r3, #5
 800aecc:	d118      	bne.n	800af00 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2202      	movs	r2, #2
 800aed2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	68b9      	ldr	r1, [r7, #8]
 800aede:	4618      	mov	r0, r3
 800aee0:	f005 faf6 	bl	80104d0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d104      	bne.n	800aef6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2205      	movs	r2, #5
 800aef0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800aef4:	e006      	b.n	800af04 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2201      	movs	r2, #1
 800aefa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800aefe:	e001      	b.n	800af04 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	e000      	b.n	800af06 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3718      	adds	r7, #24
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b082      	sub	sp, #8
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	2b02      	cmp	r3, #2
 800af22:	d101      	bne.n	800af28 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800af24:	2302      	movs	r3, #2
 800af26:	e016      	b.n	800af56 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	2b01      	cmp	r3, #1
 800af32:	d10f      	bne.n	800af54 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2202      	movs	r2, #2
 800af38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	4618      	mov	r0, r3
 800af44:	f005 fae8 	bl	8010518 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800af50:	2300      	movs	r3, #0
 800af52:	e000      	b.n	800af56 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800af54:	2301      	movs	r3, #1
}
 800af56:	4618      	mov	r0, r3
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
	...

0800af60 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e0f1      	b.n	800b156 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a78      	ldr	r2, [pc, #480]	; (800b160 <HAL_SPI_Init+0x200>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d00f      	beq.n	800afa2 <HAL_SPI_Init+0x42>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a77      	ldr	r2, [pc, #476]	; (800b164 <HAL_SPI_Init+0x204>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d00a      	beq.n	800afa2 <HAL_SPI_Init+0x42>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a75      	ldr	r2, [pc, #468]	; (800b168 <HAL_SPI_Init+0x208>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d005      	beq.n	800afa2 <HAL_SPI_Init+0x42>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	2b0f      	cmp	r3, #15
 800af9c:	d901      	bls.n	800afa2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	e0d9      	b.n	800b156 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f001 f816 	bl	800bfd4 <SPI_GetPacketSize>
 800afa8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a6c      	ldr	r2, [pc, #432]	; (800b160 <HAL_SPI_Init+0x200>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d00c      	beq.n	800afce <HAL_SPI_Init+0x6e>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a6a      	ldr	r2, [pc, #424]	; (800b164 <HAL_SPI_Init+0x204>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d007      	beq.n	800afce <HAL_SPI_Init+0x6e>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a69      	ldr	r2, [pc, #420]	; (800b168 <HAL_SPI_Init+0x208>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d002      	beq.n	800afce <HAL_SPI_Init+0x6e>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2b08      	cmp	r3, #8
 800afcc:	d811      	bhi.n	800aff2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800afd2:	4a63      	ldr	r2, [pc, #396]	; (800b160 <HAL_SPI_Init+0x200>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d009      	beq.n	800afec <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a61      	ldr	r2, [pc, #388]	; (800b164 <HAL_SPI_Init+0x204>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d004      	beq.n	800afec <HAL_SPI_Init+0x8c>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a60      	ldr	r2, [pc, #384]	; (800b168 <HAL_SPI_Init+0x208>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d104      	bne.n	800aff6 <HAL_SPI_Init+0x96>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2b10      	cmp	r3, #16
 800aff0:	d901      	bls.n	800aff6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	e0af      	b.n	800b156 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800affc:	b2db      	uxtb	r3, r3
 800affe:	2b00      	cmp	r3, #0
 800b000:	d106      	bne.n	800b010 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f7f7 f8f8 	bl	8002200 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2202      	movs	r2, #2
 800b014:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f022 0201 	bic.w	r2, r2, #1
 800b026:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b032:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b03c:	d119      	bne.n	800b072 <HAL_SPI_Init+0x112>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b046:	d103      	bne.n	800b050 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d008      	beq.n	800b062 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10c      	bne.n	800b072 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b05c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b060:	d107      	bne.n	800b072 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b070:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	69da      	ldr	r2, [r3, #28]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07a:	431a      	orrs	r2, r3
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	431a      	orrs	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b084:	ea42 0103 	orr.w	r1, r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	68da      	ldr	r2, [r3, #12]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	430a      	orrs	r2, r1
 800b092:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09c:	431a      	orrs	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a2:	431a      	orrs	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	431a      	orrs	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	431a      	orrs	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	431a      	orrs	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a1b      	ldr	r3, [r3, #32]
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	431a      	orrs	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0c6:	431a      	orrs	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	431a      	orrs	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0d2:	ea42 0103 	orr.w	r1, r2, r3
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d113      	bne.n	800b112 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b110:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f022 0201 	bic.w	r2, r2, #1
 800b120:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00a      	beq.n	800b144 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	430a      	orrs	r2, r1
 800b142:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	40013000 	.word	0x40013000
 800b164:	40003800 	.word	0x40003800
 800b168:	40003c00 	.word	0x40003c00

0800b16c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b08a      	sub	sp, #40	; 0x28
 800b170:	af02      	add	r7, sp, #8
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	603b      	str	r3, [r7, #0]
 800b178:	4613      	mov	r3, r2
 800b17a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	3320      	adds	r3, #32
 800b182:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d101      	bne.n	800b196 <HAL_SPI_Transmit+0x2a>
 800b192:	2302      	movs	r3, #2
 800b194:	e1d7      	b.n	800b546 <HAL_SPI_Transmit+0x3da>
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2201      	movs	r2, #1
 800b19a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b19e:	f7f7 ff11 	bl	8002fc4 <HAL_GetTick>
 800b1a2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d007      	beq.n	800b1c0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b1bc:	7efb      	ldrb	r3, [r7, #27]
 800b1be:	e1c2      	b.n	800b546 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d002      	beq.n	800b1cc <HAL_SPI_Transmit+0x60>
 800b1c6:	88fb      	ldrh	r3, [r7, #6]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d107      	bne.n	800b1dc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b1d8:	7efb      	ldrb	r3, [r7, #27]
 800b1da:	e1b4      	b.n	800b546 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2203      	movs	r2, #3
 800b1e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	88fa      	ldrh	r2, [r7, #6]
 800b1f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	88fa      	ldrh	r2, [r7, #6]
 800b1fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2200      	movs	r2, #0
 800b206:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2200      	movs	r2, #0
 800b21c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b22c:	d107      	bne.n	800b23e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b23c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	685a      	ldr	r2, [r3, #4]
 800b244:	4b96      	ldr	r3, [pc, #600]	; (800b4a0 <HAL_SPI_Transmit+0x334>)
 800b246:	4013      	ands	r3, r2
 800b248:	88f9      	ldrh	r1, [r7, #6]
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	6812      	ldr	r2, [r2, #0]
 800b24e:	430b      	orrs	r3, r1
 800b250:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f042 0201 	orr.w	r2, r2, #1
 800b260:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b26a:	d107      	bne.n	800b27c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b27a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	2b0f      	cmp	r3, #15
 800b282:	d947      	bls.n	800b314 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b284:	e03f      	b.n	800b306 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	695b      	ldr	r3, [r3, #20]
 800b28c:	f003 0302 	and.w	r3, r3, #2
 800b290:	2b02      	cmp	r3, #2
 800b292:	d114      	bne.n	800b2be <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	6812      	ldr	r2, [r2, #0]
 800b29e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2a4:	1d1a      	adds	r2, r3, #4
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b2bc:	e023      	b.n	800b306 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b2be:	f7f7 fe81 	bl	8002fc4 <HAL_GetTick>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	1ad3      	subs	r3, r2, r3
 800b2c8:	683a      	ldr	r2, [r7, #0]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d803      	bhi.n	800b2d6 <HAL_SPI_Transmit+0x16a>
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d4:	d102      	bne.n	800b2dc <HAL_SPI_Transmit+0x170>
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d114      	bne.n	800b306 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f000 fdab 	bl	800be38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b302:	2303      	movs	r3, #3
 800b304:	e11f      	b.n	800b546 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1b9      	bne.n	800b286 <HAL_SPI_Transmit+0x11a>
 800b312:	e0f2      	b.n	800b4fa <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	2b07      	cmp	r3, #7
 800b31a:	f240 80e7 	bls.w	800b4ec <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b31e:	e05d      	b.n	800b3dc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	695b      	ldr	r3, [r3, #20]
 800b326:	f003 0302 	and.w	r3, r3, #2
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	d132      	bne.n	800b394 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b334:	b29b      	uxth	r3, r3
 800b336:	2b01      	cmp	r3, #1
 800b338:	d918      	bls.n	800b36c <HAL_SPI_Transmit+0x200>
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d014      	beq.n	800b36c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	6812      	ldr	r2, [r2, #0]
 800b34c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b352:	1d1a      	adds	r2, r3, #4
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b35e:	b29b      	uxth	r3, r3
 800b360:	3b02      	subs	r3, #2
 800b362:	b29a      	uxth	r2, r3
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b36a:	e037      	b.n	800b3dc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b370:	881a      	ldrh	r2, [r3, #0]
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b37a:	1c9a      	adds	r2, r3, #2
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b386:	b29b      	uxth	r3, r3
 800b388:	3b01      	subs	r3, #1
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b392:	e023      	b.n	800b3dc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b394:	f7f7 fe16 	bl	8002fc4 <HAL_GetTick>
 800b398:	4602      	mov	r2, r0
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d803      	bhi.n	800b3ac <HAL_SPI_Transmit+0x240>
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3aa:	d102      	bne.n	800b3b2 <HAL_SPI_Transmit+0x246>
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d114      	bne.n	800b3dc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f000 fd40 	bl	800be38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	e0b4      	b.n	800b546 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d19b      	bne.n	800b320 <HAL_SPI_Transmit+0x1b4>
 800b3e8:	e087      	b.n	800b4fa <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	695b      	ldr	r3, [r3, #20]
 800b3f0:	f003 0302 	and.w	r3, r3, #2
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d155      	bne.n	800b4a4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	2b03      	cmp	r3, #3
 800b402:	d918      	bls.n	800b436 <HAL_SPI_Transmit+0x2ca>
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b408:	2b40      	cmp	r3, #64	; 0x40
 800b40a:	d914      	bls.n	800b436 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	6812      	ldr	r2, [r2, #0]
 800b416:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b41c:	1d1a      	adds	r2, r3, #4
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b428:	b29b      	uxth	r3, r3
 800b42a:	3b04      	subs	r3, #4
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b434:	e05a      	b.n	800b4ec <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d917      	bls.n	800b472 <HAL_SPI_Transmit+0x306>
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b446:	2b00      	cmp	r3, #0
 800b448:	d013      	beq.n	800b472 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b44e:	881a      	ldrh	r2, [r3, #0]
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b458:	1c9a      	adds	r2, r3, #2
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b464:	b29b      	uxth	r3, r3
 800b466:	3b02      	subs	r3, #2
 800b468:	b29a      	uxth	r2, r3
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b470:	e03c      	b.n	800b4ec <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	3320      	adds	r3, #32
 800b47c:	7812      	ldrb	r2, [r2, #0]
 800b47e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b484:	1c5a      	adds	r2, r3, #1
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b490:	b29b      	uxth	r3, r3
 800b492:	3b01      	subs	r3, #1
 800b494:	b29a      	uxth	r2, r3
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b49c:	e026      	b.n	800b4ec <HAL_SPI_Transmit+0x380>
 800b49e:	bf00      	nop
 800b4a0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4a4:	f7f7 fd8e 	bl	8002fc4 <HAL_GetTick>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d803      	bhi.n	800b4bc <HAL_SPI_Transmit+0x350>
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ba:	d102      	bne.n	800b4c2 <HAL_SPI_Transmit+0x356>
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d114      	bne.n	800b4ec <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f000 fcb8 	bl	800be38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	e02c      	b.n	800b546 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f47f af78 	bne.w	800b3ea <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	2200      	movs	r2, #0
 800b502:	2108      	movs	r1, #8
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f000 fd37 	bl	800bf78 <SPI_WaitOnFlagUntilTimeout>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d007      	beq.n	800b520 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b516:	f043 0220 	orr.w	r2, r3, #32
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 fc89 	bl	800be38 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2200      	movs	r2, #0
 800b52a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2201      	movs	r2, #1
 800b532:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d001      	beq.n	800b544 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	e000      	b.n	800b546 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800b544:	7efb      	ldrb	r3, [r7, #27]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3720      	adds	r7, #32
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop

0800b550 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b086      	sub	sp, #24
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	607a      	str	r2, [r7, #4]
 800b55c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b55e:	2300      	movs	r3, #0
 800b560:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d101      	bne.n	800b570 <HAL_SPI_TransmitReceive_DMA+0x20>
 800b56c:	2302      	movs	r3, #2
 800b56e:	e1b4      	b.n	800b8da <HAL_SPI_TransmitReceive_DMA+0x38a>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b57e:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b586:	7dbb      	ldrb	r3, [r7, #22]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d012      	beq.n	800b5b2 <HAL_SPI_TransmitReceive_DMA+0x62>
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b592:	d106      	bne.n	800b5a2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d102      	bne.n	800b5a2 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b59c:	7dbb      	ldrb	r3, [r7, #22]
 800b59e:	2b04      	cmp	r3, #4
 800b5a0:	d007      	beq.n	800b5b2 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800b5a2:	2302      	movs	r3, #2
 800b5a4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b5ae:	7dfb      	ldrb	r3, [r7, #23]
 800b5b0:	e193      	b.n	800b8da <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d005      	beq.n	800b5c4 <HAL_SPI_TransmitReceive_DMA+0x74>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d002      	beq.n	800b5c4 <HAL_SPI_TransmitReceive_DMA+0x74>
 800b5be:	887b      	ldrh	r3, [r7, #2]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d107      	bne.n	800b5d4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b5d0:	7dfb      	ldrb	r3, [r7, #23]
 800b5d2:	e182      	b.n	800b8da <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	2b04      	cmp	r3, #4
 800b5de:	d003      	beq.n	800b5e8 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2205      	movs	r2, #5
 800b5e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	68ba      	ldr	r2, [r7, #8]
 800b5f4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	887a      	ldrh	r2, [r7, #2]
 800b5fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	887a      	ldrh	r2, [r7, #2]
 800b602:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	887a      	ldrh	r2, [r7, #2]
 800b610:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	887a      	ldrh	r2, [r7, #2]
 800b618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2200      	movs	r2, #0
 800b620:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2200      	movs	r2, #0
 800b626:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	689a      	ldr	r2, [r3, #8]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b636:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	2b0f      	cmp	r3, #15
 800b63e:	d905      	bls.n	800b64c <HAL_SPI_TransmitReceive_DMA+0xfc>
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b64a:	d10f      	bne.n	800b66c <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b650:	2b07      	cmp	r3, #7
 800b652:	d913      	bls.n	800b67c <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b658:	699b      	ldr	r3, [r3, #24]
 800b65a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b65e:	d00d      	beq.n	800b67c <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b664:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b66a:	d007      	beq.n	800b67c <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2200      	movs	r2, #0
 800b674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b678:	7dfb      	ldrb	r3, [r7, #23]
 800b67a:	e12e      	b.n	800b8da <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	2b07      	cmp	r3, #7
 800b682:	d840      	bhi.n	800b706 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b68e:	d109      	bne.n	800b6a4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b696:	b29b      	uxth	r3, r3
 800b698:	3301      	adds	r3, #1
 800b69a:	105b      	asrs	r3, r3, #1
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6a8:	699b      	ldr	r3, [r3, #24]
 800b6aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6ae:	d109      	bne.n	800b6c4 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	3303      	adds	r3, #3
 800b6ba:	109b      	asrs	r3, r3, #2
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6c8:	699b      	ldr	r3, [r3, #24]
 800b6ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6ce:	d109      	bne.n	800b6e4 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	3301      	adds	r3, #1
 800b6da:	105b      	asrs	r3, r3, #1
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6e8:	699b      	ldr	r3, [r3, #24]
 800b6ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6ee:	d12e      	bne.n	800b74e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	3303      	adds	r3, #3
 800b6fa:	109b      	asrs	r3, r3, #2
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b704:	e023      	b.n	800b74e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	2b0f      	cmp	r3, #15
 800b70c:	d81f      	bhi.n	800b74e <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b718:	d109      	bne.n	800b72e <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b720:	b29b      	uxth	r3, r3
 800b722:	3301      	adds	r3, #1
 800b724:	105b      	asrs	r3, r3, #1
 800b726:	b29a      	uxth	r2, r3
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b738:	d109      	bne.n	800b74e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b740:	b29b      	uxth	r3, r3
 800b742:	3301      	adds	r3, #1
 800b744:	105b      	asrs	r3, r3, #1
 800b746:	b29a      	uxth	r2, r3
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b04      	cmp	r3, #4
 800b758:	d108      	bne.n	800b76c <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b75e:	4a61      	ldr	r2, [pc, #388]	; (800b8e4 <HAL_SPI_TransmitReceive_DMA+0x394>)
 800b760:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b766:	4a60      	ldr	r2, [pc, #384]	; (800b8e8 <HAL_SPI_TransmitReceive_DMA+0x398>)
 800b768:	63da      	str	r2, [r3, #60]	; 0x3c
 800b76a:	e007      	b.n	800b77c <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b770:	4a5e      	ldr	r2, [pc, #376]	; (800b8ec <HAL_SPI_TransmitReceive_DMA+0x39c>)
 800b772:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b778:	4a5d      	ldr	r2, [pc, #372]	; (800b8f0 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 800b77a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b780:	4a5c      	ldr	r2, [pc, #368]	; (800b8f4 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 800b782:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b788:	2200      	movs	r2, #0
 800b78a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3330      	adds	r3, #48	; 0x30
 800b796:	4619      	mov	r1, r3
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b79c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b7a4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b7a6:	f7f8 f90f 	bl	80039c8 <HAL_DMA_Start_IT>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d013      	beq.n	800b7d8 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7b6:	f043 0210 	orr.w	r2, r3, #16
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800b7d4:	7dfb      	ldrb	r3, [r7, #23]
 800b7d6:	e080      	b.n	800b8da <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	689a      	ldr	r2, [r3, #8]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b7e6:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b804:	2200      	movs	r2, #0
 800b806:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b810:	4619      	mov	r1, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	3320      	adds	r3, #32
 800b818:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b820:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b822:	f7f8 f8d1 	bl	80039c8 <HAL_DMA_Start_IT>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d013      	beq.n	800b854 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b832:	f043 0210 	orr.w	r2, r3, #16
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2200      	movs	r2, #0
 800b840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800b850:	7dfb      	ldrb	r3, [r7, #23]
 800b852:	e042      	b.n	800b8da <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b858:	69db      	ldr	r3, [r3, #28]
 800b85a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b85e:	d108      	bne.n	800b872 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	6859      	ldr	r1, [r3, #4]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	4b23      	ldr	r3, [pc, #140]	; (800b8f8 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800b86c:	400b      	ands	r3, r1
 800b86e:	6053      	str	r3, [r2, #4]
 800b870:	e009      	b.n	800b886 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	685a      	ldr	r2, [r3, #4]
 800b878:	4b1f      	ldr	r3, [pc, #124]	; (800b8f8 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800b87a:	4013      	ands	r3, r2
 800b87c:	8879      	ldrh	r1, [r7, #2]
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	6812      	ldr	r2, [r2, #0]
 800b882:	430b      	orrs	r3, r1
 800b884:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	689a      	ldr	r2, [r3, #8]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b894:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	691a      	ldr	r2, [r3, #16]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800b8a4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f042 0201 	orr.w	r2, r2, #1
 800b8b4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b8be:	d107      	bne.n	800b8d0 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8ce:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800b8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3718      	adds	r7, #24
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	0800bd85 	.word	0x0800bd85
 800b8e8:	0800bcf9 	.word	0x0800bcf9
 800b8ec:	0800bda1 	.word	0x0800bda1
 800b8f0:	0800bd3f 	.word	0x0800bd3f
 800b8f4:	0800bdbd 	.word	0x0800bdbd
 800b8f8:	ffff0000 	.word	0xffff0000

0800b8fc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08a      	sub	sp, #40	; 0x28
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	691b      	ldr	r3, [r3, #16]
 800b90a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	695b      	ldr	r3, [r3, #20]
 800b912:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b914:	6a3a      	ldr	r2, [r7, #32]
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	4013      	ands	r3, r2
 800b91a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b924:	2300      	movs	r3, #0
 800b926:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b92e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3330      	adds	r3, #48	; 0x30
 800b936:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d113      	bne.n	800b96a <HAL_SPI_IRQHandler+0x6e>
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	f003 0320 	and.w	r3, r3, #32
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10e      	bne.n	800b96a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b952:	2b00      	cmp	r3, #0
 800b954:	d009      	beq.n	800b96a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	4798      	blx	r3
    handled = 1UL;
 800b966:	2301      	movs	r3, #1
 800b968:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10f      	bne.n	800b994 <HAL_SPI_IRQHandler+0x98>
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	f003 0301 	and.w	r3, r3, #1
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00a      	beq.n	800b994 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b984:	2b00      	cmp	r3, #0
 800b986:	d105      	bne.n	800b994 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	4798      	blx	r3
    handled = 1UL;
 800b990:	2301      	movs	r3, #1
 800b992:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	f003 0320 	and.w	r3, r3, #32
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10f      	bne.n	800b9be <HAL_SPI_IRQHandler+0xc2>
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	f003 0302 	and.w	r3, r3, #2
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00a      	beq.n	800b9be <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b9a8:	69bb      	ldr	r3, [r7, #24]
 800b9aa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d105      	bne.n	800b9be <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	4798      	blx	r3
    handled = 1UL;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800b9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f040 815a 	bne.w	800bc7a <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	f003 0308 	and.w	r3, r3, #8
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 808b 	beq.w	800bae8 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	699a      	ldr	r2, [r3, #24]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f042 0208 	orr.w	r2, r2, #8
 800b9e0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	699a      	ldr	r2, [r3, #24]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f042 0210 	orr.w	r2, r2, #16
 800b9f0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	699a      	ldr	r2, [r3, #24]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba00:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	691a      	ldr	r2, [r3, #16]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f022 0208 	bic.w	r2, r2, #8
 800ba10:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d13d      	bne.n	800ba9c <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800ba20:	e036      	b.n	800ba90 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	2b0f      	cmp	r3, #15
 800ba28:	d90b      	bls.n	800ba42 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ba34:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba3a:	1d1a      	adds	r2, r3, #4
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	665a      	str	r2, [r3, #100]	; 0x64
 800ba40:	e01d      	b.n	800ba7e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	2b07      	cmp	r3, #7
 800ba48:	d90b      	bls.n	800ba62 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	8812      	ldrh	r2, [r2, #0]
 800ba52:	b292      	uxth	r2, r2
 800ba54:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba5a:	1c9a      	adds	r2, r3, #2
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	665a      	str	r2, [r3, #100]	; 0x64
 800ba60:	e00d      	b.n	800ba7e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba6e:	7812      	ldrb	r2, [r2, #0]
 800ba70:	b2d2      	uxtb	r2, r2
 800ba72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba78:	1c5a      	adds	r2, r3, #1
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	3b01      	subs	r3, #1
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1c2      	bne.n	800ba22 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 f9cb 	bl	800be38 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2201      	movs	r2, #1
 800baa6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d003      	beq.n	800babc <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 f915 	bl	800bce4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800baba:	e0e3      	b.n	800bc84 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800babc:	7cfb      	ldrb	r3, [r7, #19]
 800babe:	2b05      	cmp	r3, #5
 800bac0:	d103      	bne.n	800baca <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7f5 fe20 	bl	8001708 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800bac8:	e0d9      	b.n	800bc7e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800baca:	7cfb      	ldrb	r3, [r7, #19]
 800bacc:	2b04      	cmp	r3, #4
 800bace:	d103      	bne.n	800bad8 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 f8e9 	bl	800bca8 <HAL_SPI_RxCpltCallback>
    return;
 800bad6:	e0d2      	b.n	800bc7e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800bad8:	7cfb      	ldrb	r3, [r7, #19]
 800bada:	2b03      	cmp	r3, #3
 800badc:	f040 80cf 	bne.w	800bc7e <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 f8d7 	bl	800bc94 <HAL_SPI_TxCpltCallback>
    return;
 800bae6:	e0ca      	b.n	800bc7e <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800bae8:	69fb      	ldr	r3, [r7, #28]
 800baea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00d      	beq.n	800bb0e <HAL_SPI_IRQHandler+0x212>
 800baf2:	6a3b      	ldr	r3, [r7, #32]
 800baf4:	f003 0308 	and.w	r3, r3, #8
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d008      	beq.n	800bb0e <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	699a      	ldr	r2, [r3, #24]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb0a:	619a      	str	r2, [r3, #24]

    return;
 800bb0c:	e0ba      	b.n	800bc84 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f000 80b5 	beq.w	800bc84 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00f      	beq.n	800bb44 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb2a:	f043 0204 	orr.w	r2, r3, #4
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	699a      	ldr	r2, [r3, #24]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb42:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00f      	beq.n	800bb6e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb54:	f043 0201 	orr.w	r2, r3, #1
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	699a      	ldr	r2, [r3, #24]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb6c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00f      	beq.n	800bb98 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb7e:	f043 0208 	orr.w	r2, r3, #8
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	699a      	ldr	r2, [r3, #24]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb96:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	f003 0320 	and.w	r3, r3, #32
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00f      	beq.n	800bbc2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bba8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	699a      	ldr	r2, [r3, #24]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f042 0220 	orr.w	r2, r2, #32
 800bbc0:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d05a      	beq.n	800bc82 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f022 0201 	bic.w	r2, r2, #1
 800bbda:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	6919      	ldr	r1, [r3, #16]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	4b29      	ldr	r3, [pc, #164]	; (800bc8c <HAL_SPI_IRQHandler+0x390>)
 800bbe8:	400b      	ands	r3, r1
 800bbea:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bbf2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bbf6:	d138      	bne.n	800bc6a <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	689a      	ldr	r2, [r3, #8]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bc06:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d013      	beq.n	800bc38 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc14:	4a1e      	ldr	r2, [pc, #120]	; (800bc90 <HAL_SPI_IRQHandler+0x394>)
 800bc16:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7f8 fc5b 	bl	80044d8 <HAL_DMA_Abort_IT>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d007      	beq.n	800bc38 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d020      	beq.n	800bc82 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc44:	4a12      	ldr	r2, [pc, #72]	; (800bc90 <HAL_SPI_IRQHandler+0x394>)
 800bc46:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7f8 fc43 	bl	80044d8 <HAL_DMA_Abort_IT>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d014      	beq.n	800bc82 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bc68:	e00b      	b.n	800bc82 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f836 	bl	800bce4 <HAL_SPI_ErrorCallback>
    return;
 800bc78:	e003      	b.n	800bc82 <HAL_SPI_IRQHandler+0x386>
    return;
 800bc7a:	bf00      	nop
 800bc7c:	e002      	b.n	800bc84 <HAL_SPI_IRQHandler+0x388>
    return;
 800bc7e:	bf00      	nop
 800bc80:	e000      	b.n	800bc84 <HAL_SPI_IRQHandler+0x388>
    return;
 800bc82:	bf00      	nop
  }
}
 800bc84:	3728      	adds	r7, #40	; 0x28
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	fffffc94 	.word	0xfffffc94
 800bc90:	0800be03 	.word	0x0800be03

0800bc94 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800bc9c:	bf00      	nop
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800bcb0:	bf00      	nop
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800bcc4:	bf00      	nop
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800bcd8:	bf00      	nop
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bcec:	bf00      	nop
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd04:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	2b07      	cmp	r3, #7
 800bd10:	d011      	beq.n	800bd36 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd16:	69db      	ldr	r3, [r3, #28]
 800bd18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd1c:	d103      	bne.n	800bd26 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f7ff ffc2 	bl	800bca8 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800bd24:	e007      	b.n	800bd36 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	691a      	ldr	r2, [r3, #16]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f042 0208 	orr.w	r2, r2, #8
 800bd34:	611a      	str	r2, [r3, #16]
}
 800bd36:	bf00      	nop
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b084      	sub	sp, #16
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd4a:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	2b07      	cmp	r3, #7
 800bd56:	d011      	beq.n	800bd7c <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd5c:	69db      	ldr	r3, [r3, #28]
 800bd5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd62:	d103      	bne.n	800bd6c <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f7f5 fccf 	bl	8001708 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800bd6a:	e007      	b.n	800bd7c <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	691a      	ldr	r2, [r3, #16]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f042 0208 	orr.w	r2, r2, #8
 800bd7a:	611a      	str	r2, [r3, #16]
}
 800bd7c:	bf00      	nop
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd90:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f7ff ff92 	bl	800bcbc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd98:	bf00      	nop
 800bd9a:	3710      	adds	r7, #16
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f7ff ff8e 	bl	800bcd0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bdb4:	bf00      	nop
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc8:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f7f9 fd2c 	bl	8005828 <HAL_DMA_GetError>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b02      	cmp	r3, #2
 800bdd4:	d011      	beq.n	800bdfa <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	f000 f82e 	bl	800be38 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bde2:	f043 0210 	orr.w	r2, r3, #16
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	f7ff ff75 	bl	800bce4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800bdfa:	bf00      	nop
 800bdfc:	3710      	adds	r7, #16
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b084      	sub	sp, #16
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2200      	movs	r2, #0
 800be14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f7ff ff5b 	bl	800bce4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be2e:	bf00      	nop
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
	...

0800be38 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	695b      	ldr	r3, [r3, #20]
 800be46:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	699a      	ldr	r2, [r3, #24]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f042 0208 	orr.w	r2, r2, #8
 800be56:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	699a      	ldr	r2, [r3, #24]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f042 0210 	orr.w	r2, r2, #16
 800be66:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f022 0201 	bic.w	r2, r2, #1
 800be76:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	6919      	ldr	r1, [r3, #16]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	4b3c      	ldr	r3, [pc, #240]	; (800bf74 <SPI_CloseTransfer+0x13c>)
 800be84:	400b      	ands	r3, r1
 800be86:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	689a      	ldr	r2, [r3, #8]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800be96:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	2b04      	cmp	r3, #4
 800bea2:	d014      	beq.n	800bece <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f003 0320 	and.w	r3, r3, #32
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00f      	beq.n	800bece <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800beb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	699a      	ldr	r2, [r3, #24]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f042 0220 	orr.w	r2, r2, #32
 800becc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	2b03      	cmp	r3, #3
 800bed8:	d014      	beq.n	800bf04 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00f      	beq.n	800bf04 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800beea:	f043 0204 	orr.w	r2, r3, #4
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	699a      	ldr	r2, [r3, #24]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf02:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00f      	beq.n	800bf2e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf14:	f043 0201 	orr.w	r2, r3, #1
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	699a      	ldr	r2, [r3, #24]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf2c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00f      	beq.n	800bf58 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf3e:	f043 0208 	orr.w	r2, r3, #8
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	699a      	ldr	r2, [r3, #24]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf56:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800bf68:	bf00      	nop
 800bf6a:	3714      	adds	r7, #20
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	fffffc90 	.word	0xfffffc90

0800bf78 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	603b      	str	r3, [r7, #0]
 800bf84:	4613      	mov	r3, r2
 800bf86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bf88:	e010      	b.n	800bfac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf8a:	f7f7 f81b 	bl	8002fc4 <HAL_GetTick>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	1ad3      	subs	r3, r2, r3
 800bf94:	69ba      	ldr	r2, [r7, #24]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d803      	bhi.n	800bfa2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa0:	d102      	bne.n	800bfa8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d101      	bne.n	800bfac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bfa8:	2303      	movs	r3, #3
 800bfaa:	e00f      	b.n	800bfcc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	695a      	ldr	r2, [r3, #20]
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	4013      	ands	r3, r2
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	bf0c      	ite	eq
 800bfbc:	2301      	moveq	r3, #1
 800bfbe:	2300      	movne	r3, #0
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	79fb      	ldrb	r3, [r7, #7]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d0df      	beq.n	800bf8a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfe0:	095b      	lsrs	r3, r3, #5
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	3301      	adds	r3, #1
 800bfec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	3307      	adds	r3, #7
 800bff2:	08db      	lsrs	r3, r3, #3
 800bff4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	fb02 f303 	mul.w	r3, r2, r3
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3714      	adds	r7, #20
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr

0800c00a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b082      	sub	sp, #8
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d101      	bne.n	800c01c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c018:	2301      	movs	r3, #1
 800c01a:	e049      	b.n	800c0b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c022:	b2db      	uxtb	r3, r3
 800c024:	2b00      	cmp	r3, #0
 800c026:	d106      	bne.n	800c036 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7f6 fbbf 	bl	80027b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2202      	movs	r2, #2
 800c03a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	3304      	adds	r3, #4
 800c046:	4619      	mov	r1, r3
 800c048:	4610      	mov	r0, r2
 800c04a:	f000 fda1 	bl	800cb90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2201      	movs	r2, #1
 800c052:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2201      	movs	r2, #1
 800c05a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2201      	movs	r2, #1
 800c062:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2201      	movs	r2, #1
 800c06a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2201      	movs	r2, #1
 800c072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2201      	movs	r2, #1
 800c07a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2201      	movs	r2, #1
 800c082:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2201      	movs	r2, #1
 800c08a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2201      	movs	r2, #1
 800c092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2201      	movs	r2, #1
 800c09a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0ae:	2300      	movs	r3, #0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3708      	adds	r7, #8
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d001      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e054      	b.n	800c17a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2202      	movs	r2, #2
 800c0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	68da      	ldr	r2, [r3, #12]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f042 0201 	orr.w	r2, r2, #1
 800c0e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a26      	ldr	r2, [pc, #152]	; (800c188 <HAL_TIM_Base_Start_IT+0xd0>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d022      	beq.n	800c138 <HAL_TIM_Base_Start_IT+0x80>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0fa:	d01d      	beq.n	800c138 <HAL_TIM_Base_Start_IT+0x80>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a22      	ldr	r2, [pc, #136]	; (800c18c <HAL_TIM_Base_Start_IT+0xd4>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d018      	beq.n	800c138 <HAL_TIM_Base_Start_IT+0x80>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a21      	ldr	r2, [pc, #132]	; (800c190 <HAL_TIM_Base_Start_IT+0xd8>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d013      	beq.n	800c138 <HAL_TIM_Base_Start_IT+0x80>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a1f      	ldr	r2, [pc, #124]	; (800c194 <HAL_TIM_Base_Start_IT+0xdc>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d00e      	beq.n	800c138 <HAL_TIM_Base_Start_IT+0x80>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a1e      	ldr	r2, [pc, #120]	; (800c198 <HAL_TIM_Base_Start_IT+0xe0>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d009      	beq.n	800c138 <HAL_TIM_Base_Start_IT+0x80>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4a1c      	ldr	r2, [pc, #112]	; (800c19c <HAL_TIM_Base_Start_IT+0xe4>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d004      	beq.n	800c138 <HAL_TIM_Base_Start_IT+0x80>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4a1b      	ldr	r2, [pc, #108]	; (800c1a0 <HAL_TIM_Base_Start_IT+0xe8>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d115      	bne.n	800c164 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	689a      	ldr	r2, [r3, #8]
 800c13e:	4b19      	ldr	r3, [pc, #100]	; (800c1a4 <HAL_TIM_Base_Start_IT+0xec>)
 800c140:	4013      	ands	r3, r2
 800c142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b06      	cmp	r3, #6
 800c148:	d015      	beq.n	800c176 <HAL_TIM_Base_Start_IT+0xbe>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c150:	d011      	beq.n	800c176 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f042 0201 	orr.w	r2, r2, #1
 800c160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c162:	e008      	b.n	800c176 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f042 0201 	orr.w	r2, r2, #1
 800c172:	601a      	str	r2, [r3, #0]
 800c174:	e000      	b.n	800c178 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c176:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3714      	adds	r7, #20
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	40010000 	.word	0x40010000
 800c18c:	40000400 	.word	0x40000400
 800c190:	40000800 	.word	0x40000800
 800c194:	40000c00 	.word	0x40000c00
 800c198:	40010400 	.word	0x40010400
 800c19c:	40001800 	.word	0x40001800
 800c1a0:	40014000 	.word	0x40014000
 800c1a4:	00010007 	.word	0x00010007

0800c1a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d101      	bne.n	800c1ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	e049      	b.n	800c24e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d106      	bne.n	800c1d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 f841 	bl	800c256 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	3304      	adds	r3, #4
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	4610      	mov	r0, r2
 800c1e8:	f000 fcd2 	bl	800cb90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2201      	movs	r2, #1
 800c210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2201      	movs	r2, #1
 800c218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2201      	movs	r2, #1
 800c220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2201      	movs	r2, #1
 800c228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2201      	movs	r2, #1
 800c230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2201      	movs	r2, #1
 800c238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c256:	b480      	push	{r7}
 800c258:	b083      	sub	sp, #12
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c25e:	bf00      	nop
 800c260:	370c      	adds	r7, #12
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b082      	sub	sp, #8
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d101      	bne.n	800c27c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c278:	2301      	movs	r3, #1
 800c27a:	e049      	b.n	800c310 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c282:	b2db      	uxtb	r3, r3
 800c284:	2b00      	cmp	r3, #0
 800c286:	d106      	bne.n	800c296 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 f841 	bl	800c318 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2202      	movs	r2, #2
 800c29a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	3304      	adds	r3, #4
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	f000 fc71 	bl	800cb90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2201      	movs	r2, #1
 800c302:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2201      	movs	r2, #1
 800c30a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c320:	bf00      	nop
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	691b      	ldr	r3, [r3, #16]
 800c33a:	f003 0302 	and.w	r3, r3, #2
 800c33e:	2b02      	cmp	r3, #2
 800c340:	d122      	bne.n	800c388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	f003 0302 	and.w	r3, r3, #2
 800c34c:	2b02      	cmp	r3, #2
 800c34e:	d11b      	bne.n	800c388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f06f 0202 	mvn.w	r2, #2
 800c358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2201      	movs	r2, #1
 800c35e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	699b      	ldr	r3, [r3, #24]
 800c366:	f003 0303 	and.w	r3, r3, #3
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d003      	beq.n	800c376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fbf0 	bl	800cb54 <HAL_TIM_IC_CaptureCallback>
 800c374:	e005      	b.n	800c382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 fbe2 	bl	800cb40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 fbf3 	bl	800cb68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	691b      	ldr	r3, [r3, #16]
 800c38e:	f003 0304 	and.w	r3, r3, #4
 800c392:	2b04      	cmp	r3, #4
 800c394:	d122      	bne.n	800c3dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	f003 0304 	and.w	r3, r3, #4
 800c3a0:	2b04      	cmp	r3, #4
 800c3a2:	d11b      	bne.n	800c3dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f06f 0204 	mvn.w	r2, #4
 800c3ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2202      	movs	r2, #2
 800c3b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	699b      	ldr	r3, [r3, #24]
 800c3ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d003      	beq.n	800c3ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 fbc6 	bl	800cb54 <HAL_TIM_IC_CaptureCallback>
 800c3c8:	e005      	b.n	800c3d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 fbb8 	bl	800cb40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 fbc9 	bl	800cb68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	f003 0308 	and.w	r3, r3, #8
 800c3e6:	2b08      	cmp	r3, #8
 800c3e8:	d122      	bne.n	800c430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	f003 0308 	and.w	r3, r3, #8
 800c3f4:	2b08      	cmp	r3, #8
 800c3f6:	d11b      	bne.n	800c430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f06f 0208 	mvn.w	r2, #8
 800c400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2204      	movs	r2, #4
 800c406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	69db      	ldr	r3, [r3, #28]
 800c40e:	f003 0303 	and.w	r3, r3, #3
 800c412:	2b00      	cmp	r3, #0
 800c414:	d003      	beq.n	800c41e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 fb9c 	bl	800cb54 <HAL_TIM_IC_CaptureCallback>
 800c41c:	e005      	b.n	800c42a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 fb8e 	bl	800cb40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 fb9f 	bl	800cb68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2200      	movs	r2, #0
 800c42e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	f003 0310 	and.w	r3, r3, #16
 800c43a:	2b10      	cmp	r3, #16
 800c43c:	d122      	bne.n	800c484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	f003 0310 	and.w	r3, r3, #16
 800c448:	2b10      	cmp	r3, #16
 800c44a:	d11b      	bne.n	800c484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f06f 0210 	mvn.w	r2, #16
 800c454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2208      	movs	r2, #8
 800c45a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	69db      	ldr	r3, [r3, #28]
 800c462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c466:	2b00      	cmp	r3, #0
 800c468:	d003      	beq.n	800c472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 fb72 	bl	800cb54 <HAL_TIM_IC_CaptureCallback>
 800c470:	e005      	b.n	800c47e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fb64 	bl	800cb40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 fb75 	bl	800cb68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	f003 0301 	and.w	r3, r3, #1
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d10e      	bne.n	800c4b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	f003 0301 	and.w	r3, r3, #1
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d107      	bne.n	800c4b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f06f 0201 	mvn.w	r2, #1
 800c4a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7f5 f9a2 	bl	80017f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4ba:	2b80      	cmp	r3, #128	; 0x80
 800c4bc:	d10e      	bne.n	800c4dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4c8:	2b80      	cmp	r3, #128	; 0x80
 800c4ca:	d107      	bne.n	800c4dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c4d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f001 fab4 	bl	800da44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4ea:	d10e      	bne.n	800c50a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4f6:	2b80      	cmp	r3, #128	; 0x80
 800c4f8:	d107      	bne.n	800c50a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f001 faa7 	bl	800da58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	691b      	ldr	r3, [r3, #16]
 800c510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c514:	2b40      	cmp	r3, #64	; 0x40
 800c516:	d10e      	bne.n	800c536 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c522:	2b40      	cmp	r3, #64	; 0x40
 800c524:	d107      	bne.n	800c536 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c52e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 fb23 	bl	800cb7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	f003 0320 	and.w	r3, r3, #32
 800c540:	2b20      	cmp	r3, #32
 800c542:	d10e      	bne.n	800c562 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	f003 0320 	and.w	r3, r3, #32
 800c54e:	2b20      	cmp	r3, #32
 800c550:	d107      	bne.n	800c562 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f06f 0220 	mvn.w	r2, #32
 800c55a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f001 fa67 	bl	800da30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c562:	bf00      	nop
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b086      	sub	sp, #24
 800c56e:	af00      	add	r7, sp, #0
 800c570:	60f8      	str	r0, [r7, #12]
 800c572:	60b9      	str	r1, [r7, #8]
 800c574:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c576:	2300      	movs	r3, #0
 800c578:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c580:	2b01      	cmp	r3, #1
 800c582:	d101      	bne.n	800c588 <HAL_TIM_IC_ConfigChannel+0x1e>
 800c584:	2302      	movs	r3, #2
 800c586:	e088      	b.n	800c69a <HAL_TIM_IC_ConfigChannel+0x130>
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d11b      	bne.n	800c5ce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6818      	ldr	r0, [r3, #0]
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	6819      	ldr	r1, [r3, #0]
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	685a      	ldr	r2, [r3, #4]
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	f000 ff4d 	bl	800d444 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	699a      	ldr	r2, [r3, #24]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f022 020c 	bic.w	r2, r2, #12
 800c5b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	6999      	ldr	r1, [r3, #24]
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	689a      	ldr	r2, [r3, #8]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	430a      	orrs	r2, r1
 800c5ca:	619a      	str	r2, [r3, #24]
 800c5cc:	e060      	b.n	800c690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2b04      	cmp	r3, #4
 800c5d2:	d11c      	bne.n	800c60e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	6818      	ldr	r0, [r3, #0]
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	6819      	ldr	r1, [r3, #0]
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	685a      	ldr	r2, [r3, #4]
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	f000 ffd1 	bl	800d58a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	699a      	ldr	r2, [r3, #24]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c5f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	6999      	ldr	r1, [r3, #24]
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	021a      	lsls	r2, r3, #8
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	430a      	orrs	r2, r1
 800c60a:	619a      	str	r2, [r3, #24]
 800c60c:	e040      	b.n	800c690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2b08      	cmp	r3, #8
 800c612:	d11b      	bne.n	800c64c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6818      	ldr	r0, [r3, #0]
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	6819      	ldr	r1, [r3, #0]
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	685a      	ldr	r2, [r3, #4]
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	f001 f81e 	bl	800d664 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	69da      	ldr	r2, [r3, #28]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f022 020c 	bic.w	r2, r2, #12
 800c636:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	69d9      	ldr	r1, [r3, #28]
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	689a      	ldr	r2, [r3, #8]
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	430a      	orrs	r2, r1
 800c648:	61da      	str	r2, [r3, #28]
 800c64a:	e021      	b.n	800c690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b0c      	cmp	r3, #12
 800c650:	d11c      	bne.n	800c68c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6818      	ldr	r0, [r3, #0]
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	6819      	ldr	r1, [r3, #0]
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	685a      	ldr	r2, [r3, #4]
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	f001 f83b 	bl	800d6dc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	69da      	ldr	r2, [r3, #28]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c674:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	69d9      	ldr	r1, [r3, #28]
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	021a      	lsls	r2, r3, #8
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	430a      	orrs	r2, r1
 800c688:	61da      	str	r2, [r3, #28]
 800c68a:	e001      	b.n	800c690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c68c:	2301      	movs	r3, #1
 800c68e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2200      	movs	r2, #0
 800c694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c698:	7dfb      	ldrb	r3, [r7, #23]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3718      	adds	r7, #24
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
	...

0800c6a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b086      	sub	sp, #24
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d101      	bne.n	800c6c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c6be:	2302      	movs	r3, #2
 800c6c0:	e0ff      	b.n	800c8c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2b14      	cmp	r3, #20
 800c6ce:	f200 80f0 	bhi.w	800c8b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c6d2:	a201      	add	r2, pc, #4	; (adr r2, 800c6d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d8:	0800c72d 	.word	0x0800c72d
 800c6dc:	0800c8b3 	.word	0x0800c8b3
 800c6e0:	0800c8b3 	.word	0x0800c8b3
 800c6e4:	0800c8b3 	.word	0x0800c8b3
 800c6e8:	0800c76d 	.word	0x0800c76d
 800c6ec:	0800c8b3 	.word	0x0800c8b3
 800c6f0:	0800c8b3 	.word	0x0800c8b3
 800c6f4:	0800c8b3 	.word	0x0800c8b3
 800c6f8:	0800c7af 	.word	0x0800c7af
 800c6fc:	0800c8b3 	.word	0x0800c8b3
 800c700:	0800c8b3 	.word	0x0800c8b3
 800c704:	0800c8b3 	.word	0x0800c8b3
 800c708:	0800c7ef 	.word	0x0800c7ef
 800c70c:	0800c8b3 	.word	0x0800c8b3
 800c710:	0800c8b3 	.word	0x0800c8b3
 800c714:	0800c8b3 	.word	0x0800c8b3
 800c718:	0800c831 	.word	0x0800c831
 800c71c:	0800c8b3 	.word	0x0800c8b3
 800c720:	0800c8b3 	.word	0x0800c8b3
 800c724:	0800c8b3 	.word	0x0800c8b3
 800c728:	0800c871 	.word	0x0800c871
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	68b9      	ldr	r1, [r7, #8]
 800c732:	4618      	mov	r0, r3
 800c734:	f000 fac6 	bl	800ccc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	699a      	ldr	r2, [r3, #24]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f042 0208 	orr.w	r2, r2, #8
 800c746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	699a      	ldr	r2, [r3, #24]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f022 0204 	bic.w	r2, r2, #4
 800c756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	6999      	ldr	r1, [r3, #24]
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	691a      	ldr	r2, [r3, #16]
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	430a      	orrs	r2, r1
 800c768:	619a      	str	r2, [r3, #24]
      break;
 800c76a:	e0a5      	b.n	800c8b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68b9      	ldr	r1, [r7, #8]
 800c772:	4618      	mov	r0, r3
 800c774:	f000 fb36 	bl	800cde4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	699a      	ldr	r2, [r3, #24]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	699a      	ldr	r2, [r3, #24]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	6999      	ldr	r1, [r3, #24]
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	021a      	lsls	r2, r3, #8
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	430a      	orrs	r2, r1
 800c7aa:	619a      	str	r2, [r3, #24]
      break;
 800c7ac:	e084      	b.n	800c8b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	68b9      	ldr	r1, [r7, #8]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f000 fb9f 	bl	800cef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	69da      	ldr	r2, [r3, #28]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f042 0208 	orr.w	r2, r2, #8
 800c7c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	69da      	ldr	r2, [r3, #28]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f022 0204 	bic.w	r2, r2, #4
 800c7d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	69d9      	ldr	r1, [r3, #28]
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	691a      	ldr	r2, [r3, #16]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	430a      	orrs	r2, r1
 800c7ea:	61da      	str	r2, [r3, #28]
      break;
 800c7ec:	e064      	b.n	800c8b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	68b9      	ldr	r1, [r7, #8]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f000 fc07 	bl	800d008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	69da      	ldr	r2, [r3, #28]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	69da      	ldr	r2, [r3, #28]
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	69d9      	ldr	r1, [r3, #28]
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	021a      	lsls	r2, r3, #8
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	430a      	orrs	r2, r1
 800c82c:	61da      	str	r2, [r3, #28]
      break;
 800c82e:	e043      	b.n	800c8b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	68b9      	ldr	r1, [r7, #8]
 800c836:	4618      	mov	r0, r3
 800c838:	f000 fc50 	bl	800d0dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f042 0208 	orr.w	r2, r2, #8
 800c84a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f022 0204 	bic.w	r2, r2, #4
 800c85a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	691a      	ldr	r2, [r3, #16]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	430a      	orrs	r2, r1
 800c86c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c86e:	e023      	b.n	800c8b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	68b9      	ldr	r1, [r7, #8]
 800c876:	4618      	mov	r0, r3
 800c878:	f000 fc94 	bl	800d1a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c88a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c89a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	691b      	ldr	r3, [r3, #16]
 800c8a6:	021a      	lsls	r2, r3, #8
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	430a      	orrs	r2, r1
 800c8ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c8b0:	e002      	b.n	800c8b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	75fb      	strb	r3, [r7, #23]
      break;
 800c8b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c8c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3718      	adds	r7, #24
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop

0800c8cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d101      	bne.n	800c8e8 <HAL_TIM_ConfigClockSource+0x1c>
 800c8e4:	2302      	movs	r3, #2
 800c8e6:	e0dc      	b.n	800caa2 <HAL_TIM_ConfigClockSource+0x1d6>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2202      	movs	r2, #2
 800c8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	689b      	ldr	r3, [r3, #8]
 800c8fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c900:	68ba      	ldr	r2, [r7, #8]
 800c902:	4b6a      	ldr	r3, [pc, #424]	; (800caac <HAL_TIM_ConfigClockSource+0x1e0>)
 800c904:	4013      	ands	r3, r2
 800c906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c90e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a64      	ldr	r2, [pc, #400]	; (800cab0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	f000 80a9 	beq.w	800ca76 <HAL_TIM_ConfigClockSource+0x1aa>
 800c924:	4a62      	ldr	r2, [pc, #392]	; (800cab0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c926:	4293      	cmp	r3, r2
 800c928:	f200 80ae 	bhi.w	800ca88 <HAL_TIM_ConfigClockSource+0x1bc>
 800c92c:	4a61      	ldr	r2, [pc, #388]	; (800cab4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	f000 80a1 	beq.w	800ca76 <HAL_TIM_ConfigClockSource+0x1aa>
 800c934:	4a5f      	ldr	r2, [pc, #380]	; (800cab4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c936:	4293      	cmp	r3, r2
 800c938:	f200 80a6 	bhi.w	800ca88 <HAL_TIM_ConfigClockSource+0x1bc>
 800c93c:	4a5e      	ldr	r2, [pc, #376]	; (800cab8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	f000 8099 	beq.w	800ca76 <HAL_TIM_ConfigClockSource+0x1aa>
 800c944:	4a5c      	ldr	r2, [pc, #368]	; (800cab8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c946:	4293      	cmp	r3, r2
 800c948:	f200 809e 	bhi.w	800ca88 <HAL_TIM_ConfigClockSource+0x1bc>
 800c94c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c950:	f000 8091 	beq.w	800ca76 <HAL_TIM_ConfigClockSource+0x1aa>
 800c954:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c958:	f200 8096 	bhi.w	800ca88 <HAL_TIM_ConfigClockSource+0x1bc>
 800c95c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c960:	f000 8089 	beq.w	800ca76 <HAL_TIM_ConfigClockSource+0x1aa>
 800c964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c968:	f200 808e 	bhi.w	800ca88 <HAL_TIM_ConfigClockSource+0x1bc>
 800c96c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c970:	d03e      	beq.n	800c9f0 <HAL_TIM_ConfigClockSource+0x124>
 800c972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c976:	f200 8087 	bhi.w	800ca88 <HAL_TIM_ConfigClockSource+0x1bc>
 800c97a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c97e:	f000 8086 	beq.w	800ca8e <HAL_TIM_ConfigClockSource+0x1c2>
 800c982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c986:	d87f      	bhi.n	800ca88 <HAL_TIM_ConfigClockSource+0x1bc>
 800c988:	2b70      	cmp	r3, #112	; 0x70
 800c98a:	d01a      	beq.n	800c9c2 <HAL_TIM_ConfigClockSource+0xf6>
 800c98c:	2b70      	cmp	r3, #112	; 0x70
 800c98e:	d87b      	bhi.n	800ca88 <HAL_TIM_ConfigClockSource+0x1bc>
 800c990:	2b60      	cmp	r3, #96	; 0x60
 800c992:	d050      	beq.n	800ca36 <HAL_TIM_ConfigClockSource+0x16a>
 800c994:	2b60      	cmp	r3, #96	; 0x60
 800c996:	d877      	bhi.n	800ca88 <HAL_TIM_ConfigClockSource+0x1bc>
 800c998:	2b50      	cmp	r3, #80	; 0x50
 800c99a:	d03c      	beq.n	800ca16 <HAL_TIM_ConfigClockSource+0x14a>
 800c99c:	2b50      	cmp	r3, #80	; 0x50
 800c99e:	d873      	bhi.n	800ca88 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9a0:	2b40      	cmp	r3, #64	; 0x40
 800c9a2:	d058      	beq.n	800ca56 <HAL_TIM_ConfigClockSource+0x18a>
 800c9a4:	2b40      	cmp	r3, #64	; 0x40
 800c9a6:	d86f      	bhi.n	800ca88 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9a8:	2b30      	cmp	r3, #48	; 0x30
 800c9aa:	d064      	beq.n	800ca76 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9ac:	2b30      	cmp	r3, #48	; 0x30
 800c9ae:	d86b      	bhi.n	800ca88 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9b0:	2b20      	cmp	r3, #32
 800c9b2:	d060      	beq.n	800ca76 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9b4:	2b20      	cmp	r3, #32
 800c9b6:	d867      	bhi.n	800ca88 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d05c      	beq.n	800ca76 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9bc:	2b10      	cmp	r3, #16
 800c9be:	d05a      	beq.n	800ca76 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9c0:	e062      	b.n	800ca88 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6818      	ldr	r0, [r3, #0]
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	6899      	ldr	r1, [r3, #8]
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	685a      	ldr	r2, [r3, #4]
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	f000 fedf 	bl	800d794 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c9e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	68ba      	ldr	r2, [r7, #8]
 800c9ec:	609a      	str	r2, [r3, #8]
      break;
 800c9ee:	e04f      	b.n	800ca90 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6818      	ldr	r0, [r3, #0]
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	6899      	ldr	r1, [r3, #8]
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	685a      	ldr	r2, [r3, #4]
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	f000 fec8 	bl	800d794 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	689a      	ldr	r2, [r3, #8]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca12:	609a      	str	r2, [r3, #8]
      break;
 800ca14:	e03c      	b.n	800ca90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6818      	ldr	r0, [r3, #0]
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	6859      	ldr	r1, [r3, #4]
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	461a      	mov	r2, r3
 800ca24:	f000 fd82 	bl	800d52c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2150      	movs	r1, #80	; 0x50
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 fe92 	bl	800d758 <TIM_ITRx_SetConfig>
      break;
 800ca34:	e02c      	b.n	800ca90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6818      	ldr	r0, [r3, #0]
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	6859      	ldr	r1, [r3, #4]
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	68db      	ldr	r3, [r3, #12]
 800ca42:	461a      	mov	r2, r3
 800ca44:	f000 fdde 	bl	800d604 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2160      	movs	r1, #96	; 0x60
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f000 fe82 	bl	800d758 <TIM_ITRx_SetConfig>
      break;
 800ca54:	e01c      	b.n	800ca90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6818      	ldr	r0, [r3, #0]
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	6859      	ldr	r1, [r3, #4]
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	68db      	ldr	r3, [r3, #12]
 800ca62:	461a      	mov	r2, r3
 800ca64:	f000 fd62 	bl	800d52c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2140      	movs	r1, #64	; 0x40
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f000 fe72 	bl	800d758 <TIM_ITRx_SetConfig>
      break;
 800ca74:	e00c      	b.n	800ca90 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4619      	mov	r1, r3
 800ca80:	4610      	mov	r0, r2
 800ca82:	f000 fe69 	bl	800d758 <TIM_ITRx_SetConfig>
      break;
 800ca86:	e003      	b.n	800ca90 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ca8c:	e000      	b.n	800ca90 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ca8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	ffceff88 	.word	0xffceff88
 800cab0:	00100040 	.word	0x00100040
 800cab4:	00100030 	.word	0x00100030
 800cab8:	00100020 	.word	0x00100020

0800cabc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d101      	bne.n	800cad4 <HAL_TIM_SlaveConfigSynchro+0x18>
 800cad0:	2302      	movs	r3, #2
 800cad2:	e031      	b.n	800cb38 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2201      	movs	r2, #1
 800cad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2202      	movs	r2, #2
 800cae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800cae4:	6839      	ldr	r1, [r7, #0]
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fbc2 	bl	800d270 <TIM_SlaveTimer_SetConfig>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d009      	beq.n	800cb06 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2201      	movs	r2, #1
 800caf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800cb02:	2301      	movs	r3, #1
 800cb04:	e018      	b.n	800cb38 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	68da      	ldr	r2, [r3, #12]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb14:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	68da      	ldr	r2, [r3, #12]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cb24:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2201      	movs	r2, #1
 800cb2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb36:	2300      	movs	r3, #0
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3708      	adds	r7, #8
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cb48:	bf00      	nop
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cb5c:	bf00      	nop
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb70:	bf00      	nop
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb84:	bf00      	nop
 800cb86:	370c      	adds	r7, #12
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4a40      	ldr	r2, [pc, #256]	; (800cca4 <TIM_Base_SetConfig+0x114>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d013      	beq.n	800cbd0 <TIM_Base_SetConfig+0x40>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbae:	d00f      	beq.n	800cbd0 <TIM_Base_SetConfig+0x40>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	4a3d      	ldr	r2, [pc, #244]	; (800cca8 <TIM_Base_SetConfig+0x118>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d00b      	beq.n	800cbd0 <TIM_Base_SetConfig+0x40>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	4a3c      	ldr	r2, [pc, #240]	; (800ccac <TIM_Base_SetConfig+0x11c>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d007      	beq.n	800cbd0 <TIM_Base_SetConfig+0x40>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	4a3b      	ldr	r2, [pc, #236]	; (800ccb0 <TIM_Base_SetConfig+0x120>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d003      	beq.n	800cbd0 <TIM_Base_SetConfig+0x40>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	4a3a      	ldr	r2, [pc, #232]	; (800ccb4 <TIM_Base_SetConfig+0x124>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d108      	bne.n	800cbe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	68fa      	ldr	r2, [r7, #12]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4a2f      	ldr	r2, [pc, #188]	; (800cca4 <TIM_Base_SetConfig+0x114>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d01f      	beq.n	800cc2a <TIM_Base_SetConfig+0x9a>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbf0:	d01b      	beq.n	800cc2a <TIM_Base_SetConfig+0x9a>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a2c      	ldr	r2, [pc, #176]	; (800cca8 <TIM_Base_SetConfig+0x118>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d017      	beq.n	800cc2a <TIM_Base_SetConfig+0x9a>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4a2b      	ldr	r2, [pc, #172]	; (800ccac <TIM_Base_SetConfig+0x11c>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d013      	beq.n	800cc2a <TIM_Base_SetConfig+0x9a>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a2a      	ldr	r2, [pc, #168]	; (800ccb0 <TIM_Base_SetConfig+0x120>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d00f      	beq.n	800cc2a <TIM_Base_SetConfig+0x9a>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4a29      	ldr	r2, [pc, #164]	; (800ccb4 <TIM_Base_SetConfig+0x124>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d00b      	beq.n	800cc2a <TIM_Base_SetConfig+0x9a>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4a28      	ldr	r2, [pc, #160]	; (800ccb8 <TIM_Base_SetConfig+0x128>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d007      	beq.n	800cc2a <TIM_Base_SetConfig+0x9a>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a27      	ldr	r2, [pc, #156]	; (800ccbc <TIM_Base_SetConfig+0x12c>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d003      	beq.n	800cc2a <TIM_Base_SetConfig+0x9a>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	4a26      	ldr	r2, [pc, #152]	; (800ccc0 <TIM_Base_SetConfig+0x130>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d108      	bne.n	800cc3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	695b      	ldr	r3, [r3, #20]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	689a      	ldr	r2, [r3, #8]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	4a10      	ldr	r2, [pc, #64]	; (800cca4 <TIM_Base_SetConfig+0x114>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d00f      	beq.n	800cc88 <TIM_Base_SetConfig+0xf8>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	4a12      	ldr	r2, [pc, #72]	; (800ccb4 <TIM_Base_SetConfig+0x124>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d00b      	beq.n	800cc88 <TIM_Base_SetConfig+0xf8>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	4a11      	ldr	r2, [pc, #68]	; (800ccb8 <TIM_Base_SetConfig+0x128>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d007      	beq.n	800cc88 <TIM_Base_SetConfig+0xf8>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	4a10      	ldr	r2, [pc, #64]	; (800ccbc <TIM_Base_SetConfig+0x12c>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d003      	beq.n	800cc88 <TIM_Base_SetConfig+0xf8>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	4a0f      	ldr	r2, [pc, #60]	; (800ccc0 <TIM_Base_SetConfig+0x130>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d103      	bne.n	800cc90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	691a      	ldr	r2, [r3, #16]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2201      	movs	r2, #1
 800cc94:	615a      	str	r2, [r3, #20]
}
 800cc96:	bf00      	nop
 800cc98:	3714      	adds	r7, #20
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	40010000 	.word	0x40010000
 800cca8:	40000400 	.word	0x40000400
 800ccac:	40000800 	.word	0x40000800
 800ccb0:	40000c00 	.word	0x40000c00
 800ccb4:	40010400 	.word	0x40010400
 800ccb8:	40014000 	.word	0x40014000
 800ccbc:	40014400 	.word	0x40014400
 800ccc0:	40014800 	.word	0x40014800

0800ccc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b087      	sub	sp, #28
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6a1b      	ldr	r3, [r3, #32]
 800ccd2:	f023 0201 	bic.w	r2, r3, #1
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6a1b      	ldr	r3, [r3, #32]
 800ccde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	699b      	ldr	r3, [r3, #24]
 800ccea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ccec:	68fa      	ldr	r2, [r7, #12]
 800ccee:	4b37      	ldr	r3, [pc, #220]	; (800cdcc <TIM_OC1_SetConfig+0x108>)
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f023 0303 	bic.w	r3, r3, #3
 800ccfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	4313      	orrs	r3, r2
 800cd04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	f023 0302 	bic.w	r3, r3, #2
 800cd0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	689b      	ldr	r3, [r3, #8]
 800cd12:	697a      	ldr	r2, [r7, #20]
 800cd14:	4313      	orrs	r3, r2
 800cd16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4a2d      	ldr	r2, [pc, #180]	; (800cdd0 <TIM_OC1_SetConfig+0x10c>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d00f      	beq.n	800cd40 <TIM_OC1_SetConfig+0x7c>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4a2c      	ldr	r2, [pc, #176]	; (800cdd4 <TIM_OC1_SetConfig+0x110>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d00b      	beq.n	800cd40 <TIM_OC1_SetConfig+0x7c>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	4a2b      	ldr	r2, [pc, #172]	; (800cdd8 <TIM_OC1_SetConfig+0x114>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d007      	beq.n	800cd40 <TIM_OC1_SetConfig+0x7c>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4a2a      	ldr	r2, [pc, #168]	; (800cddc <TIM_OC1_SetConfig+0x118>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d003      	beq.n	800cd40 <TIM_OC1_SetConfig+0x7c>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	4a29      	ldr	r2, [pc, #164]	; (800cde0 <TIM_OC1_SetConfig+0x11c>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d10c      	bne.n	800cd5a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	f023 0308 	bic.w	r3, r3, #8
 800cd46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	68db      	ldr	r3, [r3, #12]
 800cd4c:	697a      	ldr	r2, [r7, #20]
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	f023 0304 	bic.w	r3, r3, #4
 800cd58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	4a1c      	ldr	r2, [pc, #112]	; (800cdd0 <TIM_OC1_SetConfig+0x10c>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d00f      	beq.n	800cd82 <TIM_OC1_SetConfig+0xbe>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	4a1b      	ldr	r2, [pc, #108]	; (800cdd4 <TIM_OC1_SetConfig+0x110>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d00b      	beq.n	800cd82 <TIM_OC1_SetConfig+0xbe>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	4a1a      	ldr	r2, [pc, #104]	; (800cdd8 <TIM_OC1_SetConfig+0x114>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d007      	beq.n	800cd82 <TIM_OC1_SetConfig+0xbe>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	4a19      	ldr	r2, [pc, #100]	; (800cddc <TIM_OC1_SetConfig+0x118>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d003      	beq.n	800cd82 <TIM_OC1_SetConfig+0xbe>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4a18      	ldr	r2, [pc, #96]	; (800cde0 <TIM_OC1_SetConfig+0x11c>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d111      	bne.n	800cda6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	695b      	ldr	r3, [r3, #20]
 800cd96:	693a      	ldr	r2, [r7, #16]
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	699b      	ldr	r3, [r3, #24]
 800cda0:	693a      	ldr	r2, [r7, #16]
 800cda2:	4313      	orrs	r3, r2
 800cda4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	693a      	ldr	r2, [r7, #16]
 800cdaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	685a      	ldr	r2, [r3, #4]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	697a      	ldr	r2, [r7, #20]
 800cdbe:	621a      	str	r2, [r3, #32]
}
 800cdc0:	bf00      	nop
 800cdc2:	371c      	adds	r7, #28
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr
 800cdcc:	fffeff8f 	.word	0xfffeff8f
 800cdd0:	40010000 	.word	0x40010000
 800cdd4:	40010400 	.word	0x40010400
 800cdd8:	40014000 	.word	0x40014000
 800cddc:	40014400 	.word	0x40014400
 800cde0:	40014800 	.word	0x40014800

0800cde4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b087      	sub	sp, #28
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6a1b      	ldr	r3, [r3, #32]
 800cdf2:	f023 0210 	bic.w	r2, r3, #16
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a1b      	ldr	r3, [r3, #32]
 800cdfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	699b      	ldr	r3, [r3, #24]
 800ce0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ce0c:	68fa      	ldr	r2, [r7, #12]
 800ce0e:	4b34      	ldr	r3, [pc, #208]	; (800cee0 <TIM_OC2_SetConfig+0xfc>)
 800ce10:	4013      	ands	r3, r2
 800ce12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	021b      	lsls	r3, r3, #8
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	4313      	orrs	r3, r2
 800ce26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	f023 0320 	bic.w	r3, r3, #32
 800ce2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	011b      	lsls	r3, r3, #4
 800ce36:	697a      	ldr	r2, [r7, #20]
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4a29      	ldr	r2, [pc, #164]	; (800cee4 <TIM_OC2_SetConfig+0x100>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d003      	beq.n	800ce4c <TIM_OC2_SetConfig+0x68>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4a28      	ldr	r2, [pc, #160]	; (800cee8 <TIM_OC2_SetConfig+0x104>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d10d      	bne.n	800ce68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	011b      	lsls	r3, r3, #4
 800ce5a:	697a      	ldr	r2, [r7, #20]
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	4a1e      	ldr	r2, [pc, #120]	; (800cee4 <TIM_OC2_SetConfig+0x100>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d00f      	beq.n	800ce90 <TIM_OC2_SetConfig+0xac>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	4a1d      	ldr	r2, [pc, #116]	; (800cee8 <TIM_OC2_SetConfig+0x104>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d00b      	beq.n	800ce90 <TIM_OC2_SetConfig+0xac>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	4a1c      	ldr	r2, [pc, #112]	; (800ceec <TIM_OC2_SetConfig+0x108>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d007      	beq.n	800ce90 <TIM_OC2_SetConfig+0xac>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	4a1b      	ldr	r2, [pc, #108]	; (800cef0 <TIM_OC2_SetConfig+0x10c>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d003      	beq.n	800ce90 <TIM_OC2_SetConfig+0xac>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	4a1a      	ldr	r2, [pc, #104]	; (800cef4 <TIM_OC2_SetConfig+0x110>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d113      	bne.n	800ceb8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	695b      	ldr	r3, [r3, #20]
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	693a      	ldr	r2, [r7, #16]
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	699b      	ldr	r3, [r3, #24]
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	693a      	ldr	r2, [r7, #16]
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	693a      	ldr	r2, [r7, #16]
 800cebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	685a      	ldr	r2, [r3, #4]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	697a      	ldr	r2, [r7, #20]
 800ced0:	621a      	str	r2, [r3, #32]
}
 800ced2:	bf00      	nop
 800ced4:	371c      	adds	r7, #28
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	feff8fff 	.word	0xfeff8fff
 800cee4:	40010000 	.word	0x40010000
 800cee8:	40010400 	.word	0x40010400
 800ceec:	40014000 	.word	0x40014000
 800cef0:	40014400 	.word	0x40014400
 800cef4:	40014800 	.word	0x40014800

0800cef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b087      	sub	sp, #28
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6a1b      	ldr	r3, [r3, #32]
 800cf06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6a1b      	ldr	r3, [r3, #32]
 800cf12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	69db      	ldr	r3, [r3, #28]
 800cf1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	4b33      	ldr	r3, [pc, #204]	; (800cff0 <TIM_OC3_SetConfig+0xf8>)
 800cf24:	4013      	ands	r3, r2
 800cf26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f023 0303 	bic.w	r3, r3, #3
 800cf2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	4313      	orrs	r3, r2
 800cf38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	021b      	lsls	r3, r3, #8
 800cf48:	697a      	ldr	r2, [r7, #20]
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4a28      	ldr	r2, [pc, #160]	; (800cff4 <TIM_OC3_SetConfig+0xfc>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d003      	beq.n	800cf5e <TIM_OC3_SetConfig+0x66>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4a27      	ldr	r2, [pc, #156]	; (800cff8 <TIM_OC3_SetConfig+0x100>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d10d      	bne.n	800cf7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	021b      	lsls	r3, r3, #8
 800cf6c:	697a      	ldr	r2, [r7, #20]
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cf78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4a1d      	ldr	r2, [pc, #116]	; (800cff4 <TIM_OC3_SetConfig+0xfc>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d00f      	beq.n	800cfa2 <TIM_OC3_SetConfig+0xaa>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4a1c      	ldr	r2, [pc, #112]	; (800cff8 <TIM_OC3_SetConfig+0x100>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d00b      	beq.n	800cfa2 <TIM_OC3_SetConfig+0xaa>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4a1b      	ldr	r2, [pc, #108]	; (800cffc <TIM_OC3_SetConfig+0x104>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d007      	beq.n	800cfa2 <TIM_OC3_SetConfig+0xaa>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4a1a      	ldr	r2, [pc, #104]	; (800d000 <TIM_OC3_SetConfig+0x108>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d003      	beq.n	800cfa2 <TIM_OC3_SetConfig+0xaa>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4a19      	ldr	r2, [pc, #100]	; (800d004 <TIM_OC3_SetConfig+0x10c>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d113      	bne.n	800cfca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cfb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	695b      	ldr	r3, [r3, #20]
 800cfb6:	011b      	lsls	r3, r3, #4
 800cfb8:	693a      	ldr	r2, [r7, #16]
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	699b      	ldr	r3, [r3, #24]
 800cfc2:	011b      	lsls	r3, r3, #4
 800cfc4:	693a      	ldr	r2, [r7, #16]
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	693a      	ldr	r2, [r7, #16]
 800cfce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	685a      	ldr	r2, [r3, #4]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	697a      	ldr	r2, [r7, #20]
 800cfe2:	621a      	str	r2, [r3, #32]
}
 800cfe4:	bf00      	nop
 800cfe6:	371c      	adds	r7, #28
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr
 800cff0:	fffeff8f 	.word	0xfffeff8f
 800cff4:	40010000 	.word	0x40010000
 800cff8:	40010400 	.word	0x40010400
 800cffc:	40014000 	.word	0x40014000
 800d000:	40014400 	.word	0x40014400
 800d004:	40014800 	.word	0x40014800

0800d008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d008:	b480      	push	{r7}
 800d00a:	b087      	sub	sp, #28
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6a1b      	ldr	r3, [r3, #32]
 800d016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6a1b      	ldr	r3, [r3, #32]
 800d022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	69db      	ldr	r3, [r3, #28]
 800d02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d030:	68fa      	ldr	r2, [r7, #12]
 800d032:	4b24      	ldr	r3, [pc, #144]	; (800d0c4 <TIM_OC4_SetConfig+0xbc>)
 800d034:	4013      	ands	r3, r2
 800d036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d03e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	021b      	lsls	r3, r3, #8
 800d046:	68fa      	ldr	r2, [r7, #12]
 800d048:	4313      	orrs	r3, r2
 800d04a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	031b      	lsls	r3, r3, #12
 800d05a:	693a      	ldr	r2, [r7, #16]
 800d05c:	4313      	orrs	r3, r2
 800d05e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4a19      	ldr	r2, [pc, #100]	; (800d0c8 <TIM_OC4_SetConfig+0xc0>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d00f      	beq.n	800d088 <TIM_OC4_SetConfig+0x80>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	4a18      	ldr	r2, [pc, #96]	; (800d0cc <TIM_OC4_SetConfig+0xc4>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d00b      	beq.n	800d088 <TIM_OC4_SetConfig+0x80>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	4a17      	ldr	r2, [pc, #92]	; (800d0d0 <TIM_OC4_SetConfig+0xc8>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d007      	beq.n	800d088 <TIM_OC4_SetConfig+0x80>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	4a16      	ldr	r2, [pc, #88]	; (800d0d4 <TIM_OC4_SetConfig+0xcc>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d003      	beq.n	800d088 <TIM_OC4_SetConfig+0x80>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4a15      	ldr	r2, [pc, #84]	; (800d0d8 <TIM_OC4_SetConfig+0xd0>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d109      	bne.n	800d09c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d08e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	695b      	ldr	r3, [r3, #20]
 800d094:	019b      	lsls	r3, r3, #6
 800d096:	697a      	ldr	r2, [r7, #20]
 800d098:	4313      	orrs	r3, r2
 800d09a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	697a      	ldr	r2, [r7, #20]
 800d0a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	685a      	ldr	r2, [r3, #4]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	693a      	ldr	r2, [r7, #16]
 800d0b4:	621a      	str	r2, [r3, #32]
}
 800d0b6:	bf00      	nop
 800d0b8:	371c      	adds	r7, #28
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop
 800d0c4:	feff8fff 	.word	0xfeff8fff
 800d0c8:	40010000 	.word	0x40010000
 800d0cc:	40010400 	.word	0x40010400
 800d0d0:	40014000 	.word	0x40014000
 800d0d4:	40014400 	.word	0x40014400
 800d0d8:	40014800 	.word	0x40014800

0800d0dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b087      	sub	sp, #28
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6a1b      	ldr	r3, [r3, #32]
 800d0ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6a1b      	ldr	r3, [r3, #32]
 800d0f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d104:	68fa      	ldr	r2, [r7, #12]
 800d106:	4b21      	ldr	r3, [pc, #132]	; (800d18c <TIM_OC5_SetConfig+0xb0>)
 800d108:	4013      	ands	r3, r2
 800d10a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68fa      	ldr	r2, [r7, #12]
 800d112:	4313      	orrs	r3, r2
 800d114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d11c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	689b      	ldr	r3, [r3, #8]
 800d122:	041b      	lsls	r3, r3, #16
 800d124:	693a      	ldr	r2, [r7, #16]
 800d126:	4313      	orrs	r3, r2
 800d128:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4a18      	ldr	r2, [pc, #96]	; (800d190 <TIM_OC5_SetConfig+0xb4>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d00f      	beq.n	800d152 <TIM_OC5_SetConfig+0x76>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4a17      	ldr	r2, [pc, #92]	; (800d194 <TIM_OC5_SetConfig+0xb8>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d00b      	beq.n	800d152 <TIM_OC5_SetConfig+0x76>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4a16      	ldr	r2, [pc, #88]	; (800d198 <TIM_OC5_SetConfig+0xbc>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d007      	beq.n	800d152 <TIM_OC5_SetConfig+0x76>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4a15      	ldr	r2, [pc, #84]	; (800d19c <TIM_OC5_SetConfig+0xc0>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d003      	beq.n	800d152 <TIM_OC5_SetConfig+0x76>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	4a14      	ldr	r2, [pc, #80]	; (800d1a0 <TIM_OC5_SetConfig+0xc4>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d109      	bne.n	800d166 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d158:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	695b      	ldr	r3, [r3, #20]
 800d15e:	021b      	lsls	r3, r3, #8
 800d160:	697a      	ldr	r2, [r7, #20]
 800d162:	4313      	orrs	r3, r2
 800d164:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	697a      	ldr	r2, [r7, #20]
 800d16a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	685a      	ldr	r2, [r3, #4]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	693a      	ldr	r2, [r7, #16]
 800d17e:	621a      	str	r2, [r3, #32]
}
 800d180:	bf00      	nop
 800d182:	371c      	adds	r7, #28
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr
 800d18c:	fffeff8f 	.word	0xfffeff8f
 800d190:	40010000 	.word	0x40010000
 800d194:	40010400 	.word	0x40010400
 800d198:	40014000 	.word	0x40014000
 800d19c:	40014400 	.word	0x40014400
 800d1a0:	40014800 	.word	0x40014800

0800d1a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b087      	sub	sp, #28
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6a1b      	ldr	r3, [r3, #32]
 800d1b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6a1b      	ldr	r3, [r3, #32]
 800d1be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d1cc:	68fa      	ldr	r2, [r7, #12]
 800d1ce:	4b22      	ldr	r3, [pc, #136]	; (800d258 <TIM_OC6_SetConfig+0xb4>)
 800d1d0:	4013      	ands	r3, r2
 800d1d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	021b      	lsls	r3, r3, #8
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	4313      	orrs	r3, r2
 800d1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d1e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	051b      	lsls	r3, r3, #20
 800d1ee:	693a      	ldr	r2, [r7, #16]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	4a19      	ldr	r2, [pc, #100]	; (800d25c <TIM_OC6_SetConfig+0xb8>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d00f      	beq.n	800d21c <TIM_OC6_SetConfig+0x78>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	4a18      	ldr	r2, [pc, #96]	; (800d260 <TIM_OC6_SetConfig+0xbc>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d00b      	beq.n	800d21c <TIM_OC6_SetConfig+0x78>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4a17      	ldr	r2, [pc, #92]	; (800d264 <TIM_OC6_SetConfig+0xc0>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d007      	beq.n	800d21c <TIM_OC6_SetConfig+0x78>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4a16      	ldr	r2, [pc, #88]	; (800d268 <TIM_OC6_SetConfig+0xc4>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d003      	beq.n	800d21c <TIM_OC6_SetConfig+0x78>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	4a15      	ldr	r2, [pc, #84]	; (800d26c <TIM_OC6_SetConfig+0xc8>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d109      	bne.n	800d230 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d222:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	695b      	ldr	r3, [r3, #20]
 800d228:	029b      	lsls	r3, r3, #10
 800d22a:	697a      	ldr	r2, [r7, #20]
 800d22c:	4313      	orrs	r3, r2
 800d22e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	697a      	ldr	r2, [r7, #20]
 800d234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	685a      	ldr	r2, [r3, #4]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	693a      	ldr	r2, [r7, #16]
 800d248:	621a      	str	r2, [r3, #32]
}
 800d24a:	bf00      	nop
 800d24c:	371c      	adds	r7, #28
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop
 800d258:	feff8fff 	.word	0xfeff8fff
 800d25c:	40010000 	.word	0x40010000
 800d260:	40010400 	.word	0x40010400
 800d264:	40014000 	.word	0x40014000
 800d268:	40014400 	.word	0x40014400
 800d26c:	40014800 	.word	0x40014800

0800d270 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b086      	sub	sp, #24
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d286:	693a      	ldr	r2, [r7, #16]
 800d288:	4b65      	ldr	r3, [pc, #404]	; (800d420 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800d28a:	4013      	ands	r3, r2
 800d28c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	693a      	ldr	r2, [r7, #16]
 800d294:	4313      	orrs	r3, r2
 800d296:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d298:	693a      	ldr	r2, [r7, #16]
 800d29a:	4b62      	ldr	r3, [pc, #392]	; (800d424 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800d29c:	4013      	ands	r3, r2
 800d29e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	693a      	ldr	r2, [r7, #16]
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	693a      	ldr	r2, [r7, #16]
 800d2b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	4a5c      	ldr	r2, [pc, #368]	; (800d428 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	f000 80ab 	beq.w	800d414 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d2be:	4a5a      	ldr	r2, [pc, #360]	; (800d428 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	f200 80a4 	bhi.w	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
 800d2c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d2ca:	f000 80a3 	beq.w	800d414 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d2ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d2d2:	f200 809c 	bhi.w	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
 800d2d6:	4a55      	ldr	r2, [pc, #340]	; (800d42c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	f000 809b 	beq.w	800d414 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d2de:	4a53      	ldr	r2, [pc, #332]	; (800d42c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	f200 8094 	bhi.w	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
 800d2e6:	4a52      	ldr	r2, [pc, #328]	; (800d430 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	f000 8093 	beq.w	800d414 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d2ee:	4a50      	ldr	r2, [pc, #320]	; (800d430 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	f200 808c 	bhi.w	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
 800d2f6:	4a4f      	ldr	r2, [pc, #316]	; (800d434 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	f000 808b 	beq.w	800d414 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d2fe:	4a4d      	ldr	r2, [pc, #308]	; (800d434 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800d300:	4293      	cmp	r3, r2
 800d302:	f200 8084 	bhi.w	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
 800d306:	4a4c      	ldr	r2, [pc, #304]	; (800d438 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800d308:	4293      	cmp	r3, r2
 800d30a:	f000 8083 	beq.w	800d414 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d30e:	4a4a      	ldr	r2, [pc, #296]	; (800d438 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d87c      	bhi.n	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
 800d314:	4a49      	ldr	r2, [pc, #292]	; (800d43c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d07c      	beq.n	800d414 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d31a:	4a48      	ldr	r2, [pc, #288]	; (800d43c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d876      	bhi.n	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
 800d320:	4a47      	ldr	r2, [pc, #284]	; (800d440 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d076      	beq.n	800d414 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d326:	4a46      	ldr	r2, [pc, #280]	; (800d440 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d870      	bhi.n	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
 800d32c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d330:	d070      	beq.n	800d414 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d332:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d336:	d86a      	bhi.n	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
 800d338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d33c:	d06a      	beq.n	800d414 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d33e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d342:	d864      	bhi.n	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
 800d344:	2b70      	cmp	r3, #112	; 0x70
 800d346:	d01a      	beq.n	800d37e <TIM_SlaveTimer_SetConfig+0x10e>
 800d348:	2b70      	cmp	r3, #112	; 0x70
 800d34a:	d860      	bhi.n	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
 800d34c:	2b60      	cmp	r3, #96	; 0x60
 800d34e:	d054      	beq.n	800d3fa <TIM_SlaveTimer_SetConfig+0x18a>
 800d350:	2b60      	cmp	r3, #96	; 0x60
 800d352:	d85c      	bhi.n	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
 800d354:	2b50      	cmp	r3, #80	; 0x50
 800d356:	d046      	beq.n	800d3e6 <TIM_SlaveTimer_SetConfig+0x176>
 800d358:	2b50      	cmp	r3, #80	; 0x50
 800d35a:	d858      	bhi.n	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
 800d35c:	2b40      	cmp	r3, #64	; 0x40
 800d35e:	d019      	beq.n	800d394 <TIM_SlaveTimer_SetConfig+0x124>
 800d360:	2b40      	cmp	r3, #64	; 0x40
 800d362:	d854      	bhi.n	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
 800d364:	2b30      	cmp	r3, #48	; 0x30
 800d366:	d055      	beq.n	800d414 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d368:	2b30      	cmp	r3, #48	; 0x30
 800d36a:	d850      	bhi.n	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
 800d36c:	2b20      	cmp	r3, #32
 800d36e:	d051      	beq.n	800d414 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d370:	2b20      	cmp	r3, #32
 800d372:	d84c      	bhi.n	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
 800d374:	2b00      	cmp	r3, #0
 800d376:	d04d      	beq.n	800d414 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d378:	2b10      	cmp	r3, #16
 800d37a:	d04b      	beq.n	800d414 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d37c:	e047      	b.n	800d40e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6818      	ldr	r0, [r3, #0]
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	68d9      	ldr	r1, [r3, #12]
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	689a      	ldr	r2, [r3, #8]
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	f000 fa01 	bl	800d794 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800d392:	e040      	b.n	800d416 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	2b05      	cmp	r3, #5
 800d39a:	d101      	bne.n	800d3a0 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800d39c:	2301      	movs	r3, #1
 800d39e:	e03b      	b.n	800d418 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	6a1b      	ldr	r3, [r3, #32]
 800d3a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	6a1a      	ldr	r2, [r3, #32]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f022 0201 	bic.w	r2, r2, #1
 800d3b6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	699b      	ldr	r3, [r3, #24]
 800d3be:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d3c6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	691b      	ldr	r3, [r3, #16]
 800d3cc:	011b      	lsls	r3, r3, #4
 800d3ce:	68ba      	ldr	r2, [r7, #8]
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	68ba      	ldr	r2, [r7, #8]
 800d3da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	621a      	str	r2, [r3, #32]
      break;
 800d3e4:	e017      	b.n	800d416 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6818      	ldr	r0, [r3, #0]
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	6899      	ldr	r1, [r3, #8]
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	691b      	ldr	r3, [r3, #16]
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	f000 f89a 	bl	800d52c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800d3f8:	e00d      	b.n	800d416 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6818      	ldr	r0, [r3, #0]
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	6899      	ldr	r1, [r3, #8]
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	691b      	ldr	r3, [r3, #16]
 800d406:	461a      	mov	r2, r3
 800d408:	f000 f8fc 	bl	800d604 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800d40c:	e003      	b.n	800d416 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	75fb      	strb	r3, [r7, #23]
      break;
 800d412:	e000      	b.n	800d416 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800d414:	bf00      	nop
  }

  return status;
 800d416:	7dfb      	ldrb	r3, [r7, #23]
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3718      	adds	r7, #24
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	ffcfff8f 	.word	0xffcfff8f
 800d424:	fffefff8 	.word	0xfffefff8
 800d428:	00200010 	.word	0x00200010
 800d42c:	00100070 	.word	0x00100070
 800d430:	00100060 	.word	0x00100060
 800d434:	00100050 	.word	0x00100050
 800d438:	00100040 	.word	0x00100040
 800d43c:	00100030 	.word	0x00100030
 800d440:	00100020 	.word	0x00100020

0800d444 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d444:	b480      	push	{r7}
 800d446:	b087      	sub	sp, #28
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
 800d450:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	6a1b      	ldr	r3, [r3, #32]
 800d456:	f023 0201 	bic.w	r2, r3, #1
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	699b      	ldr	r3, [r3, #24]
 800d462:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	6a1b      	ldr	r3, [r3, #32]
 800d468:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	4a28      	ldr	r2, [pc, #160]	; (800d510 <TIM_TI1_SetConfig+0xcc>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d01b      	beq.n	800d4aa <TIM_TI1_SetConfig+0x66>
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d478:	d017      	beq.n	800d4aa <TIM_TI1_SetConfig+0x66>
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	4a25      	ldr	r2, [pc, #148]	; (800d514 <TIM_TI1_SetConfig+0xd0>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d013      	beq.n	800d4aa <TIM_TI1_SetConfig+0x66>
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	4a24      	ldr	r2, [pc, #144]	; (800d518 <TIM_TI1_SetConfig+0xd4>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d00f      	beq.n	800d4aa <TIM_TI1_SetConfig+0x66>
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	4a23      	ldr	r2, [pc, #140]	; (800d51c <TIM_TI1_SetConfig+0xd8>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d00b      	beq.n	800d4aa <TIM_TI1_SetConfig+0x66>
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	4a22      	ldr	r2, [pc, #136]	; (800d520 <TIM_TI1_SetConfig+0xdc>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d007      	beq.n	800d4aa <TIM_TI1_SetConfig+0x66>
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	4a21      	ldr	r2, [pc, #132]	; (800d524 <TIM_TI1_SetConfig+0xe0>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d003      	beq.n	800d4aa <TIM_TI1_SetConfig+0x66>
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	4a20      	ldr	r2, [pc, #128]	; (800d528 <TIM_TI1_SetConfig+0xe4>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d101      	bne.n	800d4ae <TIM_TI1_SetConfig+0x6a>
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	e000      	b.n	800d4b0 <TIM_TI1_SetConfig+0x6c>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d008      	beq.n	800d4c6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	f023 0303 	bic.w	r3, r3, #3
 800d4ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d4bc:	697a      	ldr	r2, [r7, #20]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	617b      	str	r3, [r7, #20]
 800d4c4:	e003      	b.n	800d4ce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	f043 0301 	orr.w	r3, r3, #1
 800d4cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d4d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	011b      	lsls	r3, r3, #4
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	697a      	ldr	r2, [r7, #20]
 800d4de:	4313      	orrs	r3, r2
 800d4e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	f023 030a 	bic.w	r3, r3, #10
 800d4e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	f003 030a 	and.w	r3, r3, #10
 800d4f0:	693a      	ldr	r2, [r7, #16]
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	697a      	ldr	r2, [r7, #20]
 800d4fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	693a      	ldr	r2, [r7, #16]
 800d500:	621a      	str	r2, [r3, #32]
}
 800d502:	bf00      	nop
 800d504:	371c      	adds	r7, #28
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr
 800d50e:	bf00      	nop
 800d510:	40010000 	.word	0x40010000
 800d514:	40000400 	.word	0x40000400
 800d518:	40000800 	.word	0x40000800
 800d51c:	40000c00 	.word	0x40000c00
 800d520:	40010400 	.word	0x40010400
 800d524:	40001800 	.word	0x40001800
 800d528:	40014000 	.word	0x40014000

0800d52c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b087      	sub	sp, #28
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	6a1b      	ldr	r3, [r3, #32]
 800d53c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6a1b      	ldr	r3, [r3, #32]
 800d542:	f023 0201 	bic.w	r2, r3, #1
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	699b      	ldr	r3, [r3, #24]
 800d54e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	011b      	lsls	r3, r3, #4
 800d55c:	693a      	ldr	r2, [r7, #16]
 800d55e:	4313      	orrs	r3, r2
 800d560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	f023 030a 	bic.w	r3, r3, #10
 800d568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d56a:	697a      	ldr	r2, [r7, #20]
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	4313      	orrs	r3, r2
 800d570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	693a      	ldr	r2, [r7, #16]
 800d576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	697a      	ldr	r2, [r7, #20]
 800d57c:	621a      	str	r2, [r3, #32]
}
 800d57e:	bf00      	nop
 800d580:	371c      	adds	r7, #28
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr

0800d58a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d58a:	b480      	push	{r7}
 800d58c:	b087      	sub	sp, #28
 800d58e:	af00      	add	r7, sp, #0
 800d590:	60f8      	str	r0, [r7, #12]
 800d592:	60b9      	str	r1, [r7, #8]
 800d594:	607a      	str	r2, [r7, #4]
 800d596:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	6a1b      	ldr	r3, [r3, #32]
 800d59c:	f023 0210 	bic.w	r2, r3, #16
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	699b      	ldr	r3, [r3, #24]
 800d5a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6a1b      	ldr	r3, [r3, #32]
 800d5ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d5b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	021b      	lsls	r3, r3, #8
 800d5bc:	697a      	ldr	r2, [r7, #20]
 800d5be:	4313      	orrs	r3, r2
 800d5c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d5c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	031b      	lsls	r3, r3, #12
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	697a      	ldr	r2, [r7, #20]
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d5dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	011b      	lsls	r3, r3, #4
 800d5e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d5e6:	693a      	ldr	r2, [r7, #16]
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	697a      	ldr	r2, [r7, #20]
 800d5f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	693a      	ldr	r2, [r7, #16]
 800d5f6:	621a      	str	r2, [r3, #32]
}
 800d5f8:	bf00      	nop
 800d5fa:	371c      	adds	r7, #28
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d604:	b480      	push	{r7}
 800d606:	b087      	sub	sp, #28
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6a1b      	ldr	r3, [r3, #32]
 800d614:	f023 0210 	bic.w	r2, r3, #16
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	699b      	ldr	r3, [r3, #24]
 800d620:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6a1b      	ldr	r3, [r3, #32]
 800d626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d62e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	031b      	lsls	r3, r3, #12
 800d634:	697a      	ldr	r2, [r7, #20]
 800d636:	4313      	orrs	r3, r2
 800d638:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d640:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	011b      	lsls	r3, r3, #4
 800d646:	693a      	ldr	r2, [r7, #16]
 800d648:	4313      	orrs	r3, r2
 800d64a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	697a      	ldr	r2, [r7, #20]
 800d650:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	693a      	ldr	r2, [r7, #16]
 800d656:	621a      	str	r2, [r3, #32]
}
 800d658:	bf00      	nop
 800d65a:	371c      	adds	r7, #28
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d664:	b480      	push	{r7}
 800d666:	b087      	sub	sp, #28
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
 800d670:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6a1b      	ldr	r3, [r3, #32]
 800d676:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	69db      	ldr	r3, [r3, #28]
 800d682:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	6a1b      	ldr	r3, [r3, #32]
 800d688:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	f023 0303 	bic.w	r3, r3, #3
 800d690:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d692:	697a      	ldr	r2, [r7, #20]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	4313      	orrs	r3, r2
 800d698:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d6a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	011b      	lsls	r3, r3, #4
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	697a      	ldr	r2, [r7, #20]
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d6b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	021b      	lsls	r3, r3, #8
 800d6ba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800d6be:	693a      	ldr	r2, [r7, #16]
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	697a      	ldr	r2, [r7, #20]
 800d6c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	693a      	ldr	r2, [r7, #16]
 800d6ce:	621a      	str	r2, [r3, #32]
}
 800d6d0:	bf00      	nop
 800d6d2:	371c      	adds	r7, #28
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b087      	sub	sp, #28
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]
 800d6e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	6a1b      	ldr	r3, [r3, #32]
 800d6ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	69db      	ldr	r3, [r3, #28]
 800d6fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6a1b      	ldr	r3, [r3, #32]
 800d700:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d708:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	021b      	lsls	r3, r3, #8
 800d70e:	697a      	ldr	r2, [r7, #20]
 800d710:	4313      	orrs	r3, r2
 800d712:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d71a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	031b      	lsls	r3, r3, #12
 800d720:	b29b      	uxth	r3, r3
 800d722:	697a      	ldr	r2, [r7, #20]
 800d724:	4313      	orrs	r3, r2
 800d726:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800d72e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	031b      	lsls	r3, r3, #12
 800d734:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800d738:	693a      	ldr	r2, [r7, #16]
 800d73a:	4313      	orrs	r3, r2
 800d73c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	697a      	ldr	r2, [r7, #20]
 800d742:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	693a      	ldr	r2, [r7, #16]
 800d748:	621a      	str	r2, [r3, #32]
}
 800d74a:	bf00      	nop
 800d74c:	371c      	adds	r7, #28
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr
	...

0800d758 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d758:	b480      	push	{r7}
 800d75a:	b085      	sub	sp, #20
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	689b      	ldr	r3, [r3, #8]
 800d766:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d768:	68fa      	ldr	r2, [r7, #12]
 800d76a:	4b09      	ldr	r3, [pc, #36]	; (800d790 <TIM_ITRx_SetConfig+0x38>)
 800d76c:	4013      	ands	r3, r2
 800d76e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d770:	683a      	ldr	r2, [r7, #0]
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	4313      	orrs	r3, r2
 800d776:	f043 0307 	orr.w	r3, r3, #7
 800d77a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	68fa      	ldr	r2, [r7, #12]
 800d780:	609a      	str	r2, [r3, #8]
}
 800d782:	bf00      	nop
 800d784:	3714      	adds	r7, #20
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr
 800d78e:	bf00      	nop
 800d790:	ffcfff8f 	.word	0xffcfff8f

0800d794 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d794:	b480      	push	{r7}
 800d796:	b087      	sub	sp, #28
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
 800d7a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d7ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	021a      	lsls	r2, r3, #8
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	431a      	orrs	r2, r3
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	697a      	ldr	r2, [r7, #20]
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	697a      	ldr	r2, [r7, #20]
 800d7c6:	609a      	str	r2, [r3, #8]
}
 800d7c8:	bf00      	nop
 800d7ca:	371c      	adds	r7, #28
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b085      	sub	sp, #20
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d101      	bne.n	800d7ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d7e8:	2302      	movs	r3, #2
 800d7ea:	e06d      	b.n	800d8c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2202      	movs	r2, #2
 800d7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	689b      	ldr	r3, [r3, #8]
 800d80a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a30      	ldr	r2, [pc, #192]	; (800d8d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d004      	beq.n	800d820 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4a2f      	ldr	r2, [pc, #188]	; (800d8d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d108      	bne.n	800d832 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d826:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	68fa      	ldr	r2, [r7, #12]
 800d82e:	4313      	orrs	r3, r2
 800d830:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d838:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	68fa      	ldr	r2, [r7, #12]
 800d840:	4313      	orrs	r3, r2
 800d842:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a20      	ldr	r2, [pc, #128]	; (800d8d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d022      	beq.n	800d89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d85e:	d01d      	beq.n	800d89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a1d      	ldr	r2, [pc, #116]	; (800d8dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d018      	beq.n	800d89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4a1c      	ldr	r2, [pc, #112]	; (800d8e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d013      	beq.n	800d89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a1a      	ldr	r2, [pc, #104]	; (800d8e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d00e      	beq.n	800d89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a15      	ldr	r2, [pc, #84]	; (800d8d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d009      	beq.n	800d89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a16      	ldr	r2, [pc, #88]	; (800d8e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d004      	beq.n	800d89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4a15      	ldr	r2, [pc, #84]	; (800d8ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d10c      	bne.n	800d8b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	68ba      	ldr	r2, [r7, #8]
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	68ba      	ldr	r2, [r7, #8]
 800d8b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3714      	adds	r7, #20
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr
 800d8d4:	40010000 	.word	0x40010000
 800d8d8:	40010400 	.word	0x40010400
 800d8dc:	40000400 	.word	0x40000400
 800d8e0:	40000800 	.word	0x40000800
 800d8e4:	40000c00 	.word	0x40000c00
 800d8e8:	40001800 	.word	0x40001800
 800d8ec:	40014000 	.word	0x40014000

0800d8f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b085      	sub	sp, #20
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d904:	2b01      	cmp	r3, #1
 800d906:	d101      	bne.n	800d90c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d908:	2302      	movs	r3, #2
 800d90a:	e087      	b.n	800da1c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2201      	movs	r2, #1
 800d910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	4313      	orrs	r3, r2
 800d920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	4313      	orrs	r3, r2
 800d92e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	4313      	orrs	r3, r2
 800d93c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4313      	orrs	r3, r2
 800d94a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	691b      	ldr	r3, [r3, #16]
 800d956:	4313      	orrs	r3, r2
 800d958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	695b      	ldr	r3, [r3, #20]
 800d964:	4313      	orrs	r3, r2
 800d966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d972:	4313      	orrs	r3, r2
 800d974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	699b      	ldr	r3, [r3, #24]
 800d980:	041b      	lsls	r3, r3, #16
 800d982:	4313      	orrs	r3, r2
 800d984:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a27      	ldr	r2, [pc, #156]	; (800da28 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d004      	beq.n	800d99a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a25      	ldr	r2, [pc, #148]	; (800da2c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d106      	bne.n	800d9a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	69db      	ldr	r3, [r3, #28]
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a1e      	ldr	r2, [pc, #120]	; (800da28 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d004      	beq.n	800d9bc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4a1d      	ldr	r2, [pc, #116]	; (800da2c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d126      	bne.n	800da0a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9c6:	051b      	lsls	r3, r3, #20
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	6a1b      	ldr	r3, [r3, #32]
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a0e      	ldr	r2, [pc, #56]	; (800da28 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d004      	beq.n	800d9fc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a0d      	ldr	r2, [pc, #52]	; (800da2c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d106      	bne.n	800da0a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da06:	4313      	orrs	r3, r2
 800da08:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	68fa      	ldr	r2, [r7, #12]
 800da10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da1a:	2300      	movs	r3, #0
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3714      	adds	r7, #20
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr
 800da28:	40010000 	.word	0x40010000
 800da2c:	40010400 	.word	0x40010400

0800da30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da38:	bf00      	nop
 800da3a:	370c      	adds	r7, #12
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr

0800da44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da4c:	bf00      	nop
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800da60:	bf00      	nop
 800da62:	370c      	adds	r7, #12
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr

0800da6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d101      	bne.n	800da7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da7a:	2301      	movs	r3, #1
 800da7c:	e042      	b.n	800db04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da84:	2b00      	cmp	r3, #0
 800da86:	d106      	bne.n	800da96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f7f4 ff49 	bl	8002928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2224      	movs	r2, #36	; 0x24
 800da9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f022 0201 	bic.w	r2, r2, #1
 800daac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 fcd6 	bl	800e460 <UART_SetConfig>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d101      	bne.n	800dabe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800daba:	2301      	movs	r3, #1
 800dabc:	e022      	b.n	800db04 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d002      	beq.n	800dacc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f001 fb36 	bl	800f138 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	685a      	ldr	r2, [r3, #4]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	689a      	ldr	r2, [r3, #8]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800daea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f042 0201 	orr.w	r2, r2, #1
 800dafa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f001 fbbd 	bl	800f27c <UART_CheckIdleState>
 800db02:	4603      	mov	r3, r0
}
 800db04:	4618      	mov	r0, r3
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b08a      	sub	sp, #40	; 0x28
 800db10:	af02      	add	r7, sp, #8
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	603b      	str	r3, [r7, #0]
 800db18:	4613      	mov	r3, r2
 800db1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db22:	2b20      	cmp	r3, #32
 800db24:	f040 8083 	bne.w	800dc2e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d002      	beq.n	800db34 <HAL_UART_Transmit+0x28>
 800db2e:	88fb      	ldrh	r3, [r7, #6]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d101      	bne.n	800db38 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800db34:	2301      	movs	r3, #1
 800db36:	e07b      	b.n	800dc30 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d101      	bne.n	800db46 <HAL_UART_Transmit+0x3a>
 800db42:	2302      	movs	r3, #2
 800db44:	e074      	b.n	800dc30 <HAL_UART_Transmit+0x124>
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2201      	movs	r2, #1
 800db4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2200      	movs	r2, #0
 800db52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2221      	movs	r2, #33	; 0x21
 800db5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800db5e:	f7f5 fa31 	bl	8002fc4 <HAL_GetTick>
 800db62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	88fa      	ldrh	r2, [r7, #6]
 800db68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	88fa      	ldrh	r2, [r7, #6]
 800db70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	689b      	ldr	r3, [r3, #8]
 800db78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db7c:	d108      	bne.n	800db90 <HAL_UART_Transmit+0x84>
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	691b      	ldr	r3, [r3, #16]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d104      	bne.n	800db90 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800db86:	2300      	movs	r3, #0
 800db88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	61bb      	str	r3, [r7, #24]
 800db8e:	e003      	b.n	800db98 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800db94:	2300      	movs	r3, #0
 800db96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2200      	movs	r2, #0
 800db9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800dba0:	e02c      	b.n	800dbfc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	9300      	str	r3, [sp, #0]
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	2180      	movs	r1, #128	; 0x80
 800dbac:	68f8      	ldr	r0, [r7, #12]
 800dbae:	f001 fbb0 	bl	800f312 <UART_WaitOnFlagUntilTimeout>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d001      	beq.n	800dbbc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800dbb8:	2303      	movs	r3, #3
 800dbba:	e039      	b.n	800dc30 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800dbbc:	69fb      	ldr	r3, [r7, #28]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d10b      	bne.n	800dbda <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dbc2:	69bb      	ldr	r3, [r7, #24]
 800dbc4:	881b      	ldrh	r3, [r3, #0]
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dbd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	3302      	adds	r3, #2
 800dbd6:	61bb      	str	r3, [r7, #24]
 800dbd8:	e007      	b.n	800dbea <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	781a      	ldrb	r2, [r3, #0]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dbf0:	b29b      	uxth	r3, r3
 800dbf2:	3b01      	subs	r3, #1
 800dbf4:	b29a      	uxth	r2, r3
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d1cc      	bne.n	800dba2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	9300      	str	r3, [sp, #0]
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	2140      	movs	r1, #64	; 0x40
 800dc12:	68f8      	ldr	r0, [r7, #12]
 800dc14:	f001 fb7d 	bl	800f312 <UART_WaitOnFlagUntilTimeout>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d001      	beq.n	800dc22 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800dc1e:	2303      	movs	r3, #3
 800dc20:	e006      	b.n	800dc30 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2220      	movs	r2, #32
 800dc26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	e000      	b.n	800dc30 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800dc2e:	2302      	movs	r3, #2
  }
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3720      	adds	r7, #32
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b08a      	sub	sp, #40	; 0x28
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	60f8      	str	r0, [r7, #12]
 800dc40:	60b9      	str	r1, [r7, #8]
 800dc42:	4613      	mov	r3, r2
 800dc44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc4c:	2b20      	cmp	r3, #32
 800dc4e:	d142      	bne.n	800dcd6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d002      	beq.n	800dc5c <HAL_UART_Receive_IT+0x24>
 800dc56:	88fb      	ldrh	r3, [r7, #6]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d101      	bne.n	800dc60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	e03b      	b.n	800dcd8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d101      	bne.n	800dc6e <HAL_UART_Receive_IT+0x36>
 800dc6a:	2302      	movs	r3, #2
 800dc6c:	e034      	b.n	800dcd8 <HAL_UART_Receive_IT+0xa0>
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2201      	movs	r2, #1
 800dc72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a17      	ldr	r2, [pc, #92]	; (800dce0 <HAL_UART_Receive_IT+0xa8>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d01f      	beq.n	800dcc6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d018      	beq.n	800dcc6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	e853 3f00 	ldrex	r3, [r3]
 800dca0:	613b      	str	r3, [r7, #16]
   return(result);
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dca8:	627b      	str	r3, [r7, #36]	; 0x24
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	461a      	mov	r2, r3
 800dcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb2:	623b      	str	r3, [r7, #32]
 800dcb4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb6:	69f9      	ldr	r1, [r7, #28]
 800dcb8:	6a3a      	ldr	r2, [r7, #32]
 800dcba:	e841 2300 	strex	r3, r2, [r1]
 800dcbe:	61bb      	str	r3, [r7, #24]
   return(result);
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d1e6      	bne.n	800dc94 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dcc6:	88fb      	ldrh	r3, [r7, #6]
 800dcc8:	461a      	mov	r2, r3
 800dcca:	68b9      	ldr	r1, [r7, #8]
 800dccc:	68f8      	ldr	r0, [r7, #12]
 800dcce:	f001 fbe9 	bl	800f4a4 <UART_Start_Receive_IT>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	e000      	b.n	800dcd8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800dcd6:	2302      	movs	r3, #2
  }
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3728      	adds	r7, #40	; 0x28
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}
 800dce0:	58000c00 	.word	0x58000c00

0800dce4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b0ba      	sub	sp, #232	; 0xe8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	69db      	ldr	r3, [r3, #28]
 800dcf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	689b      	ldr	r3, [r3, #8]
 800dd06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dd0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dd0e:	f640 030f 	movw	r3, #2063	; 0x80f
 800dd12:	4013      	ands	r3, r2
 800dd14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800dd18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d11b      	bne.n	800dd58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dd20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd24:	f003 0320 	and.w	r3, r3, #32
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d015      	beq.n	800dd58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dd2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd30:	f003 0320 	and.w	r3, r3, #32
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d105      	bne.n	800dd44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dd38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d009      	beq.n	800dd58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f000 835a 	beq.w	800e402 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	4798      	blx	r3
      }
      return;
 800dd56:	e354      	b.n	800e402 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dd58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	f000 811f 	beq.w	800dfa0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dd62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dd66:	4b8b      	ldr	r3, [pc, #556]	; (800df94 <HAL_UART_IRQHandler+0x2b0>)
 800dd68:	4013      	ands	r3, r2
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d106      	bne.n	800dd7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dd6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800dd72:	4b89      	ldr	r3, [pc, #548]	; (800df98 <HAL_UART_IRQHandler+0x2b4>)
 800dd74:	4013      	ands	r3, r2
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	f000 8112 	beq.w	800dfa0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dd7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd80:	f003 0301 	and.w	r3, r3, #1
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d011      	beq.n	800ddac <HAL_UART_IRQHandler+0xc8>
 800dd88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d00b      	beq.n	800ddac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2201      	movs	r2, #1
 800dd9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dda2:	f043 0201 	orr.w	r2, r3, #1
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddb0:	f003 0302 	and.w	r3, r3, #2
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d011      	beq.n	800dddc <HAL_UART_IRQHandler+0xf8>
 800ddb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddbc:	f003 0301 	and.w	r3, r3, #1
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d00b      	beq.n	800dddc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2202      	movs	r2, #2
 800ddca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddd2:	f043 0204 	orr.w	r2, r3, #4
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dde0:	f003 0304 	and.w	r3, r3, #4
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d011      	beq.n	800de0c <HAL_UART_IRQHandler+0x128>
 800dde8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddec:	f003 0301 	and.w	r3, r3, #1
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d00b      	beq.n	800de0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2204      	movs	r2, #4
 800ddfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de02:	f043 0202 	orr.w	r2, r3, #2
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800de0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de10:	f003 0308 	and.w	r3, r3, #8
 800de14:	2b00      	cmp	r3, #0
 800de16:	d017      	beq.n	800de48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800de18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de1c:	f003 0320 	and.w	r3, r3, #32
 800de20:	2b00      	cmp	r3, #0
 800de22:	d105      	bne.n	800de30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800de24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800de28:	4b5a      	ldr	r3, [pc, #360]	; (800df94 <HAL_UART_IRQHandler+0x2b0>)
 800de2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d00b      	beq.n	800de48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2208      	movs	r2, #8
 800de36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de3e:	f043 0208 	orr.w	r2, r3, #8
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800de48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de50:	2b00      	cmp	r3, #0
 800de52:	d012      	beq.n	800de7a <HAL_UART_IRQHandler+0x196>
 800de54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d00c      	beq.n	800de7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de70:	f043 0220 	orr.w	r2, r3, #32
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de80:	2b00      	cmp	r3, #0
 800de82:	f000 82c0 	beq.w	800e406 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800de86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de8a:	f003 0320 	and.w	r3, r3, #32
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d013      	beq.n	800deba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800de92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de96:	f003 0320 	and.w	r3, r3, #32
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d105      	bne.n	800deaa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800de9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d007      	beq.n	800deba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d003      	beq.n	800deba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dec0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	689b      	ldr	r3, [r3, #8]
 800deca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dece:	2b40      	cmp	r3, #64	; 0x40
 800ded0:	d005      	beq.n	800dede <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ded2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ded6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d04f      	beq.n	800df7e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f001 fc0a 	bl	800f6f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deee:	2b40      	cmp	r3, #64	; 0x40
 800def0:	d141      	bne.n	800df76 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	3308      	adds	r3, #8
 800def8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800defc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800df00:	e853 3f00 	ldrex	r3, [r3]
 800df04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800df08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800df0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	3308      	adds	r3, #8
 800df1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800df1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800df22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800df2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800df2e:	e841 2300 	strex	r3, r2, [r1]
 800df32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800df36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d1d9      	bne.n	800def2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df42:	2b00      	cmp	r3, #0
 800df44:	d013      	beq.n	800df6e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df4a:	4a14      	ldr	r2, [pc, #80]	; (800df9c <HAL_UART_IRQHandler+0x2b8>)
 800df4c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df52:	4618      	mov	r0, r3
 800df54:	f7f6 fac0 	bl	80044d8 <HAL_DMA_Abort_IT>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d017      	beq.n	800df8e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df64:	687a      	ldr	r2, [r7, #4]
 800df66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800df68:	4610      	mov	r0, r2
 800df6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df6c:	e00f      	b.n	800df8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 fa60 	bl	800e434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df74:	e00b      	b.n	800df8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 fa5c 	bl	800e434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df7c:	e007      	b.n	800df8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f000 fa58 	bl	800e434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2200      	movs	r2, #0
 800df88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800df8c:	e23b      	b.n	800e406 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df8e:	bf00      	nop
    return;
 800df90:	e239      	b.n	800e406 <HAL_UART_IRQHandler+0x722>
 800df92:	bf00      	nop
 800df94:	10000001 	.word	0x10000001
 800df98:	04000120 	.word	0x04000120
 800df9c:	0800f7c5 	.word	0x0800f7c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	f040 81ce 	bne.w	800e346 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dfaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfae:	f003 0310 	and.w	r3, r3, #16
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	f000 81c7 	beq.w	800e346 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dfb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfbc:	f003 0310 	and.w	r3, r3, #16
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	f000 81c0 	beq.w	800e346 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2210      	movs	r2, #16
 800dfcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	689b      	ldr	r3, [r3, #8]
 800dfd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfd8:	2b40      	cmp	r3, #64	; 0x40
 800dfda:	f040 813b 	bne.w	800e254 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4a8b      	ldr	r2, [pc, #556]	; (800e214 <HAL_UART_IRQHandler+0x530>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d059      	beq.n	800e09e <HAL_UART_IRQHandler+0x3ba>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4a89      	ldr	r2, [pc, #548]	; (800e218 <HAL_UART_IRQHandler+0x534>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d053      	beq.n	800e09e <HAL_UART_IRQHandler+0x3ba>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	4a87      	ldr	r2, [pc, #540]	; (800e21c <HAL_UART_IRQHandler+0x538>)
 800dffe:	4293      	cmp	r3, r2
 800e000:	d04d      	beq.n	800e09e <HAL_UART_IRQHandler+0x3ba>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	4a85      	ldr	r2, [pc, #532]	; (800e220 <HAL_UART_IRQHandler+0x53c>)
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d047      	beq.n	800e09e <HAL_UART_IRQHandler+0x3ba>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4a83      	ldr	r2, [pc, #524]	; (800e224 <HAL_UART_IRQHandler+0x540>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d041      	beq.n	800e09e <HAL_UART_IRQHandler+0x3ba>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a81      	ldr	r2, [pc, #516]	; (800e228 <HAL_UART_IRQHandler+0x544>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d03b      	beq.n	800e09e <HAL_UART_IRQHandler+0x3ba>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4a7f      	ldr	r2, [pc, #508]	; (800e22c <HAL_UART_IRQHandler+0x548>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d035      	beq.n	800e09e <HAL_UART_IRQHandler+0x3ba>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4a7d      	ldr	r2, [pc, #500]	; (800e230 <HAL_UART_IRQHandler+0x54c>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d02f      	beq.n	800e09e <HAL_UART_IRQHandler+0x3ba>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4a7b      	ldr	r2, [pc, #492]	; (800e234 <HAL_UART_IRQHandler+0x550>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d029      	beq.n	800e09e <HAL_UART_IRQHandler+0x3ba>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a79      	ldr	r2, [pc, #484]	; (800e238 <HAL_UART_IRQHandler+0x554>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d023      	beq.n	800e09e <HAL_UART_IRQHandler+0x3ba>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4a77      	ldr	r2, [pc, #476]	; (800e23c <HAL_UART_IRQHandler+0x558>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d01d      	beq.n	800e09e <HAL_UART_IRQHandler+0x3ba>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4a75      	ldr	r2, [pc, #468]	; (800e240 <HAL_UART_IRQHandler+0x55c>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d017      	beq.n	800e09e <HAL_UART_IRQHandler+0x3ba>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4a73      	ldr	r2, [pc, #460]	; (800e244 <HAL_UART_IRQHandler+0x560>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d011      	beq.n	800e09e <HAL_UART_IRQHandler+0x3ba>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a71      	ldr	r2, [pc, #452]	; (800e248 <HAL_UART_IRQHandler+0x564>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d00b      	beq.n	800e09e <HAL_UART_IRQHandler+0x3ba>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a6f      	ldr	r2, [pc, #444]	; (800e24c <HAL_UART_IRQHandler+0x568>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d005      	beq.n	800e09e <HAL_UART_IRQHandler+0x3ba>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a6d      	ldr	r2, [pc, #436]	; (800e250 <HAL_UART_IRQHandler+0x56c>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d105      	bne.n	800e0aa <HAL_UART_IRQHandler+0x3c6>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	e004      	b.n	800e0b4 <HAL_UART_IRQHandler+0x3d0>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e0b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	f000 81a4 	beq.w	800e40a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e0c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	f080 819c 	bcs.w	800e40a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e0d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0e0:	69db      	ldr	r3, [r3, #28]
 800e0e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0e6:	f000 8086 	beq.w	800e1f6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e0f6:	e853 3f00 	ldrex	r3, [r3]
 800e0fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e0fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e106:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	461a      	mov	r2, r3
 800e110:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e114:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e118:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e11c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e120:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e124:	e841 2300 	strex	r3, r2, [r1]
 800e128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e12c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e130:	2b00      	cmp	r3, #0
 800e132:	d1da      	bne.n	800e0ea <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	3308      	adds	r3, #8
 800e13a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e13c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e13e:	e853 3f00 	ldrex	r3, [r3]
 800e142:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e146:	f023 0301 	bic.w	r3, r3, #1
 800e14a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	3308      	adds	r3, #8
 800e154:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e158:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e15c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e15e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e160:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e164:	e841 2300 	strex	r3, r2, [r1]
 800e168:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e16a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d1e1      	bne.n	800e134 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	3308      	adds	r3, #8
 800e176:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e178:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e17a:	e853 3f00 	ldrex	r3, [r3]
 800e17e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	3308      	adds	r3, #8
 800e190:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e194:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e196:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e198:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e19a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e19c:	e841 2300 	strex	r3, r2, [r1]
 800e1a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e1a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d1e3      	bne.n	800e170 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2220      	movs	r2, #32
 800e1ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1be:	e853 3f00 	ldrex	r3, [r3]
 800e1c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e1c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1c6:	f023 0310 	bic.w	r3, r3, #16
 800e1ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e1d8:	65bb      	str	r3, [r7, #88]	; 0x58
 800e1da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e1de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e1e0:	e841 2300 	strex	r3, r2, [r1]
 800e1e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e1e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d1e4      	bne.n	800e1b6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7f5 fe53 	bl	8003e9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e202:	b29b      	uxth	r3, r3
 800e204:	1ad3      	subs	r3, r2, r3
 800e206:	b29b      	uxth	r3, r3
 800e208:	4619      	mov	r1, r3
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 f91c 	bl	800e448 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e210:	e0fb      	b.n	800e40a <HAL_UART_IRQHandler+0x726>
 800e212:	bf00      	nop
 800e214:	40020010 	.word	0x40020010
 800e218:	40020028 	.word	0x40020028
 800e21c:	40020040 	.word	0x40020040
 800e220:	40020058 	.word	0x40020058
 800e224:	40020070 	.word	0x40020070
 800e228:	40020088 	.word	0x40020088
 800e22c:	400200a0 	.word	0x400200a0
 800e230:	400200b8 	.word	0x400200b8
 800e234:	40020410 	.word	0x40020410
 800e238:	40020428 	.word	0x40020428
 800e23c:	40020440 	.word	0x40020440
 800e240:	40020458 	.word	0x40020458
 800e244:	40020470 	.word	0x40020470
 800e248:	40020488 	.word	0x40020488
 800e24c:	400204a0 	.word	0x400204a0
 800e250:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e260:	b29b      	uxth	r3, r3
 800e262:	1ad3      	subs	r3, r2, r3
 800e264:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e26e:	b29b      	uxth	r3, r3
 800e270:	2b00      	cmp	r3, #0
 800e272:	f000 80cc 	beq.w	800e40e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e276:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	f000 80c7 	beq.w	800e40e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e288:	e853 3f00 	ldrex	r3, [r3]
 800e28c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e294:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	461a      	mov	r2, r3
 800e29e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e2a2:	647b      	str	r3, [r7, #68]	; 0x44
 800e2a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e2a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e2aa:	e841 2300 	strex	r3, r2, [r1]
 800e2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d1e4      	bne.n	800e280 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	3308      	adds	r3, #8
 800e2bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c0:	e853 3f00 	ldrex	r3, [r3]
 800e2c4:	623b      	str	r3, [r7, #32]
   return(result);
 800e2c6:	6a3a      	ldr	r2, [r7, #32]
 800e2c8:	4b54      	ldr	r3, [pc, #336]	; (800e41c <HAL_UART_IRQHandler+0x738>)
 800e2ca:	4013      	ands	r3, r2
 800e2cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	3308      	adds	r3, #8
 800e2d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e2da:	633a      	str	r2, [r7, #48]	; 0x30
 800e2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2e2:	e841 2300 	strex	r3, r2, [r1]
 800e2e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d1e3      	bne.n	800e2b6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2220      	movs	r2, #32
 800e2f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2200      	movs	r2, #0
 800e300:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	e853 3f00 	ldrex	r3, [r3]
 800e30e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f023 0310 	bic.w	r3, r3, #16
 800e316:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	461a      	mov	r2, r3
 800e320:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e324:	61fb      	str	r3, [r7, #28]
 800e326:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e328:	69b9      	ldr	r1, [r7, #24]
 800e32a:	69fa      	ldr	r2, [r7, #28]
 800e32c:	e841 2300 	strex	r3, r2, [r1]
 800e330:	617b      	str	r3, [r7, #20]
   return(result);
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d1e4      	bne.n	800e302 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e338:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e33c:	4619      	mov	r1, r3
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 f882 	bl	800e448 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e344:	e063      	b.n	800e40e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e34a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d00e      	beq.n	800e370 <HAL_UART_IRQHandler+0x68c>
 800e352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d008      	beq.n	800e370 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e366:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f001 fec9 	bl	8010100 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e36e:	e051      	b.n	800e414 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d014      	beq.n	800e3a6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e384:	2b00      	cmp	r3, #0
 800e386:	d105      	bne.n	800e394 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e38c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e390:	2b00      	cmp	r3, #0
 800e392:	d008      	beq.n	800e3a6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d03a      	beq.n	800e412 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	4798      	blx	r3
    }
    return;
 800e3a4:	e035      	b.n	800e412 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e3a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d009      	beq.n	800e3c6 <HAL_UART_IRQHandler+0x6e2>
 800e3b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d003      	beq.n	800e3c6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f001 fa16 	bl	800f7f0 <UART_EndTransmit_IT>
    return;
 800e3c4:	e026      	b.n	800e414 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e3c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d009      	beq.n	800e3e6 <HAL_UART_IRQHandler+0x702>
 800e3d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d003      	beq.n	800e3e6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f001 fea2 	bl	8010128 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e3e4:	e016      	b.n	800e414 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e3e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d010      	beq.n	800e414 <HAL_UART_IRQHandler+0x730>
 800e3f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	da0c      	bge.n	800e414 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f001 fe8a 	bl	8010114 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e400:	e008      	b.n	800e414 <HAL_UART_IRQHandler+0x730>
      return;
 800e402:	bf00      	nop
 800e404:	e006      	b.n	800e414 <HAL_UART_IRQHandler+0x730>
    return;
 800e406:	bf00      	nop
 800e408:	e004      	b.n	800e414 <HAL_UART_IRQHandler+0x730>
      return;
 800e40a:	bf00      	nop
 800e40c:	e002      	b.n	800e414 <HAL_UART_IRQHandler+0x730>
      return;
 800e40e:	bf00      	nop
 800e410:	e000      	b.n	800e414 <HAL_UART_IRQHandler+0x730>
    return;
 800e412:	bf00      	nop
  }
}
 800e414:	37e8      	adds	r7, #232	; 0xe8
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	effffffe 	.word	0xeffffffe

0800e420 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e428:	bf00      	nop
 800e42a:	370c      	adds	r7, #12
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr

0800e434 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e434:	b480      	push	{r7}
 800e436:	b083      	sub	sp, #12
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e43c:	bf00      	nop
 800e43e:	370c      	adds	r7, #12
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr

0800e448 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e448:	b480      	push	{r7}
 800e44a:	b083      	sub	sp, #12
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	460b      	mov	r3, r1
 800e452:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e454:	bf00      	nop
 800e456:	370c      	adds	r7, #12
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e464:	b092      	sub	sp, #72	; 0x48
 800e466:	af00      	add	r7, sp, #0
 800e468:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e46a:	2300      	movs	r3, #0
 800e46c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	689a      	ldr	r2, [r3, #8]
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	691b      	ldr	r3, [r3, #16]
 800e478:	431a      	orrs	r2, r3
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	695b      	ldr	r3, [r3, #20]
 800e47e:	431a      	orrs	r2, r3
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	69db      	ldr	r3, [r3, #28]
 800e484:	4313      	orrs	r3, r2
 800e486:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	4bbe      	ldr	r3, [pc, #760]	; (800e788 <UART_SetConfig+0x328>)
 800e490:	4013      	ands	r3, r2
 800e492:	697a      	ldr	r2, [r7, #20]
 800e494:	6812      	ldr	r2, [r2, #0]
 800e496:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e498:	430b      	orrs	r3, r1
 800e49a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	68da      	ldr	r2, [r3, #12]
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	430a      	orrs	r2, r1
 800e4b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	699b      	ldr	r3, [r3, #24]
 800e4b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4ab3      	ldr	r2, [pc, #716]	; (800e78c <UART_SetConfig+0x32c>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d004      	beq.n	800e4cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	6a1b      	ldr	r3, [r3, #32]
 800e4c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4c8:	4313      	orrs	r3, r2
 800e4ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	689a      	ldr	r2, [r3, #8]
 800e4d2:	4baf      	ldr	r3, [pc, #700]	; (800e790 <UART_SetConfig+0x330>)
 800e4d4:	4013      	ands	r3, r2
 800e4d6:	697a      	ldr	r2, [r7, #20]
 800e4d8:	6812      	ldr	r2, [r2, #0]
 800e4da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e4dc:	430b      	orrs	r3, r1
 800e4de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4e6:	f023 010f 	bic.w	r1, r3, #15
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	430a      	orrs	r2, r1
 800e4f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	4aa6      	ldr	r2, [pc, #664]	; (800e794 <UART_SetConfig+0x334>)
 800e4fc:	4293      	cmp	r3, r2
 800e4fe:	d177      	bne.n	800e5f0 <UART_SetConfig+0x190>
 800e500:	4ba5      	ldr	r3, [pc, #660]	; (800e798 <UART_SetConfig+0x338>)
 800e502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e504:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e508:	2b28      	cmp	r3, #40	; 0x28
 800e50a:	d86d      	bhi.n	800e5e8 <UART_SetConfig+0x188>
 800e50c:	a201      	add	r2, pc, #4	; (adr r2, 800e514 <UART_SetConfig+0xb4>)
 800e50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e512:	bf00      	nop
 800e514:	0800e5b9 	.word	0x0800e5b9
 800e518:	0800e5e9 	.word	0x0800e5e9
 800e51c:	0800e5e9 	.word	0x0800e5e9
 800e520:	0800e5e9 	.word	0x0800e5e9
 800e524:	0800e5e9 	.word	0x0800e5e9
 800e528:	0800e5e9 	.word	0x0800e5e9
 800e52c:	0800e5e9 	.word	0x0800e5e9
 800e530:	0800e5e9 	.word	0x0800e5e9
 800e534:	0800e5c1 	.word	0x0800e5c1
 800e538:	0800e5e9 	.word	0x0800e5e9
 800e53c:	0800e5e9 	.word	0x0800e5e9
 800e540:	0800e5e9 	.word	0x0800e5e9
 800e544:	0800e5e9 	.word	0x0800e5e9
 800e548:	0800e5e9 	.word	0x0800e5e9
 800e54c:	0800e5e9 	.word	0x0800e5e9
 800e550:	0800e5e9 	.word	0x0800e5e9
 800e554:	0800e5c9 	.word	0x0800e5c9
 800e558:	0800e5e9 	.word	0x0800e5e9
 800e55c:	0800e5e9 	.word	0x0800e5e9
 800e560:	0800e5e9 	.word	0x0800e5e9
 800e564:	0800e5e9 	.word	0x0800e5e9
 800e568:	0800e5e9 	.word	0x0800e5e9
 800e56c:	0800e5e9 	.word	0x0800e5e9
 800e570:	0800e5e9 	.word	0x0800e5e9
 800e574:	0800e5d1 	.word	0x0800e5d1
 800e578:	0800e5e9 	.word	0x0800e5e9
 800e57c:	0800e5e9 	.word	0x0800e5e9
 800e580:	0800e5e9 	.word	0x0800e5e9
 800e584:	0800e5e9 	.word	0x0800e5e9
 800e588:	0800e5e9 	.word	0x0800e5e9
 800e58c:	0800e5e9 	.word	0x0800e5e9
 800e590:	0800e5e9 	.word	0x0800e5e9
 800e594:	0800e5d9 	.word	0x0800e5d9
 800e598:	0800e5e9 	.word	0x0800e5e9
 800e59c:	0800e5e9 	.word	0x0800e5e9
 800e5a0:	0800e5e9 	.word	0x0800e5e9
 800e5a4:	0800e5e9 	.word	0x0800e5e9
 800e5a8:	0800e5e9 	.word	0x0800e5e9
 800e5ac:	0800e5e9 	.word	0x0800e5e9
 800e5b0:	0800e5e9 	.word	0x0800e5e9
 800e5b4:	0800e5e1 	.word	0x0800e5e1
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5be:	e326      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e5c0:	2304      	movs	r3, #4
 800e5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5c6:	e322      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e5c8:	2308      	movs	r3, #8
 800e5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ce:	e31e      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e5d0:	2310      	movs	r3, #16
 800e5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5d6:	e31a      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e5d8:	2320      	movs	r3, #32
 800e5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5de:	e316      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e5e0:	2340      	movs	r3, #64	; 0x40
 800e5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5e6:	e312      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e5e8:	2380      	movs	r3, #128	; 0x80
 800e5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ee:	e30e      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a69      	ldr	r2, [pc, #420]	; (800e79c <UART_SetConfig+0x33c>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d130      	bne.n	800e65c <UART_SetConfig+0x1fc>
 800e5fa:	4b67      	ldr	r3, [pc, #412]	; (800e798 <UART_SetConfig+0x338>)
 800e5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5fe:	f003 0307 	and.w	r3, r3, #7
 800e602:	2b05      	cmp	r3, #5
 800e604:	d826      	bhi.n	800e654 <UART_SetConfig+0x1f4>
 800e606:	a201      	add	r2, pc, #4	; (adr r2, 800e60c <UART_SetConfig+0x1ac>)
 800e608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e60c:	0800e625 	.word	0x0800e625
 800e610:	0800e62d 	.word	0x0800e62d
 800e614:	0800e635 	.word	0x0800e635
 800e618:	0800e63d 	.word	0x0800e63d
 800e61c:	0800e645 	.word	0x0800e645
 800e620:	0800e64d 	.word	0x0800e64d
 800e624:	2300      	movs	r3, #0
 800e626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e62a:	e2f0      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e62c:	2304      	movs	r3, #4
 800e62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e632:	e2ec      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e634:	2308      	movs	r3, #8
 800e636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e63a:	e2e8      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e63c:	2310      	movs	r3, #16
 800e63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e642:	e2e4      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e644:	2320      	movs	r3, #32
 800e646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e64a:	e2e0      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e64c:	2340      	movs	r3, #64	; 0x40
 800e64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e652:	e2dc      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e654:	2380      	movs	r3, #128	; 0x80
 800e656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e65a:	e2d8      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4a4f      	ldr	r2, [pc, #316]	; (800e7a0 <UART_SetConfig+0x340>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d130      	bne.n	800e6c8 <UART_SetConfig+0x268>
 800e666:	4b4c      	ldr	r3, [pc, #304]	; (800e798 <UART_SetConfig+0x338>)
 800e668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e66a:	f003 0307 	and.w	r3, r3, #7
 800e66e:	2b05      	cmp	r3, #5
 800e670:	d826      	bhi.n	800e6c0 <UART_SetConfig+0x260>
 800e672:	a201      	add	r2, pc, #4	; (adr r2, 800e678 <UART_SetConfig+0x218>)
 800e674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e678:	0800e691 	.word	0x0800e691
 800e67c:	0800e699 	.word	0x0800e699
 800e680:	0800e6a1 	.word	0x0800e6a1
 800e684:	0800e6a9 	.word	0x0800e6a9
 800e688:	0800e6b1 	.word	0x0800e6b1
 800e68c:	0800e6b9 	.word	0x0800e6b9
 800e690:	2300      	movs	r3, #0
 800e692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e696:	e2ba      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e698:	2304      	movs	r3, #4
 800e69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e69e:	e2b6      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e6a0:	2308      	movs	r3, #8
 800e6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6a6:	e2b2      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e6a8:	2310      	movs	r3, #16
 800e6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ae:	e2ae      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e6b0:	2320      	movs	r3, #32
 800e6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6b6:	e2aa      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e6b8:	2340      	movs	r3, #64	; 0x40
 800e6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6be:	e2a6      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e6c0:	2380      	movs	r3, #128	; 0x80
 800e6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6c6:	e2a2      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4a35      	ldr	r2, [pc, #212]	; (800e7a4 <UART_SetConfig+0x344>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d130      	bne.n	800e734 <UART_SetConfig+0x2d4>
 800e6d2:	4b31      	ldr	r3, [pc, #196]	; (800e798 <UART_SetConfig+0x338>)
 800e6d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6d6:	f003 0307 	and.w	r3, r3, #7
 800e6da:	2b05      	cmp	r3, #5
 800e6dc:	d826      	bhi.n	800e72c <UART_SetConfig+0x2cc>
 800e6de:	a201      	add	r2, pc, #4	; (adr r2, 800e6e4 <UART_SetConfig+0x284>)
 800e6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e4:	0800e6fd 	.word	0x0800e6fd
 800e6e8:	0800e705 	.word	0x0800e705
 800e6ec:	0800e70d 	.word	0x0800e70d
 800e6f0:	0800e715 	.word	0x0800e715
 800e6f4:	0800e71d 	.word	0x0800e71d
 800e6f8:	0800e725 	.word	0x0800e725
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e702:	e284      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e704:	2304      	movs	r3, #4
 800e706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70a:	e280      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e70c:	2308      	movs	r3, #8
 800e70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e712:	e27c      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e714:	2310      	movs	r3, #16
 800e716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e71a:	e278      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e71c:	2320      	movs	r3, #32
 800e71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e722:	e274      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e724:	2340      	movs	r3, #64	; 0x40
 800e726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e72a:	e270      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e72c:	2380      	movs	r3, #128	; 0x80
 800e72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e732:	e26c      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4a1b      	ldr	r2, [pc, #108]	; (800e7a8 <UART_SetConfig+0x348>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d142      	bne.n	800e7c4 <UART_SetConfig+0x364>
 800e73e:	4b16      	ldr	r3, [pc, #88]	; (800e798 <UART_SetConfig+0x338>)
 800e740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e742:	f003 0307 	and.w	r3, r3, #7
 800e746:	2b05      	cmp	r3, #5
 800e748:	d838      	bhi.n	800e7bc <UART_SetConfig+0x35c>
 800e74a:	a201      	add	r2, pc, #4	; (adr r2, 800e750 <UART_SetConfig+0x2f0>)
 800e74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e750:	0800e769 	.word	0x0800e769
 800e754:	0800e771 	.word	0x0800e771
 800e758:	0800e779 	.word	0x0800e779
 800e75c:	0800e781 	.word	0x0800e781
 800e760:	0800e7ad 	.word	0x0800e7ad
 800e764:	0800e7b5 	.word	0x0800e7b5
 800e768:	2300      	movs	r3, #0
 800e76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e76e:	e24e      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e770:	2304      	movs	r3, #4
 800e772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e776:	e24a      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e778:	2308      	movs	r3, #8
 800e77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e77e:	e246      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e780:	2310      	movs	r3, #16
 800e782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e786:	e242      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e788:	cfff69f3 	.word	0xcfff69f3
 800e78c:	58000c00 	.word	0x58000c00
 800e790:	11fff4ff 	.word	0x11fff4ff
 800e794:	40011000 	.word	0x40011000
 800e798:	58024400 	.word	0x58024400
 800e79c:	40004400 	.word	0x40004400
 800e7a0:	40004800 	.word	0x40004800
 800e7a4:	40004c00 	.word	0x40004c00
 800e7a8:	40005000 	.word	0x40005000
 800e7ac:	2320      	movs	r3, #32
 800e7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7b2:	e22c      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e7b4:	2340      	movs	r3, #64	; 0x40
 800e7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ba:	e228      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e7bc:	2380      	movs	r3, #128	; 0x80
 800e7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7c2:	e224      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4ab1      	ldr	r2, [pc, #708]	; (800ea90 <UART_SetConfig+0x630>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d176      	bne.n	800e8bc <UART_SetConfig+0x45c>
 800e7ce:	4bb1      	ldr	r3, [pc, #708]	; (800ea94 <UART_SetConfig+0x634>)
 800e7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e7d6:	2b28      	cmp	r3, #40	; 0x28
 800e7d8:	d86c      	bhi.n	800e8b4 <UART_SetConfig+0x454>
 800e7da:	a201      	add	r2, pc, #4	; (adr r2, 800e7e0 <UART_SetConfig+0x380>)
 800e7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e0:	0800e885 	.word	0x0800e885
 800e7e4:	0800e8b5 	.word	0x0800e8b5
 800e7e8:	0800e8b5 	.word	0x0800e8b5
 800e7ec:	0800e8b5 	.word	0x0800e8b5
 800e7f0:	0800e8b5 	.word	0x0800e8b5
 800e7f4:	0800e8b5 	.word	0x0800e8b5
 800e7f8:	0800e8b5 	.word	0x0800e8b5
 800e7fc:	0800e8b5 	.word	0x0800e8b5
 800e800:	0800e88d 	.word	0x0800e88d
 800e804:	0800e8b5 	.word	0x0800e8b5
 800e808:	0800e8b5 	.word	0x0800e8b5
 800e80c:	0800e8b5 	.word	0x0800e8b5
 800e810:	0800e8b5 	.word	0x0800e8b5
 800e814:	0800e8b5 	.word	0x0800e8b5
 800e818:	0800e8b5 	.word	0x0800e8b5
 800e81c:	0800e8b5 	.word	0x0800e8b5
 800e820:	0800e895 	.word	0x0800e895
 800e824:	0800e8b5 	.word	0x0800e8b5
 800e828:	0800e8b5 	.word	0x0800e8b5
 800e82c:	0800e8b5 	.word	0x0800e8b5
 800e830:	0800e8b5 	.word	0x0800e8b5
 800e834:	0800e8b5 	.word	0x0800e8b5
 800e838:	0800e8b5 	.word	0x0800e8b5
 800e83c:	0800e8b5 	.word	0x0800e8b5
 800e840:	0800e89d 	.word	0x0800e89d
 800e844:	0800e8b5 	.word	0x0800e8b5
 800e848:	0800e8b5 	.word	0x0800e8b5
 800e84c:	0800e8b5 	.word	0x0800e8b5
 800e850:	0800e8b5 	.word	0x0800e8b5
 800e854:	0800e8b5 	.word	0x0800e8b5
 800e858:	0800e8b5 	.word	0x0800e8b5
 800e85c:	0800e8b5 	.word	0x0800e8b5
 800e860:	0800e8a5 	.word	0x0800e8a5
 800e864:	0800e8b5 	.word	0x0800e8b5
 800e868:	0800e8b5 	.word	0x0800e8b5
 800e86c:	0800e8b5 	.word	0x0800e8b5
 800e870:	0800e8b5 	.word	0x0800e8b5
 800e874:	0800e8b5 	.word	0x0800e8b5
 800e878:	0800e8b5 	.word	0x0800e8b5
 800e87c:	0800e8b5 	.word	0x0800e8b5
 800e880:	0800e8ad 	.word	0x0800e8ad
 800e884:	2301      	movs	r3, #1
 800e886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e88a:	e1c0      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e88c:	2304      	movs	r3, #4
 800e88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e892:	e1bc      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e894:	2308      	movs	r3, #8
 800e896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e89a:	e1b8      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e89c:	2310      	movs	r3, #16
 800e89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8a2:	e1b4      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e8a4:	2320      	movs	r3, #32
 800e8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8aa:	e1b0      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e8ac:	2340      	movs	r3, #64	; 0x40
 800e8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8b2:	e1ac      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e8b4:	2380      	movs	r3, #128	; 0x80
 800e8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ba:	e1a8      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4a75      	ldr	r2, [pc, #468]	; (800ea98 <UART_SetConfig+0x638>)
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d130      	bne.n	800e928 <UART_SetConfig+0x4c8>
 800e8c6:	4b73      	ldr	r3, [pc, #460]	; (800ea94 <UART_SetConfig+0x634>)
 800e8c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8ca:	f003 0307 	and.w	r3, r3, #7
 800e8ce:	2b05      	cmp	r3, #5
 800e8d0:	d826      	bhi.n	800e920 <UART_SetConfig+0x4c0>
 800e8d2:	a201      	add	r2, pc, #4	; (adr r2, 800e8d8 <UART_SetConfig+0x478>)
 800e8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8d8:	0800e8f1 	.word	0x0800e8f1
 800e8dc:	0800e8f9 	.word	0x0800e8f9
 800e8e0:	0800e901 	.word	0x0800e901
 800e8e4:	0800e909 	.word	0x0800e909
 800e8e8:	0800e911 	.word	0x0800e911
 800e8ec:	0800e919 	.word	0x0800e919
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8f6:	e18a      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e8f8:	2304      	movs	r3, #4
 800e8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8fe:	e186      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e900:	2308      	movs	r3, #8
 800e902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e906:	e182      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e908:	2310      	movs	r3, #16
 800e90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e90e:	e17e      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e910:	2320      	movs	r3, #32
 800e912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e916:	e17a      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e918:	2340      	movs	r3, #64	; 0x40
 800e91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e91e:	e176      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e920:	2380      	movs	r3, #128	; 0x80
 800e922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e926:	e172      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4a5b      	ldr	r2, [pc, #364]	; (800ea9c <UART_SetConfig+0x63c>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	d130      	bne.n	800e994 <UART_SetConfig+0x534>
 800e932:	4b58      	ldr	r3, [pc, #352]	; (800ea94 <UART_SetConfig+0x634>)
 800e934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e936:	f003 0307 	and.w	r3, r3, #7
 800e93a:	2b05      	cmp	r3, #5
 800e93c:	d826      	bhi.n	800e98c <UART_SetConfig+0x52c>
 800e93e:	a201      	add	r2, pc, #4	; (adr r2, 800e944 <UART_SetConfig+0x4e4>)
 800e940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e944:	0800e95d 	.word	0x0800e95d
 800e948:	0800e965 	.word	0x0800e965
 800e94c:	0800e96d 	.word	0x0800e96d
 800e950:	0800e975 	.word	0x0800e975
 800e954:	0800e97d 	.word	0x0800e97d
 800e958:	0800e985 	.word	0x0800e985
 800e95c:	2300      	movs	r3, #0
 800e95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e962:	e154      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e964:	2304      	movs	r3, #4
 800e966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e96a:	e150      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e96c:	2308      	movs	r3, #8
 800e96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e972:	e14c      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e974:	2310      	movs	r3, #16
 800e976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e97a:	e148      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e97c:	2320      	movs	r3, #32
 800e97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e982:	e144      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e984:	2340      	movs	r3, #64	; 0x40
 800e986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e98a:	e140      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e98c:	2380      	movs	r3, #128	; 0x80
 800e98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e992:	e13c      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	4a41      	ldr	r2, [pc, #260]	; (800eaa0 <UART_SetConfig+0x640>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	f040 8082 	bne.w	800eaa4 <UART_SetConfig+0x644>
 800e9a0:	4b3c      	ldr	r3, [pc, #240]	; (800ea94 <UART_SetConfig+0x634>)
 800e9a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e9a8:	2b28      	cmp	r3, #40	; 0x28
 800e9aa:	d86d      	bhi.n	800ea88 <UART_SetConfig+0x628>
 800e9ac:	a201      	add	r2, pc, #4	; (adr r2, 800e9b4 <UART_SetConfig+0x554>)
 800e9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b2:	bf00      	nop
 800e9b4:	0800ea59 	.word	0x0800ea59
 800e9b8:	0800ea89 	.word	0x0800ea89
 800e9bc:	0800ea89 	.word	0x0800ea89
 800e9c0:	0800ea89 	.word	0x0800ea89
 800e9c4:	0800ea89 	.word	0x0800ea89
 800e9c8:	0800ea89 	.word	0x0800ea89
 800e9cc:	0800ea89 	.word	0x0800ea89
 800e9d0:	0800ea89 	.word	0x0800ea89
 800e9d4:	0800ea61 	.word	0x0800ea61
 800e9d8:	0800ea89 	.word	0x0800ea89
 800e9dc:	0800ea89 	.word	0x0800ea89
 800e9e0:	0800ea89 	.word	0x0800ea89
 800e9e4:	0800ea89 	.word	0x0800ea89
 800e9e8:	0800ea89 	.word	0x0800ea89
 800e9ec:	0800ea89 	.word	0x0800ea89
 800e9f0:	0800ea89 	.word	0x0800ea89
 800e9f4:	0800ea69 	.word	0x0800ea69
 800e9f8:	0800ea89 	.word	0x0800ea89
 800e9fc:	0800ea89 	.word	0x0800ea89
 800ea00:	0800ea89 	.word	0x0800ea89
 800ea04:	0800ea89 	.word	0x0800ea89
 800ea08:	0800ea89 	.word	0x0800ea89
 800ea0c:	0800ea89 	.word	0x0800ea89
 800ea10:	0800ea89 	.word	0x0800ea89
 800ea14:	0800ea71 	.word	0x0800ea71
 800ea18:	0800ea89 	.word	0x0800ea89
 800ea1c:	0800ea89 	.word	0x0800ea89
 800ea20:	0800ea89 	.word	0x0800ea89
 800ea24:	0800ea89 	.word	0x0800ea89
 800ea28:	0800ea89 	.word	0x0800ea89
 800ea2c:	0800ea89 	.word	0x0800ea89
 800ea30:	0800ea89 	.word	0x0800ea89
 800ea34:	0800ea79 	.word	0x0800ea79
 800ea38:	0800ea89 	.word	0x0800ea89
 800ea3c:	0800ea89 	.word	0x0800ea89
 800ea40:	0800ea89 	.word	0x0800ea89
 800ea44:	0800ea89 	.word	0x0800ea89
 800ea48:	0800ea89 	.word	0x0800ea89
 800ea4c:	0800ea89 	.word	0x0800ea89
 800ea50:	0800ea89 	.word	0x0800ea89
 800ea54:	0800ea81 	.word	0x0800ea81
 800ea58:	2301      	movs	r3, #1
 800ea5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea5e:	e0d6      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800ea60:	2304      	movs	r3, #4
 800ea62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea66:	e0d2      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800ea68:	2308      	movs	r3, #8
 800ea6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea6e:	e0ce      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800ea70:	2310      	movs	r3, #16
 800ea72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea76:	e0ca      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800ea78:	2320      	movs	r3, #32
 800ea7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea7e:	e0c6      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800ea80:	2340      	movs	r3, #64	; 0x40
 800ea82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea86:	e0c2      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800ea88:	2380      	movs	r3, #128	; 0x80
 800ea8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea8e:	e0be      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800ea90:	40011400 	.word	0x40011400
 800ea94:	58024400 	.word	0x58024400
 800ea98:	40007800 	.word	0x40007800
 800ea9c:	40007c00 	.word	0x40007c00
 800eaa0:	40011800 	.word	0x40011800
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4aad      	ldr	r2, [pc, #692]	; (800ed60 <UART_SetConfig+0x900>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d176      	bne.n	800eb9c <UART_SetConfig+0x73c>
 800eaae:	4bad      	ldr	r3, [pc, #692]	; (800ed64 <UART_SetConfig+0x904>)
 800eab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eab6:	2b28      	cmp	r3, #40	; 0x28
 800eab8:	d86c      	bhi.n	800eb94 <UART_SetConfig+0x734>
 800eaba:	a201      	add	r2, pc, #4	; (adr r2, 800eac0 <UART_SetConfig+0x660>)
 800eabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eac0:	0800eb65 	.word	0x0800eb65
 800eac4:	0800eb95 	.word	0x0800eb95
 800eac8:	0800eb95 	.word	0x0800eb95
 800eacc:	0800eb95 	.word	0x0800eb95
 800ead0:	0800eb95 	.word	0x0800eb95
 800ead4:	0800eb95 	.word	0x0800eb95
 800ead8:	0800eb95 	.word	0x0800eb95
 800eadc:	0800eb95 	.word	0x0800eb95
 800eae0:	0800eb6d 	.word	0x0800eb6d
 800eae4:	0800eb95 	.word	0x0800eb95
 800eae8:	0800eb95 	.word	0x0800eb95
 800eaec:	0800eb95 	.word	0x0800eb95
 800eaf0:	0800eb95 	.word	0x0800eb95
 800eaf4:	0800eb95 	.word	0x0800eb95
 800eaf8:	0800eb95 	.word	0x0800eb95
 800eafc:	0800eb95 	.word	0x0800eb95
 800eb00:	0800eb75 	.word	0x0800eb75
 800eb04:	0800eb95 	.word	0x0800eb95
 800eb08:	0800eb95 	.word	0x0800eb95
 800eb0c:	0800eb95 	.word	0x0800eb95
 800eb10:	0800eb95 	.word	0x0800eb95
 800eb14:	0800eb95 	.word	0x0800eb95
 800eb18:	0800eb95 	.word	0x0800eb95
 800eb1c:	0800eb95 	.word	0x0800eb95
 800eb20:	0800eb7d 	.word	0x0800eb7d
 800eb24:	0800eb95 	.word	0x0800eb95
 800eb28:	0800eb95 	.word	0x0800eb95
 800eb2c:	0800eb95 	.word	0x0800eb95
 800eb30:	0800eb95 	.word	0x0800eb95
 800eb34:	0800eb95 	.word	0x0800eb95
 800eb38:	0800eb95 	.word	0x0800eb95
 800eb3c:	0800eb95 	.word	0x0800eb95
 800eb40:	0800eb85 	.word	0x0800eb85
 800eb44:	0800eb95 	.word	0x0800eb95
 800eb48:	0800eb95 	.word	0x0800eb95
 800eb4c:	0800eb95 	.word	0x0800eb95
 800eb50:	0800eb95 	.word	0x0800eb95
 800eb54:	0800eb95 	.word	0x0800eb95
 800eb58:	0800eb95 	.word	0x0800eb95
 800eb5c:	0800eb95 	.word	0x0800eb95
 800eb60:	0800eb8d 	.word	0x0800eb8d
 800eb64:	2301      	movs	r3, #1
 800eb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb6a:	e050      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800eb6c:	2304      	movs	r3, #4
 800eb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb72:	e04c      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800eb74:	2308      	movs	r3, #8
 800eb76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb7a:	e048      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800eb7c:	2310      	movs	r3, #16
 800eb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb82:	e044      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800eb84:	2320      	movs	r3, #32
 800eb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb8a:	e040      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800eb8c:	2340      	movs	r3, #64	; 0x40
 800eb8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb92:	e03c      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800eb94:	2380      	movs	r3, #128	; 0x80
 800eb96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb9a:	e038      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	4a71      	ldr	r2, [pc, #452]	; (800ed68 <UART_SetConfig+0x908>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d130      	bne.n	800ec08 <UART_SetConfig+0x7a8>
 800eba6:	4b6f      	ldr	r3, [pc, #444]	; (800ed64 <UART_SetConfig+0x904>)
 800eba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebaa:	f003 0307 	and.w	r3, r3, #7
 800ebae:	2b05      	cmp	r3, #5
 800ebb0:	d826      	bhi.n	800ec00 <UART_SetConfig+0x7a0>
 800ebb2:	a201      	add	r2, pc, #4	; (adr r2, 800ebb8 <UART_SetConfig+0x758>)
 800ebb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebb8:	0800ebd1 	.word	0x0800ebd1
 800ebbc:	0800ebd9 	.word	0x0800ebd9
 800ebc0:	0800ebe1 	.word	0x0800ebe1
 800ebc4:	0800ebe9 	.word	0x0800ebe9
 800ebc8:	0800ebf1 	.word	0x0800ebf1
 800ebcc:	0800ebf9 	.word	0x0800ebf9
 800ebd0:	2302      	movs	r3, #2
 800ebd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebd6:	e01a      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800ebd8:	2304      	movs	r3, #4
 800ebda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebde:	e016      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800ebe0:	2308      	movs	r3, #8
 800ebe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebe6:	e012      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800ebe8:	2310      	movs	r3, #16
 800ebea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebee:	e00e      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800ebf0:	2320      	movs	r3, #32
 800ebf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebf6:	e00a      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800ebf8:	2340      	movs	r3, #64	; 0x40
 800ebfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebfe:	e006      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800ec00:	2380      	movs	r3, #128	; 0x80
 800ec02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec06:	e002      	b.n	800ec0e <UART_SetConfig+0x7ae>
 800ec08:	2380      	movs	r3, #128	; 0x80
 800ec0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4a55      	ldr	r2, [pc, #340]	; (800ed68 <UART_SetConfig+0x908>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	f040 80f8 	bne.w	800ee0a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ec1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ec1e:	2b20      	cmp	r3, #32
 800ec20:	dc46      	bgt.n	800ecb0 <UART_SetConfig+0x850>
 800ec22:	2b02      	cmp	r3, #2
 800ec24:	db75      	blt.n	800ed12 <UART_SetConfig+0x8b2>
 800ec26:	3b02      	subs	r3, #2
 800ec28:	2b1e      	cmp	r3, #30
 800ec2a:	d872      	bhi.n	800ed12 <UART_SetConfig+0x8b2>
 800ec2c:	a201      	add	r2, pc, #4	; (adr r2, 800ec34 <UART_SetConfig+0x7d4>)
 800ec2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec32:	bf00      	nop
 800ec34:	0800ecb7 	.word	0x0800ecb7
 800ec38:	0800ed13 	.word	0x0800ed13
 800ec3c:	0800ecbf 	.word	0x0800ecbf
 800ec40:	0800ed13 	.word	0x0800ed13
 800ec44:	0800ed13 	.word	0x0800ed13
 800ec48:	0800ed13 	.word	0x0800ed13
 800ec4c:	0800eccf 	.word	0x0800eccf
 800ec50:	0800ed13 	.word	0x0800ed13
 800ec54:	0800ed13 	.word	0x0800ed13
 800ec58:	0800ed13 	.word	0x0800ed13
 800ec5c:	0800ed13 	.word	0x0800ed13
 800ec60:	0800ed13 	.word	0x0800ed13
 800ec64:	0800ed13 	.word	0x0800ed13
 800ec68:	0800ed13 	.word	0x0800ed13
 800ec6c:	0800ecdf 	.word	0x0800ecdf
 800ec70:	0800ed13 	.word	0x0800ed13
 800ec74:	0800ed13 	.word	0x0800ed13
 800ec78:	0800ed13 	.word	0x0800ed13
 800ec7c:	0800ed13 	.word	0x0800ed13
 800ec80:	0800ed13 	.word	0x0800ed13
 800ec84:	0800ed13 	.word	0x0800ed13
 800ec88:	0800ed13 	.word	0x0800ed13
 800ec8c:	0800ed13 	.word	0x0800ed13
 800ec90:	0800ed13 	.word	0x0800ed13
 800ec94:	0800ed13 	.word	0x0800ed13
 800ec98:	0800ed13 	.word	0x0800ed13
 800ec9c:	0800ed13 	.word	0x0800ed13
 800eca0:	0800ed13 	.word	0x0800ed13
 800eca4:	0800ed13 	.word	0x0800ed13
 800eca8:	0800ed13 	.word	0x0800ed13
 800ecac:	0800ed05 	.word	0x0800ed05
 800ecb0:	2b40      	cmp	r3, #64	; 0x40
 800ecb2:	d02a      	beq.n	800ed0a <UART_SetConfig+0x8aa>
 800ecb4:	e02d      	b.n	800ed12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ecb6:	f7f9 fee7 	bl	8008a88 <HAL_RCCEx_GetD3PCLK1Freq>
 800ecba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ecbc:	e02f      	b.n	800ed1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7f9 fef6 	bl	8008ab4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ecc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eccc:	e027      	b.n	800ed1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ecce:	f107 0318 	add.w	r3, r7, #24
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fa f842 	bl	8008d5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecdc:	e01f      	b.n	800ed1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ecde:	4b21      	ldr	r3, [pc, #132]	; (800ed64 <UART_SetConfig+0x904>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	f003 0320 	and.w	r3, r3, #32
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d009      	beq.n	800ecfe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ecea:	4b1e      	ldr	r3, [pc, #120]	; (800ed64 <UART_SetConfig+0x904>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	08db      	lsrs	r3, r3, #3
 800ecf0:	f003 0303 	and.w	r3, r3, #3
 800ecf4:	4a1d      	ldr	r2, [pc, #116]	; (800ed6c <UART_SetConfig+0x90c>)
 800ecf6:	fa22 f303 	lsr.w	r3, r2, r3
 800ecfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ecfc:	e00f      	b.n	800ed1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ecfe:	4b1b      	ldr	r3, [pc, #108]	; (800ed6c <UART_SetConfig+0x90c>)
 800ed00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed02:	e00c      	b.n	800ed1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed04:	4b1a      	ldr	r3, [pc, #104]	; (800ed70 <UART_SetConfig+0x910>)
 800ed06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed08:	e009      	b.n	800ed1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed10:	e005      	b.n	800ed1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ed12:	2300      	movs	r3, #0
 800ed14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ed16:	2301      	movs	r3, #1
 800ed18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ed1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ed1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	f000 81ee 	beq.w	800f102 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed2a:	4a12      	ldr	r2, [pc, #72]	; (800ed74 <UART_SetConfig+0x914>)
 800ed2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed30:	461a      	mov	r2, r3
 800ed32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed34:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	685a      	ldr	r2, [r3, #4]
 800ed3e:	4613      	mov	r3, r2
 800ed40:	005b      	lsls	r3, r3, #1
 800ed42:	4413      	add	r3, r2
 800ed44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d305      	bcc.n	800ed56 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ed50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d910      	bls.n	800ed78 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ed56:	2301      	movs	r3, #1
 800ed58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ed5c:	e1d1      	b.n	800f102 <UART_SetConfig+0xca2>
 800ed5e:	bf00      	nop
 800ed60:	40011c00 	.word	0x40011c00
 800ed64:	58024400 	.word	0x58024400
 800ed68:	58000c00 	.word	0x58000c00
 800ed6c:	03d09000 	.word	0x03d09000
 800ed70:	003d0900 	.word	0x003d0900
 800ed74:	080128a8 	.word	0x080128a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	60bb      	str	r3, [r7, #8]
 800ed7e:	60fa      	str	r2, [r7, #12]
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed84:	4ac0      	ldr	r2, [pc, #768]	; (800f088 <UART_SetConfig+0xc28>)
 800ed86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	603b      	str	r3, [r7, #0]
 800ed90:	607a      	str	r2, [r7, #4]
 800ed92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ed9a:	f7f1 faf9 	bl	8000390 <__aeabi_uldivmod>
 800ed9e:	4602      	mov	r2, r0
 800eda0:	460b      	mov	r3, r1
 800eda2:	4610      	mov	r0, r2
 800eda4:	4619      	mov	r1, r3
 800eda6:	f04f 0200 	mov.w	r2, #0
 800edaa:	f04f 0300 	mov.w	r3, #0
 800edae:	020b      	lsls	r3, r1, #8
 800edb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800edb4:	0202      	lsls	r2, r0, #8
 800edb6:	6979      	ldr	r1, [r7, #20]
 800edb8:	6849      	ldr	r1, [r1, #4]
 800edba:	0849      	lsrs	r1, r1, #1
 800edbc:	2000      	movs	r0, #0
 800edbe:	460c      	mov	r4, r1
 800edc0:	4605      	mov	r5, r0
 800edc2:	eb12 0804 	adds.w	r8, r2, r4
 800edc6:	eb43 0905 	adc.w	r9, r3, r5
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	469a      	mov	sl, r3
 800edd2:	4693      	mov	fp, r2
 800edd4:	4652      	mov	r2, sl
 800edd6:	465b      	mov	r3, fp
 800edd8:	4640      	mov	r0, r8
 800edda:	4649      	mov	r1, r9
 800eddc:	f7f1 fad8 	bl	8000390 <__aeabi_uldivmod>
 800ede0:	4602      	mov	r2, r0
 800ede2:	460b      	mov	r3, r1
 800ede4:	4613      	mov	r3, r2
 800ede6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ede8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800edee:	d308      	bcc.n	800ee02 <UART_SetConfig+0x9a2>
 800edf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800edf6:	d204      	bcs.n	800ee02 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edfe:	60da      	str	r2, [r3, #12]
 800ee00:	e17f      	b.n	800f102 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ee02:	2301      	movs	r3, #1
 800ee04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ee08:	e17b      	b.n	800f102 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	69db      	ldr	r3, [r3, #28]
 800ee0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee12:	f040 80bd 	bne.w	800ef90 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ee16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ee1a:	2b20      	cmp	r3, #32
 800ee1c:	dc48      	bgt.n	800eeb0 <UART_SetConfig+0xa50>
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	db7b      	blt.n	800ef1a <UART_SetConfig+0xaba>
 800ee22:	2b20      	cmp	r3, #32
 800ee24:	d879      	bhi.n	800ef1a <UART_SetConfig+0xaba>
 800ee26:	a201      	add	r2, pc, #4	; (adr r2, 800ee2c <UART_SetConfig+0x9cc>)
 800ee28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee2c:	0800eeb7 	.word	0x0800eeb7
 800ee30:	0800eebf 	.word	0x0800eebf
 800ee34:	0800ef1b 	.word	0x0800ef1b
 800ee38:	0800ef1b 	.word	0x0800ef1b
 800ee3c:	0800eec7 	.word	0x0800eec7
 800ee40:	0800ef1b 	.word	0x0800ef1b
 800ee44:	0800ef1b 	.word	0x0800ef1b
 800ee48:	0800ef1b 	.word	0x0800ef1b
 800ee4c:	0800eed7 	.word	0x0800eed7
 800ee50:	0800ef1b 	.word	0x0800ef1b
 800ee54:	0800ef1b 	.word	0x0800ef1b
 800ee58:	0800ef1b 	.word	0x0800ef1b
 800ee5c:	0800ef1b 	.word	0x0800ef1b
 800ee60:	0800ef1b 	.word	0x0800ef1b
 800ee64:	0800ef1b 	.word	0x0800ef1b
 800ee68:	0800ef1b 	.word	0x0800ef1b
 800ee6c:	0800eee7 	.word	0x0800eee7
 800ee70:	0800ef1b 	.word	0x0800ef1b
 800ee74:	0800ef1b 	.word	0x0800ef1b
 800ee78:	0800ef1b 	.word	0x0800ef1b
 800ee7c:	0800ef1b 	.word	0x0800ef1b
 800ee80:	0800ef1b 	.word	0x0800ef1b
 800ee84:	0800ef1b 	.word	0x0800ef1b
 800ee88:	0800ef1b 	.word	0x0800ef1b
 800ee8c:	0800ef1b 	.word	0x0800ef1b
 800ee90:	0800ef1b 	.word	0x0800ef1b
 800ee94:	0800ef1b 	.word	0x0800ef1b
 800ee98:	0800ef1b 	.word	0x0800ef1b
 800ee9c:	0800ef1b 	.word	0x0800ef1b
 800eea0:	0800ef1b 	.word	0x0800ef1b
 800eea4:	0800ef1b 	.word	0x0800ef1b
 800eea8:	0800ef1b 	.word	0x0800ef1b
 800eeac:	0800ef0d 	.word	0x0800ef0d
 800eeb0:	2b40      	cmp	r3, #64	; 0x40
 800eeb2:	d02e      	beq.n	800ef12 <UART_SetConfig+0xab2>
 800eeb4:	e031      	b.n	800ef1a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eeb6:	f7f8 fa81 	bl	80073bc <HAL_RCC_GetPCLK1Freq>
 800eeba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eebc:	e033      	b.n	800ef26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eebe:	f7f8 fa93 	bl	80073e8 <HAL_RCC_GetPCLK2Freq>
 800eec2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eec4:	e02f      	b.n	800ef26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7f9 fdf2 	bl	8008ab4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eed4:	e027      	b.n	800ef26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eed6:	f107 0318 	add.w	r3, r7, #24
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7f9 ff3e 	bl	8008d5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eee4:	e01f      	b.n	800ef26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eee6:	4b69      	ldr	r3, [pc, #420]	; (800f08c <UART_SetConfig+0xc2c>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f003 0320 	and.w	r3, r3, #32
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d009      	beq.n	800ef06 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eef2:	4b66      	ldr	r3, [pc, #408]	; (800f08c <UART_SetConfig+0xc2c>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	08db      	lsrs	r3, r3, #3
 800eef8:	f003 0303 	and.w	r3, r3, #3
 800eefc:	4a64      	ldr	r2, [pc, #400]	; (800f090 <UART_SetConfig+0xc30>)
 800eefe:	fa22 f303 	lsr.w	r3, r2, r3
 800ef02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef04:	e00f      	b.n	800ef26 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ef06:	4b62      	ldr	r3, [pc, #392]	; (800f090 <UART_SetConfig+0xc30>)
 800ef08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef0a:	e00c      	b.n	800ef26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ef0c:	4b61      	ldr	r3, [pc, #388]	; (800f094 <UART_SetConfig+0xc34>)
 800ef0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef10:	e009      	b.n	800ef26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef18:	e005      	b.n	800ef26 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ef24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ef26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	f000 80ea 	beq.w	800f102 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef32:	4a55      	ldr	r2, [pc, #340]	; (800f088 <UART_SetConfig+0xc28>)
 800ef34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef38:	461a      	mov	r2, r3
 800ef3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef40:	005a      	lsls	r2, r3, #1
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	685b      	ldr	r3, [r3, #4]
 800ef46:	085b      	lsrs	r3, r3, #1
 800ef48:	441a      	add	r2, r3
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef56:	2b0f      	cmp	r3, #15
 800ef58:	d916      	bls.n	800ef88 <UART_SetConfig+0xb28>
 800ef5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef60:	d212      	bcs.n	800ef88 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ef62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef64:	b29b      	uxth	r3, r3
 800ef66:	f023 030f 	bic.w	r3, r3, #15
 800ef6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ef6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef6e:	085b      	lsrs	r3, r3, #1
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	f003 0307 	and.w	r3, r3, #7
 800ef76:	b29a      	uxth	r2, r3
 800ef78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ef7a:	4313      	orrs	r3, r2
 800ef7c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ef84:	60da      	str	r2, [r3, #12]
 800ef86:	e0bc      	b.n	800f102 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ef88:	2301      	movs	r3, #1
 800ef8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ef8e:	e0b8      	b.n	800f102 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ef90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ef94:	2b20      	cmp	r3, #32
 800ef96:	dc4b      	bgt.n	800f030 <UART_SetConfig+0xbd0>
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	f2c0 8087 	blt.w	800f0ac <UART_SetConfig+0xc4c>
 800ef9e:	2b20      	cmp	r3, #32
 800efa0:	f200 8084 	bhi.w	800f0ac <UART_SetConfig+0xc4c>
 800efa4:	a201      	add	r2, pc, #4	; (adr r2, 800efac <UART_SetConfig+0xb4c>)
 800efa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efaa:	bf00      	nop
 800efac:	0800f037 	.word	0x0800f037
 800efb0:	0800f03f 	.word	0x0800f03f
 800efb4:	0800f0ad 	.word	0x0800f0ad
 800efb8:	0800f0ad 	.word	0x0800f0ad
 800efbc:	0800f047 	.word	0x0800f047
 800efc0:	0800f0ad 	.word	0x0800f0ad
 800efc4:	0800f0ad 	.word	0x0800f0ad
 800efc8:	0800f0ad 	.word	0x0800f0ad
 800efcc:	0800f057 	.word	0x0800f057
 800efd0:	0800f0ad 	.word	0x0800f0ad
 800efd4:	0800f0ad 	.word	0x0800f0ad
 800efd8:	0800f0ad 	.word	0x0800f0ad
 800efdc:	0800f0ad 	.word	0x0800f0ad
 800efe0:	0800f0ad 	.word	0x0800f0ad
 800efe4:	0800f0ad 	.word	0x0800f0ad
 800efe8:	0800f0ad 	.word	0x0800f0ad
 800efec:	0800f067 	.word	0x0800f067
 800eff0:	0800f0ad 	.word	0x0800f0ad
 800eff4:	0800f0ad 	.word	0x0800f0ad
 800eff8:	0800f0ad 	.word	0x0800f0ad
 800effc:	0800f0ad 	.word	0x0800f0ad
 800f000:	0800f0ad 	.word	0x0800f0ad
 800f004:	0800f0ad 	.word	0x0800f0ad
 800f008:	0800f0ad 	.word	0x0800f0ad
 800f00c:	0800f0ad 	.word	0x0800f0ad
 800f010:	0800f0ad 	.word	0x0800f0ad
 800f014:	0800f0ad 	.word	0x0800f0ad
 800f018:	0800f0ad 	.word	0x0800f0ad
 800f01c:	0800f0ad 	.word	0x0800f0ad
 800f020:	0800f0ad 	.word	0x0800f0ad
 800f024:	0800f0ad 	.word	0x0800f0ad
 800f028:	0800f0ad 	.word	0x0800f0ad
 800f02c:	0800f09f 	.word	0x0800f09f
 800f030:	2b40      	cmp	r3, #64	; 0x40
 800f032:	d037      	beq.n	800f0a4 <UART_SetConfig+0xc44>
 800f034:	e03a      	b.n	800f0ac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f036:	f7f8 f9c1 	bl	80073bc <HAL_RCC_GetPCLK1Freq>
 800f03a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f03c:	e03c      	b.n	800f0b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f03e:	f7f8 f9d3 	bl	80073e8 <HAL_RCC_GetPCLK2Freq>
 800f042:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f044:	e038      	b.n	800f0b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7f9 fd32 	bl	8008ab4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f054:	e030      	b.n	800f0b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f056:	f107 0318 	add.w	r3, r7, #24
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7f9 fe7e 	bl	8008d5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f064:	e028      	b.n	800f0b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f066:	4b09      	ldr	r3, [pc, #36]	; (800f08c <UART_SetConfig+0xc2c>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	f003 0320 	and.w	r3, r3, #32
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d012      	beq.n	800f098 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f072:	4b06      	ldr	r3, [pc, #24]	; (800f08c <UART_SetConfig+0xc2c>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	08db      	lsrs	r3, r3, #3
 800f078:	f003 0303 	and.w	r3, r3, #3
 800f07c:	4a04      	ldr	r2, [pc, #16]	; (800f090 <UART_SetConfig+0xc30>)
 800f07e:	fa22 f303 	lsr.w	r3, r2, r3
 800f082:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f084:	e018      	b.n	800f0b8 <UART_SetConfig+0xc58>
 800f086:	bf00      	nop
 800f088:	080128a8 	.word	0x080128a8
 800f08c:	58024400 	.word	0x58024400
 800f090:	03d09000 	.word	0x03d09000
 800f094:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f098:	4b24      	ldr	r3, [pc, #144]	; (800f12c <UART_SetConfig+0xccc>)
 800f09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f09c:	e00c      	b.n	800f0b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f09e:	4b24      	ldr	r3, [pc, #144]	; (800f130 <UART_SetConfig+0xcd0>)
 800f0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0a2:	e009      	b.n	800f0b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0aa:	e005      	b.n	800f0b8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f0b6:	bf00      	nop
    }

    if (pclk != 0U)
 800f0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d021      	beq.n	800f102 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c2:	4a1c      	ldr	r2, [pc, #112]	; (800f134 <UART_SetConfig+0xcd4>)
 800f0c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0cc:	fbb3 f2f2 	udiv	r2, r3, r2
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	085b      	lsrs	r3, r3, #1
 800f0d6:	441a      	add	r2, r3
 800f0d8:	697b      	ldr	r3, [r7, #20]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0e0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e4:	2b0f      	cmp	r3, #15
 800f0e6:	d909      	bls.n	800f0fc <UART_SetConfig+0xc9c>
 800f0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0ee:	d205      	bcs.n	800f0fc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f2:	b29a      	uxth	r2, r3
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	60da      	str	r2, [r3, #12]
 800f0fa:	e002      	b.n	800f102 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	2201      	movs	r2, #1
 800f106:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	2201      	movs	r2, #1
 800f10e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	2200      	movs	r2, #0
 800f116:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	2200      	movs	r2, #0
 800f11c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f11e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f122:	4618      	mov	r0, r3
 800f124:	3748      	adds	r7, #72	; 0x48
 800f126:	46bd      	mov	sp, r7
 800f128:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f12c:	03d09000 	.word	0x03d09000
 800f130:	003d0900 	.word	0x003d0900
 800f134:	080128a8 	.word	0x080128a8

0800f138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f144:	f003 0301 	and.w	r3, r3, #1
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d00a      	beq.n	800f162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	685b      	ldr	r3, [r3, #4]
 800f152:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	430a      	orrs	r2, r1
 800f160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f166:	f003 0302 	and.w	r3, r3, #2
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00a      	beq.n	800f184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	430a      	orrs	r2, r1
 800f182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f188:	f003 0304 	and.w	r3, r3, #4
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d00a      	beq.n	800f1a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	430a      	orrs	r2, r1
 800f1a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1aa:	f003 0308 	and.w	r3, r3, #8
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d00a      	beq.n	800f1c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	430a      	orrs	r2, r1
 800f1c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1cc:	f003 0310 	and.w	r3, r3, #16
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d00a      	beq.n	800f1ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	689b      	ldr	r3, [r3, #8]
 800f1da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	430a      	orrs	r2, r1
 800f1e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1ee:	f003 0320 	and.w	r3, r3, #32
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d00a      	beq.n	800f20c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	689b      	ldr	r3, [r3, #8]
 800f1fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	430a      	orrs	r2, r1
 800f20a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f214:	2b00      	cmp	r3, #0
 800f216:	d01a      	beq.n	800f24e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	430a      	orrs	r2, r1
 800f22c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f236:	d10a      	bne.n	800f24e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	430a      	orrs	r2, r1
 800f24c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f256:	2b00      	cmp	r3, #0
 800f258:	d00a      	beq.n	800f270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	430a      	orrs	r2, r1
 800f26e:	605a      	str	r2, [r3, #4]
  }
}
 800f270:	bf00      	nop
 800f272:	370c      	adds	r7, #12
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b086      	sub	sp, #24
 800f280:	af02      	add	r7, sp, #8
 800f282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2200      	movs	r2, #0
 800f288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f28c:	f7f3 fe9a 	bl	8002fc4 <HAL_GetTick>
 800f290:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f003 0308 	and.w	r3, r3, #8
 800f29c:	2b08      	cmp	r3, #8
 800f29e:	d10e      	bne.n	800f2be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f2a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f2a4:	9300      	str	r3, [sp, #0]
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f000 f82f 	bl	800f312 <UART_WaitOnFlagUntilTimeout>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d001      	beq.n	800f2be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f2ba:	2303      	movs	r3, #3
 800f2bc:	e025      	b.n	800f30a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f003 0304 	and.w	r3, r3, #4
 800f2c8:	2b04      	cmp	r3, #4
 800f2ca:	d10e      	bne.n	800f2ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f2cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f2d0:	9300      	str	r3, [sp, #0]
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 f819 	bl	800f312 <UART_WaitOnFlagUntilTimeout>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d001      	beq.n	800f2ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f2e6:	2303      	movs	r3, #3
 800f2e8:	e00f      	b.n	800f30a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2220      	movs	r2, #32
 800f2ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2220      	movs	r2, #32
 800f2f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2200      	movs	r2, #0
 800f304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f308:	2300      	movs	r3, #0
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3710      	adds	r7, #16
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}

0800f312 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f312:	b580      	push	{r7, lr}
 800f314:	b09c      	sub	sp, #112	; 0x70
 800f316:	af00      	add	r7, sp, #0
 800f318:	60f8      	str	r0, [r7, #12]
 800f31a:	60b9      	str	r1, [r7, #8]
 800f31c:	603b      	str	r3, [r7, #0]
 800f31e:	4613      	mov	r3, r2
 800f320:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f322:	e0a9      	b.n	800f478 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f32a:	f000 80a5 	beq.w	800f478 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f32e:	f7f3 fe49 	bl	8002fc4 <HAL_GetTick>
 800f332:	4602      	mov	r2, r0
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	1ad3      	subs	r3, r2, r3
 800f338:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d302      	bcc.n	800f344 <UART_WaitOnFlagUntilTimeout+0x32>
 800f33e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f340:	2b00      	cmp	r3, #0
 800f342:	d140      	bne.n	800f3c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f34a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f34c:	e853 3f00 	ldrex	r3, [r3]
 800f350:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f354:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f358:	667b      	str	r3, [r7, #100]	; 0x64
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	461a      	mov	r2, r3
 800f360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f362:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f364:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f366:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f368:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f36a:	e841 2300 	strex	r3, r2, [r1]
 800f36e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1e6      	bne.n	800f344 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	3308      	adds	r3, #8
 800f37c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f37e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f380:	e853 3f00 	ldrex	r3, [r3]
 800f384:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f388:	f023 0301 	bic.w	r3, r3, #1
 800f38c:	663b      	str	r3, [r7, #96]	; 0x60
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	3308      	adds	r3, #8
 800f394:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f396:	64ba      	str	r2, [r7, #72]	; 0x48
 800f398:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f39a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f39c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f39e:	e841 2300 	strex	r3, r2, [r1]
 800f3a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f3a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d1e5      	bne.n	800f376 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	2220      	movs	r2, #32
 800f3ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	2220      	movs	r2, #32
 800f3b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f3c2:	2303      	movs	r3, #3
 800f3c4:	e069      	b.n	800f49a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f003 0304 	and.w	r3, r3, #4
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d051      	beq.n	800f478 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	69db      	ldr	r3, [r3, #28]
 800f3da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f3de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f3e2:	d149      	bne.n	800f478 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f3ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f6:	e853 3f00 	ldrex	r3, [r3]
 800f3fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f402:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	461a      	mov	r2, r3
 800f40a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f40c:	637b      	str	r3, [r7, #52]	; 0x34
 800f40e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f410:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f414:	e841 2300 	strex	r3, r2, [r1]
 800f418:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d1e6      	bne.n	800f3ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	3308      	adds	r3, #8
 800f426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	e853 3f00 	ldrex	r3, [r3]
 800f42e:	613b      	str	r3, [r7, #16]
   return(result);
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	f023 0301 	bic.w	r3, r3, #1
 800f436:	66bb      	str	r3, [r7, #104]	; 0x68
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	3308      	adds	r3, #8
 800f43e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f440:	623a      	str	r2, [r7, #32]
 800f442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f444:	69f9      	ldr	r1, [r7, #28]
 800f446:	6a3a      	ldr	r2, [r7, #32]
 800f448:	e841 2300 	strex	r3, r2, [r1]
 800f44c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f44e:	69bb      	ldr	r3, [r7, #24]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d1e5      	bne.n	800f420 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2220      	movs	r2, #32
 800f458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2220      	movs	r2, #32
 800f460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	2220      	movs	r2, #32
 800f468:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	2200      	movs	r2, #0
 800f470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f474:	2303      	movs	r3, #3
 800f476:	e010      	b.n	800f49a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	69da      	ldr	r2, [r3, #28]
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	4013      	ands	r3, r2
 800f482:	68ba      	ldr	r2, [r7, #8]
 800f484:	429a      	cmp	r2, r3
 800f486:	bf0c      	ite	eq
 800f488:	2301      	moveq	r3, #1
 800f48a:	2300      	movne	r3, #0
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	461a      	mov	r2, r3
 800f490:	79fb      	ldrb	r3, [r7, #7]
 800f492:	429a      	cmp	r2, r3
 800f494:	f43f af46 	beq.w	800f324 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f498:	2300      	movs	r3, #0
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3770      	adds	r7, #112	; 0x70
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
	...

0800f4a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b0a3      	sub	sp, #140	; 0x8c
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	60f8      	str	r0, [r7, #12]
 800f4ac:	60b9      	str	r1, [r7, #8]
 800f4ae:	4613      	mov	r3, r2
 800f4b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	68ba      	ldr	r2, [r7, #8]
 800f4b6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	88fa      	ldrh	r2, [r7, #6]
 800f4bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	88fa      	ldrh	r2, [r7, #6]
 800f4c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	689b      	ldr	r3, [r3, #8]
 800f4d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4d6:	d10e      	bne.n	800f4f6 <UART_Start_Receive_IT+0x52>
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	691b      	ldr	r3, [r3, #16]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d105      	bne.n	800f4ec <UART_Start_Receive_IT+0x48>
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f4e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f4ea:	e02d      	b.n	800f548 <UART_Start_Receive_IT+0xa4>
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	22ff      	movs	r2, #255	; 0xff
 800f4f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f4f4:	e028      	b.n	800f548 <UART_Start_Receive_IT+0xa4>
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	689b      	ldr	r3, [r3, #8]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d10d      	bne.n	800f51a <UART_Start_Receive_IT+0x76>
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	691b      	ldr	r3, [r3, #16]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d104      	bne.n	800f510 <UART_Start_Receive_IT+0x6c>
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	22ff      	movs	r2, #255	; 0xff
 800f50a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f50e:	e01b      	b.n	800f548 <UART_Start_Receive_IT+0xa4>
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	227f      	movs	r2, #127	; 0x7f
 800f514:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f518:	e016      	b.n	800f548 <UART_Start_Receive_IT+0xa4>
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	689b      	ldr	r3, [r3, #8]
 800f51e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f522:	d10d      	bne.n	800f540 <UART_Start_Receive_IT+0x9c>
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	691b      	ldr	r3, [r3, #16]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d104      	bne.n	800f536 <UART_Start_Receive_IT+0x92>
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	227f      	movs	r2, #127	; 0x7f
 800f530:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f534:	e008      	b.n	800f548 <UART_Start_Receive_IT+0xa4>
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	223f      	movs	r2, #63	; 0x3f
 800f53a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f53e:	e003      	b.n	800f548 <UART_Start_Receive_IT+0xa4>
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	2200      	movs	r2, #0
 800f544:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2200      	movs	r2, #0
 800f54c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2222      	movs	r2, #34	; 0x22
 800f554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	3308      	adds	r3, #8
 800f55e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f562:	e853 3f00 	ldrex	r3, [r3]
 800f566:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f56a:	f043 0301 	orr.w	r3, r3, #1
 800f56e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	3308      	adds	r3, #8
 800f578:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f57c:	673a      	str	r2, [r7, #112]	; 0x70
 800f57e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f580:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f582:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f584:	e841 2300 	strex	r3, r2, [r1]
 800f588:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f58a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d1e3      	bne.n	800f558 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f598:	d153      	bne.n	800f642 <UART_Start_Receive_IT+0x19e>
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f5a0:	88fa      	ldrh	r2, [r7, #6]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d34d      	bcc.n	800f642 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	689b      	ldr	r3, [r3, #8]
 800f5aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5ae:	d107      	bne.n	800f5c0 <UART_Start_Receive_IT+0x11c>
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	691b      	ldr	r3, [r3, #16]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d103      	bne.n	800f5c0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	4a4b      	ldr	r2, [pc, #300]	; (800f6e8 <UART_Start_Receive_IT+0x244>)
 800f5bc:	671a      	str	r2, [r3, #112]	; 0x70
 800f5be:	e002      	b.n	800f5c6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	4a4a      	ldr	r2, [pc, #296]	; (800f6ec <UART_Start_Receive_IT+0x248>)
 800f5c4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	691b      	ldr	r3, [r3, #16]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d01a      	beq.n	800f60c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5de:	e853 3f00 	ldrex	r3, [r3]
 800f5e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f5e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f5ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f5f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f5fa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f5fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f600:	e841 2300 	strex	r3, r2, [r1]
 800f604:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d1e4      	bne.n	800f5d6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	3308      	adds	r3, #8
 800f612:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f616:	e853 3f00 	ldrex	r3, [r3]
 800f61a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f622:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	3308      	adds	r3, #8
 800f62a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f62c:	64ba      	str	r2, [r7, #72]	; 0x48
 800f62e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f630:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f634:	e841 2300 	strex	r3, r2, [r1]
 800f638:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d1e5      	bne.n	800f60c <UART_Start_Receive_IT+0x168>
 800f640:	e04a      	b.n	800f6d8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f64a:	d107      	bne.n	800f65c <UART_Start_Receive_IT+0x1b8>
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	691b      	ldr	r3, [r3, #16]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d103      	bne.n	800f65c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	4a26      	ldr	r2, [pc, #152]	; (800f6f0 <UART_Start_Receive_IT+0x24c>)
 800f658:	671a      	str	r2, [r3, #112]	; 0x70
 800f65a:	e002      	b.n	800f662 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	4a25      	ldr	r2, [pc, #148]	; (800f6f4 <UART_Start_Receive_IT+0x250>)
 800f660:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	2200      	movs	r2, #0
 800f666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	691b      	ldr	r3, [r3, #16]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d019      	beq.n	800f6a6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f67a:	e853 3f00 	ldrex	r3, [r3]
 800f67e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f682:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f686:	677b      	str	r3, [r7, #116]	; 0x74
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	461a      	mov	r2, r3
 800f68e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f690:	637b      	str	r3, [r7, #52]	; 0x34
 800f692:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f694:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f698:	e841 2300 	strex	r3, r2, [r1]
 800f69c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d1e6      	bne.n	800f672 <UART_Start_Receive_IT+0x1ce>
 800f6a4:	e018      	b.n	800f6d8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	e853 3f00 	ldrex	r3, [r3]
 800f6b2:	613b      	str	r3, [r7, #16]
   return(result);
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	f043 0320 	orr.w	r3, r3, #32
 800f6ba:	67bb      	str	r3, [r7, #120]	; 0x78
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6c4:	623b      	str	r3, [r7, #32]
 800f6c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c8:	69f9      	ldr	r1, [r7, #28]
 800f6ca:	6a3a      	ldr	r2, [r7, #32]
 800f6cc:	e841 2300 	strex	r3, r2, [r1]
 800f6d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f6d2:	69bb      	ldr	r3, [r7, #24]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d1e6      	bne.n	800f6a6 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800f6d8:	2300      	movs	r3, #0
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	378c      	adds	r7, #140	; 0x8c
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr
 800f6e6:	bf00      	nop
 800f6e8:	0800fe01 	.word	0x0800fe01
 800f6ec:	0800fb09 	.word	0x0800fb09
 800f6f0:	0800f9a7 	.word	0x0800f9a7
 800f6f4:	0800f847 	.word	0x0800f847

0800f6f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b095      	sub	sp, #84	; 0x54
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f708:	e853 3f00 	ldrex	r3, [r3]
 800f70c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f710:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f714:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	461a      	mov	r2, r3
 800f71c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f71e:	643b      	str	r3, [r7, #64]	; 0x40
 800f720:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f722:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f724:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f726:	e841 2300 	strex	r3, r2, [r1]
 800f72a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d1e6      	bne.n	800f700 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	3308      	adds	r3, #8
 800f738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f73a:	6a3b      	ldr	r3, [r7, #32]
 800f73c:	e853 3f00 	ldrex	r3, [r3]
 800f740:	61fb      	str	r3, [r7, #28]
   return(result);
 800f742:	69fa      	ldr	r2, [r7, #28]
 800f744:	4b1e      	ldr	r3, [pc, #120]	; (800f7c0 <UART_EndRxTransfer+0xc8>)
 800f746:	4013      	ands	r3, r2
 800f748:	64bb      	str	r3, [r7, #72]	; 0x48
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	3308      	adds	r3, #8
 800f750:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f752:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f754:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f756:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f75a:	e841 2300 	strex	r3, r2, [r1]
 800f75e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f762:	2b00      	cmp	r3, #0
 800f764:	d1e5      	bne.n	800f732 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d118      	bne.n	800f7a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	e853 3f00 	ldrex	r3, [r3]
 800f77a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	f023 0310 	bic.w	r3, r3, #16
 800f782:	647b      	str	r3, [r7, #68]	; 0x44
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	461a      	mov	r2, r3
 800f78a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f78c:	61bb      	str	r3, [r7, #24]
 800f78e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f790:	6979      	ldr	r1, [r7, #20]
 800f792:	69ba      	ldr	r2, [r7, #24]
 800f794:	e841 2300 	strex	r3, r2, [r1]
 800f798:	613b      	str	r3, [r7, #16]
   return(result);
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d1e6      	bne.n	800f76e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2220      	movs	r2, #32
 800f7a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f7b4:	bf00      	nop
 800f7b6:	3754      	adds	r7, #84	; 0x54
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr
 800f7c0:	effffffe 	.word	0xeffffffe

0800f7c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f7e2:	68f8      	ldr	r0, [r7, #12]
 800f7e4:	f7fe fe26 	bl	800e434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f7e8:	bf00      	nop
 800f7ea:	3710      	adds	r7, #16
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}

0800f7f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b088      	sub	sp, #32
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	e853 3f00 	ldrex	r3, [r3]
 800f804:	60bb      	str	r3, [r7, #8]
   return(result);
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f80c:	61fb      	str	r3, [r7, #28]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	461a      	mov	r2, r3
 800f814:	69fb      	ldr	r3, [r7, #28]
 800f816:	61bb      	str	r3, [r7, #24]
 800f818:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f81a:	6979      	ldr	r1, [r7, #20]
 800f81c:	69ba      	ldr	r2, [r7, #24]
 800f81e:	e841 2300 	strex	r3, r2, [r1]
 800f822:	613b      	str	r3, [r7, #16]
   return(result);
 800f824:	693b      	ldr	r3, [r7, #16]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d1e6      	bne.n	800f7f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2220      	movs	r2, #32
 800f82e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2200      	movs	r2, #0
 800f836:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f7fe fdf1 	bl	800e420 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f83e:	bf00      	nop
 800f840:	3720      	adds	r7, #32
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}

0800f846 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f846:	b580      	push	{r7, lr}
 800f848:	b096      	sub	sp, #88	; 0x58
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f854:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f85e:	2b22      	cmp	r3, #34	; 0x22
 800f860:	f040 8095 	bne.w	800f98e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f86a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f86e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f872:	b2d9      	uxtb	r1, r3
 800f874:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f878:	b2da      	uxtb	r2, r3
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f87e:	400a      	ands	r2, r1
 800f880:	b2d2      	uxtb	r2, r2
 800f882:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f888:	1c5a      	adds	r2, r3, #1
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f894:	b29b      	uxth	r3, r3
 800f896:	3b01      	subs	r3, #1
 800f898:	b29a      	uxth	r2, r3
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d178      	bne.n	800f99e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b4:	e853 3f00 	ldrex	r3, [r3]
 800f8b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f8c0:	653b      	str	r3, [r7, #80]	; 0x50
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8ca:	647b      	str	r3, [r7, #68]	; 0x44
 800f8cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8d2:	e841 2300 	strex	r3, r2, [r1]
 800f8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d1e6      	bne.n	800f8ac <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	3308      	adds	r3, #8
 800f8e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e8:	e853 3f00 	ldrex	r3, [r3]
 800f8ec:	623b      	str	r3, [r7, #32]
   return(result);
 800f8ee:	6a3b      	ldr	r3, [r7, #32]
 800f8f0:	f023 0301 	bic.w	r3, r3, #1
 800f8f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	3308      	adds	r3, #8
 800f8fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f8fe:	633a      	str	r2, [r7, #48]	; 0x30
 800f900:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f906:	e841 2300 	strex	r3, r2, [r1]
 800f90a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d1e5      	bne.n	800f8de <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2220      	movs	r2, #32
 800f916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2200      	movs	r2, #0
 800f91e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f924:	2b01      	cmp	r3, #1
 800f926:	d12e      	bne.n	800f986 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2200      	movs	r2, #0
 800f92c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	e853 3f00 	ldrex	r3, [r3]
 800f93a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f023 0310 	bic.w	r3, r3, #16
 800f942:	64bb      	str	r3, [r7, #72]	; 0x48
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	461a      	mov	r2, r3
 800f94a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f94c:	61fb      	str	r3, [r7, #28]
 800f94e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f950:	69b9      	ldr	r1, [r7, #24]
 800f952:	69fa      	ldr	r2, [r7, #28]
 800f954:	e841 2300 	strex	r3, r2, [r1]
 800f958:	617b      	str	r3, [r7, #20]
   return(result);
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d1e6      	bne.n	800f92e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	69db      	ldr	r3, [r3, #28]
 800f966:	f003 0310 	and.w	r3, r3, #16
 800f96a:	2b10      	cmp	r3, #16
 800f96c:	d103      	bne.n	800f976 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	2210      	movs	r2, #16
 800f974:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f97c:	4619      	mov	r1, r3
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f7fe fd62 	bl	800e448 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f984:	e00b      	b.n	800f99e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f7f1 ff12 	bl	80017b0 <HAL_UART_RxCpltCallback>
}
 800f98c:	e007      	b.n	800f99e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	699a      	ldr	r2, [r3, #24]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	f042 0208 	orr.w	r2, r2, #8
 800f99c:	619a      	str	r2, [r3, #24]
}
 800f99e:	bf00      	nop
 800f9a0:	3758      	adds	r7, #88	; 0x58
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b096      	sub	sp, #88	; 0x58
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9be:	2b22      	cmp	r3, #34	; 0x22
 800f9c0:	f040 8095 	bne.w	800faee <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ca:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9d2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f9d4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f9d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f9dc:	4013      	ands	r3, r2
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9e2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9e8:	1c9a      	adds	r2, r3, #2
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f9f4:	b29b      	uxth	r3, r3
 800f9f6:	3b01      	subs	r3, #1
 800f9f8:	b29a      	uxth	r2, r3
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa06:	b29b      	uxth	r3, r3
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d178      	bne.n	800fafe <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa14:	e853 3f00 	ldrex	r3, [r3]
 800fa18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fa20:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	461a      	mov	r2, r3
 800fa28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa2a:	643b      	str	r3, [r7, #64]	; 0x40
 800fa2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fa30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fa32:	e841 2300 	strex	r3, r2, [r1]
 800fa36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fa38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d1e6      	bne.n	800fa0c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	3308      	adds	r3, #8
 800fa44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa46:	6a3b      	ldr	r3, [r7, #32]
 800fa48:	e853 3f00 	ldrex	r3, [r3]
 800fa4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fa4e:	69fb      	ldr	r3, [r7, #28]
 800fa50:	f023 0301 	bic.w	r3, r3, #1
 800fa54:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	3308      	adds	r3, #8
 800fa5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fa60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fa64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa66:	e841 2300 	strex	r3, r2, [r1]
 800fa6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d1e5      	bne.n	800fa3e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2220      	movs	r2, #32
 800fa76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa84:	2b01      	cmp	r3, #1
 800fa86:	d12e      	bne.n	800fae6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	e853 3f00 	ldrex	r3, [r3]
 800fa9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	f023 0310 	bic.w	r3, r3, #16
 800faa2:	647b      	str	r3, [r7, #68]	; 0x44
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	461a      	mov	r2, r3
 800faaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faac:	61bb      	str	r3, [r7, #24]
 800faae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fab0:	6979      	ldr	r1, [r7, #20]
 800fab2:	69ba      	ldr	r2, [r7, #24]
 800fab4:	e841 2300 	strex	r3, r2, [r1]
 800fab8:	613b      	str	r3, [r7, #16]
   return(result);
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d1e6      	bne.n	800fa8e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	69db      	ldr	r3, [r3, #28]
 800fac6:	f003 0310 	and.w	r3, r3, #16
 800faca:	2b10      	cmp	r3, #16
 800facc:	d103      	bne.n	800fad6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	2210      	movs	r2, #16
 800fad4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fadc:	4619      	mov	r1, r3
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7fe fcb2 	bl	800e448 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fae4:	e00b      	b.n	800fafe <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f7f1 fe62 	bl	80017b0 <HAL_UART_RxCpltCallback>
}
 800faec:	e007      	b.n	800fafe <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	699a      	ldr	r2, [r3, #24]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f042 0208 	orr.w	r2, r2, #8
 800fafc:	619a      	str	r2, [r3, #24]
}
 800fafe:	bf00      	nop
 800fb00:	3758      	adds	r7, #88	; 0x58
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
	...

0800fb08 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b0a6      	sub	sp, #152	; 0x98
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb16:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	69db      	ldr	r3, [r3, #28]
 800fb20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	689b      	ldr	r3, [r3, #8]
 800fb34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb3e:	2b22      	cmp	r3, #34	; 0x22
 800fb40:	f040 814d 	bne.w	800fdde <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fb4a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fb4e:	e0f4      	b.n	800fd3a <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb56:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fb5a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800fb5e:	b2d9      	uxtb	r1, r3
 800fb60:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800fb64:	b2da      	uxtb	r2, r3
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb6a:	400a      	ands	r2, r1
 800fb6c:	b2d2      	uxtb	r2, r2
 800fb6e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb74:	1c5a      	adds	r2, r3, #1
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	3b01      	subs	r3, #1
 800fb84:	b29a      	uxth	r2, r3
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	69db      	ldr	r3, [r3, #28]
 800fb92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fb96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fb9a:	f003 0307 	and.w	r3, r3, #7
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d053      	beq.n	800fc4a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fba2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fba6:	f003 0301 	and.w	r3, r3, #1
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d011      	beq.n	800fbd2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800fbae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fbb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d00b      	beq.n	800fbd2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbc8:	f043 0201 	orr.w	r2, r3, #1
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fbd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fbd6:	f003 0302 	and.w	r3, r3, #2
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d011      	beq.n	800fc02 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800fbde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fbe2:	f003 0301 	and.w	r3, r3, #1
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d00b      	beq.n	800fc02 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	2202      	movs	r2, #2
 800fbf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbf8:	f043 0204 	orr.w	r2, r3, #4
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fc02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc06:	f003 0304 	and.w	r3, r3, #4
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d011      	beq.n	800fc32 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800fc0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fc12:	f003 0301 	and.w	r3, r3, #1
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d00b      	beq.n	800fc32 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	2204      	movs	r2, #4
 800fc20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc28:	f043 0202 	orr.w	r2, r3, #2
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d006      	beq.n	800fc4a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f7fe fbf9 	bl	800e434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2200      	movs	r2, #0
 800fc46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d171      	bne.n	800fd3a <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc5e:	e853 3f00 	ldrex	r3, [r3]
 800fc62:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800fc64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	461a      	mov	r2, r3
 800fc74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fc78:	66bb      	str	r3, [r7, #104]	; 0x68
 800fc7a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc7c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fc7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fc80:	e841 2300 	strex	r3, r2, [r1]
 800fc84:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fc86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d1e4      	bne.n	800fc56 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	3308      	adds	r3, #8
 800fc92:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc96:	e853 3f00 	ldrex	r3, [r3]
 800fc9a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fc9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc9e:	4b56      	ldr	r3, [pc, #344]	; (800fdf8 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800fca0:	4013      	ands	r3, r2
 800fca2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	3308      	adds	r3, #8
 800fcaa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fcac:	657a      	str	r2, [r7, #84]	; 0x54
 800fcae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcb0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fcb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fcb4:	e841 2300 	strex	r3, r2, [r1]
 800fcb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fcba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d1e5      	bne.n	800fc8c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2220      	movs	r2, #32
 800fcc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2200      	movs	r2, #0
 800fccc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcd2:	2b01      	cmp	r3, #1
 800fcd4:	d12e      	bne.n	800fd34 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2200      	movs	r2, #0
 800fcda:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fce4:	e853 3f00 	ldrex	r3, [r3]
 800fce8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcec:	f023 0310 	bic.w	r3, r3, #16
 800fcf0:	67bb      	str	r3, [r7, #120]	; 0x78
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fcfa:	643b      	str	r3, [r7, #64]	; 0x40
 800fcfc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fd02:	e841 2300 	strex	r3, r2, [r1]
 800fd06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d1e6      	bne.n	800fcdc <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	69db      	ldr	r3, [r3, #28]
 800fd14:	f003 0310 	and.w	r3, r3, #16
 800fd18:	2b10      	cmp	r3, #16
 800fd1a:	d103      	bne.n	800fd24 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	2210      	movs	r2, #16
 800fd22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f7fe fb8b 	bl	800e448 <HAL_UARTEx_RxEventCallback>
 800fd32:	e002      	b.n	800fd3a <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f7f1 fd3b 	bl	80017b0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fd3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d006      	beq.n	800fd50 <UART_RxISR_8BIT_FIFOEN+0x248>
 800fd42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fd46:	f003 0320 	and.w	r3, r3, #32
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	f47f af00 	bne.w	800fb50 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fd5a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d045      	beq.n	800fdee <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fd68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d23e      	bcs.n	800fdee <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	3308      	adds	r3, #8
 800fd76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd78:	6a3b      	ldr	r3, [r7, #32]
 800fd7a:	e853 3f00 	ldrex	r3, [r3]
 800fd7e:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd80:	69fb      	ldr	r3, [r7, #28]
 800fd82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fd86:	673b      	str	r3, [r7, #112]	; 0x70
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	3308      	adds	r3, #8
 800fd8e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fd90:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fd92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd98:	e841 2300 	strex	r3, r2, [r1]
 800fd9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d1e5      	bne.n	800fd70 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	4a15      	ldr	r2, [pc, #84]	; (800fdfc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800fda8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	e853 3f00 	ldrex	r3, [r3]
 800fdb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	f043 0320 	orr.w	r3, r3, #32
 800fdbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdc8:	61bb      	str	r3, [r7, #24]
 800fdca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdcc:	6979      	ldr	r1, [r7, #20]
 800fdce:	69ba      	ldr	r2, [r7, #24]
 800fdd0:	e841 2300 	strex	r3, r2, [r1]
 800fdd4:	613b      	str	r3, [r7, #16]
   return(result);
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d1e6      	bne.n	800fdaa <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fddc:	e007      	b.n	800fdee <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	699a      	ldr	r2, [r3, #24]
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f042 0208 	orr.w	r2, r2, #8
 800fdec:	619a      	str	r2, [r3, #24]
}
 800fdee:	bf00      	nop
 800fdf0:	3798      	adds	r7, #152	; 0x98
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
 800fdf6:	bf00      	nop
 800fdf8:	effffffe 	.word	0xeffffffe
 800fdfc:	0800f847 	.word	0x0800f847

0800fe00 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b0a8      	sub	sp, #160	; 0xa0
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fe0e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	69db      	ldr	r3, [r3, #28]
 800fe18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	689b      	ldr	r3, [r3, #8]
 800fe2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe36:	2b22      	cmp	r3, #34	; 0x22
 800fe38:	f040 8151 	bne.w	80100de <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fe42:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fe46:	e0f8      	b.n	801003a <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe4e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800fe5a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800fe5e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800fe62:	4013      	ands	r3, r2
 800fe64:	b29a      	uxth	r2, r3
 800fe66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fe6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe70:	1c9a      	adds	r2, r3, #2
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe7c:	b29b      	uxth	r3, r3
 800fe7e:	3b01      	subs	r3, #1
 800fe80:	b29a      	uxth	r2, r3
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	69db      	ldr	r3, [r3, #28]
 800fe8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fe92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fe96:	f003 0307 	and.w	r3, r3, #7
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d053      	beq.n	800ff46 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fe9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fea2:	f003 0301 	and.w	r3, r3, #1
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d011      	beq.n	800fece <UART_RxISR_16BIT_FIFOEN+0xce>
 800feaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800feae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d00b      	beq.n	800fece <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	2201      	movs	r2, #1
 800febc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fec4:	f043 0201 	orr.w	r2, r3, #1
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fece:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fed2:	f003 0302 	and.w	r3, r3, #2
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d011      	beq.n	800fefe <UART_RxISR_16BIT_FIFOEN+0xfe>
 800feda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fede:	f003 0301 	and.w	r3, r3, #1
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00b      	beq.n	800fefe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	2202      	movs	r2, #2
 800feec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fef4:	f043 0204 	orr.w	r2, r3, #4
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fefe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff02:	f003 0304 	and.w	r3, r3, #4
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d011      	beq.n	800ff2e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ff0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff0e:	f003 0301 	and.w	r3, r3, #1
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d00b      	beq.n	800ff2e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	2204      	movs	r2, #4
 800ff1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff24:	f043 0202 	orr.w	r2, r3, #2
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d006      	beq.n	800ff46 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f7fe fa7b 	bl	800e434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff4c:	b29b      	uxth	r3, r3
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d173      	bne.n	801003a <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff5a:	e853 3f00 	ldrex	r3, [r3]
 800ff5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ff60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	461a      	mov	r2, r3
 800ff70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff74:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ff76:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ff7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ff7c:	e841 2300 	strex	r3, r2, [r1]
 800ff80:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ff82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d1e4      	bne.n	800ff52 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	3308      	adds	r3, #8
 800ff8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff92:	e853 3f00 	ldrex	r3, [r3]
 800ff96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ff98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff9a:	4b57      	ldr	r3, [pc, #348]	; (80100f8 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800ff9c:	4013      	ands	r3, r2
 800ff9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	3308      	adds	r3, #8
 800ffa8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ffac:	65ba      	str	r2, [r7, #88]	; 0x58
 800ffae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ffb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ffb4:	e841 2300 	strex	r3, r2, [r1]
 800ffb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ffba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d1e3      	bne.n	800ff88 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2220      	movs	r2, #32
 800ffc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2200      	movs	r2, #0
 800ffcc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d12e      	bne.n	8010034 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe4:	e853 3f00 	ldrex	r3, [r3]
 800ffe8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ffea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffec:	f023 0310 	bic.w	r3, r3, #16
 800fff0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	461a      	mov	r2, r3
 800fff8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fffa:	647b      	str	r3, [r7, #68]	; 0x44
 800fffc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fffe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010002:	e841 2300 	strex	r3, r2, [r1]
 8010006:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801000a:	2b00      	cmp	r3, #0
 801000c:	d1e6      	bne.n	800ffdc <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	69db      	ldr	r3, [r3, #28]
 8010014:	f003 0310 	and.w	r3, r3, #16
 8010018:	2b10      	cmp	r3, #16
 801001a:	d103      	bne.n	8010024 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2210      	movs	r2, #16
 8010022:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801002a:	4619      	mov	r1, r3
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f7fe fa0b 	bl	800e448 <HAL_UARTEx_RxEventCallback>
 8010032:	e002      	b.n	801003a <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f7f1 fbbb 	bl	80017b0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801003a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801003e:	2b00      	cmp	r3, #0
 8010040:	d006      	beq.n	8010050 <UART_RxISR_16BIT_FIFOEN+0x250>
 8010042:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010046:	f003 0320 	and.w	r3, r3, #32
 801004a:	2b00      	cmp	r3, #0
 801004c:	f47f aefc 	bne.w	800fe48 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010056:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801005a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801005e:	2b00      	cmp	r3, #0
 8010060:	d045      	beq.n	80100ee <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010068:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801006c:	429a      	cmp	r2, r3
 801006e:	d23e      	bcs.n	80100ee <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	3308      	adds	r3, #8
 8010076:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007a:	e853 3f00 	ldrex	r3, [r3]
 801007e:	623b      	str	r3, [r7, #32]
   return(result);
 8010080:	6a3b      	ldr	r3, [r7, #32]
 8010082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010086:	677b      	str	r3, [r7, #116]	; 0x74
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	3308      	adds	r3, #8
 801008e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010090:	633a      	str	r2, [r7, #48]	; 0x30
 8010092:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010094:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010098:	e841 2300 	strex	r3, r2, [r1]
 801009c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801009e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d1e5      	bne.n	8010070 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	4a15      	ldr	r2, [pc, #84]	; (80100fc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80100a8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	e853 3f00 	ldrex	r3, [r3]
 80100b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	f043 0320 	orr.w	r3, r3, #32
 80100be:	673b      	str	r3, [r7, #112]	; 0x70
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	461a      	mov	r2, r3
 80100c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80100c8:	61fb      	str	r3, [r7, #28]
 80100ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100cc:	69b9      	ldr	r1, [r7, #24]
 80100ce:	69fa      	ldr	r2, [r7, #28]
 80100d0:	e841 2300 	strex	r3, r2, [r1]
 80100d4:	617b      	str	r3, [r7, #20]
   return(result);
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d1e6      	bne.n	80100aa <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80100dc:	e007      	b.n	80100ee <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	699a      	ldr	r2, [r3, #24]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f042 0208 	orr.w	r2, r2, #8
 80100ec:	619a      	str	r2, [r3, #24]
}
 80100ee:	bf00      	nop
 80100f0:	37a0      	adds	r7, #160	; 0xa0
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	effffffe 	.word	0xeffffffe
 80100fc:	0800f9a7 	.word	0x0800f9a7

08010100 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010100:	b480      	push	{r7}
 8010102:	b083      	sub	sp, #12
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010108:	bf00      	nop
 801010a:	370c      	adds	r7, #12
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr

08010114 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010114:	b480      	push	{r7}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801011c:	bf00      	nop
 801011e:	370c      	adds	r7, #12
 8010120:	46bd      	mov	sp, r7
 8010122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010126:	4770      	bx	lr

08010128 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010128:	b480      	push	{r7}
 801012a:	b083      	sub	sp, #12
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010130:	bf00      	nop
 8010132:	370c      	adds	r7, #12
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr

0801013c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801013c:	b480      	push	{r7}
 801013e:	b085      	sub	sp, #20
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801014a:	2b01      	cmp	r3, #1
 801014c:	d101      	bne.n	8010152 <HAL_UARTEx_DisableFifoMode+0x16>
 801014e:	2302      	movs	r3, #2
 8010150:	e027      	b.n	80101a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2201      	movs	r2, #1
 8010156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2224      	movs	r2, #36	; 0x24
 801015e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	681a      	ldr	r2, [r3, #0]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f022 0201 	bic.w	r2, r2, #1
 8010178:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010180:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2200      	movs	r2, #0
 8010186:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	68fa      	ldr	r2, [r7, #12]
 801018e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2220      	movs	r2, #32
 8010194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2200      	movs	r2, #0
 801019c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80101a0:	2300      	movs	r3, #0
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3714      	adds	r7, #20
 80101a6:	46bd      	mov	sp, r7
 80101a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ac:	4770      	bx	lr

080101ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b084      	sub	sp, #16
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
 80101b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80101be:	2b01      	cmp	r3, #1
 80101c0:	d101      	bne.n	80101c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80101c2:	2302      	movs	r3, #2
 80101c4:	e02d      	b.n	8010222 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2201      	movs	r2, #1
 80101ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2224      	movs	r2, #36	; 0x24
 80101d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	f022 0201 	bic.w	r2, r2, #1
 80101ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	689b      	ldr	r3, [r3, #8]
 80101f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	683a      	ldr	r2, [r7, #0]
 80101fe:	430a      	orrs	r2, r1
 8010200:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f000 f850 	bl	80102a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	68fa      	ldr	r2, [r7, #12]
 801020e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2220      	movs	r2, #32
 8010214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2200      	movs	r2, #0
 801021c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010220:	2300      	movs	r3, #0
}
 8010222:	4618      	mov	r0, r3
 8010224:	3710      	adds	r7, #16
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}

0801022a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801022a:	b580      	push	{r7, lr}
 801022c:	b084      	sub	sp, #16
 801022e:	af00      	add	r7, sp, #0
 8010230:	6078      	str	r0, [r7, #4]
 8010232:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801023a:	2b01      	cmp	r3, #1
 801023c:	d101      	bne.n	8010242 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801023e:	2302      	movs	r3, #2
 8010240:	e02d      	b.n	801029e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2201      	movs	r2, #1
 8010246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2224      	movs	r2, #36	; 0x24
 801024e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f022 0201 	bic.w	r2, r2, #1
 8010268:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	689b      	ldr	r3, [r3, #8]
 8010270:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	683a      	ldr	r2, [r7, #0]
 801027a:	430a      	orrs	r2, r1
 801027c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f000 f812 	bl	80102a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	68fa      	ldr	r2, [r7, #12]
 801028a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2220      	movs	r2, #32
 8010290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2200      	movs	r2, #0
 8010298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801029c:	2300      	movs	r3, #0
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3710      	adds	r7, #16
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
	...

080102a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b085      	sub	sp, #20
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d108      	bne.n	80102ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2201      	movs	r2, #1
 80102bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2201      	movs	r2, #1
 80102c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80102c8:	e031      	b.n	801032e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80102ca:	2310      	movs	r3, #16
 80102cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80102ce:	2310      	movs	r3, #16
 80102d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	689b      	ldr	r3, [r3, #8]
 80102d8:	0e5b      	lsrs	r3, r3, #25
 80102da:	b2db      	uxtb	r3, r3
 80102dc:	f003 0307 	and.w	r3, r3, #7
 80102e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	689b      	ldr	r3, [r3, #8]
 80102e8:	0f5b      	lsrs	r3, r3, #29
 80102ea:	b2db      	uxtb	r3, r3
 80102ec:	f003 0307 	and.w	r3, r3, #7
 80102f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80102f2:	7bbb      	ldrb	r3, [r7, #14]
 80102f4:	7b3a      	ldrb	r2, [r7, #12]
 80102f6:	4911      	ldr	r1, [pc, #68]	; (801033c <UARTEx_SetNbDataToProcess+0x94>)
 80102f8:	5c8a      	ldrb	r2, [r1, r2]
 80102fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80102fe:	7b3a      	ldrb	r2, [r7, #12]
 8010300:	490f      	ldr	r1, [pc, #60]	; (8010340 <UARTEx_SetNbDataToProcess+0x98>)
 8010302:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010304:	fb93 f3f2 	sdiv	r3, r3, r2
 8010308:	b29a      	uxth	r2, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010310:	7bfb      	ldrb	r3, [r7, #15]
 8010312:	7b7a      	ldrb	r2, [r7, #13]
 8010314:	4909      	ldr	r1, [pc, #36]	; (801033c <UARTEx_SetNbDataToProcess+0x94>)
 8010316:	5c8a      	ldrb	r2, [r1, r2]
 8010318:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801031c:	7b7a      	ldrb	r2, [r7, #13]
 801031e:	4908      	ldr	r1, [pc, #32]	; (8010340 <UARTEx_SetNbDataToProcess+0x98>)
 8010320:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010322:	fb93 f3f2 	sdiv	r3, r3, r2
 8010326:	b29a      	uxth	r2, r3
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801032e:	bf00      	nop
 8010330:	3714      	adds	r7, #20
 8010332:	46bd      	mov	sp, r7
 8010334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010338:	4770      	bx	lr
 801033a:	bf00      	nop
 801033c:	080128c0 	.word	0x080128c0
 8010340:	080128c8 	.word	0x080128c8

08010344 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d121      	bne.n	801039a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681a      	ldr	r2, [r3, #0]
 801035a:	4b27      	ldr	r3, [pc, #156]	; (80103f8 <FMC_SDRAM_Init+0xb4>)
 801035c:	4013      	ands	r3, r2
 801035e:	683a      	ldr	r2, [r7, #0]
 8010360:	6851      	ldr	r1, [r2, #4]
 8010362:	683a      	ldr	r2, [r7, #0]
 8010364:	6892      	ldr	r2, [r2, #8]
 8010366:	4311      	orrs	r1, r2
 8010368:	683a      	ldr	r2, [r7, #0]
 801036a:	68d2      	ldr	r2, [r2, #12]
 801036c:	4311      	orrs	r1, r2
 801036e:	683a      	ldr	r2, [r7, #0]
 8010370:	6912      	ldr	r2, [r2, #16]
 8010372:	4311      	orrs	r1, r2
 8010374:	683a      	ldr	r2, [r7, #0]
 8010376:	6952      	ldr	r2, [r2, #20]
 8010378:	4311      	orrs	r1, r2
 801037a:	683a      	ldr	r2, [r7, #0]
 801037c:	6992      	ldr	r2, [r2, #24]
 801037e:	4311      	orrs	r1, r2
 8010380:	683a      	ldr	r2, [r7, #0]
 8010382:	69d2      	ldr	r2, [r2, #28]
 8010384:	4311      	orrs	r1, r2
 8010386:	683a      	ldr	r2, [r7, #0]
 8010388:	6a12      	ldr	r2, [r2, #32]
 801038a:	4311      	orrs	r1, r2
 801038c:	683a      	ldr	r2, [r7, #0]
 801038e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010390:	430a      	orrs	r2, r1
 8010392:	431a      	orrs	r2, r3
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	601a      	str	r2, [r3, #0]
 8010398:	e026      	b.n	80103e8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	69d9      	ldr	r1, [r3, #28]
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	6a1b      	ldr	r3, [r3, #32]
 80103aa:	4319      	orrs	r1, r3
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b0:	430b      	orrs	r3, r1
 80103b2:	431a      	orrs	r2, r3
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	685a      	ldr	r2, [r3, #4]
 80103bc:	4b0e      	ldr	r3, [pc, #56]	; (80103f8 <FMC_SDRAM_Init+0xb4>)
 80103be:	4013      	ands	r3, r2
 80103c0:	683a      	ldr	r2, [r7, #0]
 80103c2:	6851      	ldr	r1, [r2, #4]
 80103c4:	683a      	ldr	r2, [r7, #0]
 80103c6:	6892      	ldr	r2, [r2, #8]
 80103c8:	4311      	orrs	r1, r2
 80103ca:	683a      	ldr	r2, [r7, #0]
 80103cc:	68d2      	ldr	r2, [r2, #12]
 80103ce:	4311      	orrs	r1, r2
 80103d0:	683a      	ldr	r2, [r7, #0]
 80103d2:	6912      	ldr	r2, [r2, #16]
 80103d4:	4311      	orrs	r1, r2
 80103d6:	683a      	ldr	r2, [r7, #0]
 80103d8:	6952      	ldr	r2, [r2, #20]
 80103da:	4311      	orrs	r1, r2
 80103dc:	683a      	ldr	r2, [r7, #0]
 80103de:	6992      	ldr	r2, [r2, #24]
 80103e0:	430a      	orrs	r2, r1
 80103e2:	431a      	orrs	r2, r3
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80103e8:	2300      	movs	r3, #0
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	370c      	adds	r7, #12
 80103ee:	46bd      	mov	sp, r7
 80103f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f4:	4770      	bx	lr
 80103f6:	bf00      	nop
 80103f8:	ffff8000 	.word	0xffff8000

080103fc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80103fc:	b480      	push	{r7}
 80103fe:	b085      	sub	sp, #20
 8010400:	af00      	add	r7, sp, #0
 8010402:	60f8      	str	r0, [r7, #12]
 8010404:	60b9      	str	r1, [r7, #8]
 8010406:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d128      	bne.n	8010460 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	689b      	ldr	r3, [r3, #8]
 8010412:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	1e59      	subs	r1, r3, #1
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	685b      	ldr	r3, [r3, #4]
 8010420:	3b01      	subs	r3, #1
 8010422:	011b      	lsls	r3, r3, #4
 8010424:	4319      	orrs	r1, r3
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	689b      	ldr	r3, [r3, #8]
 801042a:	3b01      	subs	r3, #1
 801042c:	021b      	lsls	r3, r3, #8
 801042e:	4319      	orrs	r1, r3
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	68db      	ldr	r3, [r3, #12]
 8010434:	3b01      	subs	r3, #1
 8010436:	031b      	lsls	r3, r3, #12
 8010438:	4319      	orrs	r1, r3
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	691b      	ldr	r3, [r3, #16]
 801043e:	3b01      	subs	r3, #1
 8010440:	041b      	lsls	r3, r3, #16
 8010442:	4319      	orrs	r1, r3
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	695b      	ldr	r3, [r3, #20]
 8010448:	3b01      	subs	r3, #1
 801044a:	051b      	lsls	r3, r3, #20
 801044c:	4319      	orrs	r1, r3
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	699b      	ldr	r3, [r3, #24]
 8010452:	3b01      	subs	r3, #1
 8010454:	061b      	lsls	r3, r3, #24
 8010456:	430b      	orrs	r3, r1
 8010458:	431a      	orrs	r2, r3
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	609a      	str	r2, [r3, #8]
 801045e:	e02d      	b.n	80104bc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	689a      	ldr	r2, [r3, #8]
 8010464:	4b19      	ldr	r3, [pc, #100]	; (80104cc <FMC_SDRAM_Timing_Init+0xd0>)
 8010466:	4013      	ands	r3, r2
 8010468:	68ba      	ldr	r2, [r7, #8]
 801046a:	68d2      	ldr	r2, [r2, #12]
 801046c:	3a01      	subs	r2, #1
 801046e:	0311      	lsls	r1, r2, #12
 8010470:	68ba      	ldr	r2, [r7, #8]
 8010472:	6952      	ldr	r2, [r2, #20]
 8010474:	3a01      	subs	r2, #1
 8010476:	0512      	lsls	r2, r2, #20
 8010478:	430a      	orrs	r2, r1
 801047a:	431a      	orrs	r2, r3
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	68db      	ldr	r3, [r3, #12]
 8010484:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	1e59      	subs	r1, r3, #1
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	3b01      	subs	r3, #1
 8010494:	011b      	lsls	r3, r3, #4
 8010496:	4319      	orrs	r1, r3
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	689b      	ldr	r3, [r3, #8]
 801049c:	3b01      	subs	r3, #1
 801049e:	021b      	lsls	r3, r3, #8
 80104a0:	4319      	orrs	r1, r3
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	691b      	ldr	r3, [r3, #16]
 80104a6:	3b01      	subs	r3, #1
 80104a8:	041b      	lsls	r3, r3, #16
 80104aa:	4319      	orrs	r1, r3
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	699b      	ldr	r3, [r3, #24]
 80104b0:	3b01      	subs	r3, #1
 80104b2:	061b      	lsls	r3, r3, #24
 80104b4:	430b      	orrs	r3, r1
 80104b6:	431a      	orrs	r2, r3
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80104bc:	2300      	movs	r3, #0
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3714      	adds	r7, #20
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr
 80104ca:	bf00      	nop
 80104cc:	ff0f0fff 	.word	0xff0f0fff

080104d0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80104d0:	b480      	push	{r7}
 80104d2:	b085      	sub	sp, #20
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	691a      	ldr	r2, [r3, #16]
 80104e0:	4b0c      	ldr	r3, [pc, #48]	; (8010514 <FMC_SDRAM_SendCommand+0x44>)
 80104e2:	4013      	ands	r3, r2
 80104e4:	68ba      	ldr	r2, [r7, #8]
 80104e6:	6811      	ldr	r1, [r2, #0]
 80104e8:	68ba      	ldr	r2, [r7, #8]
 80104ea:	6852      	ldr	r2, [r2, #4]
 80104ec:	4311      	orrs	r1, r2
 80104ee:	68ba      	ldr	r2, [r7, #8]
 80104f0:	6892      	ldr	r2, [r2, #8]
 80104f2:	3a01      	subs	r2, #1
 80104f4:	0152      	lsls	r2, r2, #5
 80104f6:	4311      	orrs	r1, r2
 80104f8:	68ba      	ldr	r2, [r7, #8]
 80104fa:	68d2      	ldr	r2, [r2, #12]
 80104fc:	0252      	lsls	r2, r2, #9
 80104fe:	430a      	orrs	r2, r1
 8010500:	431a      	orrs	r2, r3
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8010506:	2300      	movs	r3, #0
}
 8010508:	4618      	mov	r0, r3
 801050a:	3714      	adds	r7, #20
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr
 8010514:	ffc00000 	.word	0xffc00000

08010518 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8010518:	b480      	push	{r7}
 801051a:	b083      	sub	sp, #12
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	695a      	ldr	r2, [r3, #20]
 8010526:	4b07      	ldr	r3, [pc, #28]	; (8010544 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8010528:	4013      	ands	r3, r2
 801052a:	683a      	ldr	r2, [r7, #0]
 801052c:	0052      	lsls	r2, r2, #1
 801052e:	431a      	orrs	r2, r3
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8010534:	2300      	movs	r3, #0
}
 8010536:	4618      	mov	r0, r3
 8010538:	370c      	adds	r7, #12
 801053a:	46bd      	mov	sp, r7
 801053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010540:	4770      	bx	lr
 8010542:	bf00      	nop
 8010544:	ffffc001 	.word	0xffffc001

08010548 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010548:	b084      	sub	sp, #16
 801054a:	b480      	push	{r7}
 801054c:	b085      	sub	sp, #20
 801054e:	af00      	add	r7, sp, #0
 8010550:	6078      	str	r0, [r7, #4]
 8010552:	f107 001c 	add.w	r0, r7, #28
 8010556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801055a:	2300      	movs	r3, #0
 801055c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801055e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8010560:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8010562:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8010566:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8010568:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801056a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801056c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801056e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8010570:	68fa      	ldr	r2, [r7, #12]
 8010572:	4313      	orrs	r3, r2
 8010574:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	685a      	ldr	r2, [r3, #4]
 801057a:	4b07      	ldr	r3, [pc, #28]	; (8010598 <SDMMC_Init+0x50>)
 801057c:	4013      	ands	r3, r2
 801057e:	68fa      	ldr	r2, [r7, #12]
 8010580:	431a      	orrs	r2, r3
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010586:	2300      	movs	r3, #0
}
 8010588:	4618      	mov	r0, r3
 801058a:	3714      	adds	r7, #20
 801058c:	46bd      	mov	sp, r7
 801058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010592:	b004      	add	sp, #16
 8010594:	4770      	bx	lr
 8010596:	bf00      	nop
 8010598:	ffc02c00 	.word	0xffc02c00

0801059c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801059c:	b480      	push	{r7}
 801059e:	b083      	sub	sp, #12
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	370c      	adds	r7, #12
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr

080105b6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80105b6:	b480      	push	{r7}
 80105b8:	b083      	sub	sp, #12
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	6078      	str	r0, [r7, #4]
 80105be:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	681a      	ldr	r2, [r3, #0]
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80105ca:	2300      	movs	r3, #0
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	370c      	adds	r7, #12
 80105d0:	46bd      	mov	sp, r7
 80105d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d6:	4770      	bx	lr

080105d8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80105d8:	b480      	push	{r7}
 80105da:	b083      	sub	sp, #12
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f043 0203 	orr.w	r2, r3, #3
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80105ec:	2300      	movs	r3, #0
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	370c      	adds	r7, #12
 80105f2:	46bd      	mov	sp, r7
 80105f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f8:	4770      	bx	lr

080105fa <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80105fa:	b480      	push	{r7}
 80105fc:	b083      	sub	sp, #12
 80105fe:	af00      	add	r7, sp, #0
 8010600:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f003 0303 	and.w	r3, r3, #3
}
 801060a:	4618      	mov	r0, r3
 801060c:	370c      	adds	r7, #12
 801060e:	46bd      	mov	sp, r7
 8010610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010614:	4770      	bx	lr
	...

08010618 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010618:	b480      	push	{r7}
 801061a:	b085      	sub	sp, #20
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010622:	2300      	movs	r3, #0
 8010624:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	681a      	ldr	r2, [r3, #0]
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010636:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 801063c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010642:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010644:	68fa      	ldr	r2, [r7, #12]
 8010646:	4313      	orrs	r3, r2
 8010648:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	68da      	ldr	r2, [r3, #12]
 801064e:	4b06      	ldr	r3, [pc, #24]	; (8010668 <SDMMC_SendCommand+0x50>)
 8010650:	4013      	ands	r3, r2
 8010652:	68fa      	ldr	r2, [r7, #12]
 8010654:	431a      	orrs	r2, r3
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801065a:	2300      	movs	r3, #0
}
 801065c:	4618      	mov	r0, r3
 801065e:	3714      	adds	r7, #20
 8010660:	46bd      	mov	sp, r7
 8010662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010666:	4770      	bx	lr
 8010668:	fffee0c0 	.word	0xfffee0c0

0801066c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801066c:	b480      	push	{r7}
 801066e:	b083      	sub	sp, #12
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	691b      	ldr	r3, [r3, #16]
 8010678:	b2db      	uxtb	r3, r3
}
 801067a:	4618      	mov	r0, r3
 801067c:	370c      	adds	r7, #12
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr

08010686 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010686:	b480      	push	{r7}
 8010688:	b085      	sub	sp, #20
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
 801068e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	3314      	adds	r3, #20
 8010694:	461a      	mov	r2, r3
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	4413      	add	r3, r2
 801069a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	681b      	ldr	r3, [r3, #0]
}
 80106a0:	4618      	mov	r0, r3
 80106a2:	3714      	adds	r7, #20
 80106a4:	46bd      	mov	sp, r7
 80106a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106aa:	4770      	bx	lr

080106ac <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80106ac:	b480      	push	{r7}
 80106ae:	b085      	sub	sp, #20
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80106b6:	2300      	movs	r3, #0
 80106b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	681a      	ldr	r2, [r3, #0]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	685a      	ldr	r2, [r3, #4]
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80106d2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80106d8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80106de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80106e0:	68fa      	ldr	r2, [r7, #12]
 80106e2:	4313      	orrs	r3, r2
 80106e4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	431a      	orrs	r2, r3
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80106f6:	2300      	movs	r3, #0

}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3714      	adds	r7, #20
 80106fc:	46bd      	mov	sp, r7
 80106fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010702:	4770      	bx	lr

08010704 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b088      	sub	sp, #32
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010712:	2310      	movs	r3, #16
 8010714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010716:	f44f 7380 	mov.w	r3, #256	; 0x100
 801071a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801071c:	2300      	movs	r3, #0
 801071e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010724:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010726:	f107 0308 	add.w	r3, r7, #8
 801072a:	4619      	mov	r1, r3
 801072c:	6878      	ldr	r0, [r7, #4]
 801072e:	f7ff ff73 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010732:	f241 3288 	movw	r2, #5000	; 0x1388
 8010736:	2110      	movs	r1, #16
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f000 fa5f 	bl	8010bfc <SDMMC_GetCmdResp1>
 801073e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010740:	69fb      	ldr	r3, [r7, #28]
}
 8010742:	4618      	mov	r0, r3
 8010744:	3720      	adds	r7, #32
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}

0801074a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801074a:	b580      	push	{r7, lr}
 801074c:	b088      	sub	sp, #32
 801074e:	af00      	add	r7, sp, #0
 8010750:	6078      	str	r0, [r7, #4]
 8010752:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010758:	2311      	movs	r3, #17
 801075a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801075c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010760:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010762:	2300      	movs	r3, #0
 8010764:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801076a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801076c:	f107 0308 	add.w	r3, r7, #8
 8010770:	4619      	mov	r1, r3
 8010772:	6878      	ldr	r0, [r7, #4]
 8010774:	f7ff ff50 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010778:	f241 3288 	movw	r2, #5000	; 0x1388
 801077c:	2111      	movs	r1, #17
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f000 fa3c 	bl	8010bfc <SDMMC_GetCmdResp1>
 8010784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010786:	69fb      	ldr	r3, [r7, #28]
}
 8010788:	4618      	mov	r0, r3
 801078a:	3720      	adds	r7, #32
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b088      	sub	sp, #32
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801079e:	2312      	movs	r3, #18
 80107a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107a8:	2300      	movs	r3, #0
 80107aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107b2:	f107 0308 	add.w	r3, r7, #8
 80107b6:	4619      	mov	r1, r3
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f7ff ff2d 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80107be:	f241 3288 	movw	r2, #5000	; 0x1388
 80107c2:	2112      	movs	r1, #18
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f000 fa19 	bl	8010bfc <SDMMC_GetCmdResp1>
 80107ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107cc:	69fb      	ldr	r3, [r7, #28]
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3720      	adds	r7, #32
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}

080107d6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80107d6:	b580      	push	{r7, lr}
 80107d8:	b088      	sub	sp, #32
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
 80107de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80107e4:	2318      	movs	r3, #24
 80107e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107ee:	2300      	movs	r3, #0
 80107f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107f8:	f107 0308 	add.w	r3, r7, #8
 80107fc:	4619      	mov	r1, r3
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f7ff ff0a 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010804:	f241 3288 	movw	r2, #5000	; 0x1388
 8010808:	2118      	movs	r1, #24
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f000 f9f6 	bl	8010bfc <SDMMC_GetCmdResp1>
 8010810:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010812:	69fb      	ldr	r3, [r7, #28]
}
 8010814:	4618      	mov	r0, r3
 8010816:	3720      	adds	r7, #32
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}

0801081c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b088      	sub	sp, #32
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801082a:	2319      	movs	r3, #25
 801082c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801082e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010832:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010834:	2300      	movs	r3, #0
 8010836:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801083c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801083e:	f107 0308 	add.w	r3, r7, #8
 8010842:	4619      	mov	r1, r3
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	f7ff fee7 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801084a:	f241 3288 	movw	r2, #5000	; 0x1388
 801084e:	2119      	movs	r1, #25
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f000 f9d3 	bl	8010bfc <SDMMC_GetCmdResp1>
 8010856:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010858:	69fb      	ldr	r3, [r7, #28]
}
 801085a:	4618      	mov	r0, r3
 801085c:	3720      	adds	r7, #32
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
	...

08010864 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b088      	sub	sp, #32
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801086c:	2300      	movs	r3, #0
 801086e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010870:	230c      	movs	r3, #12
 8010872:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801087a:	2300      	movs	r3, #0
 801087c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010882:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	68db      	ldr	r3, [r3, #12]
 8010888:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	68db      	ldr	r3, [r3, #12]
 8010894:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801089c:	f107 0308 	add.w	r3, r7, #8
 80108a0:	4619      	mov	r1, r3
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f7ff feb8 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80108a8:	4a0b      	ldr	r2, [pc, #44]	; (80108d8 <SDMMC_CmdStopTransfer+0x74>)
 80108aa:	210c      	movs	r1, #12
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f000 f9a5 	bl	8010bfc <SDMMC_GetCmdResp1>
 80108b2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	68db      	ldr	r3, [r3, #12]
 80108b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80108c0:	69fb      	ldr	r3, [r7, #28]
 80108c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80108c6:	d101      	bne.n	80108cc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80108c8:	2300      	movs	r3, #0
 80108ca:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80108cc:	69fb      	ldr	r3, [r7, #28]
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3720      	adds	r7, #32
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}
 80108d6:	bf00      	nop
 80108d8:	05f5e100 	.word	0x05f5e100

080108dc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b088      	sub	sp, #32
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80108ea:	2307      	movs	r3, #7
 80108ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80108ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80108f4:	2300      	movs	r3, #0
 80108f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108fe:	f107 0308 	add.w	r3, r7, #8
 8010902:	4619      	mov	r1, r3
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f7ff fe87 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801090a:	f241 3288 	movw	r2, #5000	; 0x1388
 801090e:	2107      	movs	r1, #7
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f000 f973 	bl	8010bfc <SDMMC_GetCmdResp1>
 8010916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010918:	69fb      	ldr	r3, [r7, #28]
}
 801091a:	4618      	mov	r0, r3
 801091c:	3720      	adds	r7, #32
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}

08010922 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010922:	b580      	push	{r7, lr}
 8010924:	b088      	sub	sp, #32
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801092a:	2300      	movs	r3, #0
 801092c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801092e:	2300      	movs	r3, #0
 8010930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010932:	2300      	movs	r3, #0
 8010934:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010936:	2300      	movs	r3, #0
 8010938:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801093a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801093e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010940:	f107 0308 	add.w	r3, r7, #8
 8010944:	4619      	mov	r1, r3
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f7ff fe66 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f000 fb97 	bl	8011080 <SDMMC_GetCmdError>
 8010952:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010954:	69fb      	ldr	r3, [r7, #28]
}
 8010956:	4618      	mov	r0, r3
 8010958:	3720      	adds	r7, #32
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}

0801095e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801095e:	b580      	push	{r7, lr}
 8010960:	b088      	sub	sp, #32
 8010962:	af00      	add	r7, sp, #0
 8010964:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010966:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801096a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801096c:	2308      	movs	r3, #8
 801096e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010974:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010976:	2300      	movs	r3, #0
 8010978:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801097a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801097e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010980:	f107 0308 	add.w	r3, r7, #8
 8010984:	4619      	mov	r1, r3
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f7ff fe46 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f000 fb29 	bl	8010fe4 <SDMMC_GetCmdResp7>
 8010992:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010994:	69fb      	ldr	r3, [r7, #28]
}
 8010996:	4618      	mov	r0, r3
 8010998:	3720      	adds	r7, #32
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}

0801099e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801099e:	b580      	push	{r7, lr}
 80109a0:	b088      	sub	sp, #32
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	6078      	str	r0, [r7, #4]
 80109a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80109ac:	2337      	movs	r3, #55	; 0x37
 80109ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80109b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109b6:	2300      	movs	r3, #0
 80109b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109c0:	f107 0308 	add.w	r3, r7, #8
 80109c4:	4619      	mov	r1, r3
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f7ff fe26 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80109cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80109d0:	2137      	movs	r1, #55	; 0x37
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f000 f912 	bl	8010bfc <SDMMC_GetCmdResp1>
 80109d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109da:	69fb      	ldr	r3, [r7, #28]
}
 80109dc:	4618      	mov	r0, r3
 80109de:	3720      	adds	r7, #32
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}

080109e4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b088      	sub	sp, #32
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80109f2:	2329      	movs	r3, #41	; 0x29
 80109f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80109fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109fc:	2300      	movs	r3, #0
 80109fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a06:	f107 0308 	add.w	r3, r7, #8
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f7ff fe03 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f000 fa2e 	bl	8010e74 <SDMMC_GetCmdResp3>
 8010a18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a1a:	69fb      	ldr	r3, [r7, #28]
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3720      	adds	r7, #32
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}

08010a24 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b088      	sub	sp, #32
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010a32:	2306      	movs	r3, #6
 8010a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a46:	f107 0308 	add.w	r3, r7, #8
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f7ff fde3 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a56:	2106      	movs	r1, #6
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f000 f8cf 	bl	8010bfc <SDMMC_GetCmdResp1>
 8010a5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a60:	69fb      	ldr	r3, [r7, #28]
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	3720      	adds	r7, #32
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}

08010a6a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010a6a:	b580      	push	{r7, lr}
 8010a6c:	b088      	sub	sp, #32
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010a72:	2300      	movs	r3, #0
 8010a74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010a76:	2333      	movs	r3, #51	; 0x33
 8010a78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a80:	2300      	movs	r3, #0
 8010a82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a8a:	f107 0308 	add.w	r3, r7, #8
 8010a8e:	4619      	mov	r1, r3
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f7ff fdc1 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a9a:	2133      	movs	r1, #51	; 0x33
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f000 f8ad 	bl	8010bfc <SDMMC_GetCmdResp1>
 8010aa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aa4:	69fb      	ldr	r3, [r7, #28]
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3720      	adds	r7, #32
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}

08010aae <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010aae:	b580      	push	{r7, lr}
 8010ab0:	b088      	sub	sp, #32
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010aba:	2302      	movs	r3, #2
 8010abc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010abe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010ac2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010acc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ace:	f107 0308 	add.w	r3, r7, #8
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f7ff fd9f 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f000 f980 	bl	8010de0 <SDMMC_GetCmdResp2>
 8010ae0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ae2:	69fb      	ldr	r3, [r7, #28]
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3720      	adds	r7, #32
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}

08010aec <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b088      	sub	sp, #32
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010afa:	2309      	movs	r3, #9
 8010afc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010afe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010b02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b04:	2300      	movs	r3, #0
 8010b06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b0e:	f107 0308 	add.w	r3, r7, #8
 8010b12:	4619      	mov	r1, r3
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f7ff fd7f 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f000 f960 	bl	8010de0 <SDMMC_GetCmdResp2>
 8010b20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b22:	69fb      	ldr	r3, [r7, #28]
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	3720      	adds	r7, #32
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}

08010b2c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b088      	sub	sp, #32
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
 8010b34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010b36:	2300      	movs	r3, #0
 8010b38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010b3a:	2303      	movs	r3, #3
 8010b3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b44:	2300      	movs	r3, #0
 8010b46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b4e:	f107 0308 	add.w	r3, r7, #8
 8010b52:	4619      	mov	r1, r3
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f7ff fd5f 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010b5a:	683a      	ldr	r2, [r7, #0]
 8010b5c:	2103      	movs	r1, #3
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f000 f9c8 	bl	8010ef4 <SDMMC_GetCmdResp6>
 8010b64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b66:	69fb      	ldr	r3, [r7, #28]
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3720      	adds	r7, #32
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b088      	sub	sp, #32
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010b7e:	230d      	movs	r3, #13
 8010b80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b92:	f107 0308 	add.w	r3, r7, #8
 8010b96:	4619      	mov	r1, r3
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f7ff fd3d 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ba2:	210d      	movs	r1, #13
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f000 f829 	bl	8010bfc <SDMMC_GetCmdResp1>
 8010baa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bac:	69fb      	ldr	r3, [r7, #28]
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3720      	adds	r7, #32
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}

08010bb6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010bb6:	b580      	push	{r7, lr}
 8010bb8:	b088      	sub	sp, #32
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010bc2:	230d      	movs	r3, #13
 8010bc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010bca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bd6:	f107 0308 	add.w	r3, r7, #8
 8010bda:	4619      	mov	r1, r3
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f7ff fd1b 	bl	8010618 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8010be6:	210d      	movs	r1, #13
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f000 f807 	bl	8010bfc <SDMMC_GetCmdResp1>
 8010bee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bf0:	69fb      	ldr	r3, [r7, #28]
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3720      	adds	r7, #32
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}
	...

08010bfc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b088      	sub	sp, #32
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	60f8      	str	r0, [r7, #12]
 8010c04:	460b      	mov	r3, r1
 8010c06:	607a      	str	r2, [r7, #4]
 8010c08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010c0a:	4b70      	ldr	r3, [pc, #448]	; (8010dcc <SDMMC_GetCmdResp1+0x1d0>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	4a70      	ldr	r2, [pc, #448]	; (8010dd0 <SDMMC_GetCmdResp1+0x1d4>)
 8010c10:	fba2 2303 	umull	r2, r3, r2, r3
 8010c14:	0a5a      	lsrs	r2, r3, #9
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	fb02 f303 	mul.w	r3, r2, r3
 8010c1c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010c1e:	69fb      	ldr	r3, [r7, #28]
 8010c20:	1e5a      	subs	r2, r3, #1
 8010c22:	61fa      	str	r2, [r7, #28]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d102      	bne.n	8010c2e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c2c:	e0c9      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c32:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010c34:	69ba      	ldr	r2, [r7, #24]
 8010c36:	4b67      	ldr	r3, [pc, #412]	; (8010dd4 <SDMMC_GetCmdResp1+0x1d8>)
 8010c38:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d0ef      	beq.n	8010c1e <SDMMC_GetCmdResp1+0x22>
 8010c3e:	69bb      	ldr	r3, [r7, #24]
 8010c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d1ea      	bne.n	8010c1e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c4c:	f003 0304 	and.w	r3, r3, #4
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d004      	beq.n	8010c5e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	2204      	movs	r2, #4
 8010c58:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c5a:	2304      	movs	r3, #4
 8010c5c:	e0b1      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c62:	f003 0301 	and.w	r3, r3, #1
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d004      	beq.n	8010c74 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	2201      	movs	r2, #1
 8010c6e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c70:	2301      	movs	r3, #1
 8010c72:	e0a6      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	4a58      	ldr	r2, [pc, #352]	; (8010dd8 <SDMMC_GetCmdResp1+0x1dc>)
 8010c78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010c7a:	68f8      	ldr	r0, [r7, #12]
 8010c7c:	f7ff fcf6 	bl	801066c <SDMMC_GetCommandResponse>
 8010c80:	4603      	mov	r3, r0
 8010c82:	461a      	mov	r2, r3
 8010c84:	7afb      	ldrb	r3, [r7, #11]
 8010c86:	4293      	cmp	r3, r2
 8010c88:	d001      	beq.n	8010c8e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	e099      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010c8e:	2100      	movs	r1, #0
 8010c90:	68f8      	ldr	r0, [r7, #12]
 8010c92:	f7ff fcf8 	bl	8010686 <SDMMC_GetResponse>
 8010c96:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010c98:	697a      	ldr	r2, [r7, #20]
 8010c9a:	4b50      	ldr	r3, [pc, #320]	; (8010ddc <SDMMC_GetCmdResp1+0x1e0>)
 8010c9c:	4013      	ands	r3, r2
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d101      	bne.n	8010ca6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	e08d      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	da02      	bge.n	8010cb2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010cac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010cb0:	e087      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d001      	beq.n	8010cc0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010cbc:	2340      	movs	r3, #64	; 0x40
 8010cbe:	e080      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d001      	beq.n	8010cce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010cca:	2380      	movs	r3, #128	; 0x80
 8010ccc:	e079      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d002      	beq.n	8010cde <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010cdc:	e071      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d002      	beq.n	8010cee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010cec:	e069      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d002      	beq.n	8010cfe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cfc:	e061      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d002      	beq.n	8010d0e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010d08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010d0c:	e059      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d002      	beq.n	8010d1e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d1c:	e051      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d002      	beq.n	8010d2e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010d2c:	e049      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010d2e:	697b      	ldr	r3, [r7, #20]
 8010d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d002      	beq.n	8010d3e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010d38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010d3c:	e041      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d002      	beq.n	8010d4e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010d48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d4c:	e039      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d002      	beq.n	8010d5e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010d5c:	e031      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d002      	beq.n	8010d6e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010d68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010d6c:	e029      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d002      	beq.n	8010d7e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010d78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010d7c:	e021      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d002      	beq.n	8010d8e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010d88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010d8c:	e019      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d002      	beq.n	8010d9e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010d98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010d9c:	e011      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d002      	beq.n	8010dae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010da8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010dac:	e009      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	f003 0308 	and.w	r3, r3, #8
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d002      	beq.n	8010dbe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010db8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010dbc:	e001      	b.n	8010dc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010dbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3720      	adds	r7, #32
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	24000008 	.word	0x24000008
 8010dd0:	10624dd3 	.word	0x10624dd3
 8010dd4:	00200045 	.word	0x00200045
 8010dd8:	002000c5 	.word	0x002000c5
 8010ddc:	fdffe008 	.word	0xfdffe008

08010de0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010de0:	b480      	push	{r7}
 8010de2:	b085      	sub	sp, #20
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010de8:	4b1f      	ldr	r3, [pc, #124]	; (8010e68 <SDMMC_GetCmdResp2+0x88>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	4a1f      	ldr	r2, [pc, #124]	; (8010e6c <SDMMC_GetCmdResp2+0x8c>)
 8010dee:	fba2 2303 	umull	r2, r3, r2, r3
 8010df2:	0a5b      	lsrs	r3, r3, #9
 8010df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010df8:	fb02 f303 	mul.w	r3, r2, r3
 8010dfc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	1e5a      	subs	r2, r3, #1
 8010e02:	60fa      	str	r2, [r7, #12]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d102      	bne.n	8010e0e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e0c:	e026      	b.n	8010e5c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e12:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d0ef      	beq.n	8010dfe <SDMMC_GetCmdResp2+0x1e>
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d1ea      	bne.n	8010dfe <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e2c:	f003 0304 	and.w	r3, r3, #4
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d004      	beq.n	8010e3e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2204      	movs	r2, #4
 8010e38:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e3a:	2304      	movs	r3, #4
 8010e3c:	e00e      	b.n	8010e5c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e42:	f003 0301 	and.w	r3, r3, #1
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d004      	beq.n	8010e54 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2201      	movs	r2, #1
 8010e4e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e50:	2301      	movs	r3, #1
 8010e52:	e003      	b.n	8010e5c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	4a06      	ldr	r2, [pc, #24]	; (8010e70 <SDMMC_GetCmdResp2+0x90>)
 8010e58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010e5a:	2300      	movs	r3, #0
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3714      	adds	r7, #20
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr
 8010e68:	24000008 	.word	0x24000008
 8010e6c:	10624dd3 	.word	0x10624dd3
 8010e70:	002000c5 	.word	0x002000c5

08010e74 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010e74:	b480      	push	{r7}
 8010e76:	b085      	sub	sp, #20
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010e7c:	4b1a      	ldr	r3, [pc, #104]	; (8010ee8 <SDMMC_GetCmdResp3+0x74>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	4a1a      	ldr	r2, [pc, #104]	; (8010eec <SDMMC_GetCmdResp3+0x78>)
 8010e82:	fba2 2303 	umull	r2, r3, r2, r3
 8010e86:	0a5b      	lsrs	r3, r3, #9
 8010e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e8c:	fb02 f303 	mul.w	r3, r2, r3
 8010e90:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	1e5a      	subs	r2, r3, #1
 8010e96:	60fa      	str	r2, [r7, #12]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d102      	bne.n	8010ea2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ea0:	e01b      	b.n	8010eda <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ea6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d0ef      	beq.n	8010e92 <SDMMC_GetCmdResp3+0x1e>
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d1ea      	bne.n	8010e92 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ec0:	f003 0304 	and.w	r3, r3, #4
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d004      	beq.n	8010ed2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2204      	movs	r2, #4
 8010ecc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ece:	2304      	movs	r3, #4
 8010ed0:	e003      	b.n	8010eda <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	4a06      	ldr	r2, [pc, #24]	; (8010ef0 <SDMMC_GetCmdResp3+0x7c>)
 8010ed6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010ed8:	2300      	movs	r3, #0
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	3714      	adds	r7, #20
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee4:	4770      	bx	lr
 8010ee6:	bf00      	nop
 8010ee8:	24000008 	.word	0x24000008
 8010eec:	10624dd3 	.word	0x10624dd3
 8010ef0:	002000c5 	.word	0x002000c5

08010ef4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b088      	sub	sp, #32
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	460b      	mov	r3, r1
 8010efe:	607a      	str	r2, [r7, #4]
 8010f00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010f02:	4b35      	ldr	r3, [pc, #212]	; (8010fd8 <SDMMC_GetCmdResp6+0xe4>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	4a35      	ldr	r2, [pc, #212]	; (8010fdc <SDMMC_GetCmdResp6+0xe8>)
 8010f08:	fba2 2303 	umull	r2, r3, r2, r3
 8010f0c:	0a5b      	lsrs	r3, r3, #9
 8010f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f12:	fb02 f303 	mul.w	r3, r2, r3
 8010f16:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010f18:	69fb      	ldr	r3, [r7, #28]
 8010f1a:	1e5a      	subs	r2, r3, #1
 8010f1c:	61fa      	str	r2, [r7, #28]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d102      	bne.n	8010f28 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f26:	e052      	b.n	8010fce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f2c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f2e:	69bb      	ldr	r3, [r7, #24]
 8010f30:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d0ef      	beq.n	8010f18 <SDMMC_GetCmdResp6+0x24>
 8010f38:	69bb      	ldr	r3, [r7, #24]
 8010f3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d1ea      	bne.n	8010f18 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f46:	f003 0304 	and.w	r3, r3, #4
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d004      	beq.n	8010f58 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2204      	movs	r2, #4
 8010f52:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f54:	2304      	movs	r3, #4
 8010f56:	e03a      	b.n	8010fce <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f5c:	f003 0301 	and.w	r3, r3, #1
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d004      	beq.n	8010f6e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	2201      	movs	r2, #1
 8010f68:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	e02f      	b.n	8010fce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010f6e:	68f8      	ldr	r0, [r7, #12]
 8010f70:	f7ff fb7c 	bl	801066c <SDMMC_GetCommandResponse>
 8010f74:	4603      	mov	r3, r0
 8010f76:	461a      	mov	r2, r3
 8010f78:	7afb      	ldrb	r3, [r7, #11]
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d001      	beq.n	8010f82 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f7e:	2301      	movs	r3, #1
 8010f80:	e025      	b.n	8010fce <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	4a16      	ldr	r2, [pc, #88]	; (8010fe0 <SDMMC_GetCmdResp6+0xec>)
 8010f86:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010f88:	2100      	movs	r1, #0
 8010f8a:	68f8      	ldr	r0, [r7, #12]
 8010f8c:	f7ff fb7b 	bl	8010686 <SDMMC_GetResponse>
 8010f90:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d106      	bne.n	8010faa <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	0c1b      	lsrs	r3, r3, #16
 8010fa0:	b29a      	uxth	r2, r3
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	e011      	b.n	8010fce <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d002      	beq.n	8010fba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010fb8:	e009      	b.n	8010fce <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d002      	beq.n	8010fca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010fc8:	e001      	b.n	8010fce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3720      	adds	r7, #32
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
 8010fd6:	bf00      	nop
 8010fd8:	24000008 	.word	0x24000008
 8010fdc:	10624dd3 	.word	0x10624dd3
 8010fe0:	002000c5 	.word	0x002000c5

08010fe4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b085      	sub	sp, #20
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010fec:	4b22      	ldr	r3, [pc, #136]	; (8011078 <SDMMC_GetCmdResp7+0x94>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	4a22      	ldr	r2, [pc, #136]	; (801107c <SDMMC_GetCmdResp7+0x98>)
 8010ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8010ff6:	0a5b      	lsrs	r3, r3, #9
 8010ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ffc:	fb02 f303 	mul.w	r3, r2, r3
 8011000:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	1e5a      	subs	r2, r3, #1
 8011006:	60fa      	str	r2, [r7, #12]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d102      	bne.n	8011012 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801100c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011010:	e02c      	b.n	801106c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011016:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801101e:	2b00      	cmp	r3, #0
 8011020:	d0ef      	beq.n	8011002 <SDMMC_GetCmdResp7+0x1e>
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011028:	2b00      	cmp	r3, #0
 801102a:	d1ea      	bne.n	8011002 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011030:	f003 0304 	and.w	r3, r3, #4
 8011034:	2b00      	cmp	r3, #0
 8011036:	d004      	beq.n	8011042 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2204      	movs	r2, #4
 801103c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801103e:	2304      	movs	r3, #4
 8011040:	e014      	b.n	801106c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011046:	f003 0301 	and.w	r3, r3, #1
 801104a:	2b00      	cmp	r3, #0
 801104c:	d004      	beq.n	8011058 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2201      	movs	r2, #1
 8011052:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011054:	2301      	movs	r3, #1
 8011056:	e009      	b.n	801106c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801105c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011060:	2b00      	cmp	r3, #0
 8011062:	d002      	beq.n	801106a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2240      	movs	r2, #64	; 0x40
 8011068:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801106a:	2300      	movs	r3, #0

}
 801106c:	4618      	mov	r0, r3
 801106e:	3714      	adds	r7, #20
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr
 8011078:	24000008 	.word	0x24000008
 801107c:	10624dd3 	.word	0x10624dd3

08011080 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011080:	b480      	push	{r7}
 8011082:	b085      	sub	sp, #20
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011088:	4b11      	ldr	r3, [pc, #68]	; (80110d0 <SDMMC_GetCmdError+0x50>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	4a11      	ldr	r2, [pc, #68]	; (80110d4 <SDMMC_GetCmdError+0x54>)
 801108e:	fba2 2303 	umull	r2, r3, r2, r3
 8011092:	0a5b      	lsrs	r3, r3, #9
 8011094:	f241 3288 	movw	r2, #5000	; 0x1388
 8011098:	fb02 f303 	mul.w	r3, r2, r3
 801109c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	1e5a      	subs	r2, r3, #1
 80110a2:	60fa      	str	r2, [r7, #12]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d102      	bne.n	80110ae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80110ac:	e009      	b.n	80110c2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d0f1      	beq.n	801109e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	4a06      	ldr	r2, [pc, #24]	; (80110d8 <SDMMC_GetCmdError+0x58>)
 80110be:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80110c0:	2300      	movs	r3, #0
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3714      	adds	r7, #20
 80110c6:	46bd      	mov	sp, r7
 80110c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110cc:	4770      	bx	lr
 80110ce:	bf00      	nop
 80110d0:	24000008 	.word	0x24000008
 80110d4:	10624dd3 	.word	0x10624dd3
 80110d8:	002000c5 	.word	0x002000c5

080110dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80110e0:	4904      	ldr	r1, [pc, #16]	; (80110f4 <MX_FATFS_Init+0x18>)
 80110e2:	4805      	ldr	r0, [pc, #20]	; (80110f8 <MX_FATFS_Init+0x1c>)
 80110e4:	f000 fef0 	bl	8011ec8 <FATFS_LinkDriver>
 80110e8:	4603      	mov	r3, r0
 80110ea:	461a      	mov	r2, r3
 80110ec:	4b03      	ldr	r3, [pc, #12]	; (80110fc <MX_FATFS_Init+0x20>)
 80110ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80110f0:	bf00      	nop
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	240087e8 	.word	0x240087e8
 80110f8:	080128d0 	.word	0x080128d0
 80110fc:	240087e4 	.word	0x240087e4

08011100 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b082      	sub	sp, #8
 8011104:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011106:	2300      	movs	r3, #0
 8011108:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801110a:	f000 f885 	bl	8011218 <BSP_SD_IsDetected>
 801110e:	4603      	mov	r3, r0
 8011110:	2b01      	cmp	r3, #1
 8011112:	d001      	beq.n	8011118 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011114:	2302      	movs	r3, #2
 8011116:	e012      	b.n	801113e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011118:	480b      	ldr	r0, [pc, #44]	; (8011148 <BSP_SD_Init+0x48>)
 801111a:	f7f8 fa29 	bl	8009570 <HAL_SD_Init>
 801111e:	4603      	mov	r3, r0
 8011120:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011122:	79fb      	ldrb	r3, [r7, #7]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d109      	bne.n	801113c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011128:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801112c:	4806      	ldr	r0, [pc, #24]	; (8011148 <BSP_SD_Init+0x48>)
 801112e:	f7f9 f8d9 	bl	800a2e4 <HAL_SD_ConfigWideBusOperation>
 8011132:	4603      	mov	r3, r0
 8011134:	2b00      	cmp	r3, #0
 8011136:	d001      	beq.n	801113c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011138:	2301      	movs	r3, #1
 801113a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801113c:	79fb      	ldrb	r3, [r7, #7]
}
 801113e:	4618      	mov	r0, r3
 8011140:	3708      	adds	r7, #8
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	240080a0 	.word	0x240080a0

0801114c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b086      	sub	sp, #24
 8011150:	af00      	add	r7, sp, #0
 8011152:	60f8      	str	r0, [r7, #12]
 8011154:	60b9      	str	r1, [r7, #8]
 8011156:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011158:	2300      	movs	r3, #0
 801115a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	68ba      	ldr	r2, [r7, #8]
 8011160:	68f9      	ldr	r1, [r7, #12]
 8011162:	4806      	ldr	r0, [pc, #24]	; (801117c <BSP_SD_ReadBlocks_DMA+0x30>)
 8011164:	f7f8 fb1e 	bl	80097a4 <HAL_SD_ReadBlocks_DMA>
 8011168:	4603      	mov	r3, r0
 801116a:	2b00      	cmp	r3, #0
 801116c:	d001      	beq.n	8011172 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801116e:	2301      	movs	r3, #1
 8011170:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011172:	7dfb      	ldrb	r3, [r7, #23]
}
 8011174:	4618      	mov	r0, r3
 8011176:	3718      	adds	r7, #24
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}
 801117c:	240080a0 	.word	0x240080a0

08011180 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b086      	sub	sp, #24
 8011184:	af00      	add	r7, sp, #0
 8011186:	60f8      	str	r0, [r7, #12]
 8011188:	60b9      	str	r1, [r7, #8]
 801118a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801118c:	2300      	movs	r3, #0
 801118e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	68ba      	ldr	r2, [r7, #8]
 8011194:	68f9      	ldr	r1, [r7, #12]
 8011196:	4806      	ldr	r0, [pc, #24]	; (80111b0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8011198:	f7f8 fbac 	bl	80098f4 <HAL_SD_WriteBlocks_DMA>
 801119c:	4603      	mov	r3, r0
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d001      	beq.n	80111a6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80111a2:	2301      	movs	r3, #1
 80111a4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80111a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	3718      	adds	r7, #24
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}
 80111b0:	240080a0 	.word	0x240080a0

080111b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80111b8:	4805      	ldr	r0, [pc, #20]	; (80111d0 <BSP_SD_GetCardState+0x1c>)
 80111ba:	f7f9 f9a5 	bl	800a508 <HAL_SD_GetCardState>
 80111be:	4603      	mov	r3, r0
 80111c0:	2b04      	cmp	r3, #4
 80111c2:	bf14      	ite	ne
 80111c4:	2301      	movne	r3, #1
 80111c6:	2300      	moveq	r3, #0
 80111c8:	b2db      	uxtb	r3, r3
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	bd80      	pop	{r7, pc}
 80111ce:	bf00      	nop
 80111d0:	240080a0 	.word	0x240080a0

080111d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80111dc:	6879      	ldr	r1, [r7, #4]
 80111de:	4803      	ldr	r0, [pc, #12]	; (80111ec <BSP_SD_GetCardInfo+0x18>)
 80111e0:	f7f9 f854 	bl	800a28c <HAL_SD_GetCardInfo>
}
 80111e4:	bf00      	nop
 80111e6:	3708      	adds	r7, #8
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}
 80111ec:	240080a0 	.word	0x240080a0

080111f0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80111f8:	f000 f984 	bl	8011504 <BSP_SD_WriteCpltCallback>
}
 80111fc:	bf00      	nop
 80111fe:	3708      	adds	r7, #8
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801120c:	f000 f986 	bl	801151c <BSP_SD_ReadCpltCallback>
}
 8011210:	bf00      	nop
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011218:	b480      	push	{r7}
 801121a:	b083      	sub	sp, #12
 801121c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801121e:	2301      	movs	r3, #1
 8011220:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8011222:	79fb      	ldrb	r3, [r7, #7]
 8011224:	b2db      	uxtb	r3, r3
}
 8011226:	4618      	mov	r0, r3
 8011228:	370c      	adds	r7, #12
 801122a:	46bd      	mov	sp, r7
 801122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011230:	4770      	bx	lr

08011232 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011232:	b580      	push	{r7, lr}
 8011234:	b084      	sub	sp, #16
 8011236:	af00      	add	r7, sp, #0
 8011238:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801123a:	f7f1 fec3 	bl	8002fc4 <HAL_GetTick>
 801123e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011240:	e006      	b.n	8011250 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011242:	f7ff ffb7 	bl	80111b4 <BSP_SD_GetCardState>
 8011246:	4603      	mov	r3, r0
 8011248:	2b00      	cmp	r3, #0
 801124a:	d101      	bne.n	8011250 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801124c:	2300      	movs	r3, #0
 801124e:	e009      	b.n	8011264 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011250:	f7f1 feb8 	bl	8002fc4 <HAL_GetTick>
 8011254:	4602      	mov	r2, r0
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	1ad3      	subs	r3, r2, r3
 801125a:	687a      	ldr	r2, [r7, #4]
 801125c:	429a      	cmp	r2, r3
 801125e:	d8f0      	bhi.n	8011242 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011264:	4618      	mov	r0, r3
 8011266:	3710      	adds	r7, #16
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}

0801126c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
 8011272:	4603      	mov	r3, r0
 8011274:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011276:	4b0b      	ldr	r3, [pc, #44]	; (80112a4 <SD_CheckStatus+0x38>)
 8011278:	2201      	movs	r2, #1
 801127a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801127c:	f7ff ff9a 	bl	80111b4 <BSP_SD_GetCardState>
 8011280:	4603      	mov	r3, r0
 8011282:	2b00      	cmp	r3, #0
 8011284:	d107      	bne.n	8011296 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011286:	4b07      	ldr	r3, [pc, #28]	; (80112a4 <SD_CheckStatus+0x38>)
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	b2db      	uxtb	r3, r3
 801128c:	f023 0301 	bic.w	r3, r3, #1
 8011290:	b2da      	uxtb	r2, r3
 8011292:	4b04      	ldr	r3, [pc, #16]	; (80112a4 <SD_CheckStatus+0x38>)
 8011294:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011296:	4b03      	ldr	r3, [pc, #12]	; (80112a4 <SD_CheckStatus+0x38>)
 8011298:	781b      	ldrb	r3, [r3, #0]
 801129a:	b2db      	uxtb	r3, r3
}
 801129c:	4618      	mov	r0, r3
 801129e:	3708      	adds	r7, #8
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}
 80112a4:	24000015 	.word	0x24000015

080112a8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	4603      	mov	r3, r0
 80112b0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80112b2:	f7ff ff25 	bl	8011100 <BSP_SD_Init>
 80112b6:	4603      	mov	r3, r0
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d107      	bne.n	80112cc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80112bc:	79fb      	ldrb	r3, [r7, #7]
 80112be:	4618      	mov	r0, r3
 80112c0:	f7ff ffd4 	bl	801126c <SD_CheckStatus>
 80112c4:	4603      	mov	r3, r0
 80112c6:	461a      	mov	r2, r3
 80112c8:	4b04      	ldr	r3, [pc, #16]	; (80112dc <SD_initialize+0x34>)
 80112ca:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80112cc:	4b03      	ldr	r3, [pc, #12]	; (80112dc <SD_initialize+0x34>)
 80112ce:	781b      	ldrb	r3, [r3, #0]
 80112d0:	b2db      	uxtb	r3, r3
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3708      	adds	r7, #8
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	24000015 	.word	0x24000015

080112e0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b082      	sub	sp, #8
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	4603      	mov	r3, r0
 80112e8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80112ea:	79fb      	ldrb	r3, [r7, #7]
 80112ec:	4618      	mov	r0, r3
 80112ee:	f7ff ffbd 	bl	801126c <SD_CheckStatus>
 80112f2:	4603      	mov	r3, r0
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3708      	adds	r7, #8
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}

080112fc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b086      	sub	sp, #24
 8011300:	af00      	add	r7, sp, #0
 8011302:	60b9      	str	r1, [r7, #8]
 8011304:	607a      	str	r2, [r7, #4]
 8011306:	603b      	str	r3, [r7, #0]
 8011308:	4603      	mov	r3, r0
 801130a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801130c:	2301      	movs	r3, #1
 801130e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011310:	f247 5030 	movw	r0, #30000	; 0x7530
 8011314:	f7ff ff8d 	bl	8011232 <SD_CheckStatusWithTimeout>
 8011318:	4603      	mov	r3, r0
 801131a:	2b00      	cmp	r3, #0
 801131c:	da01      	bge.n	8011322 <SD_read+0x26>
  {
    return res;
 801131e:	7dfb      	ldrb	r3, [r7, #23]
 8011320:	e03b      	b.n	801139a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011322:	683a      	ldr	r2, [r7, #0]
 8011324:	6879      	ldr	r1, [r7, #4]
 8011326:	68b8      	ldr	r0, [r7, #8]
 8011328:	f7ff ff10 	bl	801114c <BSP_SD_ReadBlocks_DMA>
 801132c:	4603      	mov	r3, r0
 801132e:	2b00      	cmp	r3, #0
 8011330:	d132      	bne.n	8011398 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8011332:	4b1c      	ldr	r3, [pc, #112]	; (80113a4 <SD_read+0xa8>)
 8011334:	2200      	movs	r2, #0
 8011336:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011338:	f7f1 fe44 	bl	8002fc4 <HAL_GetTick>
 801133c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801133e:	bf00      	nop
 8011340:	4b18      	ldr	r3, [pc, #96]	; (80113a4 <SD_read+0xa8>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d108      	bne.n	801135a <SD_read+0x5e>
 8011348:	f7f1 fe3c 	bl	8002fc4 <HAL_GetTick>
 801134c:	4602      	mov	r2, r0
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	1ad3      	subs	r3, r2, r3
 8011352:	f247 522f 	movw	r2, #29999	; 0x752f
 8011356:	4293      	cmp	r3, r2
 8011358:	d9f2      	bls.n	8011340 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801135a:	4b12      	ldr	r3, [pc, #72]	; (80113a4 <SD_read+0xa8>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d102      	bne.n	8011368 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8011362:	2301      	movs	r3, #1
 8011364:	75fb      	strb	r3, [r7, #23]
 8011366:	e017      	b.n	8011398 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011368:	4b0e      	ldr	r3, [pc, #56]	; (80113a4 <SD_read+0xa8>)
 801136a:	2200      	movs	r2, #0
 801136c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801136e:	f7f1 fe29 	bl	8002fc4 <HAL_GetTick>
 8011372:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011374:	e007      	b.n	8011386 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011376:	f7ff ff1d 	bl	80111b4 <BSP_SD_GetCardState>
 801137a:	4603      	mov	r3, r0
 801137c:	2b00      	cmp	r3, #0
 801137e:	d102      	bne.n	8011386 <SD_read+0x8a>
          {
            res = RES_OK;
 8011380:	2300      	movs	r3, #0
 8011382:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8011384:	e008      	b.n	8011398 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011386:	f7f1 fe1d 	bl	8002fc4 <HAL_GetTick>
 801138a:	4602      	mov	r2, r0
 801138c:	693b      	ldr	r3, [r7, #16]
 801138e:	1ad3      	subs	r3, r2, r3
 8011390:	f247 522f 	movw	r2, #29999	; 0x752f
 8011394:	4293      	cmp	r3, r2
 8011396:	d9ee      	bls.n	8011376 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011398:	7dfb      	ldrb	r3, [r7, #23]
}
 801139a:	4618      	mov	r0, r3
 801139c:	3718      	adds	r7, #24
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}
 80113a2:	bf00      	nop
 80113a4:	24008a20 	.word	0x24008a20

080113a8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b086      	sub	sp, #24
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	60b9      	str	r1, [r7, #8]
 80113b0:	607a      	str	r2, [r7, #4]
 80113b2:	603b      	str	r3, [r7, #0]
 80113b4:	4603      	mov	r3, r0
 80113b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80113b8:	2301      	movs	r3, #1
 80113ba:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80113bc:	4b24      	ldr	r3, [pc, #144]	; (8011450 <SD_write+0xa8>)
 80113be:	2200      	movs	r2, #0
 80113c0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80113c2:	f247 5030 	movw	r0, #30000	; 0x7530
 80113c6:	f7ff ff34 	bl	8011232 <SD_CheckStatusWithTimeout>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	da01      	bge.n	80113d4 <SD_write+0x2c>
  {
    return res;
 80113d0:	7dfb      	ldrb	r3, [r7, #23]
 80113d2:	e038      	b.n	8011446 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80113d4:	683a      	ldr	r2, [r7, #0]
 80113d6:	6879      	ldr	r1, [r7, #4]
 80113d8:	68b8      	ldr	r0, [r7, #8]
 80113da:	f7ff fed1 	bl	8011180 <BSP_SD_WriteBlocks_DMA>
 80113de:	4603      	mov	r3, r0
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d12f      	bne.n	8011444 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80113e4:	f7f1 fdee 	bl	8002fc4 <HAL_GetTick>
 80113e8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80113ea:	bf00      	nop
 80113ec:	4b18      	ldr	r3, [pc, #96]	; (8011450 <SD_write+0xa8>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d108      	bne.n	8011406 <SD_write+0x5e>
 80113f4:	f7f1 fde6 	bl	8002fc4 <HAL_GetTick>
 80113f8:	4602      	mov	r2, r0
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	1ad3      	subs	r3, r2, r3
 80113fe:	f247 522f 	movw	r2, #29999	; 0x752f
 8011402:	4293      	cmp	r3, r2
 8011404:	d9f2      	bls.n	80113ec <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8011406:	4b12      	ldr	r3, [pc, #72]	; (8011450 <SD_write+0xa8>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d102      	bne.n	8011414 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801140e:	2301      	movs	r3, #1
 8011410:	75fb      	strb	r3, [r7, #23]
 8011412:	e017      	b.n	8011444 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011414:	4b0e      	ldr	r3, [pc, #56]	; (8011450 <SD_write+0xa8>)
 8011416:	2200      	movs	r2, #0
 8011418:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801141a:	f7f1 fdd3 	bl	8002fc4 <HAL_GetTick>
 801141e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011420:	e007      	b.n	8011432 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011422:	f7ff fec7 	bl	80111b4 <BSP_SD_GetCardState>
 8011426:	4603      	mov	r3, r0
 8011428:	2b00      	cmp	r3, #0
 801142a:	d102      	bne.n	8011432 <SD_write+0x8a>
          {
            res = RES_OK;
 801142c:	2300      	movs	r3, #0
 801142e:	75fb      	strb	r3, [r7, #23]
            break;
 8011430:	e008      	b.n	8011444 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011432:	f7f1 fdc7 	bl	8002fc4 <HAL_GetTick>
 8011436:	4602      	mov	r2, r0
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	1ad3      	subs	r3, r2, r3
 801143c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011440:	4293      	cmp	r3, r2
 8011442:	d9ee      	bls.n	8011422 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011444:	7dfb      	ldrb	r3, [r7, #23]
}
 8011446:	4618      	mov	r0, r3
 8011448:	3718      	adds	r7, #24
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}
 801144e:	bf00      	nop
 8011450:	24008a1c 	.word	0x24008a1c

08011454 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b08c      	sub	sp, #48	; 0x30
 8011458:	af00      	add	r7, sp, #0
 801145a:	4603      	mov	r3, r0
 801145c:	603a      	str	r2, [r7, #0]
 801145e:	71fb      	strb	r3, [r7, #7]
 8011460:	460b      	mov	r3, r1
 8011462:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011464:	2301      	movs	r3, #1
 8011466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801146a:	4b25      	ldr	r3, [pc, #148]	; (8011500 <SD_ioctl+0xac>)
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	b2db      	uxtb	r3, r3
 8011470:	f003 0301 	and.w	r3, r3, #1
 8011474:	2b00      	cmp	r3, #0
 8011476:	d001      	beq.n	801147c <SD_ioctl+0x28>
 8011478:	2303      	movs	r3, #3
 801147a:	e03c      	b.n	80114f6 <SD_ioctl+0xa2>

  switch (cmd)
 801147c:	79bb      	ldrb	r3, [r7, #6]
 801147e:	2b03      	cmp	r3, #3
 8011480:	d834      	bhi.n	80114ec <SD_ioctl+0x98>
 8011482:	a201      	add	r2, pc, #4	; (adr r2, 8011488 <SD_ioctl+0x34>)
 8011484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011488:	08011499 	.word	0x08011499
 801148c:	080114a1 	.word	0x080114a1
 8011490:	080114b9 	.word	0x080114b9
 8011494:	080114d3 	.word	0x080114d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011498:	2300      	movs	r3, #0
 801149a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801149e:	e028      	b.n	80114f2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80114a0:	f107 0308 	add.w	r3, r7, #8
 80114a4:	4618      	mov	r0, r3
 80114a6:	f7ff fe95 	bl	80111d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80114aa:	6a3a      	ldr	r2, [r7, #32]
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80114b0:	2300      	movs	r3, #0
 80114b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80114b6:	e01c      	b.n	80114f2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80114b8:	f107 0308 	add.w	r3, r7, #8
 80114bc:	4618      	mov	r0, r3
 80114be:	f7ff fe89 	bl	80111d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80114c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c4:	b29a      	uxth	r2, r3
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80114ca:	2300      	movs	r3, #0
 80114cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80114d0:	e00f      	b.n	80114f2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80114d2:	f107 0308 	add.w	r3, r7, #8
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7ff fe7c 	bl	80111d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80114dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114de:	0a5a      	lsrs	r2, r3, #9
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80114e4:	2300      	movs	r3, #0
 80114e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80114ea:	e002      	b.n	80114f2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80114ec:	2304      	movs	r3, #4
 80114ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80114f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3730      	adds	r7, #48	; 0x30
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	24000015 	.word	0x24000015

08011504 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011504:	b480      	push	{r7}
 8011506:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011508:	4b03      	ldr	r3, [pc, #12]	; (8011518 <BSP_SD_WriteCpltCallback+0x14>)
 801150a:	2201      	movs	r2, #1
 801150c:	601a      	str	r2, [r3, #0]
}
 801150e:	bf00      	nop
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr
 8011518:	24008a1c 	.word	0x24008a1c

0801151c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801151c:	b480      	push	{r7}
 801151e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011520:	4b03      	ldr	r3, [pc, #12]	; (8011530 <BSP_SD_ReadCpltCallback+0x14>)
 8011522:	2201      	movs	r2, #1
 8011524:	601a      	str	r2, [r3, #0]
}
 8011526:	bf00      	nop
 8011528:	46bd      	mov	sp, r7
 801152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152e:	4770      	bx	lr
 8011530:	24008a20 	.word	0x24008a20

08011534 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b084      	sub	sp, #16
 8011538:	af00      	add	r7, sp, #0
 801153a:	4603      	mov	r3, r0
 801153c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801153e:	79fb      	ldrb	r3, [r7, #7]
 8011540:	4a08      	ldr	r2, [pc, #32]	; (8011564 <disk_status+0x30>)
 8011542:	009b      	lsls	r3, r3, #2
 8011544:	4413      	add	r3, r2
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	685b      	ldr	r3, [r3, #4]
 801154a:	79fa      	ldrb	r2, [r7, #7]
 801154c:	4905      	ldr	r1, [pc, #20]	; (8011564 <disk_status+0x30>)
 801154e:	440a      	add	r2, r1
 8011550:	7a12      	ldrb	r2, [r2, #8]
 8011552:	4610      	mov	r0, r2
 8011554:	4798      	blx	r3
 8011556:	4603      	mov	r3, r0
 8011558:	73fb      	strb	r3, [r7, #15]
  return stat;
 801155a:	7bfb      	ldrb	r3, [r7, #15]
}
 801155c:	4618      	mov	r0, r3
 801155e:	3710      	adds	r7, #16
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}
 8011564:	24008a4c 	.word	0x24008a4c

08011568 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b084      	sub	sp, #16
 801156c:	af00      	add	r7, sp, #0
 801156e:	4603      	mov	r3, r0
 8011570:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011572:	2300      	movs	r3, #0
 8011574:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011576:	79fb      	ldrb	r3, [r7, #7]
 8011578:	4a0d      	ldr	r2, [pc, #52]	; (80115b0 <disk_initialize+0x48>)
 801157a:	5cd3      	ldrb	r3, [r2, r3]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d111      	bne.n	80115a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011580:	79fb      	ldrb	r3, [r7, #7]
 8011582:	4a0b      	ldr	r2, [pc, #44]	; (80115b0 <disk_initialize+0x48>)
 8011584:	2101      	movs	r1, #1
 8011586:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011588:	79fb      	ldrb	r3, [r7, #7]
 801158a:	4a09      	ldr	r2, [pc, #36]	; (80115b0 <disk_initialize+0x48>)
 801158c:	009b      	lsls	r3, r3, #2
 801158e:	4413      	add	r3, r2
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	79fa      	ldrb	r2, [r7, #7]
 8011596:	4906      	ldr	r1, [pc, #24]	; (80115b0 <disk_initialize+0x48>)
 8011598:	440a      	add	r2, r1
 801159a:	7a12      	ldrb	r2, [r2, #8]
 801159c:	4610      	mov	r0, r2
 801159e:	4798      	blx	r3
 80115a0:	4603      	mov	r3, r0
 80115a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80115a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80115a6:	4618      	mov	r0, r3
 80115a8:	3710      	adds	r7, #16
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	bf00      	nop
 80115b0:	24008a4c 	.word	0x24008a4c

080115b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80115b4:	b590      	push	{r4, r7, lr}
 80115b6:	b087      	sub	sp, #28
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60b9      	str	r1, [r7, #8]
 80115bc:	607a      	str	r2, [r7, #4]
 80115be:	603b      	str	r3, [r7, #0]
 80115c0:	4603      	mov	r3, r0
 80115c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80115c4:	7bfb      	ldrb	r3, [r7, #15]
 80115c6:	4a0a      	ldr	r2, [pc, #40]	; (80115f0 <disk_read+0x3c>)
 80115c8:	009b      	lsls	r3, r3, #2
 80115ca:	4413      	add	r3, r2
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	689c      	ldr	r4, [r3, #8]
 80115d0:	7bfb      	ldrb	r3, [r7, #15]
 80115d2:	4a07      	ldr	r2, [pc, #28]	; (80115f0 <disk_read+0x3c>)
 80115d4:	4413      	add	r3, r2
 80115d6:	7a18      	ldrb	r0, [r3, #8]
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	687a      	ldr	r2, [r7, #4]
 80115dc:	68b9      	ldr	r1, [r7, #8]
 80115de:	47a0      	blx	r4
 80115e0:	4603      	mov	r3, r0
 80115e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80115e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	371c      	adds	r7, #28
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd90      	pop	{r4, r7, pc}
 80115ee:	bf00      	nop
 80115f0:	24008a4c 	.word	0x24008a4c

080115f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80115f4:	b590      	push	{r4, r7, lr}
 80115f6:	b087      	sub	sp, #28
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	60b9      	str	r1, [r7, #8]
 80115fc:	607a      	str	r2, [r7, #4]
 80115fe:	603b      	str	r3, [r7, #0]
 8011600:	4603      	mov	r3, r0
 8011602:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011604:	7bfb      	ldrb	r3, [r7, #15]
 8011606:	4a0a      	ldr	r2, [pc, #40]	; (8011630 <disk_write+0x3c>)
 8011608:	009b      	lsls	r3, r3, #2
 801160a:	4413      	add	r3, r2
 801160c:	685b      	ldr	r3, [r3, #4]
 801160e:	68dc      	ldr	r4, [r3, #12]
 8011610:	7bfb      	ldrb	r3, [r7, #15]
 8011612:	4a07      	ldr	r2, [pc, #28]	; (8011630 <disk_write+0x3c>)
 8011614:	4413      	add	r3, r2
 8011616:	7a18      	ldrb	r0, [r3, #8]
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	687a      	ldr	r2, [r7, #4]
 801161c:	68b9      	ldr	r1, [r7, #8]
 801161e:	47a0      	blx	r4
 8011620:	4603      	mov	r3, r0
 8011622:	75fb      	strb	r3, [r7, #23]
  return res;
 8011624:	7dfb      	ldrb	r3, [r7, #23]
}
 8011626:	4618      	mov	r0, r3
 8011628:	371c      	adds	r7, #28
 801162a:	46bd      	mov	sp, r7
 801162c:	bd90      	pop	{r4, r7, pc}
 801162e:	bf00      	nop
 8011630:	24008a4c 	.word	0x24008a4c

08011634 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011634:	b480      	push	{r7}
 8011636:	b085      	sub	sp, #20
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	3301      	adds	r3, #1
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011644:	89fb      	ldrh	r3, [r7, #14]
 8011646:	021b      	lsls	r3, r3, #8
 8011648:	b21a      	sxth	r2, r3
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	781b      	ldrb	r3, [r3, #0]
 801164e:	b21b      	sxth	r3, r3
 8011650:	4313      	orrs	r3, r2
 8011652:	b21b      	sxth	r3, r3
 8011654:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011656:	89fb      	ldrh	r3, [r7, #14]
}
 8011658:	4618      	mov	r0, r3
 801165a:	3714      	adds	r7, #20
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011664:	b480      	push	{r7}
 8011666:	b085      	sub	sp, #20
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	3303      	adds	r3, #3
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	021b      	lsls	r3, r3, #8
 8011678:	687a      	ldr	r2, [r7, #4]
 801167a:	3202      	adds	r2, #2
 801167c:	7812      	ldrb	r2, [r2, #0]
 801167e:	4313      	orrs	r3, r2
 8011680:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	021b      	lsls	r3, r3, #8
 8011686:	687a      	ldr	r2, [r7, #4]
 8011688:	3201      	adds	r2, #1
 801168a:	7812      	ldrb	r2, [r2, #0]
 801168c:	4313      	orrs	r3, r2
 801168e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	021b      	lsls	r3, r3, #8
 8011694:	687a      	ldr	r2, [r7, #4]
 8011696:	7812      	ldrb	r2, [r2, #0]
 8011698:	4313      	orrs	r3, r2
 801169a:	60fb      	str	r3, [r7, #12]
	return rv;
 801169c:	68fb      	ldr	r3, [r7, #12]
}
 801169e:	4618      	mov	r0, r3
 80116a0:	3714      	adds	r7, #20
 80116a2:	46bd      	mov	sp, r7
 80116a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a8:	4770      	bx	lr
	...

080116ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80116ac:	b480      	push	{r7}
 80116ae:	b085      	sub	sp, #20
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80116b4:	2300      	movs	r3, #0
 80116b6:	60fb      	str	r3, [r7, #12]
 80116b8:	e010      	b.n	80116dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80116ba:	4a0d      	ldr	r2, [pc, #52]	; (80116f0 <clear_lock+0x44>)
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	011b      	lsls	r3, r3, #4
 80116c0:	4413      	add	r3, r2
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d105      	bne.n	80116d6 <clear_lock+0x2a>
 80116ca:	4a09      	ldr	r2, [pc, #36]	; (80116f0 <clear_lock+0x44>)
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	011b      	lsls	r3, r3, #4
 80116d0:	4413      	add	r3, r2
 80116d2:	2200      	movs	r2, #0
 80116d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	3301      	adds	r3, #1
 80116da:	60fb      	str	r3, [r7, #12]
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2b01      	cmp	r3, #1
 80116e0:	d9eb      	bls.n	80116ba <clear_lock+0xe>
	}
}
 80116e2:	bf00      	nop
 80116e4:	bf00      	nop
 80116e6:	3714      	adds	r7, #20
 80116e8:	46bd      	mov	sp, r7
 80116ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ee:	4770      	bx	lr
 80116f0:	24008a2c 	.word	0x24008a2c

080116f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b086      	sub	sp, #24
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80116fc:	2300      	movs	r3, #0
 80116fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	78db      	ldrb	r3, [r3, #3]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d034      	beq.n	8011772 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801170c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	7858      	ldrb	r0, [r3, #1]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011718:	2301      	movs	r3, #1
 801171a:	697a      	ldr	r2, [r7, #20]
 801171c:	f7ff ff6a 	bl	80115f4 <disk_write>
 8011720:	4603      	mov	r3, r0
 8011722:	2b00      	cmp	r3, #0
 8011724:	d002      	beq.n	801172c <sync_window+0x38>
			res = FR_DISK_ERR;
 8011726:	2301      	movs	r3, #1
 8011728:	73fb      	strb	r3, [r7, #15]
 801172a:	e022      	b.n	8011772 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2200      	movs	r2, #0
 8011730:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6a1b      	ldr	r3, [r3, #32]
 8011736:	697a      	ldr	r2, [r7, #20]
 8011738:	1ad2      	subs	r2, r2, r3
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	699b      	ldr	r3, [r3, #24]
 801173e:	429a      	cmp	r2, r3
 8011740:	d217      	bcs.n	8011772 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	789b      	ldrb	r3, [r3, #2]
 8011746:	613b      	str	r3, [r7, #16]
 8011748:	e010      	b.n	801176c <sync_window+0x78>
					wsect += fs->fsize;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	699b      	ldr	r3, [r3, #24]
 801174e:	697a      	ldr	r2, [r7, #20]
 8011750:	4413      	add	r3, r2
 8011752:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	7858      	ldrb	r0, [r3, #1]
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801175e:	2301      	movs	r3, #1
 8011760:	697a      	ldr	r2, [r7, #20]
 8011762:	f7ff ff47 	bl	80115f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	3b01      	subs	r3, #1
 801176a:	613b      	str	r3, [r7, #16]
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	2b01      	cmp	r3, #1
 8011770:	d8eb      	bhi.n	801174a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011772:	7bfb      	ldrb	r3, [r7, #15]
}
 8011774:	4618      	mov	r0, r3
 8011776:	3718      	adds	r7, #24
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}

0801177c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b084      	sub	sp, #16
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011786:	2300      	movs	r3, #0
 8011788:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801178e:	683a      	ldr	r2, [r7, #0]
 8011790:	429a      	cmp	r2, r3
 8011792:	d01b      	beq.n	80117cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	f7ff ffad 	bl	80116f4 <sync_window>
 801179a:	4603      	mov	r3, r0
 801179c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801179e:	7bfb      	ldrb	r3, [r7, #15]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d113      	bne.n	80117cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	7858      	ldrb	r0, [r3, #1]
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80117ae:	2301      	movs	r3, #1
 80117b0:	683a      	ldr	r2, [r7, #0]
 80117b2:	f7ff feff 	bl	80115b4 <disk_read>
 80117b6:	4603      	mov	r3, r0
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d004      	beq.n	80117c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80117bc:	f04f 33ff 	mov.w	r3, #4294967295
 80117c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80117c2:	2301      	movs	r3, #1
 80117c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	683a      	ldr	r2, [r7, #0]
 80117ca:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80117cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	3710      	adds	r7, #16
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}

080117d6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80117d6:	b480      	push	{r7}
 80117d8:	b087      	sub	sp, #28
 80117da:	af00      	add	r7, sp, #0
 80117dc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80117de:	f04f 33ff 	mov.w	r3, #4294967295
 80117e2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d031      	beq.n	8011850 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	617b      	str	r3, [r7, #20]
 80117f2:	e002      	b.n	80117fa <get_ldnumber+0x24>
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	3301      	adds	r3, #1
 80117f8:	617b      	str	r3, [r7, #20]
 80117fa:	697b      	ldr	r3, [r7, #20]
 80117fc:	781b      	ldrb	r3, [r3, #0]
 80117fe:	2b20      	cmp	r3, #32
 8011800:	d903      	bls.n	801180a <get_ldnumber+0x34>
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	2b3a      	cmp	r3, #58	; 0x3a
 8011808:	d1f4      	bne.n	80117f4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801180a:	697b      	ldr	r3, [r7, #20]
 801180c:	781b      	ldrb	r3, [r3, #0]
 801180e:	2b3a      	cmp	r3, #58	; 0x3a
 8011810:	d11c      	bne.n	801184c <get_ldnumber+0x76>
			tp = *path;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	1c5a      	adds	r2, r3, #1
 801181c:	60fa      	str	r2, [r7, #12]
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	3b30      	subs	r3, #48	; 0x30
 8011822:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	2b09      	cmp	r3, #9
 8011828:	d80e      	bhi.n	8011848 <get_ldnumber+0x72>
 801182a:	68fa      	ldr	r2, [r7, #12]
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	429a      	cmp	r2, r3
 8011830:	d10a      	bne.n	8011848 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d107      	bne.n	8011848 <get_ldnumber+0x72>
					vol = (int)i;
 8011838:	68bb      	ldr	r3, [r7, #8]
 801183a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	3301      	adds	r3, #1
 8011840:	617b      	str	r3, [r7, #20]
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	697a      	ldr	r2, [r7, #20]
 8011846:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	e002      	b.n	8011852 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801184c:	2300      	movs	r3, #0
 801184e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011850:	693b      	ldr	r3, [r7, #16]
}
 8011852:	4618      	mov	r0, r3
 8011854:	371c      	adds	r7, #28
 8011856:	46bd      	mov	sp, r7
 8011858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185c:	4770      	bx	lr
	...

08011860 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2200      	movs	r2, #0
 801186e:	70da      	strb	r2, [r3, #3]
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f04f 32ff 	mov.w	r2, #4294967295
 8011876:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011878:	6839      	ldr	r1, [r7, #0]
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f7ff ff7e 	bl	801177c <move_window>
 8011880:	4603      	mov	r3, r0
 8011882:	2b00      	cmp	r3, #0
 8011884:	d001      	beq.n	801188a <check_fs+0x2a>
 8011886:	2304      	movs	r3, #4
 8011888:	e038      	b.n	80118fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	3330      	adds	r3, #48	; 0x30
 801188e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011892:	4618      	mov	r0, r3
 8011894:	f7ff fece 	bl	8011634 <ld_word>
 8011898:	4603      	mov	r3, r0
 801189a:	461a      	mov	r2, r3
 801189c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d001      	beq.n	80118a8 <check_fs+0x48>
 80118a4:	2303      	movs	r3, #3
 80118a6:	e029      	b.n	80118fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80118ae:	2be9      	cmp	r3, #233	; 0xe9
 80118b0:	d009      	beq.n	80118c6 <check_fs+0x66>
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80118b8:	2beb      	cmp	r3, #235	; 0xeb
 80118ba:	d11e      	bne.n	80118fa <check_fs+0x9a>
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80118c2:	2b90      	cmp	r3, #144	; 0x90
 80118c4:	d119      	bne.n	80118fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	3330      	adds	r3, #48	; 0x30
 80118ca:	3336      	adds	r3, #54	; 0x36
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7ff fec9 	bl	8011664 <ld_dword>
 80118d2:	4603      	mov	r3, r0
 80118d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80118d8:	4a0a      	ldr	r2, [pc, #40]	; (8011904 <check_fs+0xa4>)
 80118da:	4293      	cmp	r3, r2
 80118dc:	d101      	bne.n	80118e2 <check_fs+0x82>
 80118de:	2300      	movs	r3, #0
 80118e0:	e00c      	b.n	80118fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	3330      	adds	r3, #48	; 0x30
 80118e6:	3352      	adds	r3, #82	; 0x52
 80118e8:	4618      	mov	r0, r3
 80118ea:	f7ff febb 	bl	8011664 <ld_dword>
 80118ee:	4603      	mov	r3, r0
 80118f0:	4a05      	ldr	r2, [pc, #20]	; (8011908 <check_fs+0xa8>)
 80118f2:	4293      	cmp	r3, r2
 80118f4:	d101      	bne.n	80118fa <check_fs+0x9a>
 80118f6:	2300      	movs	r3, #0
 80118f8:	e000      	b.n	80118fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80118fa:	2302      	movs	r3, #2
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3708      	adds	r7, #8
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	00544146 	.word	0x00544146
 8011908:	33544146 	.word	0x33544146

0801190c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b096      	sub	sp, #88	; 0x58
 8011910:	af00      	add	r7, sp, #0
 8011912:	60f8      	str	r0, [r7, #12]
 8011914:	60b9      	str	r1, [r7, #8]
 8011916:	4613      	mov	r3, r2
 8011918:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801191a:	68bb      	ldr	r3, [r7, #8]
 801191c:	2200      	movs	r2, #0
 801191e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011920:	68f8      	ldr	r0, [r7, #12]
 8011922:	f7ff ff58 	bl	80117d6 <get_ldnumber>
 8011926:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801192a:	2b00      	cmp	r3, #0
 801192c:	da01      	bge.n	8011932 <find_volume+0x26>
 801192e:	230b      	movs	r3, #11
 8011930:	e22d      	b.n	8011d8e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011932:	4aa1      	ldr	r2, [pc, #644]	; (8011bb8 <find_volume+0x2ac>)
 8011934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801193a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801193c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801193e:	2b00      	cmp	r3, #0
 8011940:	d101      	bne.n	8011946 <find_volume+0x3a>
 8011942:	230c      	movs	r3, #12
 8011944:	e223      	b.n	8011d8e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801194a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801194c:	79fb      	ldrb	r3, [r7, #7]
 801194e:	f023 0301 	bic.w	r3, r3, #1
 8011952:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011956:	781b      	ldrb	r3, [r3, #0]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d01a      	beq.n	8011992 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801195c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801195e:	785b      	ldrb	r3, [r3, #1]
 8011960:	4618      	mov	r0, r3
 8011962:	f7ff fde7 	bl	8011534 <disk_status>
 8011966:	4603      	mov	r3, r0
 8011968:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801196c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011970:	f003 0301 	and.w	r3, r3, #1
 8011974:	2b00      	cmp	r3, #0
 8011976:	d10c      	bne.n	8011992 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011978:	79fb      	ldrb	r3, [r7, #7]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d007      	beq.n	801198e <find_volume+0x82>
 801197e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011982:	f003 0304 	and.w	r3, r3, #4
 8011986:	2b00      	cmp	r3, #0
 8011988:	d001      	beq.n	801198e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801198a:	230a      	movs	r3, #10
 801198c:	e1ff      	b.n	8011d8e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801198e:	2300      	movs	r3, #0
 8011990:	e1fd      	b.n	8011d8e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011994:	2200      	movs	r2, #0
 8011996:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801199a:	b2da      	uxtb	r2, r3
 801199c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801199e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80119a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119a2:	785b      	ldrb	r3, [r3, #1]
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7ff fddf 	bl	8011568 <disk_initialize>
 80119aa:	4603      	mov	r3, r0
 80119ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80119b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80119b4:	f003 0301 	and.w	r3, r3, #1
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d001      	beq.n	80119c0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80119bc:	2303      	movs	r3, #3
 80119be:	e1e6      	b.n	8011d8e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80119c0:	79fb      	ldrb	r3, [r7, #7]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d007      	beq.n	80119d6 <find_volume+0xca>
 80119c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80119ca:	f003 0304 	and.w	r3, r3, #4
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d001      	beq.n	80119d6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80119d2:	230a      	movs	r3, #10
 80119d4:	e1db      	b.n	8011d8e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80119d6:	2300      	movs	r3, #0
 80119d8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80119da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80119dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80119de:	f7ff ff3f 	bl	8011860 <check_fs>
 80119e2:	4603      	mov	r3, r0
 80119e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80119e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80119ec:	2b02      	cmp	r3, #2
 80119ee:	d149      	bne.n	8011a84 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80119f0:	2300      	movs	r3, #0
 80119f2:	643b      	str	r3, [r7, #64]	; 0x40
 80119f4:	e01e      	b.n	8011a34 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80119f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80119fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119fe:	011b      	lsls	r3, r3, #4
 8011a00:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011a04:	4413      	add	r3, r2
 8011a06:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a0a:	3304      	adds	r3, #4
 8011a0c:	781b      	ldrb	r3, [r3, #0]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d006      	beq.n	8011a20 <find_volume+0x114>
 8011a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a14:	3308      	adds	r3, #8
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7ff fe24 	bl	8011664 <ld_dword>
 8011a1c:	4602      	mov	r2, r0
 8011a1e:	e000      	b.n	8011a22 <find_volume+0x116>
 8011a20:	2200      	movs	r2, #0
 8011a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a24:	009b      	lsls	r3, r3, #2
 8011a26:	3358      	adds	r3, #88	; 0x58
 8011a28:	443b      	add	r3, r7
 8011a2a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a30:	3301      	adds	r3, #1
 8011a32:	643b      	str	r3, [r7, #64]	; 0x40
 8011a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a36:	2b03      	cmp	r3, #3
 8011a38:	d9dd      	bls.n	80119f6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d002      	beq.n	8011a4a <find_volume+0x13e>
 8011a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a46:	3b01      	subs	r3, #1
 8011a48:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a4c:	009b      	lsls	r3, r3, #2
 8011a4e:	3358      	adds	r3, #88	; 0x58
 8011a50:	443b      	add	r3, r7
 8011a52:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011a56:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d005      	beq.n	8011a6a <find_volume+0x15e>
 8011a5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011a60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011a62:	f7ff fefd 	bl	8011860 <check_fs>
 8011a66:	4603      	mov	r3, r0
 8011a68:	e000      	b.n	8011a6c <find_volume+0x160>
 8011a6a:	2303      	movs	r3, #3
 8011a6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011a70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011a74:	2b01      	cmp	r3, #1
 8011a76:	d905      	bls.n	8011a84 <find_volume+0x178>
 8011a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a7a:	3301      	adds	r3, #1
 8011a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8011a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a80:	2b03      	cmp	r3, #3
 8011a82:	d9e2      	bls.n	8011a4a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011a84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011a88:	2b04      	cmp	r3, #4
 8011a8a:	d101      	bne.n	8011a90 <find_volume+0x184>
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	e17e      	b.n	8011d8e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011a90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011a94:	2b01      	cmp	r3, #1
 8011a96:	d901      	bls.n	8011a9c <find_volume+0x190>
 8011a98:	230d      	movs	r3, #13
 8011a9a:	e178      	b.n	8011d8e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a9e:	3330      	adds	r3, #48	; 0x30
 8011aa0:	330b      	adds	r3, #11
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7ff fdc6 	bl	8011634 <ld_word>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011aae:	d001      	beq.n	8011ab4 <find_volume+0x1a8>
 8011ab0:	230d      	movs	r3, #13
 8011ab2:	e16c      	b.n	8011d8e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab6:	3330      	adds	r3, #48	; 0x30
 8011ab8:	3316      	adds	r3, #22
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7ff fdba 	bl	8011634 <ld_word>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d106      	bne.n	8011ad8 <find_volume+0x1cc>
 8011aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011acc:	3330      	adds	r3, #48	; 0x30
 8011ace:	3324      	adds	r3, #36	; 0x24
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f7ff fdc7 	bl	8011664 <ld_dword>
 8011ad6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ada:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011adc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8011ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aea:	789b      	ldrb	r3, [r3, #2]
 8011aec:	2b01      	cmp	r3, #1
 8011aee:	d005      	beq.n	8011afc <find_volume+0x1f0>
 8011af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af2:	789b      	ldrb	r3, [r3, #2]
 8011af4:	2b02      	cmp	r3, #2
 8011af6:	d001      	beq.n	8011afc <find_volume+0x1f0>
 8011af8:	230d      	movs	r3, #13
 8011afa:	e148      	b.n	8011d8e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011afe:	789b      	ldrb	r3, [r3, #2]
 8011b00:	461a      	mov	r2, r3
 8011b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b04:	fb02 f303 	mul.w	r3, r2, r3
 8011b08:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b10:	b29a      	uxth	r2, r3
 8011b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b14:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b18:	895b      	ldrh	r3, [r3, #10]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d008      	beq.n	8011b30 <find_volume+0x224>
 8011b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b20:	895b      	ldrh	r3, [r3, #10]
 8011b22:	461a      	mov	r2, r3
 8011b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b26:	895b      	ldrh	r3, [r3, #10]
 8011b28:	3b01      	subs	r3, #1
 8011b2a:	4013      	ands	r3, r2
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d001      	beq.n	8011b34 <find_volume+0x228>
 8011b30:	230d      	movs	r3, #13
 8011b32:	e12c      	b.n	8011d8e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b36:	3330      	adds	r3, #48	; 0x30
 8011b38:	3311      	adds	r3, #17
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7ff fd7a 	bl	8011634 <ld_word>
 8011b40:	4603      	mov	r3, r0
 8011b42:	461a      	mov	r2, r3
 8011b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b46:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b4a:	891b      	ldrh	r3, [r3, #8]
 8011b4c:	f003 030f 	and.w	r3, r3, #15
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d001      	beq.n	8011b5a <find_volume+0x24e>
 8011b56:	230d      	movs	r3, #13
 8011b58:	e119      	b.n	8011d8e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b5c:	3330      	adds	r3, #48	; 0x30
 8011b5e:	3313      	adds	r3, #19
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7ff fd67 	bl	8011634 <ld_word>
 8011b66:	4603      	mov	r3, r0
 8011b68:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d106      	bne.n	8011b7e <find_volume+0x272>
 8011b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b72:	3330      	adds	r3, #48	; 0x30
 8011b74:	3320      	adds	r3, #32
 8011b76:	4618      	mov	r0, r3
 8011b78:	f7ff fd74 	bl	8011664 <ld_dword>
 8011b7c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b80:	3330      	adds	r3, #48	; 0x30
 8011b82:	330e      	adds	r3, #14
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7ff fd55 	bl	8011634 <ld_word>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011b8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d101      	bne.n	8011b98 <find_volume+0x28c>
 8011b94:	230d      	movs	r3, #13
 8011b96:	e0fa      	b.n	8011d8e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011b98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b9c:	4413      	add	r3, r2
 8011b9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ba0:	8912      	ldrh	r2, [r2, #8]
 8011ba2:	0912      	lsrs	r2, r2, #4
 8011ba4:	b292      	uxth	r2, r2
 8011ba6:	4413      	add	r3, r2
 8011ba8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d204      	bcs.n	8011bbc <find_volume+0x2b0>
 8011bb2:	230d      	movs	r3, #13
 8011bb4:	e0eb      	b.n	8011d8e <find_volume+0x482>
 8011bb6:	bf00      	nop
 8011bb8:	24008a24 	.word	0x24008a24
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011bbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bc0:	1ad3      	subs	r3, r2, r3
 8011bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011bc4:	8952      	ldrh	r2, [r2, #10]
 8011bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8011bca:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d101      	bne.n	8011bd6 <find_volume+0x2ca>
 8011bd2:	230d      	movs	r3, #13
 8011bd4:	e0db      	b.n	8011d8e <find_volume+0x482>
		fmt = FS_FAT32;
 8011bd6:	2303      	movs	r3, #3
 8011bd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bde:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d802      	bhi.n	8011bec <find_volume+0x2e0>
 8011be6:	2302      	movs	r3, #2
 8011be8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bee:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	d802      	bhi.n	8011bfc <find_volume+0x2f0>
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bfe:	1c9a      	adds	r2, r3, #2
 8011c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c02:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8011c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011c08:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011c0a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c0e:	441a      	add	r2, r3
 8011c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c12:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8011c14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c18:	441a      	add	r2, r3
 8011c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c1c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8011c1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011c22:	2b03      	cmp	r3, #3
 8011c24:	d11e      	bne.n	8011c64 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c28:	3330      	adds	r3, #48	; 0x30
 8011c2a:	332a      	adds	r3, #42	; 0x2a
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f7ff fd01 	bl	8011634 <ld_word>
 8011c32:	4603      	mov	r3, r0
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d001      	beq.n	8011c3c <find_volume+0x330>
 8011c38:	230d      	movs	r3, #13
 8011c3a:	e0a8      	b.n	8011d8e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c3e:	891b      	ldrh	r3, [r3, #8]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d001      	beq.n	8011c48 <find_volume+0x33c>
 8011c44:	230d      	movs	r3, #13
 8011c46:	e0a2      	b.n	8011d8e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c4a:	3330      	adds	r3, #48	; 0x30
 8011c4c:	332c      	adds	r3, #44	; 0x2c
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f7ff fd08 	bl	8011664 <ld_dword>
 8011c54:	4602      	mov	r2, r0
 8011c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c58:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c5c:	695b      	ldr	r3, [r3, #20]
 8011c5e:	009b      	lsls	r3, r3, #2
 8011c60:	647b      	str	r3, [r7, #68]	; 0x44
 8011c62:	e01f      	b.n	8011ca4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c66:	891b      	ldrh	r3, [r3, #8]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d101      	bne.n	8011c70 <find_volume+0x364>
 8011c6c:	230d      	movs	r3, #13
 8011c6e:	e08e      	b.n	8011d8e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c72:	6a1a      	ldr	r2, [r3, #32]
 8011c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c76:	441a      	add	r2, r3
 8011c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c7a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011c7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011c80:	2b02      	cmp	r3, #2
 8011c82:	d103      	bne.n	8011c8c <find_volume+0x380>
 8011c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c86:	695b      	ldr	r3, [r3, #20]
 8011c88:	005b      	lsls	r3, r3, #1
 8011c8a:	e00a      	b.n	8011ca2 <find_volume+0x396>
 8011c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c8e:	695a      	ldr	r2, [r3, #20]
 8011c90:	4613      	mov	r3, r2
 8011c92:	005b      	lsls	r3, r3, #1
 8011c94:	4413      	add	r3, r2
 8011c96:	085a      	lsrs	r2, r3, #1
 8011c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c9a:	695b      	ldr	r3, [r3, #20]
 8011c9c:	f003 0301 	and.w	r3, r3, #1
 8011ca0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011ca2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca6:	699a      	ldr	r2, [r3, #24]
 8011ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011caa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011cae:	0a5b      	lsrs	r3, r3, #9
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d201      	bcs.n	8011cb8 <find_volume+0x3ac>
 8011cb4:	230d      	movs	r3, #13
 8011cb6:	e06a      	b.n	8011d8e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cba:	f04f 32ff 	mov.w	r2, #4294967295
 8011cbe:	611a      	str	r2, [r3, #16]
 8011cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc2:	691a      	ldr	r2, [r3, #16]
 8011cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8011cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cca:	2280      	movs	r2, #128	; 0x80
 8011ccc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011cce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011cd2:	2b03      	cmp	r3, #3
 8011cd4:	d149      	bne.n	8011d6a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd8:	3330      	adds	r3, #48	; 0x30
 8011cda:	3330      	adds	r3, #48	; 0x30
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7ff fca9 	bl	8011634 <ld_word>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	2b01      	cmp	r3, #1
 8011ce6:	d140      	bne.n	8011d6a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cea:	3301      	adds	r3, #1
 8011cec:	4619      	mov	r1, r3
 8011cee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011cf0:	f7ff fd44 	bl	801177c <move_window>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d137      	bne.n	8011d6a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8011cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d02:	3330      	adds	r3, #48	; 0x30
 8011d04:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7ff fc93 	bl	8011634 <ld_word>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	461a      	mov	r2, r3
 8011d12:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011d16:	429a      	cmp	r2, r3
 8011d18:	d127      	bne.n	8011d6a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d1c:	3330      	adds	r3, #48	; 0x30
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7ff fca0 	bl	8011664 <ld_dword>
 8011d24:	4603      	mov	r3, r0
 8011d26:	4a1c      	ldr	r2, [pc, #112]	; (8011d98 <find_volume+0x48c>)
 8011d28:	4293      	cmp	r3, r2
 8011d2a:	d11e      	bne.n	8011d6a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d2e:	3330      	adds	r3, #48	; 0x30
 8011d30:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7ff fc95 	bl	8011664 <ld_dword>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	4a17      	ldr	r2, [pc, #92]	; (8011d9c <find_volume+0x490>)
 8011d3e:	4293      	cmp	r3, r2
 8011d40:	d113      	bne.n	8011d6a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d44:	3330      	adds	r3, #48	; 0x30
 8011d46:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7ff fc8a 	bl	8011664 <ld_dword>
 8011d50:	4602      	mov	r2, r0
 8011d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d54:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d58:	3330      	adds	r3, #48	; 0x30
 8011d5a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f7ff fc80 	bl	8011664 <ld_dword>
 8011d64:	4602      	mov	r2, r0
 8011d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d68:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d6c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011d70:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011d72:	4b0b      	ldr	r3, [pc, #44]	; (8011da0 <find_volume+0x494>)
 8011d74:	881b      	ldrh	r3, [r3, #0]
 8011d76:	3301      	adds	r3, #1
 8011d78:	b29a      	uxth	r2, r3
 8011d7a:	4b09      	ldr	r3, [pc, #36]	; (8011da0 <find_volume+0x494>)
 8011d7c:	801a      	strh	r2, [r3, #0]
 8011d7e:	4b08      	ldr	r3, [pc, #32]	; (8011da0 <find_volume+0x494>)
 8011d80:	881a      	ldrh	r2, [r3, #0]
 8011d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d84:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011d86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011d88:	f7ff fc90 	bl	80116ac <clear_lock>
#endif
	return FR_OK;
 8011d8c:	2300      	movs	r3, #0
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3758      	adds	r7, #88	; 0x58
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}
 8011d96:	bf00      	nop
 8011d98:	41615252 	.word	0x41615252
 8011d9c:	61417272 	.word	0x61417272
 8011da0:	24008a28 	.word	0x24008a28

08011da4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b088      	sub	sp, #32
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	60f8      	str	r0, [r7, #12]
 8011dac:	60b9      	str	r1, [r7, #8]
 8011dae:	4613      	mov	r3, r2
 8011db0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011db6:	f107 0310 	add.w	r3, r7, #16
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7ff fd0b 	bl	80117d6 <get_ldnumber>
 8011dc0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011dc2:	69fb      	ldr	r3, [r7, #28]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	da01      	bge.n	8011dcc <f_mount+0x28>
 8011dc8:	230b      	movs	r3, #11
 8011dca:	e02b      	b.n	8011e24 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011dcc:	4a17      	ldr	r2, [pc, #92]	; (8011e2c <f_mount+0x88>)
 8011dce:	69fb      	ldr	r3, [r7, #28]
 8011dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011dd4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011dd6:	69bb      	ldr	r3, [r7, #24]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d005      	beq.n	8011de8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011ddc:	69b8      	ldr	r0, [r7, #24]
 8011dde:	f7ff fc65 	bl	80116ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011de2:	69bb      	ldr	r3, [r7, #24]
 8011de4:	2200      	movs	r2, #0
 8011de6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d002      	beq.n	8011df4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	2200      	movs	r2, #0
 8011df2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011df4:	68fa      	ldr	r2, [r7, #12]
 8011df6:	490d      	ldr	r1, [pc, #52]	; (8011e2c <f_mount+0x88>)
 8011df8:	69fb      	ldr	r3, [r7, #28]
 8011dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d002      	beq.n	8011e0a <f_mount+0x66>
 8011e04:	79fb      	ldrb	r3, [r7, #7]
 8011e06:	2b01      	cmp	r3, #1
 8011e08:	d001      	beq.n	8011e0e <f_mount+0x6a>
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	e00a      	b.n	8011e24 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011e0e:	f107 010c 	add.w	r1, r7, #12
 8011e12:	f107 0308 	add.w	r3, r7, #8
 8011e16:	2200      	movs	r2, #0
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f7ff fd77 	bl	801190c <find_volume>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3720      	adds	r7, #32
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}
 8011e2c:	24008a24 	.word	0x24008a24

08011e30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011e30:	b480      	push	{r7}
 8011e32:	b087      	sub	sp, #28
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	60f8      	str	r0, [r7, #12]
 8011e38:	60b9      	str	r1, [r7, #8]
 8011e3a:	4613      	mov	r3, r2
 8011e3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011e3e:	2301      	movs	r3, #1
 8011e40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011e42:	2300      	movs	r3, #0
 8011e44:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011e46:	4b1f      	ldr	r3, [pc, #124]	; (8011ec4 <FATFS_LinkDriverEx+0x94>)
 8011e48:	7a5b      	ldrb	r3, [r3, #9]
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d131      	bne.n	8011eb4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011e50:	4b1c      	ldr	r3, [pc, #112]	; (8011ec4 <FATFS_LinkDriverEx+0x94>)
 8011e52:	7a5b      	ldrb	r3, [r3, #9]
 8011e54:	b2db      	uxtb	r3, r3
 8011e56:	461a      	mov	r2, r3
 8011e58:	4b1a      	ldr	r3, [pc, #104]	; (8011ec4 <FATFS_LinkDriverEx+0x94>)
 8011e5a:	2100      	movs	r1, #0
 8011e5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011e5e:	4b19      	ldr	r3, [pc, #100]	; (8011ec4 <FATFS_LinkDriverEx+0x94>)
 8011e60:	7a5b      	ldrb	r3, [r3, #9]
 8011e62:	b2db      	uxtb	r3, r3
 8011e64:	4a17      	ldr	r2, [pc, #92]	; (8011ec4 <FATFS_LinkDriverEx+0x94>)
 8011e66:	009b      	lsls	r3, r3, #2
 8011e68:	4413      	add	r3, r2
 8011e6a:	68fa      	ldr	r2, [r7, #12]
 8011e6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011e6e:	4b15      	ldr	r3, [pc, #84]	; (8011ec4 <FATFS_LinkDriverEx+0x94>)
 8011e70:	7a5b      	ldrb	r3, [r3, #9]
 8011e72:	b2db      	uxtb	r3, r3
 8011e74:	461a      	mov	r2, r3
 8011e76:	4b13      	ldr	r3, [pc, #76]	; (8011ec4 <FATFS_LinkDriverEx+0x94>)
 8011e78:	4413      	add	r3, r2
 8011e7a:	79fa      	ldrb	r2, [r7, #7]
 8011e7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011e7e:	4b11      	ldr	r3, [pc, #68]	; (8011ec4 <FATFS_LinkDriverEx+0x94>)
 8011e80:	7a5b      	ldrb	r3, [r3, #9]
 8011e82:	b2db      	uxtb	r3, r3
 8011e84:	1c5a      	adds	r2, r3, #1
 8011e86:	b2d1      	uxtb	r1, r2
 8011e88:	4a0e      	ldr	r2, [pc, #56]	; (8011ec4 <FATFS_LinkDriverEx+0x94>)
 8011e8a:	7251      	strb	r1, [r2, #9]
 8011e8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011e8e:	7dbb      	ldrb	r3, [r7, #22]
 8011e90:	3330      	adds	r3, #48	; 0x30
 8011e92:	b2da      	uxtb	r2, r3
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	223a      	movs	r2, #58	; 0x3a
 8011e9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	3302      	adds	r3, #2
 8011ea4:	222f      	movs	r2, #47	; 0x2f
 8011ea6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	3303      	adds	r3, #3
 8011eac:	2200      	movs	r2, #0
 8011eae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	371c      	adds	r7, #28
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec0:	4770      	bx	lr
 8011ec2:	bf00      	nop
 8011ec4:	24008a4c 	.word	0x24008a4c

08011ec8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b082      	sub	sp, #8
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
 8011ed0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	6839      	ldr	r1, [r7, #0]
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f7ff ffaa 	bl	8011e30 <FATFS_LinkDriverEx>
 8011edc:	4603      	mov	r3, r0
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3708      	adds	r7, #8
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}
	...

08011ee8 <__errno>:
 8011ee8:	4b01      	ldr	r3, [pc, #4]	; (8011ef0 <__errno+0x8>)
 8011eea:	6818      	ldr	r0, [r3, #0]
 8011eec:	4770      	bx	lr
 8011eee:	bf00      	nop
 8011ef0:	24000018 	.word	0x24000018

08011ef4 <__libc_init_array>:
 8011ef4:	b570      	push	{r4, r5, r6, lr}
 8011ef6:	4d0d      	ldr	r5, [pc, #52]	; (8011f2c <__libc_init_array+0x38>)
 8011ef8:	4c0d      	ldr	r4, [pc, #52]	; (8011f30 <__libc_init_array+0x3c>)
 8011efa:	1b64      	subs	r4, r4, r5
 8011efc:	10a4      	asrs	r4, r4, #2
 8011efe:	2600      	movs	r6, #0
 8011f00:	42a6      	cmp	r6, r4
 8011f02:	d109      	bne.n	8011f18 <__libc_init_array+0x24>
 8011f04:	4d0b      	ldr	r5, [pc, #44]	; (8011f34 <__libc_init_array+0x40>)
 8011f06:	4c0c      	ldr	r4, [pc, #48]	; (8011f38 <__libc_init_array+0x44>)
 8011f08:	f000 fc8e 	bl	8012828 <_init>
 8011f0c:	1b64      	subs	r4, r4, r5
 8011f0e:	10a4      	asrs	r4, r4, #2
 8011f10:	2600      	movs	r6, #0
 8011f12:	42a6      	cmp	r6, r4
 8011f14:	d105      	bne.n	8011f22 <__libc_init_array+0x2e>
 8011f16:	bd70      	pop	{r4, r5, r6, pc}
 8011f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f1c:	4798      	blx	r3
 8011f1e:	3601      	adds	r6, #1
 8011f20:	e7ee      	b.n	8011f00 <__libc_init_array+0xc>
 8011f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f26:	4798      	blx	r3
 8011f28:	3601      	adds	r6, #1
 8011f2a:	e7f2      	b.n	8011f12 <__libc_init_array+0x1e>
 8011f2c:	08012920 	.word	0x08012920
 8011f30:	08012920 	.word	0x08012920
 8011f34:	08012920 	.word	0x08012920
 8011f38:	08012924 	.word	0x08012924

08011f3c <memset>:
 8011f3c:	4402      	add	r2, r0
 8011f3e:	4603      	mov	r3, r0
 8011f40:	4293      	cmp	r3, r2
 8011f42:	d100      	bne.n	8011f46 <memset+0xa>
 8011f44:	4770      	bx	lr
 8011f46:	f803 1b01 	strb.w	r1, [r3], #1
 8011f4a:	e7f9      	b.n	8011f40 <memset+0x4>

08011f4c <siprintf>:
 8011f4c:	b40e      	push	{r1, r2, r3}
 8011f4e:	b500      	push	{lr}
 8011f50:	b09c      	sub	sp, #112	; 0x70
 8011f52:	ab1d      	add	r3, sp, #116	; 0x74
 8011f54:	9002      	str	r0, [sp, #8]
 8011f56:	9006      	str	r0, [sp, #24]
 8011f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011f5c:	4809      	ldr	r0, [pc, #36]	; (8011f84 <siprintf+0x38>)
 8011f5e:	9107      	str	r1, [sp, #28]
 8011f60:	9104      	str	r1, [sp, #16]
 8011f62:	4909      	ldr	r1, [pc, #36]	; (8011f88 <siprintf+0x3c>)
 8011f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f68:	9105      	str	r1, [sp, #20]
 8011f6a:	6800      	ldr	r0, [r0, #0]
 8011f6c:	9301      	str	r3, [sp, #4]
 8011f6e:	a902      	add	r1, sp, #8
 8011f70:	f000 f868 	bl	8012044 <_svfiprintf_r>
 8011f74:	9b02      	ldr	r3, [sp, #8]
 8011f76:	2200      	movs	r2, #0
 8011f78:	701a      	strb	r2, [r3, #0]
 8011f7a:	b01c      	add	sp, #112	; 0x70
 8011f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f80:	b003      	add	sp, #12
 8011f82:	4770      	bx	lr
 8011f84:	24000018 	.word	0x24000018
 8011f88:	ffff0208 	.word	0xffff0208

08011f8c <__ssputs_r>:
 8011f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f90:	688e      	ldr	r6, [r1, #8]
 8011f92:	429e      	cmp	r6, r3
 8011f94:	4682      	mov	sl, r0
 8011f96:	460c      	mov	r4, r1
 8011f98:	4690      	mov	r8, r2
 8011f9a:	461f      	mov	r7, r3
 8011f9c:	d838      	bhi.n	8012010 <__ssputs_r+0x84>
 8011f9e:	898a      	ldrh	r2, [r1, #12]
 8011fa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011fa4:	d032      	beq.n	801200c <__ssputs_r+0x80>
 8011fa6:	6825      	ldr	r5, [r4, #0]
 8011fa8:	6909      	ldr	r1, [r1, #16]
 8011faa:	eba5 0901 	sub.w	r9, r5, r1
 8011fae:	6965      	ldr	r5, [r4, #20]
 8011fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011fb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011fb8:	3301      	adds	r3, #1
 8011fba:	444b      	add	r3, r9
 8011fbc:	106d      	asrs	r5, r5, #1
 8011fbe:	429d      	cmp	r5, r3
 8011fc0:	bf38      	it	cc
 8011fc2:	461d      	movcc	r5, r3
 8011fc4:	0553      	lsls	r3, r2, #21
 8011fc6:	d531      	bpl.n	801202c <__ssputs_r+0xa0>
 8011fc8:	4629      	mov	r1, r5
 8011fca:	f000 fb63 	bl	8012694 <_malloc_r>
 8011fce:	4606      	mov	r6, r0
 8011fd0:	b950      	cbnz	r0, 8011fe8 <__ssputs_r+0x5c>
 8011fd2:	230c      	movs	r3, #12
 8011fd4:	f8ca 3000 	str.w	r3, [sl]
 8011fd8:	89a3      	ldrh	r3, [r4, #12]
 8011fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fde:	81a3      	strh	r3, [r4, #12]
 8011fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8011fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fe8:	6921      	ldr	r1, [r4, #16]
 8011fea:	464a      	mov	r2, r9
 8011fec:	f000 fabe 	bl	801256c <memcpy>
 8011ff0:	89a3      	ldrh	r3, [r4, #12]
 8011ff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ffa:	81a3      	strh	r3, [r4, #12]
 8011ffc:	6126      	str	r6, [r4, #16]
 8011ffe:	6165      	str	r5, [r4, #20]
 8012000:	444e      	add	r6, r9
 8012002:	eba5 0509 	sub.w	r5, r5, r9
 8012006:	6026      	str	r6, [r4, #0]
 8012008:	60a5      	str	r5, [r4, #8]
 801200a:	463e      	mov	r6, r7
 801200c:	42be      	cmp	r6, r7
 801200e:	d900      	bls.n	8012012 <__ssputs_r+0x86>
 8012010:	463e      	mov	r6, r7
 8012012:	6820      	ldr	r0, [r4, #0]
 8012014:	4632      	mov	r2, r6
 8012016:	4641      	mov	r1, r8
 8012018:	f000 fab6 	bl	8012588 <memmove>
 801201c:	68a3      	ldr	r3, [r4, #8]
 801201e:	1b9b      	subs	r3, r3, r6
 8012020:	60a3      	str	r3, [r4, #8]
 8012022:	6823      	ldr	r3, [r4, #0]
 8012024:	4433      	add	r3, r6
 8012026:	6023      	str	r3, [r4, #0]
 8012028:	2000      	movs	r0, #0
 801202a:	e7db      	b.n	8011fe4 <__ssputs_r+0x58>
 801202c:	462a      	mov	r2, r5
 801202e:	f000 fba5 	bl	801277c <_realloc_r>
 8012032:	4606      	mov	r6, r0
 8012034:	2800      	cmp	r0, #0
 8012036:	d1e1      	bne.n	8011ffc <__ssputs_r+0x70>
 8012038:	6921      	ldr	r1, [r4, #16]
 801203a:	4650      	mov	r0, sl
 801203c:	f000 fabe 	bl	80125bc <_free_r>
 8012040:	e7c7      	b.n	8011fd2 <__ssputs_r+0x46>
	...

08012044 <_svfiprintf_r>:
 8012044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012048:	4698      	mov	r8, r3
 801204a:	898b      	ldrh	r3, [r1, #12]
 801204c:	061b      	lsls	r3, r3, #24
 801204e:	b09d      	sub	sp, #116	; 0x74
 8012050:	4607      	mov	r7, r0
 8012052:	460d      	mov	r5, r1
 8012054:	4614      	mov	r4, r2
 8012056:	d50e      	bpl.n	8012076 <_svfiprintf_r+0x32>
 8012058:	690b      	ldr	r3, [r1, #16]
 801205a:	b963      	cbnz	r3, 8012076 <_svfiprintf_r+0x32>
 801205c:	2140      	movs	r1, #64	; 0x40
 801205e:	f000 fb19 	bl	8012694 <_malloc_r>
 8012062:	6028      	str	r0, [r5, #0]
 8012064:	6128      	str	r0, [r5, #16]
 8012066:	b920      	cbnz	r0, 8012072 <_svfiprintf_r+0x2e>
 8012068:	230c      	movs	r3, #12
 801206a:	603b      	str	r3, [r7, #0]
 801206c:	f04f 30ff 	mov.w	r0, #4294967295
 8012070:	e0d1      	b.n	8012216 <_svfiprintf_r+0x1d2>
 8012072:	2340      	movs	r3, #64	; 0x40
 8012074:	616b      	str	r3, [r5, #20]
 8012076:	2300      	movs	r3, #0
 8012078:	9309      	str	r3, [sp, #36]	; 0x24
 801207a:	2320      	movs	r3, #32
 801207c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012080:	f8cd 800c 	str.w	r8, [sp, #12]
 8012084:	2330      	movs	r3, #48	; 0x30
 8012086:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012230 <_svfiprintf_r+0x1ec>
 801208a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801208e:	f04f 0901 	mov.w	r9, #1
 8012092:	4623      	mov	r3, r4
 8012094:	469a      	mov	sl, r3
 8012096:	f813 2b01 	ldrb.w	r2, [r3], #1
 801209a:	b10a      	cbz	r2, 80120a0 <_svfiprintf_r+0x5c>
 801209c:	2a25      	cmp	r2, #37	; 0x25
 801209e:	d1f9      	bne.n	8012094 <_svfiprintf_r+0x50>
 80120a0:	ebba 0b04 	subs.w	fp, sl, r4
 80120a4:	d00b      	beq.n	80120be <_svfiprintf_r+0x7a>
 80120a6:	465b      	mov	r3, fp
 80120a8:	4622      	mov	r2, r4
 80120aa:	4629      	mov	r1, r5
 80120ac:	4638      	mov	r0, r7
 80120ae:	f7ff ff6d 	bl	8011f8c <__ssputs_r>
 80120b2:	3001      	adds	r0, #1
 80120b4:	f000 80aa 	beq.w	801220c <_svfiprintf_r+0x1c8>
 80120b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120ba:	445a      	add	r2, fp
 80120bc:	9209      	str	r2, [sp, #36]	; 0x24
 80120be:	f89a 3000 	ldrb.w	r3, [sl]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	f000 80a2 	beq.w	801220c <_svfiprintf_r+0x1c8>
 80120c8:	2300      	movs	r3, #0
 80120ca:	f04f 32ff 	mov.w	r2, #4294967295
 80120ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120d2:	f10a 0a01 	add.w	sl, sl, #1
 80120d6:	9304      	str	r3, [sp, #16]
 80120d8:	9307      	str	r3, [sp, #28]
 80120da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120de:	931a      	str	r3, [sp, #104]	; 0x68
 80120e0:	4654      	mov	r4, sl
 80120e2:	2205      	movs	r2, #5
 80120e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120e8:	4851      	ldr	r0, [pc, #324]	; (8012230 <_svfiprintf_r+0x1ec>)
 80120ea:	f7ee f901 	bl	80002f0 <memchr>
 80120ee:	9a04      	ldr	r2, [sp, #16]
 80120f0:	b9d8      	cbnz	r0, 801212a <_svfiprintf_r+0xe6>
 80120f2:	06d0      	lsls	r0, r2, #27
 80120f4:	bf44      	itt	mi
 80120f6:	2320      	movmi	r3, #32
 80120f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120fc:	0711      	lsls	r1, r2, #28
 80120fe:	bf44      	itt	mi
 8012100:	232b      	movmi	r3, #43	; 0x2b
 8012102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012106:	f89a 3000 	ldrb.w	r3, [sl]
 801210a:	2b2a      	cmp	r3, #42	; 0x2a
 801210c:	d015      	beq.n	801213a <_svfiprintf_r+0xf6>
 801210e:	9a07      	ldr	r2, [sp, #28]
 8012110:	4654      	mov	r4, sl
 8012112:	2000      	movs	r0, #0
 8012114:	f04f 0c0a 	mov.w	ip, #10
 8012118:	4621      	mov	r1, r4
 801211a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801211e:	3b30      	subs	r3, #48	; 0x30
 8012120:	2b09      	cmp	r3, #9
 8012122:	d94e      	bls.n	80121c2 <_svfiprintf_r+0x17e>
 8012124:	b1b0      	cbz	r0, 8012154 <_svfiprintf_r+0x110>
 8012126:	9207      	str	r2, [sp, #28]
 8012128:	e014      	b.n	8012154 <_svfiprintf_r+0x110>
 801212a:	eba0 0308 	sub.w	r3, r0, r8
 801212e:	fa09 f303 	lsl.w	r3, r9, r3
 8012132:	4313      	orrs	r3, r2
 8012134:	9304      	str	r3, [sp, #16]
 8012136:	46a2      	mov	sl, r4
 8012138:	e7d2      	b.n	80120e0 <_svfiprintf_r+0x9c>
 801213a:	9b03      	ldr	r3, [sp, #12]
 801213c:	1d19      	adds	r1, r3, #4
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	9103      	str	r1, [sp, #12]
 8012142:	2b00      	cmp	r3, #0
 8012144:	bfbb      	ittet	lt
 8012146:	425b      	neglt	r3, r3
 8012148:	f042 0202 	orrlt.w	r2, r2, #2
 801214c:	9307      	strge	r3, [sp, #28]
 801214e:	9307      	strlt	r3, [sp, #28]
 8012150:	bfb8      	it	lt
 8012152:	9204      	strlt	r2, [sp, #16]
 8012154:	7823      	ldrb	r3, [r4, #0]
 8012156:	2b2e      	cmp	r3, #46	; 0x2e
 8012158:	d10c      	bne.n	8012174 <_svfiprintf_r+0x130>
 801215a:	7863      	ldrb	r3, [r4, #1]
 801215c:	2b2a      	cmp	r3, #42	; 0x2a
 801215e:	d135      	bne.n	80121cc <_svfiprintf_r+0x188>
 8012160:	9b03      	ldr	r3, [sp, #12]
 8012162:	1d1a      	adds	r2, r3, #4
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	9203      	str	r2, [sp, #12]
 8012168:	2b00      	cmp	r3, #0
 801216a:	bfb8      	it	lt
 801216c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012170:	3402      	adds	r4, #2
 8012172:	9305      	str	r3, [sp, #20]
 8012174:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012240 <_svfiprintf_r+0x1fc>
 8012178:	7821      	ldrb	r1, [r4, #0]
 801217a:	2203      	movs	r2, #3
 801217c:	4650      	mov	r0, sl
 801217e:	f7ee f8b7 	bl	80002f0 <memchr>
 8012182:	b140      	cbz	r0, 8012196 <_svfiprintf_r+0x152>
 8012184:	2340      	movs	r3, #64	; 0x40
 8012186:	eba0 000a 	sub.w	r0, r0, sl
 801218a:	fa03 f000 	lsl.w	r0, r3, r0
 801218e:	9b04      	ldr	r3, [sp, #16]
 8012190:	4303      	orrs	r3, r0
 8012192:	3401      	adds	r4, #1
 8012194:	9304      	str	r3, [sp, #16]
 8012196:	f814 1b01 	ldrb.w	r1, [r4], #1
 801219a:	4826      	ldr	r0, [pc, #152]	; (8012234 <_svfiprintf_r+0x1f0>)
 801219c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121a0:	2206      	movs	r2, #6
 80121a2:	f7ee f8a5 	bl	80002f0 <memchr>
 80121a6:	2800      	cmp	r0, #0
 80121a8:	d038      	beq.n	801221c <_svfiprintf_r+0x1d8>
 80121aa:	4b23      	ldr	r3, [pc, #140]	; (8012238 <_svfiprintf_r+0x1f4>)
 80121ac:	bb1b      	cbnz	r3, 80121f6 <_svfiprintf_r+0x1b2>
 80121ae:	9b03      	ldr	r3, [sp, #12]
 80121b0:	3307      	adds	r3, #7
 80121b2:	f023 0307 	bic.w	r3, r3, #7
 80121b6:	3308      	adds	r3, #8
 80121b8:	9303      	str	r3, [sp, #12]
 80121ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121bc:	4433      	add	r3, r6
 80121be:	9309      	str	r3, [sp, #36]	; 0x24
 80121c0:	e767      	b.n	8012092 <_svfiprintf_r+0x4e>
 80121c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80121c6:	460c      	mov	r4, r1
 80121c8:	2001      	movs	r0, #1
 80121ca:	e7a5      	b.n	8012118 <_svfiprintf_r+0xd4>
 80121cc:	2300      	movs	r3, #0
 80121ce:	3401      	adds	r4, #1
 80121d0:	9305      	str	r3, [sp, #20]
 80121d2:	4619      	mov	r1, r3
 80121d4:	f04f 0c0a 	mov.w	ip, #10
 80121d8:	4620      	mov	r0, r4
 80121da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121de:	3a30      	subs	r2, #48	; 0x30
 80121e0:	2a09      	cmp	r2, #9
 80121e2:	d903      	bls.n	80121ec <_svfiprintf_r+0x1a8>
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d0c5      	beq.n	8012174 <_svfiprintf_r+0x130>
 80121e8:	9105      	str	r1, [sp, #20]
 80121ea:	e7c3      	b.n	8012174 <_svfiprintf_r+0x130>
 80121ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80121f0:	4604      	mov	r4, r0
 80121f2:	2301      	movs	r3, #1
 80121f4:	e7f0      	b.n	80121d8 <_svfiprintf_r+0x194>
 80121f6:	ab03      	add	r3, sp, #12
 80121f8:	9300      	str	r3, [sp, #0]
 80121fa:	462a      	mov	r2, r5
 80121fc:	4b0f      	ldr	r3, [pc, #60]	; (801223c <_svfiprintf_r+0x1f8>)
 80121fe:	a904      	add	r1, sp, #16
 8012200:	4638      	mov	r0, r7
 8012202:	f3af 8000 	nop.w
 8012206:	1c42      	adds	r2, r0, #1
 8012208:	4606      	mov	r6, r0
 801220a:	d1d6      	bne.n	80121ba <_svfiprintf_r+0x176>
 801220c:	89ab      	ldrh	r3, [r5, #12]
 801220e:	065b      	lsls	r3, r3, #25
 8012210:	f53f af2c 	bmi.w	801206c <_svfiprintf_r+0x28>
 8012214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012216:	b01d      	add	sp, #116	; 0x74
 8012218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801221c:	ab03      	add	r3, sp, #12
 801221e:	9300      	str	r3, [sp, #0]
 8012220:	462a      	mov	r2, r5
 8012222:	4b06      	ldr	r3, [pc, #24]	; (801223c <_svfiprintf_r+0x1f8>)
 8012224:	a904      	add	r1, sp, #16
 8012226:	4638      	mov	r0, r7
 8012228:	f000 f87a 	bl	8012320 <_printf_i>
 801222c:	e7eb      	b.n	8012206 <_svfiprintf_r+0x1c2>
 801222e:	bf00      	nop
 8012230:	080128e4 	.word	0x080128e4
 8012234:	080128ee 	.word	0x080128ee
 8012238:	00000000 	.word	0x00000000
 801223c:	08011f8d 	.word	0x08011f8d
 8012240:	080128ea 	.word	0x080128ea

08012244 <_printf_common>:
 8012244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012248:	4616      	mov	r6, r2
 801224a:	4699      	mov	r9, r3
 801224c:	688a      	ldr	r2, [r1, #8]
 801224e:	690b      	ldr	r3, [r1, #16]
 8012250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012254:	4293      	cmp	r3, r2
 8012256:	bfb8      	it	lt
 8012258:	4613      	movlt	r3, r2
 801225a:	6033      	str	r3, [r6, #0]
 801225c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012260:	4607      	mov	r7, r0
 8012262:	460c      	mov	r4, r1
 8012264:	b10a      	cbz	r2, 801226a <_printf_common+0x26>
 8012266:	3301      	adds	r3, #1
 8012268:	6033      	str	r3, [r6, #0]
 801226a:	6823      	ldr	r3, [r4, #0]
 801226c:	0699      	lsls	r1, r3, #26
 801226e:	bf42      	ittt	mi
 8012270:	6833      	ldrmi	r3, [r6, #0]
 8012272:	3302      	addmi	r3, #2
 8012274:	6033      	strmi	r3, [r6, #0]
 8012276:	6825      	ldr	r5, [r4, #0]
 8012278:	f015 0506 	ands.w	r5, r5, #6
 801227c:	d106      	bne.n	801228c <_printf_common+0x48>
 801227e:	f104 0a19 	add.w	sl, r4, #25
 8012282:	68e3      	ldr	r3, [r4, #12]
 8012284:	6832      	ldr	r2, [r6, #0]
 8012286:	1a9b      	subs	r3, r3, r2
 8012288:	42ab      	cmp	r3, r5
 801228a:	dc26      	bgt.n	80122da <_printf_common+0x96>
 801228c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012290:	1e13      	subs	r3, r2, #0
 8012292:	6822      	ldr	r2, [r4, #0]
 8012294:	bf18      	it	ne
 8012296:	2301      	movne	r3, #1
 8012298:	0692      	lsls	r2, r2, #26
 801229a:	d42b      	bmi.n	80122f4 <_printf_common+0xb0>
 801229c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80122a0:	4649      	mov	r1, r9
 80122a2:	4638      	mov	r0, r7
 80122a4:	47c0      	blx	r8
 80122a6:	3001      	adds	r0, #1
 80122a8:	d01e      	beq.n	80122e8 <_printf_common+0xa4>
 80122aa:	6823      	ldr	r3, [r4, #0]
 80122ac:	68e5      	ldr	r5, [r4, #12]
 80122ae:	6832      	ldr	r2, [r6, #0]
 80122b0:	f003 0306 	and.w	r3, r3, #6
 80122b4:	2b04      	cmp	r3, #4
 80122b6:	bf08      	it	eq
 80122b8:	1aad      	subeq	r5, r5, r2
 80122ba:	68a3      	ldr	r3, [r4, #8]
 80122bc:	6922      	ldr	r2, [r4, #16]
 80122be:	bf0c      	ite	eq
 80122c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80122c4:	2500      	movne	r5, #0
 80122c6:	4293      	cmp	r3, r2
 80122c8:	bfc4      	itt	gt
 80122ca:	1a9b      	subgt	r3, r3, r2
 80122cc:	18ed      	addgt	r5, r5, r3
 80122ce:	2600      	movs	r6, #0
 80122d0:	341a      	adds	r4, #26
 80122d2:	42b5      	cmp	r5, r6
 80122d4:	d11a      	bne.n	801230c <_printf_common+0xc8>
 80122d6:	2000      	movs	r0, #0
 80122d8:	e008      	b.n	80122ec <_printf_common+0xa8>
 80122da:	2301      	movs	r3, #1
 80122dc:	4652      	mov	r2, sl
 80122de:	4649      	mov	r1, r9
 80122e0:	4638      	mov	r0, r7
 80122e2:	47c0      	blx	r8
 80122e4:	3001      	adds	r0, #1
 80122e6:	d103      	bne.n	80122f0 <_printf_common+0xac>
 80122e8:	f04f 30ff 	mov.w	r0, #4294967295
 80122ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122f0:	3501      	adds	r5, #1
 80122f2:	e7c6      	b.n	8012282 <_printf_common+0x3e>
 80122f4:	18e1      	adds	r1, r4, r3
 80122f6:	1c5a      	adds	r2, r3, #1
 80122f8:	2030      	movs	r0, #48	; 0x30
 80122fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80122fe:	4422      	add	r2, r4
 8012300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012308:	3302      	adds	r3, #2
 801230a:	e7c7      	b.n	801229c <_printf_common+0x58>
 801230c:	2301      	movs	r3, #1
 801230e:	4622      	mov	r2, r4
 8012310:	4649      	mov	r1, r9
 8012312:	4638      	mov	r0, r7
 8012314:	47c0      	blx	r8
 8012316:	3001      	adds	r0, #1
 8012318:	d0e6      	beq.n	80122e8 <_printf_common+0xa4>
 801231a:	3601      	adds	r6, #1
 801231c:	e7d9      	b.n	80122d2 <_printf_common+0x8e>
	...

08012320 <_printf_i>:
 8012320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012324:	7e0f      	ldrb	r7, [r1, #24]
 8012326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012328:	2f78      	cmp	r7, #120	; 0x78
 801232a:	4691      	mov	r9, r2
 801232c:	4680      	mov	r8, r0
 801232e:	460c      	mov	r4, r1
 8012330:	469a      	mov	sl, r3
 8012332:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012336:	d807      	bhi.n	8012348 <_printf_i+0x28>
 8012338:	2f62      	cmp	r7, #98	; 0x62
 801233a:	d80a      	bhi.n	8012352 <_printf_i+0x32>
 801233c:	2f00      	cmp	r7, #0
 801233e:	f000 80d8 	beq.w	80124f2 <_printf_i+0x1d2>
 8012342:	2f58      	cmp	r7, #88	; 0x58
 8012344:	f000 80a3 	beq.w	801248e <_printf_i+0x16e>
 8012348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801234c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012350:	e03a      	b.n	80123c8 <_printf_i+0xa8>
 8012352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012356:	2b15      	cmp	r3, #21
 8012358:	d8f6      	bhi.n	8012348 <_printf_i+0x28>
 801235a:	a101      	add	r1, pc, #4	; (adr r1, 8012360 <_printf_i+0x40>)
 801235c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012360:	080123b9 	.word	0x080123b9
 8012364:	080123cd 	.word	0x080123cd
 8012368:	08012349 	.word	0x08012349
 801236c:	08012349 	.word	0x08012349
 8012370:	08012349 	.word	0x08012349
 8012374:	08012349 	.word	0x08012349
 8012378:	080123cd 	.word	0x080123cd
 801237c:	08012349 	.word	0x08012349
 8012380:	08012349 	.word	0x08012349
 8012384:	08012349 	.word	0x08012349
 8012388:	08012349 	.word	0x08012349
 801238c:	080124d9 	.word	0x080124d9
 8012390:	080123fd 	.word	0x080123fd
 8012394:	080124bb 	.word	0x080124bb
 8012398:	08012349 	.word	0x08012349
 801239c:	08012349 	.word	0x08012349
 80123a0:	080124fb 	.word	0x080124fb
 80123a4:	08012349 	.word	0x08012349
 80123a8:	080123fd 	.word	0x080123fd
 80123ac:	08012349 	.word	0x08012349
 80123b0:	08012349 	.word	0x08012349
 80123b4:	080124c3 	.word	0x080124c3
 80123b8:	682b      	ldr	r3, [r5, #0]
 80123ba:	1d1a      	adds	r2, r3, #4
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	602a      	str	r2, [r5, #0]
 80123c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80123c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80123c8:	2301      	movs	r3, #1
 80123ca:	e0a3      	b.n	8012514 <_printf_i+0x1f4>
 80123cc:	6820      	ldr	r0, [r4, #0]
 80123ce:	6829      	ldr	r1, [r5, #0]
 80123d0:	0606      	lsls	r6, r0, #24
 80123d2:	f101 0304 	add.w	r3, r1, #4
 80123d6:	d50a      	bpl.n	80123ee <_printf_i+0xce>
 80123d8:	680e      	ldr	r6, [r1, #0]
 80123da:	602b      	str	r3, [r5, #0]
 80123dc:	2e00      	cmp	r6, #0
 80123de:	da03      	bge.n	80123e8 <_printf_i+0xc8>
 80123e0:	232d      	movs	r3, #45	; 0x2d
 80123e2:	4276      	negs	r6, r6
 80123e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123e8:	485e      	ldr	r0, [pc, #376]	; (8012564 <_printf_i+0x244>)
 80123ea:	230a      	movs	r3, #10
 80123ec:	e019      	b.n	8012422 <_printf_i+0x102>
 80123ee:	680e      	ldr	r6, [r1, #0]
 80123f0:	602b      	str	r3, [r5, #0]
 80123f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80123f6:	bf18      	it	ne
 80123f8:	b236      	sxthne	r6, r6
 80123fa:	e7ef      	b.n	80123dc <_printf_i+0xbc>
 80123fc:	682b      	ldr	r3, [r5, #0]
 80123fe:	6820      	ldr	r0, [r4, #0]
 8012400:	1d19      	adds	r1, r3, #4
 8012402:	6029      	str	r1, [r5, #0]
 8012404:	0601      	lsls	r1, r0, #24
 8012406:	d501      	bpl.n	801240c <_printf_i+0xec>
 8012408:	681e      	ldr	r6, [r3, #0]
 801240a:	e002      	b.n	8012412 <_printf_i+0xf2>
 801240c:	0646      	lsls	r6, r0, #25
 801240e:	d5fb      	bpl.n	8012408 <_printf_i+0xe8>
 8012410:	881e      	ldrh	r6, [r3, #0]
 8012412:	4854      	ldr	r0, [pc, #336]	; (8012564 <_printf_i+0x244>)
 8012414:	2f6f      	cmp	r7, #111	; 0x6f
 8012416:	bf0c      	ite	eq
 8012418:	2308      	moveq	r3, #8
 801241a:	230a      	movne	r3, #10
 801241c:	2100      	movs	r1, #0
 801241e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012422:	6865      	ldr	r5, [r4, #4]
 8012424:	60a5      	str	r5, [r4, #8]
 8012426:	2d00      	cmp	r5, #0
 8012428:	bfa2      	ittt	ge
 801242a:	6821      	ldrge	r1, [r4, #0]
 801242c:	f021 0104 	bicge.w	r1, r1, #4
 8012430:	6021      	strge	r1, [r4, #0]
 8012432:	b90e      	cbnz	r6, 8012438 <_printf_i+0x118>
 8012434:	2d00      	cmp	r5, #0
 8012436:	d04d      	beq.n	80124d4 <_printf_i+0x1b4>
 8012438:	4615      	mov	r5, r2
 801243a:	fbb6 f1f3 	udiv	r1, r6, r3
 801243e:	fb03 6711 	mls	r7, r3, r1, r6
 8012442:	5dc7      	ldrb	r7, [r0, r7]
 8012444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012448:	4637      	mov	r7, r6
 801244a:	42bb      	cmp	r3, r7
 801244c:	460e      	mov	r6, r1
 801244e:	d9f4      	bls.n	801243a <_printf_i+0x11a>
 8012450:	2b08      	cmp	r3, #8
 8012452:	d10b      	bne.n	801246c <_printf_i+0x14c>
 8012454:	6823      	ldr	r3, [r4, #0]
 8012456:	07de      	lsls	r6, r3, #31
 8012458:	d508      	bpl.n	801246c <_printf_i+0x14c>
 801245a:	6923      	ldr	r3, [r4, #16]
 801245c:	6861      	ldr	r1, [r4, #4]
 801245e:	4299      	cmp	r1, r3
 8012460:	bfde      	ittt	le
 8012462:	2330      	movle	r3, #48	; 0x30
 8012464:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012468:	f105 35ff 	addle.w	r5, r5, #4294967295
 801246c:	1b52      	subs	r2, r2, r5
 801246e:	6122      	str	r2, [r4, #16]
 8012470:	f8cd a000 	str.w	sl, [sp]
 8012474:	464b      	mov	r3, r9
 8012476:	aa03      	add	r2, sp, #12
 8012478:	4621      	mov	r1, r4
 801247a:	4640      	mov	r0, r8
 801247c:	f7ff fee2 	bl	8012244 <_printf_common>
 8012480:	3001      	adds	r0, #1
 8012482:	d14c      	bne.n	801251e <_printf_i+0x1fe>
 8012484:	f04f 30ff 	mov.w	r0, #4294967295
 8012488:	b004      	add	sp, #16
 801248a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801248e:	4835      	ldr	r0, [pc, #212]	; (8012564 <_printf_i+0x244>)
 8012490:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012494:	6829      	ldr	r1, [r5, #0]
 8012496:	6823      	ldr	r3, [r4, #0]
 8012498:	f851 6b04 	ldr.w	r6, [r1], #4
 801249c:	6029      	str	r1, [r5, #0]
 801249e:	061d      	lsls	r5, r3, #24
 80124a0:	d514      	bpl.n	80124cc <_printf_i+0x1ac>
 80124a2:	07df      	lsls	r7, r3, #31
 80124a4:	bf44      	itt	mi
 80124a6:	f043 0320 	orrmi.w	r3, r3, #32
 80124aa:	6023      	strmi	r3, [r4, #0]
 80124ac:	b91e      	cbnz	r6, 80124b6 <_printf_i+0x196>
 80124ae:	6823      	ldr	r3, [r4, #0]
 80124b0:	f023 0320 	bic.w	r3, r3, #32
 80124b4:	6023      	str	r3, [r4, #0]
 80124b6:	2310      	movs	r3, #16
 80124b8:	e7b0      	b.n	801241c <_printf_i+0xfc>
 80124ba:	6823      	ldr	r3, [r4, #0]
 80124bc:	f043 0320 	orr.w	r3, r3, #32
 80124c0:	6023      	str	r3, [r4, #0]
 80124c2:	2378      	movs	r3, #120	; 0x78
 80124c4:	4828      	ldr	r0, [pc, #160]	; (8012568 <_printf_i+0x248>)
 80124c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80124ca:	e7e3      	b.n	8012494 <_printf_i+0x174>
 80124cc:	0659      	lsls	r1, r3, #25
 80124ce:	bf48      	it	mi
 80124d0:	b2b6      	uxthmi	r6, r6
 80124d2:	e7e6      	b.n	80124a2 <_printf_i+0x182>
 80124d4:	4615      	mov	r5, r2
 80124d6:	e7bb      	b.n	8012450 <_printf_i+0x130>
 80124d8:	682b      	ldr	r3, [r5, #0]
 80124da:	6826      	ldr	r6, [r4, #0]
 80124dc:	6961      	ldr	r1, [r4, #20]
 80124de:	1d18      	adds	r0, r3, #4
 80124e0:	6028      	str	r0, [r5, #0]
 80124e2:	0635      	lsls	r5, r6, #24
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	d501      	bpl.n	80124ec <_printf_i+0x1cc>
 80124e8:	6019      	str	r1, [r3, #0]
 80124ea:	e002      	b.n	80124f2 <_printf_i+0x1d2>
 80124ec:	0670      	lsls	r0, r6, #25
 80124ee:	d5fb      	bpl.n	80124e8 <_printf_i+0x1c8>
 80124f0:	8019      	strh	r1, [r3, #0]
 80124f2:	2300      	movs	r3, #0
 80124f4:	6123      	str	r3, [r4, #16]
 80124f6:	4615      	mov	r5, r2
 80124f8:	e7ba      	b.n	8012470 <_printf_i+0x150>
 80124fa:	682b      	ldr	r3, [r5, #0]
 80124fc:	1d1a      	adds	r2, r3, #4
 80124fe:	602a      	str	r2, [r5, #0]
 8012500:	681d      	ldr	r5, [r3, #0]
 8012502:	6862      	ldr	r2, [r4, #4]
 8012504:	2100      	movs	r1, #0
 8012506:	4628      	mov	r0, r5
 8012508:	f7ed fef2 	bl	80002f0 <memchr>
 801250c:	b108      	cbz	r0, 8012512 <_printf_i+0x1f2>
 801250e:	1b40      	subs	r0, r0, r5
 8012510:	6060      	str	r0, [r4, #4]
 8012512:	6863      	ldr	r3, [r4, #4]
 8012514:	6123      	str	r3, [r4, #16]
 8012516:	2300      	movs	r3, #0
 8012518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801251c:	e7a8      	b.n	8012470 <_printf_i+0x150>
 801251e:	6923      	ldr	r3, [r4, #16]
 8012520:	462a      	mov	r2, r5
 8012522:	4649      	mov	r1, r9
 8012524:	4640      	mov	r0, r8
 8012526:	47d0      	blx	sl
 8012528:	3001      	adds	r0, #1
 801252a:	d0ab      	beq.n	8012484 <_printf_i+0x164>
 801252c:	6823      	ldr	r3, [r4, #0]
 801252e:	079b      	lsls	r3, r3, #30
 8012530:	d413      	bmi.n	801255a <_printf_i+0x23a>
 8012532:	68e0      	ldr	r0, [r4, #12]
 8012534:	9b03      	ldr	r3, [sp, #12]
 8012536:	4298      	cmp	r0, r3
 8012538:	bfb8      	it	lt
 801253a:	4618      	movlt	r0, r3
 801253c:	e7a4      	b.n	8012488 <_printf_i+0x168>
 801253e:	2301      	movs	r3, #1
 8012540:	4632      	mov	r2, r6
 8012542:	4649      	mov	r1, r9
 8012544:	4640      	mov	r0, r8
 8012546:	47d0      	blx	sl
 8012548:	3001      	adds	r0, #1
 801254a:	d09b      	beq.n	8012484 <_printf_i+0x164>
 801254c:	3501      	adds	r5, #1
 801254e:	68e3      	ldr	r3, [r4, #12]
 8012550:	9903      	ldr	r1, [sp, #12]
 8012552:	1a5b      	subs	r3, r3, r1
 8012554:	42ab      	cmp	r3, r5
 8012556:	dcf2      	bgt.n	801253e <_printf_i+0x21e>
 8012558:	e7eb      	b.n	8012532 <_printf_i+0x212>
 801255a:	2500      	movs	r5, #0
 801255c:	f104 0619 	add.w	r6, r4, #25
 8012560:	e7f5      	b.n	801254e <_printf_i+0x22e>
 8012562:	bf00      	nop
 8012564:	080128f5 	.word	0x080128f5
 8012568:	08012906 	.word	0x08012906

0801256c <memcpy>:
 801256c:	440a      	add	r2, r1
 801256e:	4291      	cmp	r1, r2
 8012570:	f100 33ff 	add.w	r3, r0, #4294967295
 8012574:	d100      	bne.n	8012578 <memcpy+0xc>
 8012576:	4770      	bx	lr
 8012578:	b510      	push	{r4, lr}
 801257a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801257e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012582:	4291      	cmp	r1, r2
 8012584:	d1f9      	bne.n	801257a <memcpy+0xe>
 8012586:	bd10      	pop	{r4, pc}

08012588 <memmove>:
 8012588:	4288      	cmp	r0, r1
 801258a:	b510      	push	{r4, lr}
 801258c:	eb01 0402 	add.w	r4, r1, r2
 8012590:	d902      	bls.n	8012598 <memmove+0x10>
 8012592:	4284      	cmp	r4, r0
 8012594:	4623      	mov	r3, r4
 8012596:	d807      	bhi.n	80125a8 <memmove+0x20>
 8012598:	1e43      	subs	r3, r0, #1
 801259a:	42a1      	cmp	r1, r4
 801259c:	d008      	beq.n	80125b0 <memmove+0x28>
 801259e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80125a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80125a6:	e7f8      	b.n	801259a <memmove+0x12>
 80125a8:	4402      	add	r2, r0
 80125aa:	4601      	mov	r1, r0
 80125ac:	428a      	cmp	r2, r1
 80125ae:	d100      	bne.n	80125b2 <memmove+0x2a>
 80125b0:	bd10      	pop	{r4, pc}
 80125b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80125b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80125ba:	e7f7      	b.n	80125ac <memmove+0x24>

080125bc <_free_r>:
 80125bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80125be:	2900      	cmp	r1, #0
 80125c0:	d044      	beq.n	801264c <_free_r+0x90>
 80125c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125c6:	9001      	str	r0, [sp, #4]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	f1a1 0404 	sub.w	r4, r1, #4
 80125ce:	bfb8      	it	lt
 80125d0:	18e4      	addlt	r4, r4, r3
 80125d2:	f000 f913 	bl	80127fc <__malloc_lock>
 80125d6:	4a1e      	ldr	r2, [pc, #120]	; (8012650 <_free_r+0x94>)
 80125d8:	9801      	ldr	r0, [sp, #4]
 80125da:	6813      	ldr	r3, [r2, #0]
 80125dc:	b933      	cbnz	r3, 80125ec <_free_r+0x30>
 80125de:	6063      	str	r3, [r4, #4]
 80125e0:	6014      	str	r4, [r2, #0]
 80125e2:	b003      	add	sp, #12
 80125e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125e8:	f000 b90e 	b.w	8012808 <__malloc_unlock>
 80125ec:	42a3      	cmp	r3, r4
 80125ee:	d908      	bls.n	8012602 <_free_r+0x46>
 80125f0:	6825      	ldr	r5, [r4, #0]
 80125f2:	1961      	adds	r1, r4, r5
 80125f4:	428b      	cmp	r3, r1
 80125f6:	bf01      	itttt	eq
 80125f8:	6819      	ldreq	r1, [r3, #0]
 80125fa:	685b      	ldreq	r3, [r3, #4]
 80125fc:	1949      	addeq	r1, r1, r5
 80125fe:	6021      	streq	r1, [r4, #0]
 8012600:	e7ed      	b.n	80125de <_free_r+0x22>
 8012602:	461a      	mov	r2, r3
 8012604:	685b      	ldr	r3, [r3, #4]
 8012606:	b10b      	cbz	r3, 801260c <_free_r+0x50>
 8012608:	42a3      	cmp	r3, r4
 801260a:	d9fa      	bls.n	8012602 <_free_r+0x46>
 801260c:	6811      	ldr	r1, [r2, #0]
 801260e:	1855      	adds	r5, r2, r1
 8012610:	42a5      	cmp	r5, r4
 8012612:	d10b      	bne.n	801262c <_free_r+0x70>
 8012614:	6824      	ldr	r4, [r4, #0]
 8012616:	4421      	add	r1, r4
 8012618:	1854      	adds	r4, r2, r1
 801261a:	42a3      	cmp	r3, r4
 801261c:	6011      	str	r1, [r2, #0]
 801261e:	d1e0      	bne.n	80125e2 <_free_r+0x26>
 8012620:	681c      	ldr	r4, [r3, #0]
 8012622:	685b      	ldr	r3, [r3, #4]
 8012624:	6053      	str	r3, [r2, #4]
 8012626:	4421      	add	r1, r4
 8012628:	6011      	str	r1, [r2, #0]
 801262a:	e7da      	b.n	80125e2 <_free_r+0x26>
 801262c:	d902      	bls.n	8012634 <_free_r+0x78>
 801262e:	230c      	movs	r3, #12
 8012630:	6003      	str	r3, [r0, #0]
 8012632:	e7d6      	b.n	80125e2 <_free_r+0x26>
 8012634:	6825      	ldr	r5, [r4, #0]
 8012636:	1961      	adds	r1, r4, r5
 8012638:	428b      	cmp	r3, r1
 801263a:	bf04      	itt	eq
 801263c:	6819      	ldreq	r1, [r3, #0]
 801263e:	685b      	ldreq	r3, [r3, #4]
 8012640:	6063      	str	r3, [r4, #4]
 8012642:	bf04      	itt	eq
 8012644:	1949      	addeq	r1, r1, r5
 8012646:	6021      	streq	r1, [r4, #0]
 8012648:	6054      	str	r4, [r2, #4]
 801264a:	e7ca      	b.n	80125e2 <_free_r+0x26>
 801264c:	b003      	add	sp, #12
 801264e:	bd30      	pop	{r4, r5, pc}
 8012650:	24008a58 	.word	0x24008a58

08012654 <sbrk_aligned>:
 8012654:	b570      	push	{r4, r5, r6, lr}
 8012656:	4e0e      	ldr	r6, [pc, #56]	; (8012690 <sbrk_aligned+0x3c>)
 8012658:	460c      	mov	r4, r1
 801265a:	6831      	ldr	r1, [r6, #0]
 801265c:	4605      	mov	r5, r0
 801265e:	b911      	cbnz	r1, 8012666 <sbrk_aligned+0x12>
 8012660:	f000 f8bc 	bl	80127dc <_sbrk_r>
 8012664:	6030      	str	r0, [r6, #0]
 8012666:	4621      	mov	r1, r4
 8012668:	4628      	mov	r0, r5
 801266a:	f000 f8b7 	bl	80127dc <_sbrk_r>
 801266e:	1c43      	adds	r3, r0, #1
 8012670:	d00a      	beq.n	8012688 <sbrk_aligned+0x34>
 8012672:	1cc4      	adds	r4, r0, #3
 8012674:	f024 0403 	bic.w	r4, r4, #3
 8012678:	42a0      	cmp	r0, r4
 801267a:	d007      	beq.n	801268c <sbrk_aligned+0x38>
 801267c:	1a21      	subs	r1, r4, r0
 801267e:	4628      	mov	r0, r5
 8012680:	f000 f8ac 	bl	80127dc <_sbrk_r>
 8012684:	3001      	adds	r0, #1
 8012686:	d101      	bne.n	801268c <sbrk_aligned+0x38>
 8012688:	f04f 34ff 	mov.w	r4, #4294967295
 801268c:	4620      	mov	r0, r4
 801268e:	bd70      	pop	{r4, r5, r6, pc}
 8012690:	24008a5c 	.word	0x24008a5c

08012694 <_malloc_r>:
 8012694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012698:	1ccd      	adds	r5, r1, #3
 801269a:	f025 0503 	bic.w	r5, r5, #3
 801269e:	3508      	adds	r5, #8
 80126a0:	2d0c      	cmp	r5, #12
 80126a2:	bf38      	it	cc
 80126a4:	250c      	movcc	r5, #12
 80126a6:	2d00      	cmp	r5, #0
 80126a8:	4607      	mov	r7, r0
 80126aa:	db01      	blt.n	80126b0 <_malloc_r+0x1c>
 80126ac:	42a9      	cmp	r1, r5
 80126ae:	d905      	bls.n	80126bc <_malloc_r+0x28>
 80126b0:	230c      	movs	r3, #12
 80126b2:	603b      	str	r3, [r7, #0]
 80126b4:	2600      	movs	r6, #0
 80126b6:	4630      	mov	r0, r6
 80126b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126bc:	4e2e      	ldr	r6, [pc, #184]	; (8012778 <_malloc_r+0xe4>)
 80126be:	f000 f89d 	bl	80127fc <__malloc_lock>
 80126c2:	6833      	ldr	r3, [r6, #0]
 80126c4:	461c      	mov	r4, r3
 80126c6:	bb34      	cbnz	r4, 8012716 <_malloc_r+0x82>
 80126c8:	4629      	mov	r1, r5
 80126ca:	4638      	mov	r0, r7
 80126cc:	f7ff ffc2 	bl	8012654 <sbrk_aligned>
 80126d0:	1c43      	adds	r3, r0, #1
 80126d2:	4604      	mov	r4, r0
 80126d4:	d14d      	bne.n	8012772 <_malloc_r+0xde>
 80126d6:	6834      	ldr	r4, [r6, #0]
 80126d8:	4626      	mov	r6, r4
 80126da:	2e00      	cmp	r6, #0
 80126dc:	d140      	bne.n	8012760 <_malloc_r+0xcc>
 80126de:	6823      	ldr	r3, [r4, #0]
 80126e0:	4631      	mov	r1, r6
 80126e2:	4638      	mov	r0, r7
 80126e4:	eb04 0803 	add.w	r8, r4, r3
 80126e8:	f000 f878 	bl	80127dc <_sbrk_r>
 80126ec:	4580      	cmp	r8, r0
 80126ee:	d13a      	bne.n	8012766 <_malloc_r+0xd2>
 80126f0:	6821      	ldr	r1, [r4, #0]
 80126f2:	3503      	adds	r5, #3
 80126f4:	1a6d      	subs	r5, r5, r1
 80126f6:	f025 0503 	bic.w	r5, r5, #3
 80126fa:	3508      	adds	r5, #8
 80126fc:	2d0c      	cmp	r5, #12
 80126fe:	bf38      	it	cc
 8012700:	250c      	movcc	r5, #12
 8012702:	4629      	mov	r1, r5
 8012704:	4638      	mov	r0, r7
 8012706:	f7ff ffa5 	bl	8012654 <sbrk_aligned>
 801270a:	3001      	adds	r0, #1
 801270c:	d02b      	beq.n	8012766 <_malloc_r+0xd2>
 801270e:	6823      	ldr	r3, [r4, #0]
 8012710:	442b      	add	r3, r5
 8012712:	6023      	str	r3, [r4, #0]
 8012714:	e00e      	b.n	8012734 <_malloc_r+0xa0>
 8012716:	6822      	ldr	r2, [r4, #0]
 8012718:	1b52      	subs	r2, r2, r5
 801271a:	d41e      	bmi.n	801275a <_malloc_r+0xc6>
 801271c:	2a0b      	cmp	r2, #11
 801271e:	d916      	bls.n	801274e <_malloc_r+0xba>
 8012720:	1961      	adds	r1, r4, r5
 8012722:	42a3      	cmp	r3, r4
 8012724:	6025      	str	r5, [r4, #0]
 8012726:	bf18      	it	ne
 8012728:	6059      	strne	r1, [r3, #4]
 801272a:	6863      	ldr	r3, [r4, #4]
 801272c:	bf08      	it	eq
 801272e:	6031      	streq	r1, [r6, #0]
 8012730:	5162      	str	r2, [r4, r5]
 8012732:	604b      	str	r3, [r1, #4]
 8012734:	4638      	mov	r0, r7
 8012736:	f104 060b 	add.w	r6, r4, #11
 801273a:	f000 f865 	bl	8012808 <__malloc_unlock>
 801273e:	f026 0607 	bic.w	r6, r6, #7
 8012742:	1d23      	adds	r3, r4, #4
 8012744:	1af2      	subs	r2, r6, r3
 8012746:	d0b6      	beq.n	80126b6 <_malloc_r+0x22>
 8012748:	1b9b      	subs	r3, r3, r6
 801274a:	50a3      	str	r3, [r4, r2]
 801274c:	e7b3      	b.n	80126b6 <_malloc_r+0x22>
 801274e:	6862      	ldr	r2, [r4, #4]
 8012750:	42a3      	cmp	r3, r4
 8012752:	bf0c      	ite	eq
 8012754:	6032      	streq	r2, [r6, #0]
 8012756:	605a      	strne	r2, [r3, #4]
 8012758:	e7ec      	b.n	8012734 <_malloc_r+0xa0>
 801275a:	4623      	mov	r3, r4
 801275c:	6864      	ldr	r4, [r4, #4]
 801275e:	e7b2      	b.n	80126c6 <_malloc_r+0x32>
 8012760:	4634      	mov	r4, r6
 8012762:	6876      	ldr	r6, [r6, #4]
 8012764:	e7b9      	b.n	80126da <_malloc_r+0x46>
 8012766:	230c      	movs	r3, #12
 8012768:	603b      	str	r3, [r7, #0]
 801276a:	4638      	mov	r0, r7
 801276c:	f000 f84c 	bl	8012808 <__malloc_unlock>
 8012770:	e7a1      	b.n	80126b6 <_malloc_r+0x22>
 8012772:	6025      	str	r5, [r4, #0]
 8012774:	e7de      	b.n	8012734 <_malloc_r+0xa0>
 8012776:	bf00      	nop
 8012778:	24008a58 	.word	0x24008a58

0801277c <_realloc_r>:
 801277c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012780:	4680      	mov	r8, r0
 8012782:	4614      	mov	r4, r2
 8012784:	460e      	mov	r6, r1
 8012786:	b921      	cbnz	r1, 8012792 <_realloc_r+0x16>
 8012788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801278c:	4611      	mov	r1, r2
 801278e:	f7ff bf81 	b.w	8012694 <_malloc_r>
 8012792:	b92a      	cbnz	r2, 80127a0 <_realloc_r+0x24>
 8012794:	f7ff ff12 	bl	80125bc <_free_r>
 8012798:	4625      	mov	r5, r4
 801279a:	4628      	mov	r0, r5
 801279c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a0:	f000 f838 	bl	8012814 <_malloc_usable_size_r>
 80127a4:	4284      	cmp	r4, r0
 80127a6:	4607      	mov	r7, r0
 80127a8:	d802      	bhi.n	80127b0 <_realloc_r+0x34>
 80127aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80127ae:	d812      	bhi.n	80127d6 <_realloc_r+0x5a>
 80127b0:	4621      	mov	r1, r4
 80127b2:	4640      	mov	r0, r8
 80127b4:	f7ff ff6e 	bl	8012694 <_malloc_r>
 80127b8:	4605      	mov	r5, r0
 80127ba:	2800      	cmp	r0, #0
 80127bc:	d0ed      	beq.n	801279a <_realloc_r+0x1e>
 80127be:	42bc      	cmp	r4, r7
 80127c0:	4622      	mov	r2, r4
 80127c2:	4631      	mov	r1, r6
 80127c4:	bf28      	it	cs
 80127c6:	463a      	movcs	r2, r7
 80127c8:	f7ff fed0 	bl	801256c <memcpy>
 80127cc:	4631      	mov	r1, r6
 80127ce:	4640      	mov	r0, r8
 80127d0:	f7ff fef4 	bl	80125bc <_free_r>
 80127d4:	e7e1      	b.n	801279a <_realloc_r+0x1e>
 80127d6:	4635      	mov	r5, r6
 80127d8:	e7df      	b.n	801279a <_realloc_r+0x1e>
	...

080127dc <_sbrk_r>:
 80127dc:	b538      	push	{r3, r4, r5, lr}
 80127de:	4d06      	ldr	r5, [pc, #24]	; (80127f8 <_sbrk_r+0x1c>)
 80127e0:	2300      	movs	r3, #0
 80127e2:	4604      	mov	r4, r0
 80127e4:	4608      	mov	r0, r1
 80127e6:	602b      	str	r3, [r5, #0]
 80127e8:	f7f0 fa8e 	bl	8002d08 <_sbrk>
 80127ec:	1c43      	adds	r3, r0, #1
 80127ee:	d102      	bne.n	80127f6 <_sbrk_r+0x1a>
 80127f0:	682b      	ldr	r3, [r5, #0]
 80127f2:	b103      	cbz	r3, 80127f6 <_sbrk_r+0x1a>
 80127f4:	6023      	str	r3, [r4, #0]
 80127f6:	bd38      	pop	{r3, r4, r5, pc}
 80127f8:	24008a60 	.word	0x24008a60

080127fc <__malloc_lock>:
 80127fc:	4801      	ldr	r0, [pc, #4]	; (8012804 <__malloc_lock+0x8>)
 80127fe:	f000 b811 	b.w	8012824 <__retarget_lock_acquire_recursive>
 8012802:	bf00      	nop
 8012804:	24008a64 	.word	0x24008a64

08012808 <__malloc_unlock>:
 8012808:	4801      	ldr	r0, [pc, #4]	; (8012810 <__malloc_unlock+0x8>)
 801280a:	f000 b80c 	b.w	8012826 <__retarget_lock_release_recursive>
 801280e:	bf00      	nop
 8012810:	24008a64 	.word	0x24008a64

08012814 <_malloc_usable_size_r>:
 8012814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012818:	1f18      	subs	r0, r3, #4
 801281a:	2b00      	cmp	r3, #0
 801281c:	bfbc      	itt	lt
 801281e:	580b      	ldrlt	r3, [r1, r0]
 8012820:	18c0      	addlt	r0, r0, r3
 8012822:	4770      	bx	lr

08012824 <__retarget_lock_acquire_recursive>:
 8012824:	4770      	bx	lr

08012826 <__retarget_lock_release_recursive>:
 8012826:	4770      	bx	lr

08012828 <_init>:
 8012828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801282a:	bf00      	nop
 801282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801282e:	bc08      	pop	{r3}
 8012830:	469e      	mov	lr, r3
 8012832:	4770      	bx	lr

08012834 <_fini>:
 8012834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012836:	bf00      	nop
 8012838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801283a:	bc08      	pop	{r3}
 801283c:	469e      	mov	lr, r3
 801283e:	4770      	bx	lr
