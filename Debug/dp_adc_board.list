
dp_adc_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012640  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080128f0  080128f0  000228f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080129c8  080129c8  000229c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080129d0  080129d0  000229d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080129d4  080129d4  000229d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  080129d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000089f8  2400007c  08012a54  0003007c  2**2
                  ALLOC
  8 .sdram_section 00c00000  c0000000  c0000000  00040000  2**2
                  ALLOC
  9 ._user_heap_stack 00000c04  24008a74  24008a74  00038a74  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002699a  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004217  00000000  00000000  00056a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001ce8  00000000  00000000  0005ac60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001b30  00000000  00000000  0005c948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036080  00000000  00000000  0005e478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000284b5  00000000  00000000  000944f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015086b  00000000  00000000  000bc9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0020d218  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007e68  00000000  00000000  0020d268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080128d8 	.word	0x080128d8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	080128d8 	.word	0x080128d8

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SDRAM_Startup_Sequence>:
uint32_t aTxBuffer[BUFFER_SIZE];
uint32_t aRxBuffer[BUFFER_SIZE];
uint32_t uwIndex = 0;
__IO uint32_t uwWriteReadStatus = 0;

void SDRAM_Startup_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
  /* Program the SDRAM external device */
  SDRAM_Initialization_Sequence(hsdram, Command);
 800069e:	6839      	ldr	r1, [r7, #0]
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f875 	bl	8000790 <SDRAM_Initialization_Sequence>

  /*##-2- SDRAM memory read/write access #####################################*/
  //*(__IO uint32_t*) (TEST_WRITE) = 0x1;

  /* Fill the buffer to write */
  Fill_Buffer(aTxBuffer, BUFFER_SIZE, 0xA244250F);
 80006a6:	4a34      	ldr	r2, [pc, #208]	; (8000778 <SDRAM_Startup_Sequence+0xe4>)
 80006a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ac:	4833      	ldr	r0, [pc, #204]	; (800077c <SDRAM_Startup_Sequence+0xe8>)
 80006ae:	f000 f8cc 	bl	800084a <Fill_Buffer>

    /* Fill the Read buffer */
  Fill_Buffer(aRxBuffer, BUFFER_SIZE, 0xBBBBBBBB);
 80006b2:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 80006b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ba:	4831      	ldr	r0, [pc, #196]	; (8000780 <SDRAM_Startup_Sequence+0xec>)
 80006bc:	f000 f8c5 	bl	800084a <Fill_Buffer>

  /* Write data to the SDRAM memory */
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	e010      	b.n	80006ea <SDRAM_Startup_Sequence+0x56>
  {
    *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uwIndex) = aTxBuffer[uwIndex];
 80006c8:	4b2e      	ldr	r3, [pc, #184]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006ce:	6819      	ldr	r1, [r3, #0]
 80006d0:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SDRAM_Startup_Sequence+0xf4>)
 80006d2:	440b      	add	r3, r1
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4619      	mov	r1, r3
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <SDRAM_Startup_Sequence+0xe8>)
 80006da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006de:	600b      	str	r3, [r1, #0]
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	4a27      	ldr	r2, [pc, #156]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006e8:	6013      	str	r3, [r2, #0]
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006f2:	d3e9      	bcc.n	80006c8 <SDRAM_Startup_Sequence+0x34>
  }

  /* Read back data from the SDRAM memory */
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	e010      	b.n	800071e <SDRAM_Startup_Sequence+0x8a>
  {
    aRxBuffer[uwIndex] = *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uwIndex);
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SDRAM_Startup_Sequence+0xf4>)
 8000702:	4413      	add	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	461a      	mov	r2, r3
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	6812      	ldr	r2, [r2, #0]
 800070e:	491c      	ldr	r1, [pc, #112]	; (8000780 <SDRAM_Startup_Sequence+0xec>)
 8000710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	4a1a      	ldr	r2, [pc, #104]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800071c:	6013      	str	r3, [r2, #0]
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000726:	d3e9      	bcc.n	80006fc <SDRAM_Startup_Sequence+0x68>
  }

  /*##-3- Checking data integrity ############################################*/

  for (uwIndex = 0; (uwIndex < BUFFER_SIZE) && (uwWriteReadStatus == 0); uwIndex++)
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	e015      	b.n	800075c <SDRAM_Startup_Sequence+0xc8>
  {
    if (aRxBuffer[uwIndex] != aTxBuffer[uwIndex])
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <SDRAM_Startup_Sequence+0xec>)
 8000736:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	490f      	ldr	r1, [pc, #60]	; (800077c <SDRAM_Startup_Sequence+0xe8>)
 8000740:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000744:	429a      	cmp	r2, r3
 8000746:	d004      	beq.n	8000752 <SDRAM_Startup_Sequence+0xbe>
    {
      uwWriteReadStatus++;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <SDRAM_Startup_Sequence+0xf8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <SDRAM_Startup_Sequence+0xf8>)
 8000750:	6013      	str	r3, [r2, #0]
  for (uwIndex = 0; (uwIndex < BUFFER_SIZE) && (uwWriteReadStatus == 0); uwIndex++)
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <SDRAM_Startup_Sequence+0xf0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000764:	d203      	bcs.n	800076e <SDRAM_Startup_Sequence+0xda>
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <SDRAM_Startup_Sequence+0xf8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d0e0      	beq.n	8000730 <SDRAM_Startup_Sequence+0x9c>
    }
  }
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	a244250f 	.word	0xa244250f
 800077c:	24000098 	.word	0x24000098
 8000780:	24004098 	.word	0x24004098
 8000784:	24008098 	.word	0x24008098
 8000788:	30000200 	.word	0x30000200
 800078c:	2400809c 	.word	0x2400809c

08000790 <SDRAM_Initialization_Sequence>:



void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	2201      	movs	r2, #1
 80007a2:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2210      	movs	r2, #16
 80007a8:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	2201      	movs	r2, #1
 80007ae:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80007b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ba:	6839      	ldr	r1, [r7, #0]
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f00a fbc9 	bl	800af54 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f002 fc62 	bl	800308c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	2202      	movs	r2, #2
 80007cc:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	2210      	movs	r2, #16
 80007d2:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	2201      	movs	r2, #1
 80007d8:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80007e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e4:	6839      	ldr	r1, [r7, #0]
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f00a fbb4 	bl	800af54 <HAL_SDRAM_SendCommand>

  /* Step 4 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2203      	movs	r2, #3
 80007f0:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	2210      	movs	r2, #16
 80007f6:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	2208      	movs	r2, #8
 80007fc:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000808:	6839      	ldr	r1, [r7, #0]
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f00a fba2 	bl	800af54 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000810:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000814:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	2204      	movs	r2, #4
 800081a:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	2210      	movs	r2, #16
 8000820:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	2201      	movs	r2, #1
 8000826:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800082e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000832:	6839      	ldr	r1, [r7, #0]
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f00a fb8d 	bl	800af54 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, 230);
 800083a:	21e6      	movs	r1, #230	; 0xe6
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f00a fbbe 	bl	800afbe <HAL_SDRAM_ProgramRefreshRate>
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <Fill_Buffer>:

void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
 800084a:	b480      	push	{r7}
 800084c:	b087      	sub	sp, #28
 800084e:	af00      	add	r7, sp, #0
 8000850:	60f8      	str	r0, [r7, #12]
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	e00a      	b.n	8000876 <Fill_Buffer+0x2c>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	4413      	add	r3, r2
 8000868:	6979      	ldr	r1, [r7, #20]
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	440a      	add	r2, r1
 800086e:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	3301      	adds	r3, #1
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	429a      	cmp	r2, r3
 800087c:	d3f0      	bcc.n	8000860 <Fill_Buffer+0x16>
  }
}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	371c      	adds	r7, #28
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f002 fb6a 	bl	8002f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f9f2 	bl	8000c7c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000898:	f000 fa6c 	bl	8000d74 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */
//TODO: need to move DMA init everytime up after GPIO init!!
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089c:	f000 fe08 	bl	80014b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a0:	f000 fd54 	bl	800134c <MX_DMA_Init>
  MX_SPI1_Init();
 80008a4:	f000 fab6 	bl	8000e14 <MX_SPI1_Init>
  MX_TIM1_Init();
 80008a8:	f000 fbbc 	bl	8001024 <MX_TIM1_Init>
  MX_UART4_Init();
 80008ac:	f000 fd00 	bl	80012b0 <MX_UART4_Init>
  MX_FMC_Init();
 80008b0:	f000 fdac 	bl	800140c <MX_FMC_Init>
  MX_SPI2_Init();
 80008b4:	f000 fb06 	bl	8000ec4 <MX_SPI2_Init>
  MX_SPI4_Init();
 80008b8:	f000 fb5c 	bl	8000f74 <MX_SPI4_Init>
  MX_TIM2_Init();
 80008bc:	f000 fc5e 	bl	800117c <MX_TIM2_Init>
  MX_SDMMC1_SD_Init();
 80008c0:	f000 fa8a 	bl	8000dd8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80008c4:	f010 fc62 	bl	801118c <MX_FATFS_Init>
  MX_TIM16_Init();
 80008c8:	f000 fcca 	bl	8001260 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  //spi1_set_exti();
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80008cc:	4bd1      	ldr	r3, [pc, #836]	; (8000c14 <main+0x388>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	4ad0      	ldr	r2, [pc, #832]	; (8000c14 <main+0x388>)
 80008d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008d6:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 80008d8:	4bcf      	ldr	r3, [pc, #828]	; (8000c18 <main+0x38c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80008de:	4bce      	ldr	r3, [pc, #824]	; (8000c18 <main+0x38c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4acd      	ldr	r2, [pc, #820]	; (8000c18 <main+0x38c>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6013      	str	r3, [r2, #0]
  HAL_Delay(500);
 80008ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ee:	f002 fbcd 	bl	800308c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SDRAM_Startup_Sequence(&hsdram1, &fmc_command);
 80008f2:	49ca      	ldr	r1, [pc, #808]	; (8000c1c <main+0x390>)
 80008f4:	48ca      	ldr	r0, [pc, #808]	; (8000c20 <main+0x394>)
 80008f6:	f7ff fecd 	bl	8000694 <SDRAM_Startup_Sequence>
  sd_card_init();
 80008fa:	f000 ffef 	bl	80018dc <sd_card_init>
  HAL_Delay(1000);
 80008fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000902:	f002 fbc3 	bl	800308c <HAL_Delay>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 4);
 8000906:	2204      	movs	r2, #4
 8000908:	2104      	movs	r1, #4
 800090a:	2017      	movs	r0, #23
 800090c:	f002 fce1 	bl	80032d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 1);
 8000910:	2201      	movs	r2, #1
 8000912:	2101      	movs	r1, #1
 8000914:	2028      	movs	r0, #40	; 0x28
 8000916:	f002 fcdc 	bl	80032d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800091a:	2017      	movs	r0, #23
 800091c:	f002 fd01 	bl	8003322 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000920:	2028      	movs	r0, #40	; 0x28
 8000922:	f002 fcfe 	bl	8003322 <HAL_NVIC_DisableIRQ>

  spi1_soft_reset();
 8000926:	f001 fa89 	bl	8001e3c <spi1_soft_reset>
  spi2_soft_reset();
 800092a:	f001 faad 	bl	8001e88 <spi2_soft_reset>
  spi4_soft_reset();
 800092e:	f001 fad1 	bl	8001ed4 <spi4_soft_reset>
  spi1_adc_init(SPS_VALUE_5);
 8000932:	4bbc      	ldr	r3, [pc, #752]	; (8000c24 <main+0x398>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 ffe8 	bl	800190c <spi1_adc_init>
  spi2_adc_init(SPS_VALUE_5);
 800093c:	4bb9      	ldr	r3, [pc, #740]	; (8000c24 <main+0x398>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f001 f8bb 	bl	8001abc <spi2_adc_init>
  spi4_adc_init(SPS_VALUE_5);
 8000946:	4bb7      	ldr	r3, [pc, #732]	; (8000c24 <main+0x398>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f001 f98e 	bl	8001c6c <spi4_adc_init>
//  readRegister();
//  t1 = DWT->CYCCNT;
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8000950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000954:	2220      	movs	r2, #32
 8000956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 800095a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800095e:	2240      	movs	r2, #64	; 0x40
 8000960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8000964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000968:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800096c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000970:	2017      	movs	r0, #23
 8000972:	f002 fcc8 	bl	8003306 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000976:	2028      	movs	r0, #40	; 0x28
 8000978:	f002 fcc5 	bl	8003306 <HAL_NVIC_EnableIRQ>

  // uart IT enable
  HAL_UART_Receive_IT (&huart4, rxUart4Buffer, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	49aa      	ldr	r1, [pc, #680]	; (8000c28 <main+0x39c>)
 8000980:	48aa      	ldr	r0, [pc, #680]	; (8000c2c <main+0x3a0>)
 8000982:	f00d f9b1 	bl	800dce8 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_IT (&huart5, rxUart4Buffer, 1);

  // LED timer enable
  HAL_TIM_Base_Start_IT(&htim16);
 8000986:	48aa      	ldr	r0, [pc, #680]	; (8000c30 <main+0x3a4>)
 8000988:	f00b fbee 	bl	800c168 <HAL_TIM_Base_Start_IT>
  // FIXME main
  //sd_card_test_script();

  //initial setup:
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2120      	movs	r1, #32
 8000990:	48a8      	ldr	r0, [pc, #672]	; (8000c34 <main+0x3a8>)
 8000992:	f005 fd7d 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2110      	movs	r1, #16
 800099a:	48a7      	ldr	r0, [pc, #668]	; (8000c38 <main+0x3ac>)
 800099c:	f005 fd78 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2101      	movs	r1, #1
 80009a4:	48a5      	ldr	r0, [pc, #660]	; (8000c3c <main+0x3b0>)
 80009a6:	f005 fd73 	bl	8006490 <HAL_GPIO_WritePin>

  //run all before main loop
  run_all_adc();
 80009aa:	f001 fa2b 	bl	8001e04 <run_all_adc>

    while (1){

      if (uartNewCommand == true){
 80009ae:	4ba4      	ldr	r3, [pc, #656]	; (8000c40 <main+0x3b4>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0fa      	beq.n	80009ae <main+0x122>
        switch (uartCommand) {
 80009b8:	4ba2      	ldr	r3, [pc, #648]	; (8000c44 <main+0x3b8>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3b30      	subs	r3, #48	; 0x30
 80009c0:	2b47      	cmp	r3, #71	; 0x47
 80009c2:	f200 8153 	bhi.w	8000c6c <main+0x3e0>
 80009c6:	a201      	add	r2, pc, #4	; (adr r2, 80009cc <main+0x140>)
 80009c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009cc:	08000bd7 	.word	0x08000bd7
 80009d0:	08000be3 	.word	0x08000be3
 80009d4:	08000bef 	.word	0x08000bef
 80009d8:	08000bfb 	.word	0x08000bfb
 80009dc:	08000c07 	.word	0x08000c07
 80009e0:	08000c6d 	.word	0x08000c6d
 80009e4:	08000c6d 	.word	0x08000c6d
 80009e8:	08000c6d 	.word	0x08000c6d
 80009ec:	08000c6d 	.word	0x08000c6d
 80009f0:	08000c6d 	.word	0x08000c6d
 80009f4:	08000c6d 	.word	0x08000c6d
 80009f8:	08000c6d 	.word	0x08000c6d
 80009fc:	08000c6d 	.word	0x08000c6d
 8000a00:	08000c6d 	.word	0x08000c6d
 8000a04:	08000c6d 	.word	0x08000c6d
 8000a08:	08000c6d 	.word	0x08000c6d
 8000a0c:	08000c6d 	.word	0x08000c6d
 8000a10:	08000c6d 	.word	0x08000c6d
 8000a14:	08000c6d 	.word	0x08000c6d
 8000a18:	08000c6d 	.word	0x08000c6d
 8000a1c:	08000c6d 	.word	0x08000c6d
 8000a20:	08000c6d 	.word	0x08000c6d
 8000a24:	08000c6d 	.word	0x08000c6d
 8000a28:	08000c6d 	.word	0x08000c6d
 8000a2c:	08000c6d 	.word	0x08000c6d
 8000a30:	08000c6d 	.word	0x08000c6d
 8000a34:	08000c6d 	.word	0x08000c6d
 8000a38:	08000c6d 	.word	0x08000c6d
 8000a3c:	08000c6d 	.word	0x08000c6d
 8000a40:	08000c6d 	.word	0x08000c6d
 8000a44:	08000c6d 	.word	0x08000c6d
 8000a48:	08000c6d 	.word	0x08000c6d
 8000a4c:	08000c6d 	.word	0x08000c6d
 8000a50:	08000c6d 	.word	0x08000c6d
 8000a54:	08000c6d 	.word	0x08000c6d
 8000a58:	08000c6d 	.word	0x08000c6d
 8000a5c:	08000c6d 	.word	0x08000c6d
 8000a60:	08000c6d 	.word	0x08000c6d
 8000a64:	08000c6d 	.word	0x08000c6d
 8000a68:	08000c6d 	.word	0x08000c6d
 8000a6c:	08000c6d 	.word	0x08000c6d
 8000a70:	08000c6d 	.word	0x08000c6d
 8000a74:	08000c6d 	.word	0x08000c6d
 8000a78:	08000c6d 	.word	0x08000c6d
 8000a7c:	08000c6d 	.word	0x08000c6d
 8000a80:	08000c6d 	.word	0x08000c6d
 8000a84:	08000c6d 	.word	0x08000c6d
 8000a88:	08000c6d 	.word	0x08000c6d
 8000a8c:	08000c6d 	.word	0x08000c6d
 8000a90:	08000aed 	.word	0x08000aed
 8000a94:	08000b05 	.word	0x08000b05
 8000a98:	08000b1d 	.word	0x08000b1d
 8000a9c:	08000b35 	.word	0x08000b35
 8000aa0:	08000b4d 	.word	0x08000b4d
 8000aa4:	08000b65 	.word	0x08000b65
 8000aa8:	08000b7d 	.word	0x08000b7d
 8000aac:	08000b97 	.word	0x08000b97
 8000ab0:	08000b9f 	.word	0x08000b9f
 8000ab4:	08000bb7 	.word	0x08000bb7
 8000ab8:	08000c6d 	.word	0x08000c6d
 8000abc:	08000c6d 	.word	0x08000c6d
 8000ac0:	08000c6d 	.word	0x08000c6d
 8000ac4:	08000c6d 	.word	0x08000c6d
 8000ac8:	08000c6d 	.word	0x08000c6d
 8000acc:	08000bbf 	.word	0x08000bbf
 8000ad0:	08000bc7 	.word	0x08000bc7
 8000ad4:	08000c6d 	.word	0x08000c6d
 8000ad8:	08000c6d 	.word	0x08000c6d
 8000adc:	08000c6d 	.word	0x08000c6d
 8000ae0:	08000c6d 	.word	0x08000c6d
 8000ae4:	08000c6d 	.word	0x08000c6d
 8000ae8:	08000bcf 	.word	0x08000bcf
          case 'a': // multiplexer X -> 0
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2120      	movs	r1, #32
 8000af0:	4850      	ldr	r0, [pc, #320]	; (8000c34 <main+0x3a8>)
 8000af2:	f005 fccd 	bl	8006490 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afc:	484d      	ldr	r0, [pc, #308]	; (8000c34 <main+0x3a8>)
 8000afe:	f005 fcc7 	bl	8006490 <HAL_GPIO_WritePin>
            break;
 8000b02:	e0b4      	b.n	8000c6e <main+0x3e2>
          case 'b': // multiplexer X -> 1
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2120      	movs	r1, #32
 8000b08:	484a      	ldr	r0, [pc, #296]	; (8000c34 <main+0x3a8>)
 8000b0a:	f005 fcc1 	bl	8006490 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b14:	4847      	ldr	r0, [pc, #284]	; (8000c34 <main+0x3a8>)
 8000b16:	f005 fcbb 	bl	8006490 <HAL_GPIO_WritePin>
            break;
 8000b1a:	e0a8      	b.n	8000c6e <main+0x3e2>

          case 'c': // multiplexer Y -> 0
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2110      	movs	r1, #16
 8000b20:	4845      	ldr	r0, [pc, #276]	; (8000c38 <main+0x3ac>)
 8000b22:	f005 fcb5 	bl	8006490 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2c:	4841      	ldr	r0, [pc, #260]	; (8000c34 <main+0x3a8>)
 8000b2e:	f005 fcaf 	bl	8006490 <HAL_GPIO_WritePin>
            break;
 8000b32:	e09c      	b.n	8000c6e <main+0x3e2>

          case 'd': // multiplexer Y -> 1
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2110      	movs	r1, #16
 8000b38:	483f      	ldr	r0, [pc, #252]	; (8000c38 <main+0x3ac>)
 8000b3a:	f005 fca9 	bl	8006490 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b44:	483b      	ldr	r0, [pc, #236]	; (8000c34 <main+0x3a8>)
 8000b46:	f005 fca3 	bl	8006490 <HAL_GPIO_WritePin>
            break;
 8000b4a:	e090      	b.n	8000c6e <main+0x3e2>

          case 'e': // multiplexer Z -> 0
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2101      	movs	r1, #1
 8000b50:	483a      	ldr	r0, [pc, #232]	; (8000c3c <main+0x3b0>)
 8000b52:	f005 fc9d 	bl	8006490 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b5c:	4835      	ldr	r0, [pc, #212]	; (8000c34 <main+0x3a8>)
 8000b5e:	f005 fc97 	bl	8006490 <HAL_GPIO_WritePin>
            break;
 8000b62:	e084      	b.n	8000c6e <main+0x3e2>

          case 'f': // multiplexer Z -> 1
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2101      	movs	r1, #1
 8000b68:	4834      	ldr	r0, [pc, #208]	; (8000c3c <main+0x3b0>)
 8000b6a:	f005 fc91 	bl	8006490 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b74:	482f      	ldr	r0, [pc, #188]	; (8000c34 <main+0x3a8>)
 8000b76:	f005 fc8b 	bl	8006490 <HAL_GPIO_WritePin>
            break;
 8000b7a:	e078      	b.n	8000c6e <main+0x3e2>

          //setting of SPi running or not
          case 'g':
            __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8000b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            counterSPI2_EXTI = 0;
 8000b88:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <main+0x3bc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
            enableSPI2Interrupt = true;
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <main+0x3c0>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
//            HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
            break;
 8000b94:	e06b      	b.n	8000c6e <main+0x3e2>

          case 'h':
            enableSPI2Interrupt = false;
 8000b96:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <main+0x3c0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
            //HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
            break;
 8000b9c:	e067      	b.n	8000c6e <main+0x3e2>

          case 'i':
            __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8000b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba2:	2240      	movs	r2, #64	; 0x40
 8000ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            counterSPI1_EXTI = 0;
 8000ba8:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <main+0x3c4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
            enableSPI1Interrupt = true;
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <main+0x3c8>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
//            HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
            break;
 8000bb4:	e05b      	b.n	8000c6e <main+0x3e2>

          case 'j':
            enableSPI1Interrupt = false;
 8000bb6:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <main+0x3c8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
            //HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
            break;
 8000bbc:	e057      	b.n	8000c6e <main+0x3e2>

          case 'p':
            sd_card_write_values_enable = true;
 8000bbe:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <main+0x3cc>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
            break;
 8000bc4:	e053      	b.n	8000c6e <main+0x3e2>

          case 'q':
            sd_card_write_values_enable = false;
 8000bc6:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <main+0x3cc>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
            break;
 8000bcc:	e04f      	b.n	8000c6e <main+0x3e2>
          case 'w':
            HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bce:	2017      	movs	r0, #23
 8000bd0:	f002 fb99 	bl	8003306 <HAL_NVIC_EnableIRQ>
            break;
 8000bd4:	e04b      	b.n	8000c6e <main+0x3e2>

         // Numbers reserved for SPS values
          case '0':
            //set SPS to 5
            setNewSPStoAllADCs(SPS_VALUE_5);
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <main+0x398>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 fa64 	bl	80020a8 <setNewSPStoAllADCs>
            break;
 8000be0:	e045      	b.n	8000c6e <main+0x3e2>
          case '1':
            //set SPS to 20
            setNewSPStoAllADCs(SPS_VALUE_20);
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <main+0x3d0>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 fa5e 	bl	80020a8 <setNewSPStoAllADCs>
            break;
 8000bec:	e03f      	b.n	8000c6e <main+0x3e2>
          case '2':
            //set SPS to 100
            setNewSPStoAllADCs(SPS_VALUE_100);
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <main+0x3d4>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 fa58 	bl	80020a8 <setNewSPStoAllADCs>
            break;
 8000bf8:	e039      	b.n	8000c6e <main+0x3e2>
          case '3':
            //set SPS to 500
            setNewSPStoAllADCs(SPS_VALUE_500);
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <main+0x3d8>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 fa52 	bl	80020a8 <setNewSPStoAllADCs>
            break;
 8000c04:	e033      	b.n	8000c6e <main+0x3e2>
          case '4':
            //set SPS to 1000
            setNewSPStoAllADCs(SPS_VALUE_1000);
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <main+0x3dc>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 fa4c 	bl	80020a8 <setNewSPStoAllADCs>
            break;
 8000c10:	e02d      	b.n	8000c6e <main+0x3e2>
 8000c12:	bf00      	nop
 8000c14:	e000edf0 	.word	0xe000edf0
 8000c18:	e0001000 	.word	0xe0001000
 8000c1c:	240087a4 	.word	0x240087a4
 8000c20:	24008770 	.word	0x24008770
 8000c24:	24000000 	.word	0x24000000
 8000c28:	240087dc 	.word	0x240087dc
 8000c2c:	24008668 	.word	0x24008668
 8000c30:	2400861c 	.word	0x2400861c
 8000c34:	58020000 	.word	0x58020000
 8000c38:	58020800 	.word	0x58020800
 8000c3c:	58020400 	.word	0x58020400
 8000c40:	240087de 	.word	0x240087de
 8000c44:	240087dd 	.word	0x240087dd
 8000c48:	240087b8 	.word	0x240087b8
 8000c4c:	240087e0 	.word	0x240087e0
 8000c50:	240087b4 	.word	0x240087b4
 8000c54:	240087df 	.word	0x240087df
 8000c58:	240087bc 	.word	0x240087bc
 8000c5c:	24000001 	.word	0x24000001
 8000c60:	24000002 	.word	0x24000002
 8000c64:	24000003 	.word	0x24000003
 8000c68:	24000004 	.word	0x24000004
//FIXME
          default:
            break;
 8000c6c:	bf00      	nop
        }
        uartNewCommand = false;
 8000c6e:	4b02      	ldr	r3, [pc, #8]	; (8000c78 <main+0x3ec>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
      if (uartNewCommand == true){
 8000c74:	e69b      	b.n	80009ae <main+0x122>
 8000c76:	bf00      	nop
 8000c78:	240087de 	.word	0x240087de

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b09c      	sub	sp, #112	; 0x70
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	224c      	movs	r2, #76	; 0x4c
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f011 f9ae 	bl	8011fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2220      	movs	r2, #32
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f011 f9a8 	bl	8011fec <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000c9c:	4b33      	ldr	r3, [pc, #204]	; (8000d6c <SystemClock_Config+0xf0>)
 8000c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ca6:	2002      	movs	r0, #2
 8000ca8:	f005 fc40 	bl	800652c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cac:	2300      	movs	r3, #0
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <SystemClock_Config+0xf4>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a2e      	ldr	r2, [pc, #184]	; (8000d70 <SystemClock_Config+0xf4>)
 8000cb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <SystemClock_Config+0xf4>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cc8:	bf00      	nop
 8000cca:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <SystemClock_Config+0xf4>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cd6:	d1f8      	bne.n	8000cca <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000cd8:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <SystemClock_Config+0xf0>)
 8000cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cdc:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <SystemClock_Config+0xf0>)
 8000cde:	f023 0303 	bic.w	r3, r3, #3
 8000ce2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cec:	2340      	movs	r3, #64	; 0x40
 8000cee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000cfc:	2323      	movs	r3, #35	; 0x23
 8000cfe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d00:	2302      	movs	r3, #2
 8000d02:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8000d04:	2301      	movs	r3, #1
 8000d06:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 fc3f 	bl	80065a0 <HAL_RCC_OscConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d28:	f000 fdd2 	bl	80018d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2c:	233f      	movs	r3, #63	; 0x3f
 8000d2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d30:	2303      	movs	r3, #3
 8000d32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d3c:	2340      	movs	r3, #64	; 0x40
 8000d3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d40:	2340      	movs	r3, #64	; 0x40
 8000d42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d4a:	2340      	movs	r3, #64	; 0x40
 8000d4c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2107      	movs	r1, #7
 8000d52:	4618      	mov	r0, r3
 8000d54:	f006 f82a 	bl	8006dac <HAL_RCC_ClockConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000d5e:	f000 fdb7 	bl	80018d0 <Error_Handler>
  }
}
 8000d62:	bf00      	nop
 8000d64:	3770      	adds	r7, #112	; 0x70
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	58024400 	.word	0x58024400
 8000d70:	58024800 	.word	0x58024800

08000d74 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b0ae      	sub	sp, #184	; 0xb8
 8000d78:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	22b8      	movs	r2, #184	; 0xb8
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f011 f933 	bl	8011fec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <PeriphCommonClock_Config+0x60>)
 8000d88:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 8;
 8000d8e:	2308      	movs	r3, #8
 8000d90:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d9e:	23c0      	movs	r3, #192	; 0xc0
 8000da0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000daa:	2302      	movs	r3, #2
 8000dac:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000dae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000db4:	2300      	movs	r3, #0
 8000db6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f006 fb82 	bl	80074c4 <HAL_RCCEx_PeriphCLKConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000dc6:	f000 fd83 	bl	80018d0 <Error_Handler>
  }
}
 8000dca:	bf00      	nop
 8000dcc:	37b8      	adds	r7, #184	; 0xb8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	81010000 	.word	0x81010000

08000dd8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_SDMMC1_SD_Init+0x34>)
 8000dde:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <MX_SDMMC1_SD_Init+0x38>)
 8000de0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <MX_SDMMC1_SD_Init+0x34>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_SDMMC1_SD_Init+0x34>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <MX_SDMMC1_SD_Init+0x34>)
 8000df0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000df4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <MX_SDMMC1_SD_Init+0x34>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 64;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <MX_SDMMC1_SD_Init+0x34>)
 8000dfe:	2240      	movs	r2, #64	; 0x40
 8000e00:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	240080a0 	.word	0x240080a0
 8000e10:	52007000 	.word	0x52007000

08000e14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e18:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e1a:	4a29      	ldr	r2, [pc, #164]	; (8000ec0 <MX_SPI1_Init+0xac>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e1e:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e20:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e26:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e2c:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e2e:	2207      	movs	r2, #7
 8000e30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e32:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e3a:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e58:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_SPI1_Init+0xa8>)
 8000ea8:	f00a f8b2 	bl	800b010 <HAL_SPI_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000eb2:	f000 fd0d 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2400811c 	.word	0x2400811c
 8000ec0:	40013000 	.word	0x40013000

08000ec4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ec8:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000eca:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <MX_SPI2_Init+0xac>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ece:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000ed0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ed4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000edc:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000ede:	2207      	movs	r2, #7
 8000ee0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ee8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000eec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ef0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000ef4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ef8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000efc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f00:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_SPI2_Init+0xa8>)
 8000f58:	f00a f85a 	bl	800b010 <HAL_SPI_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000f62:	f000 fcb5 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	240081a4 	.word	0x240081a4
 8000f70:	40003800 	.word	0x40003800

08000f74 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000f78:	4b28      	ldr	r3, [pc, #160]	; (800101c <MX_SPI4_Init+0xa8>)
 8000f7a:	4a29      	ldr	r2, [pc, #164]	; (8001020 <MX_SPI4_Init+0xac>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000f7e:	4b27      	ldr	r3, [pc, #156]	; (800101c <MX_SPI4_Init+0xa8>)
 8000f80:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f84:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <MX_SPI4_Init+0xa8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <MX_SPI4_Init+0xa8>)
 8000f8e:	2207      	movs	r2, #7
 8000f90:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f92:	4b22      	ldr	r3, [pc, #136]	; (800101c <MX_SPI4_Init+0xa8>)
 8000f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f98:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f9a:	4b20      	ldr	r3, [pc, #128]	; (800101c <MX_SPI4_Init+0xa8>)
 8000f9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000fa0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	; (800101c <MX_SPI4_Init+0xa8>)
 8000fa4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fa8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <MX_SPI4_Init+0xa8>)
 8000fac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fb0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <MX_SPI4_Init+0xa8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <MX_SPI4_Init+0xa8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_SPI4_Init+0xa8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <MX_SPI4_Init+0xa8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_SPI4_Init+0xa8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_SPI4_Init+0xa8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_SPI4_Init+0xa8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_SPI4_Init+0xa8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_SPI4_Init+0xa8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_SPI4_Init+0xa8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <MX_SPI4_Init+0xa8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_SPI4_Init+0xa8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <MX_SPI4_Init+0xa8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_SPI4_Init+0xa8>)
 8001002:	2200      	movs	r2, #0
 8001004:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_SPI4_Init+0xa8>)
 8001008:	f00a f802 	bl	800b010 <HAL_SPI_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8001012:	f000 fc5d 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2400822c 	.word	0x2400822c
 8001020:	40013400 	.word	0x40013400

08001024 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b09c      	sub	sp, #112	; 0x70
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001044:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
 8001054:	615a      	str	r2, [r3, #20]
 8001056:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2234      	movs	r2, #52	; 0x34
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f010 ffc4 	bl	8011fec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001064:	4b43      	ldr	r3, [pc, #268]	; (8001174 <MX_TIM1_Init+0x150>)
 8001066:	4a44      	ldr	r2, [pc, #272]	; (8001178 <MX_TIM1_Init+0x154>)
 8001068:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800106a:	4b42      	ldr	r3, [pc, #264]	; (8001174 <MX_TIM1_Init+0x150>)
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b40      	ldr	r3, [pc, #256]	; (8001174 <MX_TIM1_Init+0x150>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001076:	4b3f      	ldr	r3, [pc, #252]	; (8001174 <MX_TIM1_Init+0x150>)
 8001078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b3d      	ldr	r3, [pc, #244]	; (8001174 <MX_TIM1_Init+0x150>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001084:	4b3b      	ldr	r3, [pc, #236]	; (8001174 <MX_TIM1_Init+0x150>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <MX_TIM1_Init+0x150>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001090:	4838      	ldr	r0, [pc, #224]	; (8001174 <MX_TIM1_Init+0x150>)
 8001092:	f00b f812 	bl	800c0ba <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800109c:	f000 fc18 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010aa:	4619      	mov	r1, r3
 80010ac:	4831      	ldr	r0, [pc, #196]	; (8001174 <MX_TIM1_Init+0x150>)
 80010ae:	f00b fc65 	bl	800c97c <HAL_TIM_ConfigClockSource>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010b8:	f000 fc0a 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010bc:	482d      	ldr	r0, [pc, #180]	; (8001174 <MX_TIM1_Init+0x150>)
 80010be:	f00b f8cb 	bl	800c258 <HAL_TIM_PWM_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010c8:	f000 fc02 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010dc:	4619      	mov	r1, r3
 80010de:	4825      	ldr	r0, [pc, #148]	; (8001174 <MX_TIM1_Init+0x150>)
 80010e0:	f00c fbd0 	bl	800d884 <HAL_TIMEx_MasterConfigSynchronization>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010ea:	f000 fbf1 	bl	80018d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ee:	2360      	movs	r3, #96	; 0x60
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f6:	2300      	movs	r3, #0
 80010f8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010fa:	2300      	movs	r3, #0
 80010fc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800110a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800110e:	2200      	movs	r2, #0
 8001110:	4619      	mov	r1, r3
 8001112:	4818      	ldr	r0, [pc, #96]	; (8001174 <MX_TIM1_Init+0x150>)
 8001114:	f00b fb1e 	bl	800c754 <HAL_TIM_PWM_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800111e:	f000 fbd7 	bl	80018d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001144:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	4619      	mov	r1, r3
 8001156:	4807      	ldr	r0, [pc, #28]	; (8001174 <MX_TIM1_Init+0x150>)
 8001158:	f00c fc22 	bl	800d9a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001162:	f000 fbb5 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001166:	4803      	ldr	r0, [pc, #12]	; (8001174 <MX_TIM1_Init+0x150>)
 8001168:	f001 fbfa 	bl	8002960 <HAL_TIM_MspPostInit>

}
 800116c:	bf00      	nop
 800116e:	3770      	adds	r7, #112	; 0x70
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	24008584 	.word	0x24008584
 8001178:	40010000 	.word	0x40010000

0800117c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08c      	sub	sp, #48	; 0x30
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800119e:	463b      	mov	r3, r7
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <MX_TIM2_Init+0xe0>)
 80011ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <MX_TIM2_Init+0xe0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b28      	ldr	r3, [pc, #160]	; (800125c <MX_TIM2_Init+0xe0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <MX_TIM2_Init+0xe0>)
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295
 80011c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <MX_TIM2_Init+0xe0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <MX_TIM2_Init+0xe0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011d2:	4822      	ldr	r0, [pc, #136]	; (800125c <MX_TIM2_Init+0xe0>)
 80011d4:	f00a ff71 	bl	800c0ba <HAL_TIM_Base_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80011de:	f000 fb77 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80011e2:	481e      	ldr	r0, [pc, #120]	; (800125c <MX_TIM2_Init+0xe0>)
 80011e4:	f00b f899 	bl	800c31a <HAL_TIM_IC_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80011ee:	f000 fb6f 	bl	80018d0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80011f2:	2307      	movs	r3, #7
 80011f4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	4816      	ldr	r0, [pc, #88]	; (800125c <MX_TIM2_Init+0xe0>)
 8001202:	f00b fcb3 	bl	800cb6c <HAL_TIM_SlaveConfigSynchro>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800120c:	f000 fb60 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	480f      	ldr	r0, [pc, #60]	; (800125c <MX_TIM2_Init+0xe0>)
 8001220:	f00c fb30 	bl	800d884 <HAL_TIMEx_MasterConfigSynchronization>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800122a:	f000 fb51 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001232:	2301      	movs	r3, #1
 8001234:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_TIM2_Init+0xe0>)
 8001246:	f00b f9e8 	bl	800c61a <HAL_TIM_IC_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001250:	f000 fb3e 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	3730      	adds	r7, #48	; 0x30
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	240085d0 	.word	0x240085d0

08001260 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <MX_TIM16_Init+0x48>)
 8001266:	4a11      	ldr	r2, [pc, #68]	; (80012ac <MX_TIM16_Init+0x4c>)
 8001268:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 28000-1;
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_TIM16_Init+0x48>)
 800126c:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8001270:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <MX_TIM16_Init+0x48>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <MX_TIM16_Init+0x48>)
 800127a:	f242 720f 	movw	r2, #9999	; 0x270f
 800127e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_TIM16_Init+0x48>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <MX_TIM16_Init+0x48>)
 8001288:	2200      	movs	r2, #0
 800128a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_TIM16_Init+0x48>)
 800128e:	2200      	movs	r2, #0
 8001290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_TIM16_Init+0x48>)
 8001294:	f00a ff11 	bl	800c0ba <HAL_TIM_Base_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800129e:	f000 fb17 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2400861c 	.word	0x2400861c
 80012ac:	40014400 	.word	0x40014400

080012b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <MX_UART4_Init+0x90>)
 80012b6:	4a23      	ldr	r2, [pc, #140]	; (8001344 <MX_UART4_Init+0x94>)
 80012b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 3000000;
 80012ba:	4b21      	ldr	r3, [pc, #132]	; (8001340 <MX_UART4_Init+0x90>)
 80012bc:	4a22      	ldr	r2, [pc, #136]	; (8001348 <MX_UART4_Init+0x98>)
 80012be:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <MX_UART4_Init+0x90>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <MX_UART4_Init+0x90>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_UART4_Init+0x90>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <MX_UART4_Init+0x90>)
 80012d4:	220c      	movs	r2, #12
 80012d6:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_UART4_Init+0x90>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012de:	4b18      	ldr	r3, [pc, #96]	; (8001340 <MX_UART4_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <MX_UART4_Init+0x90>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <MX_UART4_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <MX_UART4_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012f6:	4812      	ldr	r0, [pc, #72]	; (8001340 <MX_UART4_Init+0x90>)
 80012f8:	f00c fc10 	bl	800db1c <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8001302:	f000 fae5 	bl	80018d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001306:	2100      	movs	r1, #0
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <MX_UART4_Init+0x90>)
 800130a:	f00e ffa8 	bl	801025e <HAL_UARTEx_SetTxFifoThreshold>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8001314:	f000 fadc 	bl	80018d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001318:	2100      	movs	r1, #0
 800131a:	4809      	ldr	r0, [pc, #36]	; (8001340 <MX_UART4_Init+0x90>)
 800131c:	f00e ffdd 	bl	80102da <HAL_UARTEx_SetRxFifoThreshold>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 8001326:	f000 fad3 	bl	80018d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_UART4_Init+0x90>)
 800132c:	f00e ff5e 	bl	80101ec <HAL_UARTEx_DisableFifoMode>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 8001336:	f000 facb 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	24008668 	.word	0x24008668
 8001344:	40004c00 	.word	0x40004c00
 8001348:	002dc6c0 	.word	0x002dc6c0

0800134c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <MX_DMA_Init+0xbc>)
 8001354:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001358:	4a2b      	ldr	r2, [pc, #172]	; (8001408 <MX_DMA_Init+0xbc>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <MX_DMA_Init+0xbc>)
 8001364:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001370:	4b25      	ldr	r3, [pc, #148]	; (8001408 <MX_DMA_Init+0xbc>)
 8001372:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001376:	4a24      	ldr	r2, [pc, #144]	; (8001408 <MX_DMA_Init+0xbc>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001380:	4b21      	ldr	r3, [pc, #132]	; (8001408 <MX_DMA_Init+0xbc>)
 8001382:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	200b      	movs	r0, #11
 8001394:	f001 ff9d 	bl	80032d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001398:	200b      	movs	r0, #11
 800139a:	f001 ffb4 	bl	8003306 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	200c      	movs	r0, #12
 80013a4:	f001 ff95 	bl	80032d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013a8:	200c      	movs	r0, #12
 80013aa:	f001 ffac 	bl	8003306 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	200d      	movs	r0, #13
 80013b4:	f001 ff8d 	bl	80032d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80013b8:	200d      	movs	r0, #13
 80013ba:	f001 ffa4 	bl	8003306 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	200e      	movs	r0, #14
 80013c4:	f001 ff85 	bl	80032d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80013c8:	200e      	movs	r0, #14
 80013ca:	f001 ff9c 	bl	8003306 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	200f      	movs	r0, #15
 80013d4:	f001 ff7d 	bl	80032d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80013d8:	200f      	movs	r0, #15
 80013da:	f001 ff94 	bl	8003306 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	202f      	movs	r0, #47	; 0x2f
 80013e4:	f001 ff75 	bl	80032d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80013e8:	202f      	movs	r0, #47	; 0x2f
 80013ea:	f001 ff8c 	bl	8003306 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2038      	movs	r0, #56	; 0x38
 80013f4:	f001 ff6d 	bl	80032d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013f8:	2038      	movs	r0, #56	; 0x38
 80013fa:	f001 ff84 	bl	8003306 <HAL_NVIC_EnableIRQ>

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	58024400 	.word	0x58024400

0800140c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <MX_FMC_Init+0x9c>)
 8001426:	4a21      	ldr	r2, [pc, #132]	; (80014ac <MX_FMC_Init+0xa0>)
 8001428:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <MX_FMC_Init+0x9c>)
 800142c:	2200      	movs	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MX_FMC_Init+0x9c>)
 8001432:	2201      	movs	r2, #1
 8001434:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <MX_FMC_Init+0x9c>)
 8001438:	2208      	movs	r2, #8
 800143a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_FMC_Init+0x9c>)
 800143e:	2210      	movs	r2, #16
 8001440:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <MX_FMC_Init+0x9c>)
 8001444:	2240      	movs	r2, #64	; 0x40
 8001446:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_FMC_Init+0x9c>)
 800144a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800144e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_FMC_Init+0x9c>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_FMC_Init+0x9c>)
 8001458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800145c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_FMC_Init+0x9c>)
 8001460:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <MX_FMC_Init+0x9c>)
 8001468:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800146e:	2302      	movs	r3, #2
 8001470:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 8001472:	2309      	movs	r3, #9
 8001474:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 8001476:	2306      	movs	r3, #6
 8001478:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 800147a:	2309      	movs	r3, #9
 800147c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
 800147e:	2304      	movs	r3, #4
 8001480:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 8001482:	2303      	movs	r3, #3
 8001484:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 8001486:	2303      	movs	r3, #3
 8001488:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4806      	ldr	r0, [pc, #24]	; (80014a8 <MX_FMC_Init+0x9c>)
 8001490:	f009 fd24 	bl	800aedc <HAL_SDRAM_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 800149a:	f000 fa19 	bl	80018d0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800149e:	bf00      	nop
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	24008770 	.word	0x24008770
 80014ac:	52004140 	.word	0x52004140

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08e      	sub	sp, #56	; 0x38
 80014b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014c6:	4b7d      	ldr	r3, [pc, #500]	; (80016bc <MX_GPIO_Init+0x20c>)
 80014c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014cc:	4a7b      	ldr	r2, [pc, #492]	; (80016bc <MX_GPIO_Init+0x20c>)
 80014ce:	f043 0310 	orr.w	r3, r3, #16
 80014d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014d6:	4b79      	ldr	r3, [pc, #484]	; (80016bc <MX_GPIO_Init+0x20c>)
 80014d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	623b      	str	r3, [r7, #32]
 80014e2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e4:	4b75      	ldr	r3, [pc, #468]	; (80016bc <MX_GPIO_Init+0x20c>)
 80014e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014ea:	4a74      	ldr	r2, [pc, #464]	; (80016bc <MX_GPIO_Init+0x20c>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014f4:	4b71      	ldr	r3, [pc, #452]	; (80016bc <MX_GPIO_Init+0x20c>)
 80014f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001502:	4b6e      	ldr	r3, [pc, #440]	; (80016bc <MX_GPIO_Init+0x20c>)
 8001504:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001508:	4a6c      	ldr	r2, [pc, #432]	; (80016bc <MX_GPIO_Init+0x20c>)
 800150a:	f043 0320 	orr.w	r3, r3, #32
 800150e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001512:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <MX_GPIO_Init+0x20c>)
 8001514:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001518:	f003 0320 	and.w	r3, r3, #32
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001520:	4b66      	ldr	r3, [pc, #408]	; (80016bc <MX_GPIO_Init+0x20c>)
 8001522:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001526:	4a65      	ldr	r2, [pc, #404]	; (80016bc <MX_GPIO_Init+0x20c>)
 8001528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800152c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001530:	4b62      	ldr	r3, [pc, #392]	; (80016bc <MX_GPIO_Init+0x20c>)
 8001532:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b5f      	ldr	r3, [pc, #380]	; (80016bc <MX_GPIO_Init+0x20c>)
 8001540:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001544:	4a5d      	ldr	r2, [pc, #372]	; (80016bc <MX_GPIO_Init+0x20c>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800154e:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <MX_GPIO_Init+0x20c>)
 8001550:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155c:	4b57      	ldr	r3, [pc, #348]	; (80016bc <MX_GPIO_Init+0x20c>)
 800155e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001562:	4a56      	ldr	r2, [pc, #344]	; (80016bc <MX_GPIO_Init+0x20c>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800156c:	4b53      	ldr	r3, [pc, #332]	; (80016bc <MX_GPIO_Init+0x20c>)
 800156e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800157a:	4b50      	ldr	r3, [pc, #320]	; (80016bc <MX_GPIO_Init+0x20c>)
 800157c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001580:	4a4e      	ldr	r2, [pc, #312]	; (80016bc <MX_GPIO_Init+0x20c>)
 8001582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001586:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800158a:	4b4c      	ldr	r3, [pc, #304]	; (80016bc <MX_GPIO_Init+0x20c>)
 800158c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001598:	4b48      	ldr	r3, [pc, #288]	; (80016bc <MX_GPIO_Init+0x20c>)
 800159a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800159e:	4a47      	ldr	r2, [pc, #284]	; (80016bc <MX_GPIO_Init+0x20c>)
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015a8:	4b44      	ldr	r3, [pc, #272]	; (80016bc <MX_GPIO_Init+0x20c>)
 80015aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2110      	movs	r1, #16
 80015ba:	4841      	ldr	r0, [pc, #260]	; (80016c0 <MX_GPIO_Init+0x210>)
 80015bc:	f004 ff68 	bl	8006490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MULT_IN_X_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015c0:	2200      	movs	r2, #0
 80015c2:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 80015c6:	483f      	ldr	r0, [pc, #252]	; (80016c4 <MX_GPIO_Init+0x214>)
 80015c8:	f004 ff62 	bl	8006490 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MULT_IN_Y_GPIO_Port, MULT_IN_Y_Pin, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2110      	movs	r1, #16
 80015d0:	483d      	ldr	r0, [pc, #244]	; (80016c8 <MX_GPIO_Init+0x218>)
 80015d2:	f004 ff5d 	bl	8006490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MULT_IN_Z_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f241 0101 	movw	r1, #4097	; 0x1001
 80015dc:	483b      	ldr	r0, [pc, #236]	; (80016cc <MX_GPIO_Init+0x21c>)
 80015de:	f004 ff57 	bl	8006490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10|USB_C_Reset_Pin|USB_C_Alert_Pin, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 80015e8:	4839      	ldr	r0, [pc, #228]	; (80016d0 <MX_GPIO_Init+0x220>)
 80015ea:	f004 ff51 	bl	8006490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015ee:	2310      	movs	r3, #16
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f2:	2301      	movs	r3, #1
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001602:	4619      	mov	r1, r3
 8001604:	482e      	ldr	r0, [pc, #184]	; (80016c0 <MX_GPIO_Init+0x210>)
 8001606:	f004 fd93 	bl	8006130 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800160a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001610:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161e:	4619      	mov	r1, r3
 8001620:	482c      	ldr	r0, [pc, #176]	; (80016d4 <MX_GPIO_Init+0x224>)
 8001622:	f004 fd85 	bl	8006130 <HAL_GPIO_Init>

  /*Configure GPIO pins : MULT_IN_X_Pin PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = MULT_IN_X_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001626:	f44f 53f1 	mov.w	r3, #7712	; 0x1e20
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163c:	4619      	mov	r1, r3
 800163e:	4821      	ldr	r0, [pc, #132]	; (80016c4 <MX_GPIO_Init+0x214>)
 8001640:	f004 fd76 	bl	8006130 <HAL_GPIO_Init>

  /*Configure GPIO pin : MULT_IN_Y_Pin */
  GPIO_InitStruct.Pin = MULT_IN_Y_Pin;
 8001644:	2310      	movs	r3, #16
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2301      	movs	r3, #1
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MULT_IN_Y_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001658:	4619      	mov	r1, r3
 800165a:	481b      	ldr	r0, [pc, #108]	; (80016c8 <MX_GPIO_Init+0x218>)
 800165c:	f004 fd68 	bl	8006130 <HAL_GPIO_Init>

  /*Configure GPIO pins : MULT_IN_Z_Pin PB12 */
  GPIO_InitStruct.Pin = MULT_IN_Z_Pin|GPIO_PIN_12;
 8001660:	f241 0301 	movw	r3, #4097	; 0x1001
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	2301      	movs	r3, #1
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001676:	4619      	mov	r1, r3
 8001678:	4814      	ldr	r0, [pc, #80]	; (80016cc <MX_GPIO_Init+0x21c>)
 800167a:	f004 fd59 	bl	8006130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001682:	2300      	movs	r3, #0
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	4619      	mov	r1, r3
 8001690:	4811      	ldr	r0, [pc, #68]	; (80016d8 <MX_GPIO_Init+0x228>)
 8001692:	f004 fd4d 	bl	8006130 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 USB_C_Reset_Pin USB_C_Alert_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|USB_C_Reset_Pin|USB_C_Alert_Pin;
 8001696:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ac:	4619      	mov	r1, r3
 80016ae:	4808      	ldr	r0, [pc, #32]	; (80016d0 <MX_GPIO_Init+0x220>)
 80016b0:	f004 fd3e 	bl	8006130 <HAL_GPIO_Init>

}
 80016b4:	bf00      	nop
 80016b6:	3738      	adds	r7, #56	; 0x38
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	58024400 	.word	0x58024400
 80016c0:	58021000 	.word	0x58021000
 80016c4:	58020000 	.word	0x58020000
 80016c8:	58020800 	.word	0x58020800
 80016cc:	58020400 	.word	0x58020400
 80016d0:	58021800 	.word	0x58021800
 80016d4:	58021400 	.word	0x58021400
 80016d8:	58020c00 	.word	0x58020c00

080016dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// TODO:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	80fb      	strh	r3, [r7, #6]

  //SPI1 MISO
  if (GPIO_Pin == GPIO_PIN_6){
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	2b40      	cmp	r3, #64	; 0x40
 80016ea:	d109      	bne.n	8001700 <HAL_GPIO_EXTI_Callback+0x24>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80016ec:	2017      	movs	r0, #23
 80016ee:	f001 fe18 	bl	8003322 <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi1, pTxData, spi1Buffer, 4);
 80016f2:	2304      	movs	r3, #4
 80016f4:	4a19      	ldr	r2, [pc, #100]	; (800175c <HAL_GPIO_EXTI_Callback+0x80>)
 80016f6:	491a      	ldr	r1, [pc, #104]	; (8001760 <HAL_GPIO_EXTI_Callback+0x84>)
 80016f8:	481a      	ldr	r0, [pc, #104]	; (8001764 <HAL_GPIO_EXTI_Callback+0x88>)
 80016fa:	f009 ff81 	bl	800b600 <HAL_SPI_TransmitReceive_DMA>
  }
  else if (GPIO_Pin == GPIO_PIN_9){
    __NOP();
    //sendToSDcard = true;
  }
}
 80016fe:	e028      	b.n	8001752 <HAL_GPIO_EXTI_Callback+0x76>
  else if (GPIO_Pin == GPIO_PIN_14){
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001706:	d109      	bne.n	800171c <HAL_GPIO_EXTI_Callback+0x40>
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001708:	2028      	movs	r0, #40	; 0x28
 800170a:	f001 fe0a 	bl	8003322 <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi2, pTxData, spi2Buffer, 4);
 800170e:	2304      	movs	r3, #4
 8001710:	4a15      	ldr	r2, [pc, #84]	; (8001768 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001712:	4913      	ldr	r1, [pc, #76]	; (8001760 <HAL_GPIO_EXTI_Callback+0x84>)
 8001714:	4815      	ldr	r0, [pc, #84]	; (800176c <HAL_GPIO_EXTI_Callback+0x90>)
 8001716:	f009 ff73 	bl	800b600 <HAL_SPI_TransmitReceive_DMA>
}
 800171a:	e01a      	b.n	8001752 <HAL_GPIO_EXTI_Callback+0x76>
  else if (GPIO_Pin == GPIO_PIN_5){
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	2b20      	cmp	r3, #32
 8001720:	d10d      	bne.n	800173e <HAL_GPIO_EXTI_Callback+0x62>
    t1 = DWT->CYCCNT;
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_GPIO_EXTI_Callback+0x94>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4a13      	ldr	r2, [pc, #76]	; (8001774 <HAL_GPIO_EXTI_Callback+0x98>)
 8001728:	6013      	str	r3, [r2, #0]
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800172a:	2017      	movs	r0, #23
 800172c:	f001 fdf9 	bl	8003322 <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi4, pTxData, spi4Buffer, 4);
 8001730:	2304      	movs	r3, #4
 8001732:	4a11      	ldr	r2, [pc, #68]	; (8001778 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001734:	490a      	ldr	r1, [pc, #40]	; (8001760 <HAL_GPIO_EXTI_Callback+0x84>)
 8001736:	4811      	ldr	r0, [pc, #68]	; (800177c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001738:	f009 ff62 	bl	800b600 <HAL_SPI_TransmitReceive_DMA>
}
 800173c:	e009      	b.n	8001752 <HAL_GPIO_EXTI_Callback+0x76>
  else if (GPIO_Pin == GPIO_PIN_7){
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	2b80      	cmp	r3, #128	; 0x80
 8001742:	d101      	bne.n	8001748 <HAL_GPIO_EXTI_Callback+0x6c>
    __NOP();
 8001744:	bf00      	nop
}
 8001746:	e004      	b.n	8001752 <HAL_GPIO_EXTI_Callback+0x76>
  else if (GPIO_Pin == GPIO_PIN_9){
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800174e:	d100      	bne.n	8001752 <HAL_GPIO_EXTI_Callback+0x76>
    __NOP();
 8001750:	bf00      	nop
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	240087c8 	.word	0x240087c8
 8001760:	240087c0 	.word	0x240087c0
 8001764:	2400811c 	.word	0x2400811c
 8001768:	240087cc 	.word	0x240087cc
 800176c:	240081a4 	.word	0x240081a4
 8001770:	e0001000 	.word	0xe0001000
 8001774:	240087d4 	.word	0x240087d4
 8001778:	240087d0 	.word	0x240087d0
 800177c:	2400822c 	.word	0x2400822c

08001780 <HAL_SPI_TxRxCpltCallback>:

//FIXME: changed here from TxRx to Rx
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if (hspi == &hspi1){
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a29      	ldr	r2, [pc, #164]	; (8001830 <HAL_SPI_TxRxCpltCallback+0xb0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d107      	bne.n	80017a0 <HAL_SPI_TxRxCpltCallback+0x20>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8001790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001794:	2240      	movs	r2, #64	; 0x40
 8001796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800179a:	2017      	movs	r0, #23
 800179c:	f001 fdb3 	bl	8003306 <HAL_NVIC_EnableIRQ>
  }

  if (hspi == &hspi2){
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a24      	ldr	r2, [pc, #144]	; (8001834 <HAL_SPI_TxRxCpltCallback+0xb4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d108      	bne.n	80017ba <HAL_SPI_TxRxCpltCallback+0x3a>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 80017a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017b4:	2028      	movs	r0, #40	; 0x28
 80017b6:	f001 fda6 	bl	8003306 <HAL_NVIC_EnableIRQ>
  }

  if (hspi == &hspi4){
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a1e      	ldr	r2, [pc, #120]	; (8001838 <HAL_SPI_TxRxCpltCallback+0xb8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d131      	bne.n	8001826 <HAL_SPI_TxRxCpltCallback+0xa6>
    spi1ValuesStorage[spiValuesBufferCounter] = spi1Buffer;
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <HAL_SPI_TxRxCpltCallback+0xbc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	491e      	ldr	r1, [pc, #120]	; (8001840 <HAL_SPI_TxRxCpltCallback+0xc0>)
 80017c8:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <HAL_SPI_TxRxCpltCallback+0xc4>)
 80017ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    spi1ValuesStorage[spiValuesBufferCounter] = spi2Buffer;
 80017ce:	4b1b      	ldr	r3, [pc, #108]	; (800183c <HAL_SPI_TxRxCpltCallback+0xbc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	491d      	ldr	r1, [pc, #116]	; (8001848 <HAL_SPI_TxRxCpltCallback+0xc8>)
 80017d4:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <HAL_SPI_TxRxCpltCallback+0xc4>)
 80017d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    spi1ValuesStorage[spiValuesBufferCounter] = spi4Buffer;
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_SPI_TxRxCpltCallback+0xbc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	491b      	ldr	r1, [pc, #108]	; (800184c <HAL_SPI_TxRxCpltCallback+0xcc>)
 80017e0:	4a18      	ldr	r2, [pc, #96]	; (8001844 <HAL_SPI_TxRxCpltCallback+0xc4>)
 80017e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    spiValuesBufferCounter++;
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_SPI_TxRxCpltCallback+0xbc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	4a13      	ldr	r2, [pc, #76]	; (800183c <HAL_SPI_TxRxCpltCallback+0xbc>)
 80017ee:	6013      	str	r3, [r2, #0]
    spi_send_all_three_values(spi1Buffer, spi2Buffer, spi4Buffer);
 80017f0:	4a16      	ldr	r2, [pc, #88]	; (800184c <HAL_SPI_TxRxCpltCallback+0xcc>)
 80017f2:	4915      	ldr	r1, [pc, #84]	; (8001848 <HAL_SPI_TxRxCpltCallback+0xc8>)
 80017f4:	4812      	ldr	r0, [pc, #72]	; (8001840 <HAL_SPI_TxRxCpltCallback+0xc0>)
 80017f6:	f000 fb91 	bl	8001f1c <spi_send_all_three_values>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 80017fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fe:	2220      	movs	r2, #32
 8001800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001804:	2017      	movs	r0, #23
 8001806:	f001 fd7e 	bl	8003306 <HAL_NVIC_EnableIRQ>
    enableSPI4Interrupt = true;
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_SPI_TxRxCpltCallback+0xd0>)
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]
    t2 = DWT->CYCCNT;
 8001810:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_SPI_TxRxCpltCallback+0xd4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a10      	ldr	r2, [pc, #64]	; (8001858 <HAL_SPI_TxRxCpltCallback+0xd8>)
 8001816:	6013      	str	r3, [r2, #0]
    unsigned long diff = t2 - t1;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <HAL_SPI_TxRxCpltCallback+0xd8>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_SPI_TxRxCpltCallback+0xdc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	60fb      	str	r3, [r7, #12]
    __NOP();
 8001824:	bf00      	nop
  }
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2400811c 	.word	0x2400811c
 8001834:	240081a4 	.word	0x240081a4
 8001838:	2400822c 	.word	0x2400822c
 800183c:	240087c4 	.word	0x240087c4
 8001840:	240087c8 	.word	0x240087c8
 8001844:	c0000000 	.word	0xc0000000
 8001848:	240087cc 	.word	0x240087cc
 800184c:	240087d0 	.word	0x240087d0
 8001850:	240087e1 	.word	0x240087e1
 8001854:	e0001000 	.word	0xe0001000
 8001858:	240087d8 	.word	0x240087d8
 800185c:	240087d4 	.word	0x240087d4

08001860 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if (huart == &huart4){
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_UART_RxCpltCallback+0x34>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d10c      	bne.n	800188a <HAL_UART_RxCpltCallback+0x2a>
    HAL_UART_Receive_IT (&huart4, rxUart4Buffer, 1);
 8001870:	2201      	movs	r2, #1
 8001872:	4909      	ldr	r1, [pc, #36]	; (8001898 <HAL_UART_RxCpltCallback+0x38>)
 8001874:	4807      	ldr	r0, [pc, #28]	; (8001894 <HAL_UART_RxCpltCallback+0x34>)
 8001876:	f00c fa37 	bl	800dce8 <HAL_UART_Receive_IT>
    uartCommand = rxUart4Buffer[0];
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <HAL_UART_RxCpltCallback+0x38>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_UART_RxCpltCallback+0x3c>)
 8001882:	701a      	strb	r2, [r3, #0]
    uartNewCommand = true;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_UART_RxCpltCallback+0x40>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
//  }else if (huart == &huart5){
//    HAL_UART_Receive_IT (&huart5, rxUart5Buffer, 1);
//    uartCommand = rxUart5Buffer[0];
//    uartNewCommand = true;
  }
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	24008668 	.word	0x24008668
 8001898:	240087dc 	.word	0x240087dc
 800189c:	240087dd 	.word	0x240087dd
 80018a0:	240087de 	.word	0x240087de

080018a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if(htim == &htim16){
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a06      	ldr	r2, [pc, #24]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d104      	bne.n	80018be <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 80018b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80018ba:	f004 fe02 	bl	80064c2 <HAL_GPIO_TogglePin>
  }
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2400861c 	.word	0x2400861c
 80018cc:	58020000 	.word	0x58020000

080018d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d4:	b672      	cpsid	i
}
 80018d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <Error_Handler+0x8>
	...

080018dc <sd_card_init>:
FILINFO fno;
uint8_t nameFileNumber = 1;
bool newMeasurement = false;

void sd_card_init (void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	4907      	ldr	r1, [pc, #28]	; (8001900 <sd_card_init+0x24>)
 80018e4:	4807      	ldr	r0, [pc, #28]	; (8001904 <sd_card_init+0x28>)
 80018e6:	f010 fab5 	bl	8011e54 <f_mount>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <sd_card_init+0x2c>)
 80018f0:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK){
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <sd_card_init+0x2c>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d000      	beq.n	80018fc <sd_card_init+0x20>
    __NOP(); // TODO error handling
 80018fa:	bf00      	nop
  }
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	240087f4 	.word	0x240087f4
 8001904:	240087f8 	.word	0x240087f8
 8001908:	240087e2 	.word	0x240087e2

0800190c <spi1_adc_init>:


uint32_t readIndex=0;
uint8_t adc_values[80];

void spi1_adc_init(uint8_t spsValue){
 800190c:	b580      	push	{r7, lr}
 800190e:	b08e      	sub	sp, #56	; 0x38
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  //GPIOG->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8001916:	2320      	movs	r3, #32
 8001918:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 800191c:	2310      	movs	r3, #16
 800191e:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8001920:	2301      	movs	r3, #1
 8001922:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 8001926:	2300      	movs	r3, #0
 8001928:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 800192a:	2310      	movs	r3, #16
 800192c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8001930:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001934:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8001936:	2302      	movs	r3, #2
 8001938:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 800193a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 800193e:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 8001940:	2328      	movs	r3, #40	; 0x28
 8001942:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 8001944:	2305      	movs	r3, #5
 8001946:	743b      	strb	r3, [r7, #16]
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 800194c:	2306      	movs	r3, #6
 800194e:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 8001950:	2300      	movs	r3, #0
 8001952:	813b      	strh	r3, [r7, #8]

  /*Start init ADC1*/
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800195a:	4856      	ldr	r0, [pc, #344]	; (8001ab4 <spi1_adc_init+0x1a8>)
 800195c:	f004 fd98 	bl	8006490 <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi1, adcChannelRegister, 1, 100);
 8001960:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001964:	2364      	movs	r3, #100	; 0x64
 8001966:	2201      	movs	r2, #1
 8001968:	4853      	ldr	r0, [pc, #332]	; (8001ab8 <spi1_adc_init+0x1ac>)
 800196a:	f009 fc57 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, adcChannel, 2, 100);
 800196e:	f107 0120 	add.w	r1, r7, #32
 8001972:	2364      	movs	r3, #100	; 0x64
 8001974:	2202      	movs	r2, #2
 8001976:	4850      	ldr	r0, [pc, #320]	; (8001ab8 <spi1_adc_init+0x1ac>)
 8001978:	f009 fc50 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 800197c:	2201      	movs	r2, #1
 800197e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001982:	484c      	ldr	r0, [pc, #304]	; (8001ab4 <spi1_adc_init+0x1a8>)
 8001984:	f004 fd84 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001988:	2001      	movs	r0, #1
 800198a:	f001 fb7f 	bl	800308c <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001994:	4847      	ldr	r0, [pc, #284]	; (8001ab4 <spi1_adc_init+0x1a8>)
 8001996:	f004 fd7b 	bl	8006490 <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi1, setupConfigurationRegister, 1, 100);
 800199a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800199e:	2364      	movs	r3, #100	; 0x64
 80019a0:	2201      	movs	r2, #1
 80019a2:	4845      	ldr	r0, [pc, #276]	; (8001ab8 <spi1_adc_init+0x1ac>)
 80019a4:	f009 fc3a 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, setupConfiguration, 2, 100);
 80019a8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80019ac:	2364      	movs	r3, #100	; 0x64
 80019ae:	2202      	movs	r2, #2
 80019b0:	4841      	ldr	r0, [pc, #260]	; (8001ab8 <spi1_adc_init+0x1ac>)
 80019b2:	f009 fc33 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 80019b6:	2201      	movs	r2, #1
 80019b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019bc:	483d      	ldr	r0, [pc, #244]	; (8001ab4 <spi1_adc_init+0x1a8>)
 80019be:	f004 fd67 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f001 fb62 	bl	800308c <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80019c8:	2200      	movs	r2, #0
 80019ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ce:	4839      	ldr	r0, [pc, #228]	; (8001ab4 <spi1_adc_init+0x1a8>)
 80019d0:	f004 fd5e 	bl	8006490 <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi1, adcModeRegister, 1, 100);
 80019d4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80019d8:	2364      	movs	r3, #100	; 0x64
 80019da:	2201      	movs	r2, #1
 80019dc:	4836      	ldr	r0, [pc, #216]	; (8001ab8 <spi1_adc_init+0x1ac>)
 80019de:	f009 fc1d 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, adcMode, 2, 100);
 80019e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80019e6:	2364      	movs	r3, #100	; 0x64
 80019e8:	2202      	movs	r2, #2
 80019ea:	4833      	ldr	r0, [pc, #204]	; (8001ab8 <spi1_adc_init+0x1ac>)
 80019ec:	f009 fc16 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 80019f0:	2201      	movs	r2, #1
 80019f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f6:	482f      	ldr	r0, [pc, #188]	; (8001ab4 <spi1_adc_init+0x1a8>)
 80019f8:	f004 fd4a 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f001 fb45 	bl	800308c <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a08:	482a      	ldr	r0, [pc, #168]	; (8001ab4 <spi1_adc_init+0x1a8>)
 8001a0a:	f004 fd41 	bl	8006490 <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi1, dataWriteSPS_REGISTER, 1, 100);
 8001a0e:	f107 0114 	add.w	r1, r7, #20
 8001a12:	2364      	movs	r3, #100	; 0x64
 8001a14:	2201      	movs	r2, #1
 8001a16:	4828      	ldr	r0, [pc, #160]	; (8001ab8 <spi1_adc_init+0x1ac>)
 8001a18:	f009 fc00 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, dataWriteSPS, 2, 100);
 8001a1c:	f107 0110 	add.w	r1, r7, #16
 8001a20:	2364      	movs	r3, #100	; 0x64
 8001a22:	2202      	movs	r2, #2
 8001a24:	4824      	ldr	r0, [pc, #144]	; (8001ab8 <spi1_adc_init+0x1ac>)
 8001a26:	f009 fbf9 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a30:	4820      	ldr	r0, [pc, #128]	; (8001ab4 <spi1_adc_init+0x1a8>)
 8001a32:	f004 fd2d 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f001 fb28 	bl	800308c <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a42:	481c      	ldr	r0, [pc, #112]	; (8001ab4 <spi1_adc_init+0x1a8>)
 8001a44:	f004 fd24 	bl	8006490 <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi1, dataWriteSyncError_REGISTER, 1, 100);
 8001a48:	f107 010c 	add.w	r1, r7, #12
 8001a4c:	2364      	movs	r3, #100	; 0x64
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4819      	ldr	r0, [pc, #100]	; (8001ab8 <spi1_adc_init+0x1ac>)
 8001a52:	f009 fbe3 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, dataWriteSyncError, 2, 100);
 8001a56:	f107 0108 	add.w	r1, r7, #8
 8001a5a:	2364      	movs	r3, #100	; 0x64
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	4816      	ldr	r0, [pc, #88]	; (8001ab8 <spi1_adc_init+0x1ac>)
 8001a60:	f009 fbdc 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a6a:	4812      	ldr	r0, [pc, #72]	; (8001ab4 <spi1_adc_init+0x1a8>)
 8001a6c:	f004 fd10 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f001 fb0b 	bl	800308c <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <spi1_adc_init+0x1a8>)
 8001a7e:	f004 fd07 	bl	8006490 <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi1, continuousConvEnableRegister, 1, 100);
 8001a82:	f107 011c 	add.w	r1, r7, #28
 8001a86:	2364      	movs	r3, #100	; 0x64
 8001a88:	2201      	movs	r2, #1
 8001a8a:	480b      	ldr	r0, [pc, #44]	; (8001ab8 <spi1_adc_init+0x1ac>)
 8001a8c:	f009 fbc6 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, continuousConvEnable, 2, 100);
 8001a90:	f107 0118 	add.w	r1, r7, #24
 8001a94:	2364      	movs	r3, #100	; 0x64
 8001a96:	2202      	movs	r2, #2
 8001a98:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <spi1_adc_init+0x1ac>)
 8001a9a:	f009 fbbf 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aa4:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <spi1_adc_init+0x1a8>)
 8001aa6:	f004 fcf3 	bl	8006490 <HAL_GPIO_WritePin>
}
 8001aaa:	bf00      	nop
 8001aac:	3738      	adds	r7, #56	; 0x38
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	58021800 	.word	0x58021800
 8001ab8:	2400811c 	.word	0x2400811c

08001abc <spi2_adc_init>:

void spi2_adc_init(uint8_t spsValue){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08e      	sub	sp, #56	; 0x38
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
//  GPIOC->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 8001acc:	2310      	movs	r3, #16
 8001ace:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 8001ada:	2310      	movs	r3, #16
 8001adc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8001ae0:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001ae4:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 8001aea:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8001aee:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 8001af0:	2328      	movs	r3, #40	; 0x28
 8001af2:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 8001af4:	2305      	movs	r3, #5
 8001af6:	743b      	strb	r3, [r7, #16]
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 8001afc:	2306      	movs	r3, #6
 8001afe:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 8001b00:	2300      	movs	r3, #0
 8001b02:	813b      	strh	r3, [r7, #8]

  /*Start init ADC2*/
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b0a:	4856      	ldr	r0, [pc, #344]	; (8001c64 <spi2_adc_init+0x1a8>)
 8001b0c:	f004 fcc0 	bl	8006490 <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi2, adcChannelRegister, 1, 100);
 8001b10:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001b14:	2364      	movs	r3, #100	; 0x64
 8001b16:	2201      	movs	r2, #1
 8001b18:	4853      	ldr	r0, [pc, #332]	; (8001c68 <spi2_adc_init+0x1ac>)
 8001b1a:	f009 fb7f 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, adcChannel, 2, 100);
 8001b1e:	f107 0120 	add.w	r1, r7, #32
 8001b22:	2364      	movs	r3, #100	; 0x64
 8001b24:	2202      	movs	r2, #2
 8001b26:	4850      	ldr	r0, [pc, #320]	; (8001c68 <spi2_adc_init+0x1ac>)
 8001b28:	f009 fb78 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b32:	484c      	ldr	r0, [pc, #304]	; (8001c64 <spi2_adc_init+0x1a8>)
 8001b34:	f004 fcac 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f001 faa7 	bl	800308c <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b44:	4847      	ldr	r0, [pc, #284]	; (8001c64 <spi2_adc_init+0x1a8>)
 8001b46:	f004 fca3 	bl	8006490 <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi2, setupConfigurationRegister, 1, 100);
 8001b4a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001b4e:	2364      	movs	r3, #100	; 0x64
 8001b50:	2201      	movs	r2, #1
 8001b52:	4845      	ldr	r0, [pc, #276]	; (8001c68 <spi2_adc_init+0x1ac>)
 8001b54:	f009 fb62 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, setupConfiguration, 2, 100);
 8001b58:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001b5c:	2364      	movs	r3, #100	; 0x64
 8001b5e:	2202      	movs	r2, #2
 8001b60:	4841      	ldr	r0, [pc, #260]	; (8001c68 <spi2_adc_init+0x1ac>)
 8001b62:	f009 fb5b 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001b66:	2201      	movs	r2, #1
 8001b68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6c:	483d      	ldr	r0, [pc, #244]	; (8001c64 <spi2_adc_init+0x1a8>)
 8001b6e:	f004 fc8f 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001b72:	2001      	movs	r0, #1
 8001b74:	f001 fa8a 	bl	800308c <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b7e:	4839      	ldr	r0, [pc, #228]	; (8001c64 <spi2_adc_init+0x1a8>)
 8001b80:	f004 fc86 	bl	8006490 <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi2, adcModeRegister, 1, 100);
 8001b84:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001b88:	2364      	movs	r3, #100	; 0x64
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4836      	ldr	r0, [pc, #216]	; (8001c68 <spi2_adc_init+0x1ac>)
 8001b8e:	f009 fb45 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, adcMode, 2, 100);
 8001b92:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b96:	2364      	movs	r3, #100	; 0x64
 8001b98:	2202      	movs	r2, #2
 8001b9a:	4833      	ldr	r0, [pc, #204]	; (8001c68 <spi2_adc_init+0x1ac>)
 8001b9c:	f009 fb3e 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba6:	482f      	ldr	r0, [pc, #188]	; (8001c64 <spi2_adc_init+0x1a8>)
 8001ba8:	f004 fc72 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001bac:	2001      	movs	r0, #1
 8001bae:	f001 fa6d 	bl	800308c <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb8:	482a      	ldr	r0, [pc, #168]	; (8001c64 <spi2_adc_init+0x1a8>)
 8001bba:	f004 fc69 	bl	8006490 <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi2, dataWriteSPS_REGISTER, 1, 100);
 8001bbe:	f107 0114 	add.w	r1, r7, #20
 8001bc2:	2364      	movs	r3, #100	; 0x64
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4828      	ldr	r0, [pc, #160]	; (8001c68 <spi2_adc_init+0x1ac>)
 8001bc8:	f009 fb28 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, dataWriteSPS, 2, 100);
 8001bcc:	f107 0110 	add.w	r1, r7, #16
 8001bd0:	2364      	movs	r3, #100	; 0x64
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4824      	ldr	r0, [pc, #144]	; (8001c68 <spi2_adc_init+0x1ac>)
 8001bd6:	f009 fb21 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001be0:	4820      	ldr	r0, [pc, #128]	; (8001c64 <spi2_adc_init+0x1a8>)
 8001be2:	f004 fc55 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f001 fa50 	bl	800308c <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bf2:	481c      	ldr	r0, [pc, #112]	; (8001c64 <spi2_adc_init+0x1a8>)
 8001bf4:	f004 fc4c 	bl	8006490 <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi2, dataWriteSyncError_REGISTER, 1, 100);
 8001bf8:	f107 010c 	add.w	r1, r7, #12
 8001bfc:	2364      	movs	r3, #100	; 0x64
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4819      	ldr	r0, [pc, #100]	; (8001c68 <spi2_adc_init+0x1ac>)
 8001c02:	f009 fb0b 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, dataWriteSyncError, 2, 100);
 8001c06:	f107 0108 	add.w	r1, r7, #8
 8001c0a:	2364      	movs	r3, #100	; 0x64
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	4816      	ldr	r0, [pc, #88]	; (8001c68 <spi2_adc_init+0x1ac>)
 8001c10:	f009 fb04 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001c14:	2201      	movs	r2, #1
 8001c16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c1a:	4812      	ldr	r0, [pc, #72]	; (8001c64 <spi2_adc_init+0x1a8>)
 8001c1c:	f004 fc38 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001c20:	2001      	movs	r0, #1
 8001c22:	f001 fa33 	bl	800308c <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2c:	480d      	ldr	r0, [pc, #52]	; (8001c64 <spi2_adc_init+0x1a8>)
 8001c2e:	f004 fc2f 	bl	8006490 <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi2, continuousConvEnableRegister, 1, 100);
 8001c32:	f107 011c 	add.w	r1, r7, #28
 8001c36:	2364      	movs	r3, #100	; 0x64
 8001c38:	2201      	movs	r2, #1
 8001c3a:	480b      	ldr	r0, [pc, #44]	; (8001c68 <spi2_adc_init+0x1ac>)
 8001c3c:	f009 faee 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, continuousConvEnable, 2, 100);
 8001c40:	f107 0118 	add.w	r1, r7, #24
 8001c44:	2364      	movs	r3, #100	; 0x64
 8001c46:	2202      	movs	r2, #2
 8001c48:	4807      	ldr	r0, [pc, #28]	; (8001c68 <spi2_adc_init+0x1ac>)
 8001c4a:	f009 fae7 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c54:	4803      	ldr	r0, [pc, #12]	; (8001c64 <spi2_adc_init+0x1a8>)
 8001c56:	f004 fc1b 	bl	8006490 <HAL_GPIO_WritePin>
}
 8001c5a:	bf00      	nop
 8001c5c:	3738      	adds	r7, #56	; 0x38
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	58020400 	.word	0x58020400
 8001c68:	240081a4 	.word	0x240081a4

08001c6c <spi4_adc_init>:

void spi4_adc_init(uint8_t spsValue){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08e      	sub	sp, #56	; 0x38
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
//  GPIOC->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8001c76:	2320      	movs	r3, #32
 8001c78:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8001c80:	2301      	movs	r3, #1
 8001c82:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 8001c86:	2300      	movs	r3, #0
 8001c88:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 8001c8a:	2310      	movs	r3, #16
 8001c8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8001c90:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001c94:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8001c96:	2302      	movs	r3, #2
 8001c98:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 8001c9a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8001c9e:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 8001ca0:	2328      	movs	r3, #40	; 0x28
 8001ca2:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	743b      	strb	r3, [r7, #16]
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 8001cac:	2306      	movs	r3, #6
 8001cae:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	813b      	strh	r3, [r7, #8]

  /*Start init ADC4*/
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2110      	movs	r1, #16
 8001cb8:	4850      	ldr	r0, [pc, #320]	; (8001dfc <spi4_adc_init+0x190>)
 8001cba:	f004 fbe9 	bl	8006490 <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi4, adcChannelRegister, 1, 100);
 8001cbe:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001cc2:	2364      	movs	r3, #100	; 0x64
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	484e      	ldr	r0, [pc, #312]	; (8001e00 <spi4_adc_init+0x194>)
 8001cc8:	f009 faa8 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, adcChannel, 2, 100);
 8001ccc:	f107 0120 	add.w	r1, r7, #32
 8001cd0:	2364      	movs	r3, #100	; 0x64
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	484a      	ldr	r0, [pc, #296]	; (8001e00 <spi4_adc_init+0x194>)
 8001cd6:	f009 faa1 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001cda:	2201      	movs	r2, #1
 8001cdc:	2110      	movs	r1, #16
 8001cde:	4847      	ldr	r0, [pc, #284]	; (8001dfc <spi4_adc_init+0x190>)
 8001ce0:	f004 fbd6 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f001 f9d1 	bl	800308c <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2110      	movs	r1, #16
 8001cee:	4843      	ldr	r0, [pc, #268]	; (8001dfc <spi4_adc_init+0x190>)
 8001cf0:	f004 fbce 	bl	8006490 <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi4, setupConfigurationRegister, 1, 100);
 8001cf4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001cf8:	2364      	movs	r3, #100	; 0x64
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4840      	ldr	r0, [pc, #256]	; (8001e00 <spi4_adc_init+0x194>)
 8001cfe:	f009 fa8d 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, setupConfiguration, 2, 100);
 8001d02:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001d06:	2364      	movs	r3, #100	; 0x64
 8001d08:	2202      	movs	r2, #2
 8001d0a:	483d      	ldr	r0, [pc, #244]	; (8001e00 <spi4_adc_init+0x194>)
 8001d0c:	f009 fa86 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001d10:	2201      	movs	r2, #1
 8001d12:	2110      	movs	r1, #16
 8001d14:	4839      	ldr	r0, [pc, #228]	; (8001dfc <spi4_adc_init+0x190>)
 8001d16:	f004 fbbb 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f001 f9b6 	bl	800308c <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2110      	movs	r1, #16
 8001d24:	4835      	ldr	r0, [pc, #212]	; (8001dfc <spi4_adc_init+0x190>)
 8001d26:	f004 fbb3 	bl	8006490 <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi4, adcModeRegister, 1, 100);
 8001d2a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001d2e:	2364      	movs	r3, #100	; 0x64
 8001d30:	2201      	movs	r2, #1
 8001d32:	4833      	ldr	r0, [pc, #204]	; (8001e00 <spi4_adc_init+0x194>)
 8001d34:	f009 fa72 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, adcMode, 2, 100);
 8001d38:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d3c:	2364      	movs	r3, #100	; 0x64
 8001d3e:	2202      	movs	r2, #2
 8001d40:	482f      	ldr	r0, [pc, #188]	; (8001e00 <spi4_adc_init+0x194>)
 8001d42:	f009 fa6b 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001d46:	2201      	movs	r2, #1
 8001d48:	2110      	movs	r1, #16
 8001d4a:	482c      	ldr	r0, [pc, #176]	; (8001dfc <spi4_adc_init+0x190>)
 8001d4c:	f004 fba0 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001d50:	2001      	movs	r0, #1
 8001d52:	f001 f99b 	bl	800308c <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2110      	movs	r1, #16
 8001d5a:	4828      	ldr	r0, [pc, #160]	; (8001dfc <spi4_adc_init+0x190>)
 8001d5c:	f004 fb98 	bl	8006490 <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi4, dataWriteSPS_REGISTER, 1, 100);
 8001d60:	f107 0114 	add.w	r1, r7, #20
 8001d64:	2364      	movs	r3, #100	; 0x64
 8001d66:	2201      	movs	r2, #1
 8001d68:	4825      	ldr	r0, [pc, #148]	; (8001e00 <spi4_adc_init+0x194>)
 8001d6a:	f009 fa57 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, dataWriteSPS, 2, 100);
 8001d6e:	f107 0110 	add.w	r1, r7, #16
 8001d72:	2364      	movs	r3, #100	; 0x64
 8001d74:	2202      	movs	r2, #2
 8001d76:	4822      	ldr	r0, [pc, #136]	; (8001e00 <spi4_adc_init+0x194>)
 8001d78:	f009 fa50 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2110      	movs	r1, #16
 8001d80:	481e      	ldr	r0, [pc, #120]	; (8001dfc <spi4_adc_init+0x190>)
 8001d82:	f004 fb85 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001d86:	2001      	movs	r0, #1
 8001d88:	f001 f980 	bl	800308c <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2110      	movs	r1, #16
 8001d90:	481a      	ldr	r0, [pc, #104]	; (8001dfc <spi4_adc_init+0x190>)
 8001d92:	f004 fb7d 	bl	8006490 <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi4, dataWriteSyncError_REGISTER, 1, 100);
 8001d96:	f107 010c 	add.w	r1, r7, #12
 8001d9a:	2364      	movs	r3, #100	; 0x64
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4818      	ldr	r0, [pc, #96]	; (8001e00 <spi4_adc_init+0x194>)
 8001da0:	f009 fa3c 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, dataWriteSyncError, 2, 100);
 8001da4:	f107 0108 	add.w	r1, r7, #8
 8001da8:	2364      	movs	r3, #100	; 0x64
 8001daa:	2202      	movs	r2, #2
 8001dac:	4814      	ldr	r0, [pc, #80]	; (8001e00 <spi4_adc_init+0x194>)
 8001dae:	f009 fa35 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001db2:	2201      	movs	r2, #1
 8001db4:	2110      	movs	r1, #16
 8001db6:	4811      	ldr	r0, [pc, #68]	; (8001dfc <spi4_adc_init+0x190>)
 8001db8:	f004 fb6a 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f001 f965 	bl	800308c <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2110      	movs	r1, #16
 8001dc6:	480d      	ldr	r0, [pc, #52]	; (8001dfc <spi4_adc_init+0x190>)
 8001dc8:	f004 fb62 	bl	8006490 <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi4, continuousConvEnableRegister, 1, 100);
 8001dcc:	f107 011c 	add.w	r1, r7, #28
 8001dd0:	2364      	movs	r3, #100	; 0x64
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	480a      	ldr	r0, [pc, #40]	; (8001e00 <spi4_adc_init+0x194>)
 8001dd6:	f009 fa21 	bl	800b21c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, continuousConvEnable, 2, 100);
 8001dda:	f107 0118 	add.w	r1, r7, #24
 8001dde:	2364      	movs	r3, #100	; 0x64
 8001de0:	2202      	movs	r2, #2
 8001de2:	4807      	ldr	r0, [pc, #28]	; (8001e00 <spi4_adc_init+0x194>)
 8001de4:	f009 fa1a 	bl	800b21c <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001de8:	2201      	movs	r2, #1
 8001dea:	2110      	movs	r1, #16
 8001dec:	4803      	ldr	r0, [pc, #12]	; (8001dfc <spi4_adc_init+0x190>)
 8001dee:	f004 fb4f 	bl	8006490 <HAL_GPIO_WritePin>
}
 8001df2:	bf00      	nop
 8001df4:	3738      	adds	r7, #56	; 0x38
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	58021000 	.word	0x58021000
 8001e00:	2400822c 	.word	0x2400822c

08001e04 <run_all_adc>:


void run_all_adc(void){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e0e:	4808      	ldr	r0, [pc, #32]	; (8001e30 <run_all_adc+0x2c>)
 8001e10:	f004 fb3e 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e1a:	4806      	ldr	r0, [pc, #24]	; (8001e34 <run_all_adc+0x30>)
 8001e1c:	f004 fb38 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2110      	movs	r1, #16
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <run_all_adc+0x34>)
 8001e26:	f004 fb33 	bl	8006490 <HAL_GPIO_WritePin>
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	58021800 	.word	0x58021800
 8001e34:	58020400 	.word	0x58020400
 8001e38:	58021000 	.word	0x58021000

08001e3c <spi1_soft_reset>:
      HAL_UART_Transmit(&huart5, (uint8_t*)", ", 2, 10);
      HAL_Delay(10);
  }
}

void spi1_soft_reset(void){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8001e42:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <spi1_soft_reset+0x40>)
 8001e44:	463b      	mov	r3, r7
 8001e46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e4a:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e54:	480a      	ldr	r0, [pc, #40]	; (8001e80 <spi1_soft_reset+0x44>)
 8001e56:	f004 fb1b 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, softResetValue, 8, 100);
 8001e5a:	4639      	mov	r1, r7
 8001e5c:	2364      	movs	r3, #100	; 0x64
 8001e5e:	2208      	movs	r2, #8
 8001e60:	4808      	ldr	r0, [pc, #32]	; (8001e84 <spi1_soft_reset+0x48>)
 8001e62:	f009 f9db 	bl	800b21c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8001e66:	2201      	movs	r2, #1
 8001e68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e6c:	4804      	ldr	r0, [pc, #16]	; (8001e80 <spi1_soft_reset+0x44>)
 8001e6e:	f004 fb0f 	bl	8006490 <HAL_GPIO_WritePin>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	080128fc 	.word	0x080128fc
 8001e80:	58021800 	.word	0x58021800
 8001e84:	2400811c 	.word	0x2400811c

08001e88 <spi2_soft_reset>:

void spi2_soft_reset(void){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8001e8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <spi2_soft_reset+0x40>)
 8001e90:	463b      	mov	r3, r7
 8001e92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e96:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ea0:	480a      	ldr	r0, [pc, #40]	; (8001ecc <spi2_soft_reset+0x44>)
 8001ea2:	f004 faf5 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, softResetValue, 8, 100);
 8001ea6:	4639      	mov	r1, r7
 8001ea8:	2364      	movs	r3, #100	; 0x64
 8001eaa:	2208      	movs	r2, #8
 8001eac:	4808      	ldr	r0, [pc, #32]	; (8001ed0 <spi2_soft_reset+0x48>)
 8001eae:	f009 f9b5 	bl	800b21c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb8:	4804      	ldr	r0, [pc, #16]	; (8001ecc <spi2_soft_reset+0x44>)
 8001eba:	f004 fae9 	bl	8006490 <HAL_GPIO_WritePin>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	080128fc 	.word	0x080128fc
 8001ecc:	58020400 	.word	0x58020400
 8001ed0:	240081a4 	.word	0x240081a4

08001ed4 <spi4_soft_reset>:

void spi4_soft_reset(void){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8001eda:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <spi4_soft_reset+0x3c>)
 8001edc:	463b      	mov	r3, r7
 8001ede:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ee2:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2110      	movs	r1, #16
 8001eea:	480a      	ldr	r0, [pc, #40]	; (8001f14 <spi4_soft_reset+0x40>)
 8001eec:	f004 fad0 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi4, softResetValue, 8, 100);
 8001ef0:	4639      	mov	r1, r7
 8001ef2:	2364      	movs	r3, #100	; 0x64
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	4808      	ldr	r0, [pc, #32]	; (8001f18 <spi4_soft_reset+0x44>)
 8001ef8:	f009 f990 	bl	800b21c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8001efc:	2201      	movs	r2, #1
 8001efe:	2110      	movs	r1, #16
 8001f00:	4804      	ldr	r0, [pc, #16]	; (8001f14 <spi4_soft_reset+0x40>)
 8001f02:	f004 fac5 	bl	8006490 <HAL_GPIO_WritePin>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	080128fc 	.word	0x080128fc
 8001f14:	58021000 	.word	0x58021000
 8001f18:	2400822c 	.word	0x2400822c

08001f1c <spi_send_all_three_values>:
  }
  HAL_UART_Transmit(&huart4, (uint8_t*)"\n\r", 2, 10);
}


void spi_send_all_three_values(uint8_t* adcRawValue_x, uint8_t* adcRawValue_y, uint8_t* adcRawValue_z){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b0a4      	sub	sp, #144	; 0x90
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  uint32_t value_x = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t value_y = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t value_z = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint8_t uartBuffer_x[14];
  uint8_t uartBuffer_y[14];
  uint8_t uartBuffer_z[14];
  uint8_t concatenatedBuffer[39];

  value_x = (uint32_t)adcRawValue_x[0];
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x<<8;
 8001f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x | adcRawValue_x[1];
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x<<8;
 8001f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f60:	021b      	lsls	r3, r3, #8
 8001f62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x | adcRawValue_x[2];
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3302      	adds	r3, #2
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x<<8;
 8001f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  value_x = value_x | adcRawValue_x[3];
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3303      	adds	r3, #3
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  value_y = (uint32_t)adcRawValue_y[0];
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y<<8;
 8001f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y | adcRawValue_y[1];
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y<<8;
 8001fb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y | adcRawValue_y[2];
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y<<8;
 8001fd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  value_y = value_y | adcRawValue_y[3];
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	3303      	adds	r3, #3
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  value_z = (uint32_t)adcRawValue_z[0];
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z<<8;
 8001ff6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z | adcRawValue_z[1];
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3301      	adds	r3, #1
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002006:	4313      	orrs	r3, r2
 8002008:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z<<8;
 800200a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z | adcRawValue_z[2];
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3302      	adds	r3, #2
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800201a:	4313      	orrs	r3, r2
 800201c:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z<<8;
 800201e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	67fb      	str	r3, [r7, #124]	; 0x7c
  value_z = value_z | adcRawValue_z[3];
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3303      	adds	r3, #3
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800202e:	4313      	orrs	r3, r2
 8002030:	67fb      	str	r3, [r7, #124]	; 0x7c

  int length_x = sprintf((char *)uartBuffer_x, "%10lu", value_x);
 8002032:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002036:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800203a:	4918      	ldr	r1, [pc, #96]	; (800209c <spi_send_all_three_values+0x180>)
 800203c:	4618      	mov	r0, r3
 800203e:	f00f ffdd 	bl	8011ffc <siprintf>
 8002042:	67b8      	str	r0, [r7, #120]	; 0x78
  int length_y = sprintf((char *)uartBuffer_y, "%10lu", value_y);
 8002044:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002048:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800204c:	4913      	ldr	r1, [pc, #76]	; (800209c <spi_send_all_three_values+0x180>)
 800204e:	4618      	mov	r0, r3
 8002050:	f00f ffd4 	bl	8011ffc <siprintf>
 8002054:	6778      	str	r0, [r7, #116]	; 0x74
  int length_z = sprintf((char *)uartBuffer_z, "%10lu", value_z);
 8002056:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800205a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800205c:	490f      	ldr	r1, [pc, #60]	; (800209c <spi_send_all_three_values+0x180>)
 800205e:	4618      	mov	r0, r3
 8002060:	f00f ffcc 	bl	8011ffc <siprintf>
 8002064:	6738      	str	r0, [r7, #112]	; 0x70

  int lengthConCat = sprintf((char *)concatenatedBuffer, "%s %s %s\n", (char*)uartBuffer_x, (char*)uartBuffer_y, (char*)uartBuffer_z);
 8002066:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800206a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800206e:	f107 0014 	add.w	r0, r7, #20
 8002072:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	460b      	mov	r3, r1
 800207a:	4909      	ldr	r1, [pc, #36]	; (80020a0 <spi_send_all_three_values+0x184>)
 800207c:	f00f ffbe 	bl	8011ffc <siprintf>
 8002080:	66f8      	str	r0, [r7, #108]	; 0x6c

  HAL_UART_Transmit(&huart4, concatenatedBuffer, 34,100);
 8002082:	f107 0114 	add.w	r1, r7, #20
 8002086:	2364      	movs	r3, #100	; 0x64
 8002088:	2222      	movs	r2, #34	; 0x22
 800208a:	4806      	ldr	r0, [pc, #24]	; (80020a4 <spi_send_all_three_values+0x188>)
 800208c:	f00b fd96 	bl	800dbbc <HAL_UART_Transmit>
  __NOP();
 8002090:	bf00      	nop
//  HAL_UART_Transmit(&huart4, uartBuffer_y, (uint16_t)length_y, 10);
//  HAL_UART_Transmit(&huart4, ", z: ", 5, 10);
//  HAL_UART_Transmit(&huart4, uartBuffer_z, (uint16_t)length_z, 10);
//  HAL_UART_Transmit(&huart4, "\n", 1, 10);

}
 8002092:	bf00      	nop
 8002094:	3788      	adds	r7, #136	; 0x88
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	08012924 	.word	0x08012924
 80020a0:	0801292c 	.word	0x0801292c
 80020a4:	24008668 	.word	0x24008668

080020a8 <setNewSPStoAllADCs>:
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}



void setNewSPStoAllADCs(uint8_t spsValue){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80020b2:	2017      	movs	r0, #23
 80020b4:	f001 f935 	bl	8003322 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80020b8:	2028      	movs	r0, #40	; 0x28
 80020ba:	f001 f932 	bl	8003322 <HAL_NVIC_DisableIRQ>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 80020be:	2201      	movs	r2, #1
 80020c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020c4:	481f      	ldr	r0, [pc, #124]	; (8002144 <setNewSPStoAllADCs+0x9c>)
 80020c6:	f004 f9e3 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 80020ca:	2201      	movs	r2, #1
 80020cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020d0:	481d      	ldr	r0, [pc, #116]	; (8002148 <setNewSPStoAllADCs+0xa0>)
 80020d2:	f004 f9dd 	bl	8006490 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 80020d6:	2201      	movs	r2, #1
 80020d8:	2110      	movs	r1, #16
 80020da:	481c      	ldr	r0, [pc, #112]	; (800214c <setNewSPStoAllADCs+0xa4>)
 80020dc:	f004 f9d8 	bl	8006490 <HAL_GPIO_WritePin>
  spi1_soft_reset();
 80020e0:	f7ff feac 	bl	8001e3c <spi1_soft_reset>
  spi2_soft_reset();
 80020e4:	f7ff fed0 	bl	8001e88 <spi2_soft_reset>
  spi4_soft_reset();
 80020e8:	f7ff fef4 	bl	8001ed4 <spi4_soft_reset>
  spi1_adc_init(spsValue);
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fc0c 	bl	800190c <spi1_adc_init>
  spi2_adc_init(spsValue);
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fce0 	bl	8001abc <spi2_adc_init>
  spi4_adc_init(spsValue);
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fdb4 	bl	8001c6c <spi4_adc_init>
  run_all_adc();
 8002104:	f7ff fe7e 	bl	8001e04 <run_all_adc>
  HAL_Delay(1);
 8002108:	2001      	movs	r0, #1
 800210a:	f000 ffbf 	bl	800308c <HAL_Delay>
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 800210e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002112:	2220      	movs	r2, #32
 8002114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8002118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211c:	2240      	movs	r2, #64	; 0x40
 800211e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8002122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800212a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800212e:	2017      	movs	r0, #23
 8002130:	f001 f8e9 	bl	8003306 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002134:	2028      	movs	r0, #40	; 0x28
 8002136:	f001 f8e6 	bl	8003306 <HAL_NVIC_EnableIRQ>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	58021800 	.word	0x58021800
 8002148:	58020400 	.word	0x58020400
 800214c:	58021000 	.word	0x58021000

08002150 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_MspInit+0x30>)
 8002158:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800215c:	4a08      	ldr	r2, [pc, #32]	; (8002180 <HAL_MspInit+0x30>)
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_MspInit+0x30>)
 8002168:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	58024400 	.word	0x58024400

08002184 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	; 0x30
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a3e      	ldr	r2, [pc, #248]	; (800229c <HAL_SD_MspInit+0x118>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d175      	bne.n	8002292 <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80021a6:	4b3e      	ldr	r3, [pc, #248]	; (80022a0 <HAL_SD_MspInit+0x11c>)
 80021a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80021ac:	4a3c      	ldr	r2, [pc, #240]	; (80022a0 <HAL_SD_MspInit+0x11c>)
 80021ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b2:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80021b6:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <HAL_SD_MspInit+0x11c>)
 80021b8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80021bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c4:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <HAL_SD_MspInit+0x11c>)
 80021c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80021ca:	4a35      	ldr	r2, [pc, #212]	; (80022a0 <HAL_SD_MspInit+0x11c>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80021d4:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <HAL_SD_MspInit+0x11c>)
 80021d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e2:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_SD_MspInit+0x11c>)
 80021e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80021e8:	4a2d      	ldr	r2, [pc, #180]	; (80022a0 <HAL_SD_MspInit+0x11c>)
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80021f2:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <HAL_SD_MspInit+0x11c>)
 80021f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002200:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <HAL_SD_MspInit+0x11c>)
 8002202:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002206:	4a26      	ldr	r2, [pc, #152]	; (80022a0 <HAL_SD_MspInit+0x11c>)
 8002208:	f043 0308 	orr.w	r3, r3, #8
 800220c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002210:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <HAL_SD_MspInit+0x11c>)
 8002212:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800221e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222c:	2303      	movs	r3, #3
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002230:	230c      	movs	r3, #12
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4619      	mov	r1, r3
 800223a:	481a      	ldr	r0, [pc, #104]	; (80022a4 <HAL_SD_MspInit+0x120>)
 800223c:	f003 ff78 	bl	8006130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002240:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002252:	230c      	movs	r3, #12
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	4619      	mov	r1, r3
 800225c:	4812      	ldr	r0, [pc, #72]	; (80022a8 <HAL_SD_MspInit+0x124>)
 800225e:	f003 ff67 	bl	8006130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002262:	2304      	movs	r3, #4
 8002264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226e:	2303      	movs	r3, #3
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002272:	230c      	movs	r3, #12
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	4619      	mov	r1, r3
 800227c:	480b      	ldr	r0, [pc, #44]	; (80022ac <HAL_SD_MspInit+0x128>)
 800227e:	f003 ff57 	bl	8006130 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	2031      	movs	r0, #49	; 0x31
 8002288:	f001 f823 	bl	80032d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800228c:	2031      	movs	r0, #49	; 0x31
 800228e:	f001 f83a 	bl	8003306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002292:	bf00      	nop
 8002294:	3730      	adds	r7, #48	; 0x30
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	52007000 	.word	0x52007000
 80022a0:	58024400 	.word	0x58024400
 80022a4:	58020400 	.word	0x58020400
 80022a8:	58020800 	.word	0x58020800
 80022ac:	58020c00 	.word	0x58020c00

080022b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b0be      	sub	sp, #248	; 0xf8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022cc:	22b8      	movs	r2, #184	; 0xb8
 80022ce:	2100      	movs	r1, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f00f fe8b 	bl	8011fec <memset>
  if(hspi->Instance==SPI1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a72      	ldr	r2, [pc, #456]	; (80024a4 <HAL_SPI_MspInit+0x1f4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	f040 80f3 	bne.w	80024c8 <HAL_SPI_MspInit+0x218>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80022e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80022e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022f4:	4618      	mov	r0, r3
 80022f6:	f005 f8e5 	bl	80074c4 <HAL_RCCEx_PeriphCLKConfig>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002300:	f7ff fae6 	bl	80018d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002304:	4b68      	ldr	r3, [pc, #416]	; (80024a8 <HAL_SPI_MspInit+0x1f8>)
 8002306:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800230a:	4a67      	ldr	r2, [pc, #412]	; (80024a8 <HAL_SPI_MspInit+0x1f8>)
 800230c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002310:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002314:	4b64      	ldr	r3, [pc, #400]	; (80024a8 <HAL_SPI_MspInit+0x1f8>)
 8002316:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800231a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002322:	4b61      	ldr	r3, [pc, #388]	; (80024a8 <HAL_SPI_MspInit+0x1f8>)
 8002324:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002328:	4a5f      	ldr	r2, [pc, #380]	; (80024a8 <HAL_SPI_MspInit+0x1f8>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002332:	4b5d      	ldr	r3, [pc, #372]	; (80024a8 <HAL_SPI_MspInit+0x1f8>)
 8002334:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002340:	4b59      	ldr	r3, [pc, #356]	; (80024a8 <HAL_SPI_MspInit+0x1f8>)
 8002342:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002346:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <HAL_SPI_MspInit+0x1f8>)
 8002348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800234c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002350:	4b55      	ldr	r3, [pc, #340]	; (80024a8 <HAL_SPI_MspInit+0x1f8>)
 8002352:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235a:	623b      	str	r3, [r7, #32]
 800235c:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800235e:	23c0      	movs	r3, #192	; 0xc0
 8002360:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002376:	2305      	movs	r3, #5
 8002378:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002380:	4619      	mov	r1, r3
 8002382:	484a      	ldr	r0, [pc, #296]	; (80024ac <HAL_SPI_MspInit+0x1fc>)
 8002384:	f003 fed4 	bl	8006130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002388:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800238c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023a2:	2305      	movs	r3, #5
 80023a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023ac:	4619      	mov	r1, r3
 80023ae:	4840      	ldr	r0, [pc, #256]	; (80024b0 <HAL_SPI_MspInit+0x200>)
 80023b0:	f003 febe 	bl	8006130 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 80023b4:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <HAL_SPI_MspInit+0x204>)
 80023b6:	4a40      	ldr	r2, [pc, #256]	; (80024b8 <HAL_SPI_MspInit+0x208>)
 80023b8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80023ba:	4b3e      	ldr	r3, [pc, #248]	; (80024b4 <HAL_SPI_MspInit+0x204>)
 80023bc:	2225      	movs	r2, #37	; 0x25
 80023be:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023c0:	4b3c      	ldr	r3, [pc, #240]	; (80024b4 <HAL_SPI_MspInit+0x204>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c6:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <HAL_SPI_MspInit+0x204>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023cc:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <HAL_SPI_MspInit+0x204>)
 80023ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023d4:	4b37      	ldr	r3, [pc, #220]	; (80024b4 <HAL_SPI_MspInit+0x204>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023da:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <HAL_SPI_MspInit+0x204>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80023e0:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <HAL_SPI_MspInit+0x204>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023e6:	4b33      	ldr	r3, [pc, #204]	; (80024b4 <HAL_SPI_MspInit+0x204>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ec:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <HAL_SPI_MspInit+0x204>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80023f2:	4830      	ldr	r0, [pc, #192]	; (80024b4 <HAL_SPI_MspInit+0x204>)
 80023f4:	f000 ffb0 	bl	8003358 <HAL_DMA_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_SPI_MspInit+0x152>
    {
      Error_Handler();
 80023fe:	f7ff fa67 	bl	80018d0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a2b      	ldr	r2, [pc, #172]	; (80024b4 <HAL_SPI_MspInit+0x204>)
 8002406:	67da      	str	r2, [r3, #124]	; 0x7c
 8002408:	4a2a      	ldr	r2, [pc, #168]	; (80024b4 <HAL_SPI_MspInit+0x204>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 800240e:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_SPI_MspInit+0x20c>)
 8002410:	4a2b      	ldr	r2, [pc, #172]	; (80024c0 <HAL_SPI_MspInit+0x210>)
 8002412:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002414:	4b29      	ldr	r3, [pc, #164]	; (80024bc <HAL_SPI_MspInit+0x20c>)
 8002416:	2226      	movs	r2, #38	; 0x26
 8002418:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800241a:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_SPI_MspInit+0x20c>)
 800241c:	2240      	movs	r2, #64	; 0x40
 800241e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002420:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_SPI_MspInit+0x20c>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002426:	4b25      	ldr	r3, [pc, #148]	; (80024bc <HAL_SPI_MspInit+0x20c>)
 8002428:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800242c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <HAL_SPI_MspInit+0x20c>)
 8002430:	2200      	movs	r2, #0
 8002432:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002434:	4b21      	ldr	r3, [pc, #132]	; (80024bc <HAL_SPI_MspInit+0x20c>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_SPI_MspInit+0x20c>)
 800243c:	2200      	movs	r2, #0
 800243e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002440:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <HAL_SPI_MspInit+0x20c>)
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_SPI_MspInit+0x20c>)
 8002448:	2200      	movs	r2, #0
 800244a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800244c:	481b      	ldr	r0, [pc, #108]	; (80024bc <HAL_SPI_MspInit+0x20c>)
 800244e:	f000 ff83 	bl	8003358 <HAL_DMA_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 8002458:	f7ff fa3a 	bl	80018d0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_SPI_MspInit+0x20c>)
 8002460:	679a      	str	r2, [r3, #120]	; 0x78
 8002462:	4a16      	ldr	r2, [pc, #88]	; (80024bc <HAL_SPI_MspInit+0x20c>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	2023      	movs	r0, #35	; 0x23
 800246e:	f000 ff30 	bl	80032d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002472:	2023      	movs	r0, #35	; 0x23
 8002474:	f000 ff47 	bl	8003306 <HAL_NVIC_EnableIRQ>
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
//    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

    // SPI1 MISO interrupt setting FIXME
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002478:	2340      	movs	r3, #64	; 0x40
 800247a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING; //GPIO_MODE_AF_PP  | TRIGGER_RISING | TRIGGER_FALLING;
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <HAL_SPI_MspInit+0x214>)
 8002480:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002490:	2305      	movs	r3, #5
 8002492:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002496:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800249a:	4619      	mov	r1, r3
 800249c:	4803      	ldr	r0, [pc, #12]	; (80024ac <HAL_SPI_MspInit+0x1fc>)
 800249e:	f003 fe47 	bl	8006130 <HAL_GPIO_Init>


  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80024a2:	e1cb      	b.n	800283c <HAL_SPI_MspInit+0x58c>
 80024a4:	40013000 	.word	0x40013000
 80024a8:	58024400 	.word	0x58024400
 80024ac:	58020000 	.word	0x58020000
 80024b0:	58021800 	.word	0x58021800
 80024b4:	240082b4 	.word	0x240082b4
 80024b8:	40020010 	.word	0x40020010
 80024bc:	2400832c 	.word	0x2400832c
 80024c0:	40020028 	.word	0x40020028
 80024c4:	00210002 	.word	0x00210002
  else if(hspi->Instance==SPI2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a72      	ldr	r2, [pc, #456]	; (8002698 <HAL_SPI_MspInit+0x3e8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	f040 80f4 	bne.w	80026bc <HAL_SPI_MspInit+0x40c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80024d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80024da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e6:	4618      	mov	r0, r3
 80024e8:	f004 ffec 	bl	80074c4 <HAL_RCCEx_PeriphCLKConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_SPI_MspInit+0x246>
      Error_Handler();
 80024f2:	f7ff f9ed 	bl	80018d0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024f6:	4b69      	ldr	r3, [pc, #420]	; (800269c <HAL_SPI_MspInit+0x3ec>)
 80024f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80024fc:	4a67      	ldr	r2, [pc, #412]	; (800269c <HAL_SPI_MspInit+0x3ec>)
 80024fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002502:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002506:	4b65      	ldr	r3, [pc, #404]	; (800269c <HAL_SPI_MspInit+0x3ec>)
 8002508:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800250c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002514:	4b61      	ldr	r3, [pc, #388]	; (800269c <HAL_SPI_MspInit+0x3ec>)
 8002516:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800251a:	4a60      	ldr	r2, [pc, #384]	; (800269c <HAL_SPI_MspInit+0x3ec>)
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002524:	4b5d      	ldr	r3, [pc, #372]	; (800269c <HAL_SPI_MspInit+0x3ec>)
 8002526:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002532:	4b5a      	ldr	r3, [pc, #360]	; (800269c <HAL_SPI_MspInit+0x3ec>)
 8002534:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002538:	4a58      	ldr	r2, [pc, #352]	; (800269c <HAL_SPI_MspInit+0x3ec>)
 800253a:	f043 0302 	orr.w	r3, r3, #2
 800253e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002542:	4b56      	ldr	r3, [pc, #344]	; (800269c <HAL_SPI_MspInit+0x3ec>)
 8002544:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002550:	2302      	movs	r3, #2
 8002552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2300      	movs	r3, #0
 8002564:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002568:	2305      	movs	r3, #5
 800256a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002572:	4619      	mov	r1, r3
 8002574:	484a      	ldr	r0, [pc, #296]	; (80026a0 <HAL_SPI_MspInit+0x3f0>)
 8002576:	f003 fddb 	bl	8006130 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 800257a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800257e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002594:	2305      	movs	r3, #5
 8002596:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800259e:	4619      	mov	r1, r3
 80025a0:	4840      	ldr	r0, [pc, #256]	; (80026a4 <HAL_SPI_MspInit+0x3f4>)
 80025a2:	f003 fdc5 	bl	8006130 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream7;
 80025a6:	4b40      	ldr	r3, [pc, #256]	; (80026a8 <HAL_SPI_MspInit+0x3f8>)
 80025a8:	4a40      	ldr	r2, [pc, #256]	; (80026ac <HAL_SPI_MspInit+0x3fc>)
 80025aa:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80025ac:	4b3e      	ldr	r3, [pc, #248]	; (80026a8 <HAL_SPI_MspInit+0x3f8>)
 80025ae:	2227      	movs	r2, #39	; 0x27
 80025b0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025b2:	4b3d      	ldr	r3, [pc, #244]	; (80026a8 <HAL_SPI_MspInit+0x3f8>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b8:	4b3b      	ldr	r3, [pc, #236]	; (80026a8 <HAL_SPI_MspInit+0x3f8>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025be:	4b3a      	ldr	r3, [pc, #232]	; (80026a8 <HAL_SPI_MspInit+0x3f8>)
 80025c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025c6:	4b38      	ldr	r3, [pc, #224]	; (80026a8 <HAL_SPI_MspInit+0x3f8>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025cc:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <HAL_SPI_MspInit+0x3f8>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80025d2:	4b35      	ldr	r3, [pc, #212]	; (80026a8 <HAL_SPI_MspInit+0x3f8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025d8:	4b33      	ldr	r3, [pc, #204]	; (80026a8 <HAL_SPI_MspInit+0x3f8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025de:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <HAL_SPI_MspInit+0x3f8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80025e4:	4830      	ldr	r0, [pc, #192]	; (80026a8 <HAL_SPI_MspInit+0x3f8>)
 80025e6:	f000 feb7 	bl	8003358 <HAL_DMA_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_SPI_MspInit+0x344>
      Error_Handler();
 80025f0:	f7ff f96e 	bl	80018d0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a2c      	ldr	r2, [pc, #176]	; (80026a8 <HAL_SPI_MspInit+0x3f8>)
 80025f8:	67da      	str	r2, [r3, #124]	; 0x7c
 80025fa:	4a2b      	ldr	r2, [pc, #172]	; (80026a8 <HAL_SPI_MspInit+0x3f8>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA2_Stream0;
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <HAL_SPI_MspInit+0x400>)
 8002602:	4a2c      	ldr	r2, [pc, #176]	; (80026b4 <HAL_SPI_MspInit+0x404>)
 8002604:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002606:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <HAL_SPI_MspInit+0x400>)
 8002608:	2228      	movs	r2, #40	; 0x28
 800260a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800260c:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <HAL_SPI_MspInit+0x400>)
 800260e:	2240      	movs	r2, #64	; 0x40
 8002610:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002612:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_SPI_MspInit+0x400>)
 8002614:	2200      	movs	r2, #0
 8002616:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002618:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <HAL_SPI_MspInit+0x400>)
 800261a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800261e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002620:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <HAL_SPI_MspInit+0x400>)
 8002622:	2200      	movs	r2, #0
 8002624:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002626:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <HAL_SPI_MspInit+0x400>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800262c:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_SPI_MspInit+0x400>)
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002632:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <HAL_SPI_MspInit+0x400>)
 8002634:	2200      	movs	r2, #0
 8002636:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_SPI_MspInit+0x400>)
 800263a:	2200      	movs	r2, #0
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800263e:	481c      	ldr	r0, [pc, #112]	; (80026b0 <HAL_SPI_MspInit+0x400>)
 8002640:	f000 fe8a 	bl	8003358 <HAL_DMA_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_SPI_MspInit+0x39e>
      Error_Handler();
 800264a:	f7ff f941 	bl	80018d0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a17      	ldr	r2, [pc, #92]	; (80026b0 <HAL_SPI_MspInit+0x400>)
 8002652:	679a      	str	r2, [r3, #120]	; 0x78
 8002654:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <HAL_SPI_MspInit+0x400>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	2024      	movs	r0, #36	; 0x24
 8002660:	f000 fe37 	bl	80032d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002664:	2024      	movs	r0, #36	; 0x24
 8002666:	f000 fe4e 	bl	8003306 <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800266a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800266e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING;// | EXTI_IT | TRIGGER_FALLING;
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <HAL_SPI_MspInit+0x408>)
 8002674:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267e:	2300      	movs	r3, #0
 8002680:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002684:	2305      	movs	r3, #5
 8002686:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800268e:	4619      	mov	r1, r3
 8002690:	4804      	ldr	r0, [pc, #16]	; (80026a4 <HAL_SPI_MspInit+0x3f4>)
 8002692:	f003 fd4d 	bl	8006130 <HAL_GPIO_Init>
}
 8002696:	e0d1      	b.n	800283c <HAL_SPI_MspInit+0x58c>
 8002698:	40003800 	.word	0x40003800
 800269c:	58024400 	.word	0x58024400
 80026a0:	58020800 	.word	0x58020800
 80026a4:	58020400 	.word	0x58020400
 80026a8:	240083a4 	.word	0x240083a4
 80026ac:	400200b8 	.word	0x400200b8
 80026b0:	2400841c 	.word	0x2400841c
 80026b4:	40020410 	.word	0x40020410
 80026b8:	00210002 	.word	0x00210002
  else if(hspi->Instance==SPI4)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a60      	ldr	r2, [pc, #384]	; (8002844 <HAL_SPI_MspInit+0x594>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	f040 80ba 	bne.w	800283c <HAL_SPI_MspInit+0x58c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80026c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026d8:	4618      	mov	r0, r3
 80026da:	f004 fef3 	bl	80074c4 <HAL_RCCEx_PeriphCLKConfig>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_SPI_MspInit+0x438>
      Error_Handler();
 80026e4:	f7ff f8f4 	bl	80018d0 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80026e8:	4b57      	ldr	r3, [pc, #348]	; (8002848 <HAL_SPI_MspInit+0x598>)
 80026ea:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80026ee:	4a56      	ldr	r2, [pc, #344]	; (8002848 <HAL_SPI_MspInit+0x598>)
 80026f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026f4:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80026f8:	4b53      	ldr	r3, [pc, #332]	; (8002848 <HAL_SPI_MspInit+0x598>)
 80026fa:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80026fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002706:	4b50      	ldr	r3, [pc, #320]	; (8002848 <HAL_SPI_MspInit+0x598>)
 8002708:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800270c:	4a4e      	ldr	r2, [pc, #312]	; (8002848 <HAL_SPI_MspInit+0x598>)
 800270e:	f043 0310 	orr.w	r3, r3, #16
 8002712:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002716:	4b4c      	ldr	r3, [pc, #304]	; (8002848 <HAL_SPI_MspInit+0x598>)
 8002718:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002724:	2364      	movs	r3, #100	; 0x64
 8002726:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800273c:	2305      	movs	r3, #5
 800273e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002742:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002746:	4619      	mov	r1, r3
 8002748:	4840      	ldr	r0, [pc, #256]	; (800284c <HAL_SPI_MspInit+0x59c>)
 800274a:	f003 fcf1 	bl	8006130 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA1_Stream2;
 800274e:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_SPI_MspInit+0x5a0>)
 8002750:	4a40      	ldr	r2, [pc, #256]	; (8002854 <HAL_SPI_MspInit+0x5a4>)
 8002752:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8002754:	4b3e      	ldr	r3, [pc, #248]	; (8002850 <HAL_SPI_MspInit+0x5a0>)
 8002756:	2253      	movs	r2, #83	; 0x53
 8002758:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800275a:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_SPI_MspInit+0x5a0>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002760:	4b3b      	ldr	r3, [pc, #236]	; (8002850 <HAL_SPI_MspInit+0x5a0>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002766:	4b3a      	ldr	r3, [pc, #232]	; (8002850 <HAL_SPI_MspInit+0x5a0>)
 8002768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800276c:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800276e:	4b38      	ldr	r3, [pc, #224]	; (8002850 <HAL_SPI_MspInit+0x5a0>)
 8002770:	2200      	movs	r2, #0
 8002772:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002774:	4b36      	ldr	r3, [pc, #216]	; (8002850 <HAL_SPI_MspInit+0x5a0>)
 8002776:	2200      	movs	r2, #0
 8002778:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800277a:	4b35      	ldr	r3, [pc, #212]	; (8002850 <HAL_SPI_MspInit+0x5a0>)
 800277c:	2200      	movs	r2, #0
 800277e:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002780:	4b33      	ldr	r3, [pc, #204]	; (8002850 <HAL_SPI_MspInit+0x5a0>)
 8002782:	2200      	movs	r2, #0
 8002784:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002786:	4b32      	ldr	r3, [pc, #200]	; (8002850 <HAL_SPI_MspInit+0x5a0>)
 8002788:	2200      	movs	r2, #0
 800278a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800278c:	4830      	ldr	r0, [pc, #192]	; (8002850 <HAL_SPI_MspInit+0x5a0>)
 800278e:	f000 fde3 	bl	8003358 <HAL_DMA_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_SPI_MspInit+0x4ec>
      Error_Handler();
 8002798:	f7ff f89a 	bl	80018d0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a2c      	ldr	r2, [pc, #176]	; (8002850 <HAL_SPI_MspInit+0x5a0>)
 80027a0:	67da      	str	r2, [r3, #124]	; 0x7c
 80027a2:	4a2b      	ldr	r2, [pc, #172]	; (8002850 <HAL_SPI_MspInit+0x5a0>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA1_Stream3;
 80027a8:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <HAL_SPI_MspInit+0x5a8>)
 80027aa:	4a2c      	ldr	r2, [pc, #176]	; (800285c <HAL_SPI_MspInit+0x5ac>)
 80027ac:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80027ae:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <HAL_SPI_MspInit+0x5a8>)
 80027b0:	2254      	movs	r2, #84	; 0x54
 80027b2:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027b4:	4b28      	ldr	r3, [pc, #160]	; (8002858 <HAL_SPI_MspInit+0x5a8>)
 80027b6:	2240      	movs	r2, #64	; 0x40
 80027b8:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ba:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_SPI_MspInit+0x5a8>)
 80027bc:	2200      	movs	r2, #0
 80027be:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027c0:	4b25      	ldr	r3, [pc, #148]	; (8002858 <HAL_SPI_MspInit+0x5a8>)
 80027c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c6:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027c8:	4b23      	ldr	r3, [pc, #140]	; (8002858 <HAL_SPI_MspInit+0x5a8>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ce:	4b22      	ldr	r3, [pc, #136]	; (8002858 <HAL_SPI_MspInit+0x5a8>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80027d4:	4b20      	ldr	r3, [pc, #128]	; (8002858 <HAL_SPI_MspInit+0x5a8>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027da:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <HAL_SPI_MspInit+0x5a8>)
 80027dc:	2200      	movs	r2, #0
 80027de:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027e0:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <HAL_SPI_MspInit+0x5a8>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80027e6:	481c      	ldr	r0, [pc, #112]	; (8002858 <HAL_SPI_MspInit+0x5a8>)
 80027e8:	f000 fdb6 	bl	8003358 <HAL_DMA_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_SPI_MspInit+0x546>
      Error_Handler();
 80027f2:	f7ff f86d 	bl	80018d0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a17      	ldr	r2, [pc, #92]	; (8002858 <HAL_SPI_MspInit+0x5a8>)
 80027fa:	679a      	str	r2, [r3, #120]	; 0x78
 80027fc:	4a16      	ldr	r2, [pc, #88]	; (8002858 <HAL_SPI_MspInit+0x5a8>)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002802:	2200      	movs	r2, #0
 8002804:	2100      	movs	r1, #0
 8002806:	2054      	movs	r0, #84	; 0x54
 8002808:	f000 fd63 	bl	80032d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800280c:	2054      	movs	r0, #84	; 0x54
 800280e:	f000 fd7a 	bl	8003306 <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002812:	2320      	movs	r3, #32
 8002814:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING;// | EXTI_IT | TRIGGER_FALLING;
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_SPI_MspInit+0x5b0>)
 800281a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800282a:	2305      	movs	r3, #5
 800282c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002830:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002834:	4619      	mov	r1, r3
 8002836:	4805      	ldr	r0, [pc, #20]	; (800284c <HAL_SPI_MspInit+0x59c>)
 8002838:	f003 fc7a 	bl	8006130 <HAL_GPIO_Init>
}
 800283c:	bf00      	nop
 800283e:	37f8      	adds	r7, #248	; 0xf8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40013400 	.word	0x40013400
 8002848:	58024400 	.word	0x58024400
 800284c:	58021000 	.word	0x58021000
 8002850:	24008494 	.word	0x24008494
 8002854:	40020040 	.word	0x40020040
 8002858:	2400850c 	.word	0x2400850c
 800285c:	40020058 	.word	0x40020058
 8002860:	00210002 	.word	0x00210002

08002864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	; 0x30
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 031c 	add.w	r3, r7, #28
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a33      	ldr	r2, [pc, #204]	; (8002950 <HAL_TIM_Base_MspInit+0xec>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d10f      	bne.n	80028a6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002886:	4b33      	ldr	r3, [pc, #204]	; (8002954 <HAL_TIM_Base_MspInit+0xf0>)
 8002888:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800288c:	4a31      	ldr	r2, [pc, #196]	; (8002954 <HAL_TIM_Base_MspInit+0xf0>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002896:	4b2f      	ldr	r3, [pc, #188]	; (8002954 <HAL_TIM_Base_MspInit+0xf0>)
 8002898:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80028a4:	e050      	b.n	8002948 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ae:	d12f      	bne.n	8002910 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028b0:	4b28      	ldr	r3, [pc, #160]	; (8002954 <HAL_TIM_Base_MspInit+0xf0>)
 80028b2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80028b6:	4a27      	ldr	r2, [pc, #156]	; (8002954 <HAL_TIM_Base_MspInit+0xf0>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80028c0:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_TIM_Base_MspInit+0xf0>)
 80028c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ce:	4b21      	ldr	r3, [pc, #132]	; (8002954 <HAL_TIM_Base_MspInit+0xf0>)
 80028d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80028d4:	4a1f      	ldr	r2, [pc, #124]	; (8002954 <HAL_TIM_Base_MspInit+0xf0>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80028de:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <HAL_TIM_Base_MspInit+0xf0>)
 80028e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028fe:	2301      	movs	r3, #1
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002902:	f107 031c 	add.w	r3, r7, #28
 8002906:	4619      	mov	r1, r3
 8002908:	4813      	ldr	r0, [pc, #76]	; (8002958 <HAL_TIM_Base_MspInit+0xf4>)
 800290a:	f003 fc11 	bl	8006130 <HAL_GPIO_Init>
}
 800290e:	e01b      	b.n	8002948 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM16)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a11      	ldr	r2, [pc, #68]	; (800295c <HAL_TIM_Base_MspInit+0xf8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d116      	bne.n	8002948 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <HAL_TIM_Base_MspInit+0xf0>)
 800291c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002920:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <HAL_TIM_Base_MspInit+0xf0>)
 8002922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002926:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_TIM_Base_MspInit+0xf0>)
 800292c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002938:	2200      	movs	r2, #0
 800293a:	2100      	movs	r1, #0
 800293c:	2075      	movs	r0, #117	; 0x75
 800293e:	f000 fcc8 	bl	80032d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002942:	2075      	movs	r0, #117	; 0x75
 8002944:	f000 fcdf 	bl	8003306 <HAL_NVIC_EnableIRQ>
}
 8002948:	bf00      	nop
 800294a:	3730      	adds	r7, #48	; 0x30
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40010000 	.word	0x40010000
 8002954:	58024400 	.word	0x58024400
 8002958:	58020000 	.word	0x58020000
 800295c:	40014400 	.word	0x40014400

08002960 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 030c 	add.w	r3, r7, #12
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a13      	ldr	r2, [pc, #76]	; (80029cc <HAL_TIM_MspPostInit+0x6c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d11f      	bne.n	80029c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002982:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_TIM_MspPostInit+0x70>)
 8002984:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002988:	4a11      	ldr	r2, [pc, #68]	; (80029d0 <HAL_TIM_MspPostInit+0x70>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <HAL_TIM_MspPostInit+0x70>)
 8002994:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029b2:	2301      	movs	r3, #1
 80029b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	4619      	mov	r1, r3
 80029bc:	4805      	ldr	r0, [pc, #20]	; (80029d4 <HAL_TIM_MspPostInit+0x74>)
 80029be:	f003 fbb7 	bl	8006130 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029c2:	bf00      	nop
 80029c4:	3720      	adds	r7, #32
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40010000 	.word	0x40010000
 80029d0:	58024400 	.word	0x58024400
 80029d4:	58020000 	.word	0x58020000

080029d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b0b8      	sub	sp, #224	; 0xe0
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	22b8      	movs	r2, #184	; 0xb8
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f00f faf7 	bl	8011fec <memset>
  if(huart->Instance==UART4)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a3f      	ldr	r2, [pc, #252]	; (8002b00 <HAL_UART_MspInit+0x128>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d176      	bne.n	8002af6 <HAL_UART_MspInit+0x11e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a12:	f107 0314 	add.w	r3, r7, #20
 8002a16:	4618      	mov	r0, r3
 8002a18:	f004 fd54 	bl	80074c4 <HAL_RCCEx_PeriphCLKConfig>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a22:	f7fe ff55 	bl	80018d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002a26:	4b37      	ldr	r3, [pc, #220]	; (8002b04 <HAL_UART_MspInit+0x12c>)
 8002a28:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002a2c:	4a35      	ldr	r2, [pc, #212]	; (8002b04 <HAL_UART_MspInit+0x12c>)
 8002a2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a32:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002a36:	4b33      	ldr	r3, [pc, #204]	; (8002b04 <HAL_UART_MspInit+0x12c>)
 8002a38:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002a3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a44:	4b2f      	ldr	r3, [pc, #188]	; (8002b04 <HAL_UART_MspInit+0x12c>)
 8002a46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002a4a:	4a2e      	ldr	r2, [pc, #184]	; (8002b04 <HAL_UART_MspInit+0x12c>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002a54:	4b2b      	ldr	r3, [pc, #172]	; (8002b04 <HAL_UART_MspInit+0x12c>)
 8002a56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a62:	2303      	movs	r3, #3
 8002a64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a84:	4619      	mov	r1, r3
 8002a86:	4820      	ldr	r0, [pc, #128]	; (8002b08 <HAL_UART_MspInit+0x130>)
 8002a88:	f003 fb52 	bl	8006130 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002a8c:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <HAL_UART_MspInit+0x134>)
 8002a8e:	4a20      	ldr	r2, [pc, #128]	; (8002b10 <HAL_UART_MspInit+0x138>)
 8002a90:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002a92:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <HAL_UART_MspInit+0x134>)
 8002a94:	2240      	movs	r2, #64	; 0x40
 8002a96:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a98:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <HAL_UART_MspInit+0x134>)
 8002a9a:	2240      	movs	r2, #64	; 0x40
 8002a9c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <HAL_UART_MspInit+0x134>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002aa4:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <HAL_UART_MspInit+0x134>)
 8002aa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aaa:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aac:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <HAL_UART_MspInit+0x134>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <HAL_UART_MspInit+0x134>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002ab8:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <HAL_UART_MspInit+0x134>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <HAL_UART_MspInit+0x134>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <HAL_UART_MspInit+0x134>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002aca:	4810      	ldr	r0, [pc, #64]	; (8002b0c <HAL_UART_MspInit+0x134>)
 8002acc:	f000 fc44 	bl	8003358 <HAL_DMA_Init>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8002ad6:	f7fe fefb 	bl	80018d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a0b      	ldr	r2, [pc, #44]	; (8002b0c <HAL_UART_MspInit+0x134>)
 8002ade:	679a      	str	r2, [r3, #120]	; 0x78
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <HAL_UART_MspInit+0x134>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2100      	movs	r1, #0
 8002aea:	2034      	movs	r0, #52	; 0x34
 8002aec:	f000 fbf1 	bl	80032d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002af0:	2034      	movs	r0, #52	; 0x34
 8002af2:	f000 fc08 	bl	8003306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002af6:	bf00      	nop
 8002af8:	37e0      	adds	r7, #224	; 0xe0
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40004c00 	.word	0x40004c00
 8002b04:	58024400 	.word	0x58024400
 8002b08:	58020000 	.word	0x58020000
 8002b0c:	240086f8 	.word	0x240086f8
 8002b10:	40020070 	.word	0x40020070

08002b14 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002b28:	4b34      	ldr	r3, [pc, #208]	; (8002bfc <HAL_FMC_MspInit+0xe8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d161      	bne.n	8002bf4 <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 8002b30:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <HAL_FMC_MspInit+0xe8>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b36:	4b32      	ldr	r3, [pc, #200]	; (8002c00 <HAL_FMC_MspInit+0xec>)
 8002b38:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002b3c:	4a30      	ldr	r2, [pc, #192]	; (8002c00 <HAL_FMC_MspInit+0xec>)
 8002b3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b42:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8002b46:	4b2e      	ldr	r3, [pc, #184]	; (8002c00 <HAL_FMC_MspInit+0xec>)
 8002b48:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002b54:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002b58:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b62:	2303      	movs	r3, #3
 8002b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b66:	230c      	movs	r3, #12
 8002b68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4825      	ldr	r0, [pc, #148]	; (8002c04 <HAL_FMC_MspInit+0xf0>)
 8002b70:	f003 fade 	bl	8006130 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002b74:	230d      	movs	r3, #13
 8002b76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b80:	2303      	movs	r3, #3
 8002b82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b84:	230c      	movs	r3, #12
 8002b86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	481e      	ldr	r0, [pc, #120]	; (8002c08 <HAL_FMC_MspInit+0xf4>)
 8002b8e:	f003 facf 	bl	8006130 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002b92:	f248 1337 	movw	r3, #33079	; 0x8137
 8002b96:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ba4:	230c      	movs	r3, #12
 8002ba6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	4619      	mov	r1, r3
 8002bac:	4817      	ldr	r0, [pc, #92]	; (8002c0c <HAL_FMC_MspInit+0xf8>)
 8002bae:	f003 fabf 	bl	8006130 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002bb2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002bb6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bc4:	230c      	movs	r3, #12
 8002bc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4810      	ldr	r0, [pc, #64]	; (8002c10 <HAL_FMC_MspInit+0xfc>)
 8002bce:	f003 faaf 	bl	8006130 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002bd2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002bd6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be0:	2303      	movs	r3, #3
 8002be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002be4:	230c      	movs	r3, #12
 8002be6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	4619      	mov	r1, r3
 8002bec:	4809      	ldr	r0, [pc, #36]	; (8002c14 <HAL_FMC_MspInit+0x100>)
 8002bee:	f003 fa9f 	bl	8006130 <HAL_GPIO_Init>
 8002bf2:	e000      	b.n	8002bf6 <HAL_FMC_MspInit+0xe2>
    return;
 8002bf4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	240087e4 	.word	0x240087e4
 8002c00:	58024400 	.word	0x58024400
 8002c04:	58021400 	.word	0x58021400
 8002c08:	58020800 	.word	0x58020800
 8002c0c:	58021800 	.word	0x58021800
 8002c10:	58021000 	.word	0x58021000
 8002c14:	58020c00 	.word	0x58020c00

08002c18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002c20:	f7ff ff78 	bl	8002b14 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c30:	e7fe      	b.n	8002c30 <NMI_Handler+0x4>

08002c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c36:	e7fe      	b.n	8002c36 <HardFault_Handler+0x4>

08002c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c3c:	e7fe      	b.n	8002c3c <MemManage_Handler+0x4>

08002c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c42:	e7fe      	b.n	8002c42 <BusFault_Handler+0x4>

08002c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c48:	e7fe      	b.n	8002c48 <UsageFault_Handler+0x4>

08002c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c78:	f000 f9e8 	bl	800304c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <DMA1_Stream0_IRQHandler+0x10>)
 8002c86:	f001 fec5 	bl	8004a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	240082b4 	.word	0x240082b4

08002c94 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <DMA1_Stream1_IRQHandler+0x10>)
 8002c9a:	f001 febb 	bl	8004a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2400832c 	.word	0x2400832c

08002ca8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8002cac:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <DMA1_Stream2_IRQHandler+0x10>)
 8002cae:	f001 feb1 	bl	8004a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	24008494 	.word	0x24008494

08002cbc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002cc0:	4802      	ldr	r0, [pc, #8]	; (8002ccc <DMA1_Stream3_IRQHandler+0x10>)
 8002cc2:	f001 fea7 	bl	8004a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	2400850c 	.word	0x2400850c

08002cd0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002cd4:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <DMA1_Stream4_IRQHandler+0x10>)
 8002cd6:	f001 fe9d 	bl	8004a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	240086f8 	.word	0x240086f8

08002ce4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002ce8:	4802      	ldr	r0, [pc, #8]	; (8002cf4 <SPI1_IRQHandler+0x10>)
 8002cea:	f008 fe5f 	bl	800b9ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	2400811c 	.word	0x2400811c

08002cf8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002cfc:	4802      	ldr	r0, [pc, #8]	; (8002d08 <SPI2_IRQHandler+0x10>)
 8002cfe:	f008 fe55 	bl	800b9ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	240081a4 	.word	0x240081a4

08002d0c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <DMA1_Stream7_IRQHandler+0x10>)
 8002d12:	f001 fe7f 	bl	8004a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	240083a4 	.word	0x240083a4

08002d20 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002d24:	4802      	ldr	r0, [pc, #8]	; (8002d30 <SDMMC1_IRQHandler+0x10>)
 8002d26:	f006 fee5 	bl	8009af4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	240080a0 	.word	0x240080a0

08002d34 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002d38:	4802      	ldr	r0, [pc, #8]	; (8002d44 <UART4_IRQHandler+0x10>)
 8002d3a:	f00b f82b 	bl	800dd94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	24008668 	.word	0x24008668

08002d48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002d4c:	4802      	ldr	r0, [pc, #8]	; (8002d58 <DMA2_Stream0_IRQHandler+0x10>)
 8002d4e:	f001 fe61 	bl	8004a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	2400841c 	.word	0x2400841c

08002d5c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002d60:	4802      	ldr	r0, [pc, #8]	; (8002d6c <SPI4_IRQHandler+0x10>)
 8002d62:	f008 fe23 	bl	800b9ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	2400822c 	.word	0x2400822c

08002d70 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002d74:	4802      	ldr	r0, [pc, #8]	; (8002d80 <TIM16_IRQHandler+0x10>)
 8002d76:	f009 fb31 	bl	800c3dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	2400861c 	.word	0x2400861c

08002d84 <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI9_5_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002d88:	2020      	movs	r0, #32
 8002d8a:	f003 fbb4 	bl	80064f6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002d8e:	2040      	movs	r0, #64	; 0x40
 8002d90:	f003 fbb1 	bl	80064f6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002d94:	2080      	movs	r0, #128	; 0x80
 8002d96:	f003 fbae 	bl	80064f6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002d9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d9e:	f003 fbaa 	bl	80064f6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002daa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002dae:	f003 fba2 	bl	80064f6 <HAL_GPIO_EXTI_IRQHandler>

}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dc0:	4a14      	ldr	r2, [pc, #80]	; (8002e14 <_sbrk+0x5c>)
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <_sbrk+0x60>)
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dcc:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <_sbrk+0x64>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <_sbrk+0x64>)
 8002dd6:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <_sbrk+0x68>)
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d207      	bcs.n	8002df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002de8:	f00f f8d6 	bl	8011f98 <__errno>
 8002dec:	4603      	mov	r3, r0
 8002dee:	220c      	movs	r2, #12
 8002df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295
 8002df6:	e009      	b.n	8002e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <_sbrk+0x64>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dfe:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <_sbrk+0x64>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	4a05      	ldr	r2, [pc, #20]	; (8002e1c <_sbrk+0x64>)
 8002e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	24100000 	.word	0x24100000
 8002e18:	00000800 	.word	0x00000800
 8002e1c:	240087e8 	.word	0x240087e8
 8002e20:	24008a78 	.word	0x24008a78

08002e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e28:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <SystemInit+0xd0>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2e:	4a31      	ldr	r2, [pc, #196]	; (8002ef4 <SystemInit+0xd0>)
 8002e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e38:	4b2f      	ldr	r3, [pc, #188]	; (8002ef8 <SystemInit+0xd4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d807      	bhi.n	8002e54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e44:	4b2c      	ldr	r3, [pc, #176]	; (8002ef8 <SystemInit+0xd4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 030f 	bic.w	r3, r3, #15
 8002e4c:	4a2a      	ldr	r2, [pc, #168]	; (8002ef8 <SystemInit+0xd4>)
 8002e4e:	f043 0303 	orr.w	r3, r3, #3
 8002e52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002e54:	4b29      	ldr	r3, [pc, #164]	; (8002efc <SystemInit+0xd8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a28      	ldr	r2, [pc, #160]	; (8002efc <SystemInit+0xd8>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e60:	4b26      	ldr	r3, [pc, #152]	; (8002efc <SystemInit+0xd8>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e66:	4b25      	ldr	r3, [pc, #148]	; (8002efc <SystemInit+0xd8>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4924      	ldr	r1, [pc, #144]	; (8002efc <SystemInit+0xd8>)
 8002e6c:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <SystemInit+0xdc>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e72:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <SystemInit+0xd4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <SystemInit+0xd4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 030f 	bic.w	r3, r3, #15
 8002e86:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <SystemInit+0xd4>)
 8002e88:	f043 0303 	orr.w	r3, r3, #3
 8002e8c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <SystemInit+0xd8>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <SystemInit+0xd8>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002e9a:	4b18      	ldr	r3, [pc, #96]	; (8002efc <SystemInit+0xd8>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ea0:	4b16      	ldr	r3, [pc, #88]	; (8002efc <SystemInit+0xd8>)
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <SystemInit+0xe0>)
 8002ea4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ea6:	4b15      	ldr	r3, [pc, #84]	; (8002efc <SystemInit+0xd8>)
 8002ea8:	4a17      	ldr	r2, [pc, #92]	; (8002f08 <SystemInit+0xe4>)
 8002eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <SystemInit+0xd8>)
 8002eae:	4a17      	ldr	r2, [pc, #92]	; (8002f0c <SystemInit+0xe8>)
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002eb2:	4b12      	ldr	r3, [pc, #72]	; (8002efc <SystemInit+0xd8>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002eb8:	4b10      	ldr	r3, [pc, #64]	; (8002efc <SystemInit+0xd8>)
 8002eba:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <SystemInit+0xe8>)
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <SystemInit+0xd8>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ec4:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <SystemInit+0xd8>)
 8002ec6:	4a11      	ldr	r2, [pc, #68]	; (8002f0c <SystemInit+0xe8>)
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002eca:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <SystemInit+0xd8>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <SystemInit+0xd8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a09      	ldr	r2, [pc, #36]	; (8002efc <SystemInit+0xd8>)
 8002ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002edc:	4b07      	ldr	r3, [pc, #28]	; (8002efc <SystemInit+0xd8>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <SystemInit+0xec>)
 8002ee4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002ee8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00
 8002ef8:	52002000 	.word	0x52002000
 8002efc:	58024400 	.word	0x58024400
 8002f00:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f04:	02020200 	.word	0x02020200
 8002f08:	01ff0000 	.word	0x01ff0000
 8002f0c:	01010280 	.word	0x01010280
 8002f10:	52004000 	.word	0x52004000

08002f14 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 8002f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f18:	f7ff ff84 	bl	8002e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f1c:	480c      	ldr	r0, [pc, #48]	; (8002f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f1e:	490d      	ldr	r1, [pc, #52]	; (8002f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f20:	4a0d      	ldr	r2, [pc, #52]	; (8002f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f24:	e002      	b.n	8002f2c <LoopCopyDataInit>

08002f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f2a:	3304      	adds	r3, #4

08002f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f30:	d3f9      	bcc.n	8002f26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f34:	4c0a      	ldr	r4, [pc, #40]	; (8002f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f38:	e001      	b.n	8002f3e <LoopFillZerobss>

08002f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f3c:	3204      	adds	r2, #4

08002f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f40:	d3fb      	bcc.n	8002f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f42:	f00f f82f 	bl	8011fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f46:	f7fd fca1 	bl	800088c <main>
  bx  lr
 8002f4a:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 8002f4c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002f50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f54:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8002f58:	080129d8 	.word	0x080129d8
  ldr r2, =_sbss
 8002f5c:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8002f60:	24008a74 	.word	0x24008a74

08002f64 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f64:	e7fe      	b.n	8002f64 <ADC_IRQHandler>
	...

08002f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f6e:	2003      	movs	r0, #3
 8002f70:	f000 f9a4 	bl	80032bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002f74:	f004 f8d0 	bl	8007118 <HAL_RCC_GetSysClockFreq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <HAL_Init+0x68>)
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	4913      	ldr	r1, [pc, #76]	; (8002fd4 <HAL_Init+0x6c>)
 8002f86:	5ccb      	ldrb	r3, [r1, r3]
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f90:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002f92:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <HAL_Init+0x68>)
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <HAL_Init+0x6c>)
 8002f9c:	5cd3      	ldrb	r3, [r2, r3]
 8002f9e:	f003 031f 	and.w	r3, r3, #31
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <HAL_Init+0x70>)
 8002faa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fac:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <HAL_Init+0x74>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fb2:	200e      	movs	r0, #14
 8002fb4:	f000 f814 	bl	8002fe0 <HAL_InitTick>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e002      	b.n	8002fc8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002fc2:	f7ff f8c5 	bl	8002150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	58024400 	.word	0x58024400
 8002fd4:	08012940 	.word	0x08012940
 8002fd8:	2400000c 	.word	0x2400000c
 8002fdc:	24000008 	.word	0x24000008

08002fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002fe8:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_InitTick+0x60>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e021      	b.n	8003038 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <HAL_InitTick+0x64>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b11      	ldr	r3, [pc, #68]	; (8003040 <HAL_InitTick+0x60>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003002:	fbb3 f3f1 	udiv	r3, r3, r1
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f997 	bl	800333e <HAL_SYSTICK_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e00e      	b.n	8003038 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b0f      	cmp	r3, #15
 800301e:	d80a      	bhi.n	8003036 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003020:	2200      	movs	r2, #0
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	f000 f953 	bl	80032d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800302c:	4a06      	ldr	r2, [pc, #24]	; (8003048 <HAL_InitTick+0x68>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	24000014 	.word	0x24000014
 8003044:	24000008 	.word	0x24000008
 8003048:	24000010 	.word	0x24000010

0800304c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_IncTick+0x20>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_IncTick+0x24>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4413      	add	r3, r2
 800305c:	4a04      	ldr	r2, [pc, #16]	; (8003070 <HAL_IncTick+0x24>)
 800305e:	6013      	str	r3, [r2, #0]
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	24000014 	.word	0x24000014
 8003070:	240087ec 	.word	0x240087ec

08003074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return uwTick;
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_GetTick+0x14>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	240087ec 	.word	0x240087ec

0800308c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003094:	f7ff ffee 	bl	8003074 <HAL_GetTick>
 8003098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d005      	beq.n	80030b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <HAL_Delay+0x44>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030b2:	bf00      	nop
 80030b4:	f7ff ffde 	bl	8003074 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d8f7      	bhi.n	80030b4 <HAL_Delay+0x28>
  {
  }
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	24000014 	.word	0x24000014

080030d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <__NVIC_SetPriorityGrouping+0x40>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030f0:	4013      	ands	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <__NVIC_SetPriorityGrouping+0x44>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003102:	4a04      	ldr	r2, [pc, #16]	; (8003114 <__NVIC_SetPriorityGrouping+0x40>)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	60d3      	str	r3, [r2, #12]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00
 8003118:	05fa0000 	.word	0x05fa0000

0800311c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003120:	4b04      	ldr	r3, [pc, #16]	; (8003134 <__NVIC_GetPriorityGrouping+0x18>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	f003 0307 	and.w	r3, r3, #7
}
 800312a:	4618      	mov	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003146:	2b00      	cmp	r3, #0
 8003148:	db0b      	blt.n	8003162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	f003 021f 	and.w	r2, r3, #31
 8003150:	4907      	ldr	r1, [pc, #28]	; (8003170 <__NVIC_EnableIRQ+0x38>)
 8003152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	2001      	movs	r0, #1
 800315a:	fa00 f202 	lsl.w	r2, r0, r2
 800315e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000e100 	.word	0xe000e100

08003174 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800317e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003182:	2b00      	cmp	r3, #0
 8003184:	db12      	blt.n	80031ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	f003 021f 	and.w	r2, r3, #31
 800318c:	490a      	ldr	r1, [pc, #40]	; (80031b8 <__NVIC_DisableIRQ+0x44>)
 800318e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	2001      	movs	r0, #1
 8003196:	fa00 f202 	lsl.w	r2, r0, r2
 800319a:	3320      	adds	r3, #32
 800319c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80031a0:	f3bf 8f4f 	dsb	sy
}
 80031a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031a6:	f3bf 8f6f 	isb	sy
}
 80031aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	e000e100 	.word	0xe000e100

080031bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	6039      	str	r1, [r7, #0]
 80031c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	db0a      	blt.n	80031e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	490c      	ldr	r1, [pc, #48]	; (8003208 <__NVIC_SetPriority+0x4c>)
 80031d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031da:	0112      	lsls	r2, r2, #4
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	440b      	add	r3, r1
 80031e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e4:	e00a      	b.n	80031fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4908      	ldr	r1, [pc, #32]	; (800320c <__NVIC_SetPriority+0x50>)
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	3b04      	subs	r3, #4
 80031f4:	0112      	lsls	r2, r2, #4
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	440b      	add	r3, r1
 80031fa:	761a      	strb	r2, [r3, #24]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000e100 	.word	0xe000e100
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	; 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f1c3 0307 	rsb	r3, r3, #7
 800322a:	2b04      	cmp	r3, #4
 800322c:	bf28      	it	cs
 800322e:	2304      	movcs	r3, #4
 8003230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3304      	adds	r3, #4
 8003236:	2b06      	cmp	r3, #6
 8003238:	d902      	bls.n	8003240 <NVIC_EncodePriority+0x30>
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3b03      	subs	r3, #3
 800323e:	e000      	b.n	8003242 <NVIC_EncodePriority+0x32>
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	f04f 32ff 	mov.w	r2, #4294967295
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43da      	mvns	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	401a      	ands	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003258:	f04f 31ff 	mov.w	r1, #4294967295
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	43d9      	mvns	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	4313      	orrs	r3, r2
         );
}
 800326a:	4618      	mov	r0, r3
 800326c:	3724      	adds	r7, #36	; 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
	...

08003278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3b01      	subs	r3, #1
 8003284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003288:	d301      	bcc.n	800328e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800328a:	2301      	movs	r3, #1
 800328c:	e00f      	b.n	80032ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <SysTick_Config+0x40>)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3b01      	subs	r3, #1
 8003294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003296:	210f      	movs	r1, #15
 8003298:	f04f 30ff 	mov.w	r0, #4294967295
 800329c:	f7ff ff8e 	bl	80031bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <SysTick_Config+0x40>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032a6:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <SysTick_Config+0x40>)
 80032a8:	2207      	movs	r2, #7
 80032aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	e000e010 	.word	0xe000e010

080032bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff ff05 	bl	80030d4 <__NVIC_SetPriorityGrouping>
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b086      	sub	sp, #24
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	4603      	mov	r3, r0
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032e0:	f7ff ff1c 	bl	800311c <__NVIC_GetPriorityGrouping>
 80032e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	6978      	ldr	r0, [r7, #20]
 80032ec:	f7ff ff90 	bl	8003210 <NVIC_EncodePriority>
 80032f0:	4602      	mov	r2, r0
 80032f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032f6:	4611      	mov	r1, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff5f 	bl	80031bc <__NVIC_SetPriority>
}
 80032fe:	bf00      	nop
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	4603      	mov	r3, r0
 800330e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003310:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff0f 	bl	8003138 <__NVIC_EnableIRQ>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	4603      	mov	r3, r0
 800332a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800332c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff1f 	bl	8003174 <__NVIC_DisableIRQ>
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ff96 	bl	8003278 <SysTick_Config>
 800334c:	4603      	mov	r3, r0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003360:	f7ff fe88 	bl	8003074 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e37f      	b.n	8003a70 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a66      	ldr	r2, [pc, #408]	; (8003510 <HAL_DMA_Init+0x1b8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d04a      	beq.n	8003410 <HAL_DMA_Init+0xb8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a65      	ldr	r2, [pc, #404]	; (8003514 <HAL_DMA_Init+0x1bc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d045      	beq.n	8003410 <HAL_DMA_Init+0xb8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a63      	ldr	r2, [pc, #396]	; (8003518 <HAL_DMA_Init+0x1c0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d040      	beq.n	8003410 <HAL_DMA_Init+0xb8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a62      	ldr	r2, [pc, #392]	; (800351c <HAL_DMA_Init+0x1c4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d03b      	beq.n	8003410 <HAL_DMA_Init+0xb8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a60      	ldr	r2, [pc, #384]	; (8003520 <HAL_DMA_Init+0x1c8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d036      	beq.n	8003410 <HAL_DMA_Init+0xb8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a5f      	ldr	r2, [pc, #380]	; (8003524 <HAL_DMA_Init+0x1cc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d031      	beq.n	8003410 <HAL_DMA_Init+0xb8>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a5d      	ldr	r2, [pc, #372]	; (8003528 <HAL_DMA_Init+0x1d0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d02c      	beq.n	8003410 <HAL_DMA_Init+0xb8>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a5c      	ldr	r2, [pc, #368]	; (800352c <HAL_DMA_Init+0x1d4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d027      	beq.n	8003410 <HAL_DMA_Init+0xb8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a5a      	ldr	r2, [pc, #360]	; (8003530 <HAL_DMA_Init+0x1d8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d022      	beq.n	8003410 <HAL_DMA_Init+0xb8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a59      	ldr	r2, [pc, #356]	; (8003534 <HAL_DMA_Init+0x1dc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d01d      	beq.n	8003410 <HAL_DMA_Init+0xb8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a57      	ldr	r2, [pc, #348]	; (8003538 <HAL_DMA_Init+0x1e0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d018      	beq.n	8003410 <HAL_DMA_Init+0xb8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a56      	ldr	r2, [pc, #344]	; (800353c <HAL_DMA_Init+0x1e4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d013      	beq.n	8003410 <HAL_DMA_Init+0xb8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a54      	ldr	r2, [pc, #336]	; (8003540 <HAL_DMA_Init+0x1e8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00e      	beq.n	8003410 <HAL_DMA_Init+0xb8>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a53      	ldr	r2, [pc, #332]	; (8003544 <HAL_DMA_Init+0x1ec>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d009      	beq.n	8003410 <HAL_DMA_Init+0xb8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a51      	ldr	r2, [pc, #324]	; (8003548 <HAL_DMA_Init+0x1f0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d004      	beq.n	8003410 <HAL_DMA_Init+0xb8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a50      	ldr	r2, [pc, #320]	; (800354c <HAL_DMA_Init+0x1f4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d101      	bne.n	8003414 <HAL_DMA_Init+0xbc>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <HAL_DMA_Init+0xbe>
 8003414:	2300      	movs	r3, #0
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 813c 	beq.w	8003694 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a37      	ldr	r2, [pc, #220]	; (8003510 <HAL_DMA_Init+0x1b8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d04a      	beq.n	80034cc <HAL_DMA_Init+0x174>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a36      	ldr	r2, [pc, #216]	; (8003514 <HAL_DMA_Init+0x1bc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d045      	beq.n	80034cc <HAL_DMA_Init+0x174>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a34      	ldr	r2, [pc, #208]	; (8003518 <HAL_DMA_Init+0x1c0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d040      	beq.n	80034cc <HAL_DMA_Init+0x174>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a33      	ldr	r2, [pc, #204]	; (800351c <HAL_DMA_Init+0x1c4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d03b      	beq.n	80034cc <HAL_DMA_Init+0x174>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a31      	ldr	r2, [pc, #196]	; (8003520 <HAL_DMA_Init+0x1c8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d036      	beq.n	80034cc <HAL_DMA_Init+0x174>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a30      	ldr	r2, [pc, #192]	; (8003524 <HAL_DMA_Init+0x1cc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d031      	beq.n	80034cc <HAL_DMA_Init+0x174>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a2e      	ldr	r2, [pc, #184]	; (8003528 <HAL_DMA_Init+0x1d0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d02c      	beq.n	80034cc <HAL_DMA_Init+0x174>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a2d      	ldr	r2, [pc, #180]	; (800352c <HAL_DMA_Init+0x1d4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d027      	beq.n	80034cc <HAL_DMA_Init+0x174>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a2b      	ldr	r2, [pc, #172]	; (8003530 <HAL_DMA_Init+0x1d8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d022      	beq.n	80034cc <HAL_DMA_Init+0x174>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a2a      	ldr	r2, [pc, #168]	; (8003534 <HAL_DMA_Init+0x1dc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d01d      	beq.n	80034cc <HAL_DMA_Init+0x174>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a28      	ldr	r2, [pc, #160]	; (8003538 <HAL_DMA_Init+0x1e0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d018      	beq.n	80034cc <HAL_DMA_Init+0x174>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a27      	ldr	r2, [pc, #156]	; (800353c <HAL_DMA_Init+0x1e4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d013      	beq.n	80034cc <HAL_DMA_Init+0x174>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a25      	ldr	r2, [pc, #148]	; (8003540 <HAL_DMA_Init+0x1e8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00e      	beq.n	80034cc <HAL_DMA_Init+0x174>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a24      	ldr	r2, [pc, #144]	; (8003544 <HAL_DMA_Init+0x1ec>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d009      	beq.n	80034cc <HAL_DMA_Init+0x174>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a22      	ldr	r2, [pc, #136]	; (8003548 <HAL_DMA_Init+0x1f0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d004      	beq.n	80034cc <HAL_DMA_Init+0x174>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a21      	ldr	r2, [pc, #132]	; (800354c <HAL_DMA_Init+0x1f4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d108      	bne.n	80034de <HAL_DMA_Init+0x186>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0201 	bic.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	e007      	b.n	80034ee <HAL_DMA_Init+0x196>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0201 	bic.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034ee:	e02f      	b.n	8003550 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034f0:	f7ff fdc0 	bl	8003074 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d928      	bls.n	8003550 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2203      	movs	r2, #3
 8003508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e2af      	b.n	8003a70 <HAL_DMA_Init+0x718>
 8003510:	40020010 	.word	0x40020010
 8003514:	40020028 	.word	0x40020028
 8003518:	40020040 	.word	0x40020040
 800351c:	40020058 	.word	0x40020058
 8003520:	40020070 	.word	0x40020070
 8003524:	40020088 	.word	0x40020088
 8003528:	400200a0 	.word	0x400200a0
 800352c:	400200b8 	.word	0x400200b8
 8003530:	40020410 	.word	0x40020410
 8003534:	40020428 	.word	0x40020428
 8003538:	40020440 	.word	0x40020440
 800353c:	40020458 	.word	0x40020458
 8003540:	40020470 	.word	0x40020470
 8003544:	40020488 	.word	0x40020488
 8003548:	400204a0 	.word	0x400204a0
 800354c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1c8      	bne.n	80034f0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4b73      	ldr	r3, [pc, #460]	; (8003738 <HAL_DMA_Init+0x3e0>)
 800356a:	4013      	ands	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003576:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003582:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800358e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d107      	bne.n	80035b4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	4313      	orrs	r3, r2
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b28      	cmp	r3, #40	; 0x28
 80035ba:	d903      	bls.n	80035c4 <HAL_DMA_Init+0x26c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b2e      	cmp	r3, #46	; 0x2e
 80035c2:	d91f      	bls.n	8003604 <HAL_DMA_Init+0x2ac>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b3e      	cmp	r3, #62	; 0x3e
 80035ca:	d903      	bls.n	80035d4 <HAL_DMA_Init+0x27c>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b42      	cmp	r3, #66	; 0x42
 80035d2:	d917      	bls.n	8003604 <HAL_DMA_Init+0x2ac>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b46      	cmp	r3, #70	; 0x46
 80035da:	d903      	bls.n	80035e4 <HAL_DMA_Init+0x28c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b48      	cmp	r3, #72	; 0x48
 80035e2:	d90f      	bls.n	8003604 <HAL_DMA_Init+0x2ac>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b4e      	cmp	r3, #78	; 0x4e
 80035ea:	d903      	bls.n	80035f4 <HAL_DMA_Init+0x29c>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b52      	cmp	r3, #82	; 0x52
 80035f2:	d907      	bls.n	8003604 <HAL_DMA_Init+0x2ac>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b73      	cmp	r3, #115	; 0x73
 80035fa:	d905      	bls.n	8003608 <HAL_DMA_Init+0x2b0>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b77      	cmp	r3, #119	; 0x77
 8003602:	d801      	bhi.n	8003608 <HAL_DMA_Init+0x2b0>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_DMA_Init+0x2b2>
 8003608:	2300      	movs	r3, #0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003614:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f023 0307 	bic.w	r3, r3, #7
 800362c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	2b04      	cmp	r3, #4
 800363e:	d117      	bne.n	8003670 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	4313      	orrs	r3, r2
 8003648:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00e      	beq.n	8003670 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f002 fbe2 	bl	8005e1c <DMA_CheckFifoParam>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2240      	movs	r2, #64	; 0x40
 8003662:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e1ff      	b.n	8003a70 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f002 fb1d 	bl	8005cb8 <DMA_CalcBaseAndBitshift>
 800367e:	4603      	mov	r3, r0
 8003680:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	223f      	movs	r2, #63	; 0x3f
 800368c:	409a      	lsls	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	e0fe      	b.n	8003892 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a28      	ldr	r2, [pc, #160]	; (800373c <HAL_DMA_Init+0x3e4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d04a      	beq.n	8003734 <HAL_DMA_Init+0x3dc>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a27      	ldr	r2, [pc, #156]	; (8003740 <HAL_DMA_Init+0x3e8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d045      	beq.n	8003734 <HAL_DMA_Init+0x3dc>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a25      	ldr	r2, [pc, #148]	; (8003744 <HAL_DMA_Init+0x3ec>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d040      	beq.n	8003734 <HAL_DMA_Init+0x3dc>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a24      	ldr	r2, [pc, #144]	; (8003748 <HAL_DMA_Init+0x3f0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d03b      	beq.n	8003734 <HAL_DMA_Init+0x3dc>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a22      	ldr	r2, [pc, #136]	; (800374c <HAL_DMA_Init+0x3f4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d036      	beq.n	8003734 <HAL_DMA_Init+0x3dc>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a21      	ldr	r2, [pc, #132]	; (8003750 <HAL_DMA_Init+0x3f8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d031      	beq.n	8003734 <HAL_DMA_Init+0x3dc>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1f      	ldr	r2, [pc, #124]	; (8003754 <HAL_DMA_Init+0x3fc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d02c      	beq.n	8003734 <HAL_DMA_Init+0x3dc>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1e      	ldr	r2, [pc, #120]	; (8003758 <HAL_DMA_Init+0x400>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d027      	beq.n	8003734 <HAL_DMA_Init+0x3dc>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1c      	ldr	r2, [pc, #112]	; (800375c <HAL_DMA_Init+0x404>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d022      	beq.n	8003734 <HAL_DMA_Init+0x3dc>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1b      	ldr	r2, [pc, #108]	; (8003760 <HAL_DMA_Init+0x408>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d01d      	beq.n	8003734 <HAL_DMA_Init+0x3dc>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a19      	ldr	r2, [pc, #100]	; (8003764 <HAL_DMA_Init+0x40c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d018      	beq.n	8003734 <HAL_DMA_Init+0x3dc>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a18      	ldr	r2, [pc, #96]	; (8003768 <HAL_DMA_Init+0x410>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d013      	beq.n	8003734 <HAL_DMA_Init+0x3dc>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a16      	ldr	r2, [pc, #88]	; (800376c <HAL_DMA_Init+0x414>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00e      	beq.n	8003734 <HAL_DMA_Init+0x3dc>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_DMA_Init+0x418>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d009      	beq.n	8003734 <HAL_DMA_Init+0x3dc>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a13      	ldr	r2, [pc, #76]	; (8003774 <HAL_DMA_Init+0x41c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_DMA_Init+0x3dc>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a12      	ldr	r2, [pc, #72]	; (8003778 <HAL_DMA_Init+0x420>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d123      	bne.n	800377c <HAL_DMA_Init+0x424>
 8003734:	2301      	movs	r3, #1
 8003736:	e022      	b.n	800377e <HAL_DMA_Init+0x426>
 8003738:	fe10803f 	.word	0xfe10803f
 800373c:	48022c08 	.word	0x48022c08
 8003740:	48022c1c 	.word	0x48022c1c
 8003744:	48022c30 	.word	0x48022c30
 8003748:	48022c44 	.word	0x48022c44
 800374c:	48022c58 	.word	0x48022c58
 8003750:	48022c6c 	.word	0x48022c6c
 8003754:	48022c80 	.word	0x48022c80
 8003758:	48022c94 	.word	0x48022c94
 800375c:	58025408 	.word	0x58025408
 8003760:	5802541c 	.word	0x5802541c
 8003764:	58025430 	.word	0x58025430
 8003768:	58025444 	.word	0x58025444
 800376c:	58025458 	.word	0x58025458
 8003770:	5802546c 	.word	0x5802546c
 8003774:	58025480 	.word	0x58025480
 8003778:	58025494 	.word	0x58025494
 800377c:	2300      	movs	r3, #0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d07e      	beq.n	8003880 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a80      	ldr	r2, [pc, #512]	; (8003988 <HAL_DMA_Init+0x630>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d021      	beq.n	80037d0 <HAL_DMA_Init+0x478>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a7e      	ldr	r2, [pc, #504]	; (800398c <HAL_DMA_Init+0x634>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01c      	beq.n	80037d0 <HAL_DMA_Init+0x478>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a7d      	ldr	r2, [pc, #500]	; (8003990 <HAL_DMA_Init+0x638>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d017      	beq.n	80037d0 <HAL_DMA_Init+0x478>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a7b      	ldr	r2, [pc, #492]	; (8003994 <HAL_DMA_Init+0x63c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d012      	beq.n	80037d0 <HAL_DMA_Init+0x478>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a7a      	ldr	r2, [pc, #488]	; (8003998 <HAL_DMA_Init+0x640>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00d      	beq.n	80037d0 <HAL_DMA_Init+0x478>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a78      	ldr	r2, [pc, #480]	; (800399c <HAL_DMA_Init+0x644>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d008      	beq.n	80037d0 <HAL_DMA_Init+0x478>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a77      	ldr	r2, [pc, #476]	; (80039a0 <HAL_DMA_Init+0x648>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <HAL_DMA_Init+0x478>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a75      	ldr	r2, [pc, #468]	; (80039a4 <HAL_DMA_Init+0x64c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4b6e      	ldr	r3, [pc, #440]	; (80039a8 <HAL_DMA_Init+0x650>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b40      	cmp	r3, #64	; 0x40
 80037f8:	d008      	beq.n	800380c <HAL_DMA_Init+0x4b4>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b80      	cmp	r3, #128	; 0x80
 8003800:	d102      	bne.n	8003808 <HAL_DMA_Init+0x4b0>
 8003802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003806:	e002      	b.n	800380e <HAL_DMA_Init+0x4b6>
 8003808:	2300      	movs	r3, #0
 800380a:	e000      	b.n	800380e <HAL_DMA_Init+0x4b6>
 800380c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68d2      	ldr	r2, [r2, #12]
 8003812:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003814:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800381c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003824:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800382c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003834:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800383c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b56      	ldr	r3, [pc, #344]	; (80039ac <HAL_DMA_Init+0x654>)
 8003854:	4413      	add	r3, r2
 8003856:	4a56      	ldr	r2, [pc, #344]	; (80039b0 <HAL_DMA_Init+0x658>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	009a      	lsls	r2, r3, #2
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f002 fa27 	bl	8005cb8 <DMA_CalcBaseAndBitshift>
 800386a:	4603      	mov	r3, r0
 800386c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	2201      	movs	r2, #1
 8003878:	409a      	lsls	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	e008      	b.n	8003892 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2240      	movs	r2, #64	; 0x40
 8003884:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2203      	movs	r2, #3
 800388a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e0ee      	b.n	8003a70 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a47      	ldr	r2, [pc, #284]	; (80039b4 <HAL_DMA_Init+0x65c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d072      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a45      	ldr	r2, [pc, #276]	; (80039b8 <HAL_DMA_Init+0x660>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d06d      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a44      	ldr	r2, [pc, #272]	; (80039bc <HAL_DMA_Init+0x664>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d068      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a42      	ldr	r2, [pc, #264]	; (80039c0 <HAL_DMA_Init+0x668>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d063      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a41      	ldr	r2, [pc, #260]	; (80039c4 <HAL_DMA_Init+0x66c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d05e      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a3f      	ldr	r2, [pc, #252]	; (80039c8 <HAL_DMA_Init+0x670>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d059      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a3e      	ldr	r2, [pc, #248]	; (80039cc <HAL_DMA_Init+0x674>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d054      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a3c      	ldr	r2, [pc, #240]	; (80039d0 <HAL_DMA_Init+0x678>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d04f      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a3b      	ldr	r2, [pc, #236]	; (80039d4 <HAL_DMA_Init+0x67c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d04a      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a39      	ldr	r2, [pc, #228]	; (80039d8 <HAL_DMA_Init+0x680>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d045      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a38      	ldr	r2, [pc, #224]	; (80039dc <HAL_DMA_Init+0x684>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d040      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a36      	ldr	r2, [pc, #216]	; (80039e0 <HAL_DMA_Init+0x688>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d03b      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a35      	ldr	r2, [pc, #212]	; (80039e4 <HAL_DMA_Init+0x68c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d036      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a33      	ldr	r2, [pc, #204]	; (80039e8 <HAL_DMA_Init+0x690>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d031      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a32      	ldr	r2, [pc, #200]	; (80039ec <HAL_DMA_Init+0x694>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d02c      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a30      	ldr	r2, [pc, #192]	; (80039f0 <HAL_DMA_Init+0x698>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d027      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a14      	ldr	r2, [pc, #80]	; (8003988 <HAL_DMA_Init+0x630>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d022      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a12      	ldr	r2, [pc, #72]	; (800398c <HAL_DMA_Init+0x634>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d01d      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a11      	ldr	r2, [pc, #68]	; (8003990 <HAL_DMA_Init+0x638>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d018      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a0f      	ldr	r2, [pc, #60]	; (8003994 <HAL_DMA_Init+0x63c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a0e      	ldr	r2, [pc, #56]	; (8003998 <HAL_DMA_Init+0x640>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a0c      	ldr	r2, [pc, #48]	; (800399c <HAL_DMA_Init+0x644>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a0b      	ldr	r2, [pc, #44]	; (80039a0 <HAL_DMA_Init+0x648>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_DMA_Init+0x62a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a09      	ldr	r2, [pc, #36]	; (80039a4 <HAL_DMA_Init+0x64c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d138      	bne.n	80039f4 <HAL_DMA_Init+0x69c>
 8003982:	2301      	movs	r3, #1
 8003984:	e037      	b.n	80039f6 <HAL_DMA_Init+0x69e>
 8003986:	bf00      	nop
 8003988:	58025408 	.word	0x58025408
 800398c:	5802541c 	.word	0x5802541c
 8003990:	58025430 	.word	0x58025430
 8003994:	58025444 	.word	0x58025444
 8003998:	58025458 	.word	0x58025458
 800399c:	5802546c 	.word	0x5802546c
 80039a0:	58025480 	.word	0x58025480
 80039a4:	58025494 	.word	0x58025494
 80039a8:	fffe000f 	.word	0xfffe000f
 80039ac:	a7fdabf8 	.word	0xa7fdabf8
 80039b0:	cccccccd 	.word	0xcccccccd
 80039b4:	40020010 	.word	0x40020010
 80039b8:	40020028 	.word	0x40020028
 80039bc:	40020040 	.word	0x40020040
 80039c0:	40020058 	.word	0x40020058
 80039c4:	40020070 	.word	0x40020070
 80039c8:	40020088 	.word	0x40020088
 80039cc:	400200a0 	.word	0x400200a0
 80039d0:	400200b8 	.word	0x400200b8
 80039d4:	40020410 	.word	0x40020410
 80039d8:	40020428 	.word	0x40020428
 80039dc:	40020440 	.word	0x40020440
 80039e0:	40020458 	.word	0x40020458
 80039e4:	40020470 	.word	0x40020470
 80039e8:	40020488 	.word	0x40020488
 80039ec:	400204a0 	.word	0x400204a0
 80039f0:	400204b8 	.word	0x400204b8
 80039f4:	2300      	movs	r3, #0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d032      	beq.n	8003a60 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f002 fa8a 	bl	8005f14 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b80      	cmp	r3, #128	; 0x80
 8003a06:	d102      	bne.n	8003a0e <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a22:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d010      	beq.n	8003a4e <HAL_DMA_Init+0x6f6>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d80c      	bhi.n	8003a4e <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f002 fb07 	bl	8006048 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a4a:	605a      	str	r2, [r3, #4]
 8003a4c:	e008      	b.n	8003a60 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e226      	b.n	8003ee2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_DMA_Start_IT+0x2a>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e21f      	b.n	8003ee2 <HAL_DMA_Start_IT+0x46a>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	f040 820a 	bne.w	8003ecc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a68      	ldr	r2, [pc, #416]	; (8003c6c <HAL_DMA_Start_IT+0x1f4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d04a      	beq.n	8003b66 <HAL_DMA_Start_IT+0xee>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a66      	ldr	r2, [pc, #408]	; (8003c70 <HAL_DMA_Start_IT+0x1f8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d045      	beq.n	8003b66 <HAL_DMA_Start_IT+0xee>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a65      	ldr	r2, [pc, #404]	; (8003c74 <HAL_DMA_Start_IT+0x1fc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d040      	beq.n	8003b66 <HAL_DMA_Start_IT+0xee>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a63      	ldr	r2, [pc, #396]	; (8003c78 <HAL_DMA_Start_IT+0x200>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d03b      	beq.n	8003b66 <HAL_DMA_Start_IT+0xee>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a62      	ldr	r2, [pc, #392]	; (8003c7c <HAL_DMA_Start_IT+0x204>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d036      	beq.n	8003b66 <HAL_DMA_Start_IT+0xee>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a60      	ldr	r2, [pc, #384]	; (8003c80 <HAL_DMA_Start_IT+0x208>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d031      	beq.n	8003b66 <HAL_DMA_Start_IT+0xee>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a5f      	ldr	r2, [pc, #380]	; (8003c84 <HAL_DMA_Start_IT+0x20c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d02c      	beq.n	8003b66 <HAL_DMA_Start_IT+0xee>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a5d      	ldr	r2, [pc, #372]	; (8003c88 <HAL_DMA_Start_IT+0x210>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d027      	beq.n	8003b66 <HAL_DMA_Start_IT+0xee>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a5c      	ldr	r2, [pc, #368]	; (8003c8c <HAL_DMA_Start_IT+0x214>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d022      	beq.n	8003b66 <HAL_DMA_Start_IT+0xee>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a5a      	ldr	r2, [pc, #360]	; (8003c90 <HAL_DMA_Start_IT+0x218>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d01d      	beq.n	8003b66 <HAL_DMA_Start_IT+0xee>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a59      	ldr	r2, [pc, #356]	; (8003c94 <HAL_DMA_Start_IT+0x21c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d018      	beq.n	8003b66 <HAL_DMA_Start_IT+0xee>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a57      	ldr	r2, [pc, #348]	; (8003c98 <HAL_DMA_Start_IT+0x220>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d013      	beq.n	8003b66 <HAL_DMA_Start_IT+0xee>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a56      	ldr	r2, [pc, #344]	; (8003c9c <HAL_DMA_Start_IT+0x224>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00e      	beq.n	8003b66 <HAL_DMA_Start_IT+0xee>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a54      	ldr	r2, [pc, #336]	; (8003ca0 <HAL_DMA_Start_IT+0x228>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d009      	beq.n	8003b66 <HAL_DMA_Start_IT+0xee>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a53      	ldr	r2, [pc, #332]	; (8003ca4 <HAL_DMA_Start_IT+0x22c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d004      	beq.n	8003b66 <HAL_DMA_Start_IT+0xee>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a51      	ldr	r2, [pc, #324]	; (8003ca8 <HAL_DMA_Start_IT+0x230>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d108      	bne.n	8003b78 <HAL_DMA_Start_IT+0x100>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e007      	b.n	8003b88 <HAL_DMA_Start_IT+0x110>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0201 	bic.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f001 feae 	bl	80058f0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a34      	ldr	r2, [pc, #208]	; (8003c6c <HAL_DMA_Start_IT+0x1f4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d04a      	beq.n	8003c34 <HAL_DMA_Start_IT+0x1bc>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a33      	ldr	r2, [pc, #204]	; (8003c70 <HAL_DMA_Start_IT+0x1f8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d045      	beq.n	8003c34 <HAL_DMA_Start_IT+0x1bc>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a31      	ldr	r2, [pc, #196]	; (8003c74 <HAL_DMA_Start_IT+0x1fc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d040      	beq.n	8003c34 <HAL_DMA_Start_IT+0x1bc>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a30      	ldr	r2, [pc, #192]	; (8003c78 <HAL_DMA_Start_IT+0x200>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d03b      	beq.n	8003c34 <HAL_DMA_Start_IT+0x1bc>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a2e      	ldr	r2, [pc, #184]	; (8003c7c <HAL_DMA_Start_IT+0x204>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d036      	beq.n	8003c34 <HAL_DMA_Start_IT+0x1bc>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a2d      	ldr	r2, [pc, #180]	; (8003c80 <HAL_DMA_Start_IT+0x208>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d031      	beq.n	8003c34 <HAL_DMA_Start_IT+0x1bc>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a2b      	ldr	r2, [pc, #172]	; (8003c84 <HAL_DMA_Start_IT+0x20c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d02c      	beq.n	8003c34 <HAL_DMA_Start_IT+0x1bc>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a2a      	ldr	r2, [pc, #168]	; (8003c88 <HAL_DMA_Start_IT+0x210>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d027      	beq.n	8003c34 <HAL_DMA_Start_IT+0x1bc>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a28      	ldr	r2, [pc, #160]	; (8003c8c <HAL_DMA_Start_IT+0x214>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d022      	beq.n	8003c34 <HAL_DMA_Start_IT+0x1bc>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <HAL_DMA_Start_IT+0x218>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d01d      	beq.n	8003c34 <HAL_DMA_Start_IT+0x1bc>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a25      	ldr	r2, [pc, #148]	; (8003c94 <HAL_DMA_Start_IT+0x21c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d018      	beq.n	8003c34 <HAL_DMA_Start_IT+0x1bc>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a24      	ldr	r2, [pc, #144]	; (8003c98 <HAL_DMA_Start_IT+0x220>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d013      	beq.n	8003c34 <HAL_DMA_Start_IT+0x1bc>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a22      	ldr	r2, [pc, #136]	; (8003c9c <HAL_DMA_Start_IT+0x224>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00e      	beq.n	8003c34 <HAL_DMA_Start_IT+0x1bc>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a21      	ldr	r2, [pc, #132]	; (8003ca0 <HAL_DMA_Start_IT+0x228>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d009      	beq.n	8003c34 <HAL_DMA_Start_IT+0x1bc>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1f      	ldr	r2, [pc, #124]	; (8003ca4 <HAL_DMA_Start_IT+0x22c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d004      	beq.n	8003c34 <HAL_DMA_Start_IT+0x1bc>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ca8 <HAL_DMA_Start_IT+0x230>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d101      	bne.n	8003c38 <HAL_DMA_Start_IT+0x1c0>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <HAL_DMA_Start_IT+0x1c2>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d036      	beq.n	8003cac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f023 021e 	bic.w	r2, r3, #30
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0216 	orr.w	r2, r2, #22
 8003c50:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d03e      	beq.n	8003cd8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0208 	orr.w	r2, r2, #8
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	e035      	b.n	8003cd8 <HAL_DMA_Start_IT+0x260>
 8003c6c:	40020010 	.word	0x40020010
 8003c70:	40020028 	.word	0x40020028
 8003c74:	40020040 	.word	0x40020040
 8003c78:	40020058 	.word	0x40020058
 8003c7c:	40020070 	.word	0x40020070
 8003c80:	40020088 	.word	0x40020088
 8003c84:	400200a0 	.word	0x400200a0
 8003c88:	400200b8 	.word	0x400200b8
 8003c8c:	40020410 	.word	0x40020410
 8003c90:	40020428 	.word	0x40020428
 8003c94:	40020440 	.word	0x40020440
 8003c98:	40020458 	.word	0x40020458
 8003c9c:	40020470 	.word	0x40020470
 8003ca0:	40020488 	.word	0x40020488
 8003ca4:	400204a0 	.word	0x400204a0
 8003ca8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 020e 	bic.w	r2, r3, #14
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 020a 	orr.w	r2, r2, #10
 8003cbe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0204 	orr.w	r2, r2, #4
 8003cd6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a83      	ldr	r2, [pc, #524]	; (8003eec <HAL_DMA_Start_IT+0x474>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d072      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a82      	ldr	r2, [pc, #520]	; (8003ef0 <HAL_DMA_Start_IT+0x478>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d06d      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a80      	ldr	r2, [pc, #512]	; (8003ef4 <HAL_DMA_Start_IT+0x47c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d068      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a7f      	ldr	r2, [pc, #508]	; (8003ef8 <HAL_DMA_Start_IT+0x480>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d063      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a7d      	ldr	r2, [pc, #500]	; (8003efc <HAL_DMA_Start_IT+0x484>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d05e      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a7c      	ldr	r2, [pc, #496]	; (8003f00 <HAL_DMA_Start_IT+0x488>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d059      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a7a      	ldr	r2, [pc, #488]	; (8003f04 <HAL_DMA_Start_IT+0x48c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d054      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a79      	ldr	r2, [pc, #484]	; (8003f08 <HAL_DMA_Start_IT+0x490>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d04f      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a77      	ldr	r2, [pc, #476]	; (8003f0c <HAL_DMA_Start_IT+0x494>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d04a      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a76      	ldr	r2, [pc, #472]	; (8003f10 <HAL_DMA_Start_IT+0x498>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d045      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a74      	ldr	r2, [pc, #464]	; (8003f14 <HAL_DMA_Start_IT+0x49c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d040      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a73      	ldr	r2, [pc, #460]	; (8003f18 <HAL_DMA_Start_IT+0x4a0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d03b      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a71      	ldr	r2, [pc, #452]	; (8003f1c <HAL_DMA_Start_IT+0x4a4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d036      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a70      	ldr	r2, [pc, #448]	; (8003f20 <HAL_DMA_Start_IT+0x4a8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d031      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a6e      	ldr	r2, [pc, #440]	; (8003f24 <HAL_DMA_Start_IT+0x4ac>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d02c      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a6d      	ldr	r2, [pc, #436]	; (8003f28 <HAL_DMA_Start_IT+0x4b0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d027      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a6b      	ldr	r2, [pc, #428]	; (8003f2c <HAL_DMA_Start_IT+0x4b4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d022      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a6a      	ldr	r2, [pc, #424]	; (8003f30 <HAL_DMA_Start_IT+0x4b8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d01d      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a68      	ldr	r2, [pc, #416]	; (8003f34 <HAL_DMA_Start_IT+0x4bc>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d018      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a67      	ldr	r2, [pc, #412]	; (8003f38 <HAL_DMA_Start_IT+0x4c0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a65      	ldr	r2, [pc, #404]	; (8003f3c <HAL_DMA_Start_IT+0x4c4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00e      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a64      	ldr	r2, [pc, #400]	; (8003f40 <HAL_DMA_Start_IT+0x4c8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d009      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a62      	ldr	r2, [pc, #392]	; (8003f44 <HAL_DMA_Start_IT+0x4cc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d004      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x350>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a61      	ldr	r2, [pc, #388]	; (8003f48 <HAL_DMA_Start_IT+0x4d0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d101      	bne.n	8003dcc <HAL_DMA_Start_IT+0x354>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <HAL_DMA_Start_IT+0x356>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d01a      	beq.n	8003e08 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d007      	beq.n	8003e08 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e06:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a37      	ldr	r2, [pc, #220]	; (8003eec <HAL_DMA_Start_IT+0x474>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d04a      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x430>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a36      	ldr	r2, [pc, #216]	; (8003ef0 <HAL_DMA_Start_IT+0x478>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d045      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x430>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a34      	ldr	r2, [pc, #208]	; (8003ef4 <HAL_DMA_Start_IT+0x47c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d040      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x430>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a33      	ldr	r2, [pc, #204]	; (8003ef8 <HAL_DMA_Start_IT+0x480>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d03b      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x430>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a31      	ldr	r2, [pc, #196]	; (8003efc <HAL_DMA_Start_IT+0x484>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d036      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x430>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a30      	ldr	r2, [pc, #192]	; (8003f00 <HAL_DMA_Start_IT+0x488>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d031      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x430>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2e      	ldr	r2, [pc, #184]	; (8003f04 <HAL_DMA_Start_IT+0x48c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02c      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x430>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2d      	ldr	r2, [pc, #180]	; (8003f08 <HAL_DMA_Start_IT+0x490>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d027      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x430>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a2b      	ldr	r2, [pc, #172]	; (8003f0c <HAL_DMA_Start_IT+0x494>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d022      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x430>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2a      	ldr	r2, [pc, #168]	; (8003f10 <HAL_DMA_Start_IT+0x498>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d01d      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x430>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a28      	ldr	r2, [pc, #160]	; (8003f14 <HAL_DMA_Start_IT+0x49c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d018      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x430>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a27      	ldr	r2, [pc, #156]	; (8003f18 <HAL_DMA_Start_IT+0x4a0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d013      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x430>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a25      	ldr	r2, [pc, #148]	; (8003f1c <HAL_DMA_Start_IT+0x4a4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00e      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x430>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a24      	ldr	r2, [pc, #144]	; (8003f20 <HAL_DMA_Start_IT+0x4a8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d009      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x430>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a22      	ldr	r2, [pc, #136]	; (8003f24 <HAL_DMA_Start_IT+0x4ac>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x430>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a21      	ldr	r2, [pc, #132]	; (8003f28 <HAL_DMA_Start_IT+0x4b0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d108      	bne.n	8003eba <HAL_DMA_Start_IT+0x442>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e012      	b.n	8003ee0 <HAL_DMA_Start_IT+0x468>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0201 	orr.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e009      	b.n	8003ee0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40020010 	.word	0x40020010
 8003ef0:	40020028 	.word	0x40020028
 8003ef4:	40020040 	.word	0x40020040
 8003ef8:	40020058 	.word	0x40020058
 8003efc:	40020070 	.word	0x40020070
 8003f00:	40020088 	.word	0x40020088
 8003f04:	400200a0 	.word	0x400200a0
 8003f08:	400200b8 	.word	0x400200b8
 8003f0c:	40020410 	.word	0x40020410
 8003f10:	40020428 	.word	0x40020428
 8003f14:	40020440 	.word	0x40020440
 8003f18:	40020458 	.word	0x40020458
 8003f1c:	40020470 	.word	0x40020470
 8003f20:	40020488 	.word	0x40020488
 8003f24:	400204a0 	.word	0x400204a0
 8003f28:	400204b8 	.word	0x400204b8
 8003f2c:	58025408 	.word	0x58025408
 8003f30:	5802541c 	.word	0x5802541c
 8003f34:	58025430 	.word	0x58025430
 8003f38:	58025444 	.word	0x58025444
 8003f3c:	58025458 	.word	0x58025458
 8003f40:	5802546c 	.word	0x5802546c
 8003f44:	58025480 	.word	0x58025480
 8003f48:	58025494 	.word	0x58025494

08003f4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003f54:	f7ff f88e 	bl	8003074 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e2dc      	b.n	800451e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d008      	beq.n	8003f82 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2280      	movs	r2, #128	; 0x80
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e2cd      	b.n	800451e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a76      	ldr	r2, [pc, #472]	; (8004160 <HAL_DMA_Abort+0x214>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d04a      	beq.n	8004022 <HAL_DMA_Abort+0xd6>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a74      	ldr	r2, [pc, #464]	; (8004164 <HAL_DMA_Abort+0x218>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d045      	beq.n	8004022 <HAL_DMA_Abort+0xd6>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a73      	ldr	r2, [pc, #460]	; (8004168 <HAL_DMA_Abort+0x21c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d040      	beq.n	8004022 <HAL_DMA_Abort+0xd6>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a71      	ldr	r2, [pc, #452]	; (800416c <HAL_DMA_Abort+0x220>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d03b      	beq.n	8004022 <HAL_DMA_Abort+0xd6>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a70      	ldr	r2, [pc, #448]	; (8004170 <HAL_DMA_Abort+0x224>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d036      	beq.n	8004022 <HAL_DMA_Abort+0xd6>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a6e      	ldr	r2, [pc, #440]	; (8004174 <HAL_DMA_Abort+0x228>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d031      	beq.n	8004022 <HAL_DMA_Abort+0xd6>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a6d      	ldr	r2, [pc, #436]	; (8004178 <HAL_DMA_Abort+0x22c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d02c      	beq.n	8004022 <HAL_DMA_Abort+0xd6>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a6b      	ldr	r2, [pc, #428]	; (800417c <HAL_DMA_Abort+0x230>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d027      	beq.n	8004022 <HAL_DMA_Abort+0xd6>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a6a      	ldr	r2, [pc, #424]	; (8004180 <HAL_DMA_Abort+0x234>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d022      	beq.n	8004022 <HAL_DMA_Abort+0xd6>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a68      	ldr	r2, [pc, #416]	; (8004184 <HAL_DMA_Abort+0x238>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01d      	beq.n	8004022 <HAL_DMA_Abort+0xd6>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a67      	ldr	r2, [pc, #412]	; (8004188 <HAL_DMA_Abort+0x23c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d018      	beq.n	8004022 <HAL_DMA_Abort+0xd6>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a65      	ldr	r2, [pc, #404]	; (800418c <HAL_DMA_Abort+0x240>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <HAL_DMA_Abort+0xd6>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a64      	ldr	r2, [pc, #400]	; (8004190 <HAL_DMA_Abort+0x244>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00e      	beq.n	8004022 <HAL_DMA_Abort+0xd6>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a62      	ldr	r2, [pc, #392]	; (8004194 <HAL_DMA_Abort+0x248>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_DMA_Abort+0xd6>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a61      	ldr	r2, [pc, #388]	; (8004198 <HAL_DMA_Abort+0x24c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_DMA_Abort+0xd6>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a5f      	ldr	r2, [pc, #380]	; (800419c <HAL_DMA_Abort+0x250>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d101      	bne.n	8004026 <HAL_DMA_Abort+0xda>
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <HAL_DMA_Abort+0xdc>
 8004026:	2300      	movs	r3, #0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d013      	beq.n	8004054 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 021e 	bic.w	r2, r2, #30
 800403a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800404a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e00a      	b.n	800406a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 020e 	bic.w	r2, r2, #14
 8004062:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a3c      	ldr	r2, [pc, #240]	; (8004160 <HAL_DMA_Abort+0x214>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d072      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a3a      	ldr	r2, [pc, #232]	; (8004164 <HAL_DMA_Abort+0x218>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d06d      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a39      	ldr	r2, [pc, #228]	; (8004168 <HAL_DMA_Abort+0x21c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d068      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a37      	ldr	r2, [pc, #220]	; (800416c <HAL_DMA_Abort+0x220>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d063      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a36      	ldr	r2, [pc, #216]	; (8004170 <HAL_DMA_Abort+0x224>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d05e      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a34      	ldr	r2, [pc, #208]	; (8004174 <HAL_DMA_Abort+0x228>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d059      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a33      	ldr	r2, [pc, #204]	; (8004178 <HAL_DMA_Abort+0x22c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d054      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a31      	ldr	r2, [pc, #196]	; (800417c <HAL_DMA_Abort+0x230>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d04f      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a30      	ldr	r2, [pc, #192]	; (8004180 <HAL_DMA_Abort+0x234>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d04a      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a2e      	ldr	r2, [pc, #184]	; (8004184 <HAL_DMA_Abort+0x238>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d045      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a2d      	ldr	r2, [pc, #180]	; (8004188 <HAL_DMA_Abort+0x23c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d040      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a2b      	ldr	r2, [pc, #172]	; (800418c <HAL_DMA_Abort+0x240>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d03b      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a2a      	ldr	r2, [pc, #168]	; (8004190 <HAL_DMA_Abort+0x244>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d036      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a28      	ldr	r2, [pc, #160]	; (8004194 <HAL_DMA_Abort+0x248>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d031      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a27      	ldr	r2, [pc, #156]	; (8004198 <HAL_DMA_Abort+0x24c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d02c      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a25      	ldr	r2, [pc, #148]	; (800419c <HAL_DMA_Abort+0x250>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d027      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a24      	ldr	r2, [pc, #144]	; (80041a0 <HAL_DMA_Abort+0x254>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d022      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a22      	ldr	r2, [pc, #136]	; (80041a4 <HAL_DMA_Abort+0x258>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d01d      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a21      	ldr	r2, [pc, #132]	; (80041a8 <HAL_DMA_Abort+0x25c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d018      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1f      	ldr	r2, [pc, #124]	; (80041ac <HAL_DMA_Abort+0x260>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1e      	ldr	r2, [pc, #120]	; (80041b0 <HAL_DMA_Abort+0x264>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00e      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1c      	ldr	r2, [pc, #112]	; (80041b4 <HAL_DMA_Abort+0x268>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d009      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1b      	ldr	r2, [pc, #108]	; (80041b8 <HAL_DMA_Abort+0x26c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d004      	beq.n	800415a <HAL_DMA_Abort+0x20e>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a19      	ldr	r2, [pc, #100]	; (80041bc <HAL_DMA_Abort+0x270>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d132      	bne.n	80041c0 <HAL_DMA_Abort+0x274>
 800415a:	2301      	movs	r3, #1
 800415c:	e031      	b.n	80041c2 <HAL_DMA_Abort+0x276>
 800415e:	bf00      	nop
 8004160:	40020010 	.word	0x40020010
 8004164:	40020028 	.word	0x40020028
 8004168:	40020040 	.word	0x40020040
 800416c:	40020058 	.word	0x40020058
 8004170:	40020070 	.word	0x40020070
 8004174:	40020088 	.word	0x40020088
 8004178:	400200a0 	.word	0x400200a0
 800417c:	400200b8 	.word	0x400200b8
 8004180:	40020410 	.word	0x40020410
 8004184:	40020428 	.word	0x40020428
 8004188:	40020440 	.word	0x40020440
 800418c:	40020458 	.word	0x40020458
 8004190:	40020470 	.word	0x40020470
 8004194:	40020488 	.word	0x40020488
 8004198:	400204a0 	.word	0x400204a0
 800419c:	400204b8 	.word	0x400204b8
 80041a0:	58025408 	.word	0x58025408
 80041a4:	5802541c 	.word	0x5802541c
 80041a8:	58025430 	.word	0x58025430
 80041ac:	58025444 	.word	0x58025444
 80041b0:	58025458 	.word	0x58025458
 80041b4:	5802546c 	.word	0x5802546c
 80041b8:	58025480 	.word	0x58025480
 80041bc:	58025494 	.word	0x58025494
 80041c0:	2300      	movs	r3, #0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a6d      	ldr	r2, [pc, #436]	; (8004390 <HAL_DMA_Abort+0x444>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d04a      	beq.n	8004276 <HAL_DMA_Abort+0x32a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a6b      	ldr	r2, [pc, #428]	; (8004394 <HAL_DMA_Abort+0x448>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d045      	beq.n	8004276 <HAL_DMA_Abort+0x32a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a6a      	ldr	r2, [pc, #424]	; (8004398 <HAL_DMA_Abort+0x44c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d040      	beq.n	8004276 <HAL_DMA_Abort+0x32a>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a68      	ldr	r2, [pc, #416]	; (800439c <HAL_DMA_Abort+0x450>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d03b      	beq.n	8004276 <HAL_DMA_Abort+0x32a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a67      	ldr	r2, [pc, #412]	; (80043a0 <HAL_DMA_Abort+0x454>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d036      	beq.n	8004276 <HAL_DMA_Abort+0x32a>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a65      	ldr	r2, [pc, #404]	; (80043a4 <HAL_DMA_Abort+0x458>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d031      	beq.n	8004276 <HAL_DMA_Abort+0x32a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a64      	ldr	r2, [pc, #400]	; (80043a8 <HAL_DMA_Abort+0x45c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d02c      	beq.n	8004276 <HAL_DMA_Abort+0x32a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a62      	ldr	r2, [pc, #392]	; (80043ac <HAL_DMA_Abort+0x460>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d027      	beq.n	8004276 <HAL_DMA_Abort+0x32a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a61      	ldr	r2, [pc, #388]	; (80043b0 <HAL_DMA_Abort+0x464>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d022      	beq.n	8004276 <HAL_DMA_Abort+0x32a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a5f      	ldr	r2, [pc, #380]	; (80043b4 <HAL_DMA_Abort+0x468>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d01d      	beq.n	8004276 <HAL_DMA_Abort+0x32a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a5e      	ldr	r2, [pc, #376]	; (80043b8 <HAL_DMA_Abort+0x46c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d018      	beq.n	8004276 <HAL_DMA_Abort+0x32a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a5c      	ldr	r2, [pc, #368]	; (80043bc <HAL_DMA_Abort+0x470>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d013      	beq.n	8004276 <HAL_DMA_Abort+0x32a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a5b      	ldr	r2, [pc, #364]	; (80043c0 <HAL_DMA_Abort+0x474>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00e      	beq.n	8004276 <HAL_DMA_Abort+0x32a>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a59      	ldr	r2, [pc, #356]	; (80043c4 <HAL_DMA_Abort+0x478>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d009      	beq.n	8004276 <HAL_DMA_Abort+0x32a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a58      	ldr	r2, [pc, #352]	; (80043c8 <HAL_DMA_Abort+0x47c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d004      	beq.n	8004276 <HAL_DMA_Abort+0x32a>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a56      	ldr	r2, [pc, #344]	; (80043cc <HAL_DMA_Abort+0x480>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d108      	bne.n	8004288 <HAL_DMA_Abort+0x33c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0201 	bic.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e007      	b.n	8004298 <HAL_DMA_Abort+0x34c>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004298:	e013      	b.n	80042c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800429a:	f7fe feeb 	bl	8003074 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b05      	cmp	r3, #5
 80042a6:	d90c      	bls.n	80042c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2203      	movs	r2, #3
 80042b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e12d      	b.n	800451e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e5      	bne.n	800429a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a2f      	ldr	r2, [pc, #188]	; (8004390 <HAL_DMA_Abort+0x444>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d04a      	beq.n	800436e <HAL_DMA_Abort+0x422>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a2d      	ldr	r2, [pc, #180]	; (8004394 <HAL_DMA_Abort+0x448>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d045      	beq.n	800436e <HAL_DMA_Abort+0x422>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a2c      	ldr	r2, [pc, #176]	; (8004398 <HAL_DMA_Abort+0x44c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d040      	beq.n	800436e <HAL_DMA_Abort+0x422>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a2a      	ldr	r2, [pc, #168]	; (800439c <HAL_DMA_Abort+0x450>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d03b      	beq.n	800436e <HAL_DMA_Abort+0x422>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a29      	ldr	r2, [pc, #164]	; (80043a0 <HAL_DMA_Abort+0x454>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d036      	beq.n	800436e <HAL_DMA_Abort+0x422>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a27      	ldr	r2, [pc, #156]	; (80043a4 <HAL_DMA_Abort+0x458>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d031      	beq.n	800436e <HAL_DMA_Abort+0x422>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a26      	ldr	r2, [pc, #152]	; (80043a8 <HAL_DMA_Abort+0x45c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d02c      	beq.n	800436e <HAL_DMA_Abort+0x422>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a24      	ldr	r2, [pc, #144]	; (80043ac <HAL_DMA_Abort+0x460>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d027      	beq.n	800436e <HAL_DMA_Abort+0x422>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a23      	ldr	r2, [pc, #140]	; (80043b0 <HAL_DMA_Abort+0x464>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d022      	beq.n	800436e <HAL_DMA_Abort+0x422>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a21      	ldr	r2, [pc, #132]	; (80043b4 <HAL_DMA_Abort+0x468>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01d      	beq.n	800436e <HAL_DMA_Abort+0x422>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a20      	ldr	r2, [pc, #128]	; (80043b8 <HAL_DMA_Abort+0x46c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d018      	beq.n	800436e <HAL_DMA_Abort+0x422>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a1e      	ldr	r2, [pc, #120]	; (80043bc <HAL_DMA_Abort+0x470>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <HAL_DMA_Abort+0x422>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <HAL_DMA_Abort+0x474>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00e      	beq.n	800436e <HAL_DMA_Abort+0x422>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a1b      	ldr	r2, [pc, #108]	; (80043c4 <HAL_DMA_Abort+0x478>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d009      	beq.n	800436e <HAL_DMA_Abort+0x422>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1a      	ldr	r2, [pc, #104]	; (80043c8 <HAL_DMA_Abort+0x47c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d004      	beq.n	800436e <HAL_DMA_Abort+0x422>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a18      	ldr	r2, [pc, #96]	; (80043cc <HAL_DMA_Abort+0x480>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d101      	bne.n	8004372 <HAL_DMA_Abort+0x426>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <HAL_DMA_Abort+0x428>
 8004372:	2300      	movs	r3, #0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d02b      	beq.n	80043d0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	223f      	movs	r2, #63	; 0x3f
 8004388:	409a      	lsls	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	609a      	str	r2, [r3, #8]
 800438e:	e02a      	b.n	80043e6 <HAL_DMA_Abort+0x49a>
 8004390:	40020010 	.word	0x40020010
 8004394:	40020028 	.word	0x40020028
 8004398:	40020040 	.word	0x40020040
 800439c:	40020058 	.word	0x40020058
 80043a0:	40020070 	.word	0x40020070
 80043a4:	40020088 	.word	0x40020088
 80043a8:	400200a0 	.word	0x400200a0
 80043ac:	400200b8 	.word	0x400200b8
 80043b0:	40020410 	.word	0x40020410
 80043b4:	40020428 	.word	0x40020428
 80043b8:	40020440 	.word	0x40020440
 80043bc:	40020458 	.word	0x40020458
 80043c0:	40020470 	.word	0x40020470
 80043c4:	40020488 	.word	0x40020488
 80043c8:	400204a0 	.word	0x400204a0
 80043cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043da:	f003 031f 	and.w	r3, r3, #31
 80043de:	2201      	movs	r2, #1
 80043e0:	409a      	lsls	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a4f      	ldr	r2, [pc, #316]	; (8004528 <HAL_DMA_Abort+0x5dc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d072      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a4d      	ldr	r2, [pc, #308]	; (800452c <HAL_DMA_Abort+0x5e0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d06d      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a4c      	ldr	r2, [pc, #304]	; (8004530 <HAL_DMA_Abort+0x5e4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d068      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a4a      	ldr	r2, [pc, #296]	; (8004534 <HAL_DMA_Abort+0x5e8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d063      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a49      	ldr	r2, [pc, #292]	; (8004538 <HAL_DMA_Abort+0x5ec>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d05e      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a47      	ldr	r2, [pc, #284]	; (800453c <HAL_DMA_Abort+0x5f0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d059      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a46      	ldr	r2, [pc, #280]	; (8004540 <HAL_DMA_Abort+0x5f4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d054      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a44      	ldr	r2, [pc, #272]	; (8004544 <HAL_DMA_Abort+0x5f8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d04f      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a43      	ldr	r2, [pc, #268]	; (8004548 <HAL_DMA_Abort+0x5fc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d04a      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a41      	ldr	r2, [pc, #260]	; (800454c <HAL_DMA_Abort+0x600>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d045      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a40      	ldr	r2, [pc, #256]	; (8004550 <HAL_DMA_Abort+0x604>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d040      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a3e      	ldr	r2, [pc, #248]	; (8004554 <HAL_DMA_Abort+0x608>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d03b      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a3d      	ldr	r2, [pc, #244]	; (8004558 <HAL_DMA_Abort+0x60c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d036      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a3b      	ldr	r2, [pc, #236]	; (800455c <HAL_DMA_Abort+0x610>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d031      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a3a      	ldr	r2, [pc, #232]	; (8004560 <HAL_DMA_Abort+0x614>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d02c      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a38      	ldr	r2, [pc, #224]	; (8004564 <HAL_DMA_Abort+0x618>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d027      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a37      	ldr	r2, [pc, #220]	; (8004568 <HAL_DMA_Abort+0x61c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d022      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a35      	ldr	r2, [pc, #212]	; (800456c <HAL_DMA_Abort+0x620>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d01d      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a34      	ldr	r2, [pc, #208]	; (8004570 <HAL_DMA_Abort+0x624>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d018      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a32      	ldr	r2, [pc, #200]	; (8004574 <HAL_DMA_Abort+0x628>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a31      	ldr	r2, [pc, #196]	; (8004578 <HAL_DMA_Abort+0x62c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00e      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2f      	ldr	r2, [pc, #188]	; (800457c <HAL_DMA_Abort+0x630>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d009      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2e      	ldr	r2, [pc, #184]	; (8004580 <HAL_DMA_Abort+0x634>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_DMA_Abort+0x58a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a2c      	ldr	r2, [pc, #176]	; (8004584 <HAL_DMA_Abort+0x638>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <HAL_DMA_Abort+0x58e>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <HAL_DMA_Abort+0x590>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d015      	beq.n	800450c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80044e8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00c      	beq.n	800450c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004500:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800450a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40020010 	.word	0x40020010
 800452c:	40020028 	.word	0x40020028
 8004530:	40020040 	.word	0x40020040
 8004534:	40020058 	.word	0x40020058
 8004538:	40020070 	.word	0x40020070
 800453c:	40020088 	.word	0x40020088
 8004540:	400200a0 	.word	0x400200a0
 8004544:	400200b8 	.word	0x400200b8
 8004548:	40020410 	.word	0x40020410
 800454c:	40020428 	.word	0x40020428
 8004550:	40020440 	.word	0x40020440
 8004554:	40020458 	.word	0x40020458
 8004558:	40020470 	.word	0x40020470
 800455c:	40020488 	.word	0x40020488
 8004560:	400204a0 	.word	0x400204a0
 8004564:	400204b8 	.word	0x400204b8
 8004568:	58025408 	.word	0x58025408
 800456c:	5802541c 	.word	0x5802541c
 8004570:	58025430 	.word	0x58025430
 8004574:	58025444 	.word	0x58025444
 8004578:	58025458 	.word	0x58025458
 800457c:	5802546c 	.word	0x5802546c
 8004580:	58025480 	.word	0x58025480
 8004584:	58025494 	.word	0x58025494

08004588 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e237      	b.n	8004a0a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d004      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2280      	movs	r2, #128	; 0x80
 80045aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e22c      	b.n	8004a0a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a5c      	ldr	r2, [pc, #368]	; (8004728 <HAL_DMA_Abort_IT+0x1a0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d04a      	beq.n	8004650 <HAL_DMA_Abort_IT+0xc8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a5b      	ldr	r2, [pc, #364]	; (800472c <HAL_DMA_Abort_IT+0x1a4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d045      	beq.n	8004650 <HAL_DMA_Abort_IT+0xc8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a59      	ldr	r2, [pc, #356]	; (8004730 <HAL_DMA_Abort_IT+0x1a8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d040      	beq.n	8004650 <HAL_DMA_Abort_IT+0xc8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a58      	ldr	r2, [pc, #352]	; (8004734 <HAL_DMA_Abort_IT+0x1ac>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d03b      	beq.n	8004650 <HAL_DMA_Abort_IT+0xc8>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a56      	ldr	r2, [pc, #344]	; (8004738 <HAL_DMA_Abort_IT+0x1b0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d036      	beq.n	8004650 <HAL_DMA_Abort_IT+0xc8>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a55      	ldr	r2, [pc, #340]	; (800473c <HAL_DMA_Abort_IT+0x1b4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d031      	beq.n	8004650 <HAL_DMA_Abort_IT+0xc8>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a53      	ldr	r2, [pc, #332]	; (8004740 <HAL_DMA_Abort_IT+0x1b8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d02c      	beq.n	8004650 <HAL_DMA_Abort_IT+0xc8>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a52      	ldr	r2, [pc, #328]	; (8004744 <HAL_DMA_Abort_IT+0x1bc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d027      	beq.n	8004650 <HAL_DMA_Abort_IT+0xc8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a50      	ldr	r2, [pc, #320]	; (8004748 <HAL_DMA_Abort_IT+0x1c0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d022      	beq.n	8004650 <HAL_DMA_Abort_IT+0xc8>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a4f      	ldr	r2, [pc, #316]	; (800474c <HAL_DMA_Abort_IT+0x1c4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d01d      	beq.n	8004650 <HAL_DMA_Abort_IT+0xc8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a4d      	ldr	r2, [pc, #308]	; (8004750 <HAL_DMA_Abort_IT+0x1c8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d018      	beq.n	8004650 <HAL_DMA_Abort_IT+0xc8>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a4c      	ldr	r2, [pc, #304]	; (8004754 <HAL_DMA_Abort_IT+0x1cc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d013      	beq.n	8004650 <HAL_DMA_Abort_IT+0xc8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a4a      	ldr	r2, [pc, #296]	; (8004758 <HAL_DMA_Abort_IT+0x1d0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00e      	beq.n	8004650 <HAL_DMA_Abort_IT+0xc8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a49      	ldr	r2, [pc, #292]	; (800475c <HAL_DMA_Abort_IT+0x1d4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d009      	beq.n	8004650 <HAL_DMA_Abort_IT+0xc8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a47      	ldr	r2, [pc, #284]	; (8004760 <HAL_DMA_Abort_IT+0x1d8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d004      	beq.n	8004650 <HAL_DMA_Abort_IT+0xc8>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a46      	ldr	r2, [pc, #280]	; (8004764 <HAL_DMA_Abort_IT+0x1dc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d101      	bne.n	8004654 <HAL_DMA_Abort_IT+0xcc>
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <HAL_DMA_Abort_IT+0xce>
 8004654:	2300      	movs	r3, #0
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 8086 	beq.w	8004768 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2204      	movs	r2, #4
 8004660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a2f      	ldr	r2, [pc, #188]	; (8004728 <HAL_DMA_Abort_IT+0x1a0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d04a      	beq.n	8004704 <HAL_DMA_Abort_IT+0x17c>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a2e      	ldr	r2, [pc, #184]	; (800472c <HAL_DMA_Abort_IT+0x1a4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d045      	beq.n	8004704 <HAL_DMA_Abort_IT+0x17c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a2c      	ldr	r2, [pc, #176]	; (8004730 <HAL_DMA_Abort_IT+0x1a8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d040      	beq.n	8004704 <HAL_DMA_Abort_IT+0x17c>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a2b      	ldr	r2, [pc, #172]	; (8004734 <HAL_DMA_Abort_IT+0x1ac>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d03b      	beq.n	8004704 <HAL_DMA_Abort_IT+0x17c>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a29      	ldr	r2, [pc, #164]	; (8004738 <HAL_DMA_Abort_IT+0x1b0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d036      	beq.n	8004704 <HAL_DMA_Abort_IT+0x17c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a28      	ldr	r2, [pc, #160]	; (800473c <HAL_DMA_Abort_IT+0x1b4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d031      	beq.n	8004704 <HAL_DMA_Abort_IT+0x17c>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a26      	ldr	r2, [pc, #152]	; (8004740 <HAL_DMA_Abort_IT+0x1b8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d02c      	beq.n	8004704 <HAL_DMA_Abort_IT+0x17c>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a25      	ldr	r2, [pc, #148]	; (8004744 <HAL_DMA_Abort_IT+0x1bc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d027      	beq.n	8004704 <HAL_DMA_Abort_IT+0x17c>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a23      	ldr	r2, [pc, #140]	; (8004748 <HAL_DMA_Abort_IT+0x1c0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d022      	beq.n	8004704 <HAL_DMA_Abort_IT+0x17c>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a22      	ldr	r2, [pc, #136]	; (800474c <HAL_DMA_Abort_IT+0x1c4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d01d      	beq.n	8004704 <HAL_DMA_Abort_IT+0x17c>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a20      	ldr	r2, [pc, #128]	; (8004750 <HAL_DMA_Abort_IT+0x1c8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d018      	beq.n	8004704 <HAL_DMA_Abort_IT+0x17c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1f      	ldr	r2, [pc, #124]	; (8004754 <HAL_DMA_Abort_IT+0x1cc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d013      	beq.n	8004704 <HAL_DMA_Abort_IT+0x17c>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1d      	ldr	r2, [pc, #116]	; (8004758 <HAL_DMA_Abort_IT+0x1d0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00e      	beq.n	8004704 <HAL_DMA_Abort_IT+0x17c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1c      	ldr	r2, [pc, #112]	; (800475c <HAL_DMA_Abort_IT+0x1d4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_DMA_Abort_IT+0x17c>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1a      	ldr	r2, [pc, #104]	; (8004760 <HAL_DMA_Abort_IT+0x1d8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d004      	beq.n	8004704 <HAL_DMA_Abort_IT+0x17c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a19      	ldr	r2, [pc, #100]	; (8004764 <HAL_DMA_Abort_IT+0x1dc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d108      	bne.n	8004716 <HAL_DMA_Abort_IT+0x18e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	e178      	b.n	8004a08 <HAL_DMA_Abort_IT+0x480>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e16f      	b.n	8004a08 <HAL_DMA_Abort_IT+0x480>
 8004728:	40020010 	.word	0x40020010
 800472c:	40020028 	.word	0x40020028
 8004730:	40020040 	.word	0x40020040
 8004734:	40020058 	.word	0x40020058
 8004738:	40020070 	.word	0x40020070
 800473c:	40020088 	.word	0x40020088
 8004740:	400200a0 	.word	0x400200a0
 8004744:	400200b8 	.word	0x400200b8
 8004748:	40020410 	.word	0x40020410
 800474c:	40020428 	.word	0x40020428
 8004750:	40020440 	.word	0x40020440
 8004754:	40020458 	.word	0x40020458
 8004758:	40020470 	.word	0x40020470
 800475c:	40020488 	.word	0x40020488
 8004760:	400204a0 	.word	0x400204a0
 8004764:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 020e 	bic.w	r2, r2, #14
 8004776:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a6c      	ldr	r2, [pc, #432]	; (8004930 <HAL_DMA_Abort_IT+0x3a8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d04a      	beq.n	8004818 <HAL_DMA_Abort_IT+0x290>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a6b      	ldr	r2, [pc, #428]	; (8004934 <HAL_DMA_Abort_IT+0x3ac>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d045      	beq.n	8004818 <HAL_DMA_Abort_IT+0x290>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a69      	ldr	r2, [pc, #420]	; (8004938 <HAL_DMA_Abort_IT+0x3b0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d040      	beq.n	8004818 <HAL_DMA_Abort_IT+0x290>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a68      	ldr	r2, [pc, #416]	; (800493c <HAL_DMA_Abort_IT+0x3b4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d03b      	beq.n	8004818 <HAL_DMA_Abort_IT+0x290>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a66      	ldr	r2, [pc, #408]	; (8004940 <HAL_DMA_Abort_IT+0x3b8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d036      	beq.n	8004818 <HAL_DMA_Abort_IT+0x290>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a65      	ldr	r2, [pc, #404]	; (8004944 <HAL_DMA_Abort_IT+0x3bc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d031      	beq.n	8004818 <HAL_DMA_Abort_IT+0x290>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a63      	ldr	r2, [pc, #396]	; (8004948 <HAL_DMA_Abort_IT+0x3c0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d02c      	beq.n	8004818 <HAL_DMA_Abort_IT+0x290>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a62      	ldr	r2, [pc, #392]	; (800494c <HAL_DMA_Abort_IT+0x3c4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d027      	beq.n	8004818 <HAL_DMA_Abort_IT+0x290>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a60      	ldr	r2, [pc, #384]	; (8004950 <HAL_DMA_Abort_IT+0x3c8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d022      	beq.n	8004818 <HAL_DMA_Abort_IT+0x290>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a5f      	ldr	r2, [pc, #380]	; (8004954 <HAL_DMA_Abort_IT+0x3cc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d01d      	beq.n	8004818 <HAL_DMA_Abort_IT+0x290>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a5d      	ldr	r2, [pc, #372]	; (8004958 <HAL_DMA_Abort_IT+0x3d0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d018      	beq.n	8004818 <HAL_DMA_Abort_IT+0x290>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a5c      	ldr	r2, [pc, #368]	; (800495c <HAL_DMA_Abort_IT+0x3d4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d013      	beq.n	8004818 <HAL_DMA_Abort_IT+0x290>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a5a      	ldr	r2, [pc, #360]	; (8004960 <HAL_DMA_Abort_IT+0x3d8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00e      	beq.n	8004818 <HAL_DMA_Abort_IT+0x290>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a59      	ldr	r2, [pc, #356]	; (8004964 <HAL_DMA_Abort_IT+0x3dc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d009      	beq.n	8004818 <HAL_DMA_Abort_IT+0x290>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a57      	ldr	r2, [pc, #348]	; (8004968 <HAL_DMA_Abort_IT+0x3e0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d004      	beq.n	8004818 <HAL_DMA_Abort_IT+0x290>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a56      	ldr	r2, [pc, #344]	; (800496c <HAL_DMA_Abort_IT+0x3e4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d108      	bne.n	800482a <HAL_DMA_Abort_IT+0x2a2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e007      	b.n	800483a <HAL_DMA_Abort_IT+0x2b2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a3c      	ldr	r2, [pc, #240]	; (8004930 <HAL_DMA_Abort_IT+0x3a8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d072      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a3a      	ldr	r2, [pc, #232]	; (8004934 <HAL_DMA_Abort_IT+0x3ac>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d06d      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a39      	ldr	r2, [pc, #228]	; (8004938 <HAL_DMA_Abort_IT+0x3b0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d068      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a37      	ldr	r2, [pc, #220]	; (800493c <HAL_DMA_Abort_IT+0x3b4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d063      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a36      	ldr	r2, [pc, #216]	; (8004940 <HAL_DMA_Abort_IT+0x3b8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d05e      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a34      	ldr	r2, [pc, #208]	; (8004944 <HAL_DMA_Abort_IT+0x3bc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d059      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a33      	ldr	r2, [pc, #204]	; (8004948 <HAL_DMA_Abort_IT+0x3c0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d054      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a31      	ldr	r2, [pc, #196]	; (800494c <HAL_DMA_Abort_IT+0x3c4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d04f      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a30      	ldr	r2, [pc, #192]	; (8004950 <HAL_DMA_Abort_IT+0x3c8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d04a      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a2e      	ldr	r2, [pc, #184]	; (8004954 <HAL_DMA_Abort_IT+0x3cc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d045      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2d      	ldr	r2, [pc, #180]	; (8004958 <HAL_DMA_Abort_IT+0x3d0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d040      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a2b      	ldr	r2, [pc, #172]	; (800495c <HAL_DMA_Abort_IT+0x3d4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d03b      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a2a      	ldr	r2, [pc, #168]	; (8004960 <HAL_DMA_Abort_IT+0x3d8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d036      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a28      	ldr	r2, [pc, #160]	; (8004964 <HAL_DMA_Abort_IT+0x3dc>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d031      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a27      	ldr	r2, [pc, #156]	; (8004968 <HAL_DMA_Abort_IT+0x3e0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d02c      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a25      	ldr	r2, [pc, #148]	; (800496c <HAL_DMA_Abort_IT+0x3e4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d027      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a24      	ldr	r2, [pc, #144]	; (8004970 <HAL_DMA_Abort_IT+0x3e8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d022      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a22      	ldr	r2, [pc, #136]	; (8004974 <HAL_DMA_Abort_IT+0x3ec>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d01d      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a21      	ldr	r2, [pc, #132]	; (8004978 <HAL_DMA_Abort_IT+0x3f0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d018      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1f      	ldr	r2, [pc, #124]	; (800497c <HAL_DMA_Abort_IT+0x3f4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d013      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1e      	ldr	r2, [pc, #120]	; (8004980 <HAL_DMA_Abort_IT+0x3f8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00e      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1c      	ldr	r2, [pc, #112]	; (8004984 <HAL_DMA_Abort_IT+0x3fc>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d009      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a1b      	ldr	r2, [pc, #108]	; (8004988 <HAL_DMA_Abort_IT+0x400>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d004      	beq.n	800492a <HAL_DMA_Abort_IT+0x3a2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a19      	ldr	r2, [pc, #100]	; (800498c <HAL_DMA_Abort_IT+0x404>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d132      	bne.n	8004990 <HAL_DMA_Abort_IT+0x408>
 800492a:	2301      	movs	r3, #1
 800492c:	e031      	b.n	8004992 <HAL_DMA_Abort_IT+0x40a>
 800492e:	bf00      	nop
 8004930:	40020010 	.word	0x40020010
 8004934:	40020028 	.word	0x40020028
 8004938:	40020040 	.word	0x40020040
 800493c:	40020058 	.word	0x40020058
 8004940:	40020070 	.word	0x40020070
 8004944:	40020088 	.word	0x40020088
 8004948:	400200a0 	.word	0x400200a0
 800494c:	400200b8 	.word	0x400200b8
 8004950:	40020410 	.word	0x40020410
 8004954:	40020428 	.word	0x40020428
 8004958:	40020440 	.word	0x40020440
 800495c:	40020458 	.word	0x40020458
 8004960:	40020470 	.word	0x40020470
 8004964:	40020488 	.word	0x40020488
 8004968:	400204a0 	.word	0x400204a0
 800496c:	400204b8 	.word	0x400204b8
 8004970:	58025408 	.word	0x58025408
 8004974:	5802541c 	.word	0x5802541c
 8004978:	58025430 	.word	0x58025430
 800497c:	58025444 	.word	0x58025444
 8004980:	58025458 	.word	0x58025458
 8004984:	5802546c 	.word	0x5802546c
 8004988:	58025480 	.word	0x58025480
 800498c:	58025494 	.word	0x58025494
 8004990:	2300      	movs	r3, #0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d028      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b0:	f003 031f 	and.w	r3, r3, #31
 80049b4:	2201      	movs	r2, #1
 80049b6:	409a      	lsls	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80049c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00c      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop

08004a14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08a      	sub	sp, #40	; 0x28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a20:	4b67      	ldr	r3, [pc, #412]	; (8004bc0 <HAL_DMA_IRQHandler+0x1ac>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a67      	ldr	r2, [pc, #412]	; (8004bc4 <HAL_DMA_IRQHandler+0x1b0>)
 8004a26:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2a:	0a9b      	lsrs	r3, r3, #10
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a32:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a38:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a5f      	ldr	r2, [pc, #380]	; (8004bc8 <HAL_DMA_IRQHandler+0x1b4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d04a      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd2>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a5d      	ldr	r2, [pc, #372]	; (8004bcc <HAL_DMA_IRQHandler+0x1b8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d045      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a5c      	ldr	r2, [pc, #368]	; (8004bd0 <HAL_DMA_IRQHandler+0x1bc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d040      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd2>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a5a      	ldr	r2, [pc, #360]	; (8004bd4 <HAL_DMA_IRQHandler+0x1c0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d03b      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a59      	ldr	r2, [pc, #356]	; (8004bd8 <HAL_DMA_IRQHandler+0x1c4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d036      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd2>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a57      	ldr	r2, [pc, #348]	; (8004bdc <HAL_DMA_IRQHandler+0x1c8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d031      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a56      	ldr	r2, [pc, #344]	; (8004be0 <HAL_DMA_IRQHandler+0x1cc>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d02c      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd2>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a54      	ldr	r2, [pc, #336]	; (8004be4 <HAL_DMA_IRQHandler+0x1d0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d027      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a53      	ldr	r2, [pc, #332]	; (8004be8 <HAL_DMA_IRQHandler+0x1d4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d022      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd2>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a51      	ldr	r2, [pc, #324]	; (8004bec <HAL_DMA_IRQHandler+0x1d8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d01d      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a50      	ldr	r2, [pc, #320]	; (8004bf0 <HAL_DMA_IRQHandler+0x1dc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d018      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd2>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a4e      	ldr	r2, [pc, #312]	; (8004bf4 <HAL_DMA_IRQHandler+0x1e0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d013      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a4d      	ldr	r2, [pc, #308]	; (8004bf8 <HAL_DMA_IRQHandler+0x1e4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00e      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd2>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a4b      	ldr	r2, [pc, #300]	; (8004bfc <HAL_DMA_IRQHandler+0x1e8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d009      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a4a      	ldr	r2, [pc, #296]	; (8004c00 <HAL_DMA_IRQHandler+0x1ec>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d004      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xd2>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a48      	ldr	r2, [pc, #288]	; (8004c04 <HAL_DMA_IRQHandler+0x1f0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d101      	bne.n	8004aea <HAL_DMA_IRQHandler+0xd6>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <HAL_DMA_IRQHandler+0xd8>
 8004aea:	2300      	movs	r3, #0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 842b 	beq.w	8005348 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af6:	f003 031f 	and.w	r3, r3, #31
 8004afa:	2208      	movs	r2, #8
 8004afc:	409a      	lsls	r2, r3
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 80a2 	beq.w	8004c4c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a2e      	ldr	r2, [pc, #184]	; (8004bc8 <HAL_DMA_IRQHandler+0x1b4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d04a      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x194>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2d      	ldr	r2, [pc, #180]	; (8004bcc <HAL_DMA_IRQHandler+0x1b8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d045      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x194>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a2b      	ldr	r2, [pc, #172]	; (8004bd0 <HAL_DMA_IRQHandler+0x1bc>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d040      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x194>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a2a      	ldr	r2, [pc, #168]	; (8004bd4 <HAL_DMA_IRQHandler+0x1c0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d03b      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x194>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a28      	ldr	r2, [pc, #160]	; (8004bd8 <HAL_DMA_IRQHandler+0x1c4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d036      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x194>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a27      	ldr	r2, [pc, #156]	; (8004bdc <HAL_DMA_IRQHandler+0x1c8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d031      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x194>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a25      	ldr	r2, [pc, #148]	; (8004be0 <HAL_DMA_IRQHandler+0x1cc>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d02c      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x194>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a24      	ldr	r2, [pc, #144]	; (8004be4 <HAL_DMA_IRQHandler+0x1d0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d027      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x194>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a22      	ldr	r2, [pc, #136]	; (8004be8 <HAL_DMA_IRQHandler+0x1d4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d022      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x194>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a21      	ldr	r2, [pc, #132]	; (8004bec <HAL_DMA_IRQHandler+0x1d8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d01d      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x194>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1f      	ldr	r2, [pc, #124]	; (8004bf0 <HAL_DMA_IRQHandler+0x1dc>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d018      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x194>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1e      	ldr	r2, [pc, #120]	; (8004bf4 <HAL_DMA_IRQHandler+0x1e0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x194>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1c      	ldr	r2, [pc, #112]	; (8004bf8 <HAL_DMA_IRQHandler+0x1e4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00e      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x194>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1b      	ldr	r2, [pc, #108]	; (8004bfc <HAL_DMA_IRQHandler+0x1e8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d009      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x194>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <HAL_DMA_IRQHandler+0x1ec>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x194>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a18      	ldr	r2, [pc, #96]	; (8004c04 <HAL_DMA_IRQHandler+0x1f0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d12f      	bne.n	8004c08 <HAL_DMA_IRQHandler+0x1f4>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bf14      	ite	ne
 8004bb6:	2301      	movne	r3, #1
 8004bb8:	2300      	moveq	r3, #0
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	e02e      	b.n	8004c1c <HAL_DMA_IRQHandler+0x208>
 8004bbe:	bf00      	nop
 8004bc0:	24000008 	.word	0x24000008
 8004bc4:	1b4e81b5 	.word	0x1b4e81b5
 8004bc8:	40020010 	.word	0x40020010
 8004bcc:	40020028 	.word	0x40020028
 8004bd0:	40020040 	.word	0x40020040
 8004bd4:	40020058 	.word	0x40020058
 8004bd8:	40020070 	.word	0x40020070
 8004bdc:	40020088 	.word	0x40020088
 8004be0:	400200a0 	.word	0x400200a0
 8004be4:	400200b8 	.word	0x400200b8
 8004be8:	40020410 	.word	0x40020410
 8004bec:	40020428 	.word	0x40020428
 8004bf0:	40020440 	.word	0x40020440
 8004bf4:	40020458 	.word	0x40020458
 8004bf8:	40020470 	.word	0x40020470
 8004bfc:	40020488 	.word	0x40020488
 8004c00:	400204a0 	.word	0x400204a0
 8004c04:	400204b8 	.word	0x400204b8
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	bf14      	ite	ne
 8004c16:	2301      	movne	r3, #1
 8004c18:	2300      	moveq	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d015      	beq.n	8004c4c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0204 	bic.w	r2, r2, #4
 8004c2e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c34:	f003 031f 	and.w	r3, r3, #31
 8004c38:	2208      	movs	r2, #8
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c44:	f043 0201 	orr.w	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c50:	f003 031f 	and.w	r3, r3, #31
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d06e      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a69      	ldr	r2, [pc, #420]	; (8004e0c <HAL_DMA_IRQHandler+0x3f8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d04a      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x2ee>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a67      	ldr	r2, [pc, #412]	; (8004e10 <HAL_DMA_IRQHandler+0x3fc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d045      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x2ee>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a66      	ldr	r2, [pc, #408]	; (8004e14 <HAL_DMA_IRQHandler+0x400>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d040      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x2ee>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a64      	ldr	r2, [pc, #400]	; (8004e18 <HAL_DMA_IRQHandler+0x404>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d03b      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x2ee>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a63      	ldr	r2, [pc, #396]	; (8004e1c <HAL_DMA_IRQHandler+0x408>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d036      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x2ee>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a61      	ldr	r2, [pc, #388]	; (8004e20 <HAL_DMA_IRQHandler+0x40c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d031      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x2ee>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a60      	ldr	r2, [pc, #384]	; (8004e24 <HAL_DMA_IRQHandler+0x410>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d02c      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x2ee>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a5e      	ldr	r2, [pc, #376]	; (8004e28 <HAL_DMA_IRQHandler+0x414>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d027      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x2ee>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a5d      	ldr	r2, [pc, #372]	; (8004e2c <HAL_DMA_IRQHandler+0x418>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d022      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x2ee>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a5b      	ldr	r2, [pc, #364]	; (8004e30 <HAL_DMA_IRQHandler+0x41c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d01d      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x2ee>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a5a      	ldr	r2, [pc, #360]	; (8004e34 <HAL_DMA_IRQHandler+0x420>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d018      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x2ee>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a58      	ldr	r2, [pc, #352]	; (8004e38 <HAL_DMA_IRQHandler+0x424>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d013      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x2ee>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a57      	ldr	r2, [pc, #348]	; (8004e3c <HAL_DMA_IRQHandler+0x428>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00e      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x2ee>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a55      	ldr	r2, [pc, #340]	; (8004e40 <HAL_DMA_IRQHandler+0x42c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d009      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x2ee>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a54      	ldr	r2, [pc, #336]	; (8004e44 <HAL_DMA_IRQHandler+0x430>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d004      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x2ee>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a52      	ldr	r2, [pc, #328]	; (8004e48 <HAL_DMA_IRQHandler+0x434>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d10a      	bne.n	8004d18 <HAL_DMA_IRQHandler+0x304>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	bf14      	ite	ne
 8004d10:	2301      	movne	r3, #1
 8004d12:	2300      	moveq	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	e003      	b.n	8004d20 <HAL_DMA_IRQHandler+0x30c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2300      	movs	r3, #0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00d      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d28:	f003 031f 	and.w	r3, r3, #31
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	409a      	lsls	r2, r3
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d38:	f043 0202 	orr.w	r2, r3, #2
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d44:	f003 031f 	and.w	r3, r3, #31
 8004d48:	2204      	movs	r2, #4
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 808f 	beq.w	8004e74 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a2c      	ldr	r2, [pc, #176]	; (8004e0c <HAL_DMA_IRQHandler+0x3f8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d04a      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x3e2>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a2a      	ldr	r2, [pc, #168]	; (8004e10 <HAL_DMA_IRQHandler+0x3fc>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d045      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x3e2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a29      	ldr	r2, [pc, #164]	; (8004e14 <HAL_DMA_IRQHandler+0x400>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d040      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x3e2>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a27      	ldr	r2, [pc, #156]	; (8004e18 <HAL_DMA_IRQHandler+0x404>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d03b      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x3e2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a26      	ldr	r2, [pc, #152]	; (8004e1c <HAL_DMA_IRQHandler+0x408>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d036      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x3e2>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a24      	ldr	r2, [pc, #144]	; (8004e20 <HAL_DMA_IRQHandler+0x40c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d031      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x3e2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a23      	ldr	r2, [pc, #140]	; (8004e24 <HAL_DMA_IRQHandler+0x410>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d02c      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x3e2>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a21      	ldr	r2, [pc, #132]	; (8004e28 <HAL_DMA_IRQHandler+0x414>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d027      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x3e2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a20      	ldr	r2, [pc, #128]	; (8004e2c <HAL_DMA_IRQHandler+0x418>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d022      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x3e2>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1e      	ldr	r2, [pc, #120]	; (8004e30 <HAL_DMA_IRQHandler+0x41c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d01d      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x3e2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1d      	ldr	r2, [pc, #116]	; (8004e34 <HAL_DMA_IRQHandler+0x420>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d018      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x3e2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1b      	ldr	r2, [pc, #108]	; (8004e38 <HAL_DMA_IRQHandler+0x424>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d013      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x3e2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1a      	ldr	r2, [pc, #104]	; (8004e3c <HAL_DMA_IRQHandler+0x428>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00e      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x3e2>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a18      	ldr	r2, [pc, #96]	; (8004e40 <HAL_DMA_IRQHandler+0x42c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d009      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x3e2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a17      	ldr	r2, [pc, #92]	; (8004e44 <HAL_DMA_IRQHandler+0x430>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d004      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x3e2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a15      	ldr	r2, [pc, #84]	; (8004e48 <HAL_DMA_IRQHandler+0x434>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d12a      	bne.n	8004e4c <HAL_DMA_IRQHandler+0x438>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf14      	ite	ne
 8004e04:	2301      	movne	r3, #1
 8004e06:	2300      	moveq	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	e023      	b.n	8004e54 <HAL_DMA_IRQHandler+0x440>
 8004e0c:	40020010 	.word	0x40020010
 8004e10:	40020028 	.word	0x40020028
 8004e14:	40020040 	.word	0x40020040
 8004e18:	40020058 	.word	0x40020058
 8004e1c:	40020070 	.word	0x40020070
 8004e20:	40020088 	.word	0x40020088
 8004e24:	400200a0 	.word	0x400200a0
 8004e28:	400200b8 	.word	0x400200b8
 8004e2c:	40020410 	.word	0x40020410
 8004e30:	40020428 	.word	0x40020428
 8004e34:	40020440 	.word	0x40020440
 8004e38:	40020458 	.word	0x40020458
 8004e3c:	40020470 	.word	0x40020470
 8004e40:	40020488 	.word	0x40020488
 8004e44:	400204a0 	.word	0x400204a0
 8004e48:	400204b8 	.word	0x400204b8
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2300      	movs	r3, #0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00d      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	2204      	movs	r2, #4
 8004e62:	409a      	lsls	r2, r3
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	f043 0204 	orr.w	r2, r3, #4
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	2210      	movs	r2, #16
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 80a6 	beq.w	8004fd6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a85      	ldr	r2, [pc, #532]	; (80050a4 <HAL_DMA_IRQHandler+0x690>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d04a      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x516>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a83      	ldr	r2, [pc, #524]	; (80050a8 <HAL_DMA_IRQHandler+0x694>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d045      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x516>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a82      	ldr	r2, [pc, #520]	; (80050ac <HAL_DMA_IRQHandler+0x698>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d040      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x516>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a80      	ldr	r2, [pc, #512]	; (80050b0 <HAL_DMA_IRQHandler+0x69c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d03b      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x516>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a7f      	ldr	r2, [pc, #508]	; (80050b4 <HAL_DMA_IRQHandler+0x6a0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d036      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x516>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a7d      	ldr	r2, [pc, #500]	; (80050b8 <HAL_DMA_IRQHandler+0x6a4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d031      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x516>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a7c      	ldr	r2, [pc, #496]	; (80050bc <HAL_DMA_IRQHandler+0x6a8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d02c      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x516>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a7a      	ldr	r2, [pc, #488]	; (80050c0 <HAL_DMA_IRQHandler+0x6ac>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d027      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x516>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a79      	ldr	r2, [pc, #484]	; (80050c4 <HAL_DMA_IRQHandler+0x6b0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d022      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x516>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a77      	ldr	r2, [pc, #476]	; (80050c8 <HAL_DMA_IRQHandler+0x6b4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d01d      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x516>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a76      	ldr	r2, [pc, #472]	; (80050cc <HAL_DMA_IRQHandler+0x6b8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d018      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x516>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a74      	ldr	r2, [pc, #464]	; (80050d0 <HAL_DMA_IRQHandler+0x6bc>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x516>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a73      	ldr	r2, [pc, #460]	; (80050d4 <HAL_DMA_IRQHandler+0x6c0>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00e      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x516>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a71      	ldr	r2, [pc, #452]	; (80050d8 <HAL_DMA_IRQHandler+0x6c4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d009      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x516>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a70      	ldr	r2, [pc, #448]	; (80050dc <HAL_DMA_IRQHandler+0x6c8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d004      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x516>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a6e      	ldr	r2, [pc, #440]	; (80050e0 <HAL_DMA_IRQHandler+0x6cc>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d10a      	bne.n	8004f40 <HAL_DMA_IRQHandler+0x52c>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bf14      	ite	ne
 8004f38:	2301      	movne	r3, #1
 8004f3a:	2300      	moveq	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	e009      	b.n	8004f54 <HAL_DMA_IRQHandler+0x540>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bf14      	ite	ne
 8004f4e:	2301      	movne	r3, #1
 8004f50:	2300      	moveq	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d03e      	beq.n	8004fd6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	2210      	movs	r2, #16
 8004f62:	409a      	lsls	r2, r3
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d018      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d108      	bne.n	8004f96 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d024      	beq.n	8004fd6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	4798      	blx	r3
 8004f94:	e01f      	b.n	8004fd6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d01b      	beq.n	8004fd6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	4798      	blx	r3
 8004fa6:	e016      	b.n	8004fd6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d107      	bne.n	8004fc6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0208 	bic.w	r2, r2, #8
 8004fc4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fda:	f003 031f 	and.w	r3, r3, #31
 8004fde:	2220      	movs	r2, #32
 8004fe0:	409a      	lsls	r2, r3
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8110 	beq.w	800520c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2c      	ldr	r2, [pc, #176]	; (80050a4 <HAL_DMA_IRQHandler+0x690>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d04a      	beq.n	800508c <HAL_DMA_IRQHandler+0x678>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a2b      	ldr	r2, [pc, #172]	; (80050a8 <HAL_DMA_IRQHandler+0x694>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d045      	beq.n	800508c <HAL_DMA_IRQHandler+0x678>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a29      	ldr	r2, [pc, #164]	; (80050ac <HAL_DMA_IRQHandler+0x698>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d040      	beq.n	800508c <HAL_DMA_IRQHandler+0x678>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a28      	ldr	r2, [pc, #160]	; (80050b0 <HAL_DMA_IRQHandler+0x69c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d03b      	beq.n	800508c <HAL_DMA_IRQHandler+0x678>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a26      	ldr	r2, [pc, #152]	; (80050b4 <HAL_DMA_IRQHandler+0x6a0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d036      	beq.n	800508c <HAL_DMA_IRQHandler+0x678>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a25      	ldr	r2, [pc, #148]	; (80050b8 <HAL_DMA_IRQHandler+0x6a4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d031      	beq.n	800508c <HAL_DMA_IRQHandler+0x678>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a23      	ldr	r2, [pc, #140]	; (80050bc <HAL_DMA_IRQHandler+0x6a8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d02c      	beq.n	800508c <HAL_DMA_IRQHandler+0x678>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a22      	ldr	r2, [pc, #136]	; (80050c0 <HAL_DMA_IRQHandler+0x6ac>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d027      	beq.n	800508c <HAL_DMA_IRQHandler+0x678>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a20      	ldr	r2, [pc, #128]	; (80050c4 <HAL_DMA_IRQHandler+0x6b0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d022      	beq.n	800508c <HAL_DMA_IRQHandler+0x678>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1f      	ldr	r2, [pc, #124]	; (80050c8 <HAL_DMA_IRQHandler+0x6b4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d01d      	beq.n	800508c <HAL_DMA_IRQHandler+0x678>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1d      	ldr	r2, [pc, #116]	; (80050cc <HAL_DMA_IRQHandler+0x6b8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d018      	beq.n	800508c <HAL_DMA_IRQHandler+0x678>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1c      	ldr	r2, [pc, #112]	; (80050d0 <HAL_DMA_IRQHandler+0x6bc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d013      	beq.n	800508c <HAL_DMA_IRQHandler+0x678>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1a      	ldr	r2, [pc, #104]	; (80050d4 <HAL_DMA_IRQHandler+0x6c0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00e      	beq.n	800508c <HAL_DMA_IRQHandler+0x678>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a19      	ldr	r2, [pc, #100]	; (80050d8 <HAL_DMA_IRQHandler+0x6c4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d009      	beq.n	800508c <HAL_DMA_IRQHandler+0x678>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a17      	ldr	r2, [pc, #92]	; (80050dc <HAL_DMA_IRQHandler+0x6c8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_DMA_IRQHandler+0x678>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a16      	ldr	r2, [pc, #88]	; (80050e0 <HAL_DMA_IRQHandler+0x6cc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d12b      	bne.n	80050e4 <HAL_DMA_IRQHandler+0x6d0>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0310 	and.w	r3, r3, #16
 8005096:	2b00      	cmp	r3, #0
 8005098:	bf14      	ite	ne
 800509a:	2301      	movne	r3, #1
 800509c:	2300      	moveq	r3, #0
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	e02a      	b.n	80050f8 <HAL_DMA_IRQHandler+0x6e4>
 80050a2:	bf00      	nop
 80050a4:	40020010 	.word	0x40020010
 80050a8:	40020028 	.word	0x40020028
 80050ac:	40020040 	.word	0x40020040
 80050b0:	40020058 	.word	0x40020058
 80050b4:	40020070 	.word	0x40020070
 80050b8:	40020088 	.word	0x40020088
 80050bc:	400200a0 	.word	0x400200a0
 80050c0:	400200b8 	.word	0x400200b8
 80050c4:	40020410 	.word	0x40020410
 80050c8:	40020428 	.word	0x40020428
 80050cc:	40020440 	.word	0x40020440
 80050d0:	40020458 	.word	0x40020458
 80050d4:	40020470 	.word	0x40020470
 80050d8:	40020488 	.word	0x40020488
 80050dc:	400204a0 	.word	0x400204a0
 80050e0:	400204b8 	.word	0x400204b8
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bf14      	ite	ne
 80050f2:	2301      	movne	r3, #1
 80050f4:	2300      	moveq	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 8087 	beq.w	800520c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005102:	f003 031f 	and.w	r3, r3, #31
 8005106:	2220      	movs	r2, #32
 8005108:	409a      	lsls	r2, r3
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b04      	cmp	r3, #4
 8005118:	d139      	bne.n	800518e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0216 	bic.w	r2, r2, #22
 8005128:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005138:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d103      	bne.n	800514a <HAL_DMA_IRQHandler+0x736>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005146:	2b00      	cmp	r3, #0
 8005148:	d007      	beq.n	800515a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0208 	bic.w	r2, r2, #8
 8005158:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	223f      	movs	r2, #63	; 0x3f
 8005164:	409a      	lsls	r2, r3
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 8382 	beq.w	8005888 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	4798      	blx	r3
          }
          return;
 800518c:	e37c      	b.n	8005888 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d018      	beq.n	80051ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d108      	bne.n	80051bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d02c      	beq.n	800520c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	4798      	blx	r3
 80051ba:	e027      	b.n	800520c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d023      	beq.n	800520c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	4798      	blx	r3
 80051cc:	e01e      	b.n	800520c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10f      	bne.n	80051fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0210 	bic.w	r2, r2, #16
 80051ea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 833e 	beq.w	8005892 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 8088 	beq.w	8005334 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2204      	movs	r2, #4
 8005228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a89      	ldr	r2, [pc, #548]	; (8005458 <HAL_DMA_IRQHandler+0xa44>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d04a      	beq.n	80052cc <HAL_DMA_IRQHandler+0x8b8>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a88      	ldr	r2, [pc, #544]	; (800545c <HAL_DMA_IRQHandler+0xa48>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d045      	beq.n	80052cc <HAL_DMA_IRQHandler+0x8b8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a86      	ldr	r2, [pc, #536]	; (8005460 <HAL_DMA_IRQHandler+0xa4c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d040      	beq.n	80052cc <HAL_DMA_IRQHandler+0x8b8>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a85      	ldr	r2, [pc, #532]	; (8005464 <HAL_DMA_IRQHandler+0xa50>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d03b      	beq.n	80052cc <HAL_DMA_IRQHandler+0x8b8>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a83      	ldr	r2, [pc, #524]	; (8005468 <HAL_DMA_IRQHandler+0xa54>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d036      	beq.n	80052cc <HAL_DMA_IRQHandler+0x8b8>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a82      	ldr	r2, [pc, #520]	; (800546c <HAL_DMA_IRQHandler+0xa58>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d031      	beq.n	80052cc <HAL_DMA_IRQHandler+0x8b8>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a80      	ldr	r2, [pc, #512]	; (8005470 <HAL_DMA_IRQHandler+0xa5c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d02c      	beq.n	80052cc <HAL_DMA_IRQHandler+0x8b8>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a7f      	ldr	r2, [pc, #508]	; (8005474 <HAL_DMA_IRQHandler+0xa60>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d027      	beq.n	80052cc <HAL_DMA_IRQHandler+0x8b8>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a7d      	ldr	r2, [pc, #500]	; (8005478 <HAL_DMA_IRQHandler+0xa64>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d022      	beq.n	80052cc <HAL_DMA_IRQHandler+0x8b8>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a7c      	ldr	r2, [pc, #496]	; (800547c <HAL_DMA_IRQHandler+0xa68>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d01d      	beq.n	80052cc <HAL_DMA_IRQHandler+0x8b8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a7a      	ldr	r2, [pc, #488]	; (8005480 <HAL_DMA_IRQHandler+0xa6c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d018      	beq.n	80052cc <HAL_DMA_IRQHandler+0x8b8>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a79      	ldr	r2, [pc, #484]	; (8005484 <HAL_DMA_IRQHandler+0xa70>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d013      	beq.n	80052cc <HAL_DMA_IRQHandler+0x8b8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a77      	ldr	r2, [pc, #476]	; (8005488 <HAL_DMA_IRQHandler+0xa74>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00e      	beq.n	80052cc <HAL_DMA_IRQHandler+0x8b8>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a76      	ldr	r2, [pc, #472]	; (800548c <HAL_DMA_IRQHandler+0xa78>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d009      	beq.n	80052cc <HAL_DMA_IRQHandler+0x8b8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a74      	ldr	r2, [pc, #464]	; (8005490 <HAL_DMA_IRQHandler+0xa7c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d004      	beq.n	80052cc <HAL_DMA_IRQHandler+0x8b8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a73      	ldr	r2, [pc, #460]	; (8005494 <HAL_DMA_IRQHandler+0xa80>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d108      	bne.n	80052de <HAL_DMA_IRQHandler+0x8ca>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0201 	bic.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e007      	b.n	80052ee <HAL_DMA_IRQHandler+0x8da>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0201 	bic.w	r2, r2, #1
 80052ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3301      	adds	r3, #1
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d307      	bcc.n	800530a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f2      	bne.n	80052ee <HAL_DMA_IRQHandler+0x8da>
 8005308:	e000      	b.n	800530c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800530a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2203      	movs	r2, #3
 800531e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005322:	e003      	b.n	800532c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 82aa 	beq.w	8005892 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	4798      	blx	r3
 8005346:	e2a4      	b.n	8005892 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a52      	ldr	r2, [pc, #328]	; (8005498 <HAL_DMA_IRQHandler+0xa84>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d04a      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x9d4>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a51      	ldr	r2, [pc, #324]	; (800549c <HAL_DMA_IRQHandler+0xa88>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d045      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x9d4>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a4f      	ldr	r2, [pc, #316]	; (80054a0 <HAL_DMA_IRQHandler+0xa8c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d040      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x9d4>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a4e      	ldr	r2, [pc, #312]	; (80054a4 <HAL_DMA_IRQHandler+0xa90>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d03b      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x9d4>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a4c      	ldr	r2, [pc, #304]	; (80054a8 <HAL_DMA_IRQHandler+0xa94>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d036      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x9d4>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a4b      	ldr	r2, [pc, #300]	; (80054ac <HAL_DMA_IRQHandler+0xa98>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d031      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x9d4>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a49      	ldr	r2, [pc, #292]	; (80054b0 <HAL_DMA_IRQHandler+0xa9c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d02c      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x9d4>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a48      	ldr	r2, [pc, #288]	; (80054b4 <HAL_DMA_IRQHandler+0xaa0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d027      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x9d4>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a46      	ldr	r2, [pc, #280]	; (80054b8 <HAL_DMA_IRQHandler+0xaa4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d022      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x9d4>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a45      	ldr	r2, [pc, #276]	; (80054bc <HAL_DMA_IRQHandler+0xaa8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d01d      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x9d4>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a43      	ldr	r2, [pc, #268]	; (80054c0 <HAL_DMA_IRQHandler+0xaac>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d018      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x9d4>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a42      	ldr	r2, [pc, #264]	; (80054c4 <HAL_DMA_IRQHandler+0xab0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d013      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x9d4>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a40      	ldr	r2, [pc, #256]	; (80054c8 <HAL_DMA_IRQHandler+0xab4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00e      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x9d4>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a3f      	ldr	r2, [pc, #252]	; (80054cc <HAL_DMA_IRQHandler+0xab8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d009      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x9d4>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a3d      	ldr	r2, [pc, #244]	; (80054d0 <HAL_DMA_IRQHandler+0xabc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d004      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x9d4>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a3c      	ldr	r2, [pc, #240]	; (80054d4 <HAL_DMA_IRQHandler+0xac0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d101      	bne.n	80053ec <HAL_DMA_IRQHandler+0x9d8>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e000      	b.n	80053ee <HAL_DMA_IRQHandler+0x9da>
 80053ec:	2300      	movs	r3, #0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 824f 	beq.w	8005892 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005400:	f003 031f 	and.w	r3, r3, #31
 8005404:	2204      	movs	r2, #4
 8005406:	409a      	lsls	r2, r3
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80dd 	beq.w	80055cc <HAL_DMA_IRQHandler+0xbb8>
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 80d7 	beq.w	80055cc <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	2204      	movs	r2, #4
 8005428:	409a      	lsls	r2, r3
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d059      	beq.n	80054ec <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d14a      	bne.n	80054d8 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 8220 	beq.w	800588c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005454:	e21a      	b.n	800588c <HAL_DMA_IRQHandler+0xe78>
 8005456:	bf00      	nop
 8005458:	40020010 	.word	0x40020010
 800545c:	40020028 	.word	0x40020028
 8005460:	40020040 	.word	0x40020040
 8005464:	40020058 	.word	0x40020058
 8005468:	40020070 	.word	0x40020070
 800546c:	40020088 	.word	0x40020088
 8005470:	400200a0 	.word	0x400200a0
 8005474:	400200b8 	.word	0x400200b8
 8005478:	40020410 	.word	0x40020410
 800547c:	40020428 	.word	0x40020428
 8005480:	40020440 	.word	0x40020440
 8005484:	40020458 	.word	0x40020458
 8005488:	40020470 	.word	0x40020470
 800548c:	40020488 	.word	0x40020488
 8005490:	400204a0 	.word	0x400204a0
 8005494:	400204b8 	.word	0x400204b8
 8005498:	48022c08 	.word	0x48022c08
 800549c:	48022c1c 	.word	0x48022c1c
 80054a0:	48022c30 	.word	0x48022c30
 80054a4:	48022c44 	.word	0x48022c44
 80054a8:	48022c58 	.word	0x48022c58
 80054ac:	48022c6c 	.word	0x48022c6c
 80054b0:	48022c80 	.word	0x48022c80
 80054b4:	48022c94 	.word	0x48022c94
 80054b8:	58025408 	.word	0x58025408
 80054bc:	5802541c 	.word	0x5802541c
 80054c0:	58025430 	.word	0x58025430
 80054c4:	58025444 	.word	0x58025444
 80054c8:	58025458 	.word	0x58025458
 80054cc:	5802546c 	.word	0x5802546c
 80054d0:	58025480 	.word	0x58025480
 80054d4:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 81d5 	beq.w	800588c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054ea:	e1cf      	b.n	800588c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d160      	bne.n	80055b8 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a7f      	ldr	r2, [pc, #508]	; (80056f8 <HAL_DMA_IRQHandler+0xce4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d04a      	beq.n	8005596 <HAL_DMA_IRQHandler+0xb82>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a7d      	ldr	r2, [pc, #500]	; (80056fc <HAL_DMA_IRQHandler+0xce8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d045      	beq.n	8005596 <HAL_DMA_IRQHandler+0xb82>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a7c      	ldr	r2, [pc, #496]	; (8005700 <HAL_DMA_IRQHandler+0xcec>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d040      	beq.n	8005596 <HAL_DMA_IRQHandler+0xb82>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a7a      	ldr	r2, [pc, #488]	; (8005704 <HAL_DMA_IRQHandler+0xcf0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d03b      	beq.n	8005596 <HAL_DMA_IRQHandler+0xb82>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a79      	ldr	r2, [pc, #484]	; (8005708 <HAL_DMA_IRQHandler+0xcf4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d036      	beq.n	8005596 <HAL_DMA_IRQHandler+0xb82>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a77      	ldr	r2, [pc, #476]	; (800570c <HAL_DMA_IRQHandler+0xcf8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d031      	beq.n	8005596 <HAL_DMA_IRQHandler+0xb82>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a76      	ldr	r2, [pc, #472]	; (8005710 <HAL_DMA_IRQHandler+0xcfc>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d02c      	beq.n	8005596 <HAL_DMA_IRQHandler+0xb82>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a74      	ldr	r2, [pc, #464]	; (8005714 <HAL_DMA_IRQHandler+0xd00>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d027      	beq.n	8005596 <HAL_DMA_IRQHandler+0xb82>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a73      	ldr	r2, [pc, #460]	; (8005718 <HAL_DMA_IRQHandler+0xd04>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d022      	beq.n	8005596 <HAL_DMA_IRQHandler+0xb82>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a71      	ldr	r2, [pc, #452]	; (800571c <HAL_DMA_IRQHandler+0xd08>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01d      	beq.n	8005596 <HAL_DMA_IRQHandler+0xb82>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a70      	ldr	r2, [pc, #448]	; (8005720 <HAL_DMA_IRQHandler+0xd0c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d018      	beq.n	8005596 <HAL_DMA_IRQHandler+0xb82>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a6e      	ldr	r2, [pc, #440]	; (8005724 <HAL_DMA_IRQHandler+0xd10>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d013      	beq.n	8005596 <HAL_DMA_IRQHandler+0xb82>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a6d      	ldr	r2, [pc, #436]	; (8005728 <HAL_DMA_IRQHandler+0xd14>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00e      	beq.n	8005596 <HAL_DMA_IRQHandler+0xb82>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a6b      	ldr	r2, [pc, #428]	; (800572c <HAL_DMA_IRQHandler+0xd18>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d009      	beq.n	8005596 <HAL_DMA_IRQHandler+0xb82>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a6a      	ldr	r2, [pc, #424]	; (8005730 <HAL_DMA_IRQHandler+0xd1c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d004      	beq.n	8005596 <HAL_DMA_IRQHandler+0xb82>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a68      	ldr	r2, [pc, #416]	; (8005734 <HAL_DMA_IRQHandler+0xd20>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d108      	bne.n	80055a8 <HAL_DMA_IRQHandler+0xb94>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0208 	bic.w	r2, r2, #8
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	e007      	b.n	80055b8 <HAL_DMA_IRQHandler+0xba4>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0204 	bic.w	r2, r2, #4
 80055b6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 8165 	beq.w	800588c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055ca:	e15f      	b.n	800588c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	2202      	movs	r2, #2
 80055d6:	409a      	lsls	r2, r3
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	4013      	ands	r3, r2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80c5 	beq.w	800576c <HAL_DMA_IRQHandler+0xd58>
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 80bf 	beq.w	800576c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f2:	f003 031f 	and.w	r3, r3, #31
 80055f6:	2202      	movs	r2, #2
 80055f8:	409a      	lsls	r2, r3
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d018      	beq.n	800563a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 813a 	beq.w	8005890 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005624:	e134      	b.n	8005890 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 8130 	beq.w	8005890 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005638:	e12a      	b.n	8005890 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	f040 8089 	bne.w	8005758 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a2b      	ldr	r2, [pc, #172]	; (80056f8 <HAL_DMA_IRQHandler+0xce4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d04a      	beq.n	80056e6 <HAL_DMA_IRQHandler+0xcd2>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a29      	ldr	r2, [pc, #164]	; (80056fc <HAL_DMA_IRQHandler+0xce8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d045      	beq.n	80056e6 <HAL_DMA_IRQHandler+0xcd2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a28      	ldr	r2, [pc, #160]	; (8005700 <HAL_DMA_IRQHandler+0xcec>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d040      	beq.n	80056e6 <HAL_DMA_IRQHandler+0xcd2>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a26      	ldr	r2, [pc, #152]	; (8005704 <HAL_DMA_IRQHandler+0xcf0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d03b      	beq.n	80056e6 <HAL_DMA_IRQHandler+0xcd2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a25      	ldr	r2, [pc, #148]	; (8005708 <HAL_DMA_IRQHandler+0xcf4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d036      	beq.n	80056e6 <HAL_DMA_IRQHandler+0xcd2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a23      	ldr	r2, [pc, #140]	; (800570c <HAL_DMA_IRQHandler+0xcf8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d031      	beq.n	80056e6 <HAL_DMA_IRQHandler+0xcd2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a22      	ldr	r2, [pc, #136]	; (8005710 <HAL_DMA_IRQHandler+0xcfc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d02c      	beq.n	80056e6 <HAL_DMA_IRQHandler+0xcd2>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a20      	ldr	r2, [pc, #128]	; (8005714 <HAL_DMA_IRQHandler+0xd00>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d027      	beq.n	80056e6 <HAL_DMA_IRQHandler+0xcd2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a1f      	ldr	r2, [pc, #124]	; (8005718 <HAL_DMA_IRQHandler+0xd04>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d022      	beq.n	80056e6 <HAL_DMA_IRQHandler+0xcd2>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1d      	ldr	r2, [pc, #116]	; (800571c <HAL_DMA_IRQHandler+0xd08>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d01d      	beq.n	80056e6 <HAL_DMA_IRQHandler+0xcd2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1c      	ldr	r2, [pc, #112]	; (8005720 <HAL_DMA_IRQHandler+0xd0c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d018      	beq.n	80056e6 <HAL_DMA_IRQHandler+0xcd2>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1a      	ldr	r2, [pc, #104]	; (8005724 <HAL_DMA_IRQHandler+0xd10>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <HAL_DMA_IRQHandler+0xcd2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a19      	ldr	r2, [pc, #100]	; (8005728 <HAL_DMA_IRQHandler+0xd14>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00e      	beq.n	80056e6 <HAL_DMA_IRQHandler+0xcd2>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a17      	ldr	r2, [pc, #92]	; (800572c <HAL_DMA_IRQHandler+0xd18>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d009      	beq.n	80056e6 <HAL_DMA_IRQHandler+0xcd2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a16      	ldr	r2, [pc, #88]	; (8005730 <HAL_DMA_IRQHandler+0xd1c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d004      	beq.n	80056e6 <HAL_DMA_IRQHandler+0xcd2>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a14      	ldr	r2, [pc, #80]	; (8005734 <HAL_DMA_IRQHandler+0xd20>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d128      	bne.n	8005738 <HAL_DMA_IRQHandler+0xd24>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0214 	bic.w	r2, r2, #20
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	e027      	b.n	8005748 <HAL_DMA_IRQHandler+0xd34>
 80056f8:	40020010 	.word	0x40020010
 80056fc:	40020028 	.word	0x40020028
 8005700:	40020040 	.word	0x40020040
 8005704:	40020058 	.word	0x40020058
 8005708:	40020070 	.word	0x40020070
 800570c:	40020088 	.word	0x40020088
 8005710:	400200a0 	.word	0x400200a0
 8005714:	400200b8 	.word	0x400200b8
 8005718:	40020410 	.word	0x40020410
 800571c:	40020428 	.word	0x40020428
 8005720:	40020440 	.word	0x40020440
 8005724:	40020458 	.word	0x40020458
 8005728:	40020470 	.word	0x40020470
 800572c:	40020488 	.word	0x40020488
 8005730:	400204a0 	.word	0x400204a0
 8005734:	400204b8 	.word	0x400204b8
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 020a 	bic.w	r2, r2, #10
 8005746:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 8097 	beq.w	8005890 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800576a:	e091      	b.n	8005890 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005770:	f003 031f 	and.w	r3, r3, #31
 8005774:	2208      	movs	r2, #8
 8005776:	409a      	lsls	r2, r3
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4013      	ands	r3, r2
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8088 	beq.w	8005892 <HAL_DMA_IRQHandler+0xe7e>
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 8082 	beq.w	8005892 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a41      	ldr	r2, [pc, #260]	; (8005898 <HAL_DMA_IRQHandler+0xe84>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d04a      	beq.n	800582e <HAL_DMA_IRQHandler+0xe1a>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a3f      	ldr	r2, [pc, #252]	; (800589c <HAL_DMA_IRQHandler+0xe88>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d045      	beq.n	800582e <HAL_DMA_IRQHandler+0xe1a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a3e      	ldr	r2, [pc, #248]	; (80058a0 <HAL_DMA_IRQHandler+0xe8c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d040      	beq.n	800582e <HAL_DMA_IRQHandler+0xe1a>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a3c      	ldr	r2, [pc, #240]	; (80058a4 <HAL_DMA_IRQHandler+0xe90>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d03b      	beq.n	800582e <HAL_DMA_IRQHandler+0xe1a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a3b      	ldr	r2, [pc, #236]	; (80058a8 <HAL_DMA_IRQHandler+0xe94>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d036      	beq.n	800582e <HAL_DMA_IRQHandler+0xe1a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a39      	ldr	r2, [pc, #228]	; (80058ac <HAL_DMA_IRQHandler+0xe98>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d031      	beq.n	800582e <HAL_DMA_IRQHandler+0xe1a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a38      	ldr	r2, [pc, #224]	; (80058b0 <HAL_DMA_IRQHandler+0xe9c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d02c      	beq.n	800582e <HAL_DMA_IRQHandler+0xe1a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a36      	ldr	r2, [pc, #216]	; (80058b4 <HAL_DMA_IRQHandler+0xea0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d027      	beq.n	800582e <HAL_DMA_IRQHandler+0xe1a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a35      	ldr	r2, [pc, #212]	; (80058b8 <HAL_DMA_IRQHandler+0xea4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d022      	beq.n	800582e <HAL_DMA_IRQHandler+0xe1a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a33      	ldr	r2, [pc, #204]	; (80058bc <HAL_DMA_IRQHandler+0xea8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d01d      	beq.n	800582e <HAL_DMA_IRQHandler+0xe1a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a32      	ldr	r2, [pc, #200]	; (80058c0 <HAL_DMA_IRQHandler+0xeac>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d018      	beq.n	800582e <HAL_DMA_IRQHandler+0xe1a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a30      	ldr	r2, [pc, #192]	; (80058c4 <HAL_DMA_IRQHandler+0xeb0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d013      	beq.n	800582e <HAL_DMA_IRQHandler+0xe1a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a2f      	ldr	r2, [pc, #188]	; (80058c8 <HAL_DMA_IRQHandler+0xeb4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00e      	beq.n	800582e <HAL_DMA_IRQHandler+0xe1a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a2d      	ldr	r2, [pc, #180]	; (80058cc <HAL_DMA_IRQHandler+0xeb8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d009      	beq.n	800582e <HAL_DMA_IRQHandler+0xe1a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a2c      	ldr	r2, [pc, #176]	; (80058d0 <HAL_DMA_IRQHandler+0xebc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d004      	beq.n	800582e <HAL_DMA_IRQHandler+0xe1a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a2a      	ldr	r2, [pc, #168]	; (80058d4 <HAL_DMA_IRQHandler+0xec0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d108      	bne.n	8005840 <HAL_DMA_IRQHandler+0xe2c>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 021c 	bic.w	r2, r2, #28
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	e007      	b.n	8005850 <HAL_DMA_IRQHandler+0xe3c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 020e 	bic.w	r2, r2, #14
 800584e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005854:	f003 031f 	and.w	r3, r3, #31
 8005858:	2201      	movs	r2, #1
 800585a:	409a      	lsls	r2, r3
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	4798      	blx	r3
 8005886:	e004      	b.n	8005892 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005888:	bf00      	nop
 800588a:	e002      	b.n	8005892 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800588c:	bf00      	nop
 800588e:	e000      	b.n	8005892 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005890:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005892:	3728      	adds	r7, #40	; 0x28
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40020010 	.word	0x40020010
 800589c:	40020028 	.word	0x40020028
 80058a0:	40020040 	.word	0x40020040
 80058a4:	40020058 	.word	0x40020058
 80058a8:	40020070 	.word	0x40020070
 80058ac:	40020088 	.word	0x40020088
 80058b0:	400200a0 	.word	0x400200a0
 80058b4:	400200b8 	.word	0x400200b8
 80058b8:	40020410 	.word	0x40020410
 80058bc:	40020428 	.word	0x40020428
 80058c0:	40020440 	.word	0x40020440
 80058c4:	40020458 	.word	0x40020458
 80058c8:	40020470 	.word	0x40020470
 80058cc:	40020488 	.word	0x40020488
 80058d0:	400204a0 	.word	0x400204a0
 80058d4:	400204b8 	.word	0x400204b8

080058d8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005902:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005908:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a7f      	ldr	r2, [pc, #508]	; (8005b0c <DMA_SetConfig+0x21c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d072      	beq.n	80059fa <DMA_SetConfig+0x10a>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a7d      	ldr	r2, [pc, #500]	; (8005b10 <DMA_SetConfig+0x220>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d06d      	beq.n	80059fa <DMA_SetConfig+0x10a>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a7c      	ldr	r2, [pc, #496]	; (8005b14 <DMA_SetConfig+0x224>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d068      	beq.n	80059fa <DMA_SetConfig+0x10a>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a7a      	ldr	r2, [pc, #488]	; (8005b18 <DMA_SetConfig+0x228>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d063      	beq.n	80059fa <DMA_SetConfig+0x10a>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a79      	ldr	r2, [pc, #484]	; (8005b1c <DMA_SetConfig+0x22c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d05e      	beq.n	80059fa <DMA_SetConfig+0x10a>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a77      	ldr	r2, [pc, #476]	; (8005b20 <DMA_SetConfig+0x230>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d059      	beq.n	80059fa <DMA_SetConfig+0x10a>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a76      	ldr	r2, [pc, #472]	; (8005b24 <DMA_SetConfig+0x234>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d054      	beq.n	80059fa <DMA_SetConfig+0x10a>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a74      	ldr	r2, [pc, #464]	; (8005b28 <DMA_SetConfig+0x238>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d04f      	beq.n	80059fa <DMA_SetConfig+0x10a>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a73      	ldr	r2, [pc, #460]	; (8005b2c <DMA_SetConfig+0x23c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d04a      	beq.n	80059fa <DMA_SetConfig+0x10a>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a71      	ldr	r2, [pc, #452]	; (8005b30 <DMA_SetConfig+0x240>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d045      	beq.n	80059fa <DMA_SetConfig+0x10a>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a70      	ldr	r2, [pc, #448]	; (8005b34 <DMA_SetConfig+0x244>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d040      	beq.n	80059fa <DMA_SetConfig+0x10a>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a6e      	ldr	r2, [pc, #440]	; (8005b38 <DMA_SetConfig+0x248>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d03b      	beq.n	80059fa <DMA_SetConfig+0x10a>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a6d      	ldr	r2, [pc, #436]	; (8005b3c <DMA_SetConfig+0x24c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d036      	beq.n	80059fa <DMA_SetConfig+0x10a>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a6b      	ldr	r2, [pc, #428]	; (8005b40 <DMA_SetConfig+0x250>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d031      	beq.n	80059fa <DMA_SetConfig+0x10a>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a6a      	ldr	r2, [pc, #424]	; (8005b44 <DMA_SetConfig+0x254>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d02c      	beq.n	80059fa <DMA_SetConfig+0x10a>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a68      	ldr	r2, [pc, #416]	; (8005b48 <DMA_SetConfig+0x258>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d027      	beq.n	80059fa <DMA_SetConfig+0x10a>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a67      	ldr	r2, [pc, #412]	; (8005b4c <DMA_SetConfig+0x25c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d022      	beq.n	80059fa <DMA_SetConfig+0x10a>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a65      	ldr	r2, [pc, #404]	; (8005b50 <DMA_SetConfig+0x260>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d01d      	beq.n	80059fa <DMA_SetConfig+0x10a>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a64      	ldr	r2, [pc, #400]	; (8005b54 <DMA_SetConfig+0x264>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d018      	beq.n	80059fa <DMA_SetConfig+0x10a>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a62      	ldr	r2, [pc, #392]	; (8005b58 <DMA_SetConfig+0x268>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d013      	beq.n	80059fa <DMA_SetConfig+0x10a>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a61      	ldr	r2, [pc, #388]	; (8005b5c <DMA_SetConfig+0x26c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00e      	beq.n	80059fa <DMA_SetConfig+0x10a>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a5f      	ldr	r2, [pc, #380]	; (8005b60 <DMA_SetConfig+0x270>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d009      	beq.n	80059fa <DMA_SetConfig+0x10a>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a5e      	ldr	r2, [pc, #376]	; (8005b64 <DMA_SetConfig+0x274>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d004      	beq.n	80059fa <DMA_SetConfig+0x10a>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a5c      	ldr	r2, [pc, #368]	; (8005b68 <DMA_SetConfig+0x278>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d101      	bne.n	80059fe <DMA_SetConfig+0x10e>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <DMA_SetConfig+0x110>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00d      	beq.n	8005a20 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a0c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d004      	beq.n	8005a20 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a1e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a39      	ldr	r2, [pc, #228]	; (8005b0c <DMA_SetConfig+0x21c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d04a      	beq.n	8005ac0 <DMA_SetConfig+0x1d0>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a38      	ldr	r2, [pc, #224]	; (8005b10 <DMA_SetConfig+0x220>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d045      	beq.n	8005ac0 <DMA_SetConfig+0x1d0>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a36      	ldr	r2, [pc, #216]	; (8005b14 <DMA_SetConfig+0x224>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d040      	beq.n	8005ac0 <DMA_SetConfig+0x1d0>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a35      	ldr	r2, [pc, #212]	; (8005b18 <DMA_SetConfig+0x228>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d03b      	beq.n	8005ac0 <DMA_SetConfig+0x1d0>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a33      	ldr	r2, [pc, #204]	; (8005b1c <DMA_SetConfig+0x22c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d036      	beq.n	8005ac0 <DMA_SetConfig+0x1d0>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a32      	ldr	r2, [pc, #200]	; (8005b20 <DMA_SetConfig+0x230>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d031      	beq.n	8005ac0 <DMA_SetConfig+0x1d0>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a30      	ldr	r2, [pc, #192]	; (8005b24 <DMA_SetConfig+0x234>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d02c      	beq.n	8005ac0 <DMA_SetConfig+0x1d0>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a2f      	ldr	r2, [pc, #188]	; (8005b28 <DMA_SetConfig+0x238>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d027      	beq.n	8005ac0 <DMA_SetConfig+0x1d0>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a2d      	ldr	r2, [pc, #180]	; (8005b2c <DMA_SetConfig+0x23c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d022      	beq.n	8005ac0 <DMA_SetConfig+0x1d0>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a2c      	ldr	r2, [pc, #176]	; (8005b30 <DMA_SetConfig+0x240>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d01d      	beq.n	8005ac0 <DMA_SetConfig+0x1d0>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a2a      	ldr	r2, [pc, #168]	; (8005b34 <DMA_SetConfig+0x244>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d018      	beq.n	8005ac0 <DMA_SetConfig+0x1d0>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a29      	ldr	r2, [pc, #164]	; (8005b38 <DMA_SetConfig+0x248>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d013      	beq.n	8005ac0 <DMA_SetConfig+0x1d0>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a27      	ldr	r2, [pc, #156]	; (8005b3c <DMA_SetConfig+0x24c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00e      	beq.n	8005ac0 <DMA_SetConfig+0x1d0>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a26      	ldr	r2, [pc, #152]	; (8005b40 <DMA_SetConfig+0x250>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d009      	beq.n	8005ac0 <DMA_SetConfig+0x1d0>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a24      	ldr	r2, [pc, #144]	; (8005b44 <DMA_SetConfig+0x254>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d004      	beq.n	8005ac0 <DMA_SetConfig+0x1d0>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a23      	ldr	r2, [pc, #140]	; (8005b48 <DMA_SetConfig+0x258>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d101      	bne.n	8005ac4 <DMA_SetConfig+0x1d4>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <DMA_SetConfig+0x1d6>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d059      	beq.n	8005b7e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	223f      	movs	r2, #63	; 0x3f
 8005ad4:	409a      	lsls	r2, r3
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ae8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	2b40      	cmp	r3, #64	; 0x40
 8005af8:	d138      	bne.n	8005b6c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005b0a:	e0ae      	b.n	8005c6a <DMA_SetConfig+0x37a>
 8005b0c:	40020010 	.word	0x40020010
 8005b10:	40020028 	.word	0x40020028
 8005b14:	40020040 	.word	0x40020040
 8005b18:	40020058 	.word	0x40020058
 8005b1c:	40020070 	.word	0x40020070
 8005b20:	40020088 	.word	0x40020088
 8005b24:	400200a0 	.word	0x400200a0
 8005b28:	400200b8 	.word	0x400200b8
 8005b2c:	40020410 	.word	0x40020410
 8005b30:	40020428 	.word	0x40020428
 8005b34:	40020440 	.word	0x40020440
 8005b38:	40020458 	.word	0x40020458
 8005b3c:	40020470 	.word	0x40020470
 8005b40:	40020488 	.word	0x40020488
 8005b44:	400204a0 	.word	0x400204a0
 8005b48:	400204b8 	.word	0x400204b8
 8005b4c:	58025408 	.word	0x58025408
 8005b50:	5802541c 	.word	0x5802541c
 8005b54:	58025430 	.word	0x58025430
 8005b58:	58025444 	.word	0x58025444
 8005b5c:	58025458 	.word	0x58025458
 8005b60:	5802546c 	.word	0x5802546c
 8005b64:	58025480 	.word	0x58025480
 8005b68:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	60da      	str	r2, [r3, #12]
}
 8005b7c:	e075      	b.n	8005c6a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a3d      	ldr	r2, [pc, #244]	; (8005c78 <DMA_SetConfig+0x388>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d04a      	beq.n	8005c1e <DMA_SetConfig+0x32e>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a3b      	ldr	r2, [pc, #236]	; (8005c7c <DMA_SetConfig+0x38c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d045      	beq.n	8005c1e <DMA_SetConfig+0x32e>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a3a      	ldr	r2, [pc, #232]	; (8005c80 <DMA_SetConfig+0x390>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d040      	beq.n	8005c1e <DMA_SetConfig+0x32e>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a38      	ldr	r2, [pc, #224]	; (8005c84 <DMA_SetConfig+0x394>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d03b      	beq.n	8005c1e <DMA_SetConfig+0x32e>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a37      	ldr	r2, [pc, #220]	; (8005c88 <DMA_SetConfig+0x398>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d036      	beq.n	8005c1e <DMA_SetConfig+0x32e>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a35      	ldr	r2, [pc, #212]	; (8005c8c <DMA_SetConfig+0x39c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d031      	beq.n	8005c1e <DMA_SetConfig+0x32e>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a34      	ldr	r2, [pc, #208]	; (8005c90 <DMA_SetConfig+0x3a0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d02c      	beq.n	8005c1e <DMA_SetConfig+0x32e>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a32      	ldr	r2, [pc, #200]	; (8005c94 <DMA_SetConfig+0x3a4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d027      	beq.n	8005c1e <DMA_SetConfig+0x32e>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a31      	ldr	r2, [pc, #196]	; (8005c98 <DMA_SetConfig+0x3a8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d022      	beq.n	8005c1e <DMA_SetConfig+0x32e>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a2f      	ldr	r2, [pc, #188]	; (8005c9c <DMA_SetConfig+0x3ac>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d01d      	beq.n	8005c1e <DMA_SetConfig+0x32e>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a2e      	ldr	r2, [pc, #184]	; (8005ca0 <DMA_SetConfig+0x3b0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d018      	beq.n	8005c1e <DMA_SetConfig+0x32e>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a2c      	ldr	r2, [pc, #176]	; (8005ca4 <DMA_SetConfig+0x3b4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d013      	beq.n	8005c1e <DMA_SetConfig+0x32e>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a2b      	ldr	r2, [pc, #172]	; (8005ca8 <DMA_SetConfig+0x3b8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00e      	beq.n	8005c1e <DMA_SetConfig+0x32e>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a29      	ldr	r2, [pc, #164]	; (8005cac <DMA_SetConfig+0x3bc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d009      	beq.n	8005c1e <DMA_SetConfig+0x32e>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a28      	ldr	r2, [pc, #160]	; (8005cb0 <DMA_SetConfig+0x3c0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d004      	beq.n	8005c1e <DMA_SetConfig+0x32e>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a26      	ldr	r2, [pc, #152]	; (8005cb4 <DMA_SetConfig+0x3c4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d101      	bne.n	8005c22 <DMA_SetConfig+0x332>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <DMA_SetConfig+0x334>
 8005c22:	2300      	movs	r3, #0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d020      	beq.n	8005c6a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c2c:	f003 031f 	and.w	r3, r3, #31
 8005c30:	2201      	movs	r2, #1
 8005c32:	409a      	lsls	r2, r3
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b40      	cmp	r3, #64	; 0x40
 8005c46:	d108      	bne.n	8005c5a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	60da      	str	r2, [r3, #12]
}
 8005c58:	e007      	b.n	8005c6a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	60da      	str	r2, [r3, #12]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	48022c08 	.word	0x48022c08
 8005c7c:	48022c1c 	.word	0x48022c1c
 8005c80:	48022c30 	.word	0x48022c30
 8005c84:	48022c44 	.word	0x48022c44
 8005c88:	48022c58 	.word	0x48022c58
 8005c8c:	48022c6c 	.word	0x48022c6c
 8005c90:	48022c80 	.word	0x48022c80
 8005c94:	48022c94 	.word	0x48022c94
 8005c98:	58025408 	.word	0x58025408
 8005c9c:	5802541c 	.word	0x5802541c
 8005ca0:	58025430 	.word	0x58025430
 8005ca4:	58025444 	.word	0x58025444
 8005ca8:	58025458 	.word	0x58025458
 8005cac:	5802546c 	.word	0x5802546c
 8005cb0:	58025480 	.word	0x58025480
 8005cb4:	58025494 	.word	0x58025494

08005cb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a42      	ldr	r2, [pc, #264]	; (8005dd0 <DMA_CalcBaseAndBitshift+0x118>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d04a      	beq.n	8005d60 <DMA_CalcBaseAndBitshift+0xa8>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a41      	ldr	r2, [pc, #260]	; (8005dd4 <DMA_CalcBaseAndBitshift+0x11c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d045      	beq.n	8005d60 <DMA_CalcBaseAndBitshift+0xa8>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a3f      	ldr	r2, [pc, #252]	; (8005dd8 <DMA_CalcBaseAndBitshift+0x120>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d040      	beq.n	8005d60 <DMA_CalcBaseAndBitshift+0xa8>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a3e      	ldr	r2, [pc, #248]	; (8005ddc <DMA_CalcBaseAndBitshift+0x124>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d03b      	beq.n	8005d60 <DMA_CalcBaseAndBitshift+0xa8>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a3c      	ldr	r2, [pc, #240]	; (8005de0 <DMA_CalcBaseAndBitshift+0x128>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d036      	beq.n	8005d60 <DMA_CalcBaseAndBitshift+0xa8>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a3b      	ldr	r2, [pc, #236]	; (8005de4 <DMA_CalcBaseAndBitshift+0x12c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d031      	beq.n	8005d60 <DMA_CalcBaseAndBitshift+0xa8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a39      	ldr	r2, [pc, #228]	; (8005de8 <DMA_CalcBaseAndBitshift+0x130>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d02c      	beq.n	8005d60 <DMA_CalcBaseAndBitshift+0xa8>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a38      	ldr	r2, [pc, #224]	; (8005dec <DMA_CalcBaseAndBitshift+0x134>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d027      	beq.n	8005d60 <DMA_CalcBaseAndBitshift+0xa8>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a36      	ldr	r2, [pc, #216]	; (8005df0 <DMA_CalcBaseAndBitshift+0x138>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d022      	beq.n	8005d60 <DMA_CalcBaseAndBitshift+0xa8>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a35      	ldr	r2, [pc, #212]	; (8005df4 <DMA_CalcBaseAndBitshift+0x13c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d01d      	beq.n	8005d60 <DMA_CalcBaseAndBitshift+0xa8>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a33      	ldr	r2, [pc, #204]	; (8005df8 <DMA_CalcBaseAndBitshift+0x140>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d018      	beq.n	8005d60 <DMA_CalcBaseAndBitshift+0xa8>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a32      	ldr	r2, [pc, #200]	; (8005dfc <DMA_CalcBaseAndBitshift+0x144>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d013      	beq.n	8005d60 <DMA_CalcBaseAndBitshift+0xa8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a30      	ldr	r2, [pc, #192]	; (8005e00 <DMA_CalcBaseAndBitshift+0x148>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00e      	beq.n	8005d60 <DMA_CalcBaseAndBitshift+0xa8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a2f      	ldr	r2, [pc, #188]	; (8005e04 <DMA_CalcBaseAndBitshift+0x14c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d009      	beq.n	8005d60 <DMA_CalcBaseAndBitshift+0xa8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a2d      	ldr	r2, [pc, #180]	; (8005e08 <DMA_CalcBaseAndBitshift+0x150>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d004      	beq.n	8005d60 <DMA_CalcBaseAndBitshift+0xa8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a2c      	ldr	r2, [pc, #176]	; (8005e0c <DMA_CalcBaseAndBitshift+0x154>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d101      	bne.n	8005d64 <DMA_CalcBaseAndBitshift+0xac>
 8005d60:	2301      	movs	r3, #1
 8005d62:	e000      	b.n	8005d66 <DMA_CalcBaseAndBitshift+0xae>
 8005d64:	2300      	movs	r3, #0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d024      	beq.n	8005db4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	3b10      	subs	r3, #16
 8005d72:	4a27      	ldr	r2, [pc, #156]	; (8005e10 <DMA_CalcBaseAndBitshift+0x158>)
 8005d74:	fba2 2303 	umull	r2, r3, r2, r3
 8005d78:	091b      	lsrs	r3, r3, #4
 8005d7a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	4a24      	ldr	r2, [pc, #144]	; (8005e14 <DMA_CalcBaseAndBitshift+0x15c>)
 8005d84:	5cd3      	ldrb	r3, [r2, r3]
 8005d86:	461a      	mov	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d908      	bls.n	8005da4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	4b1f      	ldr	r3, [pc, #124]	; (8005e18 <DMA_CalcBaseAndBitshift+0x160>)
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	1d1a      	adds	r2, r3, #4
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	659a      	str	r2, [r3, #88]	; 0x58
 8005da2:	e00d      	b.n	8005dc0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	4b1b      	ldr	r3, [pc, #108]	; (8005e18 <DMA_CalcBaseAndBitshift+0x160>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6593      	str	r3, [r2, #88]	; 0x58
 8005db2:	e005      	b.n	8005dc0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	40020010 	.word	0x40020010
 8005dd4:	40020028 	.word	0x40020028
 8005dd8:	40020040 	.word	0x40020040
 8005ddc:	40020058 	.word	0x40020058
 8005de0:	40020070 	.word	0x40020070
 8005de4:	40020088 	.word	0x40020088
 8005de8:	400200a0 	.word	0x400200a0
 8005dec:	400200b8 	.word	0x400200b8
 8005df0:	40020410 	.word	0x40020410
 8005df4:	40020428 	.word	0x40020428
 8005df8:	40020440 	.word	0x40020440
 8005dfc:	40020458 	.word	0x40020458
 8005e00:	40020470 	.word	0x40020470
 8005e04:	40020488 	.word	0x40020488
 8005e08:	400204a0 	.word	0x400204a0
 8005e0c:	400204b8 	.word	0x400204b8
 8005e10:	aaaaaaab 	.word	0xaaaaaaab
 8005e14:	08012950 	.word	0x08012950
 8005e18:	fffffc00 	.word	0xfffffc00

08005e1c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d120      	bne.n	8005e72 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d858      	bhi.n	8005eea <DMA_CheckFifoParam+0xce>
 8005e38:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <DMA_CheckFifoParam+0x24>)
 8005e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3e:	bf00      	nop
 8005e40:	08005e51 	.word	0x08005e51
 8005e44:	08005e63 	.word	0x08005e63
 8005e48:	08005e51 	.word	0x08005e51
 8005e4c:	08005eeb 	.word	0x08005eeb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d048      	beq.n	8005eee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e60:	e045      	b.n	8005eee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e6a:	d142      	bne.n	8005ef2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e70:	e03f      	b.n	8005ef2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e7a:	d123      	bne.n	8005ec4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d838      	bhi.n	8005ef6 <DMA_CheckFifoParam+0xda>
 8005e84:	a201      	add	r2, pc, #4	; (adr r2, 8005e8c <DMA_CheckFifoParam+0x70>)
 8005e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8a:	bf00      	nop
 8005e8c:	08005e9d 	.word	0x08005e9d
 8005e90:	08005ea3 	.word	0x08005ea3
 8005e94:	08005e9d 	.word	0x08005e9d
 8005e98:	08005eb5 	.word	0x08005eb5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	73fb      	strb	r3, [r7, #15]
        break;
 8005ea0:	e030      	b.n	8005f04 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d025      	beq.n	8005efa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005eb2:	e022      	b.n	8005efa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ebc:	d11f      	bne.n	8005efe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ec2:	e01c      	b.n	8005efe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d902      	bls.n	8005ed2 <DMA_CheckFifoParam+0xb6>
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d003      	beq.n	8005ed8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005ed0:	e018      	b.n	8005f04 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	73fb      	strb	r3, [r7, #15]
        break;
 8005ed6:	e015      	b.n	8005f04 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00e      	beq.n	8005f02 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8005ee8:	e00b      	b.n	8005f02 <DMA_CheckFifoParam+0xe6>
        break;
 8005eea:	bf00      	nop
 8005eec:	e00a      	b.n	8005f04 <DMA_CheckFifoParam+0xe8>
        break;
 8005eee:	bf00      	nop
 8005ef0:	e008      	b.n	8005f04 <DMA_CheckFifoParam+0xe8>
        break;
 8005ef2:	bf00      	nop
 8005ef4:	e006      	b.n	8005f04 <DMA_CheckFifoParam+0xe8>
        break;
 8005ef6:	bf00      	nop
 8005ef8:	e004      	b.n	8005f04 <DMA_CheckFifoParam+0xe8>
        break;
 8005efa:	bf00      	nop
 8005efc:	e002      	b.n	8005f04 <DMA_CheckFifoParam+0xe8>
        break;
 8005efe:	bf00      	nop
 8005f00:	e000      	b.n	8005f04 <DMA_CheckFifoParam+0xe8>
    break;
 8005f02:	bf00      	nop
    }
  }

  return status;
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop

08005f14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a38      	ldr	r2, [pc, #224]	; (8006008 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d022      	beq.n	8005f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a36      	ldr	r2, [pc, #216]	; (800600c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d01d      	beq.n	8005f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a35      	ldr	r2, [pc, #212]	; (8006010 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d018      	beq.n	8005f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a33      	ldr	r2, [pc, #204]	; (8006014 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d013      	beq.n	8005f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a32      	ldr	r2, [pc, #200]	; (8006018 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00e      	beq.n	8005f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a30      	ldr	r2, [pc, #192]	; (800601c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d009      	beq.n	8005f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a2f      	ldr	r2, [pc, #188]	; (8006020 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d004      	beq.n	8005f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a2d      	ldr	r2, [pc, #180]	; (8006024 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d101      	bne.n	8005f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005f76:	2300      	movs	r3, #0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01a      	beq.n	8005fb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	3b08      	subs	r3, #8
 8005f84:	4a28      	ldr	r2, [pc, #160]	; (8006028 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005f86:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8a:	091b      	lsrs	r3, r3, #4
 8005f8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4b26      	ldr	r3, [pc, #152]	; (800602c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	461a      	mov	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a24      	ldr	r2, [pc, #144]	; (8006030 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005fa0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f003 031f 	and.w	r3, r3, #31
 8005fa8:	2201      	movs	r2, #1
 8005faa:	409a      	lsls	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005fb0:	e024      	b.n	8005ffc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	3b10      	subs	r3, #16
 8005fba:	4a1e      	ldr	r2, [pc, #120]	; (8006034 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc0:	091b      	lsrs	r3, r3, #4
 8005fc2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4a1c      	ldr	r2, [pc, #112]	; (8006038 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d806      	bhi.n	8005fda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4a1b      	ldr	r2, [pc, #108]	; (800603c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d902      	bls.n	8005fda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4b18      	ldr	r3, [pc, #96]	; (8006040 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a16      	ldr	r2, [pc, #88]	; (8006044 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005fec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	409a      	lsls	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ffc:	bf00      	nop
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	58025408 	.word	0x58025408
 800600c:	5802541c 	.word	0x5802541c
 8006010:	58025430 	.word	0x58025430
 8006014:	58025444 	.word	0x58025444
 8006018:	58025458 	.word	0x58025458
 800601c:	5802546c 	.word	0x5802546c
 8006020:	58025480 	.word	0x58025480
 8006024:	58025494 	.word	0x58025494
 8006028:	cccccccd 	.word	0xcccccccd
 800602c:	16009600 	.word	0x16009600
 8006030:	58025880 	.word	0x58025880
 8006034:	aaaaaaab 	.word	0xaaaaaaab
 8006038:	400204b8 	.word	0x400204b8
 800603c:	4002040f 	.word	0x4002040f
 8006040:	10008200 	.word	0x10008200
 8006044:	40020880 	.word	0x40020880

08006048 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d04a      	beq.n	80060f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b08      	cmp	r3, #8
 8006062:	d847      	bhi.n	80060f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a25      	ldr	r2, [pc, #148]	; (8006100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d022      	beq.n	80060b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a24      	ldr	r2, [pc, #144]	; (8006104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d01d      	beq.n	80060b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a22      	ldr	r2, [pc, #136]	; (8006108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d018      	beq.n	80060b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a21      	ldr	r2, [pc, #132]	; (800610c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d013      	beq.n	80060b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1f      	ldr	r2, [pc, #124]	; (8006110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00e      	beq.n	80060b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1e      	ldr	r2, [pc, #120]	; (8006114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d009      	beq.n	80060b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1c      	ldr	r2, [pc, #112]	; (8006118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1b      	ldr	r2, [pc, #108]	; (800611c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d101      	bne.n	80060b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80060b8:	2300      	movs	r3, #0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4b17      	ldr	r3, [pc, #92]	; (8006120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	461a      	mov	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a15      	ldr	r2, [pc, #84]	; (8006124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80060d0:	671a      	str	r2, [r3, #112]	; 0x70
 80060d2:	e009      	b.n	80060e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4b14      	ldr	r3, [pc, #80]	; (8006128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80060d8:	4413      	add	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	461a      	mov	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a11      	ldr	r2, [pc, #68]	; (800612c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80060e6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	2201      	movs	r2, #1
 80060ee:	409a      	lsls	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80060f4:	bf00      	nop
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	58025408 	.word	0x58025408
 8006104:	5802541c 	.word	0x5802541c
 8006108:	58025430 	.word	0x58025430
 800610c:	58025444 	.word	0x58025444
 8006110:	58025458 	.word	0x58025458
 8006114:	5802546c 	.word	0x5802546c
 8006118:	58025480 	.word	0x58025480
 800611c:	58025494 	.word	0x58025494
 8006120:	1600963f 	.word	0x1600963f
 8006124:	58025940 	.word	0x58025940
 8006128:	1000823f 	.word	0x1000823f
 800612c:	40020940 	.word	0x40020940

08006130 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006130:	b480      	push	{r7}
 8006132:	b089      	sub	sp, #36	; 0x24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800613e:	4b89      	ldr	r3, [pc, #548]	; (8006364 <HAL_GPIO_Init+0x234>)
 8006140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006142:	e194      	b.n	800646e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	2101      	movs	r1, #1
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	fa01 f303 	lsl.w	r3, r1, r3
 8006150:	4013      	ands	r3, r2
 8006152:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 8186 	beq.w	8006468 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f003 0303 	and.w	r3, r3, #3
 8006164:	2b01      	cmp	r3, #1
 8006166:	d005      	beq.n	8006174 <HAL_GPIO_Init+0x44>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d130      	bne.n	80061d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	2203      	movs	r2, #3
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	43db      	mvns	r3, r3
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	4013      	ands	r3, r2
 800618a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	4313      	orrs	r3, r2
 800619c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061aa:	2201      	movs	r2, #1
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	43db      	mvns	r3, r3
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	4013      	ands	r3, r2
 80061b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	091b      	lsrs	r3, r3, #4
 80061c0:	f003 0201 	and.w	r2, r3, #1
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d017      	beq.n	8006212 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	2203      	movs	r2, #3
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	43db      	mvns	r3, r3
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	4013      	ands	r3, r2
 80061f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	fa02 f303 	lsl.w	r3, r2, r3
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	4313      	orrs	r3, r2
 800620a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d123      	bne.n	8006266 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	08da      	lsrs	r2, r3, #3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3208      	adds	r2, #8
 8006226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	220f      	movs	r2, #15
 8006236:	fa02 f303 	lsl.w	r3, r2, r3
 800623a:	43db      	mvns	r3, r3
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	4013      	ands	r3, r2
 8006240:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	4313      	orrs	r3, r2
 8006256:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	08da      	lsrs	r2, r3, #3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3208      	adds	r2, #8
 8006260:	69b9      	ldr	r1, [r7, #24]
 8006262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	2203      	movs	r2, #3
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	43db      	mvns	r3, r3
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	4013      	ands	r3, r2
 800627c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f003 0203 	and.w	r2, r3, #3
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	4313      	orrs	r3, r2
 8006292:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 80e0 	beq.w	8006468 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062a8:	4b2f      	ldr	r3, [pc, #188]	; (8006368 <HAL_GPIO_Init+0x238>)
 80062aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80062ae:	4a2e      	ldr	r2, [pc, #184]	; (8006368 <HAL_GPIO_Init+0x238>)
 80062b0:	f043 0302 	orr.w	r3, r3, #2
 80062b4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80062b8:	4b2b      	ldr	r3, [pc, #172]	; (8006368 <HAL_GPIO_Init+0x238>)
 80062ba:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062c6:	4a29      	ldr	r2, [pc, #164]	; (800636c <HAL_GPIO_Init+0x23c>)
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	089b      	lsrs	r3, r3, #2
 80062cc:	3302      	adds	r3, #2
 80062ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	220f      	movs	r2, #15
 80062de:	fa02 f303 	lsl.w	r3, r2, r3
 80062e2:	43db      	mvns	r3, r3
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	4013      	ands	r3, r2
 80062e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a20      	ldr	r2, [pc, #128]	; (8006370 <HAL_GPIO_Init+0x240>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d052      	beq.n	8006398 <HAL_GPIO_Init+0x268>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a1f      	ldr	r2, [pc, #124]	; (8006374 <HAL_GPIO_Init+0x244>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d031      	beq.n	800635e <HAL_GPIO_Init+0x22e>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a1e      	ldr	r2, [pc, #120]	; (8006378 <HAL_GPIO_Init+0x248>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d02b      	beq.n	800635a <HAL_GPIO_Init+0x22a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a1d      	ldr	r2, [pc, #116]	; (800637c <HAL_GPIO_Init+0x24c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d025      	beq.n	8006356 <HAL_GPIO_Init+0x226>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a1c      	ldr	r2, [pc, #112]	; (8006380 <HAL_GPIO_Init+0x250>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d01f      	beq.n	8006352 <HAL_GPIO_Init+0x222>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a1b      	ldr	r2, [pc, #108]	; (8006384 <HAL_GPIO_Init+0x254>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d019      	beq.n	800634e <HAL_GPIO_Init+0x21e>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a1a      	ldr	r2, [pc, #104]	; (8006388 <HAL_GPIO_Init+0x258>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d013      	beq.n	800634a <HAL_GPIO_Init+0x21a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a19      	ldr	r2, [pc, #100]	; (800638c <HAL_GPIO_Init+0x25c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d00d      	beq.n	8006346 <HAL_GPIO_Init+0x216>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a18      	ldr	r2, [pc, #96]	; (8006390 <HAL_GPIO_Init+0x260>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d007      	beq.n	8006342 <HAL_GPIO_Init+0x212>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a17      	ldr	r2, [pc, #92]	; (8006394 <HAL_GPIO_Init+0x264>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d101      	bne.n	800633e <HAL_GPIO_Init+0x20e>
 800633a:	2309      	movs	r3, #9
 800633c:	e02d      	b.n	800639a <HAL_GPIO_Init+0x26a>
 800633e:	230a      	movs	r3, #10
 8006340:	e02b      	b.n	800639a <HAL_GPIO_Init+0x26a>
 8006342:	2308      	movs	r3, #8
 8006344:	e029      	b.n	800639a <HAL_GPIO_Init+0x26a>
 8006346:	2307      	movs	r3, #7
 8006348:	e027      	b.n	800639a <HAL_GPIO_Init+0x26a>
 800634a:	2306      	movs	r3, #6
 800634c:	e025      	b.n	800639a <HAL_GPIO_Init+0x26a>
 800634e:	2305      	movs	r3, #5
 8006350:	e023      	b.n	800639a <HAL_GPIO_Init+0x26a>
 8006352:	2304      	movs	r3, #4
 8006354:	e021      	b.n	800639a <HAL_GPIO_Init+0x26a>
 8006356:	2303      	movs	r3, #3
 8006358:	e01f      	b.n	800639a <HAL_GPIO_Init+0x26a>
 800635a:	2302      	movs	r3, #2
 800635c:	e01d      	b.n	800639a <HAL_GPIO_Init+0x26a>
 800635e:	2301      	movs	r3, #1
 8006360:	e01b      	b.n	800639a <HAL_GPIO_Init+0x26a>
 8006362:	bf00      	nop
 8006364:	58000080 	.word	0x58000080
 8006368:	58024400 	.word	0x58024400
 800636c:	58000400 	.word	0x58000400
 8006370:	58020000 	.word	0x58020000
 8006374:	58020400 	.word	0x58020400
 8006378:	58020800 	.word	0x58020800
 800637c:	58020c00 	.word	0x58020c00
 8006380:	58021000 	.word	0x58021000
 8006384:	58021400 	.word	0x58021400
 8006388:	58021800 	.word	0x58021800
 800638c:	58021c00 	.word	0x58021c00
 8006390:	58022000 	.word	0x58022000
 8006394:	58022400 	.word	0x58022400
 8006398:	2300      	movs	r3, #0
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	f002 0203 	and.w	r2, r2, #3
 80063a0:	0092      	lsls	r2, r2, #2
 80063a2:	4093      	lsls	r3, r2
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063aa:	4938      	ldr	r1, [pc, #224]	; (800648c <HAL_GPIO_Init+0x35c>)
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	089b      	lsrs	r3, r3, #2
 80063b0:	3302      	adds	r3, #2
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	43db      	mvns	r3, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4013      	ands	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80063de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80063e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	43db      	mvns	r3, r3
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	4013      	ands	r3, r2
 80063f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800640c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	43db      	mvns	r3, r3
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	4013      	ands	r3, r2
 8006422:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	43db      	mvns	r3, r3
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	4013      	ands	r3, r2
 800644c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	3301      	adds	r3, #1
 800646c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	fa22 f303 	lsr.w	r3, r2, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	f47f ae63 	bne.w	8006144 <HAL_GPIO_Init+0x14>
  }
}
 800647e:	bf00      	nop
 8006480:	bf00      	nop
 8006482:	3724      	adds	r7, #36	; 0x24
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	58000400 	.word	0x58000400

08006490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	807b      	strh	r3, [r7, #2]
 800649c:	4613      	mov	r3, r2
 800649e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064a0:	787b      	ldrb	r3, [r7, #1]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064a6:	887a      	ldrh	r2, [r7, #2]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80064ac:	e003      	b.n	80064b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80064ae:	887b      	ldrh	r3, [r7, #2]
 80064b0:	041a      	lsls	r2, r3, #16
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	619a      	str	r2, [r3, #24]
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80064d4:	887a      	ldrh	r2, [r7, #2]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4013      	ands	r3, r2
 80064da:	041a      	lsls	r2, r3, #16
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	43d9      	mvns	r1, r3
 80064e0:	887b      	ldrh	r3, [r7, #2]
 80064e2:	400b      	ands	r3, r1
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	619a      	str	r2, [r3, #24]
}
 80064ea:	bf00      	nop
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b082      	sub	sp, #8
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	4603      	mov	r3, r0
 80064fe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006504:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006508:	88fb      	ldrh	r3, [r7, #6]
 800650a:	4013      	ands	r3, r2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d008      	beq.n	8006522 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006514:	88fb      	ldrh	r3, [r7, #6]
 8006516:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800651a:	88fb      	ldrh	r3, [r7, #6]
 800651c:	4618      	mov	r0, r3
 800651e:	f7fb f8dd 	bl	80016dc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006522:	bf00      	nop
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006534:	4b19      	ldr	r3, [pc, #100]	; (800659c <HAL_PWREx_ConfigSupply+0x70>)
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b04      	cmp	r3, #4
 800653e:	d00a      	beq.n	8006556 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006540:	4b16      	ldr	r3, [pc, #88]	; (800659c <HAL_PWREx_ConfigSupply+0x70>)
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	429a      	cmp	r2, r3
 800654c:	d001      	beq.n	8006552 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e01f      	b.n	8006592 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	e01d      	b.n	8006592 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006556:	4b11      	ldr	r3, [pc, #68]	; (800659c <HAL_PWREx_ConfigSupply+0x70>)
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f023 0207 	bic.w	r2, r3, #7
 800655e:	490f      	ldr	r1, [pc, #60]	; (800659c <HAL_PWREx_ConfigSupply+0x70>)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4313      	orrs	r3, r2
 8006564:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006566:	f7fc fd85 	bl	8003074 <HAL_GetTick>
 800656a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800656c:	e009      	b.n	8006582 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800656e:	f7fc fd81 	bl	8003074 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800657c:	d901      	bls.n	8006582 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e007      	b.n	8006592 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006582:	4b06      	ldr	r3, [pc, #24]	; (800659c <HAL_PWREx_ConfigSupply+0x70>)
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800658a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800658e:	d1ee      	bne.n	800656e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	58024800 	.word	0x58024800

080065a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08c      	sub	sp, #48	; 0x30
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e3f6      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 80b5 	beq.w	800672a <HAL_RCC_OscConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065c0:	4b96      	ldr	r3, [pc, #600]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065ca:	4b94      	ldr	r3, [pc, #592]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80065d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d2:	2b10      	cmp	r3, #16
 80065d4:	d007      	beq.n	80065e6 <HAL_RCC_OscConfig+0x46>
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	2b18      	cmp	r3, #24
 80065da:	d112      	bne.n	8006602 <HAL_RCC_OscConfig+0x62>
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d10d      	bne.n	8006602 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065e6:	4b8d      	ldr	r3, [pc, #564]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 809a 	beq.w	8006728 <HAL_RCC_OscConfig+0x188>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f040 8095 	bne.w	8006728 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e3ce      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800660a:	d106      	bne.n	800661a <HAL_RCC_OscConfig+0x7a>
 800660c:	4b83      	ldr	r3, [pc, #524]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a82      	ldr	r2, [pc, #520]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	e058      	b.n	80066cc <HAL_RCC_OscConfig+0x12c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d112      	bne.n	8006648 <HAL_RCC_OscConfig+0xa8>
 8006622:	4b7e      	ldr	r3, [pc, #504]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a7d      	ldr	r2, [pc, #500]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	4b7b      	ldr	r3, [pc, #492]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a7a      	ldr	r2, [pc, #488]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006634:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	4b78      	ldr	r3, [pc, #480]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a77      	ldr	r2, [pc, #476]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006640:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	e041      	b.n	80066cc <HAL_RCC_OscConfig+0x12c>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006650:	d112      	bne.n	8006678 <HAL_RCC_OscConfig+0xd8>
 8006652:	4b72      	ldr	r3, [pc, #456]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a71      	ldr	r2, [pc, #452]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	4b6f      	ldr	r3, [pc, #444]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a6e      	ldr	r2, [pc, #440]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006664:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	4b6c      	ldr	r3, [pc, #432]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a6b      	ldr	r2, [pc, #428]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	e029      	b.n	80066cc <HAL_RCC_OscConfig+0x12c>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8006680:	d112      	bne.n	80066a8 <HAL_RCC_OscConfig+0x108>
 8006682:	4b66      	ldr	r3, [pc, #408]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a65      	ldr	r2, [pc, #404]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	4b63      	ldr	r3, [pc, #396]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a62      	ldr	r2, [pc, #392]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	4b60      	ldr	r3, [pc, #384]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a5f      	ldr	r2, [pc, #380]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80066a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	e011      	b.n	80066cc <HAL_RCC_OscConfig+0x12c>
 80066a8:	4b5c      	ldr	r3, [pc, #368]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a5b      	ldr	r2, [pc, #364]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80066ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	4b59      	ldr	r3, [pc, #356]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a58      	ldr	r2, [pc, #352]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80066ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	4b56      	ldr	r3, [pc, #344]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a55      	ldr	r2, [pc, #340]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80066c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80066ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d014      	beq.n	80066fe <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d4:	f7fc fcce 	bl	8003074 <HAL_GetTick>
 80066d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066da:	e009      	b.n	80066f0 <HAL_RCC_OscConfig+0x150>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066dc:	f7fc fcca 	bl	8003074 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e357      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066f0:	4b4a      	ldr	r3, [pc, #296]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0ef      	beq.n	80066dc <HAL_RCC_OscConfig+0x13c>
 80066fc:	e015      	b.n	800672a <HAL_RCC_OscConfig+0x18a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fe:	f7fc fcb9 	bl	8003074 <HAL_GetTick>
 8006702:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006704:	e009      	b.n	800671a <HAL_RCC_OscConfig+0x17a>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006706:	f7fc fcb5 	bl	8003074 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e342      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800671a:	4b40      	ldr	r3, [pc, #256]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1ef      	bne.n	8006706 <HAL_RCC_OscConfig+0x166>
 8006726:	e000      	b.n	800672a <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 808d 	beq.w	8006852 <HAL_RCC_OscConfig+0x2b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006738:	4b38      	ldr	r3, [pc, #224]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006740:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006742:	4b36      	ldr	r3, [pc, #216]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d007      	beq.n	800675e <HAL_RCC_OscConfig+0x1be>
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	2b18      	cmp	r3, #24
 8006752:	d137      	bne.n	80067c4 <HAL_RCC_OscConfig+0x224>
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d132      	bne.n	80067c4 <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800675e:	4b2f      	ldr	r3, [pc, #188]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_RCC_OscConfig+0x1d6>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e314      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006776:	4b29      	ldr	r3, [pc, #164]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f023 0219 	bic.w	r2, r3, #25
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	4926      	ldr	r1, [pc, #152]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006784:	4313      	orrs	r3, r2
 8006786:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006788:	f7fc fc74 	bl	8003074 <HAL_GetTick>
 800678c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800678e:	e008      	b.n	80067a2 <HAL_RCC_OscConfig+0x202>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006790:	f7fc fc70 	bl	8003074 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b02      	cmp	r3, #2
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_OscConfig+0x202>
            {
              return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e2fe      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067a2:	4b1e      	ldr	r3, [pc, #120]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0304 	and.w	r3, r3, #4
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d0f0      	beq.n	8006790 <HAL_RCC_OscConfig+0x1f0>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ae:	4b1b      	ldr	r3, [pc, #108]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	061b      	lsls	r3, r3, #24
 80067bc:	4917      	ldr	r1, [pc, #92]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067c2:	e046      	b.n	8006852 <HAL_RCC_OscConfig+0x2b2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d029      	beq.n	8006820 <HAL_RCC_OscConfig+0x280>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80067cc:	4b13      	ldr	r3, [pc, #76]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f023 0219 	bic.w	r2, r3, #25
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	4910      	ldr	r1, [pc, #64]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067de:	f7fc fc49 	bl	8003074 <HAL_GetTick>
 80067e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x258>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067e6:	f7fc fc45 	bl	8003074 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x258>
          {
            return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e2d3      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067f8:	4b08      	ldr	r3, [pc, #32]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0f0      	beq.n	80067e6 <HAL_RCC_OscConfig+0x246>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006804:	4b05      	ldr	r3, [pc, #20]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	061b      	lsls	r3, r3, #24
 8006812:	4902      	ldr	r1, [pc, #8]	; (800681c <HAL_RCC_OscConfig+0x27c>)
 8006814:	4313      	orrs	r3, r2
 8006816:	604b      	str	r3, [r1, #4]
 8006818:	e01b      	b.n	8006852 <HAL_RCC_OscConfig+0x2b2>
 800681a:	bf00      	nop
 800681c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006820:	4b97      	ldr	r3, [pc, #604]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a96      	ldr	r2, [pc, #600]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 8006826:	f023 0301 	bic.w	r3, r3, #1
 800682a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682c:	f7fc fc22 	bl	8003074 <HAL_GetTick>
 8006830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0x2a6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006834:	f7fc fc1e 	bl	8003074 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e2ac      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006846:	4b8e      	ldr	r3, [pc, #568]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0304 	and.w	r3, r3, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1f0      	bne.n	8006834 <HAL_RCC_OscConfig+0x294>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0310 	and.w	r3, r3, #16
 800685a:	2b00      	cmp	r3, #0
 800685c:	d06a      	beq.n	8006934 <HAL_RCC_OscConfig+0x394>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800685e:	4b88      	ldr	r3, [pc, #544]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006866:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006868:	4b85      	ldr	r3, [pc, #532]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 800686a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b08      	cmp	r3, #8
 8006872:	d007      	beq.n	8006884 <HAL_RCC_OscConfig+0x2e4>
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	2b18      	cmp	r3, #24
 8006878:	d11b      	bne.n	80068b2 <HAL_RCC_OscConfig+0x312>
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f003 0303 	and.w	r3, r3, #3
 8006880:	2b01      	cmp	r3, #1
 8006882:	d116      	bne.n	80068b2 <HAL_RCC_OscConfig+0x312>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006884:	4b7e      	ldr	r3, [pc, #504]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <HAL_RCC_OscConfig+0x2fc>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	2b80      	cmp	r3, #128	; 0x80
 8006896:	d001      	beq.n	800689c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e281      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800689c:	4b78      	ldr	r3, [pc, #480]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	061b      	lsls	r3, r3, #24
 80068aa:	4975      	ldr	r1, [pc, #468]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068b0:	e040      	b.n	8006934 <HAL_RCC_OscConfig+0x394>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d023      	beq.n	8006902 <HAL_RCC_OscConfig+0x362>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80068ba:	4b71      	ldr	r3, [pc, #452]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a70      	ldr	r2, [pc, #448]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 80068c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c6:	f7fc fbd5 	bl	8003074 <HAL_GetTick>
 80068ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068cc:	e008      	b.n	80068e0 <HAL_RCC_OscConfig+0x340>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80068ce:	f7fc fbd1 	bl	8003074 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_OscConfig+0x340>
          {
            return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e25f      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068e0:	4b67      	ldr	r3, [pc, #412]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0f0      	beq.n	80068ce <HAL_RCC_OscConfig+0x32e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068ec:	4b64      	ldr	r3, [pc, #400]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	061b      	lsls	r3, r3, #24
 80068fa:	4961      	ldr	r1, [pc, #388]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60cb      	str	r3, [r1, #12]
 8006900:	e018      	b.n	8006934 <HAL_RCC_OscConfig+0x394>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006902:	4b5f      	ldr	r3, [pc, #380]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a5e      	ldr	r2, [pc, #376]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 8006908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800690c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800690e:	f7fc fbb1 	bl	8003074 <HAL_GetTick>
 8006912:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006914:	e008      	b.n	8006928 <HAL_RCC_OscConfig+0x388>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006916:	f7fc fbad 	bl	8003074 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d901      	bls.n	8006928 <HAL_RCC_OscConfig+0x388>
          {
            return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e23b      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006928:	4b55      	ldr	r3, [pc, #340]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1f0      	bne.n	8006916 <HAL_RCC_OscConfig+0x376>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	2b00      	cmp	r3, #0
 800693e:	d036      	beq.n	80069ae <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d019      	beq.n	800697c <HAL_RCC_OscConfig+0x3dc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006948:	4b4d      	ldr	r3, [pc, #308]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 800694a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800694c:	4a4c      	ldr	r2, [pc, #304]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 800694e:	f043 0301 	orr.w	r3, r3, #1
 8006952:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006954:	f7fc fb8e 	bl	8003074 <HAL_GetTick>
 8006958:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0x3ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800695c:	f7fc fb8a 	bl	8003074 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e218      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800696e:	4b44      	ldr	r3, [pc, #272]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 8006970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f0      	beq.n	800695c <HAL_RCC_OscConfig+0x3bc>
 800697a:	e018      	b.n	80069ae <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800697c:	4b40      	ldr	r3, [pc, #256]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 800697e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006980:	4a3f      	ldr	r2, [pc, #252]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 8006982:	f023 0301 	bic.w	r3, r3, #1
 8006986:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006988:	f7fc fb74 	bl	8003074 <HAL_GetTick>
 800698c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006990:	f7fc fb70 	bl	8003074 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e1fe      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069a2:	4b37      	ldr	r3, [pc, #220]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 80069a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1f0      	bne.n	8006990 <HAL_RCC_OscConfig+0x3f0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0320 	and.w	r3, r3, #32
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d036      	beq.n	8006a28 <HAL_RCC_OscConfig+0x488>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d019      	beq.n	80069f6 <HAL_RCC_OscConfig+0x456>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069c2:	4b2f      	ldr	r3, [pc, #188]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a2e      	ldr	r2, [pc, #184]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 80069c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069ce:	f7fc fb51 	bl	8003074 <HAL_GetTick>
 80069d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80069d4:	e008      	b.n	80069e8 <HAL_RCC_OscConfig+0x448>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80069d6:	f7fc fb4d 	bl	8003074 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCC_OscConfig+0x448>
        {
          return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e1db      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80069e8:	4b25      	ldr	r3, [pc, #148]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0f0      	beq.n	80069d6 <HAL_RCC_OscConfig+0x436>
 80069f4:	e018      	b.n	8006a28 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069f6:	4b22      	ldr	r3, [pc, #136]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a21      	ldr	r2, [pc, #132]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 80069fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a02:	f7fc fb37 	bl	8003074 <HAL_GetTick>
 8006a06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a08:	e008      	b.n	8006a1c <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a0a:	f7fc fb33 	bl	8003074 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d901      	bls.n	8006a1c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e1c1      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a1c:	4b18      	ldr	r3, [pc, #96]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1f0      	bne.n	8006a0a <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80af 	beq.w	8006b94 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a36:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <HAL_RCC_OscConfig+0x4e4>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a12      	ldr	r2, [pc, #72]	; (8006a84 <HAL_RCC_OscConfig+0x4e4>)
 8006a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a42:	f7fc fb17 	bl	8003074 <HAL_GetTick>
 8006a46:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a48:	e008      	b.n	8006a5c <HAL_RCC_OscConfig+0x4bc>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a4a:	f7fc fb13 	bl	8003074 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b64      	cmp	r3, #100	; 0x64
 8006a56:	d901      	bls.n	8006a5c <HAL_RCC_OscConfig+0x4bc>
      {
        return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e1a1      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a5c:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <HAL_RCC_OscConfig+0x4e4>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d0f0      	beq.n	8006a4a <HAL_RCC_OscConfig+0x4aa>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d10b      	bne.n	8006a88 <HAL_RCC_OscConfig+0x4e8>
 8006a70:	4b03      	ldr	r3, [pc, #12]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 8006a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a74:	4a02      	ldr	r2, [pc, #8]	; (8006a80 <HAL_RCC_OscConfig+0x4e0>)
 8006a76:	f043 0301 	orr.w	r3, r3, #1
 8006a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a7c:	e05b      	b.n	8006b36 <HAL_RCC_OscConfig+0x596>
 8006a7e:	bf00      	nop
 8006a80:	58024400 	.word	0x58024400
 8006a84:	58024800 	.word	0x58024800
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d112      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x516>
 8006a90:	4b9d      	ldr	r3, [pc, #628]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a94:	4a9c      	ldr	r2, [pc, #624]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006a96:	f023 0301 	bic.w	r3, r3, #1
 8006a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a9c:	4b9a      	ldr	r3, [pc, #616]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa0:	4a99      	ldr	r2, [pc, #612]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8006aa8:	4b97      	ldr	r3, [pc, #604]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aac:	4a96      	ldr	r2, [pc, #600]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006aae:	f023 0304 	bic.w	r3, r3, #4
 8006ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ab4:	e03f      	b.n	8006b36 <HAL_RCC_OscConfig+0x596>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b05      	cmp	r3, #5
 8006abc:	d112      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x544>
 8006abe:	4b92      	ldr	r3, [pc, #584]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac2:	4a91      	ldr	r2, [pc, #580]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006ac4:	f043 0304 	orr.w	r3, r3, #4
 8006ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8006aca:	4b8f      	ldr	r3, [pc, #572]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ace:	4a8e      	ldr	r2, [pc, #568]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ad6:	4b8c      	ldr	r3, [pc, #560]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ada:	4a8b      	ldr	r2, [pc, #556]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006adc:	f043 0301 	orr.w	r3, r3, #1
 8006ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae2:	e028      	b.n	8006b36 <HAL_RCC_OscConfig+0x596>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b85      	cmp	r3, #133	; 0x85
 8006aea:	d112      	bne.n	8006b12 <HAL_RCC_OscConfig+0x572>
 8006aec:	4b86      	ldr	r3, [pc, #536]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af0:	4a85      	ldr	r2, [pc, #532]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006af2:	f043 0304 	orr.w	r3, r3, #4
 8006af6:	6713      	str	r3, [r2, #112]	; 0x70
 8006af8:	4b83      	ldr	r3, [pc, #524]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afc:	4a82      	ldr	r2, [pc, #520]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b02:	6713      	str	r3, [r2, #112]	; 0x70
 8006b04:	4b80      	ldr	r3, [pc, #512]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b08:	4a7f      	ldr	r2, [pc, #508]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006b0a:	f043 0301 	orr.w	r3, r3, #1
 8006b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b10:	e011      	b.n	8006b36 <HAL_RCC_OscConfig+0x596>
 8006b12:	4b7d      	ldr	r3, [pc, #500]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b16:	4a7c      	ldr	r2, [pc, #496]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006b18:	f023 0301 	bic.w	r3, r3, #1
 8006b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b1e:	4b7a      	ldr	r3, [pc, #488]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b22:	4a79      	ldr	r2, [pc, #484]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006b24:	f023 0304 	bic.w	r3, r3, #4
 8006b28:	6713      	str	r3, [r2, #112]	; 0x70
 8006b2a:	4b77      	ldr	r3, [pc, #476]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2e:	4a76      	ldr	r2, [pc, #472]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d015      	beq.n	8006b6a <HAL_RCC_OscConfig+0x5ca>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3e:	f7fc fa99 	bl	8003074 <HAL_GetTick>
 8006b42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b44:	e00a      	b.n	8006b5c <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b46:	f7fc fa95 	bl	8003074 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d901      	bls.n	8006b5c <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e121      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b5c:	4b6a      	ldr	r3, [pc, #424]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0ee      	beq.n	8006b46 <HAL_RCC_OscConfig+0x5a6>
 8006b68:	e014      	b.n	8006b94 <HAL_RCC_OscConfig+0x5f4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6a:	f7fc fa83 	bl	8003074 <HAL_GetTick>
 8006b6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b70:	e00a      	b.n	8006b88 <HAL_RCC_OscConfig+0x5e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b72:	f7fc fa7f 	bl	8003074 <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d901      	bls.n	8006b88 <HAL_RCC_OscConfig+0x5e8>
        {
          return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e10b      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b88:	4b5f      	ldr	r3, [pc, #380]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8c:	f003 0302 	and.w	r3, r3, #2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1ee      	bne.n	8006b72 <HAL_RCC_OscConfig+0x5d2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8100 	beq.w	8006d9e <HAL_RCC_OscConfig+0x7fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b9e:	4b5a      	ldr	r3, [pc, #360]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ba6:	2b18      	cmp	r3, #24
 8006ba8:	f000 80bb 	beq.w	8006d22 <HAL_RCC_OscConfig+0x782>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	f040 8095 	bne.w	8006ce0 <HAL_RCC_OscConfig+0x740>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bb6:	4b54      	ldr	r3, [pc, #336]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a53      	ldr	r2, [pc, #332]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006bbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc2:	f7fc fa57 	bl	8003074 <HAL_GetTick>
 8006bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bc8:	e008      	b.n	8006bdc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bca:	f7fc fa53 	bl	8003074 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e0e1      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bdc:	4b4a      	ldr	r3, [pc, #296]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1f0      	bne.n	8006bca <HAL_RCC_OscConfig+0x62a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006be8:	4b47      	ldr	r3, [pc, #284]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006bea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bec:	4b47      	ldr	r3, [pc, #284]	; (8006d0c <HAL_RCC_OscConfig+0x76c>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006bf8:	0112      	lsls	r2, r2, #4
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	4942      	ldr	r1, [pc, #264]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	628b      	str	r3, [r1, #40]	; 0x28
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c06:	3b01      	subs	r3, #1
 8006c08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c10:	3b01      	subs	r3, #1
 8006c12:	025b      	lsls	r3, r3, #9
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	041b      	lsls	r3, r3, #16
 8006c20:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c24:	431a      	orrs	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	061b      	lsls	r3, r3, #24
 8006c2e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c32:	4935      	ldr	r1, [pc, #212]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006c38:	4b33      	ldr	r3, [pc, #204]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3c:	4a32      	ldr	r2, [pc, #200]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006c3e:	f023 0301 	bic.w	r3, r3, #1
 8006c42:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c44:	4b30      	ldr	r3, [pc, #192]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c48:	4b31      	ldr	r3, [pc, #196]	; (8006d10 <HAL_RCC_OscConfig+0x770>)
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006c50:	00d2      	lsls	r2, r2, #3
 8006c52:	492d      	ldr	r1, [pc, #180]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006c58:	4b2b      	ldr	r3, [pc, #172]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	f023 020c 	bic.w	r2, r3, #12
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	4928      	ldr	r1, [pc, #160]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006c6a:	4b27      	ldr	r3, [pc, #156]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6e:	f023 0202 	bic.w	r2, r3, #2
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c76:	4924      	ldr	r1, [pc, #144]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c7c:	4b22      	ldr	r3, [pc, #136]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	4a21      	ldr	r2, [pc, #132]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c88:	4b1f      	ldr	r3, [pc, #124]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	4a1e      	ldr	r2, [pc, #120]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c94:	4b1c      	ldr	r3, [pc, #112]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	4a1b      	ldr	r2, [pc, #108]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006c9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006ca0:	4b19      	ldr	r3, [pc, #100]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	4a18      	ldr	r2, [pc, #96]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006ca6:	f043 0301 	orr.w	r3, r3, #1
 8006caa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cac:	4b16      	ldr	r3, [pc, #88]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a15      	ldr	r2, [pc, #84]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb8:	f7fc f9dc 	bl	8003074 <HAL_GetTick>
 8006cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x732>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cc0:	f7fc f9d8 	bl	8003074 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x732>
          {
            return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e066      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0f0      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x720>
 8006cde:	e05e      	b.n	8006d9e <HAL_RCC_OscConfig+0x7fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ce0:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a08      	ldr	r2, [pc, #32]	; (8006d08 <HAL_RCC_OscConfig+0x768>)
 8006ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cec:	f7fc f9c2 	bl	8003074 <HAL_GetTick>
 8006cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cf2:	e00f      	b.n	8006d14 <HAL_RCC_OscConfig+0x774>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cf4:	f7fc f9be 	bl	8003074 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d908      	bls.n	8006d14 <HAL_RCC_OscConfig+0x774>
          {
            return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e04c      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
 8006d06:	bf00      	nop
 8006d08:	58024400 	.word	0x58024400
 8006d0c:	fffffc0c 	.word	0xfffffc0c
 8006d10:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d14:	4b24      	ldr	r3, [pc, #144]	; (8006da8 <HAL_RCC_OscConfig+0x808>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e9      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x754>
 8006d20:	e03d      	b.n	8006d9e <HAL_RCC_OscConfig+0x7fe>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d22:	4b21      	ldr	r3, [pc, #132]	; (8006da8 <HAL_RCC_OscConfig+0x808>)
 8006d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d26:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d28:	4b1f      	ldr	r3, [pc, #124]	; (8006da8 <HAL_RCC_OscConfig+0x808>)
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d031      	beq.n	8006d9a <HAL_RCC_OscConfig+0x7fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f003 0203 	and.w	r2, r3, #3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d12a      	bne.n	8006d9a <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	091b      	lsrs	r3, r3, #4
 8006d48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d122      	bne.n	8006d9a <HAL_RCC_OscConfig+0x7fa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d11a      	bne.n	8006d9a <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	0a5b      	lsrs	r3, r3, #9
 8006d68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d70:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d111      	bne.n	8006d9a <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	0c1b      	lsrs	r3, r3, #16
 8006d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d108      	bne.n	8006d9a <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	0e1b      	lsrs	r3, r3, #24
 8006d8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d94:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d001      	beq.n	8006d9e <HAL_RCC_OscConfig+0x7fe>
      {
        return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e000      	b.n	8006da0 <HAL_RCC_OscConfig+0x800>
      }
    }
  }
  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3730      	adds	r7, #48	; 0x30
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	58024400 	.word	0x58024400

08006dac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e19c      	b.n	80070fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006dc0:	4b8a      	ldr	r3, [pc, #552]	; (8006fec <HAL_RCC_ClockConfig+0x240>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 030f 	and.w	r3, r3, #15
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d910      	bls.n	8006df0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dce:	4b87      	ldr	r3, [pc, #540]	; (8006fec <HAL_RCC_ClockConfig+0x240>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f023 020f 	bic.w	r2, r3, #15
 8006dd6:	4985      	ldr	r1, [pc, #532]	; (8006fec <HAL_RCC_ClockConfig+0x240>)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dde:	4b83      	ldr	r3, [pc, #524]	; (8006fec <HAL_RCC_ClockConfig+0x240>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 030f 	and.w	r3, r3, #15
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d001      	beq.n	8006df0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e184      	b.n	80070fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d010      	beq.n	8006e1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	4b7b      	ldr	r3, [pc, #492]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d908      	bls.n	8006e1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e0c:	4b78      	ldr	r3, [pc, #480]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	4975      	ldr	r1, [pc, #468]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d010      	beq.n	8006e4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	695a      	ldr	r2, [r3, #20]
 8006e2e:	4b70      	ldr	r3, [pc, #448]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d908      	bls.n	8006e4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e3a:	4b6d      	ldr	r3, [pc, #436]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	496a      	ldr	r1, [pc, #424]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0310 	and.w	r3, r3, #16
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d010      	beq.n	8006e7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	699a      	ldr	r2, [r3, #24]
 8006e5c:	4b64      	ldr	r3, [pc, #400]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d908      	bls.n	8006e7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e68:	4b61      	ldr	r3, [pc, #388]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	495e      	ldr	r1, [pc, #376]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d010      	beq.n	8006ea8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69da      	ldr	r2, [r3, #28]
 8006e8a:	4b59      	ldr	r3, [pc, #356]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d908      	bls.n	8006ea8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006e96:	4b56      	ldr	r3, [pc, #344]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	4953      	ldr	r1, [pc, #332]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d010      	beq.n	8006ed6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	4b4d      	ldr	r3, [pc, #308]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d908      	bls.n	8006ed6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ec4:	4b4a      	ldr	r3, [pc, #296]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	f023 020f 	bic.w	r2, r3, #15
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	4947      	ldr	r1, [pc, #284]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d055      	beq.n	8006f8e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006ee2:	4b43      	ldr	r3, [pc, #268]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	4940      	ldr	r1, [pc, #256]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d107      	bne.n	8006f0c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006efc:	4b3c      	ldr	r3, [pc, #240]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d121      	bne.n	8006f4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e0f6      	b.n	80070fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d107      	bne.n	8006f24 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f14:	4b36      	ldr	r3, [pc, #216]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d115      	bne.n	8006f4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e0ea      	b.n	80070fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d107      	bne.n	8006f3c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f2c:	4b30      	ldr	r3, [pc, #192]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d109      	bne.n	8006f4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e0de      	b.n	80070fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f3c:	4b2c      	ldr	r3, [pc, #176]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e0d6      	b.n	80070fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f4c:	4b28      	ldr	r3, [pc, #160]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	f023 0207 	bic.w	r2, r3, #7
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	4925      	ldr	r1, [pc, #148]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f5e:	f7fc f889 	bl	8003074 <HAL_GetTick>
 8006f62:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f64:	e00a      	b.n	8006f7c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f66:	f7fc f885 	bl	8003074 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e0be      	b.n	80070fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f7c:	4b1c      	ldr	r3, [pc, #112]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	00db      	lsls	r3, r3, #3
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d1eb      	bne.n	8006f66 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d010      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	4b14      	ldr	r3, [pc, #80]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d208      	bcs.n	8006fbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006faa:	4b11      	ldr	r3, [pc, #68]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	f023 020f 	bic.w	r2, r3, #15
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	490e      	ldr	r1, [pc, #56]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fbc:	4b0b      	ldr	r3, [pc, #44]	; (8006fec <HAL_RCC_ClockConfig+0x240>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d214      	bcs.n	8006ff4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fca:	4b08      	ldr	r3, [pc, #32]	; (8006fec <HAL_RCC_ClockConfig+0x240>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f023 020f 	bic.w	r2, r3, #15
 8006fd2:	4906      	ldr	r1, [pc, #24]	; (8006fec <HAL_RCC_ClockConfig+0x240>)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fda:	4b04      	ldr	r3, [pc, #16]	; (8006fec <HAL_RCC_ClockConfig+0x240>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d005      	beq.n	8006ff4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e086      	b.n	80070fa <HAL_RCC_ClockConfig+0x34e>
 8006fec:	52002000 	.word	0x52002000
 8006ff0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d010      	beq.n	8007022 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691a      	ldr	r2, [r3, #16]
 8007004:	4b3f      	ldr	r3, [pc, #252]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800700c:	429a      	cmp	r2, r3
 800700e:	d208      	bcs.n	8007022 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007010:	4b3c      	ldr	r3, [pc, #240]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	4939      	ldr	r1, [pc, #228]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 800701e:	4313      	orrs	r3, r2
 8007020:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0308 	and.w	r3, r3, #8
 800702a:	2b00      	cmp	r3, #0
 800702c:	d010      	beq.n	8007050 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	695a      	ldr	r2, [r3, #20]
 8007032:	4b34      	ldr	r3, [pc, #208]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800703a:	429a      	cmp	r2, r3
 800703c:	d208      	bcs.n	8007050 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800703e:	4b31      	ldr	r3, [pc, #196]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	492e      	ldr	r1, [pc, #184]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 800704c:	4313      	orrs	r3, r2
 800704e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0310 	and.w	r3, r3, #16
 8007058:	2b00      	cmp	r3, #0
 800705a:	d010      	beq.n	800707e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	699a      	ldr	r2, [r3, #24]
 8007060:	4b28      	ldr	r3, [pc, #160]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007068:	429a      	cmp	r2, r3
 800706a:	d208      	bcs.n	800707e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800706c:	4b25      	ldr	r3, [pc, #148]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	4922      	ldr	r1, [pc, #136]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 800707a:	4313      	orrs	r3, r2
 800707c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b00      	cmp	r3, #0
 8007088:	d010      	beq.n	80070ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69da      	ldr	r2, [r3, #28]
 800708e:	4b1d      	ldr	r3, [pc, #116]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007096:	429a      	cmp	r2, r3
 8007098:	d208      	bcs.n	80070ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800709a:	4b1a      	ldr	r3, [pc, #104]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	4917      	ldr	r1, [pc, #92]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80070ac:	f000 f834 	bl	8007118 <HAL_RCC_GetSysClockFreq>
 80070b0:	4602      	mov	r2, r0
 80070b2:	4b14      	ldr	r3, [pc, #80]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	0a1b      	lsrs	r3, r3, #8
 80070b8:	f003 030f 	and.w	r3, r3, #15
 80070bc:	4912      	ldr	r1, [pc, #72]	; (8007108 <HAL_RCC_ClockConfig+0x35c>)
 80070be:	5ccb      	ldrb	r3, [r1, r3]
 80070c0:	f003 031f 	and.w	r3, r3, #31
 80070c4:	fa22 f303 	lsr.w	r3, r2, r3
 80070c8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80070ca:	4b0e      	ldr	r3, [pc, #56]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	f003 030f 	and.w	r3, r3, #15
 80070d2:	4a0d      	ldr	r2, [pc, #52]	; (8007108 <HAL_RCC_ClockConfig+0x35c>)
 80070d4:	5cd3      	ldrb	r3, [r2, r3]
 80070d6:	f003 031f 	and.w	r3, r3, #31
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	fa22 f303 	lsr.w	r3, r2, r3
 80070e0:	4a0a      	ldr	r2, [pc, #40]	; (800710c <HAL_RCC_ClockConfig+0x360>)
 80070e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070e4:	4a0a      	ldr	r2, [pc, #40]	; (8007110 <HAL_RCC_ClockConfig+0x364>)
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80070ea:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <HAL_RCC_ClockConfig+0x368>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fb ff76 	bl	8002fe0 <HAL_InitTick>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	58024400 	.word	0x58024400
 8007108:	08012940 	.word	0x08012940
 800710c:	2400000c 	.word	0x2400000c
 8007110:	24000008 	.word	0x24000008
 8007114:	24000010 	.word	0x24000010

08007118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007118:	b480      	push	{r7}
 800711a:	b089      	sub	sp, #36	; 0x24
 800711c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800711e:	4bb3      	ldr	r3, [pc, #716]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007126:	2b18      	cmp	r3, #24
 8007128:	f200 8155 	bhi.w	80073d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800712c:	a201      	add	r2, pc, #4	; (adr r2, 8007134 <HAL_RCC_GetSysClockFreq+0x1c>)
 800712e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007132:	bf00      	nop
 8007134:	08007199 	.word	0x08007199
 8007138:	080073d7 	.word	0x080073d7
 800713c:	080073d7 	.word	0x080073d7
 8007140:	080073d7 	.word	0x080073d7
 8007144:	080073d7 	.word	0x080073d7
 8007148:	080073d7 	.word	0x080073d7
 800714c:	080073d7 	.word	0x080073d7
 8007150:	080073d7 	.word	0x080073d7
 8007154:	080071bf 	.word	0x080071bf
 8007158:	080073d7 	.word	0x080073d7
 800715c:	080073d7 	.word	0x080073d7
 8007160:	080073d7 	.word	0x080073d7
 8007164:	080073d7 	.word	0x080073d7
 8007168:	080073d7 	.word	0x080073d7
 800716c:	080073d7 	.word	0x080073d7
 8007170:	080073d7 	.word	0x080073d7
 8007174:	080071c5 	.word	0x080071c5
 8007178:	080073d7 	.word	0x080073d7
 800717c:	080073d7 	.word	0x080073d7
 8007180:	080073d7 	.word	0x080073d7
 8007184:	080073d7 	.word	0x080073d7
 8007188:	080073d7 	.word	0x080073d7
 800718c:	080073d7 	.word	0x080073d7
 8007190:	080073d7 	.word	0x080073d7
 8007194:	080071cb 	.word	0x080071cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007198:	4b94      	ldr	r3, [pc, #592]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d009      	beq.n	80071b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071a4:	4b91      	ldr	r3, [pc, #580]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	08db      	lsrs	r3, r3, #3
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	4a90      	ldr	r2, [pc, #576]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071b0:	fa22 f303 	lsr.w	r3, r2, r3
 80071b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80071b6:	e111      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80071b8:	4b8d      	ldr	r3, [pc, #564]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071ba:	61bb      	str	r3, [r7, #24]
    break;
 80071bc:	e10e      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80071be:	4b8d      	ldr	r3, [pc, #564]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80071c0:	61bb      	str	r3, [r7, #24]
    break;
 80071c2:	e10b      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80071c4:	4b8c      	ldr	r3, [pc, #560]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80071c6:	61bb      	str	r3, [r7, #24]
    break;
 80071c8:	e108      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071ca:	4b88      	ldr	r3, [pc, #544]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80071d4:	4b85      	ldr	r3, [pc, #532]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d8:	091b      	lsrs	r3, r3, #4
 80071da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80071e0:	4b82      	ldr	r3, [pc, #520]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80071ea:	4b80      	ldr	r3, [pc, #512]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ee:	08db      	lsrs	r3, r3, #3
 80071f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 80e1 	beq.w	80073d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2b02      	cmp	r3, #2
 8007212:	f000 8083 	beq.w	800731c <HAL_RCC_GetSysClockFreq+0x204>
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2b02      	cmp	r3, #2
 800721a:	f200 80a1 	bhi.w	8007360 <HAL_RCC_GetSysClockFreq+0x248>
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <HAL_RCC_GetSysClockFreq+0x114>
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d056      	beq.n	80072d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800722a:	e099      	b.n	8007360 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800722c:	4b6f      	ldr	r3, [pc, #444]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0320 	and.w	r3, r3, #32
 8007234:	2b00      	cmp	r3, #0
 8007236:	d02d      	beq.n	8007294 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007238:	4b6c      	ldr	r3, [pc, #432]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	08db      	lsrs	r3, r3, #3
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	4a6b      	ldr	r2, [pc, #428]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
 8007248:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	ee07 3a90 	vmov	s15, r3
 8007250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007262:	4b62      	ldr	r3, [pc, #392]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007272:	ed97 6a02 	vldr	s12, [r7, #8]
 8007276:	eddf 5a61 	vldr	s11, [pc, #388]	; 80073fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800727a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800727e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007292:	e087      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007400 <HAL_RCC_GetSysClockFreq+0x2e8>
 80072a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a6:	4b51      	ldr	r3, [pc, #324]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80072ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80073fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80072be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072d6:	e065      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007404 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ea:	4b40      	ldr	r3, [pc, #256]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80072fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80073fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800730e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800731a:	e043      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007326:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007408 <HAL_RCC_GetSysClockFreq+0x2f0>
 800732a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732e:	4b2f      	ldr	r3, [pc, #188]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007342:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80073fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800734e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800735e:	e021      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007404 <HAL_RCC_GetSysClockFreq+0x2ec>
 800736e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007372:	4b1e      	ldr	r3, [pc, #120]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007382:	ed97 6a02 	vldr	s12, [r7, #8]
 8007386:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80073fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800738a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80073a4:	4b11      	ldr	r3, [pc, #68]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a8:	0a5b      	lsrs	r3, r3, #9
 80073aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ae:	3301      	adds	r3, #1
 80073b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	ee07 3a90 	vmov	s15, r3
 80073b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80073c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073c8:	ee17 3a90 	vmov	r3, s15
 80073cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80073ce:	e005      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	61bb      	str	r3, [r7, #24]
    break;
 80073d4:	e002      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80073d6:	4b07      	ldr	r3, [pc, #28]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073d8:	61bb      	str	r3, [r7, #24]
    break;
 80073da:	bf00      	nop
  }

  return sysclockfreq;
 80073dc:	69bb      	ldr	r3, [r7, #24]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3724      	adds	r7, #36	; 0x24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	58024400 	.word	0x58024400
 80073f0:	03d09000 	.word	0x03d09000
 80073f4:	003d0900 	.word	0x003d0900
 80073f8:	016e3600 	.word	0x016e3600
 80073fc:	46000000 	.word	0x46000000
 8007400:	4c742400 	.word	0x4c742400
 8007404:	4a742400 	.word	0x4a742400
 8007408:	4bb71b00 	.word	0x4bb71b00

0800740c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007412:	f7ff fe81 	bl	8007118 <HAL_RCC_GetSysClockFreq>
 8007416:	4602      	mov	r2, r0
 8007418:	4b10      	ldr	r3, [pc, #64]	; (800745c <HAL_RCC_GetHCLKFreq+0x50>)
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	0a1b      	lsrs	r3, r3, #8
 800741e:	f003 030f 	and.w	r3, r3, #15
 8007422:	490f      	ldr	r1, [pc, #60]	; (8007460 <HAL_RCC_GetHCLKFreq+0x54>)
 8007424:	5ccb      	ldrb	r3, [r1, r3]
 8007426:	f003 031f 	and.w	r3, r3, #31
 800742a:	fa22 f303 	lsr.w	r3, r2, r3
 800742e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007430:	4b0a      	ldr	r3, [pc, #40]	; (800745c <HAL_RCC_GetHCLKFreq+0x50>)
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	4a09      	ldr	r2, [pc, #36]	; (8007460 <HAL_RCC_GetHCLKFreq+0x54>)
 800743a:	5cd3      	ldrb	r3, [r2, r3]
 800743c:	f003 031f 	and.w	r3, r3, #31
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	fa22 f303 	lsr.w	r3, r2, r3
 8007446:	4a07      	ldr	r2, [pc, #28]	; (8007464 <HAL_RCC_GetHCLKFreq+0x58>)
 8007448:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800744a:	4a07      	ldr	r2, [pc, #28]	; (8007468 <HAL_RCC_GetHCLKFreq+0x5c>)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007450:	4b04      	ldr	r3, [pc, #16]	; (8007464 <HAL_RCC_GetHCLKFreq+0x58>)
 8007452:	681b      	ldr	r3, [r3, #0]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	58024400 	.word	0x58024400
 8007460:	08012940 	.word	0x08012940
 8007464:	2400000c 	.word	0x2400000c
 8007468:	24000008 	.word	0x24000008

0800746c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007470:	f7ff ffcc 	bl	800740c <HAL_RCC_GetHCLKFreq>
 8007474:	4602      	mov	r2, r0
 8007476:	4b06      	ldr	r3, [pc, #24]	; (8007490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	091b      	lsrs	r3, r3, #4
 800747c:	f003 0307 	and.w	r3, r3, #7
 8007480:	4904      	ldr	r1, [pc, #16]	; (8007494 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007482:	5ccb      	ldrb	r3, [r1, r3]
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800748c:	4618      	mov	r0, r3
 800748e:	bd80      	pop	{r7, pc}
 8007490:	58024400 	.word	0x58024400
 8007494:	08012940 	.word	0x08012940

08007498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800749c:	f7ff ffb6 	bl	800740c <HAL_RCC_GetHCLKFreq>
 80074a0:	4602      	mov	r2, r0
 80074a2:	4b06      	ldr	r3, [pc, #24]	; (80074bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	0a1b      	lsrs	r3, r3, #8
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	4904      	ldr	r1, [pc, #16]	; (80074c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80074ae:	5ccb      	ldrb	r3, [r1, r3]
 80074b0:	f003 031f 	and.w	r3, r3, #31
 80074b4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	58024400 	.word	0x58024400
 80074c0:	08012940 	.word	0x08012940

080074c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074cc:	2300      	movs	r3, #0
 80074ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80074d0:	2300      	movs	r3, #0
 80074d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d03f      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074e8:	d02a      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80074ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074ee:	d824      	bhi.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80074f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074f4:	d018      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80074f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074fa:	d81e      	bhi.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007504:	d007      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007506:	e018      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007508:	4b9f      	ldr	r3, [pc, #636]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	4a9e      	ldr	r2, [pc, #632]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800750e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007514:	e015      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3304      	adds	r3, #4
 800751a:	2102      	movs	r1, #2
 800751c:	4618      	mov	r0, r3
 800751e:	f001 ff1b 	bl	8009358 <RCCEx_PLL2_Config>
 8007522:	4603      	mov	r3, r0
 8007524:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007526:	e00c      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3324      	adds	r3, #36	; 0x24
 800752c:	2102      	movs	r1, #2
 800752e:	4618      	mov	r0, r3
 8007530:	f001 ffc4 	bl	80094bc <RCCEx_PLL3_Config>
 8007534:	4603      	mov	r3, r0
 8007536:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007538:	e003      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	75fb      	strb	r3, [r7, #23]
      break;
 800753e:	e000      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d109      	bne.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007548:	4b8f      	ldr	r3, [pc, #572]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800754a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800754c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007554:	498c      	ldr	r1, [pc, #560]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007556:	4313      	orrs	r3, r2
 8007558:	650b      	str	r3, [r1, #80]	; 0x50
 800755a:	e001      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755c:	7dfb      	ldrb	r3, [r7, #23]
 800755e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007568:	2b00      	cmp	r3, #0
 800756a:	d03d      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007570:	2b04      	cmp	r3, #4
 8007572:	d826      	bhi.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007574:	a201      	add	r2, pc, #4	; (adr r2, 800757c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757a:	bf00      	nop
 800757c:	08007591 	.word	0x08007591
 8007580:	0800759f 	.word	0x0800759f
 8007584:	080075b1 	.word	0x080075b1
 8007588:	080075c9 	.word	0x080075c9
 800758c:	080075c9 	.word	0x080075c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007590:	4b7d      	ldr	r3, [pc, #500]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	4a7c      	ldr	r2, [pc, #496]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800759a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800759c:	e015      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3304      	adds	r3, #4
 80075a2:	2100      	movs	r1, #0
 80075a4:	4618      	mov	r0, r3
 80075a6:	f001 fed7 	bl	8009358 <RCCEx_PLL2_Config>
 80075aa:	4603      	mov	r3, r0
 80075ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075ae:	e00c      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3324      	adds	r3, #36	; 0x24
 80075b4:	2100      	movs	r1, #0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f001 ff80 	bl	80094bc <RCCEx_PLL3_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075c0:	e003      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	75fb      	strb	r3, [r7, #23]
      break;
 80075c6:	e000      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80075c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d109      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075d0:	4b6d      	ldr	r3, [pc, #436]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80075d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d4:	f023 0207 	bic.w	r2, r3, #7
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075dc:	496a      	ldr	r1, [pc, #424]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	650b      	str	r3, [r1, #80]	; 0x50
 80075e2:	e001      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
 80075e6:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d04a      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80075fc:	d031      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80075fe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007602:	d82b      	bhi.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007608:	d02d      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800760a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800760e:	d825      	bhi.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007610:	2bc0      	cmp	r3, #192	; 0xc0
 8007612:	d02a      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007614:	2bc0      	cmp	r3, #192	; 0xc0
 8007616:	d821      	bhi.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007618:	2b80      	cmp	r3, #128	; 0x80
 800761a:	d016      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800761c:	2b80      	cmp	r3, #128	; 0x80
 800761e:	d81d      	bhi.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007624:	2b40      	cmp	r3, #64	; 0x40
 8007626:	d007      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8007628:	e018      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800762a:	4b57      	ldr	r3, [pc, #348]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762e:	4a56      	ldr	r2, [pc, #344]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007634:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8007636:	e019      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3304      	adds	r3, #4
 800763c:	2100      	movs	r1, #0
 800763e:	4618      	mov	r0, r3
 8007640:	f001 fe8a 	bl	8009358 <RCCEx_PLL2_Config>
 8007644:	4603      	mov	r3, r0
 8007646:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8007648:	e010      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3324      	adds	r3, #36	; 0x24
 800764e:	2100      	movs	r1, #0
 8007650:	4618      	mov	r0, r3
 8007652:	f001 ff33 	bl	80094bc <RCCEx_PLL3_Config>
 8007656:	4603      	mov	r3, r0
 8007658:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800765a:	e007      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	75fb      	strb	r3, [r7, #23]
      break;
 8007660:	e004      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007662:	bf00      	nop
 8007664:	e002      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007666:	bf00      	nop
 8007668:	e000      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800766a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800766c:	7dfb      	ldrb	r3, [r7, #23]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d109      	bne.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007672:	4b45      	ldr	r3, [pc, #276]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007676:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767e:	4942      	ldr	r1, [pc, #264]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007680:	4313      	orrs	r3, r2
 8007682:	650b      	str	r3, [r1, #80]	; 0x50
 8007684:	e001      	b.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007686:	7dfb      	ldrb	r3, [r7, #23]
 8007688:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007692:	2b00      	cmp	r3, #0
 8007694:	d04f      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800769a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800769e:	d036      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80076a0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80076a4:	d830      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80076a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076aa:	d032      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80076ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076b0:	d82a      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80076b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80076b6:	d02e      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80076b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80076bc:	d824      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80076be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c2:	d018      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80076c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c8:	d81e      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80076ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d2:	d007      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80076d4:	e018      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d6:	4b2c      	ldr	r3, [pc, #176]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80076d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076da:	4a2b      	ldr	r2, [pc, #172]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80076dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80076e2:	e019      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3304      	adds	r3, #4
 80076e8:	2100      	movs	r1, #0
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 fe34 	bl	8009358 <RCCEx_PLL2_Config>
 80076f0:	4603      	mov	r3, r0
 80076f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80076f4:	e010      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	3324      	adds	r3, #36	; 0x24
 80076fa:	2100      	movs	r1, #0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 fedd 	bl	80094bc <RCCEx_PLL3_Config>
 8007702:	4603      	mov	r3, r0
 8007704:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007706:	e007      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]
      break;
 800770c:	e004      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800770e:	bf00      	nop
 8007710:	e002      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007712:	bf00      	nop
 8007714:	e000      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007718:	7dfb      	ldrb	r3, [r7, #23]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d109      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800771e:	4b1a      	ldr	r3, [pc, #104]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007722:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772a:	4917      	ldr	r1, [pc, #92]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800772c:	4313      	orrs	r3, r2
 800772e:	650b      	str	r3, [r1, #80]	; 0x50
 8007730:	e001      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007732:	7dfb      	ldrb	r3, [r7, #23]
 8007734:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d034      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007746:	2b30      	cmp	r3, #48	; 0x30
 8007748:	d01c      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800774a:	2b30      	cmp	r3, #48	; 0x30
 800774c:	d817      	bhi.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800774e:	2b20      	cmp	r3, #32
 8007750:	d00c      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007752:	2b20      	cmp	r3, #32
 8007754:	d813      	bhi.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d018      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800775a:	2b10      	cmp	r3, #16
 800775c:	d10f      	bne.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800775e:	4b0a      	ldr	r3, [pc, #40]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007762:	4a09      	ldr	r2, [pc, #36]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007768:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800776a:	e010      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	3304      	adds	r3, #4
 8007770:	2102      	movs	r1, #2
 8007772:	4618      	mov	r0, r3
 8007774:	f001 fdf0 	bl	8009358 <RCCEx_PLL2_Config>
 8007778:	4603      	mov	r3, r0
 800777a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800777c:	e007      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	75fb      	strb	r3, [r7, #23]
      break;
 8007782:	e004      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8007784:	bf00      	nop
 8007786:	e002      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007788:	58024400 	.word	0x58024400
      break;
 800778c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d109      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007794:	4b9b      	ldr	r3, [pc, #620]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007798:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a0:	4998      	ldr	r1, [pc, #608]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80077a6:	e001      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a8:	7dfb      	ldrb	r3, [r7, #23]
 80077aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d047      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077c0:	d030      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80077c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077c6:	d82a      	bhi.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80077c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077cc:	d02c      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80077ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077d2:	d824      	bhi.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80077d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077d8:	d018      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80077da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077de:	d81e      	bhi.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x328>
 80077e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e8:	d007      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x336>
 80077ea:	e018      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077ec:	4b85      	ldr	r3, [pc, #532]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f0:	4a84      	ldr	r2, [pc, #528]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80077f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80077f8:	e017      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3304      	adds	r3, #4
 80077fe:	2100      	movs	r1, #0
 8007800:	4618      	mov	r0, r3
 8007802:	f001 fda9 	bl	8009358 <RCCEx_PLL2_Config>
 8007806:	4603      	mov	r3, r0
 8007808:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800780a:	e00e      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	3324      	adds	r3, #36	; 0x24
 8007810:	2100      	movs	r1, #0
 8007812:	4618      	mov	r0, r3
 8007814:	f001 fe52 	bl	80094bc <RCCEx_PLL3_Config>
 8007818:	4603      	mov	r3, r0
 800781a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800781c:	e005      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	75fb      	strb	r3, [r7, #23]
      break;
 8007822:	e002      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8007824:	bf00      	nop
 8007826:	e000      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8007828:	bf00      	nop
    }

    if(ret == HAL_OK)
 800782a:	7dfb      	ldrb	r3, [r7, #23]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d109      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007830:	4b74      	ldr	r3, [pc, #464]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007834:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800783c:	4971      	ldr	r1, [pc, #452]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800783e:	4313      	orrs	r3, r2
 8007840:	650b      	str	r3, [r1, #80]	; 0x50
 8007842:	e001      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d049      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800785c:	d02e      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800785e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007862:	d828      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007864:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007868:	d02a      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800786a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800786e:	d822      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007870:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007874:	d026      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8007876:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800787a:	d81c      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800787c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007880:	d010      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007882:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007886:	d816      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01d      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800788c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007890:	d111      	bne.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3304      	adds	r3, #4
 8007896:	2101      	movs	r1, #1
 8007898:	4618      	mov	r0, r3
 800789a:	f001 fd5d 	bl	8009358 <RCCEx_PLL2_Config>
 800789e:	4603      	mov	r3, r0
 80078a0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80078a2:	e012      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3324      	adds	r3, #36	; 0x24
 80078a8:	2101      	movs	r1, #1
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 fe06 	bl	80094bc <RCCEx_PLL3_Config>
 80078b0:	4603      	mov	r3, r0
 80078b2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80078b4:	e009      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	75fb      	strb	r3, [r7, #23]
      break;
 80078ba:	e006      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80078bc:	bf00      	nop
 80078be:	e004      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80078c0:	bf00      	nop
 80078c2:	e002      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80078c4:	bf00      	nop
 80078c6:	e000      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80078c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d109      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078d0:	4b4c      	ldr	r3, [pc, #304]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80078d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078dc:	4949      	ldr	r1, [pc, #292]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	650b      	str	r3, [r1, #80]	; 0x50
 80078e2:	e001      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
 80078e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d053      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078fa:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80078fe:	d034      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007900:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007904:	d82e      	bhi.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007906:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800790a:	d030      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800790c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007910:	d828      	bhi.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007916:	d02c      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791c:	d822      	bhi.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800791e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007922:	d028      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007924:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007928:	d81c      	bhi.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800792a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800792e:	d010      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8007930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007934:	d816      	bhi.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007936:	2b00      	cmp	r3, #0
 8007938:	d01f      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800793a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800793e:	d111      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3304      	adds	r3, #4
 8007944:	2101      	movs	r1, #1
 8007946:	4618      	mov	r0, r3
 8007948:	f001 fd06 	bl	8009358 <RCCEx_PLL2_Config>
 800794c:	4603      	mov	r3, r0
 800794e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007950:	e014      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	3324      	adds	r3, #36	; 0x24
 8007956:	2101      	movs	r1, #1
 8007958:	4618      	mov	r0, r3
 800795a:	f001 fdaf 	bl	80094bc <RCCEx_PLL3_Config>
 800795e:	4603      	mov	r3, r0
 8007960:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007962:	e00b      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	75fb      	strb	r3, [r7, #23]
      break;
 8007968:	e008      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800796a:	bf00      	nop
 800796c:	e006      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800796e:	bf00      	nop
 8007970:	e004      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007972:	bf00      	nop
 8007974:	e002      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007976:	bf00      	nop
 8007978:	e000      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800797a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10a      	bne.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007982:	4b20      	ldr	r3, [pc, #128]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007986:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007990:	491c      	ldr	r1, [pc, #112]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007992:	4313      	orrs	r3, r2
 8007994:	658b      	str	r3, [r1, #88]	; 0x58
 8007996:	e001      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d031      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079b0:	d00e      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80079b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079b6:	d814      	bhi.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d015      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80079bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079c0:	d10f      	bne.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079c2:	4b10      	ldr	r3, [pc, #64]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80079c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c6:	4a0f      	ldr	r2, [pc, #60]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80079c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80079ce:	e00c      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3304      	adds	r3, #4
 80079d4:	2101      	movs	r1, #1
 80079d6:	4618      	mov	r0, r3
 80079d8:	f001 fcbe 	bl	8009358 <RCCEx_PLL2_Config>
 80079dc:	4603      	mov	r3, r0
 80079de:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80079e0:	e003      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	75fb      	strb	r3, [r7, #23]
      break;
 80079e6:	e000      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80079e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10b      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80079f0:	4b04      	ldr	r3, [pc, #16]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80079f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079fc:	4901      	ldr	r1, [pc, #4]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	650b      	str	r3, [r1, #80]	; 0x50
 8007a02:	e003      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x548>
 8007a04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d032      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d81b      	bhi.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007a20:	a201      	add	r2, pc, #4	; (adr r2, 8007a28 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a26:	bf00      	nop
 8007a28:	08007a5f 	.word	0x08007a5f
 8007a2c:	08007a39 	.word	0x08007a39
 8007a30:	08007a47 	.word	0x08007a47
 8007a34:	08007a5f 	.word	0x08007a5f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a38:	4bb2      	ldr	r3, [pc, #712]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	4ab1      	ldr	r2, [pc, #708]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007a44:	e00c      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	2102      	movs	r1, #2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f001 fc83 	bl	8009358 <RCCEx_PLL2_Config>
 8007a52:	4603      	mov	r3, r0
 8007a54:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007a56:	e003      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a5c:	e000      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a60:	7dfb      	ldrb	r3, [r7, #23]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d109      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a66:	4ba7      	ldr	r3, [pc, #668]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a6a:	f023 0203 	bic.w	r2, r3, #3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a72:	49a4      	ldr	r1, [pc, #656]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a78:	e001      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
 8007a7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 8086 	beq.w	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a8c:	4b9e      	ldr	r3, [pc, #632]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a9d      	ldr	r2, [pc, #628]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a98:	f7fb faec 	bl	8003074 <HAL_GetTick>
 8007a9c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a9e:	e009      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aa0:	f7fb fae8 	bl	8003074 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	2b64      	cmp	r3, #100	; 0x64
 8007aac:	d902      	bls.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	75fb      	strb	r3, [r7, #23]
        break;
 8007ab2:	e005      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ab4:	4b94      	ldr	r3, [pc, #592]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0ef      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007ac0:	7dfb      	ldrb	r3, [r7, #23]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d166      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007ac6:	4b8f      	ldr	r3, [pc, #572]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007ac8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ad0:	4053      	eors	r3, r2
 8007ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d013      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ada:	4b8a      	ldr	r3, [pc, #552]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ae4:	4b87      	ldr	r3, [pc, #540]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae8:	4a86      	ldr	r2, [pc, #536]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007af0:	4b84      	ldr	r3, [pc, #528]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af4:	4a83      	ldr	r2, [pc, #524]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007afa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007afc:	4a81      	ldr	r2, [pc, #516]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b0c:	d115      	bne.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b0e:	f7fb fab1 	bl	8003074 <HAL_GetTick>
 8007b12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b14:	e00b      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b16:	f7fb faad 	bl	8003074 <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d902      	bls.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	75fb      	strb	r3, [r7, #23]
            break;
 8007b2c:	e005      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b2e:	4b75      	ldr	r3, [pc, #468]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0ed      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8007b3a:	7dfb      	ldrb	r3, [r7, #23]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d126      	bne.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b4e:	d10d      	bne.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8007b50:	4b6c      	ldr	r3, [pc, #432]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b5e:	0919      	lsrs	r1, r3, #4
 8007b60:	4b6a      	ldr	r3, [pc, #424]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007b62:	400b      	ands	r3, r1
 8007b64:	4967      	ldr	r1, [pc, #412]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	610b      	str	r3, [r1, #16]
 8007b6a:	e005      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8007b6c:	4b65      	ldr	r3, [pc, #404]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	4a64      	ldr	r2, [pc, #400]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007b72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b76:	6113      	str	r3, [r2, #16]
 8007b78:	4b62      	ldr	r3, [pc, #392]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007b7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b86:	495f      	ldr	r1, [pc, #380]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	670b      	str	r3, [r1, #112]	; 0x70
 8007b8c:	e004      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	75bb      	strb	r3, [r7, #22]
 8007b92:	e001      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b94:	7dfb      	ldrb	r3, [r7, #23]
 8007b96:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d07f      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007baa:	2b28      	cmp	r3, #40	; 0x28
 8007bac:	d866      	bhi.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8007bae:	a201      	add	r2, pc, #4	; (adr r2, 8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8007bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb4:	08007c83 	.word	0x08007c83
 8007bb8:	08007c7d 	.word	0x08007c7d
 8007bbc:	08007c7d 	.word	0x08007c7d
 8007bc0:	08007c7d 	.word	0x08007c7d
 8007bc4:	08007c7d 	.word	0x08007c7d
 8007bc8:	08007c7d 	.word	0x08007c7d
 8007bcc:	08007c7d 	.word	0x08007c7d
 8007bd0:	08007c7d 	.word	0x08007c7d
 8007bd4:	08007c59 	.word	0x08007c59
 8007bd8:	08007c7d 	.word	0x08007c7d
 8007bdc:	08007c7d 	.word	0x08007c7d
 8007be0:	08007c7d 	.word	0x08007c7d
 8007be4:	08007c7d 	.word	0x08007c7d
 8007be8:	08007c7d 	.word	0x08007c7d
 8007bec:	08007c7d 	.word	0x08007c7d
 8007bf0:	08007c7d 	.word	0x08007c7d
 8007bf4:	08007c6b 	.word	0x08007c6b
 8007bf8:	08007c7d 	.word	0x08007c7d
 8007bfc:	08007c7d 	.word	0x08007c7d
 8007c00:	08007c7d 	.word	0x08007c7d
 8007c04:	08007c7d 	.word	0x08007c7d
 8007c08:	08007c7d 	.word	0x08007c7d
 8007c0c:	08007c7d 	.word	0x08007c7d
 8007c10:	08007c7d 	.word	0x08007c7d
 8007c14:	08007c83 	.word	0x08007c83
 8007c18:	08007c7d 	.word	0x08007c7d
 8007c1c:	08007c7d 	.word	0x08007c7d
 8007c20:	08007c7d 	.word	0x08007c7d
 8007c24:	08007c7d 	.word	0x08007c7d
 8007c28:	08007c7d 	.word	0x08007c7d
 8007c2c:	08007c7d 	.word	0x08007c7d
 8007c30:	08007c7d 	.word	0x08007c7d
 8007c34:	08007c83 	.word	0x08007c83
 8007c38:	08007c7d 	.word	0x08007c7d
 8007c3c:	08007c7d 	.word	0x08007c7d
 8007c40:	08007c7d 	.word	0x08007c7d
 8007c44:	08007c7d 	.word	0x08007c7d
 8007c48:	08007c7d 	.word	0x08007c7d
 8007c4c:	08007c7d 	.word	0x08007c7d
 8007c50:	08007c7d 	.word	0x08007c7d
 8007c54:	08007c83 	.word	0x08007c83
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f001 fb7a 	bl	8009358 <RCCEx_PLL2_Config>
 8007c64:	4603      	mov	r3, r0
 8007c66:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007c68:	e00c      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	3324      	adds	r3, #36	; 0x24
 8007c6e:	2101      	movs	r1, #1
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 fc23 	bl	80094bc <RCCEx_PLL3_Config>
 8007c76:	4603      	mov	r3, r0
 8007c78:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007c7a:	e003      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c80:	e000      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8007c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10a      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c8a:	4b1e      	ldr	r3, [pc, #120]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c98:	491a      	ldr	r1, [pc, #104]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	654b      	str	r3, [r1, #84]	; 0x54
 8007c9e:	e001      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d03f      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb4:	2b05      	cmp	r3, #5
 8007cb6:	d821      	bhi.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x838>
 8007cb8:	a201      	add	r2, pc, #4	; (adr r2, 8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8007cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbe:	bf00      	nop
 8007cc0:	08007d11 	.word	0x08007d11
 8007cc4:	08007cd9 	.word	0x08007cd9
 8007cc8:	08007ceb 	.word	0x08007ceb
 8007ccc:	08007d11 	.word	0x08007d11
 8007cd0:	08007d11 	.word	0x08007d11
 8007cd4:	08007d11 	.word	0x08007d11
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3304      	adds	r3, #4
 8007cdc:	2101      	movs	r1, #1
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f001 fb3a 	bl	8009358 <RCCEx_PLL2_Config>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007ce8:	e013      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3324      	adds	r3, #36	; 0x24
 8007cee:	2101      	movs	r1, #1
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f001 fbe3 	bl	80094bc <RCCEx_PLL3_Config>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007cfa:	e00a      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8007d00:	e007      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8007d02:	bf00      	nop
 8007d04:	58024400 	.word	0x58024400
 8007d08:	58024800 	.word	0x58024800
 8007d0c:	00ffffcf 	.word	0x00ffffcf
      break;
 8007d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d109      	bne.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d18:	4b9f      	ldr	r3, [pc, #636]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1c:	f023 0207 	bic.w	r2, r3, #7
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d24:	499c      	ldr	r1, [pc, #624]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	654b      	str	r3, [r1, #84]	; 0x54
 8007d2a:	e001      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2c:	7dfb      	ldrb	r3, [r7, #23]
 8007d2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d039      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d42:	2b05      	cmp	r3, #5
 8007d44:	d820      	bhi.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8007d46:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007d8f 	.word	0x08007d8f
 8007d50:	08007d65 	.word	0x08007d65
 8007d54:	08007d77 	.word	0x08007d77
 8007d58:	08007d8f 	.word	0x08007d8f
 8007d5c:	08007d8f 	.word	0x08007d8f
 8007d60:	08007d8f 	.word	0x08007d8f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3304      	adds	r3, #4
 8007d68:	2101      	movs	r1, #1
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f001 faf4 	bl	8009358 <RCCEx_PLL2_Config>
 8007d70:	4603      	mov	r3, r0
 8007d72:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007d74:	e00c      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	3324      	adds	r3, #36	; 0x24
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f001 fb9d 	bl	80094bc <RCCEx_PLL3_Config>
 8007d82:	4603      	mov	r3, r0
 8007d84:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007d86:	e003      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d8c:	e000      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8007d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10a      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d96:	4b80      	ldr	r3, [pc, #512]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d9a:	f023 0207 	bic.w	r2, r3, #7
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007da4:	497c      	ldr	r1, [pc, #496]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	658b      	str	r3, [r1, #88]	; 0x58
 8007daa:	e001      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
 8007dae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0320 	and.w	r3, r3, #32
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d04b      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dc6:	d02e      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8007dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dcc:	d828      	bhi.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd2:	d02a      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd8:	d822      	bhi.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007dda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007dde:	d026      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007de0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007de4:	d81c      	bhi.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007de6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dea:	d010      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8007dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007df0:	d816      	bhi.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d01d      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dfa:	d111      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	2100      	movs	r1, #0
 8007e02:	4618      	mov	r0, r3
 8007e04:	f001 faa8 	bl	8009358 <RCCEx_PLL2_Config>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e0c:	e012      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3324      	adds	r3, #36	; 0x24
 8007e12:	2102      	movs	r1, #2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f001 fb51 	bl	80094bc <RCCEx_PLL3_Config>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e1e:	e009      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	75fb      	strb	r3, [r7, #23]
      break;
 8007e24:	e006      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007e26:	bf00      	nop
 8007e28:	e004      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007e2a:	bf00      	nop
 8007e2c:	e002      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007e2e:	bf00      	nop
 8007e30:	e000      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e34:	7dfb      	ldrb	r3, [r7, #23]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10a      	bne.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e3a:	4b57      	ldr	r3, [pc, #348]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e48:	4953      	ldr	r1, [pc, #332]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	654b      	str	r3, [r1, #84]	; 0x54
 8007e4e:	e001      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
 8007e52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d04b      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e6a:	d02e      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8007e6c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e70:	d828      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e76:	d02a      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e7c:	d822      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007e7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e82:	d026      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007e84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e88:	d81c      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e8e:	d010      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8007e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e94:	d816      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01d      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e9e:	d111      	bne.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f001 fa56 	bl	8009358 <RCCEx_PLL2_Config>
 8007eac:	4603      	mov	r3, r0
 8007eae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007eb0:	e012      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3324      	adds	r3, #36	; 0x24
 8007eb6:	2102      	movs	r1, #2
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f001 faff 	bl	80094bc <RCCEx_PLL3_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007ec2:	e009      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ec8:	e006      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007eca:	bf00      	nop
 8007ecc:	e004      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007ece:	bf00      	nop
 8007ed0:	e002      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007ed2:	bf00      	nop
 8007ed4:	e000      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10a      	bne.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ede:	4b2e      	ldr	r3, [pc, #184]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007eec:	492a      	ldr	r1, [pc, #168]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	658b      	str	r3, [r1, #88]	; 0x58
 8007ef2:	e001      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
 8007ef6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d04d      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f0a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f0e:	d02e      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8007f10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f14:	d828      	bhi.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f1a:	d02a      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f20:	d822      	bhi.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007f22:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f26:	d026      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007f28:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f2c:	d81c      	bhi.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007f2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f32:	d010      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8007f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f38:	d816      	bhi.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d01d      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f42:	d111      	bne.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3304      	adds	r3, #4
 8007f48:	2100      	movs	r1, #0
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f001 fa04 	bl	8009358 <RCCEx_PLL2_Config>
 8007f50:	4603      	mov	r3, r0
 8007f52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007f54:	e012      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3324      	adds	r3, #36	; 0x24
 8007f5a:	2102      	movs	r1, #2
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f001 faad 	bl	80094bc <RCCEx_PLL3_Config>
 8007f62:	4603      	mov	r3, r0
 8007f64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007f66:	e009      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f6c:	e006      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007f6e:	bf00      	nop
 8007f70:	e004      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007f72:	bf00      	nop
 8007f74:	e002      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007f76:	bf00      	nop
 8007f78:	e000      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f7c:	7dfb      	ldrb	r3, [r7, #23]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10c      	bne.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f82:	4b05      	ldr	r3, [pc, #20]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f90:	4901      	ldr	r1, [pc, #4]	; (8007f98 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	658b      	str	r3, [r1, #88]	; 0x58
 8007f96:	e003      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007f98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9c:	7dfb      	ldrb	r3, [r7, #23]
 8007f9e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0308 	and.w	r3, r3, #8
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d01a      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb6:	d10a      	bne.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3324      	adds	r3, #36	; 0x24
 8007fbc:	2102      	movs	r1, #2
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f001 fa7c 	bl	80094bc <RCCEx_PLL3_Config>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007fce:	4b8c      	ldr	r3, [pc, #560]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fdc:	4988      	ldr	r1, [pc, #544]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0310 	and.w	r3, r3, #16
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d01a      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff8:	d10a      	bne.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	3324      	adds	r3, #36	; 0x24
 8007ffe:	2102      	movs	r1, #2
 8008000:	4618      	mov	r0, r3
 8008002:	f001 fa5b 	bl	80094bc <RCCEx_PLL3_Config>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008010:	4b7b      	ldr	r3, [pc, #492]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800801e:	4978      	ldr	r1, [pc, #480]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008020:	4313      	orrs	r3, r2
 8008022:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d034      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800803a:	d01d      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800803c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008040:	d817      	bhi.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8008046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800804a:	d009      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800804c:	e011      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3304      	adds	r3, #4
 8008052:	2100      	movs	r1, #0
 8008054:	4618      	mov	r0, r3
 8008056:	f001 f97f 	bl	8009358 <RCCEx_PLL2_Config>
 800805a:	4603      	mov	r3, r0
 800805c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800805e:	e00c      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3324      	adds	r3, #36	; 0x24
 8008064:	2102      	movs	r1, #2
 8008066:	4618      	mov	r0, r3
 8008068:	f001 fa28 	bl	80094bc <RCCEx_PLL3_Config>
 800806c:	4603      	mov	r3, r0
 800806e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008070:	e003      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	75fb      	strb	r3, [r7, #23]
      break;
 8008076:	e000      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8008078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10a      	bne.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008080:	4b5f      	ldr	r3, [pc, #380]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008084:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800808e:	495c      	ldr	r1, [pc, #368]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008090:	4313      	orrs	r3, r2
 8008092:	658b      	str	r3, [r1, #88]	; 0x58
 8008094:	e001      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008096:	7dfb      	ldrb	r3, [r7, #23]
 8008098:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d033      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080b0:	d01c      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80080b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080b6:	d816      	bhi.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80080b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080bc:	d003      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80080be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080c2:	d007      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80080c4:	e00f      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080c6:	4b4e      	ldr	r3, [pc, #312]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80080c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ca:	4a4d      	ldr	r2, [pc, #308]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80080cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80080d2:	e00c      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3324      	adds	r3, #36	; 0x24
 80080d8:	2101      	movs	r1, #1
 80080da:	4618      	mov	r0, r3
 80080dc:	f001 f9ee 	bl	80094bc <RCCEx_PLL3_Config>
 80080e0:	4603      	mov	r3, r0
 80080e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80080e4:	e003      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	75fb      	strb	r3, [r7, #23]
      break;
 80080ea:	e000      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80080ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10a      	bne.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080f4:	4b42      	ldr	r3, [pc, #264]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80080f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008102:	493f      	ldr	r1, [pc, #252]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008104:	4313      	orrs	r3, r2
 8008106:	654b      	str	r3, [r1, #84]	; 0x54
 8008108:	e001      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d029      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8008122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008126:	d007      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008128:	e00f      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800812a:	4b35      	ldr	r3, [pc, #212]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	4a34      	ldr	r2, [pc, #208]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008134:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008136:	e00b      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3304      	adds	r3, #4
 800813c:	2102      	movs	r1, #2
 800813e:	4618      	mov	r0, r3
 8008140:	f001 f90a 	bl	8009358 <RCCEx_PLL2_Config>
 8008144:	4603      	mov	r3, r0
 8008146:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008148:	e002      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	75fb      	strb	r3, [r7, #23]
      break;
 800814e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008150:	7dfb      	ldrb	r3, [r7, #23]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d109      	bne.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008156:	4b2a      	ldr	r3, [pc, #168]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008162:	4927      	ldr	r1, [pc, #156]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008164:	4313      	orrs	r3, r2
 8008166:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008168:	e001      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800816a:	7dfb      	ldrb	r3, [r7, #23]
 800816c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	3324      	adds	r3, #36	; 0x24
 800817e:	2102      	movs	r1, #2
 8008180:	4618      	mov	r0, r3
 8008182:	f001 f99b 	bl	80094bc <RCCEx_PLL3_Config>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d035      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081a6:	d017      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80081a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081ac:	d811      	bhi.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80081ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081b2:	d013      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80081b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081b8:	d80b      	bhi.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d010      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80081be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081c2:	d106      	bne.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081c4:	4b0e      	ldr	r3, [pc, #56]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	4a0d      	ldr	r2, [pc, #52]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80081ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80081d0:	e007      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	75fb      	strb	r3, [r7, #23]
      break;
 80081d6:	e004      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80081d8:	bf00      	nop
 80081da:	e002      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80081dc:	bf00      	nop
 80081de:	e000      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80081e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10d      	bne.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081e8:	4b05      	ldr	r3, [pc, #20]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80081ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081f6:	4902      	ldr	r1, [pc, #8]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	654b      	str	r3, [r1, #84]	; 0x54
 80081fc:	e004      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80081fe:	bf00      	nop
 8008200:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d008      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008214:	4b30      	ldr	r3, [pc, #192]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008218:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008220:	492d      	ldr	r1, [pc, #180]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008222:	4313      	orrs	r3, r2
 8008224:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d008      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008232:	4b29      	ldr	r3, [pc, #164]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008236:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800823e:	4926      	ldr	r1, [pc, #152]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008240:	4313      	orrs	r3, r2
 8008242:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800824c:	2b00      	cmp	r3, #0
 800824e:	d008      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008250:	4b21      	ldr	r3, [pc, #132]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008254:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825c:	491e      	ldr	r1, [pc, #120]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800825e:	4313      	orrs	r3, r2
 8008260:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00d      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800826e:	4b1a      	ldr	r3, [pc, #104]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	4a19      	ldr	r2, [pc, #100]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008274:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008278:	6113      	str	r3, [r2, #16]
 800827a:	4b17      	ldr	r3, [pc, #92]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800827c:	691a      	ldr	r2, [r3, #16]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008284:	4914      	ldr	r1, [pc, #80]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008286:	4313      	orrs	r3, r2
 8008288:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	da08      	bge.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008292:	4b11      	ldr	r3, [pc, #68]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008296:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800829e:	490e      	ldr	r1, [pc, #56]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d009      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082b0:	4b09      	ldr	r3, [pc, #36]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80082b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082be:	4906      	ldr	r1, [pc, #24]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80082c4:	7dbb      	ldrb	r3, [r7, #22]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	e000      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3718      	adds	r7, #24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	58024400 	.word	0x58024400

080082dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b090      	sub	sp, #64	; 0x40
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ea:	f040 8089 	bne.w	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80082ee:	4b91      	ldr	r3, [pc, #580]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f2:	f003 0307 	and.w	r3, r3, #7
 80082f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80082f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fa:	2b04      	cmp	r3, #4
 80082fc:	d87d      	bhi.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80082fe:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	08008319 	.word	0x08008319
 8008308:	0800833d 	.word	0x0800833d
 800830c:	08008361 	.word	0x08008361
 8008310:	080083f5 	.word	0x080083f5
 8008314:	08008385 	.word	0x08008385
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008318:	4b86      	ldr	r3, [pc, #536]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008320:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008324:	d107      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800832a:	4618      	mov	r0, r3
 800832c:	f000 fec2 	bl	80090b4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008334:	e3f4      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800833a:	e3f1      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800833c:	4b7d      	ldr	r3, [pc, #500]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008348:	d107      	bne.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800834a:	f107 0318 	add.w	r3, r7, #24
 800834e:	4618      	mov	r0, r3
 8008350:	f000 fc08 	bl	8008b64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008358:	e3e2      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800835a:	2300      	movs	r3, #0
 800835c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800835e:	e3df      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008360:	4b74      	ldr	r3, [pc, #464]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800836c:	d107      	bne.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800836e:	f107 030c 	add.w	r3, r7, #12
 8008372:	4618      	mov	r0, r3
 8008374:	f000 fd4a 	bl	8008e0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800837c:	e3d0      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008382:	e3cd      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008384:	4b6b      	ldr	r3, [pc, #428]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008388:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800838c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800838e:	4b69      	ldr	r3, [pc, #420]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0304 	and.w	r3, r3, #4
 8008396:	2b04      	cmp	r3, #4
 8008398:	d10c      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800839a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839c:	2b00      	cmp	r3, #0
 800839e:	d109      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083a0:	4b64      	ldr	r3, [pc, #400]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	08db      	lsrs	r3, r3, #3
 80083a6:	f003 0303 	and.w	r3, r3, #3
 80083aa:	4a63      	ldr	r2, [pc, #396]	; (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80083ac:	fa22 f303 	lsr.w	r3, r2, r3
 80083b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b2:	e01e      	b.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083b4:	4b5f      	ldr	r3, [pc, #380]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083c0:	d106      	bne.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80083c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083c8:	d102      	bne.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80083ca:	4b5c      	ldr	r3, [pc, #368]	; (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80083cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083ce:	e010      	b.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083d0:	4b58      	ldr	r3, [pc, #352]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083dc:	d106      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80083de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083e4:	d102      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80083e6:	4b56      	ldr	r3, [pc, #344]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80083e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083ea:	e002      	b.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80083f0:	e396      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80083f2:	e395      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80083f4:	4b53      	ldr	r3, [pc, #332]	; (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80083f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083f8:	e392      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 80083fa:	2300      	movs	r3, #0
 80083fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083fe:	e38f      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008406:	f040 809f 	bne.w	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 800840a:	4b4a      	ldr	r3, [pc, #296]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800840c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800840e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008412:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800841a:	d04d      	beq.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 800841c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008422:	f200 8084 	bhi.w	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	2bc0      	cmp	r3, #192	; 0xc0
 800842a:	d07d      	beq.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 800842c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842e:	2bc0      	cmp	r3, #192	; 0xc0
 8008430:	d87d      	bhi.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	2b80      	cmp	r3, #128	; 0x80
 8008436:	d02d      	beq.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	2b80      	cmp	r3, #128	; 0x80
 800843c:	d877      	bhi.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	2b00      	cmp	r3, #0
 8008442:	d003      	beq.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8008444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008446:	2b40      	cmp	r3, #64	; 0x40
 8008448:	d012      	beq.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800844a:	e070      	b.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800844c:	4b39      	ldr	r3, [pc, #228]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008454:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008458:	d107      	bne.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800845a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800845e:	4618      	mov	r0, r3
 8008460:	f000 fe28 	bl	80090b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008466:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008468:	e35a      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800846a:	2300      	movs	r3, #0
 800846c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800846e:	e357      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008470:	4b30      	ldr	r3, [pc, #192]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008478:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800847c:	d107      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800847e:	f107 0318 	add.w	r3, r7, #24
 8008482:	4618      	mov	r0, r3
 8008484:	f000 fb6e 	bl	8008b64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800848c:	e348      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800848e:	2300      	movs	r3, #0
 8008490:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008492:	e345      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008494:	4b27      	ldr	r3, [pc, #156]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800849c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084a0:	d107      	bne.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084a2:	f107 030c 	add.w	r3, r7, #12
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 fcb0 	bl	8008e0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084b0:	e336      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084b6:	e333      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80084b8:	4b1e      	ldr	r3, [pc, #120]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80084ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084c0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084c2:	4b1c      	ldr	r3, [pc, #112]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0304 	and.w	r3, r3, #4
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	d10c      	bne.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 80084ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d109      	bne.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084d4:	4b17      	ldr	r3, [pc, #92]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	08db      	lsrs	r3, r3, #3
 80084da:	f003 0303 	and.w	r3, r3, #3
 80084de:	4a16      	ldr	r2, [pc, #88]	; (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80084e0:	fa22 f303 	lsr.w	r3, r2, r3
 80084e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084e6:	e01e      	b.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084e8:	4b12      	ldr	r3, [pc, #72]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084f4:	d106      	bne.n	8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80084f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084fc:	d102      	bne.n	8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80084fe:	4b0f      	ldr	r3, [pc, #60]	; (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008502:	e010      	b.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008504:	4b0b      	ldr	r3, [pc, #44]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800850c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008510:	d106      	bne.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008518:	d102      	bne.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800851a:	4b09      	ldr	r3, [pc, #36]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800851c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800851e:	e002      	b.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008524:	e2fc      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008526:	e2fb      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008528:	4b06      	ldr	r3, [pc, #24]	; (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800852c:	e2f8      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008532:	e2f5      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008534:	58024400 	.word	0x58024400
 8008538:	03d09000 	.word	0x03d09000
 800853c:	003d0900 	.word	0x003d0900
 8008540:	016e3600 	.word	0x016e3600
 8008544:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800854e:	f040 809c 	bne.w	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8008552:	4b9d      	ldr	r3, [pc, #628]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008556:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800855a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800855c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008562:	d054      	beq.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800856a:	f200 808b 	bhi.w	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008574:	f000 8083 	beq.w	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800857e:	f200 8081 	bhi.w	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008588:	d02f      	beq.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008590:	d878      	bhi.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	2b00      	cmp	r3, #0
 8008596:	d004      	beq.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800859e:	d012      	beq.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80085a0:	e070      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085a2:	4b89      	ldr	r3, [pc, #548]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085ae:	d107      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 fd7d 	bl	80090b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085be:	e2af      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085c4:	e2ac      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085c6:	4b80      	ldr	r3, [pc, #512]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085d2:	d107      	bne.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085d4:	f107 0318 	add.w	r3, r7, #24
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fac3 	bl	8008b64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085e2:	e29d      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80085e4:	2300      	movs	r3, #0
 80085e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085e8:	e29a      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085ea:	4b77      	ldr	r3, [pc, #476]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085f6:	d107      	bne.n	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085f8:	f107 030c 	add.w	r3, r7, #12
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 fc05 	bl	8008e0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008606:	e28b      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008608:	2300      	movs	r3, #0
 800860a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800860c:	e288      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800860e:	4b6e      	ldr	r3, [pc, #440]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008612:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008616:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008618:	4b6b      	ldr	r3, [pc, #428]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	2b04      	cmp	r3, #4
 8008622:	d10c      	bne.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8008624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008626:	2b00      	cmp	r3, #0
 8008628:	d109      	bne.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800862a:	4b67      	ldr	r3, [pc, #412]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	08db      	lsrs	r3, r3, #3
 8008630:	f003 0303 	and.w	r3, r3, #3
 8008634:	4a65      	ldr	r2, [pc, #404]	; (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8008636:	fa22 f303 	lsr.w	r3, r2, r3
 800863a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800863c:	e01e      	b.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800863e:	4b62      	ldr	r3, [pc, #392]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800864a:	d106      	bne.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800864c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008652:	d102      	bne.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008654:	4b5e      	ldr	r3, [pc, #376]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008658:	e010      	b.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800865a:	4b5b      	ldr	r3, [pc, #364]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008662:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008666:	d106      	bne.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8008668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800866e:	d102      	bne.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008670:	4b58      	ldr	r3, [pc, #352]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8008672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008674:	e002      	b.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 800867a:	e251      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800867c:	e250      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800867e:	4b56      	ldr	r3, [pc, #344]	; (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008682:	e24d      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008688:	e24a      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008690:	f040 80a7 	bne.w	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008694:	4b4c      	ldr	r3, [pc, #304]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008698:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800869c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086a4:	d055      	beq.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086ac:	f200 8096 	bhi.w	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80086b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086b6:	f000 8084 	beq.w	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 80086ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086c0:	f200 808c 	bhi.w	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ca:	d030      	beq.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80086cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086d2:	f200 8083 	bhi.w	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80086d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d004      	beq.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 80086dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086e2:	d012      	beq.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 80086e4:	e07a      	b.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086e6:	4b38      	ldr	r3, [pc, #224]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086f2:	d107      	bne.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 fcdb 	bl	80090b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008702:	e20d      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008704:	2300      	movs	r3, #0
 8008706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008708:	e20a      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800870a:	4b2f      	ldr	r3, [pc, #188]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008712:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008716:	d107      	bne.n	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008718:	f107 0318 	add.w	r3, r7, #24
 800871c:	4618      	mov	r0, r3
 800871e:	f000 fa21 	bl	8008b64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008726:	e1fb      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800872c:	e1f8      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800872e:	4b26      	ldr	r3, [pc, #152]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800873a:	d107      	bne.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800873c:	f107 030c 	add.w	r3, r7, #12
 8008740:	4618      	mov	r0, r3
 8008742:	f000 fb63 	bl	8008e0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800874a:	e1e9      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800874c:	2300      	movs	r3, #0
 800874e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008750:	e1e6      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008752:	4b1d      	ldr	r3, [pc, #116]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008756:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800875a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800875c:	4b1a      	ldr	r3, [pc, #104]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0304 	and.w	r3, r3, #4
 8008764:	2b04      	cmp	r3, #4
 8008766:	d10c      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8008768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876a:	2b00      	cmp	r3, #0
 800876c:	d109      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800876e:	4b16      	ldr	r3, [pc, #88]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	08db      	lsrs	r3, r3, #3
 8008774:	f003 0303 	and.w	r3, r3, #3
 8008778:	4a14      	ldr	r2, [pc, #80]	; (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 800877a:	fa22 f303 	lsr.w	r3, r2, r3
 800877e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008780:	e01e      	b.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008782:	4b11      	ldr	r3, [pc, #68]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800878a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800878e:	d106      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8008790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008796:	d102      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008798:	4b0d      	ldr	r3, [pc, #52]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800879a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800879c:	e010      	b.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800879e:	4b0a      	ldr	r3, [pc, #40]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087aa:	d106      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80087ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087b2:	d102      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80087b4:	4b07      	ldr	r3, [pc, #28]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 80087b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087b8:	e002      	b.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80087ba:	2300      	movs	r3, #0
 80087bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80087be:	e1af      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80087c0:	e1ae      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80087c2:	4b05      	ldr	r3, [pc, #20]	; (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80087c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087c6:	e1ab      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80087c8:	58024400 	.word	0x58024400
 80087cc:	03d09000 	.word	0x03d09000
 80087d0:	003d0900 	.word	0x003d0900
 80087d4:	016e3600 	.word	0x016e3600
 80087d8:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 80087dc:	2300      	movs	r3, #0
 80087de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087e0:	e19e      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087e8:	d173      	bne.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80087ea:	4b9d      	ldr	r3, [pc, #628]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80087ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087f2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087fa:	d02f      	beq.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008802:	d863      	bhi.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008806:	2b00      	cmp	r3, #0
 8008808:	d004      	beq.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008810:	d012      	beq.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8008812:	e05b      	b.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008814:	4b92      	ldr	r3, [pc, #584]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800881c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008820:	d107      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008822:	f107 0318 	add.w	r3, r7, #24
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f99c 	bl	8008b64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008830:	e176      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008836:	e173      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008838:	4b89      	ldr	r3, [pc, #548]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008844:	d107      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008846:	f107 030c 	add.w	r3, r7, #12
 800884a:	4618      	mov	r0, r3
 800884c:	f000 fade 	bl	8008e0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008854:	e164      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800885a:	e161      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800885c:	4b80      	ldr	r3, [pc, #512]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800885e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008860:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008864:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008866:	4b7e      	ldr	r3, [pc, #504]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0304 	and.w	r3, r3, #4
 800886e:	2b04      	cmp	r3, #4
 8008870:	d10c      	bne.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8008872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008874:	2b00      	cmp	r3, #0
 8008876:	d109      	bne.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008878:	4b79      	ldr	r3, [pc, #484]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	08db      	lsrs	r3, r3, #3
 800887e:	f003 0303 	and.w	r3, r3, #3
 8008882:	4a78      	ldr	r2, [pc, #480]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008884:	fa22 f303 	lsr.w	r3, r2, r3
 8008888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800888a:	e01e      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800888c:	4b74      	ldr	r3, [pc, #464]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008898:	d106      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800889a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088a0:	d102      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80088a2:	4b71      	ldr	r3, [pc, #452]	; (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80088a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088a6:	e010      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088a8:	4b6d      	ldr	r3, [pc, #436]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088b4:	d106      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80088b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088bc:	d102      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80088be:	4b6b      	ldr	r3, [pc, #428]	; (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80088c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088c2:	e002      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80088c8:	e12a      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80088ca:	e129      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088d0:	e126      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088d8:	d133      	bne.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80088da:	4b61      	ldr	r3, [pc, #388]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80088dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80088e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d004      	beq.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80088ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088f0:	d012      	beq.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80088f2:	e023      	b.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088f4:	4b5a      	ldr	r3, [pc, #360]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008900:	d107      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008906:	4618      	mov	r0, r3
 8008908:	f000 fbd4 	bl	80090b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800890c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008910:	e106      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008916:	e103      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008918:	4b51      	ldr	r3, [pc, #324]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008924:	d107      	bne.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008926:	f107 0318 	add.w	r3, r7, #24
 800892a:	4618      	mov	r0, r3
 800892c:	f000 f91a 	bl	8008b64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008934:	e0f4      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008936:	2300      	movs	r3, #0
 8008938:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800893a:	e0f1      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800893c:	2300      	movs	r3, #0
 800893e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008940:	e0ee      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008948:	f040 809b 	bne.w	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800894c:	4b44      	ldr	r3, [pc, #272]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800894e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008950:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008954:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008958:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800895c:	f000 808b 	beq.w	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008962:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008966:	f200 8089 	bhi.w	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008970:	d06c      	beq.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008978:	f200 8080 	bhi.w	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008982:	d056      	beq.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8008984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800898a:	d877      	bhi.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800898c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008992:	d03b      	beq.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8008994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008996:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800899a:	d86f      	bhi.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800899c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089a2:	d021      	beq.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089aa:	d867      	bhi.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80089ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d004      	beq.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80089b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089b8:	d004      	beq.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 80089ba:	e05f      	b.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80089bc:	f000 f8bc 	bl	8008b38 <HAL_RCCEx_GetD3PCLK1Freq>
 80089c0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80089c2:	e0ad      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089c4:	4b26      	ldr	r3, [pc, #152]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089d0:	d107      	bne.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089d2:	f107 0318 	add.w	r3, r7, #24
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 f8c4 	bl	8008b64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80089e0:	e09e      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089e6:	e09b      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089e8:	4b1d      	ldr	r3, [pc, #116]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089f4:	d107      	bne.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089f6:	f107 030c 	add.w	r3, r7, #12
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 fa06 	bl	8008e0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a04:	e08c      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a0a:	e089      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a0c:	4b14      	ldr	r3, [pc, #80]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0304 	and.w	r3, r3, #4
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	d109      	bne.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a18:	4b11      	ldr	r3, [pc, #68]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	08db      	lsrs	r3, r3, #3
 8008a1e:	f003 0303 	and.w	r3, r3, #3
 8008a22:	4a10      	ldr	r2, [pc, #64]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a24:	fa22 f303 	lsr.w	r3, r2, r3
 8008a28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a2a:	e079      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a30:	e076      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008a32:	4b0b      	ldr	r3, [pc, #44]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a3e:	d102      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8008a40:	4b09      	ldr	r3, [pc, #36]	; (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008a42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a44:	e06c      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a4a:	e069      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a4c:	4b04      	ldr	r3, [pc, #16]	; (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a58:	d10a      	bne.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 8008a5a:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a5e:	e05f      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008a60:	58024400 	.word	0x58024400
 8008a64:	03d09000 	.word	0x03d09000
 8008a68:	003d0900 	.word	0x003d0900
 8008a6c:	016e3600 	.word	0x016e3600
          frequency = 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a74:	e054      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a76:	4b2d      	ldr	r3, [pc, #180]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008a78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a7a:	e051      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a80:	e04e      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a88:	d148      	bne.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008a8a:	4b29      	ldr	r3, [pc, #164]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a92:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a9a:	d02a      	beq.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aa2:	d838      	bhi.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d004      	beq.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ab0:	d00d      	beq.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008ab2:	e030      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ab4:	4b1e      	ldr	r3, [pc, #120]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ac0:	d102      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 8008ac2:	4b1c      	ldr	r3, [pc, #112]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ac6:	e02b      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008acc:	e028      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ace:	4b18      	ldr	r3, [pc, #96]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ad6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ada:	d107      	bne.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 fae7 	bl	80090b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008aea:	e019      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008aec:	2300      	movs	r3, #0
 8008aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008af0:	e016      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008af2:	4b0f      	ldr	r3, [pc, #60]	; (8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008afa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008afe:	d107      	bne.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b00:	f107 0318 	add.w	r3, r7, #24
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 f82d 	bl	8008b64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b0e:	e007      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008b10:	2300      	movs	r3, #0
 8008b12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b14:	e004      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8008b16:	2300      	movs	r3, #0
 8008b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b1a:	e001      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3740      	adds	r7, #64	; 0x40
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	00bb8000 	.word	0x00bb8000
 8008b30:	58024400 	.word	0x58024400
 8008b34:	016e3600 	.word	0x016e3600

08008b38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008b3c:	f7fe fc66 	bl	800740c <HAL_RCC_GetHCLKFreq>
 8008b40:	4602      	mov	r2, r0
 8008b42:	4b06      	ldr	r3, [pc, #24]	; (8008b5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	091b      	lsrs	r3, r3, #4
 8008b48:	f003 0307 	and.w	r3, r3, #7
 8008b4c:	4904      	ldr	r1, [pc, #16]	; (8008b60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008b4e:	5ccb      	ldrb	r3, [r1, r3]
 8008b50:	f003 031f 	and.w	r3, r3, #31
 8008b54:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	58024400 	.word	0x58024400
 8008b60:	08012940 	.word	0x08012940

08008b64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b089      	sub	sp, #36	; 0x24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b6c:	4ba1      	ldr	r3, [pc, #644]	; (8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b70:	f003 0303 	and.w	r3, r3, #3
 8008b74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008b76:	4b9f      	ldr	r3, [pc, #636]	; (8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7a:	0b1b      	lsrs	r3, r3, #12
 8008b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b82:	4b9c      	ldr	r3, [pc, #624]	; (8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b86:	091b      	lsrs	r3, r3, #4
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008b8e:	4b99      	ldr	r3, [pc, #612]	; (8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b92:	08db      	lsrs	r3, r3, #3
 8008b94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	fb02 f303 	mul.w	r3, r2, r3
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f000 8111 	beq.w	8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	f000 8083 	beq.w	8008cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	f200 80a1 	bhi.w	8008d04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d056      	beq.n	8008c7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008bce:	e099      	b.n	8008d04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bd0:	4b88      	ldr	r3, [pc, #544]	; (8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0320 	and.w	r3, r3, #32
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d02d      	beq.n	8008c38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bdc:	4b85      	ldr	r3, [pc, #532]	; (8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	08db      	lsrs	r3, r3, #3
 8008be2:	f003 0303 	and.w	r3, r3, #3
 8008be6:	4a84      	ldr	r2, [pc, #528]	; (8008df8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008be8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	ee07 3a90 	vmov	s15, r3
 8008bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	ee07 3a90 	vmov	s15, r3
 8008bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c06:	4b7b      	ldr	r3, [pc, #492]	; (8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008c36:	e087      	b.n	8008d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008e00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c4a:	4b6a      	ldr	r3, [pc, #424]	; (8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c52:	ee07 3a90 	vmov	s15, r3
 8008c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c7a:	e065      	b.n	8008d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	ee07 3a90 	vmov	s15, r3
 8008c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c8e:	4b59      	ldr	r3, [pc, #356]	; (8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c96:	ee07 3a90 	vmov	s15, r3
 8008c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ca2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cbe:	e043      	b.n	8008d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	ee07 3a90 	vmov	s15, r3
 8008cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cd2:	4b48      	ldr	r3, [pc, #288]	; (8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cda:	ee07 3a90 	vmov	s15, r3
 8008cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ce6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d02:	e021      	b.n	8008d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	ee07 3a90 	vmov	s15, r3
 8008d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d16:	4b37      	ldr	r3, [pc, #220]	; (8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008d48:	4b2a      	ldr	r3, [pc, #168]	; (8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4c:	0a5b      	lsrs	r3, r3, #9
 8008d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d62:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d6e:	ee17 2a90 	vmov	r2, s15
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008d76:	4b1f      	ldr	r3, [pc, #124]	; (8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7a:	0c1b      	lsrs	r3, r3, #16
 8008d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d80:	ee07 3a90 	vmov	s15, r3
 8008d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d90:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d9c:	ee17 2a90 	vmov	r2, s15
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008da4:	4b13      	ldr	r3, [pc, #76]	; (8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da8:	0e1b      	lsrs	r3, r3, #24
 8008daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dca:	ee17 2a90 	vmov	r2, s15
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008dd2:	e008      	b.n	8008de6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	609a      	str	r2, [r3, #8]
}
 8008de6:	bf00      	nop
 8008de8:	3724      	adds	r7, #36	; 0x24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	58024400 	.word	0x58024400
 8008df8:	03d09000 	.word	0x03d09000
 8008dfc:	46000000 	.word	0x46000000
 8008e00:	4c742400 	.word	0x4c742400
 8008e04:	4a742400 	.word	0x4a742400
 8008e08:	4bb71b00 	.word	0x4bb71b00

08008e0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b089      	sub	sp, #36	; 0x24
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e14:	4ba1      	ldr	r3, [pc, #644]	; (800909c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e18:	f003 0303 	and.w	r3, r3, #3
 8008e1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008e1e:	4b9f      	ldr	r3, [pc, #636]	; (800909c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e22:	0d1b      	lsrs	r3, r3, #20
 8008e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008e2a:	4b9c      	ldr	r3, [pc, #624]	; (800909c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2e:	0a1b      	lsrs	r3, r3, #8
 8008e30:	f003 0301 	and.w	r3, r3, #1
 8008e34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008e36:	4b99      	ldr	r3, [pc, #612]	; (800909c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e3a:	08db      	lsrs	r3, r3, #3
 8008e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e40:	693a      	ldr	r2, [r7, #16]
 8008e42:	fb02 f303 	mul.w	r3, r2, r3
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 8111 	beq.w	800907c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	f000 8083 	beq.w	8008f68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	f200 80a1 	bhi.w	8008fac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d003      	beq.n	8008e78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d056      	beq.n	8008f24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008e76:	e099      	b.n	8008fac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e78:	4b88      	ldr	r3, [pc, #544]	; (800909c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 0320 	and.w	r3, r3, #32
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d02d      	beq.n	8008ee0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e84:	4b85      	ldr	r3, [pc, #532]	; (800909c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	08db      	lsrs	r3, r3, #3
 8008e8a:	f003 0303 	and.w	r3, r3, #3
 8008e8e:	4a84      	ldr	r2, [pc, #528]	; (80090a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008e90:	fa22 f303 	lsr.w	r3, r2, r3
 8008e94:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	ee07 3a90 	vmov	s15, r3
 8008e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	ee07 3a90 	vmov	s15, r3
 8008ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eae:	4b7b      	ldr	r3, [pc, #492]	; (800909c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ec2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80090a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eda:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008ede:	e087      	b.n	8008ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80090a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ef2:	4b6a      	ldr	r3, [pc, #424]	; (800909c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008efa:	ee07 3a90 	vmov	s15, r3
 8008efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f06:	eddf 5a67 	vldr	s11, [pc, #412]	; 80090a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f22:	e065      	b.n	8008ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	ee07 3a90 	vmov	s15, r3
 8008f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80090ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f36:	4b59      	ldr	r3, [pc, #356]	; (800909c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80090a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f66:	e043      	b.n	8008ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	ee07 3a90 	vmov	s15, r3
 8008f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f7a:	4b48      	ldr	r3, [pc, #288]	; (800909c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f82:	ee07 3a90 	vmov	s15, r3
 8008f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80090a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008faa:	e021      	b.n	8008ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	ee07 3a90 	vmov	s15, r3
 8008fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80090ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fbe:	4b37      	ldr	r3, [pc, #220]	; (800909c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc6:	ee07 3a90 	vmov	s15, r3
 8008fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80090a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008ff0:	4b2a      	ldr	r3, [pc, #168]	; (800909c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff4:	0a5b      	lsrs	r3, r3, #9
 8008ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800900a:	edd7 6a07 	vldr	s13, [r7, #28]
 800900e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009016:	ee17 2a90 	vmov	r2, s15
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800901e:	4b1f      	ldr	r3, [pc, #124]	; (800909c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009022:	0c1b      	lsrs	r3, r3, #16
 8009024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009028:	ee07 3a90 	vmov	s15, r3
 800902c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009030:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009034:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009038:	edd7 6a07 	vldr	s13, [r7, #28]
 800903c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009044:	ee17 2a90 	vmov	r2, s15
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800904c:	4b13      	ldr	r3, [pc, #76]	; (800909c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800904e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009050:	0e1b      	lsrs	r3, r3, #24
 8009052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800905e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009062:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009066:	edd7 6a07 	vldr	s13, [r7, #28]
 800906a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800906e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009072:	ee17 2a90 	vmov	r2, s15
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800907a:	e008      	b.n	800908e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	609a      	str	r2, [r3, #8]
}
 800908e:	bf00      	nop
 8009090:	3724      	adds	r7, #36	; 0x24
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	58024400 	.word	0x58024400
 80090a0:	03d09000 	.word	0x03d09000
 80090a4:	46000000 	.word	0x46000000
 80090a8:	4c742400 	.word	0x4c742400
 80090ac:	4a742400 	.word	0x4a742400
 80090b0:	4bb71b00 	.word	0x4bb71b00

080090b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b089      	sub	sp, #36	; 0x24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090bc:	4ba0      	ldr	r3, [pc, #640]	; (8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c0:	f003 0303 	and.w	r3, r3, #3
 80090c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80090c6:	4b9e      	ldr	r3, [pc, #632]	; (8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ca:	091b      	lsrs	r3, r3, #4
 80090cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80090d2:	4b9b      	ldr	r3, [pc, #620]	; (8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d6:	f003 0301 	and.w	r3, r3, #1
 80090da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80090dc:	4b98      	ldr	r3, [pc, #608]	; (8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e0:	08db      	lsrs	r3, r3, #3
 80090e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	fb02 f303 	mul.w	r3, r2, r3
 80090ec:	ee07 3a90 	vmov	s15, r3
 80090f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 8111 	beq.w	8009322 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	2b02      	cmp	r3, #2
 8009104:	f000 8083 	beq.w	800920e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	2b02      	cmp	r3, #2
 800910c:	f200 80a1 	bhi.w	8009252 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d056      	beq.n	80091ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800911c:	e099      	b.n	8009252 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800911e:	4b88      	ldr	r3, [pc, #544]	; (8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0320 	and.w	r3, r3, #32
 8009126:	2b00      	cmp	r3, #0
 8009128:	d02d      	beq.n	8009186 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800912a:	4b85      	ldr	r3, [pc, #532]	; (8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	08db      	lsrs	r3, r3, #3
 8009130:	f003 0303 	and.w	r3, r3, #3
 8009134:	4a83      	ldr	r2, [pc, #524]	; (8009344 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009136:	fa22 f303 	lsr.w	r3, r2, r3
 800913a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	ee07 3a90 	vmov	s15, r3
 8009142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	ee07 3a90 	vmov	s15, r3
 800914c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009154:	4b7a      	ldr	r3, [pc, #488]	; (8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915c:	ee07 3a90 	vmov	s15, r3
 8009160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009164:	ed97 6a03 	vldr	s12, [r7, #12]
 8009168:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800916c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009170:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009174:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800917c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009180:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009184:	e087      	b.n	8009296 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	ee07 3a90 	vmov	s15, r3
 800918c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009190:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800934c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009198:	4b69      	ldr	r3, [pc, #420]	; (8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800919a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091a0:	ee07 3a90 	vmov	s15, r3
 80091a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091c8:	e065      	b.n	8009296 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	ee07 3a90 	vmov	s15, r3
 80091d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009350 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80091d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091dc:	4b58      	ldr	r3, [pc, #352]	; (8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e4:	ee07 3a90 	vmov	s15, r3
 80091e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80091f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009200:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009208:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800920c:	e043      	b.n	8009296 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	ee07 3a90 	vmov	s15, r3
 8009214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009218:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800921c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009220:	4b47      	ldr	r3, [pc, #284]	; (8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009228:	ee07 3a90 	vmov	s15, r3
 800922c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009230:	ed97 6a03 	vldr	s12, [r7, #12]
 8009234:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800923c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800924c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009250:	e021      	b.n	8009296 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	ee07 3a90 	vmov	s15, r3
 8009258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800934c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009264:	4b36      	ldr	r3, [pc, #216]	; (8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800926c:	ee07 3a90 	vmov	s15, r3
 8009270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009274:	ed97 6a03 	vldr	s12, [r7, #12]
 8009278:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009348 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800927c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800928c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009290:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009294:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009296:	4b2a      	ldr	r3, [pc, #168]	; (8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929a:	0a5b      	lsrs	r3, r3, #9
 800929c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092a0:	ee07 3a90 	vmov	s15, r3
 80092a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80092b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092bc:	ee17 2a90 	vmov	r2, s15
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80092c4:	4b1e      	ldr	r3, [pc, #120]	; (8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c8:	0c1b      	lsrs	r3, r3, #16
 80092ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ce:	ee07 3a90 	vmov	s15, r3
 80092d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092de:	edd7 6a07 	vldr	s13, [r7, #28]
 80092e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ea:	ee17 2a90 	vmov	r2, s15
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80092f2:	4b13      	ldr	r3, [pc, #76]	; (8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f6:	0e1b      	lsrs	r3, r3, #24
 80092f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092fc:	ee07 3a90 	vmov	s15, r3
 8009300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009308:	ee37 7a87 	vadd.f32	s14, s15, s14
 800930c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009318:	ee17 2a90 	vmov	r2, s15
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009320:	e008      	b.n	8009334 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	609a      	str	r2, [r3, #8]
}
 8009334:	bf00      	nop
 8009336:	3724      	adds	r7, #36	; 0x24
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	58024400 	.word	0x58024400
 8009344:	03d09000 	.word	0x03d09000
 8009348:	46000000 	.word	0x46000000
 800934c:	4c742400 	.word	0x4c742400
 8009350:	4a742400 	.word	0x4a742400
 8009354:	4bb71b00 	.word	0x4bb71b00

08009358 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009366:	4b53      	ldr	r3, [pc, #332]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 8009368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936a:	f003 0303 	and.w	r3, r3, #3
 800936e:	2b03      	cmp	r3, #3
 8009370:	d101      	bne.n	8009376 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e099      	b.n	80094aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009376:	4b4f      	ldr	r3, [pc, #316]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a4e      	ldr	r2, [pc, #312]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 800937c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009382:	f7f9 fe77 	bl	8003074 <HAL_GetTick>
 8009386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009388:	e008      	b.n	800939c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800938a:	f7f9 fe73 	bl	8003074 <HAL_GetTick>
 800938e:	4602      	mov	r2, r0
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	2b02      	cmp	r3, #2
 8009396:	d901      	bls.n	800939c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009398:	2303      	movs	r3, #3
 800939a:	e086      	b.n	80094aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800939c:	4b45      	ldr	r3, [pc, #276]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1f0      	bne.n	800938a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80093a8:	4b42      	ldr	r3, [pc, #264]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 80093aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	031b      	lsls	r3, r3, #12
 80093b6:	493f      	ldr	r1, [pc, #252]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 80093b8:	4313      	orrs	r3, r2
 80093ba:	628b      	str	r3, [r1, #40]	; 0x28
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	3b01      	subs	r3, #1
 80093c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	3b01      	subs	r3, #1
 80093cc:	025b      	lsls	r3, r3, #9
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	431a      	orrs	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	3b01      	subs	r3, #1
 80093d8:	041b      	lsls	r3, r3, #16
 80093da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80093de:	431a      	orrs	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	061b      	lsls	r3, r3, #24
 80093e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80093ec:	4931      	ldr	r1, [pc, #196]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 80093ee:	4313      	orrs	r3, r2
 80093f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80093f2:	4b30      	ldr	r3, [pc, #192]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 80093f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	492d      	ldr	r1, [pc, #180]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 8009400:	4313      	orrs	r3, r2
 8009402:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009404:	4b2b      	ldr	r3, [pc, #172]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 8009406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009408:	f023 0220 	bic.w	r2, r3, #32
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	4928      	ldr	r1, [pc, #160]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 8009412:	4313      	orrs	r3, r2
 8009414:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009416:	4b27      	ldr	r3, [pc, #156]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 8009418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941a:	4a26      	ldr	r2, [pc, #152]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 800941c:	f023 0310 	bic.w	r3, r3, #16
 8009420:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009422:	4b24      	ldr	r3, [pc, #144]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 8009424:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009426:	4b24      	ldr	r3, [pc, #144]	; (80094b8 <RCCEx_PLL2_Config+0x160>)
 8009428:	4013      	ands	r3, r2
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	69d2      	ldr	r2, [r2, #28]
 800942e:	00d2      	lsls	r2, r2, #3
 8009430:	4920      	ldr	r1, [pc, #128]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 8009432:	4313      	orrs	r3, r2
 8009434:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009436:	4b1f      	ldr	r3, [pc, #124]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 8009438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943a:	4a1e      	ldr	r2, [pc, #120]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 800943c:	f043 0310 	orr.w	r3, r3, #16
 8009440:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d106      	bne.n	8009456 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009448:	4b1a      	ldr	r3, [pc, #104]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 800944a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944c:	4a19      	ldr	r2, [pc, #100]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 800944e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009452:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009454:	e00f      	b.n	8009476 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d106      	bne.n	800946a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800945c:	4b15      	ldr	r3, [pc, #84]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 800945e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009460:	4a14      	ldr	r2, [pc, #80]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 8009462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009466:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009468:	e005      	b.n	8009476 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800946a:	4b12      	ldr	r3, [pc, #72]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 800946c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946e:	4a11      	ldr	r2, [pc, #68]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 8009470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009474:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009476:	4b0f      	ldr	r3, [pc, #60]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a0e      	ldr	r2, [pc, #56]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 800947c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009482:	f7f9 fdf7 	bl	8003074 <HAL_GetTick>
 8009486:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009488:	e008      	b.n	800949c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800948a:	f7f9 fdf3 	bl	8003074 <HAL_GetTick>
 800948e:	4602      	mov	r2, r0
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	2b02      	cmp	r3, #2
 8009496:	d901      	bls.n	800949c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009498:	2303      	movs	r3, #3
 800949a:	e006      	b.n	80094aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800949c:	4b05      	ldr	r3, [pc, #20]	; (80094b4 <RCCEx_PLL2_Config+0x15c>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d0f0      	beq.n	800948a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	58024400 	.word	0x58024400
 80094b8:	ffff0007 	.word	0xffff0007

080094bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80094ca:	4b53      	ldr	r3, [pc, #332]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 80094cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ce:	f003 0303 	and.w	r3, r3, #3
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d101      	bne.n	80094da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e099      	b.n	800960e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80094da:	4b4f      	ldr	r3, [pc, #316]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a4e      	ldr	r2, [pc, #312]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 80094e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094e6:	f7f9 fdc5 	bl	8003074 <HAL_GetTick>
 80094ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80094ec:	e008      	b.n	8009500 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80094ee:	f7f9 fdc1 	bl	8003074 <HAL_GetTick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d901      	bls.n	8009500 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	e086      	b.n	800960e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009500:	4b45      	ldr	r3, [pc, #276]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1f0      	bne.n	80094ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800950c:	4b42      	ldr	r3, [pc, #264]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 800950e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009510:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	051b      	lsls	r3, r3, #20
 800951a:	493f      	ldr	r1, [pc, #252]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 800951c:	4313      	orrs	r3, r2
 800951e:	628b      	str	r3, [r1, #40]	; 0x28
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	3b01      	subs	r3, #1
 8009526:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	3b01      	subs	r3, #1
 8009530:	025b      	lsls	r3, r3, #9
 8009532:	b29b      	uxth	r3, r3
 8009534:	431a      	orrs	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	3b01      	subs	r3, #1
 800953c:	041b      	lsls	r3, r3, #16
 800953e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009542:	431a      	orrs	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	3b01      	subs	r3, #1
 800954a:	061b      	lsls	r3, r3, #24
 800954c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009550:	4931      	ldr	r1, [pc, #196]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 8009552:	4313      	orrs	r3, r2
 8009554:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009556:	4b30      	ldr	r3, [pc, #192]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 8009558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	492d      	ldr	r1, [pc, #180]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 8009564:	4313      	orrs	r3, r2
 8009566:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009568:	4b2b      	ldr	r3, [pc, #172]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 800956a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	4928      	ldr	r1, [pc, #160]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 8009576:	4313      	orrs	r3, r2
 8009578:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800957a:	4b27      	ldr	r3, [pc, #156]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 800957c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957e:	4a26      	ldr	r2, [pc, #152]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 8009580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009584:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009586:	4b24      	ldr	r3, [pc, #144]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 8009588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800958a:	4b24      	ldr	r3, [pc, #144]	; (800961c <RCCEx_PLL3_Config+0x160>)
 800958c:	4013      	ands	r3, r2
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	69d2      	ldr	r2, [r2, #28]
 8009592:	00d2      	lsls	r2, r2, #3
 8009594:	4920      	ldr	r1, [pc, #128]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 8009596:	4313      	orrs	r3, r2
 8009598:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800959a:	4b1f      	ldr	r3, [pc, #124]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 800959c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959e:	4a1e      	ldr	r2, [pc, #120]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 80095a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d106      	bne.n	80095ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80095ac:	4b1a      	ldr	r3, [pc, #104]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 80095ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b0:	4a19      	ldr	r2, [pc, #100]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 80095b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80095b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095b8:	e00f      	b.n	80095da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d106      	bne.n	80095ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80095c0:	4b15      	ldr	r3, [pc, #84]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 80095c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c4:	4a14      	ldr	r2, [pc, #80]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 80095c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80095ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095cc:	e005      	b.n	80095da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80095ce:	4b12      	ldr	r3, [pc, #72]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 80095d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d2:	4a11      	ldr	r2, [pc, #68]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 80095d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80095da:	4b0f      	ldr	r3, [pc, #60]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a0e      	ldr	r2, [pc, #56]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 80095e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095e6:	f7f9 fd45 	bl	8003074 <HAL_GetTick>
 80095ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80095ec:	e008      	b.n	8009600 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80095ee:	f7f9 fd41 	bl	8003074 <HAL_GetTick>
 80095f2:	4602      	mov	r2, r0
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d901      	bls.n	8009600 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e006      	b.n	800960e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009600:	4b05      	ldr	r3, [pc, #20]	; (8009618 <RCCEx_PLL3_Config+0x15c>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d0f0      	beq.n	80095ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800960c:	7bfb      	ldrb	r3, [r7, #15]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	58024400 	.word	0x58024400
 800961c:	ffff0007 	.word	0xffff0007

08009620 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b08a      	sub	sp, #40	; 0x28
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e075      	b.n	800971e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	d105      	bne.n	800964a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7f8 fd9d 	bl	8002184 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2204      	movs	r2, #4
 800964e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f868 	bl	8009728 <HAL_SD_InitCard>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d001      	beq.n	8009662 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	e05d      	b.n	800971e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009662:	f107 0308 	add.w	r3, r7, #8
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 fda9 	bl	800a1c0 <HAL_SD_GetCardStatus>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	e052      	b.n	800971e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009678:	7e3b      	ldrb	r3, [r7, #24]
 800967a:	b2db      	uxtb	r3, r3
 800967c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800967e:	7e7b      	ldrb	r3, [r7, #25]
 8009680:	b2db      	uxtb	r3, r3
 8009682:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009688:	2b01      	cmp	r3, #1
 800968a:	d10a      	bne.n	80096a2 <HAL_SD_Init+0x82>
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	2b00      	cmp	r3, #0
 8009690:	d102      	bne.n	8009698 <HAL_SD_Init+0x78>
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d004      	beq.n	80096a2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800969e:	659a      	str	r2, [r3, #88]	; 0x58
 80096a0:	e00b      	b.n	80096ba <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d104      	bne.n	80096b4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096b0:	659a      	str	r2, [r3, #88]	; 0x58
 80096b2:	e002      	b.n	80096ba <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	4619      	mov	r1, r3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fe67 	bl	800a394 <HAL_SD_ConfigWideBusOperation>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d001      	beq.n	80096d0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e026      	b.n	800971e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80096d0:	f7f9 fcd0 	bl	8003074 <HAL_GetTick>
 80096d4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80096d6:	e011      	b.n	80096fc <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80096d8:	f7f9 fccc 	bl	8003074 <HAL_GetTick>
 80096dc:	4602      	mov	r2, r0
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e6:	d109      	bne.n	80096fc <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80096ee:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e010      	b.n	800971e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 ff5b 	bl	800a5b8 <HAL_SD_GetCardState>
 8009702:	4603      	mov	r3, r0
 8009704:	2b04      	cmp	r3, #4
 8009706:	d1e7      	bne.n	80096d8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3728      	adds	r7, #40	; 0x28
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
	...

08009728 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009728:	b590      	push	{r4, r7, lr}
 800972a:	b08d      	sub	sp, #52	; 0x34
 800972c:	af02      	add	r7, sp, #8
 800972e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8009730:	2300      	movs	r3, #0
 8009732:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009734:	2300      	movs	r3, #0
 8009736:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009738:	2300      	movs	r3, #0
 800973a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800973c:	2300      	movs	r3, #0
 800973e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009740:	2300      	movs	r3, #0
 8009742:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009744:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009748:	f7fe fdc8 	bl	80082dc <HAL_RCCEx_GetPeriphCLKFreq>
 800974c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009750:	2b00      	cmp	r3, #0
 8009752:	d109      	bne.n	8009768 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009762:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e06a      	b.n	800983e <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	0a1b      	lsrs	r3, r3, #8
 800976c:	4a36      	ldr	r2, [pc, #216]	; (8009848 <HAL_SD_InitCard+0x120>)
 800976e:	fba2 2303 	umull	r2, r3, r2, r3
 8009772:	091b      	lsrs	r3, r3, #4
 8009774:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681c      	ldr	r4, [r3, #0]
 800977a:	466a      	mov	r2, sp
 800977c:	f107 0318 	add.w	r3, r7, #24
 8009780:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009784:	e882 0003 	stmia.w	r2, {r0, r1}
 8009788:	f107 030c 	add.w	r3, r7, #12
 800978c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800978e:	4620      	mov	r0, r4
 8009790:	f006 ff32 	bl	80105f8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4618      	mov	r0, r3
 800979a:	f006 ff75 	bl	8010688 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80097aa:	4a28      	ldr	r2, [pc, #160]	; (800984c <HAL_SD_InitCard+0x124>)
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b2:	3301      	adds	r3, #1
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7f9 fc69 	bl	800308c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 ffea 	bl	800a794 <SD_PowerON>
 80097c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00b      	beq.n	80097e0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	431a      	orrs	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e02e      	b.n	800983e <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 ff09 	bl	800a5f8 <SD_InitCard>
 80097e6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80097e8:	6a3b      	ldr	r3, [r7, #32]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00b      	beq.n	8009806 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097fa:	6a3b      	ldr	r3, [r7, #32]
 80097fc:	431a      	orrs	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e01b      	b.n	800983e <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800980e:	4618      	mov	r0, r3
 8009810:	f006 ffd0 	bl	80107b4 <SDMMC_CmdBlockLength>
 8009814:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009816:	6a3b      	ldr	r3, [r7, #32]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00f      	beq.n	800983c <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a0b      	ldr	r2, [pc, #44]	; (8009850 <HAL_SD_InitCard+0x128>)
 8009822:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	431a      	orrs	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e000      	b.n	800983e <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	372c      	adds	r7, #44	; 0x2c
 8009842:	46bd      	mov	sp, r7
 8009844:	bd90      	pop	{r4, r7, pc}
 8009846:	bf00      	nop
 8009848:	014f8b59 	.word	0x014f8b59
 800984c:	00012110 	.word	0x00012110
 8009850:	1fe00fff 	.word	0x1fe00fff

08009854 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b08c      	sub	sp, #48	; 0x30
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]
 8009860:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d107      	bne.n	800987c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009870:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e08d      	b.n	8009998 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b01      	cmp	r3, #1
 8009886:	f040 8086 	bne.w	8009996 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	441a      	add	r2, r3
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800989a:	429a      	cmp	r2, r3
 800989c:	d907      	bls.n	80098ae <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e074      	b.n	8009998 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2203      	movs	r2, #3
 80098b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2200      	movs	r2, #0
 80098bc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	025a      	lsls	r2, r3, #9
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d002      	beq.n	80098da <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80098d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d6:	025b      	lsls	r3, r3, #9
 80098d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80098da:	f04f 33ff 	mov.w	r3, #4294967295
 80098de:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	025b      	lsls	r3, r3, #9
 80098e4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80098e6:	2390      	movs	r3, #144	; 0x90
 80098e8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80098ea:	2302      	movs	r3, #2
 80098ec:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80098f2:	2300      	movs	r3, #0
 80098f4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f107 0210 	add.w	r2, r7, #16
 80098fe:	4611      	mov	r1, r2
 8009900:	4618      	mov	r0, r3
 8009902:	f006 ff2b 	bl	801075c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68da      	ldr	r2, [r3, #12]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009914:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2201      	movs	r2, #1
 8009924:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d90a      	bls.n	8009942 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2282      	movs	r2, #130	; 0x82
 8009930:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009938:	4618      	mov	r0, r3
 800993a:	f006 ff81 	bl	8010840 <SDMMC_CmdReadMultiBlock>
 800993e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009940:	e009      	b.n	8009956 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2281      	movs	r2, #129	; 0x81
 8009946:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800994e:	4618      	mov	r0, r3
 8009950:	f006 ff53 	bl	80107fa <SDMMC_CmdReadSingleBlock>
 8009954:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d012      	beq.n	8009982 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a0f      	ldr	r2, [pc, #60]	; (80099a0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009962:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996a:	431a      	orrs	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e00a      	b.n	8009998 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009990:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	e000      	b.n	8009998 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009996:	2302      	movs	r3, #2
  }
}
 8009998:	4618      	mov	r0, r3
 800999a:	3730      	adds	r7, #48	; 0x30
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	1fe00fff 	.word	0x1fe00fff

080099a4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b08c      	sub	sp, #48	; 0x30
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
 80099b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d107      	bne.n	80099cc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e08d      	b.n	8009ae8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	f040 8086 	bne.w	8009ae6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80099e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	441a      	add	r2, r3
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d907      	bls.n	80099fe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e074      	b.n	8009ae8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2203      	movs	r2, #3
 8009a02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	025a      	lsls	r2, r3, #9
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d002      	beq.n	8009a2a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	025b      	lsls	r3, r3, #9
 8009a28:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a2e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	025b      	lsls	r3, r3, #9
 8009a34:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009a36:	2390      	movs	r3, #144	; 0x90
 8009a38:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009a42:	2300      	movs	r3, #0
 8009a44:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f107 0210 	add.w	r2, r7, #16
 8009a4e:	4611      	mov	r1, r2
 8009a50:	4618      	mov	r0, r3
 8009a52:	f006 fe83 	bl	801075c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68da      	ldr	r2, [r3, #12]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a64:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2201      	movs	r2, #1
 8009a74:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d90a      	bls.n	8009a92 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	22a0      	movs	r2, #160	; 0xa0
 8009a80:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f006 ff1f 	bl	80108cc <SDMMC_CmdWriteMultiBlock>
 8009a8e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009a90:	e009      	b.n	8009aa6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2290      	movs	r2, #144	; 0x90
 8009a96:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f006 fef1 	bl	8010886 <SDMMC_CmdWriteSingleBlock>
 8009aa4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d012      	beq.n	8009ad2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a0f      	ldr	r2, [pc, #60]	; (8009af0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8009ab2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aba:	431a      	orrs	r2, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e00a      	b.n	8009ae8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8009ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	e000      	b.n	8009ae8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009ae6:	2302      	movs	r3, #2
  }
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3730      	adds	r7, #48	; 0x30
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	1fe00fff 	.word	0x1fe00fff

08009af4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b00:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d008      	beq.n	8009b22 <HAL_SD_IRQHandler+0x2e>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f003 0308 	and.w	r3, r3, #8
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f001 f926 	bl	800ad6c <SD_Read_IT>
 8009b20:	e19a      	b.n	8009e58 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 80ac 	beq.w	8009c8a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b3a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	4b59      	ldr	r3, [pc, #356]	; (8009cac <HAL_SD_IRQHandler+0x1b8>)
 8009b48:	400b      	ands	r3, r1
 8009b4a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009b5a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68da      	ldr	r2, [r3, #12]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b6a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f003 0308 	and.w	r3, r3, #8
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d038      	beq.n	8009be8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f003 0302 	and.w	r3, r3, #2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d104      	bne.n	8009b8a <HAL_SD_IRQHandler+0x96>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d011      	beq.n	8009bae <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f006 fec0 	bl	8010914 <SDMMC_CmdStopTransfer>
 8009b94:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d008      	beq.n	8009bae <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	431a      	orrs	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f95b 	bl	8009e64 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a3f      	ldr	r2, [pc, #252]	; (8009cb0 <HAL_SD_IRQHandler+0x1bc>)
 8009bb4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d104      	bne.n	8009bd8 <HAL_SD_IRQHandler+0xe4>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f003 0302 	and.w	r3, r3, #2
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d003      	beq.n	8009be0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f007 fb6b 	bl	80112b4 <HAL_SD_RxCpltCallback>
 8009bde:	e13b      	b.n	8009e58 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f007 fb5d 	bl	80112a0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009be6:	e137      	b.n	8009e58 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f000 8132 	beq.w	8009e58 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2200      	movs	r2, #0
 8009c02:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f003 0302 	and.w	r3, r3, #2
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d104      	bne.n	8009c20 <HAL_SD_IRQHandler+0x12c>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f003 0320 	and.w	r3, r3, #32
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d011      	beq.n	8009c44 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f006 fe75 	bl	8010914 <SDMMC_CmdStopTransfer>
 8009c2a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d008      	beq.n	8009c44 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	431a      	orrs	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f910 	bl	8009e64 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f003 0310 	and.w	r3, r3, #16
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d104      	bne.n	8009c66 <HAL_SD_IRQHandler+0x172>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f003 0320 	and.w	r3, r3, #32
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f007 fb1a 	bl	80112a0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f003 0301 	and.w	r3, r3, #1
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d105      	bne.n	8009c82 <HAL_SD_IRQHandler+0x18e>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f003 0302 	and.w	r3, r3, #2
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f000 80eb 	beq.w	8009e58 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f007 fb16 	bl	80112b4 <HAL_SD_RxCpltCallback>
}
 8009c88:	e0e6      	b.n	8009e58 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00d      	beq.n	8009cb4 <HAL_SD_IRQHandler+0x1c0>
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f003 0308 	and.w	r3, r3, #8
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d008      	beq.n	8009cb4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f001 f8a8 	bl	800adf8 <SD_Write_IT>
 8009ca8:	e0d6      	b.n	8009e58 <HAL_SD_IRQHandler+0x364>
 8009caa:	bf00      	nop
 8009cac:	ffff3ec5 	.word	0xffff3ec5
 8009cb0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cba:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f000 809d 	beq.w	8009dfe <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cca:	f003 0302 	and.w	r3, r3, #2
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d005      	beq.n	8009cde <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd6:	f043 0202 	orr.w	r2, r3, #2
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce4:	f003 0308 	and.w	r3, r3, #8
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d005      	beq.n	8009cf8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf0:	f043 0208 	orr.w	r2, r3, #8
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfe:	f003 0320 	and.w	r3, r3, #32
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d005      	beq.n	8009d12 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d0a:	f043 0220 	orr.w	r2, r3, #32
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d18:	f003 0310 	and.w	r3, r3, #16
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d005      	beq.n	8009d2c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d24:	f043 0210 	orr.w	r2, r3, #16
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a4b      	ldr	r2, [pc, #300]	; (8009e60 <HAL_SD_IRQHandler+0x36c>)
 8009d32:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009d42:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68da      	ldr	r2, [r3, #12]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d52:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d62:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68da      	ldr	r2, [r3, #12]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d72:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f006 fdcb 	bl	8010914 <SDMMC_CmdStopTransfer>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d84:	431a      	orrs	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68da      	ldr	r2, [r3, #12]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d98:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009da2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f003 0308 	and.w	r3, r3, #8
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00a      	beq.n	8009dc4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f851 	bl	8009e64 <HAL_SD_ErrorCallback>
}
 8009dc2:	e049      	b.n	8009e58 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d044      	beq.n	8009e58 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d040      	beq.n	8009e58 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009de4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2200      	movs	r2, #0
 8009dec:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f834 	bl	8009e64 <HAL_SD_ErrorCallback>
}
 8009dfc:	e02c      	b.n	8009e58 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d025      	beq.n	8009e58 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e14:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e1c:	f003 0304 	and.w	r3, r3, #4
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10c      	bne.n	8009e3e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f003 0320 	and.w	r3, r3, #32
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f001 f84a 	bl	800aec8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009e34:	e010      	b.n	8009e58 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f001 f832 	bl	800aea0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8009e3c:	e00c      	b.n	8009e58 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f003 0320 	and.w	r3, r3, #32
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d003      	beq.n	8009e50 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 f833 	bl	800aeb4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8009e4e:	e003      	b.n	8009e58 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f001 f81b 	bl	800ae8c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009e56:	e7ff      	b.n	8009e58 <HAL_SD_IRQHandler+0x364>
 8009e58:	bf00      	nop
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	18000f3a 	.word	0x18000f3a

08009e64 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e86:	0f9b      	lsrs	r3, r3, #30
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e92:	0e9b      	lsrs	r3, r3, #26
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	f003 030f 	and.w	r3, r3, #15
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ea4:	0e1b      	lsrs	r3, r3, #24
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	f003 0303 	and.w	r3, r3, #3
 8009eac:	b2da      	uxtb	r2, r3
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eb6:	0c1b      	lsrs	r3, r3, #16
 8009eb8:	b2da      	uxtb	r2, r3
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ec2:	0a1b      	lsrs	r3, r3, #8
 8009ec4:	b2da      	uxtb	r2, r3
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ed8:	0d1b      	lsrs	r3, r3, #20
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ee4:	0c1b      	lsrs	r3, r3, #16
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	f003 030f 	and.w	r3, r3, #15
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ef6:	0bdb      	lsrs	r3, r3, #15
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	f003 0301 	and.w	r3, r3, #1
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f08:	0b9b      	lsrs	r3, r3, #14
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	f003 0301 	and.w	r3, r3, #1
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f1a:	0b5b      	lsrs	r3, r3, #13
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f2c:	0b1b      	lsrs	r3, r3, #12
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d163      	bne.n	800a010 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f4c:	009a      	lsls	r2, r3, #2
 8009f4e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009f52:	4013      	ands	r3, r2
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009f58:	0f92      	lsrs	r2, r2, #30
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f64:	0edb      	lsrs	r3, r3, #27
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	f003 0307 	and.w	r3, r3, #7
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f76:	0e1b      	lsrs	r3, r3, #24
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	f003 0307 	and.w	r3, r3, #7
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f88:	0d5b      	lsrs	r3, r3, #21
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	f003 0307 	and.w	r3, r3, #7
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f9a:	0c9b      	lsrs	r3, r3, #18
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	f003 0307 	and.w	r3, r3, #7
 8009fa2:	b2da      	uxtb	r2, r3
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fac:	0bdb      	lsrs	r3, r3, #15
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	f003 0307 	and.w	r3, r3, #7
 8009fb4:	b2da      	uxtb	r2, r3
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	1c5a      	adds	r2, r3, #1
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	7e1b      	ldrb	r3, [r3, #24]
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	f003 0307 	and.w	r3, r3, #7
 8009fce:	3302      	adds	r3, #2
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009fda:	fb03 f202 	mul.w	r2, r3, r2
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	7a1b      	ldrb	r3, [r3, #8]
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	f003 030f 	and.w	r3, r3, #15
 8009fec:	2201      	movs	r2, #1
 8009fee:	409a      	lsls	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009ffc:	0a52      	lsrs	r2, r2, #9
 8009ffe:	fb03 f202 	mul.w	r2, r3, r2
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a00c:	655a      	str	r2, [r3, #84]	; 0x54
 800a00e:	e031      	b.n	800a074 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a014:	2b01      	cmp	r3, #1
 800a016:	d11d      	bne.n	800a054 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a01c:	041b      	lsls	r3, r3, #16
 800a01e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a026:	0c1b      	lsrs	r3, r3, #16
 800a028:	431a      	orrs	r2, r3
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	3301      	adds	r3, #1
 800a034:	029a      	lsls	r2, r3, #10
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a048:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	655a      	str	r2, [r3, #84]	; 0x54
 800a052:	e00f      	b.n	800a074 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a58      	ldr	r2, [pc, #352]	; (800a1bc <HAL_SD_GetCardCSD+0x344>)
 800a05a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a060:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e09d      	b.n	800a1b0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a078:	0b9b      	lsrs	r3, r3, #14
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	f003 0301 	and.w	r3, r3, #1
 800a080:	b2da      	uxtb	r2, r3
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a08a:	09db      	lsrs	r3, r3, #7
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a092:	b2da      	uxtb	r2, r3
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0a2:	b2da      	uxtb	r2, r3
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0ac:	0fdb      	lsrs	r3, r3, #31
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0b8:	0f5b      	lsrs	r3, r3, #29
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	f003 0303 	and.w	r3, r3, #3
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0ca:	0e9b      	lsrs	r3, r3, #26
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	f003 0307 	and.w	r3, r3, #7
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0dc:	0d9b      	lsrs	r3, r3, #22
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	f003 030f 	and.w	r3, r3, #15
 800a0e4:	b2da      	uxtb	r2, r3
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0ee:	0d5b      	lsrs	r3, r3, #21
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	f003 0301 	and.w	r3, r3, #1
 800a0f6:	b2da      	uxtb	r2, r3
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a10a:	0c1b      	lsrs	r3, r3, #16
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	f003 0301 	and.w	r3, r3, #1
 800a112:	b2da      	uxtb	r2, r3
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a11e:	0bdb      	lsrs	r3, r3, #15
 800a120:	b2db      	uxtb	r3, r3
 800a122:	f003 0301 	and.w	r3, r3, #1
 800a126:	b2da      	uxtb	r2, r3
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a132:	0b9b      	lsrs	r3, r3, #14
 800a134:	b2db      	uxtb	r3, r3
 800a136:	f003 0301 	and.w	r3, r3, #1
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a146:	0b5b      	lsrs	r3, r3, #13
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a15a:	0b1b      	lsrs	r3, r3, #12
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	f003 0301 	and.w	r3, r3, #1
 800a162:	b2da      	uxtb	r2, r3
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a16e:	0a9b      	lsrs	r3, r3, #10
 800a170:	b2db      	uxtb	r3, r3
 800a172:	f003 0303 	and.w	r3, r3, #3
 800a176:	b2da      	uxtb	r2, r3
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a182:	0a1b      	lsrs	r3, r3, #8
 800a184:	b2db      	uxtb	r3, r3
 800a186:	f003 0303 	and.w	r3, r3, #3
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a196:	085b      	lsrs	r3, r3, #1
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a19e:	b2da      	uxtb	r2, r3
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr
 800a1bc:	1fe00fff 	.word	0x1fe00fff

0800a1c0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b094      	sub	sp, #80	; 0x50
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	2b03      	cmp	r3, #3
 800a1da:	d101      	bne.n	800a1e0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e0a7      	b.n	800a330 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a1e0:	f107 0308 	add.w	r3, r7, #8
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 fb62 	bl	800a8b0 <SD_SendSDStatus>
 800a1ec:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a1ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d011      	beq.n	800a218 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a4f      	ldr	r2, [pc, #316]	; (800a338 <HAL_SD_GetCardStatus+0x178>)
 800a1fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a202:	431a      	orrs	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a216:	e070      	b.n	800a2fa <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	099b      	lsrs	r3, r3, #6
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	f003 0303 	and.w	r3, r3, #3
 800a222:	b2da      	uxtb	r2, r3
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	095b      	lsrs	r3, r3, #5
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	f003 0301 	and.w	r3, r3, #1
 800a232:	b2da      	uxtb	r2, r3
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	0a1b      	lsrs	r3, r3, #8
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a242:	b29a      	uxth	r2, r3
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	0e1b      	lsrs	r3, r3, #24
 800a248:	b29b      	uxth	r3, r3
 800a24a:	4313      	orrs	r3, r2
 800a24c:	b29a      	uxth	r2, r3
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	061a      	lsls	r2, r3, #24
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	021b      	lsls	r3, r3, #8
 800a25a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a25e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	0a1b      	lsrs	r3, r3, #8
 800a264:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a268:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	0e1b      	lsrs	r3, r3, #24
 800a26e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	b2da      	uxtb	r2, r3
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	0a1b      	lsrs	r3, r3, #8
 800a280:	b2da      	uxtb	r2, r3
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	0d1b      	lsrs	r3, r3, #20
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	f003 030f 	and.w	r3, r3, #15
 800a290:	b2da      	uxtb	r2, r3
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	0c1b      	lsrs	r3, r3, #16
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	0a9b      	lsrs	r3, r3, #10
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	0a1b      	lsrs	r3, r3, #8
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	f003 0303 	and.w	r3, r3, #3
 800a2cc:	b2da      	uxtb	r2, r3
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	091b      	lsrs	r3, r3, #4
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	f003 030f 	and.w	r3, r3, #15
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	f003 030f 	and.w	r3, r3, #15
 800a2ea:	b2da      	uxtb	r2, r3
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	0e1b      	lsrs	r3, r3, #24
 800a2f4:	b2da      	uxtb	r2, r3
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a302:	4618      	mov	r0, r3
 800a304:	f006 fa56 	bl	80107b4 <SDMMC_CmdBlockLength>
 800a308:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a30a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00d      	beq.n	800a32c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a08      	ldr	r2, [pc, #32]	; (800a338 <HAL_SD_GetCardStatus+0x178>)
 800a316:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a31c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800a32c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a330:	4618      	mov	r0, r3
 800a332:	3750      	adds	r7, #80	; 0x50
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	1fe00fff 	.word	0x1fe00fff

0800a33c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a394:	b590      	push	{r4, r7, lr}
 800a396:	b08d      	sub	sp, #52	; 0x34
 800a398:	af02      	add	r7, sp, #8
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2203      	movs	r2, #3
 800a3ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	d02e      	beq.n	800a416 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3be:	d106      	bne.n	800a3ce <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	635a      	str	r2, [r3, #52]	; 0x34
 800a3cc:	e029      	b.n	800a422 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3d4:	d10a      	bne.n	800a3ec <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fb62 	bl	800aaa0 <SD_WideBus_Enable>
 800a3dc:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	431a      	orrs	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	635a      	str	r2, [r3, #52]	; 0x34
 800a3ea:	e01a      	b.n	800a422 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10a      	bne.n	800a408 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fb9f 	bl	800ab36 <SD_WideBus_Disable>
 800a3f8:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	431a      	orrs	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	635a      	str	r2, [r3, #52]	; 0x34
 800a406:	e00c      	b.n	800a422 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a40c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	635a      	str	r2, [r3, #52]	; 0x34
 800a414:	e005      	b.n	800a422 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a41a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a426:	2b00      	cmp	r3, #0
 800a428:	d007      	beq.n	800a43a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a5e      	ldr	r2, [pc, #376]	; (800a5a8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a430:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a438:	e094      	b.n	800a564 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a43a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a43e:	f7fd ff4d 	bl	80082dc <HAL_RCCEx_GetPeriphCLKFreq>
 800a442:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800a444:	6a3b      	ldr	r3, [r7, #32]
 800a446:	2b00      	cmp	r3, #0
 800a448:	f000 8083 	beq.w	800a552 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	695a      	ldr	r2, [r3, #20]
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	4950      	ldr	r1, [pc, #320]	; (800a5ac <HAL_SD_ConfigWideBusOperation+0x218>)
 800a46a:	fba1 1303 	umull	r1, r3, r1, r3
 800a46e:	0e1b      	lsrs	r3, r3, #24
 800a470:	429a      	cmp	r2, r3
 800a472:	d303      	bcc.n	800a47c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	695b      	ldr	r3, [r3, #20]
 800a478:	61bb      	str	r3, [r7, #24]
 800a47a:	e05a      	b.n	800a532 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a484:	d103      	bne.n	800a48e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	61bb      	str	r3, [r7, #24]
 800a48c:	e051      	b.n	800a532 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a496:	d126      	bne.n	800a4e6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	695b      	ldr	r3, [r3, #20]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10e      	bne.n	800a4be <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	4a43      	ldr	r2, [pc, #268]	; (800a5b0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d906      	bls.n	800a4b6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	4a40      	ldr	r2, [pc, #256]	; (800a5ac <HAL_SD_ConfigWideBusOperation+0x218>)
 800a4ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b0:	0e5b      	lsrs	r3, r3, #25
 800a4b2:	61bb      	str	r3, [r7, #24]
 800a4b4:	e03d      	b.n	800a532 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	695b      	ldr	r3, [r3, #20]
 800a4ba:	61bb      	str	r3, [r7, #24]
 800a4bc:	e039      	b.n	800a532 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	695b      	ldr	r3, [r3, #20]
 800a4c2:	005b      	lsls	r3, r3, #1
 800a4c4:	6a3a      	ldr	r2, [r7, #32]
 800a4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ca:	4a39      	ldr	r2, [pc, #228]	; (800a5b0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d906      	bls.n	800a4de <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a4d0:	6a3b      	ldr	r3, [r7, #32]
 800a4d2:	4a36      	ldr	r2, [pc, #216]	; (800a5ac <HAL_SD_ConfigWideBusOperation+0x218>)
 800a4d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4d8:	0e5b      	lsrs	r3, r3, #25
 800a4da:	61bb      	str	r3, [r7, #24]
 800a4dc:	e029      	b.n	800a532 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	695b      	ldr	r3, [r3, #20]
 800a4e2:	61bb      	str	r3, [r7, #24]
 800a4e4:	e025      	b.n	800a532 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10e      	bne.n	800a50c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a4ee:	6a3b      	ldr	r3, [r7, #32]
 800a4f0:	4a30      	ldr	r2, [pc, #192]	; (800a5b4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d906      	bls.n	800a504 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a4f6:	6a3b      	ldr	r3, [r7, #32]
 800a4f8:	4a2c      	ldr	r2, [pc, #176]	; (800a5ac <HAL_SD_ConfigWideBusOperation+0x218>)
 800a4fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a4fe:	0e1b      	lsrs	r3, r3, #24
 800a500:	61bb      	str	r3, [r7, #24]
 800a502:	e016      	b.n	800a532 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	61bb      	str	r3, [r7, #24]
 800a50a:	e012      	b.n	800a532 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	695b      	ldr	r3, [r3, #20]
 800a510:	005b      	lsls	r3, r3, #1
 800a512:	6a3a      	ldr	r2, [r7, #32]
 800a514:	fbb2 f3f3 	udiv	r3, r2, r3
 800a518:	4a26      	ldr	r2, [pc, #152]	; (800a5b4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d906      	bls.n	800a52c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	4a22      	ldr	r2, [pc, #136]	; (800a5ac <HAL_SD_ConfigWideBusOperation+0x218>)
 800a522:	fba2 2303 	umull	r2, r3, r2, r3
 800a526:	0e1b      	lsrs	r3, r3, #24
 800a528:	61bb      	str	r3, [r7, #24]
 800a52a:	e002      	b.n	800a532 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681c      	ldr	r4, [r3, #0]
 800a536:	466a      	mov	r2, sp
 800a538:	f107 0314 	add.w	r3, r7, #20
 800a53c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a540:	e882 0003 	stmia.w	r2, {r0, r1}
 800a544:	f107 0308 	add.w	r3, r7, #8
 800a548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a54a:	4620      	mov	r0, r4
 800a54c:	f006 f854 	bl	80105f8 <SDMMC_Init>
 800a550:	e008      	b.n	800a564 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a556:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a56c:	4618      	mov	r0, r3
 800a56e:	f006 f921 	bl	80107b4 <SDMMC_CmdBlockLength>
 800a572:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00c      	beq.n	800a594 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a0a      	ldr	r2, [pc, #40]	; (800a5a8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a580:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	431a      	orrs	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800a59c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	372c      	adds	r7, #44	; 0x2c
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd90      	pop	{r4, r7, pc}
 800a5a8:	1fe00fff 	.word	0x1fe00fff
 800a5ac:	55e63b89 	.word	0x55e63b89
 800a5b0:	02faf080 	.word	0x02faf080
 800a5b4:	017d7840 	.word	0x017d7840

0800a5b8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a5c4:	f107 030c 	add.w	r3, r7, #12
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fa40 	bl	800aa50 <SD_SendStatus>
 800a5d0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d005      	beq.n	800a5e4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	431a      	orrs	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	0a5b      	lsrs	r3, r3, #9
 800a5e8:	f003 030f 	and.w	r3, r3, #15
 800a5ec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a5ee:	693b      	ldr	r3, [r7, #16]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3718      	adds	r7, #24
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b090      	sub	sp, #64	; 0x40
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800a600:	2300      	movs	r3, #0
 800a602:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800a604:	f7f8 fd36 	bl	8003074 <HAL_GetTick>
 800a608:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4618      	mov	r0, r3
 800a610:	f006 f84b 	bl	80106aa <SDMMC_GetPowerState>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d102      	bne.n	800a620 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a61a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a61e:	e0b5      	b.n	800a78c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a624:	2b03      	cmp	r3, #3
 800a626:	d02e      	beq.n	800a686 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f006 fa96 	bl	8010b5e <SDMMC_CmdSendCID>
 800a632:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a636:	2b00      	cmp	r3, #0
 800a638:	d001      	beq.n	800a63e <SD_InitCard+0x46>
    {
      return errorstate;
 800a63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63c:	e0a6      	b.n	800a78c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2100      	movs	r1, #0
 800a644:	4618      	mov	r0, r3
 800a646:	f006 f876 	bl	8010736 <SDMMC_GetResponse>
 800a64a:	4602      	mov	r2, r0
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2104      	movs	r1, #4
 800a656:	4618      	mov	r0, r3
 800a658:	f006 f86d 	bl	8010736 <SDMMC_GetResponse>
 800a65c:	4602      	mov	r2, r0
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2108      	movs	r1, #8
 800a668:	4618      	mov	r0, r3
 800a66a:	f006 f864 	bl	8010736 <SDMMC_GetResponse>
 800a66e:	4602      	mov	r2, r0
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	210c      	movs	r1, #12
 800a67a:	4618      	mov	r0, r3
 800a67c:	f006 f85b 	bl	8010736 <SDMMC_GetResponse>
 800a680:	4602      	mov	r2, r0
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68a:	2b03      	cmp	r3, #3
 800a68c:	d01d      	beq.n	800a6ca <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800a68e:	e019      	b.n	800a6c4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f107 020a 	add.w	r2, r7, #10
 800a698:	4611      	mov	r1, r2
 800a69a:	4618      	mov	r0, r3
 800a69c:	f006 fa9e 	bl	8010bdc <SDMMC_CmdSetRelAdd>
 800a6a0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800a6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <SD_InitCard+0xb4>
      {
        return errorstate;
 800a6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6aa:	e06f      	b.n	800a78c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a6ac:	f7f8 fce2 	bl	8003074 <HAL_GetTick>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6b4:	1ad3      	subs	r3, r2, r3
 800a6b6:	f241 3287 	movw	r2, #4999	; 0x1387
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d902      	bls.n	800a6c4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800a6be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6c2:	e063      	b.n	800a78c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800a6c4:	897b      	ldrh	r3, [r7, #10]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d0e2      	beq.n	800a690 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	d036      	beq.n	800a740 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a6d2:	897b      	ldrh	r3, [r7, #10]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6e2:	041b      	lsls	r3, r3, #16
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	4610      	mov	r0, r2
 800a6e8:	f006 fa58 	bl	8010b9c <SDMMC_CmdSendCSD>
 800a6ec:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d001      	beq.n	800a6f8 <SD_InitCard+0x100>
    {
      return errorstate;
 800a6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f6:	e049      	b.n	800a78c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	4618      	mov	r0, r3
 800a700:	f006 f819 	bl	8010736 <SDMMC_GetResponse>
 800a704:	4602      	mov	r2, r0
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2104      	movs	r1, #4
 800a710:	4618      	mov	r0, r3
 800a712:	f006 f810 	bl	8010736 <SDMMC_GetResponse>
 800a716:	4602      	mov	r2, r0
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2108      	movs	r1, #8
 800a722:	4618      	mov	r0, r3
 800a724:	f006 f807 	bl	8010736 <SDMMC_GetResponse>
 800a728:	4602      	mov	r2, r0
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	210c      	movs	r1, #12
 800a734:	4618      	mov	r0, r3
 800a736:	f005 fffe 	bl	8010736 <SDMMC_GetResponse>
 800a73a:	4602      	mov	r2, r0
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2104      	movs	r1, #4
 800a746:	4618      	mov	r0, r3
 800a748:	f005 fff5 	bl	8010736 <SDMMC_GetResponse>
 800a74c:	4603      	mov	r3, r0
 800a74e:	0d1a      	lsrs	r2, r3, #20
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a754:	f107 030c 	add.w	r3, r7, #12
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7ff fb8c 	bl	8009e78 <HAL_SD_GetCardCSD>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d002      	beq.n	800a76c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a766:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a76a:	e00f      	b.n	800a78c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a774:	041b      	lsls	r3, r3, #16
 800a776:	4619      	mov	r1, r3
 800a778:	4610      	mov	r0, r2
 800a77a:	f006 f907 	bl	801098c <SDMMC_CmdSelDesel>
 800a77e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800a780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a782:	2b00      	cmp	r3, #0
 800a784:	d001      	beq.n	800a78a <SD_InitCard+0x192>
  {
    return errorstate;
 800a786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a788:	e000      	b.n	800a78c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3740      	adds	r7, #64	; 0x40
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b086      	sub	sp, #24
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a79c:	2300      	movs	r3, #0
 800a79e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f006 f910 	bl	80109d2 <SDMMC_CmdGoIdleState>
 800a7b2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d001      	beq.n	800a7be <SD_PowerON+0x2a>
  {
    return errorstate;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	e072      	b.n	800a8a4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f006 f923 	bl	8010a0e <SDMMC_CmdOperCond>
 800a7c8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7d0:	d10d      	bne.n	800a7ee <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f006 f8f8 	bl	80109d2 <SDMMC_CmdGoIdleState>
 800a7e2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d004      	beq.n	800a7f4 <SD_PowerON+0x60>
    {
      return errorstate;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	e05a      	b.n	800a8a4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d137      	bne.n	800a86c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2100      	movs	r1, #0
 800a802:	4618      	mov	r0, r3
 800a804:	f006 f923 	bl	8010a4e <SDMMC_CmdAppCommand>
 800a808:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d02d      	beq.n	800a86c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a810:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a814:	e046      	b.n	800a8a4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2100      	movs	r1, #0
 800a81c:	4618      	mov	r0, r3
 800a81e:	f006 f916 	bl	8010a4e <SDMMC_CmdAppCommand>
 800a822:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d001      	beq.n	800a82e <SD_PowerON+0x9a>
    {
      return errorstate;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	e03a      	b.n	800a8a4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	491e      	ldr	r1, [pc, #120]	; (800a8ac <SD_PowerON+0x118>)
 800a834:	4618      	mov	r0, r3
 800a836:	f006 f92d 	bl	8010a94 <SDMMC_CmdAppOperCommand>
 800a83a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d002      	beq.n	800a848 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a842:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a846:	e02d      	b.n	800a8a4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2100      	movs	r1, #0
 800a84e:	4618      	mov	r0, r3
 800a850:	f005 ff71 	bl	8010736 <SDMMC_GetResponse>
 800a854:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	0fdb      	lsrs	r3, r3, #31
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d101      	bne.n	800a862 <SD_PowerON+0xce>
 800a85e:	2301      	movs	r3, #1
 800a860:	e000      	b.n	800a864 <SD_PowerON+0xd0>
 800a862:	2300      	movs	r3, #0
 800a864:	613b      	str	r3, [r7, #16]

    count++;
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	3301      	adds	r3, #1
 800a86a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a872:	4293      	cmp	r3, r2
 800a874:	d802      	bhi.n	800a87c <SD_PowerON+0xe8>
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d0cc      	beq.n	800a816 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a882:	4293      	cmp	r3, r2
 800a884:	d902      	bls.n	800a88c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a886:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a88a:	e00b      	b.n	800a8a4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d002      	beq.n	800a8a2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3718      	adds	r7, #24
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	c1100000 	.word	0xc1100000

0800a8b0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b08c      	sub	sp, #48	; 0x30
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a8ba:	f7f8 fbdb 	bl	8003074 <HAL_GetTick>
 800a8be:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f005 ff33 	bl	8010736 <SDMMC_GetResponse>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8da:	d102      	bne.n	800a8e2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a8dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8e0:	e0b0      	b.n	800aa44 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2140      	movs	r1, #64	; 0x40
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f005 ff63 	bl	80107b4 <SDMMC_CmdBlockLength>
 800a8ee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a8f0:	6a3b      	ldr	r3, [r7, #32]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d005      	beq.n	800a902 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a8fe:	6a3b      	ldr	r3, [r7, #32]
 800a900:	e0a0      	b.n	800aa44 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a90a:	041b      	lsls	r3, r3, #16
 800a90c:	4619      	mov	r1, r3
 800a90e:	4610      	mov	r0, r2
 800a910:	f006 f89d 	bl	8010a4e <SDMMC_CmdAppCommand>
 800a914:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d005      	beq.n	800a928 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	e08d      	b.n	800aa44 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a928:	f04f 33ff 	mov.w	r3, #4294967295
 800a92c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a92e:	2340      	movs	r3, #64	; 0x40
 800a930:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a932:	2360      	movs	r3, #96	; 0x60
 800a934:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a936:	2302      	movs	r3, #2
 800a938:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a93e:	2301      	movs	r3, #1
 800a940:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f107 0208 	add.w	r2, r7, #8
 800a94a:	4611      	mov	r1, r2
 800a94c:	4618      	mov	r0, r3
 800a94e:	f005 ff05 	bl	801075c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4618      	mov	r0, r3
 800a958:	f006 f985 	bl	8010c66 <SDMMC_CmdStatusRegister>
 800a95c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d02b      	beq.n	800a9bc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a96c:	6a3b      	ldr	r3, [r7, #32]
 800a96e:	e069      	b.n	800aa44 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d013      	beq.n	800a9a6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800a97e:	2300      	movs	r3, #0
 800a980:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a982:	e00d      	b.n	800a9a0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4618      	mov	r0, r3
 800a98a:	f005 fe5f 	bl	801064c <SDMMC_ReadFIFO>
 800a98e:	4602      	mov	r2, r0
 800a990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a992:	601a      	str	r2, [r3, #0]
        pData++;
 800a994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a996:	3304      	adds	r3, #4
 800a998:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800a99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99c:	3301      	adds	r3, #1
 800a99e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a2:	2b07      	cmp	r3, #7
 800a9a4:	d9ee      	bls.n	800a984 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a9a6:	f7f8 fb65 	bl	8003074 <HAL_GetTick>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b4:	d102      	bne.n	800a9bc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a9b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a9ba:	e043      	b.n	800aa44 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0d2      	beq.n	800a970 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9d0:	f003 0308 	and.w	r3, r3, #8
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d001      	beq.n	800a9dc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a9d8:	2308      	movs	r3, #8
 800a9da:	e033      	b.n	800aa44 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9e2:	f003 0302 	and.w	r3, r3, #2
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a9ea:	2302      	movs	r3, #2
 800a9ec:	e02a      	b.n	800aa44 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9f4:	f003 0320 	and.w	r3, r3, #32
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d017      	beq.n	800aa2c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a9fc:	2320      	movs	r3, #32
 800a9fe:	e021      	b.n	800aa44 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4618      	mov	r0, r3
 800aa06:	f005 fe21 	bl	801064c <SDMMC_ReadFIFO>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0e:	601a      	str	r2, [r3, #0]
    pData++;
 800aa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa12:	3304      	adds	r3, #4
 800aa14:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aa16:	f7f8 fb2d 	bl	8003074 <HAL_GetTick>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa24:	d102      	bne.n	800aa2c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800aa26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa2a:	e00b      	b.n	800aa44 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1e2      	bne.n	800aa00 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a03      	ldr	r2, [pc, #12]	; (800aa4c <SD_SendSDStatus+0x19c>)
 800aa40:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3730      	adds	r7, #48	; 0x30
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	18000f3a 	.word	0x18000f3a

0800aa50 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d102      	bne.n	800aa66 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800aa60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa64:	e018      	b.n	800aa98 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa6e:	041b      	lsls	r3, r3, #16
 800aa70:	4619      	mov	r1, r3
 800aa72:	4610      	mov	r0, r2
 800aa74:	f006 f8d4 	bl	8010c20 <SDMMC_CmdSendStatus>
 800aa78:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <SD_SendStatus+0x34>
  {
    return errorstate;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	e009      	b.n	800aa98 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	2100      	movs	r1, #0
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f005 fe53 	bl	8010736 <SDMMC_GetResponse>
 800aa90:	4602      	mov	r2, r0
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3710      	adds	r7, #16
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	2300      	movs	r3, #0
 800aaae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2100      	movs	r1, #0
 800aab6:	4618      	mov	r0, r3
 800aab8:	f005 fe3d 	bl	8010736 <SDMMC_GetResponse>
 800aabc:	4603      	mov	r3, r0
 800aabe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aac2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aac6:	d102      	bne.n	800aace <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aac8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aacc:	e02f      	b.n	800ab2e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aace:	f107 030c 	add.w	r3, r7, #12
 800aad2:	4619      	mov	r1, r3
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 f879 	bl	800abcc <SD_FindSCR>
 800aada:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	e023      	b.n	800ab2e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d01c      	beq.n	800ab2a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaf8:	041b      	lsls	r3, r3, #16
 800aafa:	4619      	mov	r1, r3
 800aafc:	4610      	mov	r0, r2
 800aafe:	f005 ffa6 	bl	8010a4e <SDMMC_CmdAppCommand>
 800ab02:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d001      	beq.n	800ab0e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	e00f      	b.n	800ab2e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2102      	movs	r1, #2
 800ab14:	4618      	mov	r0, r3
 800ab16:	f005 ffdd 	bl	8010ad4 <SDMMC_CmdBusWidth>
 800ab1a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d001      	beq.n	800ab26 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	e003      	b.n	800ab2e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ab26:	2300      	movs	r3, #0
 800ab28:	e001      	b.n	800ab2e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ab2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3718      	adds	r7, #24
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b086      	sub	sp, #24
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ab3e:	2300      	movs	r3, #0
 800ab40:	60fb      	str	r3, [r7, #12]
 800ab42:	2300      	movs	r3, #0
 800ab44:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f005 fdf2 	bl	8010736 <SDMMC_GetResponse>
 800ab52:	4603      	mov	r3, r0
 800ab54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab5c:	d102      	bne.n	800ab64 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ab5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab62:	e02f      	b.n	800abc4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ab64:	f107 030c 	add.w	r3, r7, #12
 800ab68:	4619      	mov	r1, r3
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f82e 	bl	800abcc <SD_FindSCR>
 800ab70:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d001      	beq.n	800ab7c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	e023      	b.n	800abc4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d01c      	beq.n	800abc0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab8e:	041b      	lsls	r3, r3, #16
 800ab90:	4619      	mov	r1, r3
 800ab92:	4610      	mov	r0, r2
 800ab94:	f005 ff5b 	bl	8010a4e <SDMMC_CmdAppCommand>
 800ab98:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d001      	beq.n	800aba4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	e00f      	b.n	800abc4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2100      	movs	r1, #0
 800abaa:	4618      	mov	r0, r3
 800abac:	f005 ff92 	bl	8010ad4 <SDMMC_CmdBusWidth>
 800abb0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d001      	beq.n	800abbc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	e003      	b.n	800abc4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800abbc:	2300      	movs	r3, #0
 800abbe:	e001      	b.n	800abc4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800abc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3718      	adds	r7, #24
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b08e      	sub	sp, #56	; 0x38
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800abd6:	f7f8 fa4d 	bl	8003074 <HAL_GetTick>
 800abda:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800abdc:	2300      	movs	r3, #0
 800abde:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800abe0:	2300      	movs	r3, #0
 800abe2:	60bb      	str	r3, [r7, #8]
 800abe4:	2300      	movs	r3, #0
 800abe6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2108      	movs	r1, #8
 800abf2:	4618      	mov	r0, r3
 800abf4:	f005 fdde 	bl	80107b4 <SDMMC_CmdBlockLength>
 800abf8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800abfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d001      	beq.n	800ac04 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac02:	e0ad      	b.n	800ad60 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac0c:	041b      	lsls	r3, r3, #16
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4610      	mov	r0, r2
 800ac12:	f005 ff1c 	bl	8010a4e <SDMMC_CmdAppCommand>
 800ac16:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d001      	beq.n	800ac22 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ac1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac20:	e09e      	b.n	800ad60 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ac22:	f04f 33ff 	mov.w	r3, #4294967295
 800ac26:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ac28:	2308      	movs	r3, #8
 800ac2a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ac2c:	2330      	movs	r3, #48	; 0x30
 800ac2e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ac30:	2302      	movs	r3, #2
 800ac32:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ac34:	2300      	movs	r3, #0
 800ac36:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f107 0210 	add.w	r2, r7, #16
 800ac44:	4611      	mov	r1, r2
 800ac46:	4618      	mov	r0, r3
 800ac48:	f005 fd88 	bl	801075c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f005 ff62 	bl	8010b1a <SDMMC_CmdSendSCR>
 800ac56:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d027      	beq.n	800acae <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac60:	e07e      	b.n	800ad60 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d113      	bne.n	800ac98 <SD_FindSCR+0xcc>
 800ac70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d110      	bne.n	800ac98 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f005 fce6 	bl	801064c <SDMMC_ReadFIFO>
 800ac80:	4603      	mov	r3, r0
 800ac82:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f005 fcdf 	bl	801064c <SDMMC_ReadFIFO>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	60fb      	str	r3, [r7, #12]
      index++;
 800ac92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac94:	3301      	adds	r3, #1
 800ac96:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ac98:	f7f8 f9ec 	bl	8003074 <HAL_GetTick>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca0:	1ad3      	subs	r3, r2, r3
 800aca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca6:	d102      	bne.n	800acae <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800aca8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acac:	e058      	b.n	800ad60 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acb4:	f240 532a 	movw	r3, #1322	; 0x52a
 800acb8:	4013      	ands	r3, r2
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d0d1      	beq.n	800ac62 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acc4:	f003 0308 	and.w	r3, r3, #8
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d005      	beq.n	800acd8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2208      	movs	r2, #8
 800acd2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800acd4:	2308      	movs	r3, #8
 800acd6:	e043      	b.n	800ad60 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acde:	f003 0302 	and.w	r3, r3, #2
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d005      	beq.n	800acf2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2202      	movs	r2, #2
 800acec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800acee:	2302      	movs	r3, #2
 800acf0:	e036      	b.n	800ad60 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acf8:	f003 0320 	and.w	r3, r3, #32
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d005      	beq.n	800ad0c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2220      	movs	r2, #32
 800ad06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ad08:	2320      	movs	r3, #32
 800ad0a:	e029      	b.n	800ad60 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a15      	ldr	r2, [pc, #84]	; (800ad68 <SD_FindSCR+0x19c>)
 800ad12:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	061a      	lsls	r2, r3, #24
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	021b      	lsls	r3, r3, #8
 800ad1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad20:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	0a1b      	lsrs	r3, r3, #8
 800ad26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ad2a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	0e1b      	lsrs	r3, r3, #24
 800ad30:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ad32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad34:	601a      	str	r2, [r3, #0]
    scr++;
 800ad36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad38:	3304      	adds	r3, #4
 800ad3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	061a      	lsls	r2, r3, #24
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	021b      	lsls	r3, r3, #8
 800ad44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad48:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	0a1b      	lsrs	r3, r3, #8
 800ad4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ad52:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	0e1b      	lsrs	r3, r3, #24
 800ad58:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ad5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3738      	adds	r7, #56	; 0x38
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	18000f3a 	.word	0x18000f3a

0800ad6c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad78:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad7e:	2b1f      	cmp	r3, #31
 800ad80:	d936      	bls.n	800adf0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ad82:	2300      	movs	r3, #0
 800ad84:	617b      	str	r3, [r7, #20]
 800ad86:	e027      	b.n	800add8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f005 fc5d 	bl	801064c <SDMMC_ReadFIFO>
 800ad92:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	0a1b      	lsrs	r3, r3, #8
 800ada6:	b2da      	uxtb	r2, r3
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	3301      	adds	r3, #1
 800adb0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	0c1b      	lsrs	r3, r3, #16
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	701a      	strb	r2, [r3, #0]
      tmp++;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	3301      	adds	r3, #1
 800adc0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	0e1b      	lsrs	r3, r3, #24
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	701a      	strb	r2, [r3, #0]
      tmp++;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	3301      	adds	r3, #1
 800add0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	3301      	adds	r3, #1
 800add6:	617b      	str	r3, [r7, #20]
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	2b07      	cmp	r3, #7
 800addc:	d9d4      	bls.n	800ad88 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade8:	f1a3 0220 	sub.w	r2, r3, #32
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800adf0:	bf00      	nop
 800adf2:	3718      	adds	r7, #24
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	69db      	ldr	r3, [r3, #28]
 800ae04:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	2b1f      	cmp	r3, #31
 800ae0c:	d93a      	bls.n	800ae84 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ae0e:	2300      	movs	r3, #0
 800ae10:	617b      	str	r3, [r7, #20]
 800ae12:	e02b      	b.n	800ae6c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	021a      	lsls	r2, r3, #8
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	041a      	lsls	r2, r3, #16
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	3301      	adds	r3, #1
 800ae42:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	061a      	lsls	r2, r3, #24
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	3301      	adds	r3, #1
 800ae54:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f107 020c 	add.w	r2, r7, #12
 800ae5e:	4611      	mov	r1, r2
 800ae60:	4618      	mov	r0, r3
 800ae62:	f005 fc00 	bl	8010666 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	617b      	str	r3, [r7, #20]
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	2b07      	cmp	r3, #7
 800ae70:	d9d0      	bls.n	800ae14 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a1b      	ldr	r3, [r3, #32]
 800ae7c:	f1a3 0220 	sub.w	r2, r3, #32
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	621a      	str	r2, [r3, #32]
  }
}
 800ae84:	bf00      	nop
 800ae86:	3718      	adds	r7, #24
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800aea8:	bf00      	nop
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800aebc:	bf00      	nop
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800aed0:	bf00      	nop
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	e02b      	b.n	800af48 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d106      	bne.n	800af0a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7f7 fe87 	bl	8002c18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2202      	movs	r2, #2
 800af0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	3304      	adds	r3, #4
 800af1a:	4619      	mov	r1, r3
 800af1c:	4610      	mov	r0, r2
 800af1e:	f005 fa69 	bl	80103f4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6818      	ldr	r0, [r3, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	461a      	mov	r2, r3
 800af2c:	6839      	ldr	r1, [r7, #0]
 800af2e:	f005 fabd 	bl	80104ac <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800af32:	4b07      	ldr	r3, [pc, #28]	; (800af50 <HAL_SDRAM_Init+0x74>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a06      	ldr	r2, [pc, #24]	; (800af50 <HAL_SDRAM_Init+0x74>)
 800af38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af3c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2201      	movs	r2, #1
 800af42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	52004000 	.word	0x52004000

0800af54 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af66:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d101      	bne.n	800af72 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800af6e:	2302      	movs	r3, #2
 800af70:	e021      	b.n	800afb6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800af72:	7dfb      	ldrb	r3, [r7, #23]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d002      	beq.n	800af7e <HAL_SDRAM_SendCommand+0x2a>
 800af78:	7dfb      	ldrb	r3, [r7, #23]
 800af7a:	2b05      	cmp	r3, #5
 800af7c:	d118      	bne.n	800afb0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2202      	movs	r2, #2
 800af82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	68b9      	ldr	r1, [r7, #8]
 800af8e:	4618      	mov	r0, r3
 800af90:	f005 faf6 	bl	8010580 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2b02      	cmp	r3, #2
 800af9a:	d104      	bne.n	800afa6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2205      	movs	r2, #5
 800afa0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800afa4:	e006      	b.n	800afb4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2201      	movs	r2, #1
 800afaa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800afae:	e001      	b.n	800afb4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	e000      	b.n	800afb6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3718      	adds	r7, #24
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b082      	sub	sp, #8
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d101      	bne.n	800afd8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800afd4:	2302      	movs	r3, #2
 800afd6:	e016      	b.n	800b006 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d10f      	bne.n	800b004 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2202      	movs	r2, #2
 800afe8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f005 fae8 	bl	80105c8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	e000      	b.n	800b006 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b004:	2301      	movs	r3, #1
}
 800b006:	4618      	mov	r0, r3
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
	...

0800b010 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d101      	bne.n	800b022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	e0f1      	b.n	800b206 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a78      	ldr	r2, [pc, #480]	; (800b210 <HAL_SPI_Init+0x200>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d00f      	beq.n	800b052 <HAL_SPI_Init+0x42>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a77      	ldr	r2, [pc, #476]	; (800b214 <HAL_SPI_Init+0x204>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d00a      	beq.n	800b052 <HAL_SPI_Init+0x42>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a75      	ldr	r2, [pc, #468]	; (800b218 <HAL_SPI_Init+0x208>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d005      	beq.n	800b052 <HAL_SPI_Init+0x42>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	2b0f      	cmp	r3, #15
 800b04c:	d901      	bls.n	800b052 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
 800b050:	e0d9      	b.n	800b206 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f001 f816 	bl	800c084 <SPI_GetPacketSize>
 800b058:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a6c      	ldr	r2, [pc, #432]	; (800b210 <HAL_SPI_Init+0x200>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d00c      	beq.n	800b07e <HAL_SPI_Init+0x6e>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a6a      	ldr	r2, [pc, #424]	; (800b214 <HAL_SPI_Init+0x204>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d007      	beq.n	800b07e <HAL_SPI_Init+0x6e>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4a69      	ldr	r2, [pc, #420]	; (800b218 <HAL_SPI_Init+0x208>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d002      	beq.n	800b07e <HAL_SPI_Init+0x6e>
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b08      	cmp	r3, #8
 800b07c:	d811      	bhi.n	800b0a2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b082:	4a63      	ldr	r2, [pc, #396]	; (800b210 <HAL_SPI_Init+0x200>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d009      	beq.n	800b09c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a61      	ldr	r2, [pc, #388]	; (800b214 <HAL_SPI_Init+0x204>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d004      	beq.n	800b09c <HAL_SPI_Init+0x8c>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a60      	ldr	r2, [pc, #384]	; (800b218 <HAL_SPI_Init+0x208>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d104      	bne.n	800b0a6 <HAL_SPI_Init+0x96>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2b10      	cmp	r3, #16
 800b0a0:	d901      	bls.n	800b0a6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e0af      	b.n	800b206 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d106      	bne.n	800b0c0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7f7 f8f8 	bl	80022b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f022 0201 	bic.w	r2, r2, #1
 800b0d6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b0e2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0ec:	d119      	bne.n	800b122 <HAL_SPI_Init+0x112>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0f6:	d103      	bne.n	800b100 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d008      	beq.n	800b112 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10c      	bne.n	800b122 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b10c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b110:	d107      	bne.n	800b122 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b120:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	69da      	ldr	r2, [r3, #28]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b12a:	431a      	orrs	r2, r3
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	431a      	orrs	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b134:	ea42 0103 	orr.w	r1, r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	68da      	ldr	r2, [r3, #12]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	430a      	orrs	r2, r1
 800b142:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14c:	431a      	orrs	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b152:	431a      	orrs	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	431a      	orrs	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	431a      	orrs	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	695b      	ldr	r3, [r3, #20]
 800b164:	431a      	orrs	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a1b      	ldr	r3, [r3, #32]
 800b16a:	431a      	orrs	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	431a      	orrs	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b176:	431a      	orrs	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	431a      	orrs	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b182:	ea42 0103 	orr.w	r1, r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	430a      	orrs	r2, r1
 800b190:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d113      	bne.n	800b1c2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1ac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b1c0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f022 0201 	bic.w	r2, r2, #1
 800b1d0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00a      	beq.n	800b1f4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	430a      	orrs	r2, r1
 800b1f2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	40013000 	.word	0x40013000
 800b214:	40003800 	.word	0x40003800
 800b218:	40003c00 	.word	0x40003c00

0800b21c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b08a      	sub	sp, #40	; 0x28
 800b220:	af02      	add	r7, sp, #8
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	603b      	str	r3, [r7, #0]
 800b228:	4613      	mov	r3, r2
 800b22a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	3320      	adds	r3, #32
 800b232:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b234:	2300      	movs	r3, #0
 800b236:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d101      	bne.n	800b246 <HAL_SPI_Transmit+0x2a>
 800b242:	2302      	movs	r3, #2
 800b244:	e1d7      	b.n	800b5f6 <HAL_SPI_Transmit+0x3da>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2201      	movs	r2, #1
 800b24a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b24e:	f7f7 ff11 	bl	8003074 <HAL_GetTick>
 800b252:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d007      	beq.n	800b270 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800b260:	2302      	movs	r3, #2
 800b262:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2200      	movs	r2, #0
 800b268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b26c:	7efb      	ldrb	r3, [r7, #27]
 800b26e:	e1c2      	b.n	800b5f6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d002      	beq.n	800b27c <HAL_SPI_Transmit+0x60>
 800b276:	88fb      	ldrh	r3, [r7, #6]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d107      	bne.n	800b28c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b288:	7efb      	ldrb	r3, [r7, #27]
 800b28a:	e1b4      	b.n	800b5f6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2203      	movs	r2, #3
 800b290:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2200      	movs	r2, #0
 800b298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	88fa      	ldrh	r2, [r7, #6]
 800b2a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	88fa      	ldrh	r2, [r7, #6]
 800b2ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b2dc:	d107      	bne.n	800b2ee <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	685a      	ldr	r2, [r3, #4]
 800b2f4:	4b96      	ldr	r3, [pc, #600]	; (800b550 <HAL_SPI_Transmit+0x334>)
 800b2f6:	4013      	ands	r3, r2
 800b2f8:	88f9      	ldrh	r1, [r7, #6]
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	6812      	ldr	r2, [r2, #0]
 800b2fe:	430b      	orrs	r3, r1
 800b300:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f042 0201 	orr.w	r2, r2, #1
 800b310:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b31a:	d107      	bne.n	800b32c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b32a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	2b0f      	cmp	r3, #15
 800b332:	d947      	bls.n	800b3c4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b334:	e03f      	b.n	800b3b6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	695b      	ldr	r3, [r3, #20]
 800b33c:	f003 0302 	and.w	r3, r3, #2
 800b340:	2b02      	cmp	r3, #2
 800b342:	d114      	bne.n	800b36e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	6812      	ldr	r2, [r2, #0]
 800b34e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b354:	1d1a      	adds	r2, r3, #4
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b360:	b29b      	uxth	r3, r3
 800b362:	3b01      	subs	r3, #1
 800b364:	b29a      	uxth	r2, r3
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b36c:	e023      	b.n	800b3b6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b36e:	f7f7 fe81 	bl	8003074 <HAL_GetTick>
 800b372:	4602      	mov	r2, r0
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d803      	bhi.n	800b386 <HAL_SPI_Transmit+0x16a>
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b384:	d102      	bne.n	800b38c <HAL_SPI_Transmit+0x170>
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d114      	bne.n	800b3b6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f000 fdab 	bl	800bee8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2200      	movs	r2, #0
 800b396:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	e11f      	b.n	800b5f6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1b9      	bne.n	800b336 <HAL_SPI_Transmit+0x11a>
 800b3c2:	e0f2      	b.n	800b5aa <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	2b07      	cmp	r3, #7
 800b3ca:	f240 80e7 	bls.w	800b59c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b3ce:	e05d      	b.n	800b48c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	695b      	ldr	r3, [r3, #20]
 800b3d6:	f003 0302 	and.w	r3, r3, #2
 800b3da:	2b02      	cmp	r3, #2
 800b3dc:	d132      	bne.n	800b444 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d918      	bls.n	800b41c <HAL_SPI_Transmit+0x200>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d014      	beq.n	800b41c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	6812      	ldr	r2, [r2, #0]
 800b3fc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b402:	1d1a      	adds	r2, r3, #4
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b40e:	b29b      	uxth	r3, r3
 800b410:	3b02      	subs	r3, #2
 800b412:	b29a      	uxth	r2, r3
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b41a:	e037      	b.n	800b48c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b420:	881a      	ldrh	r2, [r3, #0]
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b42a:	1c9a      	adds	r2, r3, #2
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b436:	b29b      	uxth	r3, r3
 800b438:	3b01      	subs	r3, #1
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b442:	e023      	b.n	800b48c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b444:	f7f7 fe16 	bl	8003074 <HAL_GetTick>
 800b448:	4602      	mov	r2, r0
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	1ad3      	subs	r3, r2, r3
 800b44e:	683a      	ldr	r2, [r7, #0]
 800b450:	429a      	cmp	r2, r3
 800b452:	d803      	bhi.n	800b45c <HAL_SPI_Transmit+0x240>
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b45a:	d102      	bne.n	800b462 <HAL_SPI_Transmit+0x246>
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d114      	bne.n	800b48c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f000 fd40 	bl	800bee8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b476:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b488:	2303      	movs	r3, #3
 800b48a:	e0b4      	b.n	800b5f6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b492:	b29b      	uxth	r3, r3
 800b494:	2b00      	cmp	r3, #0
 800b496:	d19b      	bne.n	800b3d0 <HAL_SPI_Transmit+0x1b4>
 800b498:	e087      	b.n	800b5aa <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	695b      	ldr	r3, [r3, #20]
 800b4a0:	f003 0302 	and.w	r3, r3, #2
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d155      	bne.n	800b554 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	2b03      	cmp	r3, #3
 800b4b2:	d918      	bls.n	800b4e6 <HAL_SPI_Transmit+0x2ca>
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4b8:	2b40      	cmp	r3, #64	; 0x40
 800b4ba:	d914      	bls.n	800b4e6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6812      	ldr	r2, [r2, #0]
 800b4c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4cc:	1d1a      	adds	r2, r3, #4
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	3b04      	subs	r3, #4
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b4e4:	e05a      	b.n	800b59c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d917      	bls.n	800b522 <HAL_SPI_Transmit+0x306>
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d013      	beq.n	800b522 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4fe:	881a      	ldrh	r2, [r3, #0]
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b508:	1c9a      	adds	r2, r3, #2
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b514:	b29b      	uxth	r3, r3
 800b516:	3b02      	subs	r3, #2
 800b518:	b29a      	uxth	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b520:	e03c      	b.n	800b59c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	3320      	adds	r3, #32
 800b52c:	7812      	ldrb	r2, [r2, #0]
 800b52e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b540:	b29b      	uxth	r3, r3
 800b542:	3b01      	subs	r3, #1
 800b544:	b29a      	uxth	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b54c:	e026      	b.n	800b59c <HAL_SPI_Transmit+0x380>
 800b54e:	bf00      	nop
 800b550:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b554:	f7f7 fd8e 	bl	8003074 <HAL_GetTick>
 800b558:	4602      	mov	r2, r0
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	1ad3      	subs	r3, r2, r3
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	429a      	cmp	r2, r3
 800b562:	d803      	bhi.n	800b56c <HAL_SPI_Transmit+0x350>
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56a:	d102      	bne.n	800b572 <HAL_SPI_Transmit+0x356>
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d114      	bne.n	800b59c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f000 fcb8 	bl	800bee8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b586:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b598:	2303      	movs	r3, #3
 800b59a:	e02c      	b.n	800b5f6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f47f af78 	bne.w	800b49a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	9300      	str	r3, [sp, #0]
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	2108      	movs	r1, #8
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f000 fd37 	bl	800c028 <SPI_WaitOnFlagUntilTimeout>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d007      	beq.n	800b5d0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5c6:	f043 0220 	orr.w	r2, r3, #32
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f000 fc89 	bl	800bee8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	e000      	b.n	800b5f6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800b5f4:	7efb      	ldrb	r3, [r7, #27]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3720      	adds	r7, #32
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop

0800b600 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
 800b60c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d101      	bne.n	800b620 <HAL_SPI_TransmitReceive_DMA+0x20>
 800b61c:	2302      	movs	r3, #2
 800b61e:	e1b4      	b.n	800b98a <HAL_SPI_TransmitReceive_DMA+0x38a>
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b62e:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b636:	7dbb      	ldrb	r3, [r7, #22]
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d012      	beq.n	800b662 <HAL_SPI_TransmitReceive_DMA+0x62>
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b642:	d106      	bne.n	800b652 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d102      	bne.n	800b652 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b64c:	7dbb      	ldrb	r3, [r7, #22]
 800b64e:	2b04      	cmp	r3, #4
 800b650:	d007      	beq.n	800b662 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800b652:	2302      	movs	r3, #2
 800b654:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2200      	movs	r2, #0
 800b65a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b65e:	7dfb      	ldrb	r3, [r7, #23]
 800b660:	e193      	b.n	800b98a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d005      	beq.n	800b674 <HAL_SPI_TransmitReceive_DMA+0x74>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d002      	beq.n	800b674 <HAL_SPI_TransmitReceive_DMA+0x74>
 800b66e:	887b      	ldrh	r3, [r7, #2]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d107      	bne.n	800b684 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b680:	7dfb      	ldrb	r3, [r7, #23]
 800b682:	e182      	b.n	800b98a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	2b04      	cmp	r3, #4
 800b68e:	d003      	beq.n	800b698 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2205      	movs	r2, #5
 800b694:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	887a      	ldrh	r2, [r7, #2]
 800b6aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	887a      	ldrh	r2, [r7, #2]
 800b6b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	887a      	ldrh	r2, [r7, #2]
 800b6c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	887a      	ldrh	r2, [r7, #2]
 800b6c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	689a      	ldr	r2, [r3, #8]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b6e6:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	2b0f      	cmp	r3, #15
 800b6ee:	d905      	bls.n	800b6fc <HAL_SPI_TransmitReceive_DMA+0xfc>
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6f4:	699b      	ldr	r3, [r3, #24]
 800b6f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6fa:	d10f      	bne.n	800b71c <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b700:	2b07      	cmp	r3, #7
 800b702:	d913      	bls.n	800b72c <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b70e:	d00d      	beq.n	800b72c <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b714:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b71a:	d007      	beq.n	800b72c <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800b71c:	2301      	movs	r3, #1
 800b71e:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b728:	7dfb      	ldrb	r3, [r7, #23]
 800b72a:	e12e      	b.n	800b98a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	2b07      	cmp	r3, #7
 800b732:	d840      	bhi.n	800b7b6 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b738:	699b      	ldr	r3, [r3, #24]
 800b73a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b73e:	d109      	bne.n	800b754 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b746:	b29b      	uxth	r3, r3
 800b748:	3301      	adds	r3, #1
 800b74a:	105b      	asrs	r3, r3, #1
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b758:	699b      	ldr	r3, [r3, #24]
 800b75a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b75e:	d109      	bne.n	800b774 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b766:	b29b      	uxth	r3, r3
 800b768:	3303      	adds	r3, #3
 800b76a:	109b      	asrs	r3, r3, #2
 800b76c:	b29a      	uxth	r2, r3
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b778:	699b      	ldr	r3, [r3, #24]
 800b77a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b77e:	d109      	bne.n	800b794 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b786:	b29b      	uxth	r3, r3
 800b788:	3301      	adds	r3, #1
 800b78a:	105b      	asrs	r3, r3, #1
 800b78c:	b29a      	uxth	r2, r3
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b79e:	d12e      	bne.n	800b7fe <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	3303      	adds	r3, #3
 800b7aa:	109b      	asrs	r3, r3, #2
 800b7ac:	b29a      	uxth	r2, r3
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b7b4:	e023      	b.n	800b7fe <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	2b0f      	cmp	r3, #15
 800b7bc:	d81f      	bhi.n	800b7fe <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7c8:	d109      	bne.n	800b7de <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	105b      	asrs	r3, r3, #1
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7e2:	699b      	ldr	r3, [r3, #24]
 800b7e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7e8:	d109      	bne.n	800b7fe <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	105b      	asrs	r3, r3, #1
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b804:	b2db      	uxtb	r3, r3
 800b806:	2b04      	cmp	r3, #4
 800b808:	d108      	bne.n	800b81c <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b80e:	4a61      	ldr	r2, [pc, #388]	; (800b994 <HAL_SPI_TransmitReceive_DMA+0x394>)
 800b810:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b816:	4a60      	ldr	r2, [pc, #384]	; (800b998 <HAL_SPI_TransmitReceive_DMA+0x398>)
 800b818:	63da      	str	r2, [r3, #60]	; 0x3c
 800b81a:	e007      	b.n	800b82c <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b820:	4a5e      	ldr	r2, [pc, #376]	; (800b99c <HAL_SPI_TransmitReceive_DMA+0x39c>)
 800b822:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b828:	4a5d      	ldr	r2, [pc, #372]	; (800b9a0 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 800b82a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b830:	4a5c      	ldr	r2, [pc, #368]	; (800b9a4 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 800b832:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b838:	2200      	movs	r2, #0
 800b83a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3330      	adds	r3, #48	; 0x30
 800b846:	4619      	mov	r1, r3
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b84c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b854:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b856:	f7f8 f90f 	bl	8003a78 <HAL_DMA_Start_IT>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d013      	beq.n	800b888 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b866:	f043 0210 	orr.w	r2, r3, #16
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800b884:	7dfb      	ldrb	r3, [r7, #23]
 800b886:	e080      	b.n	800b98a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	689a      	ldr	r2, [r3, #8]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b896:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b89c:	2200      	movs	r2, #0
 800b89e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3320      	adds	r3, #32
 800b8c8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b8d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b8d2:	f7f8 f8d1 	bl	8003a78 <HAL_DMA_Start_IT>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d013      	beq.n	800b904 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8e2:	f043 0210 	orr.w	r2, r3, #16
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800b900:	7dfb      	ldrb	r3, [r7, #23]
 800b902:	e042      	b.n	800b98a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b908:	69db      	ldr	r3, [r3, #28]
 800b90a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b90e:	d108      	bne.n	800b922 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	6859      	ldr	r1, [r3, #4]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	4b23      	ldr	r3, [pc, #140]	; (800b9a8 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800b91c:	400b      	ands	r3, r1
 800b91e:	6053      	str	r3, [r2, #4]
 800b920:	e009      	b.n	800b936 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	685a      	ldr	r2, [r3, #4]
 800b928:	4b1f      	ldr	r3, [pc, #124]	; (800b9a8 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800b92a:	4013      	ands	r3, r2
 800b92c:	8879      	ldrh	r1, [r7, #2]
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	6812      	ldr	r2, [r2, #0]
 800b932:	430b      	orrs	r3, r1
 800b934:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	689a      	ldr	r2, [r3, #8]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b944:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	691a      	ldr	r2, [r3, #16]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800b954:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f042 0201 	orr.w	r2, r2, #1
 800b964:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b96e:	d107      	bne.n	800b980 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b97e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2200      	movs	r2, #0
 800b984:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800b988:	7dfb      	ldrb	r3, [r7, #23]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3718      	adds	r7, #24
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	0800be35 	.word	0x0800be35
 800b998:	0800bda9 	.word	0x0800bda9
 800b99c:	0800be51 	.word	0x0800be51
 800b9a0:	0800bdef 	.word	0x0800bdef
 800b9a4:	0800be6d 	.word	0x0800be6d
 800b9a8:	ffff0000 	.word	0xffff0000

0800b9ac <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b08a      	sub	sp, #40	; 0x28
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	695b      	ldr	r3, [r3, #20]
 800b9c2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b9c4:	6a3a      	ldr	r2, [r7, #32]
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b9de:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3330      	adds	r3, #48	; 0x30
 800b9e6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d113      	bne.n	800ba1a <HAL_SPI_IRQHandler+0x6e>
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	f003 0320 	and.w	r3, r3, #32
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10e      	bne.n	800ba1a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d009      	beq.n	800ba1a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	4798      	blx	r3
    handled = 1UL;
 800ba16:	2301      	movs	r3, #1
 800ba18:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d10f      	bne.n	800ba44 <HAL_SPI_IRQHandler+0x98>
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	f003 0301 	and.w	r3, r3, #1
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00a      	beq.n	800ba44 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d105      	bne.n	800ba44 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	4798      	blx	r3
    handled = 1UL;
 800ba40:	2301      	movs	r3, #1
 800ba42:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	f003 0320 	and.w	r3, r3, #32
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10f      	bne.n	800ba6e <HAL_SPI_IRQHandler+0xc2>
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	f003 0302 	and.w	r3, r3, #2
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00a      	beq.n	800ba6e <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d105      	bne.n	800ba6e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	4798      	blx	r3
    handled = 1UL;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f040 815a 	bne.w	800bd2a <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	f003 0308 	and.w	r3, r3, #8
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f000 808b 	beq.w	800bb98 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	699a      	ldr	r2, [r3, #24]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f042 0208 	orr.w	r2, r2, #8
 800ba90:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	699a      	ldr	r2, [r3, #24]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f042 0210 	orr.w	r2, r2, #16
 800baa0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	699a      	ldr	r2, [r3, #24]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bab0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	691a      	ldr	r2, [r3, #16]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f022 0208 	bic.w	r2, r2, #8
 800bac0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d13d      	bne.n	800bb4c <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800bad0:	e036      	b.n	800bb40 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	2b0f      	cmp	r3, #15
 800bad8:	d90b      	bls.n	800baf2 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bae2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bae4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baea:	1d1a      	adds	r2, r3, #4
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	665a      	str	r2, [r3, #100]	; 0x64
 800baf0:	e01d      	b.n	800bb2e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	2b07      	cmp	r3, #7
 800baf8:	d90b      	bls.n	800bb12 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	8812      	ldrh	r2, [r2, #0]
 800bb02:	b292      	uxth	r2, r2
 800bb04:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb0a:	1c9a      	adds	r2, r3, #2
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	665a      	str	r2, [r3, #100]	; 0x64
 800bb10:	e00d      	b.n	800bb2e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb1e:	7812      	ldrb	r2, [r2, #0]
 800bb20:	b2d2      	uxtb	r2, r2
 800bb22:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb28:	1c5a      	adds	r2, r3, #1
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	3b01      	subs	r3, #1
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d1c2      	bne.n	800bad2 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 f9cb 	bl	800bee8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2201      	movs	r2, #1
 800bb56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d003      	beq.n	800bb6c <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 f915 	bl	800bd94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800bb6a:	e0e3      	b.n	800bd34 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800bb6c:	7cfb      	ldrb	r3, [r7, #19]
 800bb6e:	2b05      	cmp	r3, #5
 800bb70:	d103      	bne.n	800bb7a <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7f5 fe04 	bl	8001780 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800bb78:	e0d9      	b.n	800bd2e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800bb7a:	7cfb      	ldrb	r3, [r7, #19]
 800bb7c:	2b04      	cmp	r3, #4
 800bb7e:	d103      	bne.n	800bb88 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 f8e9 	bl	800bd58 <HAL_SPI_RxCpltCallback>
    return;
 800bb86:	e0d2      	b.n	800bd2e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800bb88:	7cfb      	ldrb	r3, [r7, #19]
 800bb8a:	2b03      	cmp	r3, #3
 800bb8c:	f040 80cf 	bne.w	800bd2e <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f8d7 	bl	800bd44 <HAL_SPI_TxCpltCallback>
    return;
 800bb96:	e0ca      	b.n	800bd2e <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00d      	beq.n	800bbbe <HAL_SPI_IRQHandler+0x212>
 800bba2:	6a3b      	ldr	r3, [r7, #32]
 800bba4:	f003 0308 	and.w	r3, r3, #8
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d008      	beq.n	800bbbe <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	699a      	ldr	r2, [r3, #24]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbba:	619a      	str	r2, [r3, #24]

    return;
 800bbbc:	e0ba      	b.n	800bd34 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f000 80b5 	beq.w	800bd34 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800bbca:	69bb      	ldr	r3, [r7, #24]
 800bbcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00f      	beq.n	800bbf4 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbda:	f043 0204 	orr.w	r2, r3, #4
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	699a      	ldr	r2, [r3, #24]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bbf2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800bbf4:	69bb      	ldr	r3, [r7, #24]
 800bbf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00f      	beq.n	800bc1e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc04:	f043 0201 	orr.w	r2, r3, #1
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	699a      	ldr	r2, [r3, #24]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc1c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d00f      	beq.n	800bc48 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc2e:	f043 0208 	orr.w	r2, r3, #8
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	699a      	ldr	r2, [r3, #24]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc46:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	f003 0320 	and.w	r3, r3, #32
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00f      	beq.n	800bc72 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	699a      	ldr	r2, [r3, #24]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f042 0220 	orr.w	r2, r2, #32
 800bc70:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d05a      	beq.n	800bd32 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f022 0201 	bic.w	r2, r2, #1
 800bc8a:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	6919      	ldr	r1, [r3, #16]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	4b29      	ldr	r3, [pc, #164]	; (800bd3c <HAL_SPI_IRQHandler+0x390>)
 800bc98:	400b      	ands	r3, r1
 800bc9a:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bca2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bca6:	d138      	bne.n	800bd1a <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	689a      	ldr	r2, [r3, #8]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bcb6:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d013      	beq.n	800bce8 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcc4:	4a1e      	ldr	r2, [pc, #120]	; (800bd40 <HAL_SPI_IRQHandler+0x394>)
 800bcc6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7f8 fc5b 	bl	8004588 <HAL_DMA_Abort_IT>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d007      	beq.n	800bce8 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d020      	beq.n	800bd32 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcf4:	4a12      	ldr	r2, [pc, #72]	; (800bd40 <HAL_SPI_IRQHandler+0x394>)
 800bcf6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7f8 fc43 	bl	8004588 <HAL_DMA_Abort_IT>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d014      	beq.n	800bd32 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bd18:	e00b      	b.n	800bd32 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 f836 	bl	800bd94 <HAL_SPI_ErrorCallback>
    return;
 800bd28:	e003      	b.n	800bd32 <HAL_SPI_IRQHandler+0x386>
    return;
 800bd2a:	bf00      	nop
 800bd2c:	e002      	b.n	800bd34 <HAL_SPI_IRQHandler+0x388>
    return;
 800bd2e:	bf00      	nop
 800bd30:	e000      	b.n	800bd34 <HAL_SPI_IRQHandler+0x388>
    return;
 800bd32:	bf00      	nop
  }
}
 800bd34:	3728      	adds	r7, #40	; 0x28
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	fffffc94 	.word	0xfffffc94
 800bd40:	0800beb3 	.word	0x0800beb3

0800bd44 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800bd4c:	bf00      	nop
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800bd74:	bf00      	nop
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bd9c:	bf00      	nop
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	2b07      	cmp	r3, #7
 800bdc0:	d011      	beq.n	800bde6 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdc6:	69db      	ldr	r3, [r3, #28]
 800bdc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdcc:	d103      	bne.n	800bdd6 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f7ff ffc2 	bl	800bd58 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800bdd4:	e007      	b.n	800bde6 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	691a      	ldr	r2, [r3, #16]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f042 0208 	orr.w	r2, r2, #8
 800bde4:	611a      	str	r2, [r3, #16]
}
 800bde6:	bf00      	nop
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b084      	sub	sp, #16
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfa:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be02:	b2db      	uxtb	r3, r3
 800be04:	2b07      	cmp	r3, #7
 800be06:	d011      	beq.n	800be2c <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be0c:	69db      	ldr	r3, [r3, #28]
 800be0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be12:	d103      	bne.n	800be1c <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f7f5 fcb3 	bl	8001780 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800be1a:	e007      	b.n	800be2c <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	691a      	ldr	r2, [r3, #16]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f042 0208 	orr.w	r2, r2, #8
 800be2a:	611a      	str	r2, [r3, #16]
}
 800be2c:	bf00      	nop
 800be2e:	3710      	adds	r7, #16
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be40:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f7ff ff92 	bl	800bd6c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be48:	bf00      	nop
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	f7ff ff8e 	bl	800bd80 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be64:	bf00      	nop
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be78:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f7f9 fd2c 	bl	80058d8 <HAL_DMA_GetError>
 800be80:	4603      	mov	r3, r0
 800be82:	2b02      	cmp	r3, #2
 800be84:	d011      	beq.n	800beaa <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f000 f82e 	bl	800bee8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be92:	f043 0210 	orr.w	r2, r3, #16
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	f7ff ff75 	bl	800bd94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800beaa:	bf00      	nop
 800beac:	3710      	adds	r7, #16
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b084      	sub	sp, #16
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bebe:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f7ff ff5b 	bl	800bd94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bede:	bf00      	nop
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
	...

0800bee8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bee8:	b480      	push	{r7}
 800beea:	b085      	sub	sp, #20
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	695b      	ldr	r3, [r3, #20]
 800bef6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	699a      	ldr	r2, [r3, #24]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f042 0208 	orr.w	r2, r2, #8
 800bf06:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	699a      	ldr	r2, [r3, #24]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f042 0210 	orr.w	r2, r2, #16
 800bf16:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f022 0201 	bic.w	r2, r2, #1
 800bf26:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	6919      	ldr	r1, [r3, #16]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	4b3c      	ldr	r3, [pc, #240]	; (800c024 <SPI_CloseTransfer+0x13c>)
 800bf34:	400b      	ands	r3, r1
 800bf36:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	689a      	ldr	r2, [r3, #8]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bf46:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	2b04      	cmp	r3, #4
 800bf52:	d014      	beq.n	800bf7e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f003 0320 	and.w	r3, r3, #32
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00f      	beq.n	800bf7e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	699a      	ldr	r2, [r3, #24]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f042 0220 	orr.w	r2, r2, #32
 800bf7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	2b03      	cmp	r3, #3
 800bf88:	d014      	beq.n	800bfb4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00f      	beq.n	800bfb4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf9a:	f043 0204 	orr.w	r2, r3, #4
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	699a      	ldr	r2, [r3, #24]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfb2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00f      	beq.n	800bfde <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfc4:	f043 0201 	orr.w	r2, r3, #1
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	699a      	ldr	r2, [r3, #24]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfdc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00f      	beq.n	800c008 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfee:	f043 0208 	orr.w	r2, r3, #8
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	699a      	ldr	r2, [r3, #24]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c006:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c018:	bf00      	nop
 800c01a:	3714      	adds	r7, #20
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr
 800c024:	fffffc90 	.word	0xfffffc90

0800c028 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	603b      	str	r3, [r7, #0]
 800c034:	4613      	mov	r3, r2
 800c036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c038:	e010      	b.n	800c05c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c03a:	f7f7 f81b 	bl	8003074 <HAL_GetTick>
 800c03e:	4602      	mov	r2, r0
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	1ad3      	subs	r3, r2, r3
 800c044:	69ba      	ldr	r2, [r7, #24]
 800c046:	429a      	cmp	r2, r3
 800c048:	d803      	bhi.n	800c052 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c050:	d102      	bne.n	800c058 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d101      	bne.n	800c05c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c058:	2303      	movs	r3, #3
 800c05a:	e00f      	b.n	800c07c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	695a      	ldr	r2, [r3, #20]
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	4013      	ands	r3, r2
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	429a      	cmp	r2, r3
 800c06a:	bf0c      	ite	eq
 800c06c:	2301      	moveq	r3, #1
 800c06e:	2300      	movne	r3, #0
 800c070:	b2db      	uxtb	r3, r3
 800c072:	461a      	mov	r2, r3
 800c074:	79fb      	ldrb	r3, [r7, #7]
 800c076:	429a      	cmp	r2, r3
 800c078:	d0df      	beq.n	800c03a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c07a:	2300      	movs	r3, #0
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3710      	adds	r7, #16
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c084:	b480      	push	{r7}
 800c086:	b085      	sub	sp, #20
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c090:	095b      	lsrs	r3, r3, #5
 800c092:	3301      	adds	r3, #1
 800c094:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	3301      	adds	r3, #1
 800c09c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	3307      	adds	r3, #7
 800c0a2:	08db      	lsrs	r3, r3, #3
 800c0a4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	fb02 f303 	mul.w	r3, r2, r3
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b082      	sub	sp, #8
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d101      	bne.n	800c0cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e049      	b.n	800c160 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d106      	bne.n	800c0e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f7f6 fbbf 	bl	8002864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2202      	movs	r2, #2
 800c0ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	3304      	adds	r3, #4
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	4610      	mov	r0, r2
 800c0fa:	f000 fda1 	bl	800cc40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2201      	movs	r2, #1
 800c102:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2201      	movs	r2, #1
 800c10a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2201      	movs	r2, #1
 800c112:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2201      	movs	r2, #1
 800c11a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2201      	movs	r2, #1
 800c122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2201      	movs	r2, #1
 800c12a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2201      	movs	r2, #1
 800c132:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2201      	movs	r2, #1
 800c13a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2201      	movs	r2, #1
 800c142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2201      	movs	r2, #1
 800c14a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2201      	movs	r2, #1
 800c152:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2201      	movs	r2, #1
 800c15a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c15e:	2300      	movs	r3, #0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c168:	b480      	push	{r7}
 800c16a:	b085      	sub	sp, #20
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c176:	b2db      	uxtb	r3, r3
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d001      	beq.n	800c180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c17c:	2301      	movs	r3, #1
 800c17e:	e054      	b.n	800c22a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2202      	movs	r2, #2
 800c184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68da      	ldr	r2, [r3, #12]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f042 0201 	orr.w	r2, r2, #1
 800c196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a26      	ldr	r2, [pc, #152]	; (800c238 <HAL_TIM_Base_Start_IT+0xd0>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d022      	beq.n	800c1e8 <HAL_TIM_Base_Start_IT+0x80>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1aa:	d01d      	beq.n	800c1e8 <HAL_TIM_Base_Start_IT+0x80>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a22      	ldr	r2, [pc, #136]	; (800c23c <HAL_TIM_Base_Start_IT+0xd4>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d018      	beq.n	800c1e8 <HAL_TIM_Base_Start_IT+0x80>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a21      	ldr	r2, [pc, #132]	; (800c240 <HAL_TIM_Base_Start_IT+0xd8>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d013      	beq.n	800c1e8 <HAL_TIM_Base_Start_IT+0x80>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4a1f      	ldr	r2, [pc, #124]	; (800c244 <HAL_TIM_Base_Start_IT+0xdc>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d00e      	beq.n	800c1e8 <HAL_TIM_Base_Start_IT+0x80>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4a1e      	ldr	r2, [pc, #120]	; (800c248 <HAL_TIM_Base_Start_IT+0xe0>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d009      	beq.n	800c1e8 <HAL_TIM_Base_Start_IT+0x80>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a1c      	ldr	r2, [pc, #112]	; (800c24c <HAL_TIM_Base_Start_IT+0xe4>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d004      	beq.n	800c1e8 <HAL_TIM_Base_Start_IT+0x80>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a1b      	ldr	r2, [pc, #108]	; (800c250 <HAL_TIM_Base_Start_IT+0xe8>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d115      	bne.n	800c214 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	689a      	ldr	r2, [r3, #8]
 800c1ee:	4b19      	ldr	r3, [pc, #100]	; (800c254 <HAL_TIM_Base_Start_IT+0xec>)
 800c1f0:	4013      	ands	r3, r2
 800c1f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2b06      	cmp	r3, #6
 800c1f8:	d015      	beq.n	800c226 <HAL_TIM_Base_Start_IT+0xbe>
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c200:	d011      	beq.n	800c226 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f042 0201 	orr.w	r2, r2, #1
 800c210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c212:	e008      	b.n	800c226 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f042 0201 	orr.w	r2, r2, #1
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	e000      	b.n	800c228 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c226:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c228:	2300      	movs	r3, #0
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3714      	adds	r7, #20
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	40010000 	.word	0x40010000
 800c23c:	40000400 	.word	0x40000400
 800c240:	40000800 	.word	0x40000800
 800c244:	40000c00 	.word	0x40000c00
 800c248:	40010400 	.word	0x40010400
 800c24c:	40001800 	.word	0x40001800
 800c250:	40014000 	.word	0x40014000
 800c254:	00010007 	.word	0x00010007

0800c258 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c266:	2301      	movs	r3, #1
 800c268:	e049      	b.n	800c2fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c270:	b2db      	uxtb	r3, r3
 800c272:	2b00      	cmp	r3, #0
 800c274:	d106      	bne.n	800c284 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f841 	bl	800c306 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2202      	movs	r2, #2
 800c288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	3304      	adds	r3, #4
 800c294:	4619      	mov	r1, r3
 800c296:	4610      	mov	r0, r2
 800c298:	f000 fcd2 	bl	800cc40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c306:	b480      	push	{r7}
 800c308:	b083      	sub	sp, #12
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c30e:	bf00      	nop
 800c310:	370c      	adds	r7, #12
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr

0800c31a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c31a:	b580      	push	{r7, lr}
 800c31c:	b082      	sub	sp, #8
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d101      	bne.n	800c32c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c328:	2301      	movs	r3, #1
 800c32a:	e049      	b.n	800c3c0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b00      	cmp	r3, #0
 800c336:	d106      	bne.n	800c346 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 f841 	bl	800c3c8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2202      	movs	r2, #2
 800c34a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	3304      	adds	r3, #4
 800c356:	4619      	mov	r1, r3
 800c358:	4610      	mov	r0, r2
 800c35a:	f000 fc71 	bl	800cc40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2201      	movs	r2, #1
 800c362:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2201      	movs	r2, #1
 800c372:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2201      	movs	r2, #1
 800c37a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2201      	movs	r2, #1
 800c382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2201      	movs	r2, #1
 800c38a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2201      	movs	r2, #1
 800c392:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c3be:	2300      	movs	r3, #0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c3d0:	bf00      	nop
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	f003 0302 	and.w	r3, r3, #2
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	d122      	bne.n	800c438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	f003 0302 	and.w	r3, r3, #2
 800c3fc:	2b02      	cmp	r3, #2
 800c3fe:	d11b      	bne.n	800c438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f06f 0202 	mvn.w	r2, #2
 800c408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	699b      	ldr	r3, [r3, #24]
 800c416:	f003 0303 	and.w	r3, r3, #3
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d003      	beq.n	800c426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 fbf0 	bl	800cc04 <HAL_TIM_IC_CaptureCallback>
 800c424:	e005      	b.n	800c432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fbe2 	bl	800cbf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fbf3 	bl	800cc18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2200      	movs	r2, #0
 800c436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	f003 0304 	and.w	r3, r3, #4
 800c442:	2b04      	cmp	r3, #4
 800c444:	d122      	bne.n	800c48c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	f003 0304 	and.w	r3, r3, #4
 800c450:	2b04      	cmp	r3, #4
 800c452:	d11b      	bne.n	800c48c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f06f 0204 	mvn.w	r2, #4
 800c45c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2202      	movs	r2, #2
 800c462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	699b      	ldr	r3, [r3, #24]
 800c46a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d003      	beq.n	800c47a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fbc6 	bl	800cc04 <HAL_TIM_IC_CaptureCallback>
 800c478:	e005      	b.n	800c486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 fbb8 	bl	800cbf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 fbc9 	bl	800cc18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2200      	movs	r2, #0
 800c48a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	691b      	ldr	r3, [r3, #16]
 800c492:	f003 0308 	and.w	r3, r3, #8
 800c496:	2b08      	cmp	r3, #8
 800c498:	d122      	bne.n	800c4e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	f003 0308 	and.w	r3, r3, #8
 800c4a4:	2b08      	cmp	r3, #8
 800c4a6:	d11b      	bne.n	800c4e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f06f 0208 	mvn.w	r2, #8
 800c4b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2204      	movs	r2, #4
 800c4b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	69db      	ldr	r3, [r3, #28]
 800c4be:	f003 0303 	and.w	r3, r3, #3
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d003      	beq.n	800c4ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 fb9c 	bl	800cc04 <HAL_TIM_IC_CaptureCallback>
 800c4cc:	e005      	b.n	800c4da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fb8e 	bl	800cbf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 fb9f 	bl	800cc18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	f003 0310 	and.w	r3, r3, #16
 800c4ea:	2b10      	cmp	r3, #16
 800c4ec:	d122      	bne.n	800c534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	f003 0310 	and.w	r3, r3, #16
 800c4f8:	2b10      	cmp	r3, #16
 800c4fa:	d11b      	bne.n	800c534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f06f 0210 	mvn.w	r2, #16
 800c504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2208      	movs	r2, #8
 800c50a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	69db      	ldr	r3, [r3, #28]
 800c512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c516:	2b00      	cmp	r3, #0
 800c518:	d003      	beq.n	800c522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fb72 	bl	800cc04 <HAL_TIM_IC_CaptureCallback>
 800c520:	e005      	b.n	800c52e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 fb64 	bl	800cbf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 fb75 	bl	800cc18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	691b      	ldr	r3, [r3, #16]
 800c53a:	f003 0301 	and.w	r3, r3, #1
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d10e      	bne.n	800c560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	f003 0301 	and.w	r3, r3, #1
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d107      	bne.n	800c560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f06f 0201 	mvn.w	r2, #1
 800c558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f7f5 f9a2 	bl	80018a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c56a:	2b80      	cmp	r3, #128	; 0x80
 800c56c:	d10e      	bne.n	800c58c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c578:	2b80      	cmp	r3, #128	; 0x80
 800c57a:	d107      	bne.n	800c58c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f001 fab4 	bl	800daf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c59a:	d10e      	bne.n	800c5ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5a6:	2b80      	cmp	r3, #128	; 0x80
 800c5a8:	d107      	bne.n	800c5ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c5b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f001 faa7 	bl	800db08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	691b      	ldr	r3, [r3, #16]
 800c5c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5c4:	2b40      	cmp	r3, #64	; 0x40
 800c5c6:	d10e      	bne.n	800c5e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5d2:	2b40      	cmp	r3, #64	; 0x40
 800c5d4:	d107      	bne.n	800c5e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c5de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 fb23 	bl	800cc2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	691b      	ldr	r3, [r3, #16]
 800c5ec:	f003 0320 	and.w	r3, r3, #32
 800c5f0:	2b20      	cmp	r3, #32
 800c5f2:	d10e      	bne.n	800c612 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	f003 0320 	and.w	r3, r3, #32
 800c5fe:	2b20      	cmp	r3, #32
 800c600:	d107      	bne.n	800c612 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f06f 0220 	mvn.w	r2, #32
 800c60a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f001 fa67 	bl	800dae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c612:	bf00      	nop
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b086      	sub	sp, #24
 800c61e:	af00      	add	r7, sp, #0
 800c620:	60f8      	str	r0, [r7, #12]
 800c622:	60b9      	str	r1, [r7, #8]
 800c624:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c626:	2300      	movs	r3, #0
 800c628:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c630:	2b01      	cmp	r3, #1
 800c632:	d101      	bne.n	800c638 <HAL_TIM_IC_ConfigChannel+0x1e>
 800c634:	2302      	movs	r3, #2
 800c636:	e088      	b.n	800c74a <HAL_TIM_IC_ConfigChannel+0x130>
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d11b      	bne.n	800c67e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	6818      	ldr	r0, [r3, #0]
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	6819      	ldr	r1, [r3, #0]
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	685a      	ldr	r2, [r3, #4]
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	68db      	ldr	r3, [r3, #12]
 800c656:	f000 ff4d 	bl	800d4f4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	699a      	ldr	r2, [r3, #24]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f022 020c 	bic.w	r2, r2, #12
 800c668:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	6999      	ldr	r1, [r3, #24]
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	689a      	ldr	r2, [r3, #8]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	430a      	orrs	r2, r1
 800c67a:	619a      	str	r2, [r3, #24]
 800c67c:	e060      	b.n	800c740 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b04      	cmp	r3, #4
 800c682:	d11c      	bne.n	800c6be <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	6818      	ldr	r0, [r3, #0]
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	6819      	ldr	r1, [r3, #0]
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	685a      	ldr	r2, [r3, #4]
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	f000 ffd1 	bl	800d63a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	699a      	ldr	r2, [r3, #24]
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c6a6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	6999      	ldr	r1, [r3, #24]
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	689b      	ldr	r3, [r3, #8]
 800c6b2:	021a      	lsls	r2, r3, #8
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	430a      	orrs	r2, r1
 800c6ba:	619a      	str	r2, [r3, #24]
 800c6bc:	e040      	b.n	800c740 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2b08      	cmp	r3, #8
 800c6c2:	d11b      	bne.n	800c6fc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6818      	ldr	r0, [r3, #0]
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	6819      	ldr	r1, [r3, #0]
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	685a      	ldr	r2, [r3, #4]
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	f001 f81e 	bl	800d714 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	69da      	ldr	r2, [r3, #28]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f022 020c 	bic.w	r2, r2, #12
 800c6e6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	69d9      	ldr	r1, [r3, #28]
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	689a      	ldr	r2, [r3, #8]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	430a      	orrs	r2, r1
 800c6f8:	61da      	str	r2, [r3, #28]
 800c6fa:	e021      	b.n	800c740 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b0c      	cmp	r3, #12
 800c700:	d11c      	bne.n	800c73c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	6818      	ldr	r0, [r3, #0]
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	6819      	ldr	r1, [r3, #0]
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	685a      	ldr	r2, [r3, #4]
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	f001 f83b 	bl	800d78c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	69da      	ldr	r2, [r3, #28]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c724:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	69d9      	ldr	r1, [r3, #28]
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	021a      	lsls	r2, r3, #8
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	430a      	orrs	r2, r1
 800c738:	61da      	str	r2, [r3, #28]
 800c73a:	e001      	b.n	800c740 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c73c:	2301      	movs	r3, #1
 800c73e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2200      	movs	r2, #0
 800c744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c748:	7dfb      	ldrb	r3, [r7, #23]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3718      	adds	r7, #24
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
	...

0800c754 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b086      	sub	sp, #24
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c760:	2300      	movs	r3, #0
 800c762:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d101      	bne.n	800c772 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c76e:	2302      	movs	r3, #2
 800c770:	e0ff      	b.n	800c972 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2201      	movs	r2, #1
 800c776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2b14      	cmp	r3, #20
 800c77e:	f200 80f0 	bhi.w	800c962 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c782:	a201      	add	r2, pc, #4	; (adr r2, 800c788 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c788:	0800c7dd 	.word	0x0800c7dd
 800c78c:	0800c963 	.word	0x0800c963
 800c790:	0800c963 	.word	0x0800c963
 800c794:	0800c963 	.word	0x0800c963
 800c798:	0800c81d 	.word	0x0800c81d
 800c79c:	0800c963 	.word	0x0800c963
 800c7a0:	0800c963 	.word	0x0800c963
 800c7a4:	0800c963 	.word	0x0800c963
 800c7a8:	0800c85f 	.word	0x0800c85f
 800c7ac:	0800c963 	.word	0x0800c963
 800c7b0:	0800c963 	.word	0x0800c963
 800c7b4:	0800c963 	.word	0x0800c963
 800c7b8:	0800c89f 	.word	0x0800c89f
 800c7bc:	0800c963 	.word	0x0800c963
 800c7c0:	0800c963 	.word	0x0800c963
 800c7c4:	0800c963 	.word	0x0800c963
 800c7c8:	0800c8e1 	.word	0x0800c8e1
 800c7cc:	0800c963 	.word	0x0800c963
 800c7d0:	0800c963 	.word	0x0800c963
 800c7d4:	0800c963 	.word	0x0800c963
 800c7d8:	0800c921 	.word	0x0800c921
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	68b9      	ldr	r1, [r7, #8]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 fac6 	bl	800cd74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	699a      	ldr	r2, [r3, #24]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f042 0208 	orr.w	r2, r2, #8
 800c7f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	699a      	ldr	r2, [r3, #24]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f022 0204 	bic.w	r2, r2, #4
 800c806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	6999      	ldr	r1, [r3, #24]
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	691a      	ldr	r2, [r3, #16]
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	430a      	orrs	r2, r1
 800c818:	619a      	str	r2, [r3, #24]
      break;
 800c81a:	e0a5      	b.n	800c968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68b9      	ldr	r1, [r7, #8]
 800c822:	4618      	mov	r0, r3
 800c824:	f000 fb36 	bl	800ce94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	699a      	ldr	r2, [r3, #24]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	699a      	ldr	r2, [r3, #24]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6999      	ldr	r1, [r3, #24]
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	691b      	ldr	r3, [r3, #16]
 800c852:	021a      	lsls	r2, r3, #8
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	430a      	orrs	r2, r1
 800c85a:	619a      	str	r2, [r3, #24]
      break;
 800c85c:	e084      	b.n	800c968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	68b9      	ldr	r1, [r7, #8]
 800c864:	4618      	mov	r0, r3
 800c866:	f000 fb9f 	bl	800cfa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	69da      	ldr	r2, [r3, #28]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f042 0208 	orr.w	r2, r2, #8
 800c878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	69da      	ldr	r2, [r3, #28]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f022 0204 	bic.w	r2, r2, #4
 800c888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	69d9      	ldr	r1, [r3, #28]
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	691a      	ldr	r2, [r3, #16]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	430a      	orrs	r2, r1
 800c89a:	61da      	str	r2, [r3, #28]
      break;
 800c89c:	e064      	b.n	800c968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	68b9      	ldr	r1, [r7, #8]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f000 fc07 	bl	800d0b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	69da      	ldr	r2, [r3, #28]
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	69da      	ldr	r2, [r3, #28]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	69d9      	ldr	r1, [r3, #28]
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	691b      	ldr	r3, [r3, #16]
 800c8d4:	021a      	lsls	r2, r3, #8
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	430a      	orrs	r2, r1
 800c8dc:	61da      	str	r2, [r3, #28]
      break;
 800c8de:	e043      	b.n	800c968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	68b9      	ldr	r1, [r7, #8]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f000 fc50 	bl	800d18c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f042 0208 	orr.w	r2, r2, #8
 800c8fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f022 0204 	bic.w	r2, r2, #4
 800c90a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	691a      	ldr	r2, [r3, #16]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	430a      	orrs	r2, r1
 800c91c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c91e:	e023      	b.n	800c968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	68b9      	ldr	r1, [r7, #8]
 800c926:	4618      	mov	r0, r3
 800c928:	f000 fc94 	bl	800d254 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c93a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c94a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	021a      	lsls	r2, r3, #8
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	430a      	orrs	r2, r1
 800c95e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c960:	e002      	b.n	800c968 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c962:	2301      	movs	r3, #1
 800c964:	75fb      	strb	r3, [r7, #23]
      break;
 800c966:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c970:	7dfb      	ldrb	r3, [r7, #23]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3718      	adds	r7, #24
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop

0800c97c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c986:	2300      	movs	r3, #0
 800c988:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c990:	2b01      	cmp	r3, #1
 800c992:	d101      	bne.n	800c998 <HAL_TIM_ConfigClockSource+0x1c>
 800c994:	2302      	movs	r3, #2
 800c996:	e0dc      	b.n	800cb52 <HAL_TIM_ConfigClockSource+0x1d6>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2201      	movs	r2, #1
 800c99c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2202      	movs	r2, #2
 800c9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	4b6a      	ldr	r3, [pc, #424]	; (800cb5c <HAL_TIM_ConfigClockSource+0x1e0>)
 800c9b4:	4013      	ands	r3, r2
 800c9b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c9be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a64      	ldr	r2, [pc, #400]	; (800cb60 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	f000 80a9 	beq.w	800cb26 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9d4:	4a62      	ldr	r2, [pc, #392]	; (800cb60 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	f200 80ae 	bhi.w	800cb38 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9dc:	4a61      	ldr	r2, [pc, #388]	; (800cb64 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	f000 80a1 	beq.w	800cb26 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9e4:	4a5f      	ldr	r2, [pc, #380]	; (800cb64 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	f200 80a6 	bhi.w	800cb38 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9ec:	4a5e      	ldr	r2, [pc, #376]	; (800cb68 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	f000 8099 	beq.w	800cb26 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9f4:	4a5c      	ldr	r2, [pc, #368]	; (800cb68 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	f200 809e 	bhi.w	800cb38 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ca00:	f000 8091 	beq.w	800cb26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ca08:	f200 8096 	bhi.w	800cb38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca10:	f000 8089 	beq.w	800cb26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca18:	f200 808e 	bhi.w	800cb38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca20:	d03e      	beq.n	800caa0 <HAL_TIM_ConfigClockSource+0x124>
 800ca22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca26:	f200 8087 	bhi.w	800cb38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca2e:	f000 8086 	beq.w	800cb3e <HAL_TIM_ConfigClockSource+0x1c2>
 800ca32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca36:	d87f      	bhi.n	800cb38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca38:	2b70      	cmp	r3, #112	; 0x70
 800ca3a:	d01a      	beq.n	800ca72 <HAL_TIM_ConfigClockSource+0xf6>
 800ca3c:	2b70      	cmp	r3, #112	; 0x70
 800ca3e:	d87b      	bhi.n	800cb38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca40:	2b60      	cmp	r3, #96	; 0x60
 800ca42:	d050      	beq.n	800cae6 <HAL_TIM_ConfigClockSource+0x16a>
 800ca44:	2b60      	cmp	r3, #96	; 0x60
 800ca46:	d877      	bhi.n	800cb38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca48:	2b50      	cmp	r3, #80	; 0x50
 800ca4a:	d03c      	beq.n	800cac6 <HAL_TIM_ConfigClockSource+0x14a>
 800ca4c:	2b50      	cmp	r3, #80	; 0x50
 800ca4e:	d873      	bhi.n	800cb38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca50:	2b40      	cmp	r3, #64	; 0x40
 800ca52:	d058      	beq.n	800cb06 <HAL_TIM_ConfigClockSource+0x18a>
 800ca54:	2b40      	cmp	r3, #64	; 0x40
 800ca56:	d86f      	bhi.n	800cb38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca58:	2b30      	cmp	r3, #48	; 0x30
 800ca5a:	d064      	beq.n	800cb26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca5c:	2b30      	cmp	r3, #48	; 0x30
 800ca5e:	d86b      	bhi.n	800cb38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca60:	2b20      	cmp	r3, #32
 800ca62:	d060      	beq.n	800cb26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca64:	2b20      	cmp	r3, #32
 800ca66:	d867      	bhi.n	800cb38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d05c      	beq.n	800cb26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca6c:	2b10      	cmp	r3, #16
 800ca6e:	d05a      	beq.n	800cb26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ca70:	e062      	b.n	800cb38 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6818      	ldr	r0, [r3, #0]
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	6899      	ldr	r1, [r3, #8]
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	685a      	ldr	r2, [r3, #4]
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	f000 fedf 	bl	800d844 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ca94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	609a      	str	r2, [r3, #8]
      break;
 800ca9e:	e04f      	b.n	800cb40 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6818      	ldr	r0, [r3, #0]
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	6899      	ldr	r1, [r3, #8]
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	685a      	ldr	r2, [r3, #4]
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	68db      	ldr	r3, [r3, #12]
 800cab0:	f000 fec8 	bl	800d844 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	689a      	ldr	r2, [r3, #8]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cac2:	609a      	str	r2, [r3, #8]
      break;
 800cac4:	e03c      	b.n	800cb40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6818      	ldr	r0, [r3, #0]
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	6859      	ldr	r1, [r3, #4]
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	461a      	mov	r2, r3
 800cad4:	f000 fd82 	bl	800d5dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2150      	movs	r1, #80	; 0x50
 800cade:	4618      	mov	r0, r3
 800cae0:	f000 fe92 	bl	800d808 <TIM_ITRx_SetConfig>
      break;
 800cae4:	e02c      	b.n	800cb40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6818      	ldr	r0, [r3, #0]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	6859      	ldr	r1, [r3, #4]
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	461a      	mov	r2, r3
 800caf4:	f000 fdde 	bl	800d6b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2160      	movs	r1, #96	; 0x60
 800cafe:	4618      	mov	r0, r3
 800cb00:	f000 fe82 	bl	800d808 <TIM_ITRx_SetConfig>
      break;
 800cb04:	e01c      	b.n	800cb40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6818      	ldr	r0, [r3, #0]
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	6859      	ldr	r1, [r3, #4]
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	68db      	ldr	r3, [r3, #12]
 800cb12:	461a      	mov	r2, r3
 800cb14:	f000 fd62 	bl	800d5dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2140      	movs	r1, #64	; 0x40
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 fe72 	bl	800d808 <TIM_ITRx_SetConfig>
      break;
 800cb24:	e00c      	b.n	800cb40 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4619      	mov	r1, r3
 800cb30:	4610      	mov	r0, r2
 800cb32:	f000 fe69 	bl	800d808 <TIM_ITRx_SetConfig>
      break;
 800cb36:	e003      	b.n	800cb40 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	73fb      	strb	r3, [r7, #15]
      break;
 800cb3c:	e000      	b.n	800cb40 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cb3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2201      	movs	r2, #1
 800cb44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	ffceff88 	.word	0xffceff88
 800cb60:	00100040 	.word	0x00100040
 800cb64:	00100030 	.word	0x00100030
 800cb68:	00100020 	.word	0x00100020

0800cb6c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d101      	bne.n	800cb84 <HAL_TIM_SlaveConfigSynchro+0x18>
 800cb80:	2302      	movs	r3, #2
 800cb82:	e031      	b.n	800cbe8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2202      	movs	r2, #2
 800cb90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800cb94:	6839      	ldr	r1, [r7, #0]
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 fbc2 	bl	800d320 <TIM_SlaveTimer_SetConfig>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d009      	beq.n	800cbb6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2201      	movs	r2, #1
 800cba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e018      	b.n	800cbe8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	68da      	ldr	r2, [r3, #12]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cbc4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	68da      	ldr	r2, [r3, #12]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cbd4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2201      	movs	r2, #1
 800cbda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cbe6:	2300      	movs	r3, #0
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3708      	adds	r7, #8
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cbf8:	bf00      	nop
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cc0c:	bf00      	nop
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc20:	bf00      	nop
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cc34:	bf00      	nop
 800cc36:	370c      	adds	r7, #12
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	4a40      	ldr	r2, [pc, #256]	; (800cd54 <TIM_Base_SetConfig+0x114>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d013      	beq.n	800cc80 <TIM_Base_SetConfig+0x40>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc5e:	d00f      	beq.n	800cc80 <TIM_Base_SetConfig+0x40>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	4a3d      	ldr	r2, [pc, #244]	; (800cd58 <TIM_Base_SetConfig+0x118>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d00b      	beq.n	800cc80 <TIM_Base_SetConfig+0x40>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	4a3c      	ldr	r2, [pc, #240]	; (800cd5c <TIM_Base_SetConfig+0x11c>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d007      	beq.n	800cc80 <TIM_Base_SetConfig+0x40>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	4a3b      	ldr	r2, [pc, #236]	; (800cd60 <TIM_Base_SetConfig+0x120>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d003      	beq.n	800cc80 <TIM_Base_SetConfig+0x40>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	4a3a      	ldr	r2, [pc, #232]	; (800cd64 <TIM_Base_SetConfig+0x124>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d108      	bne.n	800cc92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4a2f      	ldr	r2, [pc, #188]	; (800cd54 <TIM_Base_SetConfig+0x114>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d01f      	beq.n	800ccda <TIM_Base_SetConfig+0x9a>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cca0:	d01b      	beq.n	800ccda <TIM_Base_SetConfig+0x9a>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4a2c      	ldr	r2, [pc, #176]	; (800cd58 <TIM_Base_SetConfig+0x118>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d017      	beq.n	800ccda <TIM_Base_SetConfig+0x9a>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4a2b      	ldr	r2, [pc, #172]	; (800cd5c <TIM_Base_SetConfig+0x11c>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d013      	beq.n	800ccda <TIM_Base_SetConfig+0x9a>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	4a2a      	ldr	r2, [pc, #168]	; (800cd60 <TIM_Base_SetConfig+0x120>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d00f      	beq.n	800ccda <TIM_Base_SetConfig+0x9a>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4a29      	ldr	r2, [pc, #164]	; (800cd64 <TIM_Base_SetConfig+0x124>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d00b      	beq.n	800ccda <TIM_Base_SetConfig+0x9a>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4a28      	ldr	r2, [pc, #160]	; (800cd68 <TIM_Base_SetConfig+0x128>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d007      	beq.n	800ccda <TIM_Base_SetConfig+0x9a>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	4a27      	ldr	r2, [pc, #156]	; (800cd6c <TIM_Base_SetConfig+0x12c>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d003      	beq.n	800ccda <TIM_Base_SetConfig+0x9a>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4a26      	ldr	r2, [pc, #152]	; (800cd70 <TIM_Base_SetConfig+0x130>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d108      	bne.n	800ccec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	68fa      	ldr	r2, [r7, #12]
 800cce8:	4313      	orrs	r3, r2
 800ccea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	695b      	ldr	r3, [r3, #20]
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	68fa      	ldr	r2, [r7, #12]
 800ccfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	689a      	ldr	r2, [r3, #8]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	4a10      	ldr	r2, [pc, #64]	; (800cd54 <TIM_Base_SetConfig+0x114>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d00f      	beq.n	800cd38 <TIM_Base_SetConfig+0xf8>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4a12      	ldr	r2, [pc, #72]	; (800cd64 <TIM_Base_SetConfig+0x124>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d00b      	beq.n	800cd38 <TIM_Base_SetConfig+0xf8>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4a11      	ldr	r2, [pc, #68]	; (800cd68 <TIM_Base_SetConfig+0x128>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d007      	beq.n	800cd38 <TIM_Base_SetConfig+0xf8>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	4a10      	ldr	r2, [pc, #64]	; (800cd6c <TIM_Base_SetConfig+0x12c>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d003      	beq.n	800cd38 <TIM_Base_SetConfig+0xf8>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4a0f      	ldr	r2, [pc, #60]	; (800cd70 <TIM_Base_SetConfig+0x130>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d103      	bne.n	800cd40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	691a      	ldr	r2, [r3, #16]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2201      	movs	r2, #1
 800cd44:	615a      	str	r2, [r3, #20]
}
 800cd46:	bf00      	nop
 800cd48:	3714      	adds	r7, #20
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	40010000 	.word	0x40010000
 800cd58:	40000400 	.word	0x40000400
 800cd5c:	40000800 	.word	0x40000800
 800cd60:	40000c00 	.word	0x40000c00
 800cd64:	40010400 	.word	0x40010400
 800cd68:	40014000 	.word	0x40014000
 800cd6c:	40014400 	.word	0x40014400
 800cd70:	40014800 	.word	0x40014800

0800cd74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b087      	sub	sp, #28
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	f023 0201 	bic.w	r2, r3, #1
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6a1b      	ldr	r3, [r3, #32]
 800cd8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	699b      	ldr	r3, [r3, #24]
 800cd9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	4b37      	ldr	r3, [pc, #220]	; (800ce7c <TIM_OC1_SetConfig+0x108>)
 800cda0:	4013      	ands	r3, r2
 800cda2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f023 0303 	bic.w	r3, r3, #3
 800cdaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	68fa      	ldr	r2, [r7, #12]
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	f023 0302 	bic.w	r3, r3, #2
 800cdbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	689b      	ldr	r3, [r3, #8]
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4a2d      	ldr	r2, [pc, #180]	; (800ce80 <TIM_OC1_SetConfig+0x10c>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d00f      	beq.n	800cdf0 <TIM_OC1_SetConfig+0x7c>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	4a2c      	ldr	r2, [pc, #176]	; (800ce84 <TIM_OC1_SetConfig+0x110>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d00b      	beq.n	800cdf0 <TIM_OC1_SetConfig+0x7c>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	4a2b      	ldr	r2, [pc, #172]	; (800ce88 <TIM_OC1_SetConfig+0x114>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d007      	beq.n	800cdf0 <TIM_OC1_SetConfig+0x7c>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	4a2a      	ldr	r2, [pc, #168]	; (800ce8c <TIM_OC1_SetConfig+0x118>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d003      	beq.n	800cdf0 <TIM_OC1_SetConfig+0x7c>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	4a29      	ldr	r2, [pc, #164]	; (800ce90 <TIM_OC1_SetConfig+0x11c>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d10c      	bne.n	800ce0a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	f023 0308 	bic.w	r3, r3, #8
 800cdf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	68db      	ldr	r3, [r3, #12]
 800cdfc:	697a      	ldr	r2, [r7, #20]
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	f023 0304 	bic.w	r3, r3, #4
 800ce08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4a1c      	ldr	r2, [pc, #112]	; (800ce80 <TIM_OC1_SetConfig+0x10c>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d00f      	beq.n	800ce32 <TIM_OC1_SetConfig+0xbe>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	4a1b      	ldr	r2, [pc, #108]	; (800ce84 <TIM_OC1_SetConfig+0x110>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d00b      	beq.n	800ce32 <TIM_OC1_SetConfig+0xbe>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4a1a      	ldr	r2, [pc, #104]	; (800ce88 <TIM_OC1_SetConfig+0x114>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d007      	beq.n	800ce32 <TIM_OC1_SetConfig+0xbe>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	4a19      	ldr	r2, [pc, #100]	; (800ce8c <TIM_OC1_SetConfig+0x118>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d003      	beq.n	800ce32 <TIM_OC1_SetConfig+0xbe>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	4a18      	ldr	r2, [pc, #96]	; (800ce90 <TIM_OC1_SetConfig+0x11c>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d111      	bne.n	800ce56 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	695b      	ldr	r3, [r3, #20]
 800ce46:	693a      	ldr	r2, [r7, #16]
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	699b      	ldr	r3, [r3, #24]
 800ce50:	693a      	ldr	r2, [r7, #16]
 800ce52:	4313      	orrs	r3, r2
 800ce54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	693a      	ldr	r2, [r7, #16]
 800ce5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	685a      	ldr	r2, [r3, #4]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	697a      	ldr	r2, [r7, #20]
 800ce6e:	621a      	str	r2, [r3, #32]
}
 800ce70:	bf00      	nop
 800ce72:	371c      	adds	r7, #28
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr
 800ce7c:	fffeff8f 	.word	0xfffeff8f
 800ce80:	40010000 	.word	0x40010000
 800ce84:	40010400 	.word	0x40010400
 800ce88:	40014000 	.word	0x40014000
 800ce8c:	40014400 	.word	0x40014400
 800ce90:	40014800 	.word	0x40014800

0800ce94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b087      	sub	sp, #28
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6a1b      	ldr	r3, [r3, #32]
 800cea2:	f023 0210 	bic.w	r2, r3, #16
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6a1b      	ldr	r3, [r3, #32]
 800ceae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	699b      	ldr	r3, [r3, #24]
 800ceba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	4b34      	ldr	r3, [pc, #208]	; (800cf90 <TIM_OC2_SetConfig+0xfc>)
 800cec0:	4013      	ands	r3, r2
 800cec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ceca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	021b      	lsls	r3, r3, #8
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	4313      	orrs	r3, r2
 800ced6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	f023 0320 	bic.w	r3, r3, #32
 800cede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	011b      	lsls	r3, r3, #4
 800cee6:	697a      	ldr	r2, [r7, #20]
 800cee8:	4313      	orrs	r3, r2
 800ceea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	4a29      	ldr	r2, [pc, #164]	; (800cf94 <TIM_OC2_SetConfig+0x100>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d003      	beq.n	800cefc <TIM_OC2_SetConfig+0x68>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	4a28      	ldr	r2, [pc, #160]	; (800cf98 <TIM_OC2_SetConfig+0x104>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d10d      	bne.n	800cf18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	68db      	ldr	r3, [r3, #12]
 800cf08:	011b      	lsls	r3, r3, #4
 800cf0a:	697a      	ldr	r2, [r7, #20]
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	4a1e      	ldr	r2, [pc, #120]	; (800cf94 <TIM_OC2_SetConfig+0x100>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d00f      	beq.n	800cf40 <TIM_OC2_SetConfig+0xac>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4a1d      	ldr	r2, [pc, #116]	; (800cf98 <TIM_OC2_SetConfig+0x104>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d00b      	beq.n	800cf40 <TIM_OC2_SetConfig+0xac>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4a1c      	ldr	r2, [pc, #112]	; (800cf9c <TIM_OC2_SetConfig+0x108>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d007      	beq.n	800cf40 <TIM_OC2_SetConfig+0xac>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	4a1b      	ldr	r2, [pc, #108]	; (800cfa0 <TIM_OC2_SetConfig+0x10c>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d003      	beq.n	800cf40 <TIM_OC2_SetConfig+0xac>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	4a1a      	ldr	r2, [pc, #104]	; (800cfa4 <TIM_OC2_SetConfig+0x110>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d113      	bne.n	800cf68 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cf46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	695b      	ldr	r3, [r3, #20]
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	693a      	ldr	r2, [r7, #16]
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	699b      	ldr	r3, [r3, #24]
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	693a      	ldr	r2, [r7, #16]
 800cf64:	4313      	orrs	r3, r2
 800cf66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	693a      	ldr	r2, [r7, #16]
 800cf6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	68fa      	ldr	r2, [r7, #12]
 800cf72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	685a      	ldr	r2, [r3, #4]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	697a      	ldr	r2, [r7, #20]
 800cf80:	621a      	str	r2, [r3, #32]
}
 800cf82:	bf00      	nop
 800cf84:	371c      	adds	r7, #28
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	feff8fff 	.word	0xfeff8fff
 800cf94:	40010000 	.word	0x40010000
 800cf98:	40010400 	.word	0x40010400
 800cf9c:	40014000 	.word	0x40014000
 800cfa0:	40014400 	.word	0x40014400
 800cfa4:	40014800 	.word	0x40014800

0800cfa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b087      	sub	sp, #28
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6a1b      	ldr	r3, [r3, #32]
 800cfb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6a1b      	ldr	r3, [r3, #32]
 800cfc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	69db      	ldr	r3, [r3, #28]
 800cfce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cfd0:	68fa      	ldr	r2, [r7, #12]
 800cfd2:	4b33      	ldr	r3, [pc, #204]	; (800d0a0 <TIM_OC3_SetConfig+0xf8>)
 800cfd4:	4013      	ands	r3, r2
 800cfd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f023 0303 	bic.w	r3, r3, #3
 800cfde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	021b      	lsls	r3, r3, #8
 800cff8:	697a      	ldr	r2, [r7, #20]
 800cffa:	4313      	orrs	r3, r2
 800cffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	4a28      	ldr	r2, [pc, #160]	; (800d0a4 <TIM_OC3_SetConfig+0xfc>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d003      	beq.n	800d00e <TIM_OC3_SetConfig+0x66>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	4a27      	ldr	r2, [pc, #156]	; (800d0a8 <TIM_OC3_SetConfig+0x100>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d10d      	bne.n	800d02a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	021b      	lsls	r3, r3, #8
 800d01c:	697a      	ldr	r2, [r7, #20]
 800d01e:	4313      	orrs	r3, r2
 800d020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	4a1d      	ldr	r2, [pc, #116]	; (800d0a4 <TIM_OC3_SetConfig+0xfc>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d00f      	beq.n	800d052 <TIM_OC3_SetConfig+0xaa>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4a1c      	ldr	r2, [pc, #112]	; (800d0a8 <TIM_OC3_SetConfig+0x100>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d00b      	beq.n	800d052 <TIM_OC3_SetConfig+0xaa>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	4a1b      	ldr	r2, [pc, #108]	; (800d0ac <TIM_OC3_SetConfig+0x104>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d007      	beq.n	800d052 <TIM_OC3_SetConfig+0xaa>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4a1a      	ldr	r2, [pc, #104]	; (800d0b0 <TIM_OC3_SetConfig+0x108>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d003      	beq.n	800d052 <TIM_OC3_SetConfig+0xaa>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4a19      	ldr	r2, [pc, #100]	; (800d0b4 <TIM_OC3_SetConfig+0x10c>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d113      	bne.n	800d07a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	695b      	ldr	r3, [r3, #20]
 800d066:	011b      	lsls	r3, r3, #4
 800d068:	693a      	ldr	r2, [r7, #16]
 800d06a:	4313      	orrs	r3, r2
 800d06c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	699b      	ldr	r3, [r3, #24]
 800d072:	011b      	lsls	r3, r3, #4
 800d074:	693a      	ldr	r2, [r7, #16]
 800d076:	4313      	orrs	r3, r2
 800d078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	693a      	ldr	r2, [r7, #16]
 800d07e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	68fa      	ldr	r2, [r7, #12]
 800d084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	685a      	ldr	r2, [r3, #4]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	697a      	ldr	r2, [r7, #20]
 800d092:	621a      	str	r2, [r3, #32]
}
 800d094:	bf00      	nop
 800d096:	371c      	adds	r7, #28
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr
 800d0a0:	fffeff8f 	.word	0xfffeff8f
 800d0a4:	40010000 	.word	0x40010000
 800d0a8:	40010400 	.word	0x40010400
 800d0ac:	40014000 	.word	0x40014000
 800d0b0:	40014400 	.word	0x40014400
 800d0b4:	40014800 	.word	0x40014800

0800d0b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b087      	sub	sp, #28
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6a1b      	ldr	r3, [r3, #32]
 800d0c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6a1b      	ldr	r3, [r3, #32]
 800d0d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	69db      	ldr	r3, [r3, #28]
 800d0de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d0e0:	68fa      	ldr	r2, [r7, #12]
 800d0e2:	4b24      	ldr	r3, [pc, #144]	; (800d174 <TIM_OC4_SetConfig+0xbc>)
 800d0e4:	4013      	ands	r3, r2
 800d0e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	021b      	lsls	r3, r3, #8
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	031b      	lsls	r3, r3, #12
 800d10a:	693a      	ldr	r2, [r7, #16]
 800d10c:	4313      	orrs	r3, r2
 800d10e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	4a19      	ldr	r2, [pc, #100]	; (800d178 <TIM_OC4_SetConfig+0xc0>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d00f      	beq.n	800d138 <TIM_OC4_SetConfig+0x80>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	4a18      	ldr	r2, [pc, #96]	; (800d17c <TIM_OC4_SetConfig+0xc4>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d00b      	beq.n	800d138 <TIM_OC4_SetConfig+0x80>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	4a17      	ldr	r2, [pc, #92]	; (800d180 <TIM_OC4_SetConfig+0xc8>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d007      	beq.n	800d138 <TIM_OC4_SetConfig+0x80>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	4a16      	ldr	r2, [pc, #88]	; (800d184 <TIM_OC4_SetConfig+0xcc>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d003      	beq.n	800d138 <TIM_OC4_SetConfig+0x80>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	4a15      	ldr	r2, [pc, #84]	; (800d188 <TIM_OC4_SetConfig+0xd0>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d109      	bne.n	800d14c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d13e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	695b      	ldr	r3, [r3, #20]
 800d144:	019b      	lsls	r3, r3, #6
 800d146:	697a      	ldr	r2, [r7, #20]
 800d148:	4313      	orrs	r3, r2
 800d14a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	697a      	ldr	r2, [r7, #20]
 800d150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	685a      	ldr	r2, [r3, #4]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	693a      	ldr	r2, [r7, #16]
 800d164:	621a      	str	r2, [r3, #32]
}
 800d166:	bf00      	nop
 800d168:	371c      	adds	r7, #28
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop
 800d174:	feff8fff 	.word	0xfeff8fff
 800d178:	40010000 	.word	0x40010000
 800d17c:	40010400 	.word	0x40010400
 800d180:	40014000 	.word	0x40014000
 800d184:	40014400 	.word	0x40014400
 800d188:	40014800 	.word	0x40014800

0800d18c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b087      	sub	sp, #28
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6a1b      	ldr	r3, [r3, #32]
 800d19a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6a1b      	ldr	r3, [r3, #32]
 800d1a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d1b4:	68fa      	ldr	r2, [r7, #12]
 800d1b6:	4b21      	ldr	r3, [pc, #132]	; (800d23c <TIM_OC5_SetConfig+0xb0>)
 800d1b8:	4013      	ands	r3, r2
 800d1ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d1cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	041b      	lsls	r3, r3, #16
 800d1d4:	693a      	ldr	r2, [r7, #16]
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	4a18      	ldr	r2, [pc, #96]	; (800d240 <TIM_OC5_SetConfig+0xb4>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d00f      	beq.n	800d202 <TIM_OC5_SetConfig+0x76>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	4a17      	ldr	r2, [pc, #92]	; (800d244 <TIM_OC5_SetConfig+0xb8>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d00b      	beq.n	800d202 <TIM_OC5_SetConfig+0x76>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	4a16      	ldr	r2, [pc, #88]	; (800d248 <TIM_OC5_SetConfig+0xbc>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d007      	beq.n	800d202 <TIM_OC5_SetConfig+0x76>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	4a15      	ldr	r2, [pc, #84]	; (800d24c <TIM_OC5_SetConfig+0xc0>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d003      	beq.n	800d202 <TIM_OC5_SetConfig+0x76>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	4a14      	ldr	r2, [pc, #80]	; (800d250 <TIM_OC5_SetConfig+0xc4>)
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d109      	bne.n	800d216 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d208:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	695b      	ldr	r3, [r3, #20]
 800d20e:	021b      	lsls	r3, r3, #8
 800d210:	697a      	ldr	r2, [r7, #20]
 800d212:	4313      	orrs	r3, r2
 800d214:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	697a      	ldr	r2, [r7, #20]
 800d21a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	68fa      	ldr	r2, [r7, #12]
 800d220:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	685a      	ldr	r2, [r3, #4]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	693a      	ldr	r2, [r7, #16]
 800d22e:	621a      	str	r2, [r3, #32]
}
 800d230:	bf00      	nop
 800d232:	371c      	adds	r7, #28
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr
 800d23c:	fffeff8f 	.word	0xfffeff8f
 800d240:	40010000 	.word	0x40010000
 800d244:	40010400 	.word	0x40010400
 800d248:	40014000 	.word	0x40014000
 800d24c:	40014400 	.word	0x40014400
 800d250:	40014800 	.word	0x40014800

0800d254 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d254:	b480      	push	{r7}
 800d256:	b087      	sub	sp, #28
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6a1b      	ldr	r3, [r3, #32]
 800d262:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6a1b      	ldr	r3, [r3, #32]
 800d26e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	4b22      	ldr	r3, [pc, #136]	; (800d308 <TIM_OC6_SetConfig+0xb4>)
 800d280:	4013      	ands	r3, r2
 800d282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	021b      	lsls	r3, r3, #8
 800d28a:	68fa      	ldr	r2, [r7, #12]
 800d28c:	4313      	orrs	r3, r2
 800d28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	689b      	ldr	r3, [r3, #8]
 800d29c:	051b      	lsls	r3, r3, #20
 800d29e:	693a      	ldr	r2, [r7, #16]
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	4a19      	ldr	r2, [pc, #100]	; (800d30c <TIM_OC6_SetConfig+0xb8>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d00f      	beq.n	800d2cc <TIM_OC6_SetConfig+0x78>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4a18      	ldr	r2, [pc, #96]	; (800d310 <TIM_OC6_SetConfig+0xbc>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d00b      	beq.n	800d2cc <TIM_OC6_SetConfig+0x78>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	4a17      	ldr	r2, [pc, #92]	; (800d314 <TIM_OC6_SetConfig+0xc0>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d007      	beq.n	800d2cc <TIM_OC6_SetConfig+0x78>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	4a16      	ldr	r2, [pc, #88]	; (800d318 <TIM_OC6_SetConfig+0xc4>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d003      	beq.n	800d2cc <TIM_OC6_SetConfig+0x78>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	4a15      	ldr	r2, [pc, #84]	; (800d31c <TIM_OC6_SetConfig+0xc8>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d109      	bne.n	800d2e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d2d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	695b      	ldr	r3, [r3, #20]
 800d2d8:	029b      	lsls	r3, r3, #10
 800d2da:	697a      	ldr	r2, [r7, #20]
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	697a      	ldr	r2, [r7, #20]
 800d2e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	685a      	ldr	r2, [r3, #4]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	693a      	ldr	r2, [r7, #16]
 800d2f8:	621a      	str	r2, [r3, #32]
}
 800d2fa:	bf00      	nop
 800d2fc:	371c      	adds	r7, #28
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop
 800d308:	feff8fff 	.word	0xfeff8fff
 800d30c:	40010000 	.word	0x40010000
 800d310:	40010400 	.word	0x40010400
 800d314:	40014000 	.word	0x40014000
 800d318:	40014400 	.word	0x40014400
 800d31c:	40014800 	.word	0x40014800

0800d320 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d32a:	2300      	movs	r3, #0
 800d32c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	4b65      	ldr	r3, [pc, #404]	; (800d4d0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800d33a:	4013      	ands	r3, r2
 800d33c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	693a      	ldr	r2, [r7, #16]
 800d344:	4313      	orrs	r3, r2
 800d346:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d348:	693a      	ldr	r2, [r7, #16]
 800d34a:	4b62      	ldr	r3, [pc, #392]	; (800d4d4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800d34c:	4013      	ands	r3, r2
 800d34e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	693a      	ldr	r2, [r7, #16]
 800d356:	4313      	orrs	r3, r2
 800d358:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	693a      	ldr	r2, [r7, #16]
 800d360:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	4a5c      	ldr	r2, [pc, #368]	; (800d4d8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	f000 80ab 	beq.w	800d4c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d36e:	4a5a      	ldr	r2, [pc, #360]	; (800d4d8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800d370:	4293      	cmp	r3, r2
 800d372:	f200 80a4 	bhi.w	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
 800d376:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d37a:	f000 80a3 	beq.w	800d4c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d37e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d382:	f200 809c 	bhi.w	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
 800d386:	4a55      	ldr	r2, [pc, #340]	; (800d4dc <TIM_SlaveTimer_SetConfig+0x1bc>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	f000 809b 	beq.w	800d4c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d38e:	4a53      	ldr	r2, [pc, #332]	; (800d4dc <TIM_SlaveTimer_SetConfig+0x1bc>)
 800d390:	4293      	cmp	r3, r2
 800d392:	f200 8094 	bhi.w	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
 800d396:	4a52      	ldr	r2, [pc, #328]	; (800d4e0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	f000 8093 	beq.w	800d4c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d39e:	4a50      	ldr	r2, [pc, #320]	; (800d4e0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	f200 808c 	bhi.w	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
 800d3a6:	4a4f      	ldr	r2, [pc, #316]	; (800d4e4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	f000 808b 	beq.w	800d4c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d3ae:	4a4d      	ldr	r2, [pc, #308]	; (800d4e4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	f200 8084 	bhi.w	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
 800d3b6:	4a4c      	ldr	r2, [pc, #304]	; (800d4e8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	f000 8083 	beq.w	800d4c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d3be:	4a4a      	ldr	r2, [pc, #296]	; (800d4e8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d87c      	bhi.n	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
 800d3c4:	4a49      	ldr	r2, [pc, #292]	; (800d4ec <TIM_SlaveTimer_SetConfig+0x1cc>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d07c      	beq.n	800d4c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d3ca:	4a48      	ldr	r2, [pc, #288]	; (800d4ec <TIM_SlaveTimer_SetConfig+0x1cc>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d876      	bhi.n	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
 800d3d0:	4a47      	ldr	r2, [pc, #284]	; (800d4f0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d076      	beq.n	800d4c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d3d6:	4a46      	ldr	r2, [pc, #280]	; (800d4f0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d870      	bhi.n	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
 800d3dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d3e0:	d070      	beq.n	800d4c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d3e2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d3e6:	d86a      	bhi.n	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
 800d3e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d3ec:	d06a      	beq.n	800d4c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d3ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d3f2:	d864      	bhi.n	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
 800d3f4:	2b70      	cmp	r3, #112	; 0x70
 800d3f6:	d01a      	beq.n	800d42e <TIM_SlaveTimer_SetConfig+0x10e>
 800d3f8:	2b70      	cmp	r3, #112	; 0x70
 800d3fa:	d860      	bhi.n	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
 800d3fc:	2b60      	cmp	r3, #96	; 0x60
 800d3fe:	d054      	beq.n	800d4aa <TIM_SlaveTimer_SetConfig+0x18a>
 800d400:	2b60      	cmp	r3, #96	; 0x60
 800d402:	d85c      	bhi.n	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
 800d404:	2b50      	cmp	r3, #80	; 0x50
 800d406:	d046      	beq.n	800d496 <TIM_SlaveTimer_SetConfig+0x176>
 800d408:	2b50      	cmp	r3, #80	; 0x50
 800d40a:	d858      	bhi.n	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
 800d40c:	2b40      	cmp	r3, #64	; 0x40
 800d40e:	d019      	beq.n	800d444 <TIM_SlaveTimer_SetConfig+0x124>
 800d410:	2b40      	cmp	r3, #64	; 0x40
 800d412:	d854      	bhi.n	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
 800d414:	2b30      	cmp	r3, #48	; 0x30
 800d416:	d055      	beq.n	800d4c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d418:	2b30      	cmp	r3, #48	; 0x30
 800d41a:	d850      	bhi.n	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
 800d41c:	2b20      	cmp	r3, #32
 800d41e:	d051      	beq.n	800d4c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d420:	2b20      	cmp	r3, #32
 800d422:	d84c      	bhi.n	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
 800d424:	2b00      	cmp	r3, #0
 800d426:	d04d      	beq.n	800d4c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d428:	2b10      	cmp	r3, #16
 800d42a:	d04b      	beq.n	800d4c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d42c:	e047      	b.n	800d4be <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6818      	ldr	r0, [r3, #0]
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	68d9      	ldr	r1, [r3, #12]
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	689a      	ldr	r2, [r3, #8]
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	691b      	ldr	r3, [r3, #16]
 800d43e:	f000 fa01 	bl	800d844 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800d442:	e040      	b.n	800d4c6 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2b05      	cmp	r3, #5
 800d44a:	d101      	bne.n	800d450 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800d44c:	2301      	movs	r3, #1
 800d44e:	e03b      	b.n	800d4c8 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	6a1b      	ldr	r3, [r3, #32]
 800d456:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	6a1a      	ldr	r2, [r3, #32]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f022 0201 	bic.w	r2, r2, #1
 800d466:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	699b      	ldr	r3, [r3, #24]
 800d46e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d476:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	691b      	ldr	r3, [r3, #16]
 800d47c:	011b      	lsls	r3, r3, #4
 800d47e:	68ba      	ldr	r2, [r7, #8]
 800d480:	4313      	orrs	r3, r2
 800d482:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	68ba      	ldr	r2, [r7, #8]
 800d48a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	68fa      	ldr	r2, [r7, #12]
 800d492:	621a      	str	r2, [r3, #32]
      break;
 800d494:	e017      	b.n	800d4c6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6818      	ldr	r0, [r3, #0]
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	6899      	ldr	r1, [r3, #8]
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	691b      	ldr	r3, [r3, #16]
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	f000 f89a 	bl	800d5dc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800d4a8:	e00d      	b.n	800d4c6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6818      	ldr	r0, [r3, #0]
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	6899      	ldr	r1, [r3, #8]
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	691b      	ldr	r3, [r3, #16]
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	f000 f8fc 	bl	800d6b4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800d4bc:	e003      	b.n	800d4c6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	75fb      	strb	r3, [r7, #23]
      break;
 800d4c2:	e000      	b.n	800d4c6 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800d4c4:	bf00      	nop
  }

  return status;
 800d4c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3718      	adds	r7, #24
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	ffcfff8f 	.word	0xffcfff8f
 800d4d4:	fffefff8 	.word	0xfffefff8
 800d4d8:	00200010 	.word	0x00200010
 800d4dc:	00100070 	.word	0x00100070
 800d4e0:	00100060 	.word	0x00100060
 800d4e4:	00100050 	.word	0x00100050
 800d4e8:	00100040 	.word	0x00100040
 800d4ec:	00100030 	.word	0x00100030
 800d4f0:	00100020 	.word	0x00100020

0800d4f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b087      	sub	sp, #28
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
 800d500:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	f023 0201 	bic.w	r2, r3, #1
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	699b      	ldr	r3, [r3, #24]
 800d512:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6a1b      	ldr	r3, [r3, #32]
 800d518:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	4a28      	ldr	r2, [pc, #160]	; (800d5c0 <TIM_TI1_SetConfig+0xcc>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d01b      	beq.n	800d55a <TIM_TI1_SetConfig+0x66>
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d528:	d017      	beq.n	800d55a <TIM_TI1_SetConfig+0x66>
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	4a25      	ldr	r2, [pc, #148]	; (800d5c4 <TIM_TI1_SetConfig+0xd0>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d013      	beq.n	800d55a <TIM_TI1_SetConfig+0x66>
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	4a24      	ldr	r2, [pc, #144]	; (800d5c8 <TIM_TI1_SetConfig+0xd4>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d00f      	beq.n	800d55a <TIM_TI1_SetConfig+0x66>
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	4a23      	ldr	r2, [pc, #140]	; (800d5cc <TIM_TI1_SetConfig+0xd8>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d00b      	beq.n	800d55a <TIM_TI1_SetConfig+0x66>
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	4a22      	ldr	r2, [pc, #136]	; (800d5d0 <TIM_TI1_SetConfig+0xdc>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d007      	beq.n	800d55a <TIM_TI1_SetConfig+0x66>
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	4a21      	ldr	r2, [pc, #132]	; (800d5d4 <TIM_TI1_SetConfig+0xe0>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d003      	beq.n	800d55a <TIM_TI1_SetConfig+0x66>
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	4a20      	ldr	r2, [pc, #128]	; (800d5d8 <TIM_TI1_SetConfig+0xe4>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d101      	bne.n	800d55e <TIM_TI1_SetConfig+0x6a>
 800d55a:	2301      	movs	r3, #1
 800d55c:	e000      	b.n	800d560 <TIM_TI1_SetConfig+0x6c>
 800d55e:	2300      	movs	r3, #0
 800d560:	2b00      	cmp	r3, #0
 800d562:	d008      	beq.n	800d576 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	f023 0303 	bic.w	r3, r3, #3
 800d56a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d56c:	697a      	ldr	r2, [r7, #20]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	4313      	orrs	r3, r2
 800d572:	617b      	str	r3, [r7, #20]
 800d574:	e003      	b.n	800d57e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	f043 0301 	orr.w	r3, r3, #1
 800d57c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d584:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	011b      	lsls	r3, r3, #4
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	697a      	ldr	r2, [r7, #20]
 800d58e:	4313      	orrs	r3, r2
 800d590:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	f023 030a 	bic.w	r3, r3, #10
 800d598:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	f003 030a 	and.w	r3, r3, #10
 800d5a0:	693a      	ldr	r2, [r7, #16]
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	697a      	ldr	r2, [r7, #20]
 800d5aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	693a      	ldr	r2, [r7, #16]
 800d5b0:	621a      	str	r2, [r3, #32]
}
 800d5b2:	bf00      	nop
 800d5b4:	371c      	adds	r7, #28
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	40010000 	.word	0x40010000
 800d5c4:	40000400 	.word	0x40000400
 800d5c8:	40000800 	.word	0x40000800
 800d5cc:	40000c00 	.word	0x40000c00
 800d5d0:	40010400 	.word	0x40010400
 800d5d4:	40001800 	.word	0x40001800
 800d5d8:	40014000 	.word	0x40014000

0800d5dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b087      	sub	sp, #28
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	6a1b      	ldr	r3, [r3, #32]
 800d5ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6a1b      	ldr	r3, [r3, #32]
 800d5f2:	f023 0201 	bic.w	r2, r3, #1
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	699b      	ldr	r3, [r3, #24]
 800d5fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	011b      	lsls	r3, r3, #4
 800d60c:	693a      	ldr	r2, [r7, #16]
 800d60e:	4313      	orrs	r3, r2
 800d610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	f023 030a 	bic.w	r3, r3, #10
 800d618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d61a:	697a      	ldr	r2, [r7, #20]
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	4313      	orrs	r3, r2
 800d620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	693a      	ldr	r2, [r7, #16]
 800d626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	697a      	ldr	r2, [r7, #20]
 800d62c:	621a      	str	r2, [r3, #32]
}
 800d62e:	bf00      	nop
 800d630:	371c      	adds	r7, #28
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr

0800d63a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d63a:	b480      	push	{r7}
 800d63c:	b087      	sub	sp, #28
 800d63e:	af00      	add	r7, sp, #0
 800d640:	60f8      	str	r0, [r7, #12]
 800d642:	60b9      	str	r1, [r7, #8]
 800d644:	607a      	str	r2, [r7, #4]
 800d646:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	6a1b      	ldr	r3, [r3, #32]
 800d64c:	f023 0210 	bic.w	r2, r3, #16
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	699b      	ldr	r3, [r3, #24]
 800d658:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	6a1b      	ldr	r3, [r3, #32]
 800d65e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d666:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	021b      	lsls	r3, r3, #8
 800d66c:	697a      	ldr	r2, [r7, #20]
 800d66e:	4313      	orrs	r3, r2
 800d670:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d678:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	031b      	lsls	r3, r3, #12
 800d67e:	b29b      	uxth	r3, r3
 800d680:	697a      	ldr	r2, [r7, #20]
 800d682:	4313      	orrs	r3, r2
 800d684:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d68c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	011b      	lsls	r3, r3, #4
 800d692:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d696:	693a      	ldr	r2, [r7, #16]
 800d698:	4313      	orrs	r3, r2
 800d69a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	697a      	ldr	r2, [r7, #20]
 800d6a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	693a      	ldr	r2, [r7, #16]
 800d6a6:	621a      	str	r2, [r3, #32]
}
 800d6a8:	bf00      	nop
 800d6aa:	371c      	adds	r7, #28
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b2:	4770      	bx	lr

0800d6b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b087      	sub	sp, #28
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6a1b      	ldr	r3, [r3, #32]
 800d6c4:	f023 0210 	bic.w	r2, r3, #16
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	699b      	ldr	r3, [r3, #24]
 800d6d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	6a1b      	ldr	r3, [r3, #32]
 800d6d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d6de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	031b      	lsls	r3, r3, #12
 800d6e4:	697a      	ldr	r2, [r7, #20]
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d6f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	011b      	lsls	r3, r3, #4
 800d6f6:	693a      	ldr	r2, [r7, #16]
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	697a      	ldr	r2, [r7, #20]
 800d700:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	693a      	ldr	r2, [r7, #16]
 800d706:	621a      	str	r2, [r3, #32]
}
 800d708:	bf00      	nop
 800d70a:	371c      	adds	r7, #28
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr

0800d714 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d714:	b480      	push	{r7}
 800d716:	b087      	sub	sp, #28
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
 800d720:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6a1b      	ldr	r3, [r3, #32]
 800d726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	69db      	ldr	r3, [r3, #28]
 800d732:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6a1b      	ldr	r3, [r3, #32]
 800d738:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	f023 0303 	bic.w	r3, r3, #3
 800d740:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d742:	697a      	ldr	r2, [r7, #20]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	4313      	orrs	r3, r2
 800d748:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d750:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	011b      	lsls	r3, r3, #4
 800d756:	b2db      	uxtb	r3, r3
 800d758:	697a      	ldr	r2, [r7, #20]
 800d75a:	4313      	orrs	r3, r2
 800d75c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d764:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	021b      	lsls	r3, r3, #8
 800d76a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800d76e:	693a      	ldr	r2, [r7, #16]
 800d770:	4313      	orrs	r3, r2
 800d772:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	697a      	ldr	r2, [r7, #20]
 800d778:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	693a      	ldr	r2, [r7, #16]
 800d77e:	621a      	str	r2, [r3, #32]
}
 800d780:	bf00      	nop
 800d782:	371c      	adds	r7, #28
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b087      	sub	sp, #28
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
 800d798:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	6a1b      	ldr	r3, [r3, #32]
 800d79e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	69db      	ldr	r3, [r3, #28]
 800d7aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6a1b      	ldr	r3, [r3, #32]
 800d7b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	021b      	lsls	r3, r3, #8
 800d7be:	697a      	ldr	r2, [r7, #20]
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d7ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	031b      	lsls	r3, r3, #12
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	697a      	ldr	r2, [r7, #20]
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800d7de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	031b      	lsls	r3, r3, #12
 800d7e4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800d7e8:	693a      	ldr	r2, [r7, #16]
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	697a      	ldr	r2, [r7, #20]
 800d7f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	693a      	ldr	r2, [r7, #16]
 800d7f8:	621a      	str	r2, [r3, #32]
}
 800d7fa:	bf00      	nop
 800d7fc:	371c      	adds	r7, #28
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
	...

0800d808 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	689b      	ldr	r3, [r3, #8]
 800d816:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	4b09      	ldr	r3, [pc, #36]	; (800d840 <TIM_ITRx_SetConfig+0x38>)
 800d81c:	4013      	ands	r3, r2
 800d81e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d820:	683a      	ldr	r2, [r7, #0]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	4313      	orrs	r3, r2
 800d826:	f043 0307 	orr.w	r3, r3, #7
 800d82a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	68fa      	ldr	r2, [r7, #12]
 800d830:	609a      	str	r2, [r3, #8]
}
 800d832:	bf00      	nop
 800d834:	3714      	adds	r7, #20
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	ffcfff8f 	.word	0xffcfff8f

0800d844 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d844:	b480      	push	{r7}
 800d846:	b087      	sub	sp, #28
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	607a      	str	r2, [r7, #4]
 800d850:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	689b      	ldr	r3, [r3, #8]
 800d856:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d85e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	021a      	lsls	r2, r3, #8
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	431a      	orrs	r2, r3
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	4313      	orrs	r3, r2
 800d86c:	697a      	ldr	r2, [r7, #20]
 800d86e:	4313      	orrs	r3, r2
 800d870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	697a      	ldr	r2, [r7, #20]
 800d876:	609a      	str	r2, [r3, #8]
}
 800d878:	bf00      	nop
 800d87a:	371c      	adds	r7, #28
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr

0800d884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d894:	2b01      	cmp	r3, #1
 800d896:	d101      	bne.n	800d89c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d898:	2302      	movs	r3, #2
 800d89a:	e06d      	b.n	800d978 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2202      	movs	r2, #2
 800d8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	689b      	ldr	r3, [r3, #8]
 800d8ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a30      	ldr	r2, [pc, #192]	; (800d984 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d004      	beq.n	800d8d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4a2f      	ldr	r2, [pc, #188]	; (800d988 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d108      	bne.n	800d8e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d8d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	68fa      	ldr	r2, [r7, #12]
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	68fa      	ldr	r2, [r7, #12]
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	68fa      	ldr	r2, [r7, #12]
 800d8fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a20      	ldr	r2, [pc, #128]	; (800d984 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d022      	beq.n	800d94c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d90e:	d01d      	beq.n	800d94c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4a1d      	ldr	r2, [pc, #116]	; (800d98c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d018      	beq.n	800d94c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4a1c      	ldr	r2, [pc, #112]	; (800d990 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d013      	beq.n	800d94c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4a1a      	ldr	r2, [pc, #104]	; (800d994 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d00e      	beq.n	800d94c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a15      	ldr	r2, [pc, #84]	; (800d988 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d009      	beq.n	800d94c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a16      	ldr	r2, [pc, #88]	; (800d998 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d004      	beq.n	800d94c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a15      	ldr	r2, [pc, #84]	; (800d99c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d10c      	bne.n	800d966 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d952:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	689b      	ldr	r3, [r3, #8]
 800d958:	68ba      	ldr	r2, [r7, #8]
 800d95a:	4313      	orrs	r3, r2
 800d95c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	68ba      	ldr	r2, [r7, #8]
 800d964:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2201      	movs	r2, #1
 800d96a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2200      	movs	r2, #0
 800d972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d976:	2300      	movs	r3, #0
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3714      	adds	r7, #20
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr
 800d984:	40010000 	.word	0x40010000
 800d988:	40010400 	.word	0x40010400
 800d98c:	40000400 	.word	0x40000400
 800d990:	40000800 	.word	0x40000800
 800d994:	40000c00 	.word	0x40000c00
 800d998:	40001800 	.word	0x40001800
 800d99c:	40014000 	.word	0x40014000

0800d9a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d101      	bne.n	800d9bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d9b8:	2302      	movs	r3, #2
 800d9ba:	e087      	b.n	800dacc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	689b      	ldr	r3, [r3, #8]
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	4313      	orrs	r3, r2
 800d9ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	691b      	ldr	r3, [r3, #16]
 800da06:	4313      	orrs	r3, r2
 800da08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	695b      	ldr	r3, [r3, #20]
 800da14:	4313      	orrs	r3, r2
 800da16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da22:	4313      	orrs	r3, r2
 800da24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	699b      	ldr	r3, [r3, #24]
 800da30:	041b      	lsls	r3, r3, #16
 800da32:	4313      	orrs	r3, r2
 800da34:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4a27      	ldr	r2, [pc, #156]	; (800dad8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d004      	beq.n	800da4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4a25      	ldr	r2, [pc, #148]	; (800dadc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d106      	bne.n	800da58 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	69db      	ldr	r3, [r3, #28]
 800da54:	4313      	orrs	r3, r2
 800da56:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a1e      	ldr	r2, [pc, #120]	; (800dad8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d004      	beq.n	800da6c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a1d      	ldr	r2, [pc, #116]	; (800dadc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d126      	bne.n	800daba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da76:	051b      	lsls	r3, r3, #20
 800da78:	4313      	orrs	r3, r2
 800da7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	6a1b      	ldr	r3, [r3, #32]
 800da86:	4313      	orrs	r3, r2
 800da88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da94:	4313      	orrs	r3, r2
 800da96:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a0e      	ldr	r2, [pc, #56]	; (800dad8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d004      	beq.n	800daac <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a0d      	ldr	r2, [pc, #52]	; (800dadc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d106      	bne.n	800daba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab6:	4313      	orrs	r3, r2
 800dab8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	68fa      	ldr	r2, [r7, #12]
 800dac0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2200      	movs	r2, #0
 800dac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	40010000 	.word	0x40010000
 800dadc:	40010400 	.word	0x40010400

0800dae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b083      	sub	sp, #12
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dae8:	bf00      	nop
 800daea:	370c      	adds	r7, #12
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr

0800daf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dafc:	bf00      	nop
 800dafe:	370c      	adds	r7, #12
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr

0800db08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800db08:	b480      	push	{r7}
 800db0a:	b083      	sub	sp, #12
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800db10:	bf00      	nop
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d101      	bne.n	800db2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db2a:	2301      	movs	r3, #1
 800db2c:	e042      	b.n	800dbb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db34:	2b00      	cmp	r3, #0
 800db36:	d106      	bne.n	800db46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2200      	movs	r2, #0
 800db3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f7f4 ff49 	bl	80029d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2224      	movs	r2, #36	; 0x24
 800db4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f022 0201 	bic.w	r2, r2, #1
 800db5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f000 fcd6 	bl	800e510 <UART_SetConfig>
 800db64:	4603      	mov	r3, r0
 800db66:	2b01      	cmp	r3, #1
 800db68:	d101      	bne.n	800db6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800db6a:	2301      	movs	r3, #1
 800db6c:	e022      	b.n	800dbb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db72:	2b00      	cmp	r3, #0
 800db74:	d002      	beq.n	800db7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f001 fb36 	bl	800f1e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	685a      	ldr	r2, [r3, #4]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	689a      	ldr	r2, [r3, #8]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800db9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	681a      	ldr	r2, [r3, #0]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f042 0201 	orr.w	r2, r2, #1
 800dbaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f001 fbbd 	bl	800f32c <UART_CheckIdleState>
 800dbb2:	4603      	mov	r3, r0
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3708      	adds	r7, #8
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b08a      	sub	sp, #40	; 0x28
 800dbc0:	af02      	add	r7, sp, #8
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	603b      	str	r3, [r7, #0]
 800dbc8:	4613      	mov	r3, r2
 800dbca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbd2:	2b20      	cmp	r3, #32
 800dbd4:	f040 8083 	bne.w	800dcde <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d002      	beq.n	800dbe4 <HAL_UART_Transmit+0x28>
 800dbde:	88fb      	ldrh	r3, [r7, #6]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d101      	bne.n	800dbe8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e07b      	b.n	800dce0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d101      	bne.n	800dbf6 <HAL_UART_Transmit+0x3a>
 800dbf2:	2302      	movs	r3, #2
 800dbf4:	e074      	b.n	800dce0 <HAL_UART_Transmit+0x124>
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2200      	movs	r2, #0
 800dc02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2221      	movs	r2, #33	; 0x21
 800dc0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dc0e:	f7f5 fa31 	bl	8003074 <HAL_GetTick>
 800dc12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	88fa      	ldrh	r2, [r7, #6]
 800dc18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	88fa      	ldrh	r2, [r7, #6]
 800dc20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc2c:	d108      	bne.n	800dc40 <HAL_UART_Transmit+0x84>
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	691b      	ldr	r3, [r3, #16]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d104      	bne.n	800dc40 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800dc36:	2300      	movs	r3, #0
 800dc38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	61bb      	str	r3, [r7, #24]
 800dc3e:	e003      	b.n	800dc48 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dc44:	2300      	movs	r3, #0
 800dc46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800dc50:	e02c      	b.n	800dcac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	9300      	str	r3, [sp, #0]
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	2180      	movs	r1, #128	; 0x80
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f001 fbb0 	bl	800f3c2 <UART_WaitOnFlagUntilTimeout>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d001      	beq.n	800dc6c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800dc68:	2303      	movs	r3, #3
 800dc6a:	e039      	b.n	800dce0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d10b      	bne.n	800dc8a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dc72:	69bb      	ldr	r3, [r7, #24]
 800dc74:	881b      	ldrh	r3, [r3, #0]
 800dc76:	461a      	mov	r2, r3
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	3302      	adds	r3, #2
 800dc86:	61bb      	str	r3, [r7, #24]
 800dc88:	e007      	b.n	800dc9a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	781a      	ldrb	r2, [r3, #0]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	3301      	adds	r3, #1
 800dc98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	3b01      	subs	r3, #1
 800dca4:	b29a      	uxth	r2, r3
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d1cc      	bne.n	800dc52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	9300      	str	r3, [sp, #0]
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	2140      	movs	r1, #64	; 0x40
 800dcc2:	68f8      	ldr	r0, [r7, #12]
 800dcc4:	f001 fb7d 	bl	800f3c2 <UART_WaitOnFlagUntilTimeout>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d001      	beq.n	800dcd2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800dcce:	2303      	movs	r3, #3
 800dcd0:	e006      	b.n	800dce0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2220      	movs	r2, #32
 800dcd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	e000      	b.n	800dce0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800dcde:	2302      	movs	r3, #2
  }
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3720      	adds	r7, #32
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b08a      	sub	sp, #40	; 0x28
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcfc:	2b20      	cmp	r3, #32
 800dcfe:	d142      	bne.n	800dd86 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d002      	beq.n	800dd0c <HAL_UART_Receive_IT+0x24>
 800dd06:	88fb      	ldrh	r3, [r7, #6]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d101      	bne.n	800dd10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	e03b      	b.n	800dd88 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd16:	2b01      	cmp	r3, #1
 800dd18:	d101      	bne.n	800dd1e <HAL_UART_Receive_IT+0x36>
 800dd1a:	2302      	movs	r3, #2
 800dd1c:	e034      	b.n	800dd88 <HAL_UART_Receive_IT+0xa0>
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2201      	movs	r2, #1
 800dd22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a17      	ldr	r2, [pc, #92]	; (800dd90 <HAL_UART_Receive_IT+0xa8>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d01f      	beq.n	800dd76 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d018      	beq.n	800dd76 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	e853 3f00 	ldrex	r3, [r3]
 800dd50:	613b      	str	r3, [r7, #16]
   return(result);
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dd58:	627b      	str	r3, [r7, #36]	; 0x24
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	461a      	mov	r2, r3
 800dd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd62:	623b      	str	r3, [r7, #32]
 800dd64:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd66:	69f9      	ldr	r1, [r7, #28]
 800dd68:	6a3a      	ldr	r2, [r7, #32]
 800dd6a:	e841 2300 	strex	r3, r2, [r1]
 800dd6e:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d1e6      	bne.n	800dd44 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dd76:	88fb      	ldrh	r3, [r7, #6]
 800dd78:	461a      	mov	r2, r3
 800dd7a:	68b9      	ldr	r1, [r7, #8]
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f001 fbe9 	bl	800f554 <UART_Start_Receive_IT>
 800dd82:	4603      	mov	r3, r0
 800dd84:	e000      	b.n	800dd88 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800dd86:	2302      	movs	r3, #2
  }
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3728      	adds	r7, #40	; 0x28
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	58000c00 	.word	0x58000c00

0800dd94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b0ba      	sub	sp, #232	; 0xe8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	69db      	ldr	r3, [r3, #28]
 800dda2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	689b      	ldr	r3, [r3, #8]
 800ddb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ddba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ddbe:	f640 030f 	movw	r3, #2063	; 0x80f
 800ddc2:	4013      	ands	r3, r2
 800ddc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ddc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d11b      	bne.n	800de08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ddd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddd4:	f003 0320 	and.w	r3, r3, #32
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d015      	beq.n	800de08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dde0:	f003 0320 	and.w	r3, r3, #32
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d105      	bne.n	800ddf4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dde8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d009      	beq.n	800de08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	f000 835a 	beq.w	800e4b2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	4798      	blx	r3
      }
      return;
 800de06:	e354      	b.n	800e4b2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800de08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	f000 811f 	beq.w	800e050 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800de12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800de16:	4b8b      	ldr	r3, [pc, #556]	; (800e044 <HAL_UART_IRQHandler+0x2b0>)
 800de18:	4013      	ands	r3, r2
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d106      	bne.n	800de2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800de1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800de22:	4b89      	ldr	r3, [pc, #548]	; (800e048 <HAL_UART_IRQHandler+0x2b4>)
 800de24:	4013      	ands	r3, r2
 800de26:	2b00      	cmp	r3, #0
 800de28:	f000 8112 	beq.w	800e050 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800de2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de30:	f003 0301 	and.w	r3, r3, #1
 800de34:	2b00      	cmp	r3, #0
 800de36:	d011      	beq.n	800de5c <HAL_UART_IRQHandler+0xc8>
 800de38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00b      	beq.n	800de5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2201      	movs	r2, #1
 800de4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de52:	f043 0201 	orr.w	r2, r3, #1
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de60:	f003 0302 	and.w	r3, r3, #2
 800de64:	2b00      	cmp	r3, #0
 800de66:	d011      	beq.n	800de8c <HAL_UART_IRQHandler+0xf8>
 800de68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de6c:	f003 0301 	and.w	r3, r3, #1
 800de70:	2b00      	cmp	r3, #0
 800de72:	d00b      	beq.n	800de8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2202      	movs	r2, #2
 800de7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de82:	f043 0204 	orr.w	r2, r3, #4
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de90:	f003 0304 	and.w	r3, r3, #4
 800de94:	2b00      	cmp	r3, #0
 800de96:	d011      	beq.n	800debc <HAL_UART_IRQHandler+0x128>
 800de98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de9c:	f003 0301 	and.w	r3, r3, #1
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d00b      	beq.n	800debc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	2204      	movs	r2, #4
 800deaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800deb2:	f043 0202 	orr.w	r2, r3, #2
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800debc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dec0:	f003 0308 	and.w	r3, r3, #8
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d017      	beq.n	800def8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800decc:	f003 0320 	and.w	r3, r3, #32
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d105      	bne.n	800dee0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ded4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ded8:	4b5a      	ldr	r3, [pc, #360]	; (800e044 <HAL_UART_IRQHandler+0x2b0>)
 800deda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d00b      	beq.n	800def8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	2208      	movs	r2, #8
 800dee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800deee:	f043 0208 	orr.w	r2, r3, #8
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800def8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800defc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df00:	2b00      	cmp	r3, #0
 800df02:	d012      	beq.n	800df2a <HAL_UART_IRQHandler+0x196>
 800df04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d00c      	beq.n	800df2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df20:	f043 0220 	orr.w	r2, r3, #32
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df30:	2b00      	cmp	r3, #0
 800df32:	f000 82c0 	beq.w	800e4b6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800df36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df3a:	f003 0320 	and.w	r3, r3, #32
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d013      	beq.n	800df6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800df42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df46:	f003 0320 	and.w	r3, r3, #32
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d105      	bne.n	800df5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800df4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df56:	2b00      	cmp	r3, #0
 800df58:	d007      	beq.n	800df6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d003      	beq.n	800df6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df7e:	2b40      	cmp	r3, #64	; 0x40
 800df80:	d005      	beq.n	800df8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800df82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d04f      	beq.n	800e02e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f001 fc0a 	bl	800f7a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	689b      	ldr	r3, [r3, #8]
 800df9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df9e:	2b40      	cmp	r3, #64	; 0x40
 800dfa0:	d141      	bne.n	800e026 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	3308      	adds	r3, #8
 800dfa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dfb0:	e853 3f00 	ldrex	r3, [r3]
 800dfb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dfb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	3308      	adds	r3, #8
 800dfca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dfce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dfd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dfda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dfde:	e841 2300 	strex	r3, r2, [r1]
 800dfe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800dfe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d1d9      	bne.n	800dfa2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d013      	beq.n	800e01e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dffa:	4a14      	ldr	r2, [pc, #80]	; (800e04c <HAL_UART_IRQHandler+0x2b8>)
 800dffc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e002:	4618      	mov	r0, r3
 800e004:	f7f6 fac0 	bl	8004588 <HAL_DMA_Abort_IT>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d017      	beq.n	800e03e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e018:	4610      	mov	r0, r2
 800e01a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e01c:	e00f      	b.n	800e03e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f000 fa60 	bl	800e4e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e024:	e00b      	b.n	800e03e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 fa5c 	bl	800e4e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e02c:	e007      	b.n	800e03e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f000 fa58 	bl	800e4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2200      	movs	r2, #0
 800e038:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e03c:	e23b      	b.n	800e4b6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e03e:	bf00      	nop
    return;
 800e040:	e239      	b.n	800e4b6 <HAL_UART_IRQHandler+0x722>
 800e042:	bf00      	nop
 800e044:	10000001 	.word	0x10000001
 800e048:	04000120 	.word	0x04000120
 800e04c:	0800f875 	.word	0x0800f875

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e054:	2b01      	cmp	r3, #1
 800e056:	f040 81ce 	bne.w	800e3f6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e05a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e05e:	f003 0310 	and.w	r3, r3, #16
 800e062:	2b00      	cmp	r3, #0
 800e064:	f000 81c7 	beq.w	800e3f6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e06c:	f003 0310 	and.w	r3, r3, #16
 800e070:	2b00      	cmp	r3, #0
 800e072:	f000 81c0 	beq.w	800e3f6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2210      	movs	r2, #16
 800e07c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e088:	2b40      	cmp	r3, #64	; 0x40
 800e08a:	f040 813b 	bne.w	800e304 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a8b      	ldr	r2, [pc, #556]	; (800e2c4 <HAL_UART_IRQHandler+0x530>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d059      	beq.n	800e14e <HAL_UART_IRQHandler+0x3ba>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a89      	ldr	r2, [pc, #548]	; (800e2c8 <HAL_UART_IRQHandler+0x534>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d053      	beq.n	800e14e <HAL_UART_IRQHandler+0x3ba>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4a87      	ldr	r2, [pc, #540]	; (800e2cc <HAL_UART_IRQHandler+0x538>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d04d      	beq.n	800e14e <HAL_UART_IRQHandler+0x3ba>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4a85      	ldr	r2, [pc, #532]	; (800e2d0 <HAL_UART_IRQHandler+0x53c>)
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d047      	beq.n	800e14e <HAL_UART_IRQHandler+0x3ba>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4a83      	ldr	r2, [pc, #524]	; (800e2d4 <HAL_UART_IRQHandler+0x540>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d041      	beq.n	800e14e <HAL_UART_IRQHandler+0x3ba>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a81      	ldr	r2, [pc, #516]	; (800e2d8 <HAL_UART_IRQHandler+0x544>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d03b      	beq.n	800e14e <HAL_UART_IRQHandler+0x3ba>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	4a7f      	ldr	r2, [pc, #508]	; (800e2dc <HAL_UART_IRQHandler+0x548>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d035      	beq.n	800e14e <HAL_UART_IRQHandler+0x3ba>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4a7d      	ldr	r2, [pc, #500]	; (800e2e0 <HAL_UART_IRQHandler+0x54c>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d02f      	beq.n	800e14e <HAL_UART_IRQHandler+0x3ba>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4a7b      	ldr	r2, [pc, #492]	; (800e2e4 <HAL_UART_IRQHandler+0x550>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d029      	beq.n	800e14e <HAL_UART_IRQHandler+0x3ba>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a79      	ldr	r2, [pc, #484]	; (800e2e8 <HAL_UART_IRQHandler+0x554>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d023      	beq.n	800e14e <HAL_UART_IRQHandler+0x3ba>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4a77      	ldr	r2, [pc, #476]	; (800e2ec <HAL_UART_IRQHandler+0x558>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	d01d      	beq.n	800e14e <HAL_UART_IRQHandler+0x3ba>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4a75      	ldr	r2, [pc, #468]	; (800e2f0 <HAL_UART_IRQHandler+0x55c>)
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d017      	beq.n	800e14e <HAL_UART_IRQHandler+0x3ba>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4a73      	ldr	r2, [pc, #460]	; (800e2f4 <HAL_UART_IRQHandler+0x560>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d011      	beq.n	800e14e <HAL_UART_IRQHandler+0x3ba>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a71      	ldr	r2, [pc, #452]	; (800e2f8 <HAL_UART_IRQHandler+0x564>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d00b      	beq.n	800e14e <HAL_UART_IRQHandler+0x3ba>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4a6f      	ldr	r2, [pc, #444]	; (800e2fc <HAL_UART_IRQHandler+0x568>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d005      	beq.n	800e14e <HAL_UART_IRQHandler+0x3ba>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4a6d      	ldr	r2, [pc, #436]	; (800e300 <HAL_UART_IRQHandler+0x56c>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d105      	bne.n	800e15a <HAL_UART_IRQHandler+0x3c6>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	685b      	ldr	r3, [r3, #4]
 800e156:	b29b      	uxth	r3, r3
 800e158:	e004      	b.n	800e164 <HAL_UART_IRQHandler+0x3d0>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	b29b      	uxth	r3, r3
 800e164:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e168:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	f000 81a4 	beq.w	800e4ba <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e178:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e17c:	429a      	cmp	r2, r3
 800e17e:	f080 819c 	bcs.w	800e4ba <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e188:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e190:	69db      	ldr	r3, [r3, #28]
 800e192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e196:	f000 8086 	beq.w	800e2a6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e1a6:	e853 3f00 	ldrex	r3, [r3]
 800e1aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e1ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e1b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e1b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	461a      	mov	r2, r3
 800e1c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e1c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e1c8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e1d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e1d4:	e841 2300 	strex	r3, r2, [r1]
 800e1d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e1dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d1da      	bne.n	800e19a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	3308      	adds	r3, #8
 800e1ea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1ee:	e853 3f00 	ldrex	r3, [r3]
 800e1f2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e1f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e1f6:	f023 0301 	bic.w	r3, r3, #1
 800e1fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	3308      	adds	r3, #8
 800e204:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e208:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e20c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e20e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e210:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e214:	e841 2300 	strex	r3, r2, [r1]
 800e218:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e21a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d1e1      	bne.n	800e1e4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	3308      	adds	r3, #8
 800e226:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e22a:	e853 3f00 	ldrex	r3, [r3]
 800e22e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e236:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	3308      	adds	r3, #8
 800e240:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e244:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e246:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e248:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e24a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e24c:	e841 2300 	strex	r3, r2, [r1]
 800e250:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e254:	2b00      	cmp	r3, #0
 800e256:	d1e3      	bne.n	800e220 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2220      	movs	r2, #32
 800e25c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e26c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e26e:	e853 3f00 	ldrex	r3, [r3]
 800e272:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e276:	f023 0310 	bic.w	r3, r3, #16
 800e27a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	461a      	mov	r2, r3
 800e284:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e288:	65bb      	str	r3, [r7, #88]	; 0x58
 800e28a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e28c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e28e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e290:	e841 2300 	strex	r3, r2, [r1]
 800e294:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d1e4      	bne.n	800e266 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f7f5 fe53 	bl	8003f4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	1ad3      	subs	r3, r2, r3
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f000 f91c 	bl	800e4f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e2c0:	e0fb      	b.n	800e4ba <HAL_UART_IRQHandler+0x726>
 800e2c2:	bf00      	nop
 800e2c4:	40020010 	.word	0x40020010
 800e2c8:	40020028 	.word	0x40020028
 800e2cc:	40020040 	.word	0x40020040
 800e2d0:	40020058 	.word	0x40020058
 800e2d4:	40020070 	.word	0x40020070
 800e2d8:	40020088 	.word	0x40020088
 800e2dc:	400200a0 	.word	0x400200a0
 800e2e0:	400200b8 	.word	0x400200b8
 800e2e4:	40020410 	.word	0x40020410
 800e2e8:	40020428 	.word	0x40020428
 800e2ec:	40020440 	.word	0x40020440
 800e2f0:	40020458 	.word	0x40020458
 800e2f4:	40020470 	.word	0x40020470
 800e2f8:	40020488 	.word	0x40020488
 800e2fc:	400204a0 	.word	0x400204a0
 800e300:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e310:	b29b      	uxth	r3, r3
 800e312:	1ad3      	subs	r3, r2, r3
 800e314:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e31e:	b29b      	uxth	r3, r3
 800e320:	2b00      	cmp	r3, #0
 800e322:	f000 80cc 	beq.w	800e4be <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e326:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f000 80c7 	beq.w	800e4be <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e338:	e853 3f00 	ldrex	r3, [r3]
 800e33c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e340:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e344:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	461a      	mov	r2, r3
 800e34e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e352:	647b      	str	r3, [r7, #68]	; 0x44
 800e354:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e356:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e358:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e35a:	e841 2300 	strex	r3, r2, [r1]
 800e35e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e362:	2b00      	cmp	r3, #0
 800e364:	d1e4      	bne.n	800e330 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	3308      	adds	r3, #8
 800e36c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e370:	e853 3f00 	ldrex	r3, [r3]
 800e374:	623b      	str	r3, [r7, #32]
   return(result);
 800e376:	6a3a      	ldr	r2, [r7, #32]
 800e378:	4b54      	ldr	r3, [pc, #336]	; (800e4cc <HAL_UART_IRQHandler+0x738>)
 800e37a:	4013      	ands	r3, r2
 800e37c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	3308      	adds	r3, #8
 800e386:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e38a:	633a      	str	r2, [r7, #48]	; 0x30
 800e38c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e38e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e392:	e841 2300 	strex	r3, r2, [r1]
 800e396:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d1e3      	bne.n	800e366 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2220      	movs	r2, #32
 800e3a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	e853 3f00 	ldrex	r3, [r3]
 800e3be:	60fb      	str	r3, [r7, #12]
   return(result);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f023 0310 	bic.w	r3, r3, #16
 800e3c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e3d4:	61fb      	str	r3, [r7, #28]
 800e3d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3d8:	69b9      	ldr	r1, [r7, #24]
 800e3da:	69fa      	ldr	r2, [r7, #28]
 800e3dc:	e841 2300 	strex	r3, r2, [r1]
 800e3e0:	617b      	str	r3, [r7, #20]
   return(result);
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d1e4      	bne.n	800e3b2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e3e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 f882 	bl	800e4f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e3f4:	e063      	b.n	800e4be <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e3f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d00e      	beq.n	800e420 <HAL_UART_IRQHandler+0x68c>
 800e402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d008      	beq.n	800e420 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e416:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f001 fec9 	bl	80101b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e41e:	e051      	b.n	800e4c4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d014      	beq.n	800e456 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e42c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e434:	2b00      	cmp	r3, #0
 800e436:	d105      	bne.n	800e444 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e43c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e440:	2b00      	cmp	r3, #0
 800e442:	d008      	beq.n	800e456 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d03a      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	4798      	blx	r3
    }
    return;
 800e454:	e035      	b.n	800e4c2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e45a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d009      	beq.n	800e476 <HAL_UART_IRQHandler+0x6e2>
 800e462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d003      	beq.n	800e476 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f001 fa16 	bl	800f8a0 <UART_EndTransmit_IT>
    return;
 800e474:	e026      	b.n	800e4c4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e47a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d009      	beq.n	800e496 <HAL_UART_IRQHandler+0x702>
 800e482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e486:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d003      	beq.n	800e496 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f001 fea2 	bl	80101d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e494:	e016      	b.n	800e4c4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e49a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d010      	beq.n	800e4c4 <HAL_UART_IRQHandler+0x730>
 800e4a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	da0c      	bge.n	800e4c4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f001 fe8a 	bl	80101c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4b0:	e008      	b.n	800e4c4 <HAL_UART_IRQHandler+0x730>
      return;
 800e4b2:	bf00      	nop
 800e4b4:	e006      	b.n	800e4c4 <HAL_UART_IRQHandler+0x730>
    return;
 800e4b6:	bf00      	nop
 800e4b8:	e004      	b.n	800e4c4 <HAL_UART_IRQHandler+0x730>
      return;
 800e4ba:	bf00      	nop
 800e4bc:	e002      	b.n	800e4c4 <HAL_UART_IRQHandler+0x730>
      return;
 800e4be:	bf00      	nop
 800e4c0:	e000      	b.n	800e4c4 <HAL_UART_IRQHandler+0x730>
    return;
 800e4c2:	bf00      	nop
  }
}
 800e4c4:	37e8      	adds	r7, #232	; 0xe8
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	effffffe 	.word	0xeffffffe

0800e4d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e4d8:	bf00      	nop
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e4ec:	bf00      	nop
 800e4ee:	370c      	adds	r7, #12
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr

0800e4f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b083      	sub	sp, #12
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	460b      	mov	r3, r1
 800e502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e504:	bf00      	nop
 800e506:	370c      	adds	r7, #12
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr

0800e510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e514:	b092      	sub	sp, #72	; 0x48
 800e516:	af00      	add	r7, sp, #0
 800e518:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e51a:	2300      	movs	r3, #0
 800e51c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	689a      	ldr	r2, [r3, #8]
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	691b      	ldr	r3, [r3, #16]
 800e528:	431a      	orrs	r2, r3
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	695b      	ldr	r3, [r3, #20]
 800e52e:	431a      	orrs	r2, r3
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	69db      	ldr	r3, [r3, #28]
 800e534:	4313      	orrs	r3, r2
 800e536:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	4bbe      	ldr	r3, [pc, #760]	; (800e838 <UART_SetConfig+0x328>)
 800e540:	4013      	ands	r3, r2
 800e542:	697a      	ldr	r2, [r7, #20]
 800e544:	6812      	ldr	r2, [r2, #0]
 800e546:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e548:	430b      	orrs	r3, r1
 800e54a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	68da      	ldr	r2, [r3, #12]
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	430a      	orrs	r2, r1
 800e560:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	699b      	ldr	r3, [r3, #24]
 800e566:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	4ab3      	ldr	r2, [pc, #716]	; (800e83c <UART_SetConfig+0x32c>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d004      	beq.n	800e57c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	6a1b      	ldr	r3, [r3, #32]
 800e576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e578:	4313      	orrs	r3, r2
 800e57a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	689a      	ldr	r2, [r3, #8]
 800e582:	4baf      	ldr	r3, [pc, #700]	; (800e840 <UART_SetConfig+0x330>)
 800e584:	4013      	ands	r3, r2
 800e586:	697a      	ldr	r2, [r7, #20]
 800e588:	6812      	ldr	r2, [r2, #0]
 800e58a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e58c:	430b      	orrs	r3, r1
 800e58e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e596:	f023 010f 	bic.w	r1, r3, #15
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	430a      	orrs	r2, r1
 800e5a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4aa6      	ldr	r2, [pc, #664]	; (800e844 <UART_SetConfig+0x334>)
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d177      	bne.n	800e6a0 <UART_SetConfig+0x190>
 800e5b0:	4ba5      	ldr	r3, [pc, #660]	; (800e848 <UART_SetConfig+0x338>)
 800e5b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e5b8:	2b28      	cmp	r3, #40	; 0x28
 800e5ba:	d86d      	bhi.n	800e698 <UART_SetConfig+0x188>
 800e5bc:	a201      	add	r2, pc, #4	; (adr r2, 800e5c4 <UART_SetConfig+0xb4>)
 800e5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c2:	bf00      	nop
 800e5c4:	0800e669 	.word	0x0800e669
 800e5c8:	0800e699 	.word	0x0800e699
 800e5cc:	0800e699 	.word	0x0800e699
 800e5d0:	0800e699 	.word	0x0800e699
 800e5d4:	0800e699 	.word	0x0800e699
 800e5d8:	0800e699 	.word	0x0800e699
 800e5dc:	0800e699 	.word	0x0800e699
 800e5e0:	0800e699 	.word	0x0800e699
 800e5e4:	0800e671 	.word	0x0800e671
 800e5e8:	0800e699 	.word	0x0800e699
 800e5ec:	0800e699 	.word	0x0800e699
 800e5f0:	0800e699 	.word	0x0800e699
 800e5f4:	0800e699 	.word	0x0800e699
 800e5f8:	0800e699 	.word	0x0800e699
 800e5fc:	0800e699 	.word	0x0800e699
 800e600:	0800e699 	.word	0x0800e699
 800e604:	0800e679 	.word	0x0800e679
 800e608:	0800e699 	.word	0x0800e699
 800e60c:	0800e699 	.word	0x0800e699
 800e610:	0800e699 	.word	0x0800e699
 800e614:	0800e699 	.word	0x0800e699
 800e618:	0800e699 	.word	0x0800e699
 800e61c:	0800e699 	.word	0x0800e699
 800e620:	0800e699 	.word	0x0800e699
 800e624:	0800e681 	.word	0x0800e681
 800e628:	0800e699 	.word	0x0800e699
 800e62c:	0800e699 	.word	0x0800e699
 800e630:	0800e699 	.word	0x0800e699
 800e634:	0800e699 	.word	0x0800e699
 800e638:	0800e699 	.word	0x0800e699
 800e63c:	0800e699 	.word	0x0800e699
 800e640:	0800e699 	.word	0x0800e699
 800e644:	0800e689 	.word	0x0800e689
 800e648:	0800e699 	.word	0x0800e699
 800e64c:	0800e699 	.word	0x0800e699
 800e650:	0800e699 	.word	0x0800e699
 800e654:	0800e699 	.word	0x0800e699
 800e658:	0800e699 	.word	0x0800e699
 800e65c:	0800e699 	.word	0x0800e699
 800e660:	0800e699 	.word	0x0800e699
 800e664:	0800e691 	.word	0x0800e691
 800e668:	2301      	movs	r3, #1
 800e66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e66e:	e326      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e670:	2304      	movs	r3, #4
 800e672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e676:	e322      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e678:	2308      	movs	r3, #8
 800e67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67e:	e31e      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e680:	2310      	movs	r3, #16
 800e682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e686:	e31a      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e688:	2320      	movs	r3, #32
 800e68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e68e:	e316      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e690:	2340      	movs	r3, #64	; 0x40
 800e692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e696:	e312      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e698:	2380      	movs	r3, #128	; 0x80
 800e69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e69e:	e30e      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	4a69      	ldr	r2, [pc, #420]	; (800e84c <UART_SetConfig+0x33c>)
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	d130      	bne.n	800e70c <UART_SetConfig+0x1fc>
 800e6aa:	4b67      	ldr	r3, [pc, #412]	; (800e848 <UART_SetConfig+0x338>)
 800e6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6ae:	f003 0307 	and.w	r3, r3, #7
 800e6b2:	2b05      	cmp	r3, #5
 800e6b4:	d826      	bhi.n	800e704 <UART_SetConfig+0x1f4>
 800e6b6:	a201      	add	r2, pc, #4	; (adr r2, 800e6bc <UART_SetConfig+0x1ac>)
 800e6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6bc:	0800e6d5 	.word	0x0800e6d5
 800e6c0:	0800e6dd 	.word	0x0800e6dd
 800e6c4:	0800e6e5 	.word	0x0800e6e5
 800e6c8:	0800e6ed 	.word	0x0800e6ed
 800e6cc:	0800e6f5 	.word	0x0800e6f5
 800e6d0:	0800e6fd 	.word	0x0800e6fd
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6da:	e2f0      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e6dc:	2304      	movs	r3, #4
 800e6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6e2:	e2ec      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e6e4:	2308      	movs	r3, #8
 800e6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ea:	e2e8      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e6ec:	2310      	movs	r3, #16
 800e6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6f2:	e2e4      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e6f4:	2320      	movs	r3, #32
 800e6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6fa:	e2e0      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e6fc:	2340      	movs	r3, #64	; 0x40
 800e6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e702:	e2dc      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e704:	2380      	movs	r3, #128	; 0x80
 800e706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70a:	e2d8      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a4f      	ldr	r2, [pc, #316]	; (800e850 <UART_SetConfig+0x340>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d130      	bne.n	800e778 <UART_SetConfig+0x268>
 800e716:	4b4c      	ldr	r3, [pc, #304]	; (800e848 <UART_SetConfig+0x338>)
 800e718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e71a:	f003 0307 	and.w	r3, r3, #7
 800e71e:	2b05      	cmp	r3, #5
 800e720:	d826      	bhi.n	800e770 <UART_SetConfig+0x260>
 800e722:	a201      	add	r2, pc, #4	; (adr r2, 800e728 <UART_SetConfig+0x218>)
 800e724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e728:	0800e741 	.word	0x0800e741
 800e72c:	0800e749 	.word	0x0800e749
 800e730:	0800e751 	.word	0x0800e751
 800e734:	0800e759 	.word	0x0800e759
 800e738:	0800e761 	.word	0x0800e761
 800e73c:	0800e769 	.word	0x0800e769
 800e740:	2300      	movs	r3, #0
 800e742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e746:	e2ba      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e748:	2304      	movs	r3, #4
 800e74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e74e:	e2b6      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e750:	2308      	movs	r3, #8
 800e752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e756:	e2b2      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e758:	2310      	movs	r3, #16
 800e75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e75e:	e2ae      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e760:	2320      	movs	r3, #32
 800e762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e766:	e2aa      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e768:	2340      	movs	r3, #64	; 0x40
 800e76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e76e:	e2a6      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e770:	2380      	movs	r3, #128	; 0x80
 800e772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e776:	e2a2      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	4a35      	ldr	r2, [pc, #212]	; (800e854 <UART_SetConfig+0x344>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d130      	bne.n	800e7e4 <UART_SetConfig+0x2d4>
 800e782:	4b31      	ldr	r3, [pc, #196]	; (800e848 <UART_SetConfig+0x338>)
 800e784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e786:	f003 0307 	and.w	r3, r3, #7
 800e78a:	2b05      	cmp	r3, #5
 800e78c:	d826      	bhi.n	800e7dc <UART_SetConfig+0x2cc>
 800e78e:	a201      	add	r2, pc, #4	; (adr r2, 800e794 <UART_SetConfig+0x284>)
 800e790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e794:	0800e7ad 	.word	0x0800e7ad
 800e798:	0800e7b5 	.word	0x0800e7b5
 800e79c:	0800e7bd 	.word	0x0800e7bd
 800e7a0:	0800e7c5 	.word	0x0800e7c5
 800e7a4:	0800e7cd 	.word	0x0800e7cd
 800e7a8:	0800e7d5 	.word	0x0800e7d5
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7b2:	e284      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e7b4:	2304      	movs	r3, #4
 800e7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ba:	e280      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e7bc:	2308      	movs	r3, #8
 800e7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7c2:	e27c      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e7c4:	2310      	movs	r3, #16
 800e7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ca:	e278      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e7cc:	2320      	movs	r3, #32
 800e7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7d2:	e274      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e7d4:	2340      	movs	r3, #64	; 0x40
 800e7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7da:	e270      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e7dc:	2380      	movs	r3, #128	; 0x80
 800e7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e2:	e26c      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4a1b      	ldr	r2, [pc, #108]	; (800e858 <UART_SetConfig+0x348>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d142      	bne.n	800e874 <UART_SetConfig+0x364>
 800e7ee:	4b16      	ldr	r3, [pc, #88]	; (800e848 <UART_SetConfig+0x338>)
 800e7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7f2:	f003 0307 	and.w	r3, r3, #7
 800e7f6:	2b05      	cmp	r3, #5
 800e7f8:	d838      	bhi.n	800e86c <UART_SetConfig+0x35c>
 800e7fa:	a201      	add	r2, pc, #4	; (adr r2, 800e800 <UART_SetConfig+0x2f0>)
 800e7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e800:	0800e819 	.word	0x0800e819
 800e804:	0800e821 	.word	0x0800e821
 800e808:	0800e829 	.word	0x0800e829
 800e80c:	0800e831 	.word	0x0800e831
 800e810:	0800e85d 	.word	0x0800e85d
 800e814:	0800e865 	.word	0x0800e865
 800e818:	2300      	movs	r3, #0
 800e81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e81e:	e24e      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e820:	2304      	movs	r3, #4
 800e822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e826:	e24a      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e828:	2308      	movs	r3, #8
 800e82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e82e:	e246      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e830:	2310      	movs	r3, #16
 800e832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e836:	e242      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e838:	cfff69f3 	.word	0xcfff69f3
 800e83c:	58000c00 	.word	0x58000c00
 800e840:	11fff4ff 	.word	0x11fff4ff
 800e844:	40011000 	.word	0x40011000
 800e848:	58024400 	.word	0x58024400
 800e84c:	40004400 	.word	0x40004400
 800e850:	40004800 	.word	0x40004800
 800e854:	40004c00 	.word	0x40004c00
 800e858:	40005000 	.word	0x40005000
 800e85c:	2320      	movs	r3, #32
 800e85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e862:	e22c      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e864:	2340      	movs	r3, #64	; 0x40
 800e866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e86a:	e228      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e86c:	2380      	movs	r3, #128	; 0x80
 800e86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e872:	e224      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4ab1      	ldr	r2, [pc, #708]	; (800eb40 <UART_SetConfig+0x630>)
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d176      	bne.n	800e96c <UART_SetConfig+0x45c>
 800e87e:	4bb1      	ldr	r3, [pc, #708]	; (800eb44 <UART_SetConfig+0x634>)
 800e880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e886:	2b28      	cmp	r3, #40	; 0x28
 800e888:	d86c      	bhi.n	800e964 <UART_SetConfig+0x454>
 800e88a:	a201      	add	r2, pc, #4	; (adr r2, 800e890 <UART_SetConfig+0x380>)
 800e88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e890:	0800e935 	.word	0x0800e935
 800e894:	0800e965 	.word	0x0800e965
 800e898:	0800e965 	.word	0x0800e965
 800e89c:	0800e965 	.word	0x0800e965
 800e8a0:	0800e965 	.word	0x0800e965
 800e8a4:	0800e965 	.word	0x0800e965
 800e8a8:	0800e965 	.word	0x0800e965
 800e8ac:	0800e965 	.word	0x0800e965
 800e8b0:	0800e93d 	.word	0x0800e93d
 800e8b4:	0800e965 	.word	0x0800e965
 800e8b8:	0800e965 	.word	0x0800e965
 800e8bc:	0800e965 	.word	0x0800e965
 800e8c0:	0800e965 	.word	0x0800e965
 800e8c4:	0800e965 	.word	0x0800e965
 800e8c8:	0800e965 	.word	0x0800e965
 800e8cc:	0800e965 	.word	0x0800e965
 800e8d0:	0800e945 	.word	0x0800e945
 800e8d4:	0800e965 	.word	0x0800e965
 800e8d8:	0800e965 	.word	0x0800e965
 800e8dc:	0800e965 	.word	0x0800e965
 800e8e0:	0800e965 	.word	0x0800e965
 800e8e4:	0800e965 	.word	0x0800e965
 800e8e8:	0800e965 	.word	0x0800e965
 800e8ec:	0800e965 	.word	0x0800e965
 800e8f0:	0800e94d 	.word	0x0800e94d
 800e8f4:	0800e965 	.word	0x0800e965
 800e8f8:	0800e965 	.word	0x0800e965
 800e8fc:	0800e965 	.word	0x0800e965
 800e900:	0800e965 	.word	0x0800e965
 800e904:	0800e965 	.word	0x0800e965
 800e908:	0800e965 	.word	0x0800e965
 800e90c:	0800e965 	.word	0x0800e965
 800e910:	0800e955 	.word	0x0800e955
 800e914:	0800e965 	.word	0x0800e965
 800e918:	0800e965 	.word	0x0800e965
 800e91c:	0800e965 	.word	0x0800e965
 800e920:	0800e965 	.word	0x0800e965
 800e924:	0800e965 	.word	0x0800e965
 800e928:	0800e965 	.word	0x0800e965
 800e92c:	0800e965 	.word	0x0800e965
 800e930:	0800e95d 	.word	0x0800e95d
 800e934:	2301      	movs	r3, #1
 800e936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e93a:	e1c0      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e93c:	2304      	movs	r3, #4
 800e93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e942:	e1bc      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e944:	2308      	movs	r3, #8
 800e946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e94a:	e1b8      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e94c:	2310      	movs	r3, #16
 800e94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e952:	e1b4      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e954:	2320      	movs	r3, #32
 800e956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e95a:	e1b0      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e95c:	2340      	movs	r3, #64	; 0x40
 800e95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e962:	e1ac      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e964:	2380      	movs	r3, #128	; 0x80
 800e966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e96a:	e1a8      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a75      	ldr	r2, [pc, #468]	; (800eb48 <UART_SetConfig+0x638>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d130      	bne.n	800e9d8 <UART_SetConfig+0x4c8>
 800e976:	4b73      	ldr	r3, [pc, #460]	; (800eb44 <UART_SetConfig+0x634>)
 800e978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e97a:	f003 0307 	and.w	r3, r3, #7
 800e97e:	2b05      	cmp	r3, #5
 800e980:	d826      	bhi.n	800e9d0 <UART_SetConfig+0x4c0>
 800e982:	a201      	add	r2, pc, #4	; (adr r2, 800e988 <UART_SetConfig+0x478>)
 800e984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e988:	0800e9a1 	.word	0x0800e9a1
 800e98c:	0800e9a9 	.word	0x0800e9a9
 800e990:	0800e9b1 	.word	0x0800e9b1
 800e994:	0800e9b9 	.word	0x0800e9b9
 800e998:	0800e9c1 	.word	0x0800e9c1
 800e99c:	0800e9c9 	.word	0x0800e9c9
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9a6:	e18a      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e9a8:	2304      	movs	r3, #4
 800e9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ae:	e186      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e9b0:	2308      	movs	r3, #8
 800e9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9b6:	e182      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e9b8:	2310      	movs	r3, #16
 800e9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9be:	e17e      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e9c0:	2320      	movs	r3, #32
 800e9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9c6:	e17a      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e9c8:	2340      	movs	r3, #64	; 0x40
 800e9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ce:	e176      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e9d0:	2380      	movs	r3, #128	; 0x80
 800e9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9d6:	e172      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4a5b      	ldr	r2, [pc, #364]	; (800eb4c <UART_SetConfig+0x63c>)
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d130      	bne.n	800ea44 <UART_SetConfig+0x534>
 800e9e2:	4b58      	ldr	r3, [pc, #352]	; (800eb44 <UART_SetConfig+0x634>)
 800e9e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9e6:	f003 0307 	and.w	r3, r3, #7
 800e9ea:	2b05      	cmp	r3, #5
 800e9ec:	d826      	bhi.n	800ea3c <UART_SetConfig+0x52c>
 800e9ee:	a201      	add	r2, pc, #4	; (adr r2, 800e9f4 <UART_SetConfig+0x4e4>)
 800e9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f4:	0800ea0d 	.word	0x0800ea0d
 800e9f8:	0800ea15 	.word	0x0800ea15
 800e9fc:	0800ea1d 	.word	0x0800ea1d
 800ea00:	0800ea25 	.word	0x0800ea25
 800ea04:	0800ea2d 	.word	0x0800ea2d
 800ea08:	0800ea35 	.word	0x0800ea35
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea12:	e154      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ea14:	2304      	movs	r3, #4
 800ea16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea1a:	e150      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ea1c:	2308      	movs	r3, #8
 800ea1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea22:	e14c      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ea24:	2310      	movs	r3, #16
 800ea26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea2a:	e148      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ea2c:	2320      	movs	r3, #32
 800ea2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea32:	e144      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ea34:	2340      	movs	r3, #64	; 0x40
 800ea36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea3a:	e140      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ea3c:	2380      	movs	r3, #128	; 0x80
 800ea3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea42:	e13c      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	4a41      	ldr	r2, [pc, #260]	; (800eb50 <UART_SetConfig+0x640>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	f040 8082 	bne.w	800eb54 <UART_SetConfig+0x644>
 800ea50:	4b3c      	ldr	r3, [pc, #240]	; (800eb44 <UART_SetConfig+0x634>)
 800ea52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea58:	2b28      	cmp	r3, #40	; 0x28
 800ea5a:	d86d      	bhi.n	800eb38 <UART_SetConfig+0x628>
 800ea5c:	a201      	add	r2, pc, #4	; (adr r2, 800ea64 <UART_SetConfig+0x554>)
 800ea5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea62:	bf00      	nop
 800ea64:	0800eb09 	.word	0x0800eb09
 800ea68:	0800eb39 	.word	0x0800eb39
 800ea6c:	0800eb39 	.word	0x0800eb39
 800ea70:	0800eb39 	.word	0x0800eb39
 800ea74:	0800eb39 	.word	0x0800eb39
 800ea78:	0800eb39 	.word	0x0800eb39
 800ea7c:	0800eb39 	.word	0x0800eb39
 800ea80:	0800eb39 	.word	0x0800eb39
 800ea84:	0800eb11 	.word	0x0800eb11
 800ea88:	0800eb39 	.word	0x0800eb39
 800ea8c:	0800eb39 	.word	0x0800eb39
 800ea90:	0800eb39 	.word	0x0800eb39
 800ea94:	0800eb39 	.word	0x0800eb39
 800ea98:	0800eb39 	.word	0x0800eb39
 800ea9c:	0800eb39 	.word	0x0800eb39
 800eaa0:	0800eb39 	.word	0x0800eb39
 800eaa4:	0800eb19 	.word	0x0800eb19
 800eaa8:	0800eb39 	.word	0x0800eb39
 800eaac:	0800eb39 	.word	0x0800eb39
 800eab0:	0800eb39 	.word	0x0800eb39
 800eab4:	0800eb39 	.word	0x0800eb39
 800eab8:	0800eb39 	.word	0x0800eb39
 800eabc:	0800eb39 	.word	0x0800eb39
 800eac0:	0800eb39 	.word	0x0800eb39
 800eac4:	0800eb21 	.word	0x0800eb21
 800eac8:	0800eb39 	.word	0x0800eb39
 800eacc:	0800eb39 	.word	0x0800eb39
 800ead0:	0800eb39 	.word	0x0800eb39
 800ead4:	0800eb39 	.word	0x0800eb39
 800ead8:	0800eb39 	.word	0x0800eb39
 800eadc:	0800eb39 	.word	0x0800eb39
 800eae0:	0800eb39 	.word	0x0800eb39
 800eae4:	0800eb29 	.word	0x0800eb29
 800eae8:	0800eb39 	.word	0x0800eb39
 800eaec:	0800eb39 	.word	0x0800eb39
 800eaf0:	0800eb39 	.word	0x0800eb39
 800eaf4:	0800eb39 	.word	0x0800eb39
 800eaf8:	0800eb39 	.word	0x0800eb39
 800eafc:	0800eb39 	.word	0x0800eb39
 800eb00:	0800eb39 	.word	0x0800eb39
 800eb04:	0800eb31 	.word	0x0800eb31
 800eb08:	2301      	movs	r3, #1
 800eb0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb0e:	e0d6      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800eb10:	2304      	movs	r3, #4
 800eb12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb16:	e0d2      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800eb18:	2308      	movs	r3, #8
 800eb1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb1e:	e0ce      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800eb20:	2310      	movs	r3, #16
 800eb22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb26:	e0ca      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800eb28:	2320      	movs	r3, #32
 800eb2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb2e:	e0c6      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800eb30:	2340      	movs	r3, #64	; 0x40
 800eb32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb36:	e0c2      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800eb38:	2380      	movs	r3, #128	; 0x80
 800eb3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb3e:	e0be      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800eb40:	40011400 	.word	0x40011400
 800eb44:	58024400 	.word	0x58024400
 800eb48:	40007800 	.word	0x40007800
 800eb4c:	40007c00 	.word	0x40007c00
 800eb50:	40011800 	.word	0x40011800
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4aad      	ldr	r2, [pc, #692]	; (800ee10 <UART_SetConfig+0x900>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d176      	bne.n	800ec4c <UART_SetConfig+0x73c>
 800eb5e:	4bad      	ldr	r3, [pc, #692]	; (800ee14 <UART_SetConfig+0x904>)
 800eb60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb66:	2b28      	cmp	r3, #40	; 0x28
 800eb68:	d86c      	bhi.n	800ec44 <UART_SetConfig+0x734>
 800eb6a:	a201      	add	r2, pc, #4	; (adr r2, 800eb70 <UART_SetConfig+0x660>)
 800eb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb70:	0800ec15 	.word	0x0800ec15
 800eb74:	0800ec45 	.word	0x0800ec45
 800eb78:	0800ec45 	.word	0x0800ec45
 800eb7c:	0800ec45 	.word	0x0800ec45
 800eb80:	0800ec45 	.word	0x0800ec45
 800eb84:	0800ec45 	.word	0x0800ec45
 800eb88:	0800ec45 	.word	0x0800ec45
 800eb8c:	0800ec45 	.word	0x0800ec45
 800eb90:	0800ec1d 	.word	0x0800ec1d
 800eb94:	0800ec45 	.word	0x0800ec45
 800eb98:	0800ec45 	.word	0x0800ec45
 800eb9c:	0800ec45 	.word	0x0800ec45
 800eba0:	0800ec45 	.word	0x0800ec45
 800eba4:	0800ec45 	.word	0x0800ec45
 800eba8:	0800ec45 	.word	0x0800ec45
 800ebac:	0800ec45 	.word	0x0800ec45
 800ebb0:	0800ec25 	.word	0x0800ec25
 800ebb4:	0800ec45 	.word	0x0800ec45
 800ebb8:	0800ec45 	.word	0x0800ec45
 800ebbc:	0800ec45 	.word	0x0800ec45
 800ebc0:	0800ec45 	.word	0x0800ec45
 800ebc4:	0800ec45 	.word	0x0800ec45
 800ebc8:	0800ec45 	.word	0x0800ec45
 800ebcc:	0800ec45 	.word	0x0800ec45
 800ebd0:	0800ec2d 	.word	0x0800ec2d
 800ebd4:	0800ec45 	.word	0x0800ec45
 800ebd8:	0800ec45 	.word	0x0800ec45
 800ebdc:	0800ec45 	.word	0x0800ec45
 800ebe0:	0800ec45 	.word	0x0800ec45
 800ebe4:	0800ec45 	.word	0x0800ec45
 800ebe8:	0800ec45 	.word	0x0800ec45
 800ebec:	0800ec45 	.word	0x0800ec45
 800ebf0:	0800ec35 	.word	0x0800ec35
 800ebf4:	0800ec45 	.word	0x0800ec45
 800ebf8:	0800ec45 	.word	0x0800ec45
 800ebfc:	0800ec45 	.word	0x0800ec45
 800ec00:	0800ec45 	.word	0x0800ec45
 800ec04:	0800ec45 	.word	0x0800ec45
 800ec08:	0800ec45 	.word	0x0800ec45
 800ec0c:	0800ec45 	.word	0x0800ec45
 800ec10:	0800ec3d 	.word	0x0800ec3d
 800ec14:	2301      	movs	r3, #1
 800ec16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec1a:	e050      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ec1c:	2304      	movs	r3, #4
 800ec1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec22:	e04c      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ec24:	2308      	movs	r3, #8
 800ec26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec2a:	e048      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ec2c:	2310      	movs	r3, #16
 800ec2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec32:	e044      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ec34:	2320      	movs	r3, #32
 800ec36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3a:	e040      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ec3c:	2340      	movs	r3, #64	; 0x40
 800ec3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec42:	e03c      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ec44:	2380      	movs	r3, #128	; 0x80
 800ec46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4a:	e038      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	4a71      	ldr	r2, [pc, #452]	; (800ee18 <UART_SetConfig+0x908>)
 800ec52:	4293      	cmp	r3, r2
 800ec54:	d130      	bne.n	800ecb8 <UART_SetConfig+0x7a8>
 800ec56:	4b6f      	ldr	r3, [pc, #444]	; (800ee14 <UART_SetConfig+0x904>)
 800ec58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec5a:	f003 0307 	and.w	r3, r3, #7
 800ec5e:	2b05      	cmp	r3, #5
 800ec60:	d826      	bhi.n	800ecb0 <UART_SetConfig+0x7a0>
 800ec62:	a201      	add	r2, pc, #4	; (adr r2, 800ec68 <UART_SetConfig+0x758>)
 800ec64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec68:	0800ec81 	.word	0x0800ec81
 800ec6c:	0800ec89 	.word	0x0800ec89
 800ec70:	0800ec91 	.word	0x0800ec91
 800ec74:	0800ec99 	.word	0x0800ec99
 800ec78:	0800eca1 	.word	0x0800eca1
 800ec7c:	0800eca9 	.word	0x0800eca9
 800ec80:	2302      	movs	r3, #2
 800ec82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec86:	e01a      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ec88:	2304      	movs	r3, #4
 800ec8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec8e:	e016      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ec90:	2308      	movs	r3, #8
 800ec92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec96:	e012      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ec98:	2310      	movs	r3, #16
 800ec9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec9e:	e00e      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800eca0:	2320      	movs	r3, #32
 800eca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca6:	e00a      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800eca8:	2340      	movs	r3, #64	; 0x40
 800ecaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecae:	e006      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ecb0:	2380      	movs	r3, #128	; 0x80
 800ecb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecb6:	e002      	b.n	800ecbe <UART_SetConfig+0x7ae>
 800ecb8:	2380      	movs	r3, #128	; 0x80
 800ecba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4a55      	ldr	r2, [pc, #340]	; (800ee18 <UART_SetConfig+0x908>)
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	f040 80f8 	bne.w	800eeba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ecca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ecce:	2b20      	cmp	r3, #32
 800ecd0:	dc46      	bgt.n	800ed60 <UART_SetConfig+0x850>
 800ecd2:	2b02      	cmp	r3, #2
 800ecd4:	db75      	blt.n	800edc2 <UART_SetConfig+0x8b2>
 800ecd6:	3b02      	subs	r3, #2
 800ecd8:	2b1e      	cmp	r3, #30
 800ecda:	d872      	bhi.n	800edc2 <UART_SetConfig+0x8b2>
 800ecdc:	a201      	add	r2, pc, #4	; (adr r2, 800ece4 <UART_SetConfig+0x7d4>)
 800ecde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece2:	bf00      	nop
 800ece4:	0800ed67 	.word	0x0800ed67
 800ece8:	0800edc3 	.word	0x0800edc3
 800ecec:	0800ed6f 	.word	0x0800ed6f
 800ecf0:	0800edc3 	.word	0x0800edc3
 800ecf4:	0800edc3 	.word	0x0800edc3
 800ecf8:	0800edc3 	.word	0x0800edc3
 800ecfc:	0800ed7f 	.word	0x0800ed7f
 800ed00:	0800edc3 	.word	0x0800edc3
 800ed04:	0800edc3 	.word	0x0800edc3
 800ed08:	0800edc3 	.word	0x0800edc3
 800ed0c:	0800edc3 	.word	0x0800edc3
 800ed10:	0800edc3 	.word	0x0800edc3
 800ed14:	0800edc3 	.word	0x0800edc3
 800ed18:	0800edc3 	.word	0x0800edc3
 800ed1c:	0800ed8f 	.word	0x0800ed8f
 800ed20:	0800edc3 	.word	0x0800edc3
 800ed24:	0800edc3 	.word	0x0800edc3
 800ed28:	0800edc3 	.word	0x0800edc3
 800ed2c:	0800edc3 	.word	0x0800edc3
 800ed30:	0800edc3 	.word	0x0800edc3
 800ed34:	0800edc3 	.word	0x0800edc3
 800ed38:	0800edc3 	.word	0x0800edc3
 800ed3c:	0800edc3 	.word	0x0800edc3
 800ed40:	0800edc3 	.word	0x0800edc3
 800ed44:	0800edc3 	.word	0x0800edc3
 800ed48:	0800edc3 	.word	0x0800edc3
 800ed4c:	0800edc3 	.word	0x0800edc3
 800ed50:	0800edc3 	.word	0x0800edc3
 800ed54:	0800edc3 	.word	0x0800edc3
 800ed58:	0800edc3 	.word	0x0800edc3
 800ed5c:	0800edb5 	.word	0x0800edb5
 800ed60:	2b40      	cmp	r3, #64	; 0x40
 800ed62:	d02a      	beq.n	800edba <UART_SetConfig+0x8aa>
 800ed64:	e02d      	b.n	800edc2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ed66:	f7f9 fee7 	bl	8008b38 <HAL_RCCEx_GetD3PCLK1Freq>
 800ed6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed6c:	e02f      	b.n	800edce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7f9 fef6 	bl	8008b64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed7c:	e027      	b.n	800edce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed7e:	f107 0318 	add.w	r3, r7, #24
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fa f842 	bl	8008e0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed88:	69fb      	ldr	r3, [r7, #28]
 800ed8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed8c:	e01f      	b.n	800edce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed8e:	4b21      	ldr	r3, [pc, #132]	; (800ee14 <UART_SetConfig+0x904>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	f003 0320 	and.w	r3, r3, #32
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d009      	beq.n	800edae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed9a:	4b1e      	ldr	r3, [pc, #120]	; (800ee14 <UART_SetConfig+0x904>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	08db      	lsrs	r3, r3, #3
 800eda0:	f003 0303 	and.w	r3, r3, #3
 800eda4:	4a1d      	ldr	r2, [pc, #116]	; (800ee1c <UART_SetConfig+0x90c>)
 800eda6:	fa22 f303 	lsr.w	r3, r2, r3
 800edaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800edac:	e00f      	b.n	800edce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800edae:	4b1b      	ldr	r3, [pc, #108]	; (800ee1c <UART_SetConfig+0x90c>)
 800edb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edb2:	e00c      	b.n	800edce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800edb4:	4b1a      	ldr	r3, [pc, #104]	; (800ee20 <UART_SetConfig+0x910>)
 800edb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edb8:	e009      	b.n	800edce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800edba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800edbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edc0:	e005      	b.n	800edce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800edc2:	2300      	movs	r3, #0
 800edc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800edc6:	2301      	movs	r3, #1
 800edc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800edcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800edce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	f000 81ee 	beq.w	800f1b2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edda:	4a12      	ldr	r2, [pc, #72]	; (800ee24 <UART_SetConfig+0x914>)
 800eddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ede0:	461a      	mov	r2, r3
 800ede2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ede4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ede8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	685a      	ldr	r2, [r3, #4]
 800edee:	4613      	mov	r3, r2
 800edf0:	005b      	lsls	r3, r3, #1
 800edf2:	4413      	add	r3, r2
 800edf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d305      	bcc.n	800ee06 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d910      	bls.n	800ee28 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ee06:	2301      	movs	r3, #1
 800ee08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ee0c:	e1d1      	b.n	800f1b2 <UART_SetConfig+0xca2>
 800ee0e:	bf00      	nop
 800ee10:	40011c00 	.word	0x40011c00
 800ee14:	58024400 	.word	0x58024400
 800ee18:	58000c00 	.word	0x58000c00
 800ee1c:	03d09000 	.word	0x03d09000
 800ee20:	003d0900 	.word	0x003d0900
 800ee24:	08012958 	.word	0x08012958
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	60bb      	str	r3, [r7, #8]
 800ee2e:	60fa      	str	r2, [r7, #12]
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee34:	4ac0      	ldr	r2, [pc, #768]	; (800f138 <UART_SetConfig+0xc28>)
 800ee36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	603b      	str	r3, [r7, #0]
 800ee40:	607a      	str	r2, [r7, #4]
 800ee42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ee4a:	f7f1 faa1 	bl	8000390 <__aeabi_uldivmod>
 800ee4e:	4602      	mov	r2, r0
 800ee50:	460b      	mov	r3, r1
 800ee52:	4610      	mov	r0, r2
 800ee54:	4619      	mov	r1, r3
 800ee56:	f04f 0200 	mov.w	r2, #0
 800ee5a:	f04f 0300 	mov.w	r3, #0
 800ee5e:	020b      	lsls	r3, r1, #8
 800ee60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ee64:	0202      	lsls	r2, r0, #8
 800ee66:	6979      	ldr	r1, [r7, #20]
 800ee68:	6849      	ldr	r1, [r1, #4]
 800ee6a:	0849      	lsrs	r1, r1, #1
 800ee6c:	2000      	movs	r0, #0
 800ee6e:	460c      	mov	r4, r1
 800ee70:	4605      	mov	r5, r0
 800ee72:	eb12 0804 	adds.w	r8, r2, r4
 800ee76:	eb43 0905 	adc.w	r9, r3, r5
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	685b      	ldr	r3, [r3, #4]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	469a      	mov	sl, r3
 800ee82:	4693      	mov	fp, r2
 800ee84:	4652      	mov	r2, sl
 800ee86:	465b      	mov	r3, fp
 800ee88:	4640      	mov	r0, r8
 800ee8a:	4649      	mov	r1, r9
 800ee8c:	f7f1 fa80 	bl	8000390 <__aeabi_uldivmod>
 800ee90:	4602      	mov	r2, r0
 800ee92:	460b      	mov	r3, r1
 800ee94:	4613      	mov	r3, r2
 800ee96:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ee98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee9e:	d308      	bcc.n	800eeb2 <UART_SetConfig+0x9a2>
 800eea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eea6:	d204      	bcs.n	800eeb2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eeae:	60da      	str	r2, [r3, #12]
 800eeb0:	e17f      	b.n	800f1b2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eeb8:	e17b      	b.n	800f1b2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	69db      	ldr	r3, [r3, #28]
 800eebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eec2:	f040 80bd 	bne.w	800f040 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800eec6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eeca:	2b20      	cmp	r3, #32
 800eecc:	dc48      	bgt.n	800ef60 <UART_SetConfig+0xa50>
 800eece:	2b00      	cmp	r3, #0
 800eed0:	db7b      	blt.n	800efca <UART_SetConfig+0xaba>
 800eed2:	2b20      	cmp	r3, #32
 800eed4:	d879      	bhi.n	800efca <UART_SetConfig+0xaba>
 800eed6:	a201      	add	r2, pc, #4	; (adr r2, 800eedc <UART_SetConfig+0x9cc>)
 800eed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eedc:	0800ef67 	.word	0x0800ef67
 800eee0:	0800ef6f 	.word	0x0800ef6f
 800eee4:	0800efcb 	.word	0x0800efcb
 800eee8:	0800efcb 	.word	0x0800efcb
 800eeec:	0800ef77 	.word	0x0800ef77
 800eef0:	0800efcb 	.word	0x0800efcb
 800eef4:	0800efcb 	.word	0x0800efcb
 800eef8:	0800efcb 	.word	0x0800efcb
 800eefc:	0800ef87 	.word	0x0800ef87
 800ef00:	0800efcb 	.word	0x0800efcb
 800ef04:	0800efcb 	.word	0x0800efcb
 800ef08:	0800efcb 	.word	0x0800efcb
 800ef0c:	0800efcb 	.word	0x0800efcb
 800ef10:	0800efcb 	.word	0x0800efcb
 800ef14:	0800efcb 	.word	0x0800efcb
 800ef18:	0800efcb 	.word	0x0800efcb
 800ef1c:	0800ef97 	.word	0x0800ef97
 800ef20:	0800efcb 	.word	0x0800efcb
 800ef24:	0800efcb 	.word	0x0800efcb
 800ef28:	0800efcb 	.word	0x0800efcb
 800ef2c:	0800efcb 	.word	0x0800efcb
 800ef30:	0800efcb 	.word	0x0800efcb
 800ef34:	0800efcb 	.word	0x0800efcb
 800ef38:	0800efcb 	.word	0x0800efcb
 800ef3c:	0800efcb 	.word	0x0800efcb
 800ef40:	0800efcb 	.word	0x0800efcb
 800ef44:	0800efcb 	.word	0x0800efcb
 800ef48:	0800efcb 	.word	0x0800efcb
 800ef4c:	0800efcb 	.word	0x0800efcb
 800ef50:	0800efcb 	.word	0x0800efcb
 800ef54:	0800efcb 	.word	0x0800efcb
 800ef58:	0800efcb 	.word	0x0800efcb
 800ef5c:	0800efbd 	.word	0x0800efbd
 800ef60:	2b40      	cmp	r3, #64	; 0x40
 800ef62:	d02e      	beq.n	800efc2 <UART_SetConfig+0xab2>
 800ef64:	e031      	b.n	800efca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef66:	f7f8 fa81 	bl	800746c <HAL_RCC_GetPCLK1Freq>
 800ef6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef6c:	e033      	b.n	800efd6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef6e:	f7f8 fa93 	bl	8007498 <HAL_RCC_GetPCLK2Freq>
 800ef72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef74:	e02f      	b.n	800efd6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7f9 fdf2 	bl	8008b64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef84:	e027      	b.n	800efd6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef86:	f107 0318 	add.w	r3, r7, #24
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7f9 ff3e 	bl	8008e0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef94:	e01f      	b.n	800efd6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef96:	4b69      	ldr	r3, [pc, #420]	; (800f13c <UART_SetConfig+0xc2c>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f003 0320 	and.w	r3, r3, #32
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d009      	beq.n	800efb6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800efa2:	4b66      	ldr	r3, [pc, #408]	; (800f13c <UART_SetConfig+0xc2c>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	08db      	lsrs	r3, r3, #3
 800efa8:	f003 0303 	and.w	r3, r3, #3
 800efac:	4a64      	ldr	r2, [pc, #400]	; (800f140 <UART_SetConfig+0xc30>)
 800efae:	fa22 f303 	lsr.w	r3, r2, r3
 800efb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800efb4:	e00f      	b.n	800efd6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800efb6:	4b62      	ldr	r3, [pc, #392]	; (800f140 <UART_SetConfig+0xc30>)
 800efb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efba:	e00c      	b.n	800efd6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800efbc:	4b61      	ldr	r3, [pc, #388]	; (800f144 <UART_SetConfig+0xc34>)
 800efbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efc0:	e009      	b.n	800efd6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efc8:	e005      	b.n	800efd6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800efca:	2300      	movs	r3, #0
 800efcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800efce:	2301      	movs	r3, #1
 800efd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800efd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800efd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efd8:	2b00      	cmp	r3, #0
 800efda:	f000 80ea 	beq.w	800f1b2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe2:	4a55      	ldr	r2, [pc, #340]	; (800f138 <UART_SetConfig+0xc28>)
 800efe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efe8:	461a      	mov	r2, r3
 800efea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efec:	fbb3 f3f2 	udiv	r3, r3, r2
 800eff0:	005a      	lsls	r2, r3, #1
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	085b      	lsrs	r3, r3, #1
 800eff8:	441a      	add	r2, r3
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	fbb2 f3f3 	udiv	r3, r2, r3
 800f002:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f006:	2b0f      	cmp	r3, #15
 800f008:	d916      	bls.n	800f038 <UART_SetConfig+0xb28>
 800f00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f010:	d212      	bcs.n	800f038 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f014:	b29b      	uxth	r3, r3
 800f016:	f023 030f 	bic.w	r3, r3, #15
 800f01a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01e:	085b      	lsrs	r3, r3, #1
 800f020:	b29b      	uxth	r3, r3
 800f022:	f003 0307 	and.w	r3, r3, #7
 800f026:	b29a      	uxth	r2, r3
 800f028:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f02a:	4313      	orrs	r3, r2
 800f02c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f034:	60da      	str	r2, [r3, #12]
 800f036:	e0bc      	b.n	800f1b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f038:	2301      	movs	r3, #1
 800f03a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f03e:	e0b8      	b.n	800f1b2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f040:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f044:	2b20      	cmp	r3, #32
 800f046:	dc4b      	bgt.n	800f0e0 <UART_SetConfig+0xbd0>
 800f048:	2b00      	cmp	r3, #0
 800f04a:	f2c0 8087 	blt.w	800f15c <UART_SetConfig+0xc4c>
 800f04e:	2b20      	cmp	r3, #32
 800f050:	f200 8084 	bhi.w	800f15c <UART_SetConfig+0xc4c>
 800f054:	a201      	add	r2, pc, #4	; (adr r2, 800f05c <UART_SetConfig+0xb4c>)
 800f056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f05a:	bf00      	nop
 800f05c:	0800f0e7 	.word	0x0800f0e7
 800f060:	0800f0ef 	.word	0x0800f0ef
 800f064:	0800f15d 	.word	0x0800f15d
 800f068:	0800f15d 	.word	0x0800f15d
 800f06c:	0800f0f7 	.word	0x0800f0f7
 800f070:	0800f15d 	.word	0x0800f15d
 800f074:	0800f15d 	.word	0x0800f15d
 800f078:	0800f15d 	.word	0x0800f15d
 800f07c:	0800f107 	.word	0x0800f107
 800f080:	0800f15d 	.word	0x0800f15d
 800f084:	0800f15d 	.word	0x0800f15d
 800f088:	0800f15d 	.word	0x0800f15d
 800f08c:	0800f15d 	.word	0x0800f15d
 800f090:	0800f15d 	.word	0x0800f15d
 800f094:	0800f15d 	.word	0x0800f15d
 800f098:	0800f15d 	.word	0x0800f15d
 800f09c:	0800f117 	.word	0x0800f117
 800f0a0:	0800f15d 	.word	0x0800f15d
 800f0a4:	0800f15d 	.word	0x0800f15d
 800f0a8:	0800f15d 	.word	0x0800f15d
 800f0ac:	0800f15d 	.word	0x0800f15d
 800f0b0:	0800f15d 	.word	0x0800f15d
 800f0b4:	0800f15d 	.word	0x0800f15d
 800f0b8:	0800f15d 	.word	0x0800f15d
 800f0bc:	0800f15d 	.word	0x0800f15d
 800f0c0:	0800f15d 	.word	0x0800f15d
 800f0c4:	0800f15d 	.word	0x0800f15d
 800f0c8:	0800f15d 	.word	0x0800f15d
 800f0cc:	0800f15d 	.word	0x0800f15d
 800f0d0:	0800f15d 	.word	0x0800f15d
 800f0d4:	0800f15d 	.word	0x0800f15d
 800f0d8:	0800f15d 	.word	0x0800f15d
 800f0dc:	0800f14f 	.word	0x0800f14f
 800f0e0:	2b40      	cmp	r3, #64	; 0x40
 800f0e2:	d037      	beq.n	800f154 <UART_SetConfig+0xc44>
 800f0e4:	e03a      	b.n	800f15c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0e6:	f7f8 f9c1 	bl	800746c <HAL_RCC_GetPCLK1Freq>
 800f0ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f0ec:	e03c      	b.n	800f168 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f0ee:	f7f8 f9d3 	bl	8007498 <HAL_RCC_GetPCLK2Freq>
 800f0f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f0f4:	e038      	b.n	800f168 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7f9 fd32 	bl	8008b64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f104:	e030      	b.n	800f168 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f106:	f107 0318 	add.w	r3, r7, #24
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7f9 fe7e 	bl	8008e0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f110:	69fb      	ldr	r3, [r7, #28]
 800f112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f114:	e028      	b.n	800f168 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f116:	4b09      	ldr	r3, [pc, #36]	; (800f13c <UART_SetConfig+0xc2c>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f003 0320 	and.w	r3, r3, #32
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d012      	beq.n	800f148 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f122:	4b06      	ldr	r3, [pc, #24]	; (800f13c <UART_SetConfig+0xc2c>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	08db      	lsrs	r3, r3, #3
 800f128:	f003 0303 	and.w	r3, r3, #3
 800f12c:	4a04      	ldr	r2, [pc, #16]	; (800f140 <UART_SetConfig+0xc30>)
 800f12e:	fa22 f303 	lsr.w	r3, r2, r3
 800f132:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f134:	e018      	b.n	800f168 <UART_SetConfig+0xc58>
 800f136:	bf00      	nop
 800f138:	08012958 	.word	0x08012958
 800f13c:	58024400 	.word	0x58024400
 800f140:	03d09000 	.word	0x03d09000
 800f144:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f148:	4b24      	ldr	r3, [pc, #144]	; (800f1dc <UART_SetConfig+0xccc>)
 800f14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f14c:	e00c      	b.n	800f168 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f14e:	4b24      	ldr	r3, [pc, #144]	; (800f1e0 <UART_SetConfig+0xcd0>)
 800f150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f152:	e009      	b.n	800f168 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f15a:	e005      	b.n	800f168 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f15c:	2300      	movs	r3, #0
 800f15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f160:	2301      	movs	r3, #1
 800f162:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f166:	bf00      	nop
    }

    if (pclk != 0U)
 800f168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d021      	beq.n	800f1b2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f172:	4a1c      	ldr	r2, [pc, #112]	; (800f1e4 <UART_SetConfig+0xcd4>)
 800f174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f178:	461a      	mov	r2, r3
 800f17a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f17c:	fbb3 f2f2 	udiv	r2, r3, r2
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	085b      	lsrs	r3, r3, #1
 800f186:	441a      	add	r2, r3
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f190:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f194:	2b0f      	cmp	r3, #15
 800f196:	d909      	bls.n	800f1ac <UART_SetConfig+0xc9c>
 800f198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f19e:	d205      	bcs.n	800f1ac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a2:	b29a      	uxth	r2, r3
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	60da      	str	r2, [r3, #12]
 800f1aa:	e002      	b.n	800f1b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	2201      	movs	r2, #1
 800f1be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f1ce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3748      	adds	r7, #72	; 0x48
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f1dc:	03d09000 	.word	0x03d09000
 800f1e0:	003d0900 	.word	0x003d0900
 800f1e4:	08012958 	.word	0x08012958

0800f1e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b083      	sub	sp, #12
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1f4:	f003 0301 	and.w	r3, r3, #1
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d00a      	beq.n	800f212 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	430a      	orrs	r2, r1
 800f210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f216:	f003 0302 	and.w	r3, r3, #2
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d00a      	beq.n	800f234 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	685b      	ldr	r3, [r3, #4]
 800f224:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	430a      	orrs	r2, r1
 800f232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f238:	f003 0304 	and.w	r3, r3, #4
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d00a      	beq.n	800f256 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	430a      	orrs	r2, r1
 800f254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f25a:	f003 0308 	and.w	r3, r3, #8
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d00a      	beq.n	800f278 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	430a      	orrs	r2, r1
 800f276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f27c:	f003 0310 	and.w	r3, r3, #16
 800f280:	2b00      	cmp	r3, #0
 800f282:	d00a      	beq.n	800f29a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	689b      	ldr	r3, [r3, #8]
 800f28a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	430a      	orrs	r2, r1
 800f298:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f29e:	f003 0320 	and.w	r3, r3, #32
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d00a      	beq.n	800f2bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	689b      	ldr	r3, [r3, #8]
 800f2ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	430a      	orrs	r2, r1
 800f2ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d01a      	beq.n	800f2fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	685b      	ldr	r3, [r3, #4]
 800f2ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	430a      	orrs	r2, r1
 800f2dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2e6:	d10a      	bne.n	800f2fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	430a      	orrs	r2, r1
 800f2fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f306:	2b00      	cmp	r3, #0
 800f308:	d00a      	beq.n	800f320 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	430a      	orrs	r2, r1
 800f31e:	605a      	str	r2, [r3, #4]
  }
}
 800f320:	bf00      	nop
 800f322:	370c      	adds	r7, #12
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b086      	sub	sp, #24
 800f330:	af02      	add	r7, sp, #8
 800f332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2200      	movs	r2, #0
 800f338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f33c:	f7f3 fe9a 	bl	8003074 <HAL_GetTick>
 800f340:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f003 0308 	and.w	r3, r3, #8
 800f34c:	2b08      	cmp	r3, #8
 800f34e:	d10e      	bne.n	800f36e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f350:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f354:	9300      	str	r3, [sp, #0]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2200      	movs	r2, #0
 800f35a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 f82f 	bl	800f3c2 <UART_WaitOnFlagUntilTimeout>
 800f364:	4603      	mov	r3, r0
 800f366:	2b00      	cmp	r3, #0
 800f368:	d001      	beq.n	800f36e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f36a:	2303      	movs	r3, #3
 800f36c:	e025      	b.n	800f3ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f003 0304 	and.w	r3, r3, #4
 800f378:	2b04      	cmp	r3, #4
 800f37a:	d10e      	bne.n	800f39a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f37c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f380:	9300      	str	r3, [sp, #0]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2200      	movs	r2, #0
 800f386:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 f819 	bl	800f3c2 <UART_WaitOnFlagUntilTimeout>
 800f390:	4603      	mov	r3, r0
 800f392:	2b00      	cmp	r3, #0
 800f394:	d001      	beq.n	800f39a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f396:	2303      	movs	r3, #3
 800f398:	e00f      	b.n	800f3ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2220      	movs	r2, #32
 800f39e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	2220      	movs	r2, #32
 800f3a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f3b8:	2300      	movs	r3, #0
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}

0800f3c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	b09c      	sub	sp, #112	; 0x70
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	60f8      	str	r0, [r7, #12]
 800f3ca:	60b9      	str	r1, [r7, #8]
 800f3cc:	603b      	str	r3, [r7, #0]
 800f3ce:	4613      	mov	r3, r2
 800f3d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3d2:	e0a9      	b.n	800f528 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3da:	f000 80a5 	beq.w	800f528 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f3de:	f7f3 fe49 	bl	8003074 <HAL_GetTick>
 800f3e2:	4602      	mov	r2, r0
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	1ad3      	subs	r3, r2, r3
 800f3e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d302      	bcc.n	800f3f4 <UART_WaitOnFlagUntilTimeout+0x32>
 800f3ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d140      	bne.n	800f476 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3fc:	e853 3f00 	ldrex	r3, [r3]
 800f400:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f404:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f408:	667b      	str	r3, [r7, #100]	; 0x64
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	461a      	mov	r2, r3
 800f410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f412:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f414:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f416:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f418:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f41a:	e841 2300 	strex	r3, r2, [r1]
 800f41e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f422:	2b00      	cmp	r3, #0
 800f424:	d1e6      	bne.n	800f3f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	3308      	adds	r3, #8
 800f42c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f42e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f430:	e853 3f00 	ldrex	r3, [r3]
 800f434:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f438:	f023 0301 	bic.w	r3, r3, #1
 800f43c:	663b      	str	r3, [r7, #96]	; 0x60
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	3308      	adds	r3, #8
 800f444:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f446:	64ba      	str	r2, [r7, #72]	; 0x48
 800f448:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f44a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f44c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f44e:	e841 2300 	strex	r3, r2, [r1]
 800f452:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f456:	2b00      	cmp	r3, #0
 800f458:	d1e5      	bne.n	800f426 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	2220      	movs	r2, #32
 800f45e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2220      	movs	r2, #32
 800f466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	2200      	movs	r2, #0
 800f46e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f472:	2303      	movs	r3, #3
 800f474:	e069      	b.n	800f54a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f003 0304 	and.w	r3, r3, #4
 800f480:	2b00      	cmp	r3, #0
 800f482:	d051      	beq.n	800f528 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	69db      	ldr	r3, [r3, #28]
 800f48a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f48e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f492:	d149      	bne.n	800f528 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f49c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a6:	e853 3f00 	ldrex	r3, [r3]
 800f4aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f4b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4bc:	637b      	str	r3, [r7, #52]	; 0x34
 800f4be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f4c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4c4:	e841 2300 	strex	r3, r2, [r1]
 800f4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d1e6      	bne.n	800f49e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	3308      	adds	r3, #8
 800f4d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	e853 3f00 	ldrex	r3, [r3]
 800f4de:	613b      	str	r3, [r7, #16]
   return(result);
 800f4e0:	693b      	ldr	r3, [r7, #16]
 800f4e2:	f023 0301 	bic.w	r3, r3, #1
 800f4e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	3308      	adds	r3, #8
 800f4ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f4f0:	623a      	str	r2, [r7, #32]
 800f4f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f4:	69f9      	ldr	r1, [r7, #28]
 800f4f6:	6a3a      	ldr	r2, [r7, #32]
 800f4f8:	e841 2300 	strex	r3, r2, [r1]
 800f4fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d1e5      	bne.n	800f4d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2220      	movs	r2, #32
 800f508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2220      	movs	r2, #32
 800f510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	2220      	movs	r2, #32
 800f518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2200      	movs	r2, #0
 800f520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f524:	2303      	movs	r3, #3
 800f526:	e010      	b.n	800f54a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	69da      	ldr	r2, [r3, #28]
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	4013      	ands	r3, r2
 800f532:	68ba      	ldr	r2, [r7, #8]
 800f534:	429a      	cmp	r2, r3
 800f536:	bf0c      	ite	eq
 800f538:	2301      	moveq	r3, #1
 800f53a:	2300      	movne	r3, #0
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	461a      	mov	r2, r3
 800f540:	79fb      	ldrb	r3, [r7, #7]
 800f542:	429a      	cmp	r2, r3
 800f544:	f43f af46 	beq.w	800f3d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f548:	2300      	movs	r3, #0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3770      	adds	r7, #112	; 0x70
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
	...

0800f554 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f554:	b480      	push	{r7}
 800f556:	b0a3      	sub	sp, #140	; 0x8c
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	4613      	mov	r3, r2
 800f560:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	68ba      	ldr	r2, [r7, #8]
 800f566:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	88fa      	ldrh	r2, [r7, #6]
 800f56c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	88fa      	ldrh	r2, [r7, #6]
 800f574:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2200      	movs	r2, #0
 800f57c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	689b      	ldr	r3, [r3, #8]
 800f582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f586:	d10e      	bne.n	800f5a6 <UART_Start_Receive_IT+0x52>
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	691b      	ldr	r3, [r3, #16]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d105      	bne.n	800f59c <UART_Start_Receive_IT+0x48>
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f596:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f59a:	e02d      	b.n	800f5f8 <UART_Start_Receive_IT+0xa4>
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	22ff      	movs	r2, #255	; 0xff
 800f5a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5a4:	e028      	b.n	800f5f8 <UART_Start_Receive_IT+0xa4>
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	689b      	ldr	r3, [r3, #8]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d10d      	bne.n	800f5ca <UART_Start_Receive_IT+0x76>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	691b      	ldr	r3, [r3, #16]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d104      	bne.n	800f5c0 <UART_Start_Receive_IT+0x6c>
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	22ff      	movs	r2, #255	; 0xff
 800f5ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5be:	e01b      	b.n	800f5f8 <UART_Start_Receive_IT+0xa4>
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	227f      	movs	r2, #127	; 0x7f
 800f5c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5c8:	e016      	b.n	800f5f8 <UART_Start_Receive_IT+0xa4>
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	689b      	ldr	r3, [r3, #8]
 800f5ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f5d2:	d10d      	bne.n	800f5f0 <UART_Start_Receive_IT+0x9c>
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	691b      	ldr	r3, [r3, #16]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d104      	bne.n	800f5e6 <UART_Start_Receive_IT+0x92>
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	227f      	movs	r2, #127	; 0x7f
 800f5e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5e4:	e008      	b.n	800f5f8 <UART_Start_Receive_IT+0xa4>
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	223f      	movs	r2, #63	; 0x3f
 800f5ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5ee:	e003      	b.n	800f5f8 <UART_Start_Receive_IT+0xa4>
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2222      	movs	r2, #34	; 0x22
 800f604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	3308      	adds	r3, #8
 800f60e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f612:	e853 3f00 	ldrex	r3, [r3]
 800f616:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f618:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f61a:	f043 0301 	orr.w	r3, r3, #1
 800f61e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	3308      	adds	r3, #8
 800f628:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f62c:	673a      	str	r2, [r7, #112]	; 0x70
 800f62e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f630:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f632:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f634:	e841 2300 	strex	r3, r2, [r1]
 800f638:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f63a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d1e3      	bne.n	800f608 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f648:	d153      	bne.n	800f6f2 <UART_Start_Receive_IT+0x19e>
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f650:	88fa      	ldrh	r2, [r7, #6]
 800f652:	429a      	cmp	r2, r3
 800f654:	d34d      	bcc.n	800f6f2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	689b      	ldr	r3, [r3, #8]
 800f65a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f65e:	d107      	bne.n	800f670 <UART_Start_Receive_IT+0x11c>
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	691b      	ldr	r3, [r3, #16]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d103      	bne.n	800f670 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	4a4b      	ldr	r2, [pc, #300]	; (800f798 <UART_Start_Receive_IT+0x244>)
 800f66c:	671a      	str	r2, [r3, #112]	; 0x70
 800f66e:	e002      	b.n	800f676 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	4a4a      	ldr	r2, [pc, #296]	; (800f79c <UART_Start_Receive_IT+0x248>)
 800f674:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	2200      	movs	r2, #0
 800f67a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	691b      	ldr	r3, [r3, #16]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d01a      	beq.n	800f6bc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f68c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f68e:	e853 3f00 	ldrex	r3, [r3]
 800f692:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f69a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	461a      	mov	r2, r3
 800f6a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f6a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f6aa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f6ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f6b0:	e841 2300 	strex	r3, r2, [r1]
 800f6b4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f6b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d1e4      	bne.n	800f686 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	3308      	adds	r3, #8
 800f6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6c6:	e853 3f00 	ldrex	r3, [r3]
 800f6ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f6d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	3308      	adds	r3, #8
 800f6da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f6dc:	64ba      	str	r2, [r7, #72]	; 0x48
 800f6de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f6e4:	e841 2300 	strex	r3, r2, [r1]
 800f6e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f6ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d1e5      	bne.n	800f6bc <UART_Start_Receive_IT+0x168>
 800f6f0:	e04a      	b.n	800f788 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	689b      	ldr	r3, [r3, #8]
 800f6f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6fa:	d107      	bne.n	800f70c <UART_Start_Receive_IT+0x1b8>
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	691b      	ldr	r3, [r3, #16]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d103      	bne.n	800f70c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	4a26      	ldr	r2, [pc, #152]	; (800f7a0 <UART_Start_Receive_IT+0x24c>)
 800f708:	671a      	str	r2, [r3, #112]	; 0x70
 800f70a:	e002      	b.n	800f712 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	4a25      	ldr	r2, [pc, #148]	; (800f7a4 <UART_Start_Receive_IT+0x250>)
 800f710:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	2200      	movs	r2, #0
 800f716:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	691b      	ldr	r3, [r3, #16]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d019      	beq.n	800f756 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f72a:	e853 3f00 	ldrex	r3, [r3]
 800f72e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f732:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f736:	677b      	str	r3, [r7, #116]	; 0x74
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	461a      	mov	r2, r3
 800f73e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f740:	637b      	str	r3, [r7, #52]	; 0x34
 800f742:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f744:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f748:	e841 2300 	strex	r3, r2, [r1]
 800f74c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f750:	2b00      	cmp	r3, #0
 800f752:	d1e6      	bne.n	800f722 <UART_Start_Receive_IT+0x1ce>
 800f754:	e018      	b.n	800f788 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	e853 3f00 	ldrex	r3, [r3]
 800f762:	613b      	str	r3, [r7, #16]
   return(result);
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	f043 0320 	orr.w	r3, r3, #32
 800f76a:	67bb      	str	r3, [r7, #120]	; 0x78
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	461a      	mov	r2, r3
 800f772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f774:	623b      	str	r3, [r7, #32]
 800f776:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f778:	69f9      	ldr	r1, [r7, #28]
 800f77a:	6a3a      	ldr	r2, [r7, #32]
 800f77c:	e841 2300 	strex	r3, r2, [r1]
 800f780:	61bb      	str	r3, [r7, #24]
   return(result);
 800f782:	69bb      	ldr	r3, [r7, #24]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d1e6      	bne.n	800f756 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800f788:	2300      	movs	r3, #0
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	378c      	adds	r7, #140	; 0x8c
 800f78e:	46bd      	mov	sp, r7
 800f790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f794:	4770      	bx	lr
 800f796:	bf00      	nop
 800f798:	0800feb1 	.word	0x0800feb1
 800f79c:	0800fbb9 	.word	0x0800fbb9
 800f7a0:	0800fa57 	.word	0x0800fa57
 800f7a4:	0800f8f7 	.word	0x0800f8f7

0800f7a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b095      	sub	sp, #84	; 0x54
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7b8:	e853 3f00 	ldrex	r3, [r3]
 800f7bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f7c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7ce:	643b      	str	r3, [r7, #64]	; 0x40
 800f7d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f7d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f7d6:	e841 2300 	strex	r3, r2, [r1]
 800f7da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d1e6      	bne.n	800f7b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	3308      	adds	r3, #8
 800f7e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ea:	6a3b      	ldr	r3, [r7, #32]
 800f7ec:	e853 3f00 	ldrex	r3, [r3]
 800f7f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7f2:	69fa      	ldr	r2, [r7, #28]
 800f7f4:	4b1e      	ldr	r3, [pc, #120]	; (800f870 <UART_EndRxTransfer+0xc8>)
 800f7f6:	4013      	ands	r3, r2
 800f7f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	3308      	adds	r3, #8
 800f800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f802:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f804:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f806:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f80a:	e841 2300 	strex	r3, r2, [r1]
 800f80e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f812:	2b00      	cmp	r3, #0
 800f814:	d1e5      	bne.n	800f7e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f81a:	2b01      	cmp	r3, #1
 800f81c:	d118      	bne.n	800f850 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	e853 3f00 	ldrex	r3, [r3]
 800f82a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	f023 0310 	bic.w	r3, r3, #16
 800f832:	647b      	str	r3, [r7, #68]	; 0x44
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	461a      	mov	r2, r3
 800f83a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f83c:	61bb      	str	r3, [r7, #24]
 800f83e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f840:	6979      	ldr	r1, [r7, #20]
 800f842:	69ba      	ldr	r2, [r7, #24]
 800f844:	e841 2300 	strex	r3, r2, [r1]
 800f848:	613b      	str	r3, [r7, #16]
   return(result);
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d1e6      	bne.n	800f81e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2220      	movs	r2, #32
 800f854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2200      	movs	r2, #0
 800f85c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2200      	movs	r2, #0
 800f862:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f864:	bf00      	nop
 800f866:	3754      	adds	r7, #84	; 0x54
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr
 800f870:	effffffe 	.word	0xeffffffe

0800f874 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b084      	sub	sp, #16
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f880:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2200      	movs	r2, #0
 800f886:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2200      	movs	r2, #0
 800f88e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f892:	68f8      	ldr	r0, [r7, #12]
 800f894:	f7fe fe26 	bl	800e4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f898:	bf00      	nop
 800f89a:	3710      	adds	r7, #16
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b088      	sub	sp, #32
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	e853 3f00 	ldrex	r3, [r3]
 800f8b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8bc:	61fb      	str	r3, [r7, #28]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	69fb      	ldr	r3, [r7, #28]
 800f8c6:	61bb      	str	r3, [r7, #24]
 800f8c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ca:	6979      	ldr	r1, [r7, #20]
 800f8cc:	69ba      	ldr	r2, [r7, #24]
 800f8ce:	e841 2300 	strex	r3, r2, [r1]
 800f8d2:	613b      	str	r3, [r7, #16]
   return(result);
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d1e6      	bne.n	800f8a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2220      	movs	r2, #32
 800f8de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f7fe fdf1 	bl	800e4d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f8ee:	bf00      	nop
 800f8f0:	3720      	adds	r7, #32
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}

0800f8f6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f8f6:	b580      	push	{r7, lr}
 800f8f8:	b096      	sub	sp, #88	; 0x58
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f904:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f90e:	2b22      	cmp	r3, #34	; 0x22
 800f910:	f040 8095 	bne.w	800fa3e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f91a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f91e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f922:	b2d9      	uxtb	r1, r3
 800f924:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f928:	b2da      	uxtb	r2, r3
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f92e:	400a      	ands	r2, r1
 800f930:	b2d2      	uxtb	r2, r2
 800f932:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f938:	1c5a      	adds	r2, r3, #1
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f944:	b29b      	uxth	r3, r3
 800f946:	3b01      	subs	r3, #1
 800f948:	b29a      	uxth	r2, r3
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f956:	b29b      	uxth	r3, r3
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d178      	bne.n	800fa4e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f964:	e853 3f00 	ldrex	r3, [r3]
 800f968:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f96c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f970:	653b      	str	r3, [r7, #80]	; 0x50
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	461a      	mov	r2, r3
 800f978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f97a:	647b      	str	r3, [r7, #68]	; 0x44
 800f97c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f97e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f982:	e841 2300 	strex	r3, r2, [r1]
 800f986:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d1e6      	bne.n	800f95c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	3308      	adds	r3, #8
 800f994:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f998:	e853 3f00 	ldrex	r3, [r3]
 800f99c:	623b      	str	r3, [r7, #32]
   return(result);
 800f99e:	6a3b      	ldr	r3, [r7, #32]
 800f9a0:	f023 0301 	bic.w	r3, r3, #1
 800f9a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	3308      	adds	r3, #8
 800f9ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f9ae:	633a      	str	r2, [r7, #48]	; 0x30
 800f9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9b6:	e841 2300 	strex	r3, r2, [r1]
 800f9ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d1e5      	bne.n	800f98e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2220      	movs	r2, #32
 800f9c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d12e      	bne.n	800fa36 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	e853 3f00 	ldrex	r3, [r3]
 800f9ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f023 0310 	bic.w	r3, r3, #16
 800f9f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9fc:	61fb      	str	r3, [r7, #28]
 800f9fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa00:	69b9      	ldr	r1, [r7, #24]
 800fa02:	69fa      	ldr	r2, [r7, #28]
 800fa04:	e841 2300 	strex	r3, r2, [r1]
 800fa08:	617b      	str	r3, [r7, #20]
   return(result);
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d1e6      	bne.n	800f9de <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	69db      	ldr	r3, [r3, #28]
 800fa16:	f003 0310 	and.w	r3, r3, #16
 800fa1a:	2b10      	cmp	r3, #16
 800fa1c:	d103      	bne.n	800fa26 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	2210      	movs	r2, #16
 800fa24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f7fe fd62 	bl	800e4f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fa34:	e00b      	b.n	800fa4e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f7f1 ff12 	bl	8001860 <HAL_UART_RxCpltCallback>
}
 800fa3c:	e007      	b.n	800fa4e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	699a      	ldr	r2, [r3, #24]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f042 0208 	orr.w	r2, r2, #8
 800fa4c:	619a      	str	r2, [r3, #24]
}
 800fa4e:	bf00      	nop
 800fa50:	3758      	adds	r7, #88	; 0x58
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}

0800fa56 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fa56:	b580      	push	{r7, lr}
 800fa58:	b096      	sub	sp, #88	; 0x58
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa6e:	2b22      	cmp	r3, #34	; 0x22
 800fa70:	f040 8095 	bne.w	800fb9e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa7a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa82:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800fa84:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800fa88:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800fa8c:	4013      	ands	r3, r2
 800fa8e:	b29a      	uxth	r2, r3
 800fa90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa92:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa98:	1c9a      	adds	r2, r3, #2
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	3b01      	subs	r3, #1
 800faa8:	b29a      	uxth	r2, r3
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d178      	bne.n	800fbae <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fac4:	e853 3f00 	ldrex	r3, [r3]
 800fac8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800faca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800facc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fad0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	461a      	mov	r2, r3
 800fad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fada:	643b      	str	r3, [r7, #64]	; 0x40
 800fadc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fade:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fae0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fae2:	e841 2300 	strex	r3, r2, [r1]
 800fae6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faea:	2b00      	cmp	r3, #0
 800faec:	d1e6      	bne.n	800fabc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	3308      	adds	r3, #8
 800faf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faf6:	6a3b      	ldr	r3, [r7, #32]
 800faf8:	e853 3f00 	ldrex	r3, [r3]
 800fafc:	61fb      	str	r3, [r7, #28]
   return(result);
 800fafe:	69fb      	ldr	r3, [r7, #28]
 800fb00:	f023 0301 	bic.w	r3, r3, #1
 800fb04:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	3308      	adds	r3, #8
 800fb0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fb10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb16:	e841 2300 	strex	r3, r2, [r1]
 800fb1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d1e5      	bne.n	800faee <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2220      	movs	r2, #32
 800fb26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	d12e      	bne.n	800fb96 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	e853 3f00 	ldrex	r3, [r3]
 800fb4a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	f023 0310 	bic.w	r3, r3, #16
 800fb52:	647b      	str	r3, [r7, #68]	; 0x44
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	461a      	mov	r2, r3
 800fb5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb5c:	61bb      	str	r3, [r7, #24]
 800fb5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb60:	6979      	ldr	r1, [r7, #20]
 800fb62:	69ba      	ldr	r2, [r7, #24]
 800fb64:	e841 2300 	strex	r3, r2, [r1]
 800fb68:	613b      	str	r3, [r7, #16]
   return(result);
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d1e6      	bne.n	800fb3e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	69db      	ldr	r3, [r3, #28]
 800fb76:	f003 0310 	and.w	r3, r3, #16
 800fb7a:	2b10      	cmp	r3, #16
 800fb7c:	d103      	bne.n	800fb86 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	2210      	movs	r2, #16
 800fb84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f7fe fcb2 	bl	800e4f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fb94:	e00b      	b.n	800fbae <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f7f1 fe62 	bl	8001860 <HAL_UART_RxCpltCallback>
}
 800fb9c:	e007      	b.n	800fbae <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	699a      	ldr	r2, [r3, #24]
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	f042 0208 	orr.w	r2, r2, #8
 800fbac:	619a      	str	r2, [r3, #24]
}
 800fbae:	bf00      	nop
 800fbb0:	3758      	adds	r7, #88	; 0x58
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
	...

0800fbb8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b0a6      	sub	sp, #152	; 0x98
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbc6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	69db      	ldr	r3, [r3, #28]
 800fbd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	689b      	ldr	r3, [r3, #8]
 800fbe4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fbee:	2b22      	cmp	r3, #34	; 0x22
 800fbf0:	f040 814d 	bne.w	800fe8e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fbfa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fbfe:	e0f4      	b.n	800fdea <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc06:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fc0a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800fc0e:	b2d9      	uxtb	r1, r3
 800fc10:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800fc14:	b2da      	uxtb	r2, r3
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc1a:	400a      	ands	r2, r1
 800fc1c:	b2d2      	uxtb	r2, r2
 800fc1e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc24:	1c5a      	adds	r2, r3, #1
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	3b01      	subs	r3, #1
 800fc34:	b29a      	uxth	r2, r3
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	69db      	ldr	r3, [r3, #28]
 800fc42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fc46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc4a:	f003 0307 	and.w	r3, r3, #7
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d053      	beq.n	800fcfa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fc52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc56:	f003 0301 	and.w	r3, r3, #1
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d011      	beq.n	800fc82 <UART_RxISR_8BIT_FIFOEN+0xca>
 800fc5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fc62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d00b      	beq.n	800fc82 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2201      	movs	r2, #1
 800fc70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc78:	f043 0201 	orr.w	r2, r3, #1
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fc82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc86:	f003 0302 	and.w	r3, r3, #2
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d011      	beq.n	800fcb2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800fc8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fc92:	f003 0301 	and.w	r3, r3, #1
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d00b      	beq.n	800fcb2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	2202      	movs	r2, #2
 800fca0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fca8:	f043 0204 	orr.w	r2, r3, #4
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fcb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fcb6:	f003 0304 	and.w	r3, r3, #4
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d011      	beq.n	800fce2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800fcbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fcc2:	f003 0301 	and.w	r3, r3, #1
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d00b      	beq.n	800fce2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	2204      	movs	r2, #4
 800fcd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fcd8:	f043 0202 	orr.w	r2, r3, #2
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d006      	beq.n	800fcfa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f7fe fbf9 	bl	800e4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d171      	bne.n	800fdea <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd0e:	e853 3f00 	ldrex	r3, [r3]
 800fd12:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800fd14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	461a      	mov	r2, r3
 800fd24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fd28:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd2a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd2c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fd2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fd30:	e841 2300 	strex	r3, r2, [r1]
 800fd34:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fd36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d1e4      	bne.n	800fd06 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	3308      	adds	r3, #8
 800fd42:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd46:	e853 3f00 	ldrex	r3, [r3]
 800fd4a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fd4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd4e:	4b56      	ldr	r3, [pc, #344]	; (800fea8 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800fd50:	4013      	ands	r3, r2
 800fd52:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	3308      	adds	r3, #8
 800fd5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fd5c:	657a      	str	r2, [r7, #84]	; 0x54
 800fd5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fd64:	e841 2300 	strex	r3, r2, [r1]
 800fd68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fd6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d1e5      	bne.n	800fd3c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2220      	movs	r2, #32
 800fd74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd82:	2b01      	cmp	r3, #1
 800fd84:	d12e      	bne.n	800fde4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd94:	e853 3f00 	ldrex	r3, [r3]
 800fd98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd9c:	f023 0310 	bic.w	r3, r3, #16
 800fda0:	67bb      	str	r3, [r7, #120]	; 0x78
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	461a      	mov	r2, r3
 800fda8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdaa:	643b      	str	r3, [r7, #64]	; 0x40
 800fdac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fdb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fdb2:	e841 2300 	strex	r3, r2, [r1]
 800fdb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d1e6      	bne.n	800fd8c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	69db      	ldr	r3, [r3, #28]
 800fdc4:	f003 0310 	and.w	r3, r3, #16
 800fdc8:	2b10      	cmp	r3, #16
 800fdca:	d103      	bne.n	800fdd4 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	2210      	movs	r2, #16
 800fdd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fdda:	4619      	mov	r1, r3
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f7fe fb8b 	bl	800e4f8 <HAL_UARTEx_RxEventCallback>
 800fde2:	e002      	b.n	800fdea <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f7f1 fd3b 	bl	8001860 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fdea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d006      	beq.n	800fe00 <UART_RxISR_8BIT_FIFOEN+0x248>
 800fdf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fdf6:	f003 0320 	and.w	r3, r3, #32
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	f47f af00 	bne.w	800fc00 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fe0a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d045      	beq.n	800fe9e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fe18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d23e      	bcs.n	800fe9e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	3308      	adds	r3, #8
 800fe26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe28:	6a3b      	ldr	r3, [r7, #32]
 800fe2a:	e853 3f00 	ldrex	r3, [r3]
 800fe2e:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe30:	69fb      	ldr	r3, [r7, #28]
 800fe32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fe36:	673b      	str	r3, [r7, #112]	; 0x70
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	3308      	adds	r3, #8
 800fe3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fe40:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fe42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe48:	e841 2300 	strex	r3, r2, [r1]
 800fe4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fe4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d1e5      	bne.n	800fe20 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	4a15      	ldr	r2, [pc, #84]	; (800feac <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800fe58:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	e853 3f00 	ldrex	r3, [r3]
 800fe66:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	f043 0320 	orr.w	r3, r3, #32
 800fe6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	461a      	mov	r2, r3
 800fe76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe78:	61bb      	str	r3, [r7, #24]
 800fe7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe7c:	6979      	ldr	r1, [r7, #20]
 800fe7e:	69ba      	ldr	r2, [r7, #24]
 800fe80:	e841 2300 	strex	r3, r2, [r1]
 800fe84:	613b      	str	r3, [r7, #16]
   return(result);
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d1e6      	bne.n	800fe5a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fe8c:	e007      	b.n	800fe9e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	699a      	ldr	r2, [r3, #24]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	f042 0208 	orr.w	r2, r2, #8
 800fe9c:	619a      	str	r2, [r3, #24]
}
 800fe9e:	bf00      	nop
 800fea0:	3798      	adds	r7, #152	; 0x98
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}
 800fea6:	bf00      	nop
 800fea8:	effffffe 	.word	0xeffffffe
 800feac:	0800f8f7 	.word	0x0800f8f7

0800feb0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b0a8      	sub	sp, #160	; 0xa0
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800febe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	69db      	ldr	r3, [r3, #28]
 800fec8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	689b      	ldr	r3, [r3, #8]
 800fedc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fee6:	2b22      	cmp	r3, #34	; 0x22
 800fee8:	f040 8151 	bne.w	801018e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fef2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fef6:	e0f8      	b.n	80100ea <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fefe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800ff0a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800ff0e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800ff12:	4013      	ands	r3, r2
 800ff14:	b29a      	uxth	r2, r3
 800ff16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff20:	1c9a      	adds	r2, r3, #2
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff2c:	b29b      	uxth	r3, r3
 800ff2e:	3b01      	subs	r3, #1
 800ff30:	b29a      	uxth	r2, r3
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	69db      	ldr	r3, [r3, #28]
 800ff3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ff42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff46:	f003 0307 	and.w	r3, r3, #7
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d053      	beq.n	800fff6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ff4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff52:	f003 0301 	and.w	r3, r3, #1
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d011      	beq.n	800ff7e <UART_RxISR_16BIT_FIFOEN+0xce>
 800ff5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d00b      	beq.n	800ff7e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff74:	f043 0201 	orr.w	r2, r3, #1
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ff7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff82:	f003 0302 	and.w	r3, r3, #2
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d011      	beq.n	800ffae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ff8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff8e:	f003 0301 	and.w	r3, r3, #1
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d00b      	beq.n	800ffae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	2202      	movs	r2, #2
 800ff9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ffa4:	f043 0204 	orr.w	r2, r3, #4
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ffae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ffb2:	f003 0304 	and.w	r3, r3, #4
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d011      	beq.n	800ffde <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ffba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ffbe:	f003 0301 	and.w	r3, r3, #1
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d00b      	beq.n	800ffde <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2204      	movs	r2, #4
 800ffcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ffd4:	f043 0202 	orr.w	r2, r3, #2
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d006      	beq.n	800fff6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f7fe fa7b 	bl	800e4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2200      	movs	r2, #0
 800fff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fffc:	b29b      	uxth	r3, r3
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d173      	bne.n	80100ea <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801000a:	e853 3f00 	ldrex	r3, [r3]
 801000e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010016:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	461a      	mov	r2, r3
 8010020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010024:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010026:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010028:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801002a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801002c:	e841 2300 	strex	r3, r2, [r1]
 8010030:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010034:	2b00      	cmp	r3, #0
 8010036:	d1e4      	bne.n	8010002 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	3308      	adds	r3, #8
 801003e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010042:	e853 3f00 	ldrex	r3, [r3]
 8010046:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801004a:	4b57      	ldr	r3, [pc, #348]	; (80101a8 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 801004c:	4013      	ands	r3, r2
 801004e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	3308      	adds	r3, #8
 8010058:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801005c:	65ba      	str	r2, [r7, #88]	; 0x58
 801005e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010060:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010062:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010064:	e841 2300 	strex	r3, r2, [r1]
 8010068:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801006a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801006c:	2b00      	cmp	r3, #0
 801006e:	d1e3      	bne.n	8010038 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2220      	movs	r2, #32
 8010074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2200      	movs	r2, #0
 801007c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010082:	2b01      	cmp	r3, #1
 8010084:	d12e      	bne.n	80100e4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2200      	movs	r2, #0
 801008a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010094:	e853 3f00 	ldrex	r3, [r3]
 8010098:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801009a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801009c:	f023 0310 	bic.w	r3, r3, #16
 80100a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	461a      	mov	r2, r3
 80100a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80100aa:	647b      	str	r3, [r7, #68]	; 0x44
 80100ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80100b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100b2:	e841 2300 	strex	r3, r2, [r1]
 80100b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80100b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d1e6      	bne.n	801008c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	69db      	ldr	r3, [r3, #28]
 80100c4:	f003 0310 	and.w	r3, r3, #16
 80100c8:	2b10      	cmp	r3, #16
 80100ca:	d103      	bne.n	80100d4 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	2210      	movs	r2, #16
 80100d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80100da:	4619      	mov	r1, r3
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f7fe fa0b 	bl	800e4f8 <HAL_UARTEx_RxEventCallback>
 80100e2:	e002      	b.n	80100ea <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f7f1 fbbb 	bl	8001860 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80100ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d006      	beq.n	8010100 <UART_RxISR_16BIT_FIFOEN+0x250>
 80100f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80100f6:	f003 0320 	and.w	r3, r3, #32
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	f47f aefc 	bne.w	800fef8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010106:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801010a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801010e:	2b00      	cmp	r3, #0
 8010110:	d045      	beq.n	801019e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010118:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801011c:	429a      	cmp	r2, r3
 801011e:	d23e      	bcs.n	801019e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	3308      	adds	r3, #8
 8010126:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012a:	e853 3f00 	ldrex	r3, [r3]
 801012e:	623b      	str	r3, [r7, #32]
   return(result);
 8010130:	6a3b      	ldr	r3, [r7, #32]
 8010132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010136:	677b      	str	r3, [r7, #116]	; 0x74
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	3308      	adds	r3, #8
 801013e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010140:	633a      	str	r2, [r7, #48]	; 0x30
 8010142:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010144:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010148:	e841 2300 	strex	r3, r2, [r1]
 801014c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801014e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010150:	2b00      	cmp	r3, #0
 8010152:	d1e5      	bne.n	8010120 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	4a15      	ldr	r2, [pc, #84]	; (80101ac <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8010158:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	e853 3f00 	ldrex	r3, [r3]
 8010166:	60fb      	str	r3, [r7, #12]
   return(result);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f043 0320 	orr.w	r3, r3, #32
 801016e:	673b      	str	r3, [r7, #112]	; 0x70
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	461a      	mov	r2, r3
 8010176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010178:	61fb      	str	r3, [r7, #28]
 801017a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801017c:	69b9      	ldr	r1, [r7, #24]
 801017e:	69fa      	ldr	r2, [r7, #28]
 8010180:	e841 2300 	strex	r3, r2, [r1]
 8010184:	617b      	str	r3, [r7, #20]
   return(result);
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d1e6      	bne.n	801015a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801018c:	e007      	b.n	801019e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	699a      	ldr	r2, [r3, #24]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	f042 0208 	orr.w	r2, r2, #8
 801019c:	619a      	str	r2, [r3, #24]
}
 801019e:	bf00      	nop
 80101a0:	37a0      	adds	r7, #160	; 0xa0
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	effffffe 	.word	0xeffffffe
 80101ac:	0800fa57 	.word	0x0800fa57

080101b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80101b0:	b480      	push	{r7}
 80101b2:	b083      	sub	sp, #12
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80101b8:	bf00      	nop
 80101ba:	370c      	adds	r7, #12
 80101bc:	46bd      	mov	sp, r7
 80101be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c2:	4770      	bx	lr

080101c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b083      	sub	sp, #12
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80101cc:	bf00      	nop
 80101ce:	370c      	adds	r7, #12
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr

080101d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80101d8:	b480      	push	{r7}
 80101da:	b083      	sub	sp, #12
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80101e0:	bf00      	nop
 80101e2:	370c      	adds	r7, #12
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr

080101ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80101ec:	b480      	push	{r7}
 80101ee:	b085      	sub	sp, #20
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d101      	bne.n	8010202 <HAL_UARTEx_DisableFifoMode+0x16>
 80101fe:	2302      	movs	r3, #2
 8010200:	e027      	b.n	8010252 <HAL_UARTEx_DisableFifoMode+0x66>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2201      	movs	r2, #1
 8010206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2224      	movs	r2, #36	; 0x24
 801020e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	681a      	ldr	r2, [r3, #0]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	f022 0201 	bic.w	r2, r2, #1
 8010228:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010230:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2200      	movs	r2, #0
 8010236:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	68fa      	ldr	r2, [r7, #12]
 801023e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2220      	movs	r2, #32
 8010244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2200      	movs	r2, #0
 801024c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010250:	2300      	movs	r3, #0
}
 8010252:	4618      	mov	r0, r3
 8010254:	3714      	adds	r7, #20
 8010256:	46bd      	mov	sp, r7
 8010258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025c:	4770      	bx	lr

0801025e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801025e:	b580      	push	{r7, lr}
 8010260:	b084      	sub	sp, #16
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
 8010266:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801026e:	2b01      	cmp	r3, #1
 8010270:	d101      	bne.n	8010276 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010272:	2302      	movs	r3, #2
 8010274:	e02d      	b.n	80102d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2201      	movs	r2, #1
 801027a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2224      	movs	r2, #36	; 0x24
 8010282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	681a      	ldr	r2, [r3, #0]
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	f022 0201 	bic.w	r2, r2, #1
 801029c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	689b      	ldr	r3, [r3, #8]
 80102a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	683a      	ldr	r2, [r7, #0]
 80102ae:	430a      	orrs	r2, r1
 80102b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f000 f850 	bl	8010358 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	68fa      	ldr	r2, [r7, #12]
 80102be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2220      	movs	r2, #32
 80102c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2200      	movs	r2, #0
 80102cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80102d0:	2300      	movs	r3, #0
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3710      	adds	r7, #16
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}

080102da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80102da:	b580      	push	{r7, lr}
 80102dc:	b084      	sub	sp, #16
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
 80102e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80102ea:	2b01      	cmp	r3, #1
 80102ec:	d101      	bne.n	80102f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80102ee:	2302      	movs	r3, #2
 80102f0:	e02d      	b.n	801034e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2201      	movs	r2, #1
 80102f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2224      	movs	r2, #36	; 0x24
 80102fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	681a      	ldr	r2, [r3, #0]
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	f022 0201 	bic.w	r2, r2, #1
 8010318:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	689b      	ldr	r3, [r3, #8]
 8010320:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	683a      	ldr	r2, [r7, #0]
 801032a:	430a      	orrs	r2, r1
 801032c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f000 f812 	bl	8010358 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	68fa      	ldr	r2, [r7, #12]
 801033a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2220      	movs	r2, #32
 8010340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2200      	movs	r2, #0
 8010348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801034c:	2300      	movs	r3, #0
}
 801034e:	4618      	mov	r0, r3
 8010350:	3710      	adds	r7, #16
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
	...

08010358 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010358:	b480      	push	{r7}
 801035a:	b085      	sub	sp, #20
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010364:	2b00      	cmp	r3, #0
 8010366:	d108      	bne.n	801037a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2201      	movs	r2, #1
 801036c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2201      	movs	r2, #1
 8010374:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010378:	e031      	b.n	80103de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801037a:	2310      	movs	r3, #16
 801037c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801037e:	2310      	movs	r3, #16
 8010380:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	689b      	ldr	r3, [r3, #8]
 8010388:	0e5b      	lsrs	r3, r3, #25
 801038a:	b2db      	uxtb	r3, r3
 801038c:	f003 0307 	and.w	r3, r3, #7
 8010390:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	689b      	ldr	r3, [r3, #8]
 8010398:	0f5b      	lsrs	r3, r3, #29
 801039a:	b2db      	uxtb	r3, r3
 801039c:	f003 0307 	and.w	r3, r3, #7
 80103a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80103a2:	7bbb      	ldrb	r3, [r7, #14]
 80103a4:	7b3a      	ldrb	r2, [r7, #12]
 80103a6:	4911      	ldr	r1, [pc, #68]	; (80103ec <UARTEx_SetNbDataToProcess+0x94>)
 80103a8:	5c8a      	ldrb	r2, [r1, r2]
 80103aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80103ae:	7b3a      	ldrb	r2, [r7, #12]
 80103b0:	490f      	ldr	r1, [pc, #60]	; (80103f0 <UARTEx_SetNbDataToProcess+0x98>)
 80103b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80103b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80103b8:	b29a      	uxth	r2, r3
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80103c0:	7bfb      	ldrb	r3, [r7, #15]
 80103c2:	7b7a      	ldrb	r2, [r7, #13]
 80103c4:	4909      	ldr	r1, [pc, #36]	; (80103ec <UARTEx_SetNbDataToProcess+0x94>)
 80103c6:	5c8a      	ldrb	r2, [r1, r2]
 80103c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80103cc:	7b7a      	ldrb	r2, [r7, #13]
 80103ce:	4908      	ldr	r1, [pc, #32]	; (80103f0 <UARTEx_SetNbDataToProcess+0x98>)
 80103d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80103d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80103d6:	b29a      	uxth	r2, r3
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80103de:	bf00      	nop
 80103e0:	3714      	adds	r7, #20
 80103e2:	46bd      	mov	sp, r7
 80103e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e8:	4770      	bx	lr
 80103ea:	bf00      	nop
 80103ec:	08012970 	.word	0x08012970
 80103f0:	08012978 	.word	0x08012978

080103f4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b083      	sub	sp, #12
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d121      	bne.n	801044a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681a      	ldr	r2, [r3, #0]
 801040a:	4b27      	ldr	r3, [pc, #156]	; (80104a8 <FMC_SDRAM_Init+0xb4>)
 801040c:	4013      	ands	r3, r2
 801040e:	683a      	ldr	r2, [r7, #0]
 8010410:	6851      	ldr	r1, [r2, #4]
 8010412:	683a      	ldr	r2, [r7, #0]
 8010414:	6892      	ldr	r2, [r2, #8]
 8010416:	4311      	orrs	r1, r2
 8010418:	683a      	ldr	r2, [r7, #0]
 801041a:	68d2      	ldr	r2, [r2, #12]
 801041c:	4311      	orrs	r1, r2
 801041e:	683a      	ldr	r2, [r7, #0]
 8010420:	6912      	ldr	r2, [r2, #16]
 8010422:	4311      	orrs	r1, r2
 8010424:	683a      	ldr	r2, [r7, #0]
 8010426:	6952      	ldr	r2, [r2, #20]
 8010428:	4311      	orrs	r1, r2
 801042a:	683a      	ldr	r2, [r7, #0]
 801042c:	6992      	ldr	r2, [r2, #24]
 801042e:	4311      	orrs	r1, r2
 8010430:	683a      	ldr	r2, [r7, #0]
 8010432:	69d2      	ldr	r2, [r2, #28]
 8010434:	4311      	orrs	r1, r2
 8010436:	683a      	ldr	r2, [r7, #0]
 8010438:	6a12      	ldr	r2, [r2, #32]
 801043a:	4311      	orrs	r1, r2
 801043c:	683a      	ldr	r2, [r7, #0]
 801043e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010440:	430a      	orrs	r2, r1
 8010442:	431a      	orrs	r2, r3
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	601a      	str	r2, [r3, #0]
 8010448:	e026      	b.n	8010498 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	69d9      	ldr	r1, [r3, #28]
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	6a1b      	ldr	r3, [r3, #32]
 801045a:	4319      	orrs	r1, r3
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010460:	430b      	orrs	r3, r1
 8010462:	431a      	orrs	r2, r3
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	685a      	ldr	r2, [r3, #4]
 801046c:	4b0e      	ldr	r3, [pc, #56]	; (80104a8 <FMC_SDRAM_Init+0xb4>)
 801046e:	4013      	ands	r3, r2
 8010470:	683a      	ldr	r2, [r7, #0]
 8010472:	6851      	ldr	r1, [r2, #4]
 8010474:	683a      	ldr	r2, [r7, #0]
 8010476:	6892      	ldr	r2, [r2, #8]
 8010478:	4311      	orrs	r1, r2
 801047a:	683a      	ldr	r2, [r7, #0]
 801047c:	68d2      	ldr	r2, [r2, #12]
 801047e:	4311      	orrs	r1, r2
 8010480:	683a      	ldr	r2, [r7, #0]
 8010482:	6912      	ldr	r2, [r2, #16]
 8010484:	4311      	orrs	r1, r2
 8010486:	683a      	ldr	r2, [r7, #0]
 8010488:	6952      	ldr	r2, [r2, #20]
 801048a:	4311      	orrs	r1, r2
 801048c:	683a      	ldr	r2, [r7, #0]
 801048e:	6992      	ldr	r2, [r2, #24]
 8010490:	430a      	orrs	r2, r1
 8010492:	431a      	orrs	r2, r3
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8010498:	2300      	movs	r3, #0
}
 801049a:	4618      	mov	r0, r3
 801049c:	370c      	adds	r7, #12
 801049e:	46bd      	mov	sp, r7
 80104a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a4:	4770      	bx	lr
 80104a6:	bf00      	nop
 80104a8:	ffff8000 	.word	0xffff8000

080104ac <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80104ac:	b480      	push	{r7}
 80104ae:	b085      	sub	sp, #20
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	60f8      	str	r0, [r7, #12]
 80104b4:	60b9      	str	r1, [r7, #8]
 80104b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d128      	bne.n	8010510 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	689b      	ldr	r3, [r3, #8]
 80104c2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	1e59      	subs	r1, r3, #1
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	685b      	ldr	r3, [r3, #4]
 80104d0:	3b01      	subs	r3, #1
 80104d2:	011b      	lsls	r3, r3, #4
 80104d4:	4319      	orrs	r1, r3
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	689b      	ldr	r3, [r3, #8]
 80104da:	3b01      	subs	r3, #1
 80104dc:	021b      	lsls	r3, r3, #8
 80104de:	4319      	orrs	r1, r3
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	3b01      	subs	r3, #1
 80104e6:	031b      	lsls	r3, r3, #12
 80104e8:	4319      	orrs	r1, r3
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	691b      	ldr	r3, [r3, #16]
 80104ee:	3b01      	subs	r3, #1
 80104f0:	041b      	lsls	r3, r3, #16
 80104f2:	4319      	orrs	r1, r3
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	695b      	ldr	r3, [r3, #20]
 80104f8:	3b01      	subs	r3, #1
 80104fa:	051b      	lsls	r3, r3, #20
 80104fc:	4319      	orrs	r1, r3
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	699b      	ldr	r3, [r3, #24]
 8010502:	3b01      	subs	r3, #1
 8010504:	061b      	lsls	r3, r3, #24
 8010506:	430b      	orrs	r3, r1
 8010508:	431a      	orrs	r2, r3
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	609a      	str	r2, [r3, #8]
 801050e:	e02d      	b.n	801056c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	689a      	ldr	r2, [r3, #8]
 8010514:	4b19      	ldr	r3, [pc, #100]	; (801057c <FMC_SDRAM_Timing_Init+0xd0>)
 8010516:	4013      	ands	r3, r2
 8010518:	68ba      	ldr	r2, [r7, #8]
 801051a:	68d2      	ldr	r2, [r2, #12]
 801051c:	3a01      	subs	r2, #1
 801051e:	0311      	lsls	r1, r2, #12
 8010520:	68ba      	ldr	r2, [r7, #8]
 8010522:	6952      	ldr	r2, [r2, #20]
 8010524:	3a01      	subs	r2, #1
 8010526:	0512      	lsls	r2, r2, #20
 8010528:	430a      	orrs	r2, r1
 801052a:	431a      	orrs	r2, r3
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	68db      	ldr	r3, [r3, #12]
 8010534:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	1e59      	subs	r1, r3, #1
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	685b      	ldr	r3, [r3, #4]
 8010542:	3b01      	subs	r3, #1
 8010544:	011b      	lsls	r3, r3, #4
 8010546:	4319      	orrs	r1, r3
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	689b      	ldr	r3, [r3, #8]
 801054c:	3b01      	subs	r3, #1
 801054e:	021b      	lsls	r3, r3, #8
 8010550:	4319      	orrs	r1, r3
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	691b      	ldr	r3, [r3, #16]
 8010556:	3b01      	subs	r3, #1
 8010558:	041b      	lsls	r3, r3, #16
 801055a:	4319      	orrs	r1, r3
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	699b      	ldr	r3, [r3, #24]
 8010560:	3b01      	subs	r3, #1
 8010562:	061b      	lsls	r3, r3, #24
 8010564:	430b      	orrs	r3, r1
 8010566:	431a      	orrs	r2, r3
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 801056c:	2300      	movs	r3, #0
}
 801056e:	4618      	mov	r0, r3
 8010570:	3714      	adds	r7, #20
 8010572:	46bd      	mov	sp, r7
 8010574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010578:	4770      	bx	lr
 801057a:	bf00      	nop
 801057c:	ff0f0fff 	.word	0xff0f0fff

08010580 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8010580:	b480      	push	{r7}
 8010582:	b085      	sub	sp, #20
 8010584:	af00      	add	r7, sp, #0
 8010586:	60f8      	str	r0, [r7, #12]
 8010588:	60b9      	str	r1, [r7, #8]
 801058a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	691a      	ldr	r2, [r3, #16]
 8010590:	4b0c      	ldr	r3, [pc, #48]	; (80105c4 <FMC_SDRAM_SendCommand+0x44>)
 8010592:	4013      	ands	r3, r2
 8010594:	68ba      	ldr	r2, [r7, #8]
 8010596:	6811      	ldr	r1, [r2, #0]
 8010598:	68ba      	ldr	r2, [r7, #8]
 801059a:	6852      	ldr	r2, [r2, #4]
 801059c:	4311      	orrs	r1, r2
 801059e:	68ba      	ldr	r2, [r7, #8]
 80105a0:	6892      	ldr	r2, [r2, #8]
 80105a2:	3a01      	subs	r2, #1
 80105a4:	0152      	lsls	r2, r2, #5
 80105a6:	4311      	orrs	r1, r2
 80105a8:	68ba      	ldr	r2, [r7, #8]
 80105aa:	68d2      	ldr	r2, [r2, #12]
 80105ac:	0252      	lsls	r2, r2, #9
 80105ae:	430a      	orrs	r2, r1
 80105b0:	431a      	orrs	r2, r3
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80105b6:	2300      	movs	r3, #0
}
 80105b8:	4618      	mov	r0, r3
 80105ba:	3714      	adds	r7, #20
 80105bc:	46bd      	mov	sp, r7
 80105be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c2:	4770      	bx	lr
 80105c4:	ffc00000 	.word	0xffc00000

080105c8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80105c8:	b480      	push	{r7}
 80105ca:	b083      	sub	sp, #12
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	695a      	ldr	r2, [r3, #20]
 80105d6:	4b07      	ldr	r3, [pc, #28]	; (80105f4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80105d8:	4013      	ands	r3, r2
 80105da:	683a      	ldr	r2, [r7, #0]
 80105dc:	0052      	lsls	r2, r2, #1
 80105de:	431a      	orrs	r2, r3
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80105e4:	2300      	movs	r3, #0
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	370c      	adds	r7, #12
 80105ea:	46bd      	mov	sp, r7
 80105ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f0:	4770      	bx	lr
 80105f2:	bf00      	nop
 80105f4:	ffffc001 	.word	0xffffc001

080105f8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80105f8:	b084      	sub	sp, #16
 80105fa:	b480      	push	{r7}
 80105fc:	b085      	sub	sp, #20
 80105fe:	af00      	add	r7, sp, #0
 8010600:	6078      	str	r0, [r7, #4]
 8010602:	f107 001c 	add.w	r0, r7, #28
 8010606:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801060a:	2300      	movs	r3, #0
 801060c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801060e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8010610:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8010612:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8010616:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8010618:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801061a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801061c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801061e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8010620:	68fa      	ldr	r2, [r7, #12]
 8010622:	4313      	orrs	r3, r2
 8010624:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	685a      	ldr	r2, [r3, #4]
 801062a:	4b07      	ldr	r3, [pc, #28]	; (8010648 <SDMMC_Init+0x50>)
 801062c:	4013      	ands	r3, r2
 801062e:	68fa      	ldr	r2, [r7, #12]
 8010630:	431a      	orrs	r2, r3
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010636:	2300      	movs	r3, #0
}
 8010638:	4618      	mov	r0, r3
 801063a:	3714      	adds	r7, #20
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	b004      	add	sp, #16
 8010644:	4770      	bx	lr
 8010646:	bf00      	nop
 8010648:	ffc02c00 	.word	0xffc02c00

0801064c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801064c:	b480      	push	{r7}
 801064e:	b083      	sub	sp, #12
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801065a:	4618      	mov	r0, r3
 801065c:	370c      	adds	r7, #12
 801065e:	46bd      	mov	sp, r7
 8010660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010664:	4770      	bx	lr

08010666 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010666:	b480      	push	{r7}
 8010668:	b083      	sub	sp, #12
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
 801066e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	681a      	ldr	r2, [r3, #0]
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801067a:	2300      	movs	r3, #0
}
 801067c:	4618      	mov	r0, r3
 801067e:	370c      	adds	r7, #12
 8010680:	46bd      	mov	sp, r7
 8010682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010686:	4770      	bx	lr

08010688 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010688:	b480      	push	{r7}
 801068a:	b083      	sub	sp, #12
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	f043 0203 	orr.w	r2, r3, #3
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801069c:	2300      	movs	r3, #0
}
 801069e:	4618      	mov	r0, r3
 80106a0:	370c      	adds	r7, #12
 80106a2:	46bd      	mov	sp, r7
 80106a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a8:	4770      	bx	lr

080106aa <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80106aa:	b480      	push	{r7}
 80106ac:	b083      	sub	sp, #12
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	f003 0303 	and.w	r3, r3, #3
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	370c      	adds	r7, #12
 80106be:	46bd      	mov	sp, r7
 80106c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c4:	4770      	bx	lr
	...

080106c8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80106c8:	b480      	push	{r7}
 80106ca:	b085      	sub	sp, #20
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80106d2:	2300      	movs	r3, #0
 80106d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	681a      	ldr	r2, [r3, #0]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80106e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80106ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80106f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80106f4:	68fa      	ldr	r2, [r7, #12]
 80106f6:	4313      	orrs	r3, r2
 80106f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	68da      	ldr	r2, [r3, #12]
 80106fe:	4b06      	ldr	r3, [pc, #24]	; (8010718 <SDMMC_SendCommand+0x50>)
 8010700:	4013      	ands	r3, r2
 8010702:	68fa      	ldr	r2, [r7, #12]
 8010704:	431a      	orrs	r2, r3
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801070a:	2300      	movs	r3, #0
}
 801070c:	4618      	mov	r0, r3
 801070e:	3714      	adds	r7, #20
 8010710:	46bd      	mov	sp, r7
 8010712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010716:	4770      	bx	lr
 8010718:	fffee0c0 	.word	0xfffee0c0

0801071c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801071c:	b480      	push	{r7}
 801071e:	b083      	sub	sp, #12
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	691b      	ldr	r3, [r3, #16]
 8010728:	b2db      	uxtb	r3, r3
}
 801072a:	4618      	mov	r0, r3
 801072c:	370c      	adds	r7, #12
 801072e:	46bd      	mov	sp, r7
 8010730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010734:	4770      	bx	lr

08010736 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010736:	b480      	push	{r7}
 8010738:	b085      	sub	sp, #20
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
 801073e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	3314      	adds	r3, #20
 8010744:	461a      	mov	r2, r3
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	4413      	add	r3, r2
 801074a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	681b      	ldr	r3, [r3, #0]
}
 8010750:	4618      	mov	r0, r3
 8010752:	3714      	adds	r7, #20
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr

0801075c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 801075c:	b480      	push	{r7}
 801075e:	b085      	sub	sp, #20
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010766:	2300      	movs	r3, #0
 8010768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	685a      	ldr	r2, [r3, #4]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010782:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8010788:	431a      	orrs	r2, r3
                       Data->DPSM);
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801078e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010790:	68fa      	ldr	r2, [r7, #12]
 8010792:	4313      	orrs	r3, r2
 8010794:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801079a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	431a      	orrs	r2, r3
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80107a6:	2300      	movs	r3, #0

}
 80107a8:	4618      	mov	r0, r3
 80107aa:	3714      	adds	r7, #20
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr

080107b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b088      	sub	sp, #32
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80107c2:	2310      	movs	r3, #16
 80107c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107cc:	2300      	movs	r3, #0
 80107ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107d6:	f107 0308 	add.w	r3, r7, #8
 80107da:	4619      	mov	r1, r3
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f7ff ff73 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80107e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80107e6:	2110      	movs	r1, #16
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f000 fa5f 	bl	8010cac <SDMMC_GetCmdResp1>
 80107ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107f0:	69fb      	ldr	r3, [r7, #28]
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	3720      	adds	r7, #32
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}

080107fa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80107fa:	b580      	push	{r7, lr}
 80107fc:	b088      	sub	sp, #32
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
 8010802:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010808:	2311      	movs	r3, #17
 801080a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801080c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010812:	2300      	movs	r3, #0
 8010814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801081a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801081c:	f107 0308 	add.w	r3, r7, #8
 8010820:	4619      	mov	r1, r3
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f7ff ff50 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010828:	f241 3288 	movw	r2, #5000	; 0x1388
 801082c:	2111      	movs	r1, #17
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 fa3c 	bl	8010cac <SDMMC_GetCmdResp1>
 8010834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010836:	69fb      	ldr	r3, [r7, #28]
}
 8010838:	4618      	mov	r0, r3
 801083a:	3720      	adds	r7, #32
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b088      	sub	sp, #32
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801084e:	2312      	movs	r3, #18
 8010850:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010856:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010858:	2300      	movs	r3, #0
 801085a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010860:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010862:	f107 0308 	add.w	r3, r7, #8
 8010866:	4619      	mov	r1, r3
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f7ff ff2d 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801086e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010872:	2112      	movs	r1, #18
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f000 fa19 	bl	8010cac <SDMMC_GetCmdResp1>
 801087a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801087c:	69fb      	ldr	r3, [r7, #28]
}
 801087e:	4618      	mov	r0, r3
 8010880:	3720      	adds	r7, #32
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}

08010886 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010886:	b580      	push	{r7, lr}
 8010888:	b088      	sub	sp, #32
 801088a:	af00      	add	r7, sp, #0
 801088c:	6078      	str	r0, [r7, #4]
 801088e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010894:	2318      	movs	r3, #24
 8010896:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010898:	f44f 7380 	mov.w	r3, #256	; 0x100
 801089c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801089e:	2300      	movs	r3, #0
 80108a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108a8:	f107 0308 	add.w	r3, r7, #8
 80108ac:	4619      	mov	r1, r3
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f7ff ff0a 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80108b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80108b8:	2118      	movs	r1, #24
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f000 f9f6 	bl	8010cac <SDMMC_GetCmdResp1>
 80108c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108c2:	69fb      	ldr	r3, [r7, #28]
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3720      	adds	r7, #32
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b088      	sub	sp, #32
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80108da:	2319      	movs	r3, #25
 80108dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80108de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80108e4:	2300      	movs	r3, #0
 80108e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108ee:	f107 0308 	add.w	r3, r7, #8
 80108f2:	4619      	mov	r1, r3
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f7ff fee7 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80108fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80108fe:	2119      	movs	r1, #25
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f000 f9d3 	bl	8010cac <SDMMC_GetCmdResp1>
 8010906:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010908:	69fb      	ldr	r3, [r7, #28]
}
 801090a:	4618      	mov	r0, r3
 801090c:	3720      	adds	r7, #32
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
	...

08010914 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b088      	sub	sp, #32
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801091c:	2300      	movs	r3, #0
 801091e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010920:	230c      	movs	r3, #12
 8010922:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010928:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801092a:	2300      	movs	r3, #0
 801092c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801092e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010932:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801094c:	f107 0308 	add.w	r3, r7, #8
 8010950:	4619      	mov	r1, r3
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f7ff feb8 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010958:	4a0b      	ldr	r2, [pc, #44]	; (8010988 <SDMMC_CmdStopTransfer+0x74>)
 801095a:	210c      	movs	r1, #12
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f000 f9a5 	bl	8010cac <SDMMC_GetCmdResp1>
 8010962:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	68db      	ldr	r3, [r3, #12]
 8010968:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010970:	69fb      	ldr	r3, [r7, #28]
 8010972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010976:	d101      	bne.n	801097c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010978:	2300      	movs	r3, #0
 801097a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 801097c:	69fb      	ldr	r3, [r7, #28]
}
 801097e:	4618      	mov	r0, r3
 8010980:	3720      	adds	r7, #32
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}
 8010986:	bf00      	nop
 8010988:	05f5e100 	.word	0x05f5e100

0801098c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b088      	sub	sp, #32
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801099a:	2307      	movs	r3, #7
 801099c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801099e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80109a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109a4:	2300      	movs	r3, #0
 80109a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109ae:	f107 0308 	add.w	r3, r7, #8
 80109b2:	4619      	mov	r1, r3
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f7ff fe87 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80109ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80109be:	2107      	movs	r1, #7
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f000 f973 	bl	8010cac <SDMMC_GetCmdResp1>
 80109c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109c8:	69fb      	ldr	r3, [r7, #28]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3720      	adds	r7, #32
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}

080109d2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80109d2:	b580      	push	{r7, lr}
 80109d4:	b088      	sub	sp, #32
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80109da:	2300      	movs	r3, #0
 80109dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80109de:	2300      	movs	r3, #0
 80109e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80109e2:	2300      	movs	r3, #0
 80109e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109e6:	2300      	movs	r3, #0
 80109e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109f0:	f107 0308 	add.w	r3, r7, #8
 80109f4:	4619      	mov	r1, r3
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f7ff fe66 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f000 fb97 	bl	8011130 <SDMMC_GetCmdError>
 8010a02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a04:	69fb      	ldr	r3, [r7, #28]
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3720      	adds	r7, #32
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}

08010a0e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010a0e:	b580      	push	{r7, lr}
 8010a10:	b088      	sub	sp, #32
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010a16:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010a1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010a1c:	2308      	movs	r3, #8
 8010a1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a26:	2300      	movs	r3, #0
 8010a28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a30:	f107 0308 	add.w	r3, r7, #8
 8010a34:	4619      	mov	r1, r3
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f7ff fe46 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f000 fb29 	bl	8011094 <SDMMC_GetCmdResp7>
 8010a42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a44:	69fb      	ldr	r3, [r7, #28]
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3720      	adds	r7, #32
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}

08010a4e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010a4e:	b580      	push	{r7, lr}
 8010a50:	b088      	sub	sp, #32
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	6078      	str	r0, [r7, #4]
 8010a56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010a5c:	2337      	movs	r3, #55	; 0x37
 8010a5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a66:	2300      	movs	r3, #0
 8010a68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a70:	f107 0308 	add.w	r3, r7, #8
 8010a74:	4619      	mov	r1, r3
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f7ff fe26 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a80:	2137      	movs	r1, #55	; 0x37
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f000 f912 	bl	8010cac <SDMMC_GetCmdResp1>
 8010a88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a8a:	69fb      	ldr	r3, [r7, #28]
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3720      	adds	r7, #32
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b088      	sub	sp, #32
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010aa2:	2329      	movs	r3, #41	; 0x29
 8010aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010aac:	2300      	movs	r3, #0
 8010aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ab4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ab6:	f107 0308 	add.w	r3, r7, #8
 8010aba:	4619      	mov	r1, r3
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f7ff fe03 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f000 fa2e 	bl	8010f24 <SDMMC_GetCmdResp3>
 8010ac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aca:	69fb      	ldr	r3, [r7, #28]
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3720      	adds	r7, #32
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b088      	sub	sp, #32
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010ae2:	2306      	movs	r3, #6
 8010ae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010aea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010aec:	2300      	movs	r3, #0
 8010aee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010af4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010af6:	f107 0308 	add.w	r3, r7, #8
 8010afa:	4619      	mov	r1, r3
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f7ff fde3 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b06:	2106      	movs	r1, #6
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f000 f8cf 	bl	8010cac <SDMMC_GetCmdResp1>
 8010b0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b10:	69fb      	ldr	r3, [r7, #28]
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3720      	adds	r7, #32
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b088      	sub	sp, #32
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010b22:	2300      	movs	r3, #0
 8010b24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010b26:	2333      	movs	r3, #51	; 0x33
 8010b28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b30:	2300      	movs	r3, #0
 8010b32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b3a:	f107 0308 	add.w	r3, r7, #8
 8010b3e:	4619      	mov	r1, r3
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f7ff fdc1 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b4a:	2133      	movs	r1, #51	; 0x33
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f000 f8ad 	bl	8010cac <SDMMC_GetCmdResp1>
 8010b52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b54:	69fb      	ldr	r3, [r7, #28]
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3720      	adds	r7, #32
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}

08010b5e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010b5e:	b580      	push	{r7, lr}
 8010b60:	b088      	sub	sp, #32
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010b66:	2300      	movs	r3, #0
 8010b68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010b6a:	2302      	movs	r3, #2
 8010b6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010b6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b74:	2300      	movs	r3, #0
 8010b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b7e:	f107 0308 	add.w	r3, r7, #8
 8010b82:	4619      	mov	r1, r3
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f7ff fd9f 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f000 f980 	bl	8010e90 <SDMMC_GetCmdResp2>
 8010b90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b92:	69fb      	ldr	r3, [r7, #28]
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3720      	adds	r7, #32
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b088      	sub	sp, #32
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010baa:	2309      	movs	r3, #9
 8010bac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010bae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010bb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bbe:	f107 0308 	add.w	r3, r7, #8
 8010bc2:	4619      	mov	r1, r3
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f7ff fd7f 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f000 f960 	bl	8010e90 <SDMMC_GetCmdResp2>
 8010bd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bd2:	69fb      	ldr	r3, [r7, #28]
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3720      	adds	r7, #32
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b088      	sub	sp, #32
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010be6:	2300      	movs	r3, #0
 8010be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010bea:	2303      	movs	r3, #3
 8010bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010bf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bfe:	f107 0308 	add.w	r3, r7, #8
 8010c02:	4619      	mov	r1, r3
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f7ff fd5f 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010c0a:	683a      	ldr	r2, [r7, #0]
 8010c0c:	2103      	movs	r1, #3
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f000 f9c8 	bl	8010fa4 <SDMMC_GetCmdResp6>
 8010c14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c16:	69fb      	ldr	r3, [r7, #28]
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3720      	adds	r7, #32
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b088      	sub	sp, #32
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010c2e:	230d      	movs	r3, #13
 8010c30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c42:	f107 0308 	add.w	r3, r7, #8
 8010c46:	4619      	mov	r1, r3
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f7ff fd3d 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c52:	210d      	movs	r1, #13
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f000 f829 	bl	8010cac <SDMMC_GetCmdResp1>
 8010c5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c5c:	69fb      	ldr	r3, [r7, #28]
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3720      	adds	r7, #32
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}

08010c66 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010c66:	b580      	push	{r7, lr}
 8010c68:	b088      	sub	sp, #32
 8010c6a:	af00      	add	r7, sp, #0
 8010c6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010c72:	230d      	movs	r3, #13
 8010c74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c86:	f107 0308 	add.w	r3, r7, #8
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f7ff fd1b 	bl	80106c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c96:	210d      	movs	r1, #13
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f000 f807 	bl	8010cac <SDMMC_GetCmdResp1>
 8010c9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ca0:	69fb      	ldr	r3, [r7, #28]
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	3720      	adds	r7, #32
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}
	...

08010cac <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b088      	sub	sp, #32
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	60f8      	str	r0, [r7, #12]
 8010cb4:	460b      	mov	r3, r1
 8010cb6:	607a      	str	r2, [r7, #4]
 8010cb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010cba:	4b70      	ldr	r3, [pc, #448]	; (8010e7c <SDMMC_GetCmdResp1+0x1d0>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	4a70      	ldr	r2, [pc, #448]	; (8010e80 <SDMMC_GetCmdResp1+0x1d4>)
 8010cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8010cc4:	0a5a      	lsrs	r2, r3, #9
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	fb02 f303 	mul.w	r3, r2, r3
 8010ccc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010cce:	69fb      	ldr	r3, [r7, #28]
 8010cd0:	1e5a      	subs	r2, r3, #1
 8010cd2:	61fa      	str	r2, [r7, #28]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d102      	bne.n	8010cde <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010cd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010cdc:	e0c9      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ce2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010ce4:	69ba      	ldr	r2, [r7, #24]
 8010ce6:	4b67      	ldr	r3, [pc, #412]	; (8010e84 <SDMMC_GetCmdResp1+0x1d8>)
 8010ce8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d0ef      	beq.n	8010cce <SDMMC_GetCmdResp1+0x22>
 8010cee:	69bb      	ldr	r3, [r7, #24]
 8010cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d1ea      	bne.n	8010cce <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cfc:	f003 0304 	and.w	r3, r3, #4
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d004      	beq.n	8010d0e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	2204      	movs	r2, #4
 8010d08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d0a:	2304      	movs	r3, #4
 8010d0c:	e0b1      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d12:	f003 0301 	and.w	r3, r3, #1
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d004      	beq.n	8010d24 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	2201      	movs	r2, #1
 8010d1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d20:	2301      	movs	r3, #1
 8010d22:	e0a6      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	4a58      	ldr	r2, [pc, #352]	; (8010e88 <SDMMC_GetCmdResp1+0x1dc>)
 8010d28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010d2a:	68f8      	ldr	r0, [r7, #12]
 8010d2c:	f7ff fcf6 	bl	801071c <SDMMC_GetCommandResponse>
 8010d30:	4603      	mov	r3, r0
 8010d32:	461a      	mov	r2, r3
 8010d34:	7afb      	ldrb	r3, [r7, #11]
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d001      	beq.n	8010d3e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	e099      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010d3e:	2100      	movs	r1, #0
 8010d40:	68f8      	ldr	r0, [r7, #12]
 8010d42:	f7ff fcf8 	bl	8010736 <SDMMC_GetResponse>
 8010d46:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010d48:	697a      	ldr	r2, [r7, #20]
 8010d4a:	4b50      	ldr	r3, [pc, #320]	; (8010e8c <SDMMC_GetCmdResp1+0x1e0>)
 8010d4c:	4013      	ands	r3, r2
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d101      	bne.n	8010d56 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010d52:	2300      	movs	r3, #0
 8010d54:	e08d      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	da02      	bge.n	8010d62 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010d5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010d60:	e087      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d001      	beq.n	8010d70 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010d6c:	2340      	movs	r3, #64	; 0x40
 8010d6e:	e080      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d001      	beq.n	8010d7e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010d7a:	2380      	movs	r3, #128	; 0x80
 8010d7c:	e079      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d002      	beq.n	8010d8e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d8c:	e071      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d002      	beq.n	8010d9e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d9c:	e069      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d002      	beq.n	8010dae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010dac:	e061      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d002      	beq.n	8010dbe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010db8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010dbc:	e059      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010dbe:	697b      	ldr	r3, [r7, #20]
 8010dc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d002      	beq.n	8010dce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010dcc:	e051      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d002      	beq.n	8010dde <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010ddc:	e049      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d002      	beq.n	8010dee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010de8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010dec:	e041      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d002      	beq.n	8010dfe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010dfc:	e039      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d002      	beq.n	8010e0e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010e0c:	e031      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d002      	beq.n	8010e1e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010e18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010e1c:	e029      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d002      	beq.n	8010e2e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010e28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010e2c:	e021      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010e2e:	697b      	ldr	r3, [r7, #20]
 8010e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d002      	beq.n	8010e3e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010e38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010e3c:	e019      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010e3e:	697b      	ldr	r3, [r7, #20]
 8010e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d002      	beq.n	8010e4e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010e48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010e4c:	e011      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d002      	beq.n	8010e5e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010e58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010e5c:	e009      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	f003 0308 	and.w	r3, r3, #8
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d002      	beq.n	8010e6e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010e68:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010e6c:	e001      	b.n	8010e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010e6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3720      	adds	r7, #32
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	24000008 	.word	0x24000008
 8010e80:	10624dd3 	.word	0x10624dd3
 8010e84:	00200045 	.word	0x00200045
 8010e88:	002000c5 	.word	0x002000c5
 8010e8c:	fdffe008 	.word	0xfdffe008

08010e90 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010e90:	b480      	push	{r7}
 8010e92:	b085      	sub	sp, #20
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010e98:	4b1f      	ldr	r3, [pc, #124]	; (8010f18 <SDMMC_GetCmdResp2+0x88>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	4a1f      	ldr	r2, [pc, #124]	; (8010f1c <SDMMC_GetCmdResp2+0x8c>)
 8010e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8010ea2:	0a5b      	lsrs	r3, r3, #9
 8010ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ea8:	fb02 f303 	mul.w	r3, r2, r3
 8010eac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	1e5a      	subs	r2, r3, #1
 8010eb2:	60fa      	str	r2, [r7, #12]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d102      	bne.n	8010ebe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010eb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ebc:	e026      	b.n	8010f0c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ec2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d0ef      	beq.n	8010eae <SDMMC_GetCmdResp2+0x1e>
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d1ea      	bne.n	8010eae <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010edc:	f003 0304 	and.w	r3, r3, #4
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d004      	beq.n	8010eee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2204      	movs	r2, #4
 8010ee8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010eea:	2304      	movs	r3, #4
 8010eec:	e00e      	b.n	8010f0c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ef2:	f003 0301 	and.w	r3, r3, #1
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d004      	beq.n	8010f04 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2201      	movs	r2, #1
 8010efe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f00:	2301      	movs	r3, #1
 8010f02:	e003      	b.n	8010f0c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	4a06      	ldr	r2, [pc, #24]	; (8010f20 <SDMMC_GetCmdResp2+0x90>)
 8010f08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010f0a:	2300      	movs	r3, #0
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3714      	adds	r7, #20
 8010f10:	46bd      	mov	sp, r7
 8010f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f16:	4770      	bx	lr
 8010f18:	24000008 	.word	0x24000008
 8010f1c:	10624dd3 	.word	0x10624dd3
 8010f20:	002000c5 	.word	0x002000c5

08010f24 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b085      	sub	sp, #20
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010f2c:	4b1a      	ldr	r3, [pc, #104]	; (8010f98 <SDMMC_GetCmdResp3+0x74>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4a1a      	ldr	r2, [pc, #104]	; (8010f9c <SDMMC_GetCmdResp3+0x78>)
 8010f32:	fba2 2303 	umull	r2, r3, r2, r3
 8010f36:	0a5b      	lsrs	r3, r3, #9
 8010f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f3c:	fb02 f303 	mul.w	r3, r2, r3
 8010f40:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	1e5a      	subs	r2, r3, #1
 8010f46:	60fa      	str	r2, [r7, #12]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d102      	bne.n	8010f52 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f50:	e01b      	b.n	8010f8a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f56:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d0ef      	beq.n	8010f42 <SDMMC_GetCmdResp3+0x1e>
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d1ea      	bne.n	8010f42 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f70:	f003 0304 	and.w	r3, r3, #4
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d004      	beq.n	8010f82 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2204      	movs	r2, #4
 8010f7c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f7e:	2304      	movs	r3, #4
 8010f80:	e003      	b.n	8010f8a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	4a06      	ldr	r2, [pc, #24]	; (8010fa0 <SDMMC_GetCmdResp3+0x7c>)
 8010f86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010f88:	2300      	movs	r3, #0
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3714      	adds	r7, #20
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f94:	4770      	bx	lr
 8010f96:	bf00      	nop
 8010f98:	24000008 	.word	0x24000008
 8010f9c:	10624dd3 	.word	0x10624dd3
 8010fa0:	002000c5 	.word	0x002000c5

08010fa4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b088      	sub	sp, #32
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	60f8      	str	r0, [r7, #12]
 8010fac:	460b      	mov	r3, r1
 8010fae:	607a      	str	r2, [r7, #4]
 8010fb0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010fb2:	4b35      	ldr	r3, [pc, #212]	; (8011088 <SDMMC_GetCmdResp6+0xe4>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	4a35      	ldr	r2, [pc, #212]	; (801108c <SDMMC_GetCmdResp6+0xe8>)
 8010fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8010fbc:	0a5b      	lsrs	r3, r3, #9
 8010fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fc2:	fb02 f303 	mul.w	r3, r2, r3
 8010fc6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	1e5a      	subs	r2, r3, #1
 8010fcc:	61fa      	str	r2, [r7, #28]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d102      	bne.n	8010fd8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010fd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010fd6:	e052      	b.n	801107e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fdc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010fde:	69bb      	ldr	r3, [r7, #24]
 8010fe0:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d0ef      	beq.n	8010fc8 <SDMMC_GetCmdResp6+0x24>
 8010fe8:	69bb      	ldr	r3, [r7, #24]
 8010fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d1ea      	bne.n	8010fc8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ff6:	f003 0304 	and.w	r3, r3, #4
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d004      	beq.n	8011008 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	2204      	movs	r2, #4
 8011002:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011004:	2304      	movs	r3, #4
 8011006:	e03a      	b.n	801107e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801100c:	f003 0301 	and.w	r3, r3, #1
 8011010:	2b00      	cmp	r3, #0
 8011012:	d004      	beq.n	801101e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	2201      	movs	r2, #1
 8011018:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801101a:	2301      	movs	r3, #1
 801101c:	e02f      	b.n	801107e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801101e:	68f8      	ldr	r0, [r7, #12]
 8011020:	f7ff fb7c 	bl	801071c <SDMMC_GetCommandResponse>
 8011024:	4603      	mov	r3, r0
 8011026:	461a      	mov	r2, r3
 8011028:	7afb      	ldrb	r3, [r7, #11]
 801102a:	4293      	cmp	r3, r2
 801102c:	d001      	beq.n	8011032 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801102e:	2301      	movs	r3, #1
 8011030:	e025      	b.n	801107e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	4a16      	ldr	r2, [pc, #88]	; (8011090 <SDMMC_GetCmdResp6+0xec>)
 8011036:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011038:	2100      	movs	r1, #0
 801103a:	68f8      	ldr	r0, [r7, #12]
 801103c:	f7ff fb7b 	bl	8010736 <SDMMC_GetResponse>
 8011040:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011048:	2b00      	cmp	r3, #0
 801104a:	d106      	bne.n	801105a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801104c:	697b      	ldr	r3, [r7, #20]
 801104e:	0c1b      	lsrs	r3, r3, #16
 8011050:	b29a      	uxth	r2, r3
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011056:	2300      	movs	r3, #0
 8011058:	e011      	b.n	801107e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801105a:	697b      	ldr	r3, [r7, #20]
 801105c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011060:	2b00      	cmp	r3, #0
 8011062:	d002      	beq.n	801106a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011068:	e009      	b.n	801107e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801106a:	697b      	ldr	r3, [r7, #20]
 801106c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011070:	2b00      	cmp	r3, #0
 8011072:	d002      	beq.n	801107a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011078:	e001      	b.n	801107e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801107a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801107e:	4618      	mov	r0, r3
 8011080:	3720      	adds	r7, #32
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
 8011086:	bf00      	nop
 8011088:	24000008 	.word	0x24000008
 801108c:	10624dd3 	.word	0x10624dd3
 8011090:	002000c5 	.word	0x002000c5

08011094 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011094:	b480      	push	{r7}
 8011096:	b085      	sub	sp, #20
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801109c:	4b22      	ldr	r3, [pc, #136]	; (8011128 <SDMMC_GetCmdResp7+0x94>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	4a22      	ldr	r2, [pc, #136]	; (801112c <SDMMC_GetCmdResp7+0x98>)
 80110a2:	fba2 2303 	umull	r2, r3, r2, r3
 80110a6:	0a5b      	lsrs	r3, r3, #9
 80110a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80110ac:	fb02 f303 	mul.w	r3, r2, r3
 80110b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	1e5a      	subs	r2, r3, #1
 80110b6:	60fa      	str	r2, [r7, #12]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d102      	bne.n	80110c2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80110c0:	e02c      	b.n	801111c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110c6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d0ef      	beq.n	80110b2 <SDMMC_GetCmdResp7+0x1e>
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d1ea      	bne.n	80110b2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110e0:	f003 0304 	and.w	r3, r3, #4
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d004      	beq.n	80110f2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2204      	movs	r2, #4
 80110ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80110ee:	2304      	movs	r3, #4
 80110f0:	e014      	b.n	801111c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110f6:	f003 0301 	and.w	r3, r3, #1
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d004      	beq.n	8011108 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2201      	movs	r2, #1
 8011102:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011104:	2301      	movs	r3, #1
 8011106:	e009      	b.n	801111c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801110c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011110:	2b00      	cmp	r3, #0
 8011112:	d002      	beq.n	801111a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2240      	movs	r2, #64	; 0x40
 8011118:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801111a:	2300      	movs	r3, #0

}
 801111c:	4618      	mov	r0, r3
 801111e:	3714      	adds	r7, #20
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr
 8011128:	24000008 	.word	0x24000008
 801112c:	10624dd3 	.word	0x10624dd3

08011130 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011130:	b480      	push	{r7}
 8011132:	b085      	sub	sp, #20
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011138:	4b11      	ldr	r3, [pc, #68]	; (8011180 <SDMMC_GetCmdError+0x50>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	4a11      	ldr	r2, [pc, #68]	; (8011184 <SDMMC_GetCmdError+0x54>)
 801113e:	fba2 2303 	umull	r2, r3, r2, r3
 8011142:	0a5b      	lsrs	r3, r3, #9
 8011144:	f241 3288 	movw	r2, #5000	; 0x1388
 8011148:	fb02 f303 	mul.w	r3, r2, r3
 801114c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	1e5a      	subs	r2, r3, #1
 8011152:	60fa      	str	r2, [r7, #12]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d102      	bne.n	801115e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011158:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801115c:	e009      	b.n	8011172 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011166:	2b00      	cmp	r3, #0
 8011168:	d0f1      	beq.n	801114e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	4a06      	ldr	r2, [pc, #24]	; (8011188 <SDMMC_GetCmdError+0x58>)
 801116e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011170:	2300      	movs	r3, #0
}
 8011172:	4618      	mov	r0, r3
 8011174:	3714      	adds	r7, #20
 8011176:	46bd      	mov	sp, r7
 8011178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117c:	4770      	bx	lr
 801117e:	bf00      	nop
 8011180:	24000008 	.word	0x24000008
 8011184:	10624dd3 	.word	0x10624dd3
 8011188:	002000c5 	.word	0x002000c5

0801118c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011190:	4904      	ldr	r1, [pc, #16]	; (80111a4 <MX_FATFS_Init+0x18>)
 8011192:	4805      	ldr	r0, [pc, #20]	; (80111a8 <MX_FATFS_Init+0x1c>)
 8011194:	f000 fef0 	bl	8011f78 <FATFS_LinkDriver>
 8011198:	4603      	mov	r3, r0
 801119a:	461a      	mov	r2, r3
 801119c:	4b03      	ldr	r3, [pc, #12]	; (80111ac <MX_FATFS_Init+0x20>)
 801119e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80111a0:	bf00      	nop
 80111a2:	bd80      	pop	{r7, pc}
 80111a4:	240087f4 	.word	0x240087f4
 80111a8:	08012980 	.word	0x08012980
 80111ac:	240087f0 	.word	0x240087f0

080111b0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b082      	sub	sp, #8
 80111b4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80111b6:	2300      	movs	r3, #0
 80111b8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80111ba:	f000 f885 	bl	80112c8 <BSP_SD_IsDetected>
 80111be:	4603      	mov	r3, r0
 80111c0:	2b01      	cmp	r3, #1
 80111c2:	d001      	beq.n	80111c8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80111c4:	2302      	movs	r3, #2
 80111c6:	e012      	b.n	80111ee <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80111c8:	480b      	ldr	r0, [pc, #44]	; (80111f8 <BSP_SD_Init+0x48>)
 80111ca:	f7f8 fa29 	bl	8009620 <HAL_SD_Init>
 80111ce:	4603      	mov	r3, r0
 80111d0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80111d2:	79fb      	ldrb	r3, [r7, #7]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d109      	bne.n	80111ec <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80111d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80111dc:	4806      	ldr	r0, [pc, #24]	; (80111f8 <BSP_SD_Init+0x48>)
 80111de:	f7f9 f8d9 	bl	800a394 <HAL_SD_ConfigWideBusOperation>
 80111e2:	4603      	mov	r3, r0
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d001      	beq.n	80111ec <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80111e8:	2301      	movs	r3, #1
 80111ea:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80111ec:	79fb      	ldrb	r3, [r7, #7]
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3708      	adds	r7, #8
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}
 80111f6:	bf00      	nop
 80111f8:	240080a0 	.word	0x240080a0

080111fc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b086      	sub	sp, #24
 8011200:	af00      	add	r7, sp, #0
 8011202:	60f8      	str	r0, [r7, #12]
 8011204:	60b9      	str	r1, [r7, #8]
 8011206:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011208:	2300      	movs	r3, #0
 801120a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	68ba      	ldr	r2, [r7, #8]
 8011210:	68f9      	ldr	r1, [r7, #12]
 8011212:	4806      	ldr	r0, [pc, #24]	; (801122c <BSP_SD_ReadBlocks_DMA+0x30>)
 8011214:	f7f8 fb1e 	bl	8009854 <HAL_SD_ReadBlocks_DMA>
 8011218:	4603      	mov	r3, r0
 801121a:	2b00      	cmp	r3, #0
 801121c:	d001      	beq.n	8011222 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801121e:	2301      	movs	r3, #1
 8011220:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011222:	7dfb      	ldrb	r3, [r7, #23]
}
 8011224:	4618      	mov	r0, r3
 8011226:	3718      	adds	r7, #24
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}
 801122c:	240080a0 	.word	0x240080a0

08011230 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b086      	sub	sp, #24
 8011234:	af00      	add	r7, sp, #0
 8011236:	60f8      	str	r0, [r7, #12]
 8011238:	60b9      	str	r1, [r7, #8]
 801123a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801123c:	2300      	movs	r3, #0
 801123e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	68ba      	ldr	r2, [r7, #8]
 8011244:	68f9      	ldr	r1, [r7, #12]
 8011246:	4806      	ldr	r0, [pc, #24]	; (8011260 <BSP_SD_WriteBlocks_DMA+0x30>)
 8011248:	f7f8 fbac 	bl	80099a4 <HAL_SD_WriteBlocks_DMA>
 801124c:	4603      	mov	r3, r0
 801124e:	2b00      	cmp	r3, #0
 8011250:	d001      	beq.n	8011256 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011252:	2301      	movs	r3, #1
 8011254:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011256:	7dfb      	ldrb	r3, [r7, #23]
}
 8011258:	4618      	mov	r0, r3
 801125a:	3718      	adds	r7, #24
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}
 8011260:	240080a0 	.word	0x240080a0

08011264 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011268:	4805      	ldr	r0, [pc, #20]	; (8011280 <BSP_SD_GetCardState+0x1c>)
 801126a:	f7f9 f9a5 	bl	800a5b8 <HAL_SD_GetCardState>
 801126e:	4603      	mov	r3, r0
 8011270:	2b04      	cmp	r3, #4
 8011272:	bf14      	ite	ne
 8011274:	2301      	movne	r3, #1
 8011276:	2300      	moveq	r3, #0
 8011278:	b2db      	uxtb	r3, r3
}
 801127a:	4618      	mov	r0, r3
 801127c:	bd80      	pop	{r7, pc}
 801127e:	bf00      	nop
 8011280:	240080a0 	.word	0x240080a0

08011284 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b082      	sub	sp, #8
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801128c:	6879      	ldr	r1, [r7, #4]
 801128e:	4803      	ldr	r0, [pc, #12]	; (801129c <BSP_SD_GetCardInfo+0x18>)
 8011290:	f7f9 f854 	bl	800a33c <HAL_SD_GetCardInfo>
}
 8011294:	bf00      	nop
 8011296:	3708      	adds	r7, #8
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}
 801129c:	240080a0 	.word	0x240080a0

080112a0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b082      	sub	sp, #8
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80112a8:	f000 f984 	bl	80115b4 <BSP_SD_WriteCpltCallback>
}
 80112ac:	bf00      	nop
 80112ae:	3708      	adds	r7, #8
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}

080112b4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80112bc:	f000 f986 	bl	80115cc <BSP_SD_ReadCpltCallback>
}
 80112c0:	bf00      	nop
 80112c2:	3708      	adds	r7, #8
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}

080112c8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b083      	sub	sp, #12
 80112cc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80112ce:	2301      	movs	r3, #1
 80112d0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 80112d2:	79fb      	ldrb	r3, [r7, #7]
 80112d4:	b2db      	uxtb	r3, r3
}
 80112d6:	4618      	mov	r0, r3
 80112d8:	370c      	adds	r7, #12
 80112da:	46bd      	mov	sp, r7
 80112dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e0:	4770      	bx	lr

080112e2 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80112e2:	b580      	push	{r7, lr}
 80112e4:	b084      	sub	sp, #16
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80112ea:	f7f1 fec3 	bl	8003074 <HAL_GetTick>
 80112ee:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80112f0:	e006      	b.n	8011300 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80112f2:	f7ff ffb7 	bl	8011264 <BSP_SD_GetCardState>
 80112f6:	4603      	mov	r3, r0
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d101      	bne.n	8011300 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80112fc:	2300      	movs	r3, #0
 80112fe:	e009      	b.n	8011314 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011300:	f7f1 feb8 	bl	8003074 <HAL_GetTick>
 8011304:	4602      	mov	r2, r0
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	1ad3      	subs	r3, r2, r3
 801130a:	687a      	ldr	r2, [r7, #4]
 801130c:	429a      	cmp	r2, r3
 801130e:	d8f0      	bhi.n	80112f2 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011310:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011314:	4618      	mov	r0, r3
 8011316:	3710      	adds	r7, #16
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}

0801131c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b082      	sub	sp, #8
 8011320:	af00      	add	r7, sp, #0
 8011322:	4603      	mov	r3, r0
 8011324:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011326:	4b0b      	ldr	r3, [pc, #44]	; (8011354 <SD_CheckStatus+0x38>)
 8011328:	2201      	movs	r2, #1
 801132a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801132c:	f7ff ff9a 	bl	8011264 <BSP_SD_GetCardState>
 8011330:	4603      	mov	r3, r0
 8011332:	2b00      	cmp	r3, #0
 8011334:	d107      	bne.n	8011346 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011336:	4b07      	ldr	r3, [pc, #28]	; (8011354 <SD_CheckStatus+0x38>)
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	b2db      	uxtb	r3, r3
 801133c:	f023 0301 	bic.w	r3, r3, #1
 8011340:	b2da      	uxtb	r2, r3
 8011342:	4b04      	ldr	r3, [pc, #16]	; (8011354 <SD_CheckStatus+0x38>)
 8011344:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011346:	4b03      	ldr	r3, [pc, #12]	; (8011354 <SD_CheckStatus+0x38>)
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	b2db      	uxtb	r3, r3
}
 801134c:	4618      	mov	r0, r3
 801134e:	3708      	adds	r7, #8
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}
 8011354:	24000015 	.word	0x24000015

08011358 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b082      	sub	sp, #8
 801135c:	af00      	add	r7, sp, #0
 801135e:	4603      	mov	r3, r0
 8011360:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011362:	f7ff ff25 	bl	80111b0 <BSP_SD_Init>
 8011366:	4603      	mov	r3, r0
 8011368:	2b00      	cmp	r3, #0
 801136a:	d107      	bne.n	801137c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801136c:	79fb      	ldrb	r3, [r7, #7]
 801136e:	4618      	mov	r0, r3
 8011370:	f7ff ffd4 	bl	801131c <SD_CheckStatus>
 8011374:	4603      	mov	r3, r0
 8011376:	461a      	mov	r2, r3
 8011378:	4b04      	ldr	r3, [pc, #16]	; (801138c <SD_initialize+0x34>)
 801137a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801137c:	4b03      	ldr	r3, [pc, #12]	; (801138c <SD_initialize+0x34>)
 801137e:	781b      	ldrb	r3, [r3, #0]
 8011380:	b2db      	uxtb	r3, r3
}
 8011382:	4618      	mov	r0, r3
 8011384:	3708      	adds	r7, #8
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
 801138a:	bf00      	nop
 801138c:	24000015 	.word	0x24000015

08011390 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af00      	add	r7, sp, #0
 8011396:	4603      	mov	r3, r0
 8011398:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801139a:	79fb      	ldrb	r3, [r7, #7]
 801139c:	4618      	mov	r0, r3
 801139e:	f7ff ffbd 	bl	801131c <SD_CheckStatus>
 80113a2:	4603      	mov	r3, r0
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3708      	adds	r7, #8
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b086      	sub	sp, #24
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	60b9      	str	r1, [r7, #8]
 80113b4:	607a      	str	r2, [r7, #4]
 80113b6:	603b      	str	r3, [r7, #0]
 80113b8:	4603      	mov	r3, r0
 80113ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80113bc:	2301      	movs	r3, #1
 80113be:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80113c0:	f247 5030 	movw	r0, #30000	; 0x7530
 80113c4:	f7ff ff8d 	bl	80112e2 <SD_CheckStatusWithTimeout>
 80113c8:	4603      	mov	r3, r0
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	da01      	bge.n	80113d2 <SD_read+0x26>
  {
    return res;
 80113ce:	7dfb      	ldrb	r3, [r7, #23]
 80113d0:	e03b      	b.n	801144a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80113d2:	683a      	ldr	r2, [r7, #0]
 80113d4:	6879      	ldr	r1, [r7, #4]
 80113d6:	68b8      	ldr	r0, [r7, #8]
 80113d8:	f7ff ff10 	bl	80111fc <BSP_SD_ReadBlocks_DMA>
 80113dc:	4603      	mov	r3, r0
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d132      	bne.n	8011448 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80113e2:	4b1c      	ldr	r3, [pc, #112]	; (8011454 <SD_read+0xa8>)
 80113e4:	2200      	movs	r2, #0
 80113e6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80113e8:	f7f1 fe44 	bl	8003074 <HAL_GetTick>
 80113ec:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80113ee:	bf00      	nop
 80113f0:	4b18      	ldr	r3, [pc, #96]	; (8011454 <SD_read+0xa8>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d108      	bne.n	801140a <SD_read+0x5e>
 80113f8:	f7f1 fe3c 	bl	8003074 <HAL_GetTick>
 80113fc:	4602      	mov	r2, r0
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	1ad3      	subs	r3, r2, r3
 8011402:	f247 522f 	movw	r2, #29999	; 0x752f
 8011406:	4293      	cmp	r3, r2
 8011408:	d9f2      	bls.n	80113f0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801140a:	4b12      	ldr	r3, [pc, #72]	; (8011454 <SD_read+0xa8>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d102      	bne.n	8011418 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8011412:	2301      	movs	r3, #1
 8011414:	75fb      	strb	r3, [r7, #23]
 8011416:	e017      	b.n	8011448 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011418:	4b0e      	ldr	r3, [pc, #56]	; (8011454 <SD_read+0xa8>)
 801141a:	2200      	movs	r2, #0
 801141c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801141e:	f7f1 fe29 	bl	8003074 <HAL_GetTick>
 8011422:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011424:	e007      	b.n	8011436 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011426:	f7ff ff1d 	bl	8011264 <BSP_SD_GetCardState>
 801142a:	4603      	mov	r3, r0
 801142c:	2b00      	cmp	r3, #0
 801142e:	d102      	bne.n	8011436 <SD_read+0x8a>
          {
            res = RES_OK;
 8011430:	2300      	movs	r3, #0
 8011432:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8011434:	e008      	b.n	8011448 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011436:	f7f1 fe1d 	bl	8003074 <HAL_GetTick>
 801143a:	4602      	mov	r2, r0
 801143c:	693b      	ldr	r3, [r7, #16]
 801143e:	1ad3      	subs	r3, r2, r3
 8011440:	f247 522f 	movw	r2, #29999	; 0x752f
 8011444:	4293      	cmp	r3, r2
 8011446:	d9ee      	bls.n	8011426 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011448:	7dfb      	ldrb	r3, [r7, #23]
}
 801144a:	4618      	mov	r0, r3
 801144c:	3718      	adds	r7, #24
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}
 8011452:	bf00      	nop
 8011454:	24008a2c 	.word	0x24008a2c

08011458 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b086      	sub	sp, #24
 801145c:	af00      	add	r7, sp, #0
 801145e:	60b9      	str	r1, [r7, #8]
 8011460:	607a      	str	r2, [r7, #4]
 8011462:	603b      	str	r3, [r7, #0]
 8011464:	4603      	mov	r3, r0
 8011466:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011468:	2301      	movs	r3, #1
 801146a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801146c:	4b24      	ldr	r3, [pc, #144]	; (8011500 <SD_write+0xa8>)
 801146e:	2200      	movs	r2, #0
 8011470:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011472:	f247 5030 	movw	r0, #30000	; 0x7530
 8011476:	f7ff ff34 	bl	80112e2 <SD_CheckStatusWithTimeout>
 801147a:	4603      	mov	r3, r0
 801147c:	2b00      	cmp	r3, #0
 801147e:	da01      	bge.n	8011484 <SD_write+0x2c>
  {
    return res;
 8011480:	7dfb      	ldrb	r3, [r7, #23]
 8011482:	e038      	b.n	80114f6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011484:	683a      	ldr	r2, [r7, #0]
 8011486:	6879      	ldr	r1, [r7, #4]
 8011488:	68b8      	ldr	r0, [r7, #8]
 801148a:	f7ff fed1 	bl	8011230 <BSP_SD_WriteBlocks_DMA>
 801148e:	4603      	mov	r3, r0
 8011490:	2b00      	cmp	r3, #0
 8011492:	d12f      	bne.n	80114f4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8011494:	f7f1 fdee 	bl	8003074 <HAL_GetTick>
 8011498:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801149a:	bf00      	nop
 801149c:	4b18      	ldr	r3, [pc, #96]	; (8011500 <SD_write+0xa8>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d108      	bne.n	80114b6 <SD_write+0x5e>
 80114a4:	f7f1 fde6 	bl	8003074 <HAL_GetTick>
 80114a8:	4602      	mov	r2, r0
 80114aa:	693b      	ldr	r3, [r7, #16]
 80114ac:	1ad3      	subs	r3, r2, r3
 80114ae:	f247 522f 	movw	r2, #29999	; 0x752f
 80114b2:	4293      	cmp	r3, r2
 80114b4:	d9f2      	bls.n	801149c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80114b6:	4b12      	ldr	r3, [pc, #72]	; (8011500 <SD_write+0xa8>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d102      	bne.n	80114c4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80114be:	2301      	movs	r3, #1
 80114c0:	75fb      	strb	r3, [r7, #23]
 80114c2:	e017      	b.n	80114f4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80114c4:	4b0e      	ldr	r3, [pc, #56]	; (8011500 <SD_write+0xa8>)
 80114c6:	2200      	movs	r2, #0
 80114c8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80114ca:	f7f1 fdd3 	bl	8003074 <HAL_GetTick>
 80114ce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80114d0:	e007      	b.n	80114e2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80114d2:	f7ff fec7 	bl	8011264 <BSP_SD_GetCardState>
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d102      	bne.n	80114e2 <SD_write+0x8a>
          {
            res = RES_OK;
 80114dc:	2300      	movs	r3, #0
 80114de:	75fb      	strb	r3, [r7, #23]
            break;
 80114e0:	e008      	b.n	80114f4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80114e2:	f7f1 fdc7 	bl	8003074 <HAL_GetTick>
 80114e6:	4602      	mov	r2, r0
 80114e8:	693b      	ldr	r3, [r7, #16]
 80114ea:	1ad3      	subs	r3, r2, r3
 80114ec:	f247 522f 	movw	r2, #29999	; 0x752f
 80114f0:	4293      	cmp	r3, r2
 80114f2:	d9ee      	bls.n	80114d2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80114f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3718      	adds	r7, #24
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	24008a28 	.word	0x24008a28

08011504 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b08c      	sub	sp, #48	; 0x30
 8011508:	af00      	add	r7, sp, #0
 801150a:	4603      	mov	r3, r0
 801150c:	603a      	str	r2, [r7, #0]
 801150e:	71fb      	strb	r3, [r7, #7]
 8011510:	460b      	mov	r3, r1
 8011512:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011514:	2301      	movs	r3, #1
 8011516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801151a:	4b25      	ldr	r3, [pc, #148]	; (80115b0 <SD_ioctl+0xac>)
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	b2db      	uxtb	r3, r3
 8011520:	f003 0301 	and.w	r3, r3, #1
 8011524:	2b00      	cmp	r3, #0
 8011526:	d001      	beq.n	801152c <SD_ioctl+0x28>
 8011528:	2303      	movs	r3, #3
 801152a:	e03c      	b.n	80115a6 <SD_ioctl+0xa2>

  switch (cmd)
 801152c:	79bb      	ldrb	r3, [r7, #6]
 801152e:	2b03      	cmp	r3, #3
 8011530:	d834      	bhi.n	801159c <SD_ioctl+0x98>
 8011532:	a201      	add	r2, pc, #4	; (adr r2, 8011538 <SD_ioctl+0x34>)
 8011534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011538:	08011549 	.word	0x08011549
 801153c:	08011551 	.word	0x08011551
 8011540:	08011569 	.word	0x08011569
 8011544:	08011583 	.word	0x08011583
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011548:	2300      	movs	r3, #0
 801154a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801154e:	e028      	b.n	80115a2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011550:	f107 0308 	add.w	r3, r7, #8
 8011554:	4618      	mov	r0, r3
 8011556:	f7ff fe95 	bl	8011284 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801155a:	6a3a      	ldr	r2, [r7, #32]
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011560:	2300      	movs	r3, #0
 8011562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011566:	e01c      	b.n	80115a2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011568:	f107 0308 	add.w	r3, r7, #8
 801156c:	4618      	mov	r0, r3
 801156e:	f7ff fe89 	bl	8011284 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011574:	b29a      	uxth	r2, r3
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801157a:	2300      	movs	r3, #0
 801157c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011580:	e00f      	b.n	80115a2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011582:	f107 0308 	add.w	r3, r7, #8
 8011586:	4618      	mov	r0, r3
 8011588:	f7ff fe7c 	bl	8011284 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801158e:	0a5a      	lsrs	r2, r3, #9
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011594:	2300      	movs	r3, #0
 8011596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801159a:	e002      	b.n	80115a2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801159c:	2304      	movs	r3, #4
 801159e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80115a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80115a6:	4618      	mov	r0, r3
 80115a8:	3730      	adds	r7, #48	; 0x30
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	bf00      	nop
 80115b0:	24000015 	.word	0x24000015

080115b4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80115b4:	b480      	push	{r7}
 80115b6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80115b8:	4b03      	ldr	r3, [pc, #12]	; (80115c8 <BSP_SD_WriteCpltCallback+0x14>)
 80115ba:	2201      	movs	r2, #1
 80115bc:	601a      	str	r2, [r3, #0]
}
 80115be:	bf00      	nop
 80115c0:	46bd      	mov	sp, r7
 80115c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c6:	4770      	bx	lr
 80115c8:	24008a28 	.word	0x24008a28

080115cc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80115cc:	b480      	push	{r7}
 80115ce:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80115d0:	4b03      	ldr	r3, [pc, #12]	; (80115e0 <BSP_SD_ReadCpltCallback+0x14>)
 80115d2:	2201      	movs	r2, #1
 80115d4:	601a      	str	r2, [r3, #0]
}
 80115d6:	bf00      	nop
 80115d8:	46bd      	mov	sp, r7
 80115da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115de:	4770      	bx	lr
 80115e0:	24008a2c 	.word	0x24008a2c

080115e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b084      	sub	sp, #16
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	4603      	mov	r3, r0
 80115ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80115ee:	79fb      	ldrb	r3, [r7, #7]
 80115f0:	4a08      	ldr	r2, [pc, #32]	; (8011614 <disk_status+0x30>)
 80115f2:	009b      	lsls	r3, r3, #2
 80115f4:	4413      	add	r3, r2
 80115f6:	685b      	ldr	r3, [r3, #4]
 80115f8:	685b      	ldr	r3, [r3, #4]
 80115fa:	79fa      	ldrb	r2, [r7, #7]
 80115fc:	4905      	ldr	r1, [pc, #20]	; (8011614 <disk_status+0x30>)
 80115fe:	440a      	add	r2, r1
 8011600:	7a12      	ldrb	r2, [r2, #8]
 8011602:	4610      	mov	r0, r2
 8011604:	4798      	blx	r3
 8011606:	4603      	mov	r3, r0
 8011608:	73fb      	strb	r3, [r7, #15]
  return stat;
 801160a:	7bfb      	ldrb	r3, [r7, #15]
}
 801160c:	4618      	mov	r0, r3
 801160e:	3710      	adds	r7, #16
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}
 8011614:	24008a58 	.word	0x24008a58

08011618 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b084      	sub	sp, #16
 801161c:	af00      	add	r7, sp, #0
 801161e:	4603      	mov	r3, r0
 8011620:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011622:	2300      	movs	r3, #0
 8011624:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011626:	79fb      	ldrb	r3, [r7, #7]
 8011628:	4a0d      	ldr	r2, [pc, #52]	; (8011660 <disk_initialize+0x48>)
 801162a:	5cd3      	ldrb	r3, [r2, r3]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d111      	bne.n	8011654 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011630:	79fb      	ldrb	r3, [r7, #7]
 8011632:	4a0b      	ldr	r2, [pc, #44]	; (8011660 <disk_initialize+0x48>)
 8011634:	2101      	movs	r1, #1
 8011636:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011638:	79fb      	ldrb	r3, [r7, #7]
 801163a:	4a09      	ldr	r2, [pc, #36]	; (8011660 <disk_initialize+0x48>)
 801163c:	009b      	lsls	r3, r3, #2
 801163e:	4413      	add	r3, r2
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	79fa      	ldrb	r2, [r7, #7]
 8011646:	4906      	ldr	r1, [pc, #24]	; (8011660 <disk_initialize+0x48>)
 8011648:	440a      	add	r2, r1
 801164a:	7a12      	ldrb	r2, [r2, #8]
 801164c:	4610      	mov	r0, r2
 801164e:	4798      	blx	r3
 8011650:	4603      	mov	r3, r0
 8011652:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011654:	7bfb      	ldrb	r3, [r7, #15]
}
 8011656:	4618      	mov	r0, r3
 8011658:	3710      	adds	r7, #16
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}
 801165e:	bf00      	nop
 8011660:	24008a58 	.word	0x24008a58

08011664 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011664:	b590      	push	{r4, r7, lr}
 8011666:	b087      	sub	sp, #28
 8011668:	af00      	add	r7, sp, #0
 801166a:	60b9      	str	r1, [r7, #8]
 801166c:	607a      	str	r2, [r7, #4]
 801166e:	603b      	str	r3, [r7, #0]
 8011670:	4603      	mov	r3, r0
 8011672:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011674:	7bfb      	ldrb	r3, [r7, #15]
 8011676:	4a0a      	ldr	r2, [pc, #40]	; (80116a0 <disk_read+0x3c>)
 8011678:	009b      	lsls	r3, r3, #2
 801167a:	4413      	add	r3, r2
 801167c:	685b      	ldr	r3, [r3, #4]
 801167e:	689c      	ldr	r4, [r3, #8]
 8011680:	7bfb      	ldrb	r3, [r7, #15]
 8011682:	4a07      	ldr	r2, [pc, #28]	; (80116a0 <disk_read+0x3c>)
 8011684:	4413      	add	r3, r2
 8011686:	7a18      	ldrb	r0, [r3, #8]
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	687a      	ldr	r2, [r7, #4]
 801168c:	68b9      	ldr	r1, [r7, #8]
 801168e:	47a0      	blx	r4
 8011690:	4603      	mov	r3, r0
 8011692:	75fb      	strb	r3, [r7, #23]
  return res;
 8011694:	7dfb      	ldrb	r3, [r7, #23]
}
 8011696:	4618      	mov	r0, r3
 8011698:	371c      	adds	r7, #28
 801169a:	46bd      	mov	sp, r7
 801169c:	bd90      	pop	{r4, r7, pc}
 801169e:	bf00      	nop
 80116a0:	24008a58 	.word	0x24008a58

080116a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80116a4:	b590      	push	{r4, r7, lr}
 80116a6:	b087      	sub	sp, #28
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	60b9      	str	r1, [r7, #8]
 80116ac:	607a      	str	r2, [r7, #4]
 80116ae:	603b      	str	r3, [r7, #0]
 80116b0:	4603      	mov	r3, r0
 80116b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80116b4:	7bfb      	ldrb	r3, [r7, #15]
 80116b6:	4a0a      	ldr	r2, [pc, #40]	; (80116e0 <disk_write+0x3c>)
 80116b8:	009b      	lsls	r3, r3, #2
 80116ba:	4413      	add	r3, r2
 80116bc:	685b      	ldr	r3, [r3, #4]
 80116be:	68dc      	ldr	r4, [r3, #12]
 80116c0:	7bfb      	ldrb	r3, [r7, #15]
 80116c2:	4a07      	ldr	r2, [pc, #28]	; (80116e0 <disk_write+0x3c>)
 80116c4:	4413      	add	r3, r2
 80116c6:	7a18      	ldrb	r0, [r3, #8]
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	687a      	ldr	r2, [r7, #4]
 80116cc:	68b9      	ldr	r1, [r7, #8]
 80116ce:	47a0      	blx	r4
 80116d0:	4603      	mov	r3, r0
 80116d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80116d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	371c      	adds	r7, #28
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd90      	pop	{r4, r7, pc}
 80116de:	bf00      	nop
 80116e0:	24008a58 	.word	0x24008a58

080116e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80116e4:	b480      	push	{r7}
 80116e6:	b085      	sub	sp, #20
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	3301      	adds	r3, #1
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80116f4:	89fb      	ldrh	r3, [r7, #14]
 80116f6:	021b      	lsls	r3, r3, #8
 80116f8:	b21a      	sxth	r2, r3
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	b21b      	sxth	r3, r3
 8011700:	4313      	orrs	r3, r2
 8011702:	b21b      	sxth	r3, r3
 8011704:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011706:	89fb      	ldrh	r3, [r7, #14]
}
 8011708:	4618      	mov	r0, r3
 801170a:	3714      	adds	r7, #20
 801170c:	46bd      	mov	sp, r7
 801170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011712:	4770      	bx	lr

08011714 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011714:	b480      	push	{r7}
 8011716:	b085      	sub	sp, #20
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	3303      	adds	r3, #3
 8011720:	781b      	ldrb	r3, [r3, #0]
 8011722:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	021b      	lsls	r3, r3, #8
 8011728:	687a      	ldr	r2, [r7, #4]
 801172a:	3202      	adds	r2, #2
 801172c:	7812      	ldrb	r2, [r2, #0]
 801172e:	4313      	orrs	r3, r2
 8011730:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	021b      	lsls	r3, r3, #8
 8011736:	687a      	ldr	r2, [r7, #4]
 8011738:	3201      	adds	r2, #1
 801173a:	7812      	ldrb	r2, [r2, #0]
 801173c:	4313      	orrs	r3, r2
 801173e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	021b      	lsls	r3, r3, #8
 8011744:	687a      	ldr	r2, [r7, #4]
 8011746:	7812      	ldrb	r2, [r2, #0]
 8011748:	4313      	orrs	r3, r2
 801174a:	60fb      	str	r3, [r7, #12]
	return rv;
 801174c:	68fb      	ldr	r3, [r7, #12]
}
 801174e:	4618      	mov	r0, r3
 8011750:	3714      	adds	r7, #20
 8011752:	46bd      	mov	sp, r7
 8011754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011758:	4770      	bx	lr
	...

0801175c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801175c:	b480      	push	{r7}
 801175e:	b085      	sub	sp, #20
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011764:	2300      	movs	r3, #0
 8011766:	60fb      	str	r3, [r7, #12]
 8011768:	e010      	b.n	801178c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801176a:	4a0d      	ldr	r2, [pc, #52]	; (80117a0 <clear_lock+0x44>)
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	011b      	lsls	r3, r3, #4
 8011770:	4413      	add	r3, r2
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	687a      	ldr	r2, [r7, #4]
 8011776:	429a      	cmp	r2, r3
 8011778:	d105      	bne.n	8011786 <clear_lock+0x2a>
 801177a:	4a09      	ldr	r2, [pc, #36]	; (80117a0 <clear_lock+0x44>)
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	011b      	lsls	r3, r3, #4
 8011780:	4413      	add	r3, r2
 8011782:	2200      	movs	r2, #0
 8011784:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	3301      	adds	r3, #1
 801178a:	60fb      	str	r3, [r7, #12]
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	2b01      	cmp	r3, #1
 8011790:	d9eb      	bls.n	801176a <clear_lock+0xe>
	}
}
 8011792:	bf00      	nop
 8011794:	bf00      	nop
 8011796:	3714      	adds	r7, #20
 8011798:	46bd      	mov	sp, r7
 801179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179e:	4770      	bx	lr
 80117a0:	24008a38 	.word	0x24008a38

080117a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b086      	sub	sp, #24
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80117ac:	2300      	movs	r3, #0
 80117ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	78db      	ldrb	r3, [r3, #3]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d034      	beq.n	8011822 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	7858      	ldrb	r0, [r3, #1]
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80117c8:	2301      	movs	r3, #1
 80117ca:	697a      	ldr	r2, [r7, #20]
 80117cc:	f7ff ff6a 	bl	80116a4 <disk_write>
 80117d0:	4603      	mov	r3, r0
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d002      	beq.n	80117dc <sync_window+0x38>
			res = FR_DISK_ERR;
 80117d6:	2301      	movs	r3, #1
 80117d8:	73fb      	strb	r3, [r7, #15]
 80117da:	e022      	b.n	8011822 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2200      	movs	r2, #0
 80117e0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6a1b      	ldr	r3, [r3, #32]
 80117e6:	697a      	ldr	r2, [r7, #20]
 80117e8:	1ad2      	subs	r2, r2, r3
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	699b      	ldr	r3, [r3, #24]
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d217      	bcs.n	8011822 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	789b      	ldrb	r3, [r3, #2]
 80117f6:	613b      	str	r3, [r7, #16]
 80117f8:	e010      	b.n	801181c <sync_window+0x78>
					wsect += fs->fsize;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	699b      	ldr	r3, [r3, #24]
 80117fe:	697a      	ldr	r2, [r7, #20]
 8011800:	4413      	add	r3, r2
 8011802:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	7858      	ldrb	r0, [r3, #1]
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801180e:	2301      	movs	r3, #1
 8011810:	697a      	ldr	r2, [r7, #20]
 8011812:	f7ff ff47 	bl	80116a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	3b01      	subs	r3, #1
 801181a:	613b      	str	r3, [r7, #16]
 801181c:	693b      	ldr	r3, [r7, #16]
 801181e:	2b01      	cmp	r3, #1
 8011820:	d8eb      	bhi.n	80117fa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011822:	7bfb      	ldrb	r3, [r7, #15]
}
 8011824:	4618      	mov	r0, r3
 8011826:	3718      	adds	r7, #24
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}

0801182c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b084      	sub	sp, #16
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011836:	2300      	movs	r3, #0
 8011838:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801183e:	683a      	ldr	r2, [r7, #0]
 8011840:	429a      	cmp	r2, r3
 8011842:	d01b      	beq.n	801187c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f7ff ffad 	bl	80117a4 <sync_window>
 801184a:	4603      	mov	r3, r0
 801184c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801184e:	7bfb      	ldrb	r3, [r7, #15]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d113      	bne.n	801187c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	7858      	ldrb	r0, [r3, #1]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801185e:	2301      	movs	r3, #1
 8011860:	683a      	ldr	r2, [r7, #0]
 8011862:	f7ff feff 	bl	8011664 <disk_read>
 8011866:	4603      	mov	r3, r0
 8011868:	2b00      	cmp	r3, #0
 801186a:	d004      	beq.n	8011876 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801186c:	f04f 33ff 	mov.w	r3, #4294967295
 8011870:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011872:	2301      	movs	r3, #1
 8011874:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	683a      	ldr	r2, [r7, #0]
 801187a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 801187c:	7bfb      	ldrb	r3, [r7, #15]
}
 801187e:	4618      	mov	r0, r3
 8011880:	3710      	adds	r7, #16
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}

08011886 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011886:	b480      	push	{r7}
 8011888:	b087      	sub	sp, #28
 801188a:	af00      	add	r7, sp, #0
 801188c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801188e:	f04f 33ff 	mov.w	r3, #4294967295
 8011892:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d031      	beq.n	8011900 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	617b      	str	r3, [r7, #20]
 80118a2:	e002      	b.n	80118aa <get_ldnumber+0x24>
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	3301      	adds	r3, #1
 80118a8:	617b      	str	r3, [r7, #20]
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	781b      	ldrb	r3, [r3, #0]
 80118ae:	2b20      	cmp	r3, #32
 80118b0:	d903      	bls.n	80118ba <get_ldnumber+0x34>
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	2b3a      	cmp	r3, #58	; 0x3a
 80118b8:	d1f4      	bne.n	80118a4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	781b      	ldrb	r3, [r3, #0]
 80118be:	2b3a      	cmp	r3, #58	; 0x3a
 80118c0:	d11c      	bne.n	80118fc <get_ldnumber+0x76>
			tp = *path;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	1c5a      	adds	r2, r3, #1
 80118cc:	60fa      	str	r2, [r7, #12]
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	3b30      	subs	r3, #48	; 0x30
 80118d2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	2b09      	cmp	r3, #9
 80118d8:	d80e      	bhi.n	80118f8 <get_ldnumber+0x72>
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	429a      	cmp	r2, r3
 80118e0:	d10a      	bne.n	80118f8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d107      	bne.n	80118f8 <get_ldnumber+0x72>
					vol = (int)i;
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	3301      	adds	r3, #1
 80118f0:	617b      	str	r3, [r7, #20]
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	697a      	ldr	r2, [r7, #20]
 80118f6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80118f8:	693b      	ldr	r3, [r7, #16]
 80118fa:	e002      	b.n	8011902 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80118fc:	2300      	movs	r3, #0
 80118fe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011900:	693b      	ldr	r3, [r7, #16]
}
 8011902:	4618      	mov	r0, r3
 8011904:	371c      	adds	r7, #28
 8011906:	46bd      	mov	sp, r7
 8011908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190c:	4770      	bx	lr
	...

08011910 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	2200      	movs	r2, #0
 801191e:	70da      	strb	r2, [r3, #3]
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f04f 32ff 	mov.w	r2, #4294967295
 8011926:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011928:	6839      	ldr	r1, [r7, #0]
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f7ff ff7e 	bl	801182c <move_window>
 8011930:	4603      	mov	r3, r0
 8011932:	2b00      	cmp	r3, #0
 8011934:	d001      	beq.n	801193a <check_fs+0x2a>
 8011936:	2304      	movs	r3, #4
 8011938:	e038      	b.n	80119ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	3330      	adds	r3, #48	; 0x30
 801193e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011942:	4618      	mov	r0, r3
 8011944:	f7ff fece 	bl	80116e4 <ld_word>
 8011948:	4603      	mov	r3, r0
 801194a:	461a      	mov	r2, r3
 801194c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011950:	429a      	cmp	r2, r3
 8011952:	d001      	beq.n	8011958 <check_fs+0x48>
 8011954:	2303      	movs	r3, #3
 8011956:	e029      	b.n	80119ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801195e:	2be9      	cmp	r3, #233	; 0xe9
 8011960:	d009      	beq.n	8011976 <check_fs+0x66>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011968:	2beb      	cmp	r3, #235	; 0xeb
 801196a:	d11e      	bne.n	80119aa <check_fs+0x9a>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011972:	2b90      	cmp	r3, #144	; 0x90
 8011974:	d119      	bne.n	80119aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	3330      	adds	r3, #48	; 0x30
 801197a:	3336      	adds	r3, #54	; 0x36
 801197c:	4618      	mov	r0, r3
 801197e:	f7ff fec9 	bl	8011714 <ld_dword>
 8011982:	4603      	mov	r3, r0
 8011984:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011988:	4a0a      	ldr	r2, [pc, #40]	; (80119b4 <check_fs+0xa4>)
 801198a:	4293      	cmp	r3, r2
 801198c:	d101      	bne.n	8011992 <check_fs+0x82>
 801198e:	2300      	movs	r3, #0
 8011990:	e00c      	b.n	80119ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	3330      	adds	r3, #48	; 0x30
 8011996:	3352      	adds	r3, #82	; 0x52
 8011998:	4618      	mov	r0, r3
 801199a:	f7ff febb 	bl	8011714 <ld_dword>
 801199e:	4603      	mov	r3, r0
 80119a0:	4a05      	ldr	r2, [pc, #20]	; (80119b8 <check_fs+0xa8>)
 80119a2:	4293      	cmp	r3, r2
 80119a4:	d101      	bne.n	80119aa <check_fs+0x9a>
 80119a6:	2300      	movs	r3, #0
 80119a8:	e000      	b.n	80119ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80119aa:	2302      	movs	r3, #2
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	3708      	adds	r7, #8
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}
 80119b4:	00544146 	.word	0x00544146
 80119b8:	33544146 	.word	0x33544146

080119bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b096      	sub	sp, #88	; 0x58
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	60f8      	str	r0, [r7, #12]
 80119c4:	60b9      	str	r1, [r7, #8]
 80119c6:	4613      	mov	r3, r2
 80119c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	2200      	movs	r2, #0
 80119ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80119d0:	68f8      	ldr	r0, [r7, #12]
 80119d2:	f7ff ff58 	bl	8011886 <get_ldnumber>
 80119d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80119d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119da:	2b00      	cmp	r3, #0
 80119dc:	da01      	bge.n	80119e2 <find_volume+0x26>
 80119de:	230b      	movs	r3, #11
 80119e0:	e22d      	b.n	8011e3e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80119e2:	4aa1      	ldr	r2, [pc, #644]	; (8011c68 <find_volume+0x2ac>)
 80119e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80119ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d101      	bne.n	80119f6 <find_volume+0x3a>
 80119f2:	230c      	movs	r3, #12
 80119f4:	e223      	b.n	8011e3e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80119fc:	79fb      	ldrb	r3, [r7, #7]
 80119fe:	f023 0301 	bic.w	r3, r3, #1
 8011a02:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d01a      	beq.n	8011a42 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a0e:	785b      	ldrb	r3, [r3, #1]
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7ff fde7 	bl	80115e4 <disk_status>
 8011a16:	4603      	mov	r3, r0
 8011a18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a20:	f003 0301 	and.w	r3, r3, #1
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d10c      	bne.n	8011a42 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011a28:	79fb      	ldrb	r3, [r7, #7]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d007      	beq.n	8011a3e <find_volume+0x82>
 8011a2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a32:	f003 0304 	and.w	r3, r3, #4
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d001      	beq.n	8011a3e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011a3a:	230a      	movs	r3, #10
 8011a3c:	e1ff      	b.n	8011e3e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8011a3e:	2300      	movs	r3, #0
 8011a40:	e1fd      	b.n	8011e3e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a44:	2200      	movs	r2, #0
 8011a46:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a4a:	b2da      	uxtb	r2, r3
 8011a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a4e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a52:	785b      	ldrb	r3, [r3, #1]
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7ff fddf 	bl	8011618 <disk_initialize>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011a60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a64:	f003 0301 	and.w	r3, r3, #1
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d001      	beq.n	8011a70 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011a6c:	2303      	movs	r3, #3
 8011a6e:	e1e6      	b.n	8011e3e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011a70:	79fb      	ldrb	r3, [r7, #7]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d007      	beq.n	8011a86 <find_volume+0xca>
 8011a76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a7a:	f003 0304 	and.w	r3, r3, #4
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d001      	beq.n	8011a86 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011a82:	230a      	movs	r3, #10
 8011a84:	e1db      	b.n	8011e3e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011a86:	2300      	movs	r3, #0
 8011a88:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011a8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011a8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011a8e:	f7ff ff3f 	bl	8011910 <check_fs>
 8011a92:	4603      	mov	r3, r0
 8011a94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011a98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011a9c:	2b02      	cmp	r3, #2
 8011a9e:	d149      	bne.n	8011b34 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8011aa4:	e01e      	b.n	8011ae4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aa8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011aae:	011b      	lsls	r3, r3, #4
 8011ab0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011ab4:	4413      	add	r3, r2
 8011ab6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aba:	3304      	adds	r3, #4
 8011abc:	781b      	ldrb	r3, [r3, #0]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d006      	beq.n	8011ad0 <find_volume+0x114>
 8011ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac4:	3308      	adds	r3, #8
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7ff fe24 	bl	8011714 <ld_dword>
 8011acc:	4602      	mov	r2, r0
 8011ace:	e000      	b.n	8011ad2 <find_volume+0x116>
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ad4:	009b      	lsls	r3, r3, #2
 8011ad6:	3358      	adds	r3, #88	; 0x58
 8011ad8:	443b      	add	r3, r7
 8011ada:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ae0:	3301      	adds	r3, #1
 8011ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8011ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ae6:	2b03      	cmp	r3, #3
 8011ae8:	d9dd      	bls.n	8011aa6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011aea:	2300      	movs	r3, #0
 8011aec:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d002      	beq.n	8011afa <find_volume+0x13e>
 8011af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011af6:	3b01      	subs	r3, #1
 8011af8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011afc:	009b      	lsls	r3, r3, #2
 8011afe:	3358      	adds	r3, #88	; 0x58
 8011b00:	443b      	add	r3, r7
 8011b02:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011b06:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d005      	beq.n	8011b1a <find_volume+0x15e>
 8011b0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011b10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b12:	f7ff fefd 	bl	8011910 <check_fs>
 8011b16:	4603      	mov	r3, r0
 8011b18:	e000      	b.n	8011b1c <find_volume+0x160>
 8011b1a:	2303      	movs	r3, #3
 8011b1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011b20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b24:	2b01      	cmp	r3, #1
 8011b26:	d905      	bls.n	8011b34 <find_volume+0x178>
 8011b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b2a:	3301      	adds	r3, #1
 8011b2c:	643b      	str	r3, [r7, #64]	; 0x40
 8011b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b30:	2b03      	cmp	r3, #3
 8011b32:	d9e2      	bls.n	8011afa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011b34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b38:	2b04      	cmp	r3, #4
 8011b3a:	d101      	bne.n	8011b40 <find_volume+0x184>
 8011b3c:	2301      	movs	r3, #1
 8011b3e:	e17e      	b.n	8011e3e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011b40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b44:	2b01      	cmp	r3, #1
 8011b46:	d901      	bls.n	8011b4c <find_volume+0x190>
 8011b48:	230d      	movs	r3, #13
 8011b4a:	e178      	b.n	8011e3e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b4e:	3330      	adds	r3, #48	; 0x30
 8011b50:	330b      	adds	r3, #11
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7ff fdc6 	bl	80116e4 <ld_word>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b5e:	d001      	beq.n	8011b64 <find_volume+0x1a8>
 8011b60:	230d      	movs	r3, #13
 8011b62:	e16c      	b.n	8011e3e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b66:	3330      	adds	r3, #48	; 0x30
 8011b68:	3316      	adds	r3, #22
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7ff fdba 	bl	80116e4 <ld_word>
 8011b70:	4603      	mov	r3, r0
 8011b72:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d106      	bne.n	8011b88 <find_volume+0x1cc>
 8011b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b7c:	3330      	adds	r3, #48	; 0x30
 8011b7e:	3324      	adds	r3, #36	; 0x24
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7ff fdc7 	bl	8011714 <ld_dword>
 8011b86:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011b8c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b90:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8011b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b96:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b9a:	789b      	ldrb	r3, [r3, #2]
 8011b9c:	2b01      	cmp	r3, #1
 8011b9e:	d005      	beq.n	8011bac <find_volume+0x1f0>
 8011ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ba2:	789b      	ldrb	r3, [r3, #2]
 8011ba4:	2b02      	cmp	r3, #2
 8011ba6:	d001      	beq.n	8011bac <find_volume+0x1f0>
 8011ba8:	230d      	movs	r3, #13
 8011baa:	e148      	b.n	8011e3e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bae:	789b      	ldrb	r3, [r3, #2]
 8011bb0:	461a      	mov	r2, r3
 8011bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bb4:	fb02 f303 	mul.w	r3, r2, r3
 8011bb8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011bc0:	b29a      	uxth	r2, r3
 8011bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc8:	895b      	ldrh	r3, [r3, #10]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d008      	beq.n	8011be0 <find_volume+0x224>
 8011bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd0:	895b      	ldrh	r3, [r3, #10]
 8011bd2:	461a      	mov	r2, r3
 8011bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd6:	895b      	ldrh	r3, [r3, #10]
 8011bd8:	3b01      	subs	r3, #1
 8011bda:	4013      	ands	r3, r2
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d001      	beq.n	8011be4 <find_volume+0x228>
 8011be0:	230d      	movs	r3, #13
 8011be2:	e12c      	b.n	8011e3e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be6:	3330      	adds	r3, #48	; 0x30
 8011be8:	3311      	adds	r3, #17
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7ff fd7a 	bl	80116e4 <ld_word>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	461a      	mov	r2, r3
 8011bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bfa:	891b      	ldrh	r3, [r3, #8]
 8011bfc:	f003 030f 	and.w	r3, r3, #15
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d001      	beq.n	8011c0a <find_volume+0x24e>
 8011c06:	230d      	movs	r3, #13
 8011c08:	e119      	b.n	8011e3e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c0c:	3330      	adds	r3, #48	; 0x30
 8011c0e:	3313      	adds	r3, #19
 8011c10:	4618      	mov	r0, r3
 8011c12:	f7ff fd67 	bl	80116e4 <ld_word>
 8011c16:	4603      	mov	r3, r0
 8011c18:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d106      	bne.n	8011c2e <find_volume+0x272>
 8011c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c22:	3330      	adds	r3, #48	; 0x30
 8011c24:	3320      	adds	r3, #32
 8011c26:	4618      	mov	r0, r3
 8011c28:	f7ff fd74 	bl	8011714 <ld_dword>
 8011c2c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c30:	3330      	adds	r3, #48	; 0x30
 8011c32:	330e      	adds	r3, #14
 8011c34:	4618      	mov	r0, r3
 8011c36:	f7ff fd55 	bl	80116e4 <ld_word>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011c3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d101      	bne.n	8011c48 <find_volume+0x28c>
 8011c44:	230d      	movs	r3, #13
 8011c46:	e0fa      	b.n	8011e3e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011c48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c4c:	4413      	add	r3, r2
 8011c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c50:	8912      	ldrh	r2, [r2, #8]
 8011c52:	0912      	lsrs	r2, r2, #4
 8011c54:	b292      	uxth	r2, r2
 8011c56:	4413      	add	r3, r2
 8011c58:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011c5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c5e:	429a      	cmp	r2, r3
 8011c60:	d204      	bcs.n	8011c6c <find_volume+0x2b0>
 8011c62:	230d      	movs	r3, #13
 8011c64:	e0eb      	b.n	8011e3e <find_volume+0x482>
 8011c66:	bf00      	nop
 8011c68:	24008a30 	.word	0x24008a30
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c70:	1ad3      	subs	r3, r2, r3
 8011c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c74:	8952      	ldrh	r2, [r2, #10]
 8011c76:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c7a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d101      	bne.n	8011c86 <find_volume+0x2ca>
 8011c82:	230d      	movs	r3, #13
 8011c84:	e0db      	b.n	8011e3e <find_volume+0x482>
		fmt = FS_FAT32;
 8011c86:	2303      	movs	r3, #3
 8011c88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c8e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011c92:	4293      	cmp	r3, r2
 8011c94:	d802      	bhi.n	8011c9c <find_volume+0x2e0>
 8011c96:	2302      	movs	r3, #2
 8011c98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c9e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	d802      	bhi.n	8011cac <find_volume+0x2f0>
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cae:	1c9a      	adds	r2, r3, #2
 8011cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cb2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8011cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011cb8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011cba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cbe:	441a      	add	r2, r3
 8011cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8011cc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc8:	441a      	add	r2, r3
 8011cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ccc:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8011cce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011cd2:	2b03      	cmp	r3, #3
 8011cd4:	d11e      	bne.n	8011d14 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd8:	3330      	adds	r3, #48	; 0x30
 8011cda:	332a      	adds	r3, #42	; 0x2a
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7ff fd01 	bl	80116e4 <ld_word>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d001      	beq.n	8011cec <find_volume+0x330>
 8011ce8:	230d      	movs	r3, #13
 8011cea:	e0a8      	b.n	8011e3e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cee:	891b      	ldrh	r3, [r3, #8]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d001      	beq.n	8011cf8 <find_volume+0x33c>
 8011cf4:	230d      	movs	r3, #13
 8011cf6:	e0a2      	b.n	8011e3e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cfa:	3330      	adds	r3, #48	; 0x30
 8011cfc:	332c      	adds	r3, #44	; 0x2c
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f7ff fd08 	bl	8011714 <ld_dword>
 8011d04:	4602      	mov	r2, r0
 8011d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d08:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d0c:	695b      	ldr	r3, [r3, #20]
 8011d0e:	009b      	lsls	r3, r3, #2
 8011d10:	647b      	str	r3, [r7, #68]	; 0x44
 8011d12:	e01f      	b.n	8011d54 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d16:	891b      	ldrh	r3, [r3, #8]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d101      	bne.n	8011d20 <find_volume+0x364>
 8011d1c:	230d      	movs	r3, #13
 8011d1e:	e08e      	b.n	8011e3e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d22:	6a1a      	ldr	r2, [r3, #32]
 8011d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d26:	441a      	add	r2, r3
 8011d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d2a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011d2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d30:	2b02      	cmp	r3, #2
 8011d32:	d103      	bne.n	8011d3c <find_volume+0x380>
 8011d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d36:	695b      	ldr	r3, [r3, #20]
 8011d38:	005b      	lsls	r3, r3, #1
 8011d3a:	e00a      	b.n	8011d52 <find_volume+0x396>
 8011d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3e:	695a      	ldr	r2, [r3, #20]
 8011d40:	4613      	mov	r3, r2
 8011d42:	005b      	lsls	r3, r3, #1
 8011d44:	4413      	add	r3, r2
 8011d46:	085a      	lsrs	r2, r3, #1
 8011d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d4a:	695b      	ldr	r3, [r3, #20]
 8011d4c:	f003 0301 	and.w	r3, r3, #1
 8011d50:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011d52:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d56:	699a      	ldr	r2, [r3, #24]
 8011d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d5a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011d5e:	0a5b      	lsrs	r3, r3, #9
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d201      	bcs.n	8011d68 <find_volume+0x3ac>
 8011d64:	230d      	movs	r3, #13
 8011d66:	e06a      	b.n	8011e3e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8011d6e:	611a      	str	r2, [r3, #16]
 8011d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d72:	691a      	ldr	r2, [r3, #16]
 8011d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d76:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8011d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7a:	2280      	movs	r2, #128	; 0x80
 8011d7c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011d7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d82:	2b03      	cmp	r3, #3
 8011d84:	d149      	bne.n	8011e1a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d88:	3330      	adds	r3, #48	; 0x30
 8011d8a:	3330      	adds	r3, #48	; 0x30
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7ff fca9 	bl	80116e4 <ld_word>
 8011d92:	4603      	mov	r3, r0
 8011d94:	2b01      	cmp	r3, #1
 8011d96:	d140      	bne.n	8011e1a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	4619      	mov	r1, r3
 8011d9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011da0:	f7ff fd44 	bl	801182c <move_window>
 8011da4:	4603      	mov	r3, r0
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d137      	bne.n	8011e1a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8011daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dac:	2200      	movs	r2, #0
 8011dae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db2:	3330      	adds	r3, #48	; 0x30
 8011db4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011db8:	4618      	mov	r0, r3
 8011dba:	f7ff fc93 	bl	80116e4 <ld_word>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	461a      	mov	r2, r3
 8011dc2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d127      	bne.n	8011e1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dcc:	3330      	adds	r3, #48	; 0x30
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7ff fca0 	bl	8011714 <ld_dword>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	4a1c      	ldr	r2, [pc, #112]	; (8011e48 <find_volume+0x48c>)
 8011dd8:	4293      	cmp	r3, r2
 8011dda:	d11e      	bne.n	8011e1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dde:	3330      	adds	r3, #48	; 0x30
 8011de0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011de4:	4618      	mov	r0, r3
 8011de6:	f7ff fc95 	bl	8011714 <ld_dword>
 8011dea:	4603      	mov	r3, r0
 8011dec:	4a17      	ldr	r2, [pc, #92]	; (8011e4c <find_volume+0x490>)
 8011dee:	4293      	cmp	r3, r2
 8011df0:	d113      	bne.n	8011e1a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df4:	3330      	adds	r3, #48	; 0x30
 8011df6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f7ff fc8a 	bl	8011714 <ld_dword>
 8011e00:	4602      	mov	r2, r0
 8011e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e04:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e08:	3330      	adds	r3, #48	; 0x30
 8011e0a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f7ff fc80 	bl	8011714 <ld_dword>
 8011e14:	4602      	mov	r2, r0
 8011e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e18:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e1c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011e20:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011e22:	4b0b      	ldr	r3, [pc, #44]	; (8011e50 <find_volume+0x494>)
 8011e24:	881b      	ldrh	r3, [r3, #0]
 8011e26:	3301      	adds	r3, #1
 8011e28:	b29a      	uxth	r2, r3
 8011e2a:	4b09      	ldr	r3, [pc, #36]	; (8011e50 <find_volume+0x494>)
 8011e2c:	801a      	strh	r2, [r3, #0]
 8011e2e:	4b08      	ldr	r3, [pc, #32]	; (8011e50 <find_volume+0x494>)
 8011e30:	881a      	ldrh	r2, [r3, #0]
 8011e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e34:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011e36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011e38:	f7ff fc90 	bl	801175c <clear_lock>
#endif
	return FR_OK;
 8011e3c:	2300      	movs	r3, #0
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3758      	adds	r7, #88	; 0x58
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}
 8011e46:	bf00      	nop
 8011e48:	41615252 	.word	0x41615252
 8011e4c:	61417272 	.word	0x61417272
 8011e50:	24008a34 	.word	0x24008a34

08011e54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b088      	sub	sp, #32
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	60f8      	str	r0, [r7, #12]
 8011e5c:	60b9      	str	r1, [r7, #8]
 8011e5e:	4613      	mov	r3, r2
 8011e60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011e66:	f107 0310 	add.w	r3, r7, #16
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7ff fd0b 	bl	8011886 <get_ldnumber>
 8011e70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011e72:	69fb      	ldr	r3, [r7, #28]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	da01      	bge.n	8011e7c <f_mount+0x28>
 8011e78:	230b      	movs	r3, #11
 8011e7a:	e02b      	b.n	8011ed4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011e7c:	4a17      	ldr	r2, [pc, #92]	; (8011edc <f_mount+0x88>)
 8011e7e:	69fb      	ldr	r3, [r7, #28]
 8011e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e84:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011e86:	69bb      	ldr	r3, [r7, #24]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d005      	beq.n	8011e98 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011e8c:	69b8      	ldr	r0, [r7, #24]
 8011e8e:	f7ff fc65 	bl	801175c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011e92:	69bb      	ldr	r3, [r7, #24]
 8011e94:	2200      	movs	r2, #0
 8011e96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d002      	beq.n	8011ea4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011ea4:	68fa      	ldr	r2, [r7, #12]
 8011ea6:	490d      	ldr	r1, [pc, #52]	; (8011edc <f_mount+0x88>)
 8011ea8:	69fb      	ldr	r3, [r7, #28]
 8011eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d002      	beq.n	8011eba <f_mount+0x66>
 8011eb4:	79fb      	ldrb	r3, [r7, #7]
 8011eb6:	2b01      	cmp	r3, #1
 8011eb8:	d001      	beq.n	8011ebe <f_mount+0x6a>
 8011eba:	2300      	movs	r3, #0
 8011ebc:	e00a      	b.n	8011ed4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011ebe:	f107 010c 	add.w	r1, r7, #12
 8011ec2:	f107 0308 	add.w	r3, r7, #8
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f7ff fd77 	bl	80119bc <find_volume>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3720      	adds	r7, #32
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}
 8011edc:	24008a30 	.word	0x24008a30

08011ee0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011ee0:	b480      	push	{r7}
 8011ee2:	b087      	sub	sp, #28
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	60f8      	str	r0, [r7, #12]
 8011ee8:	60b9      	str	r1, [r7, #8]
 8011eea:	4613      	mov	r3, r2
 8011eec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011eee:	2301      	movs	r3, #1
 8011ef0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011ef6:	4b1f      	ldr	r3, [pc, #124]	; (8011f74 <FATFS_LinkDriverEx+0x94>)
 8011ef8:	7a5b      	ldrb	r3, [r3, #9]
 8011efa:	b2db      	uxtb	r3, r3
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d131      	bne.n	8011f64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011f00:	4b1c      	ldr	r3, [pc, #112]	; (8011f74 <FATFS_LinkDriverEx+0x94>)
 8011f02:	7a5b      	ldrb	r3, [r3, #9]
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	461a      	mov	r2, r3
 8011f08:	4b1a      	ldr	r3, [pc, #104]	; (8011f74 <FATFS_LinkDriverEx+0x94>)
 8011f0a:	2100      	movs	r1, #0
 8011f0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011f0e:	4b19      	ldr	r3, [pc, #100]	; (8011f74 <FATFS_LinkDriverEx+0x94>)
 8011f10:	7a5b      	ldrb	r3, [r3, #9]
 8011f12:	b2db      	uxtb	r3, r3
 8011f14:	4a17      	ldr	r2, [pc, #92]	; (8011f74 <FATFS_LinkDriverEx+0x94>)
 8011f16:	009b      	lsls	r3, r3, #2
 8011f18:	4413      	add	r3, r2
 8011f1a:	68fa      	ldr	r2, [r7, #12]
 8011f1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011f1e:	4b15      	ldr	r3, [pc, #84]	; (8011f74 <FATFS_LinkDriverEx+0x94>)
 8011f20:	7a5b      	ldrb	r3, [r3, #9]
 8011f22:	b2db      	uxtb	r3, r3
 8011f24:	461a      	mov	r2, r3
 8011f26:	4b13      	ldr	r3, [pc, #76]	; (8011f74 <FATFS_LinkDriverEx+0x94>)
 8011f28:	4413      	add	r3, r2
 8011f2a:	79fa      	ldrb	r2, [r7, #7]
 8011f2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011f2e:	4b11      	ldr	r3, [pc, #68]	; (8011f74 <FATFS_LinkDriverEx+0x94>)
 8011f30:	7a5b      	ldrb	r3, [r3, #9]
 8011f32:	b2db      	uxtb	r3, r3
 8011f34:	1c5a      	adds	r2, r3, #1
 8011f36:	b2d1      	uxtb	r1, r2
 8011f38:	4a0e      	ldr	r2, [pc, #56]	; (8011f74 <FATFS_LinkDriverEx+0x94>)
 8011f3a:	7251      	strb	r1, [r2, #9]
 8011f3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011f3e:	7dbb      	ldrb	r3, [r7, #22]
 8011f40:	3330      	adds	r3, #48	; 0x30
 8011f42:	b2da      	uxtb	r2, r3
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	3301      	adds	r3, #1
 8011f4c:	223a      	movs	r2, #58	; 0x3a
 8011f4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	3302      	adds	r3, #2
 8011f54:	222f      	movs	r2, #47	; 0x2f
 8011f56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	3303      	adds	r3, #3
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011f60:	2300      	movs	r3, #0
 8011f62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	371c      	adds	r7, #28
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f70:	4770      	bx	lr
 8011f72:	bf00      	nop
 8011f74:	24008a58 	.word	0x24008a58

08011f78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011f82:	2200      	movs	r2, #0
 8011f84:	6839      	ldr	r1, [r7, #0]
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f7ff ffaa 	bl	8011ee0 <FATFS_LinkDriverEx>
 8011f8c:	4603      	mov	r3, r0
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	3708      	adds	r7, #8
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}
	...

08011f98 <__errno>:
 8011f98:	4b01      	ldr	r3, [pc, #4]	; (8011fa0 <__errno+0x8>)
 8011f9a:	6818      	ldr	r0, [r3, #0]
 8011f9c:	4770      	bx	lr
 8011f9e:	bf00      	nop
 8011fa0:	24000018 	.word	0x24000018

08011fa4 <__libc_init_array>:
 8011fa4:	b570      	push	{r4, r5, r6, lr}
 8011fa6:	4d0d      	ldr	r5, [pc, #52]	; (8011fdc <__libc_init_array+0x38>)
 8011fa8:	4c0d      	ldr	r4, [pc, #52]	; (8011fe0 <__libc_init_array+0x3c>)
 8011faa:	1b64      	subs	r4, r4, r5
 8011fac:	10a4      	asrs	r4, r4, #2
 8011fae:	2600      	movs	r6, #0
 8011fb0:	42a6      	cmp	r6, r4
 8011fb2:	d109      	bne.n	8011fc8 <__libc_init_array+0x24>
 8011fb4:	4d0b      	ldr	r5, [pc, #44]	; (8011fe4 <__libc_init_array+0x40>)
 8011fb6:	4c0c      	ldr	r4, [pc, #48]	; (8011fe8 <__libc_init_array+0x44>)
 8011fb8:	f000 fc8e 	bl	80128d8 <_init>
 8011fbc:	1b64      	subs	r4, r4, r5
 8011fbe:	10a4      	asrs	r4, r4, #2
 8011fc0:	2600      	movs	r6, #0
 8011fc2:	42a6      	cmp	r6, r4
 8011fc4:	d105      	bne.n	8011fd2 <__libc_init_array+0x2e>
 8011fc6:	bd70      	pop	{r4, r5, r6, pc}
 8011fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8011fcc:	4798      	blx	r3
 8011fce:	3601      	adds	r6, #1
 8011fd0:	e7ee      	b.n	8011fb0 <__libc_init_array+0xc>
 8011fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8011fd6:	4798      	blx	r3
 8011fd8:	3601      	adds	r6, #1
 8011fda:	e7f2      	b.n	8011fc2 <__libc_init_array+0x1e>
 8011fdc:	080129d0 	.word	0x080129d0
 8011fe0:	080129d0 	.word	0x080129d0
 8011fe4:	080129d0 	.word	0x080129d0
 8011fe8:	080129d4 	.word	0x080129d4

08011fec <memset>:
 8011fec:	4402      	add	r2, r0
 8011fee:	4603      	mov	r3, r0
 8011ff0:	4293      	cmp	r3, r2
 8011ff2:	d100      	bne.n	8011ff6 <memset+0xa>
 8011ff4:	4770      	bx	lr
 8011ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8011ffa:	e7f9      	b.n	8011ff0 <memset+0x4>

08011ffc <siprintf>:
 8011ffc:	b40e      	push	{r1, r2, r3}
 8011ffe:	b500      	push	{lr}
 8012000:	b09c      	sub	sp, #112	; 0x70
 8012002:	ab1d      	add	r3, sp, #116	; 0x74
 8012004:	9002      	str	r0, [sp, #8]
 8012006:	9006      	str	r0, [sp, #24]
 8012008:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801200c:	4809      	ldr	r0, [pc, #36]	; (8012034 <siprintf+0x38>)
 801200e:	9107      	str	r1, [sp, #28]
 8012010:	9104      	str	r1, [sp, #16]
 8012012:	4909      	ldr	r1, [pc, #36]	; (8012038 <siprintf+0x3c>)
 8012014:	f853 2b04 	ldr.w	r2, [r3], #4
 8012018:	9105      	str	r1, [sp, #20]
 801201a:	6800      	ldr	r0, [r0, #0]
 801201c:	9301      	str	r3, [sp, #4]
 801201e:	a902      	add	r1, sp, #8
 8012020:	f000 f868 	bl	80120f4 <_svfiprintf_r>
 8012024:	9b02      	ldr	r3, [sp, #8]
 8012026:	2200      	movs	r2, #0
 8012028:	701a      	strb	r2, [r3, #0]
 801202a:	b01c      	add	sp, #112	; 0x70
 801202c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012030:	b003      	add	sp, #12
 8012032:	4770      	bx	lr
 8012034:	24000018 	.word	0x24000018
 8012038:	ffff0208 	.word	0xffff0208

0801203c <__ssputs_r>:
 801203c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012040:	688e      	ldr	r6, [r1, #8]
 8012042:	429e      	cmp	r6, r3
 8012044:	4682      	mov	sl, r0
 8012046:	460c      	mov	r4, r1
 8012048:	4690      	mov	r8, r2
 801204a:	461f      	mov	r7, r3
 801204c:	d838      	bhi.n	80120c0 <__ssputs_r+0x84>
 801204e:	898a      	ldrh	r2, [r1, #12]
 8012050:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012054:	d032      	beq.n	80120bc <__ssputs_r+0x80>
 8012056:	6825      	ldr	r5, [r4, #0]
 8012058:	6909      	ldr	r1, [r1, #16]
 801205a:	eba5 0901 	sub.w	r9, r5, r1
 801205e:	6965      	ldr	r5, [r4, #20]
 8012060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012064:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012068:	3301      	adds	r3, #1
 801206a:	444b      	add	r3, r9
 801206c:	106d      	asrs	r5, r5, #1
 801206e:	429d      	cmp	r5, r3
 8012070:	bf38      	it	cc
 8012072:	461d      	movcc	r5, r3
 8012074:	0553      	lsls	r3, r2, #21
 8012076:	d531      	bpl.n	80120dc <__ssputs_r+0xa0>
 8012078:	4629      	mov	r1, r5
 801207a:	f000 fb63 	bl	8012744 <_malloc_r>
 801207e:	4606      	mov	r6, r0
 8012080:	b950      	cbnz	r0, 8012098 <__ssputs_r+0x5c>
 8012082:	230c      	movs	r3, #12
 8012084:	f8ca 3000 	str.w	r3, [sl]
 8012088:	89a3      	ldrh	r3, [r4, #12]
 801208a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801208e:	81a3      	strh	r3, [r4, #12]
 8012090:	f04f 30ff 	mov.w	r0, #4294967295
 8012094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012098:	6921      	ldr	r1, [r4, #16]
 801209a:	464a      	mov	r2, r9
 801209c:	f000 fabe 	bl	801261c <memcpy>
 80120a0:	89a3      	ldrh	r3, [r4, #12]
 80120a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80120a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120aa:	81a3      	strh	r3, [r4, #12]
 80120ac:	6126      	str	r6, [r4, #16]
 80120ae:	6165      	str	r5, [r4, #20]
 80120b0:	444e      	add	r6, r9
 80120b2:	eba5 0509 	sub.w	r5, r5, r9
 80120b6:	6026      	str	r6, [r4, #0]
 80120b8:	60a5      	str	r5, [r4, #8]
 80120ba:	463e      	mov	r6, r7
 80120bc:	42be      	cmp	r6, r7
 80120be:	d900      	bls.n	80120c2 <__ssputs_r+0x86>
 80120c0:	463e      	mov	r6, r7
 80120c2:	6820      	ldr	r0, [r4, #0]
 80120c4:	4632      	mov	r2, r6
 80120c6:	4641      	mov	r1, r8
 80120c8:	f000 fab6 	bl	8012638 <memmove>
 80120cc:	68a3      	ldr	r3, [r4, #8]
 80120ce:	1b9b      	subs	r3, r3, r6
 80120d0:	60a3      	str	r3, [r4, #8]
 80120d2:	6823      	ldr	r3, [r4, #0]
 80120d4:	4433      	add	r3, r6
 80120d6:	6023      	str	r3, [r4, #0]
 80120d8:	2000      	movs	r0, #0
 80120da:	e7db      	b.n	8012094 <__ssputs_r+0x58>
 80120dc:	462a      	mov	r2, r5
 80120de:	f000 fba5 	bl	801282c <_realloc_r>
 80120e2:	4606      	mov	r6, r0
 80120e4:	2800      	cmp	r0, #0
 80120e6:	d1e1      	bne.n	80120ac <__ssputs_r+0x70>
 80120e8:	6921      	ldr	r1, [r4, #16]
 80120ea:	4650      	mov	r0, sl
 80120ec:	f000 fabe 	bl	801266c <_free_r>
 80120f0:	e7c7      	b.n	8012082 <__ssputs_r+0x46>
	...

080120f4 <_svfiprintf_r>:
 80120f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120f8:	4698      	mov	r8, r3
 80120fa:	898b      	ldrh	r3, [r1, #12]
 80120fc:	061b      	lsls	r3, r3, #24
 80120fe:	b09d      	sub	sp, #116	; 0x74
 8012100:	4607      	mov	r7, r0
 8012102:	460d      	mov	r5, r1
 8012104:	4614      	mov	r4, r2
 8012106:	d50e      	bpl.n	8012126 <_svfiprintf_r+0x32>
 8012108:	690b      	ldr	r3, [r1, #16]
 801210a:	b963      	cbnz	r3, 8012126 <_svfiprintf_r+0x32>
 801210c:	2140      	movs	r1, #64	; 0x40
 801210e:	f000 fb19 	bl	8012744 <_malloc_r>
 8012112:	6028      	str	r0, [r5, #0]
 8012114:	6128      	str	r0, [r5, #16]
 8012116:	b920      	cbnz	r0, 8012122 <_svfiprintf_r+0x2e>
 8012118:	230c      	movs	r3, #12
 801211a:	603b      	str	r3, [r7, #0]
 801211c:	f04f 30ff 	mov.w	r0, #4294967295
 8012120:	e0d1      	b.n	80122c6 <_svfiprintf_r+0x1d2>
 8012122:	2340      	movs	r3, #64	; 0x40
 8012124:	616b      	str	r3, [r5, #20]
 8012126:	2300      	movs	r3, #0
 8012128:	9309      	str	r3, [sp, #36]	; 0x24
 801212a:	2320      	movs	r3, #32
 801212c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012130:	f8cd 800c 	str.w	r8, [sp, #12]
 8012134:	2330      	movs	r3, #48	; 0x30
 8012136:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80122e0 <_svfiprintf_r+0x1ec>
 801213a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801213e:	f04f 0901 	mov.w	r9, #1
 8012142:	4623      	mov	r3, r4
 8012144:	469a      	mov	sl, r3
 8012146:	f813 2b01 	ldrb.w	r2, [r3], #1
 801214a:	b10a      	cbz	r2, 8012150 <_svfiprintf_r+0x5c>
 801214c:	2a25      	cmp	r2, #37	; 0x25
 801214e:	d1f9      	bne.n	8012144 <_svfiprintf_r+0x50>
 8012150:	ebba 0b04 	subs.w	fp, sl, r4
 8012154:	d00b      	beq.n	801216e <_svfiprintf_r+0x7a>
 8012156:	465b      	mov	r3, fp
 8012158:	4622      	mov	r2, r4
 801215a:	4629      	mov	r1, r5
 801215c:	4638      	mov	r0, r7
 801215e:	f7ff ff6d 	bl	801203c <__ssputs_r>
 8012162:	3001      	adds	r0, #1
 8012164:	f000 80aa 	beq.w	80122bc <_svfiprintf_r+0x1c8>
 8012168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801216a:	445a      	add	r2, fp
 801216c:	9209      	str	r2, [sp, #36]	; 0x24
 801216e:	f89a 3000 	ldrb.w	r3, [sl]
 8012172:	2b00      	cmp	r3, #0
 8012174:	f000 80a2 	beq.w	80122bc <_svfiprintf_r+0x1c8>
 8012178:	2300      	movs	r3, #0
 801217a:	f04f 32ff 	mov.w	r2, #4294967295
 801217e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012182:	f10a 0a01 	add.w	sl, sl, #1
 8012186:	9304      	str	r3, [sp, #16]
 8012188:	9307      	str	r3, [sp, #28]
 801218a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801218e:	931a      	str	r3, [sp, #104]	; 0x68
 8012190:	4654      	mov	r4, sl
 8012192:	2205      	movs	r2, #5
 8012194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012198:	4851      	ldr	r0, [pc, #324]	; (80122e0 <_svfiprintf_r+0x1ec>)
 801219a:	f7ee f8a9 	bl	80002f0 <memchr>
 801219e:	9a04      	ldr	r2, [sp, #16]
 80121a0:	b9d8      	cbnz	r0, 80121da <_svfiprintf_r+0xe6>
 80121a2:	06d0      	lsls	r0, r2, #27
 80121a4:	bf44      	itt	mi
 80121a6:	2320      	movmi	r3, #32
 80121a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121ac:	0711      	lsls	r1, r2, #28
 80121ae:	bf44      	itt	mi
 80121b0:	232b      	movmi	r3, #43	; 0x2b
 80121b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121b6:	f89a 3000 	ldrb.w	r3, [sl]
 80121ba:	2b2a      	cmp	r3, #42	; 0x2a
 80121bc:	d015      	beq.n	80121ea <_svfiprintf_r+0xf6>
 80121be:	9a07      	ldr	r2, [sp, #28]
 80121c0:	4654      	mov	r4, sl
 80121c2:	2000      	movs	r0, #0
 80121c4:	f04f 0c0a 	mov.w	ip, #10
 80121c8:	4621      	mov	r1, r4
 80121ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121ce:	3b30      	subs	r3, #48	; 0x30
 80121d0:	2b09      	cmp	r3, #9
 80121d2:	d94e      	bls.n	8012272 <_svfiprintf_r+0x17e>
 80121d4:	b1b0      	cbz	r0, 8012204 <_svfiprintf_r+0x110>
 80121d6:	9207      	str	r2, [sp, #28]
 80121d8:	e014      	b.n	8012204 <_svfiprintf_r+0x110>
 80121da:	eba0 0308 	sub.w	r3, r0, r8
 80121de:	fa09 f303 	lsl.w	r3, r9, r3
 80121e2:	4313      	orrs	r3, r2
 80121e4:	9304      	str	r3, [sp, #16]
 80121e6:	46a2      	mov	sl, r4
 80121e8:	e7d2      	b.n	8012190 <_svfiprintf_r+0x9c>
 80121ea:	9b03      	ldr	r3, [sp, #12]
 80121ec:	1d19      	adds	r1, r3, #4
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	9103      	str	r1, [sp, #12]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	bfbb      	ittet	lt
 80121f6:	425b      	neglt	r3, r3
 80121f8:	f042 0202 	orrlt.w	r2, r2, #2
 80121fc:	9307      	strge	r3, [sp, #28]
 80121fe:	9307      	strlt	r3, [sp, #28]
 8012200:	bfb8      	it	lt
 8012202:	9204      	strlt	r2, [sp, #16]
 8012204:	7823      	ldrb	r3, [r4, #0]
 8012206:	2b2e      	cmp	r3, #46	; 0x2e
 8012208:	d10c      	bne.n	8012224 <_svfiprintf_r+0x130>
 801220a:	7863      	ldrb	r3, [r4, #1]
 801220c:	2b2a      	cmp	r3, #42	; 0x2a
 801220e:	d135      	bne.n	801227c <_svfiprintf_r+0x188>
 8012210:	9b03      	ldr	r3, [sp, #12]
 8012212:	1d1a      	adds	r2, r3, #4
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	9203      	str	r2, [sp, #12]
 8012218:	2b00      	cmp	r3, #0
 801221a:	bfb8      	it	lt
 801221c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012220:	3402      	adds	r4, #2
 8012222:	9305      	str	r3, [sp, #20]
 8012224:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80122f0 <_svfiprintf_r+0x1fc>
 8012228:	7821      	ldrb	r1, [r4, #0]
 801222a:	2203      	movs	r2, #3
 801222c:	4650      	mov	r0, sl
 801222e:	f7ee f85f 	bl	80002f0 <memchr>
 8012232:	b140      	cbz	r0, 8012246 <_svfiprintf_r+0x152>
 8012234:	2340      	movs	r3, #64	; 0x40
 8012236:	eba0 000a 	sub.w	r0, r0, sl
 801223a:	fa03 f000 	lsl.w	r0, r3, r0
 801223e:	9b04      	ldr	r3, [sp, #16]
 8012240:	4303      	orrs	r3, r0
 8012242:	3401      	adds	r4, #1
 8012244:	9304      	str	r3, [sp, #16]
 8012246:	f814 1b01 	ldrb.w	r1, [r4], #1
 801224a:	4826      	ldr	r0, [pc, #152]	; (80122e4 <_svfiprintf_r+0x1f0>)
 801224c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012250:	2206      	movs	r2, #6
 8012252:	f7ee f84d 	bl	80002f0 <memchr>
 8012256:	2800      	cmp	r0, #0
 8012258:	d038      	beq.n	80122cc <_svfiprintf_r+0x1d8>
 801225a:	4b23      	ldr	r3, [pc, #140]	; (80122e8 <_svfiprintf_r+0x1f4>)
 801225c:	bb1b      	cbnz	r3, 80122a6 <_svfiprintf_r+0x1b2>
 801225e:	9b03      	ldr	r3, [sp, #12]
 8012260:	3307      	adds	r3, #7
 8012262:	f023 0307 	bic.w	r3, r3, #7
 8012266:	3308      	adds	r3, #8
 8012268:	9303      	str	r3, [sp, #12]
 801226a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801226c:	4433      	add	r3, r6
 801226e:	9309      	str	r3, [sp, #36]	; 0x24
 8012270:	e767      	b.n	8012142 <_svfiprintf_r+0x4e>
 8012272:	fb0c 3202 	mla	r2, ip, r2, r3
 8012276:	460c      	mov	r4, r1
 8012278:	2001      	movs	r0, #1
 801227a:	e7a5      	b.n	80121c8 <_svfiprintf_r+0xd4>
 801227c:	2300      	movs	r3, #0
 801227e:	3401      	adds	r4, #1
 8012280:	9305      	str	r3, [sp, #20]
 8012282:	4619      	mov	r1, r3
 8012284:	f04f 0c0a 	mov.w	ip, #10
 8012288:	4620      	mov	r0, r4
 801228a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801228e:	3a30      	subs	r2, #48	; 0x30
 8012290:	2a09      	cmp	r2, #9
 8012292:	d903      	bls.n	801229c <_svfiprintf_r+0x1a8>
 8012294:	2b00      	cmp	r3, #0
 8012296:	d0c5      	beq.n	8012224 <_svfiprintf_r+0x130>
 8012298:	9105      	str	r1, [sp, #20]
 801229a:	e7c3      	b.n	8012224 <_svfiprintf_r+0x130>
 801229c:	fb0c 2101 	mla	r1, ip, r1, r2
 80122a0:	4604      	mov	r4, r0
 80122a2:	2301      	movs	r3, #1
 80122a4:	e7f0      	b.n	8012288 <_svfiprintf_r+0x194>
 80122a6:	ab03      	add	r3, sp, #12
 80122a8:	9300      	str	r3, [sp, #0]
 80122aa:	462a      	mov	r2, r5
 80122ac:	4b0f      	ldr	r3, [pc, #60]	; (80122ec <_svfiprintf_r+0x1f8>)
 80122ae:	a904      	add	r1, sp, #16
 80122b0:	4638      	mov	r0, r7
 80122b2:	f3af 8000 	nop.w
 80122b6:	1c42      	adds	r2, r0, #1
 80122b8:	4606      	mov	r6, r0
 80122ba:	d1d6      	bne.n	801226a <_svfiprintf_r+0x176>
 80122bc:	89ab      	ldrh	r3, [r5, #12]
 80122be:	065b      	lsls	r3, r3, #25
 80122c0:	f53f af2c 	bmi.w	801211c <_svfiprintf_r+0x28>
 80122c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122c6:	b01d      	add	sp, #116	; 0x74
 80122c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122cc:	ab03      	add	r3, sp, #12
 80122ce:	9300      	str	r3, [sp, #0]
 80122d0:	462a      	mov	r2, r5
 80122d2:	4b06      	ldr	r3, [pc, #24]	; (80122ec <_svfiprintf_r+0x1f8>)
 80122d4:	a904      	add	r1, sp, #16
 80122d6:	4638      	mov	r0, r7
 80122d8:	f000 f87a 	bl	80123d0 <_printf_i>
 80122dc:	e7eb      	b.n	80122b6 <_svfiprintf_r+0x1c2>
 80122de:	bf00      	nop
 80122e0:	08012994 	.word	0x08012994
 80122e4:	0801299e 	.word	0x0801299e
 80122e8:	00000000 	.word	0x00000000
 80122ec:	0801203d 	.word	0x0801203d
 80122f0:	0801299a 	.word	0x0801299a

080122f4 <_printf_common>:
 80122f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122f8:	4616      	mov	r6, r2
 80122fa:	4699      	mov	r9, r3
 80122fc:	688a      	ldr	r2, [r1, #8]
 80122fe:	690b      	ldr	r3, [r1, #16]
 8012300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012304:	4293      	cmp	r3, r2
 8012306:	bfb8      	it	lt
 8012308:	4613      	movlt	r3, r2
 801230a:	6033      	str	r3, [r6, #0]
 801230c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012310:	4607      	mov	r7, r0
 8012312:	460c      	mov	r4, r1
 8012314:	b10a      	cbz	r2, 801231a <_printf_common+0x26>
 8012316:	3301      	adds	r3, #1
 8012318:	6033      	str	r3, [r6, #0]
 801231a:	6823      	ldr	r3, [r4, #0]
 801231c:	0699      	lsls	r1, r3, #26
 801231e:	bf42      	ittt	mi
 8012320:	6833      	ldrmi	r3, [r6, #0]
 8012322:	3302      	addmi	r3, #2
 8012324:	6033      	strmi	r3, [r6, #0]
 8012326:	6825      	ldr	r5, [r4, #0]
 8012328:	f015 0506 	ands.w	r5, r5, #6
 801232c:	d106      	bne.n	801233c <_printf_common+0x48>
 801232e:	f104 0a19 	add.w	sl, r4, #25
 8012332:	68e3      	ldr	r3, [r4, #12]
 8012334:	6832      	ldr	r2, [r6, #0]
 8012336:	1a9b      	subs	r3, r3, r2
 8012338:	42ab      	cmp	r3, r5
 801233a:	dc26      	bgt.n	801238a <_printf_common+0x96>
 801233c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012340:	1e13      	subs	r3, r2, #0
 8012342:	6822      	ldr	r2, [r4, #0]
 8012344:	bf18      	it	ne
 8012346:	2301      	movne	r3, #1
 8012348:	0692      	lsls	r2, r2, #26
 801234a:	d42b      	bmi.n	80123a4 <_printf_common+0xb0>
 801234c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012350:	4649      	mov	r1, r9
 8012352:	4638      	mov	r0, r7
 8012354:	47c0      	blx	r8
 8012356:	3001      	adds	r0, #1
 8012358:	d01e      	beq.n	8012398 <_printf_common+0xa4>
 801235a:	6823      	ldr	r3, [r4, #0]
 801235c:	68e5      	ldr	r5, [r4, #12]
 801235e:	6832      	ldr	r2, [r6, #0]
 8012360:	f003 0306 	and.w	r3, r3, #6
 8012364:	2b04      	cmp	r3, #4
 8012366:	bf08      	it	eq
 8012368:	1aad      	subeq	r5, r5, r2
 801236a:	68a3      	ldr	r3, [r4, #8]
 801236c:	6922      	ldr	r2, [r4, #16]
 801236e:	bf0c      	ite	eq
 8012370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012374:	2500      	movne	r5, #0
 8012376:	4293      	cmp	r3, r2
 8012378:	bfc4      	itt	gt
 801237a:	1a9b      	subgt	r3, r3, r2
 801237c:	18ed      	addgt	r5, r5, r3
 801237e:	2600      	movs	r6, #0
 8012380:	341a      	adds	r4, #26
 8012382:	42b5      	cmp	r5, r6
 8012384:	d11a      	bne.n	80123bc <_printf_common+0xc8>
 8012386:	2000      	movs	r0, #0
 8012388:	e008      	b.n	801239c <_printf_common+0xa8>
 801238a:	2301      	movs	r3, #1
 801238c:	4652      	mov	r2, sl
 801238e:	4649      	mov	r1, r9
 8012390:	4638      	mov	r0, r7
 8012392:	47c0      	blx	r8
 8012394:	3001      	adds	r0, #1
 8012396:	d103      	bne.n	80123a0 <_printf_common+0xac>
 8012398:	f04f 30ff 	mov.w	r0, #4294967295
 801239c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123a0:	3501      	adds	r5, #1
 80123a2:	e7c6      	b.n	8012332 <_printf_common+0x3e>
 80123a4:	18e1      	adds	r1, r4, r3
 80123a6:	1c5a      	adds	r2, r3, #1
 80123a8:	2030      	movs	r0, #48	; 0x30
 80123aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80123ae:	4422      	add	r2, r4
 80123b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80123b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80123b8:	3302      	adds	r3, #2
 80123ba:	e7c7      	b.n	801234c <_printf_common+0x58>
 80123bc:	2301      	movs	r3, #1
 80123be:	4622      	mov	r2, r4
 80123c0:	4649      	mov	r1, r9
 80123c2:	4638      	mov	r0, r7
 80123c4:	47c0      	blx	r8
 80123c6:	3001      	adds	r0, #1
 80123c8:	d0e6      	beq.n	8012398 <_printf_common+0xa4>
 80123ca:	3601      	adds	r6, #1
 80123cc:	e7d9      	b.n	8012382 <_printf_common+0x8e>
	...

080123d0 <_printf_i>:
 80123d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80123d4:	7e0f      	ldrb	r7, [r1, #24]
 80123d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80123d8:	2f78      	cmp	r7, #120	; 0x78
 80123da:	4691      	mov	r9, r2
 80123dc:	4680      	mov	r8, r0
 80123de:	460c      	mov	r4, r1
 80123e0:	469a      	mov	sl, r3
 80123e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80123e6:	d807      	bhi.n	80123f8 <_printf_i+0x28>
 80123e8:	2f62      	cmp	r7, #98	; 0x62
 80123ea:	d80a      	bhi.n	8012402 <_printf_i+0x32>
 80123ec:	2f00      	cmp	r7, #0
 80123ee:	f000 80d8 	beq.w	80125a2 <_printf_i+0x1d2>
 80123f2:	2f58      	cmp	r7, #88	; 0x58
 80123f4:	f000 80a3 	beq.w	801253e <_printf_i+0x16e>
 80123f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80123fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012400:	e03a      	b.n	8012478 <_printf_i+0xa8>
 8012402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012406:	2b15      	cmp	r3, #21
 8012408:	d8f6      	bhi.n	80123f8 <_printf_i+0x28>
 801240a:	a101      	add	r1, pc, #4	; (adr r1, 8012410 <_printf_i+0x40>)
 801240c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012410:	08012469 	.word	0x08012469
 8012414:	0801247d 	.word	0x0801247d
 8012418:	080123f9 	.word	0x080123f9
 801241c:	080123f9 	.word	0x080123f9
 8012420:	080123f9 	.word	0x080123f9
 8012424:	080123f9 	.word	0x080123f9
 8012428:	0801247d 	.word	0x0801247d
 801242c:	080123f9 	.word	0x080123f9
 8012430:	080123f9 	.word	0x080123f9
 8012434:	080123f9 	.word	0x080123f9
 8012438:	080123f9 	.word	0x080123f9
 801243c:	08012589 	.word	0x08012589
 8012440:	080124ad 	.word	0x080124ad
 8012444:	0801256b 	.word	0x0801256b
 8012448:	080123f9 	.word	0x080123f9
 801244c:	080123f9 	.word	0x080123f9
 8012450:	080125ab 	.word	0x080125ab
 8012454:	080123f9 	.word	0x080123f9
 8012458:	080124ad 	.word	0x080124ad
 801245c:	080123f9 	.word	0x080123f9
 8012460:	080123f9 	.word	0x080123f9
 8012464:	08012573 	.word	0x08012573
 8012468:	682b      	ldr	r3, [r5, #0]
 801246a:	1d1a      	adds	r2, r3, #4
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	602a      	str	r2, [r5, #0]
 8012470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012478:	2301      	movs	r3, #1
 801247a:	e0a3      	b.n	80125c4 <_printf_i+0x1f4>
 801247c:	6820      	ldr	r0, [r4, #0]
 801247e:	6829      	ldr	r1, [r5, #0]
 8012480:	0606      	lsls	r6, r0, #24
 8012482:	f101 0304 	add.w	r3, r1, #4
 8012486:	d50a      	bpl.n	801249e <_printf_i+0xce>
 8012488:	680e      	ldr	r6, [r1, #0]
 801248a:	602b      	str	r3, [r5, #0]
 801248c:	2e00      	cmp	r6, #0
 801248e:	da03      	bge.n	8012498 <_printf_i+0xc8>
 8012490:	232d      	movs	r3, #45	; 0x2d
 8012492:	4276      	negs	r6, r6
 8012494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012498:	485e      	ldr	r0, [pc, #376]	; (8012614 <_printf_i+0x244>)
 801249a:	230a      	movs	r3, #10
 801249c:	e019      	b.n	80124d2 <_printf_i+0x102>
 801249e:	680e      	ldr	r6, [r1, #0]
 80124a0:	602b      	str	r3, [r5, #0]
 80124a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80124a6:	bf18      	it	ne
 80124a8:	b236      	sxthne	r6, r6
 80124aa:	e7ef      	b.n	801248c <_printf_i+0xbc>
 80124ac:	682b      	ldr	r3, [r5, #0]
 80124ae:	6820      	ldr	r0, [r4, #0]
 80124b0:	1d19      	adds	r1, r3, #4
 80124b2:	6029      	str	r1, [r5, #0]
 80124b4:	0601      	lsls	r1, r0, #24
 80124b6:	d501      	bpl.n	80124bc <_printf_i+0xec>
 80124b8:	681e      	ldr	r6, [r3, #0]
 80124ba:	e002      	b.n	80124c2 <_printf_i+0xf2>
 80124bc:	0646      	lsls	r6, r0, #25
 80124be:	d5fb      	bpl.n	80124b8 <_printf_i+0xe8>
 80124c0:	881e      	ldrh	r6, [r3, #0]
 80124c2:	4854      	ldr	r0, [pc, #336]	; (8012614 <_printf_i+0x244>)
 80124c4:	2f6f      	cmp	r7, #111	; 0x6f
 80124c6:	bf0c      	ite	eq
 80124c8:	2308      	moveq	r3, #8
 80124ca:	230a      	movne	r3, #10
 80124cc:	2100      	movs	r1, #0
 80124ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80124d2:	6865      	ldr	r5, [r4, #4]
 80124d4:	60a5      	str	r5, [r4, #8]
 80124d6:	2d00      	cmp	r5, #0
 80124d8:	bfa2      	ittt	ge
 80124da:	6821      	ldrge	r1, [r4, #0]
 80124dc:	f021 0104 	bicge.w	r1, r1, #4
 80124e0:	6021      	strge	r1, [r4, #0]
 80124e2:	b90e      	cbnz	r6, 80124e8 <_printf_i+0x118>
 80124e4:	2d00      	cmp	r5, #0
 80124e6:	d04d      	beq.n	8012584 <_printf_i+0x1b4>
 80124e8:	4615      	mov	r5, r2
 80124ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80124ee:	fb03 6711 	mls	r7, r3, r1, r6
 80124f2:	5dc7      	ldrb	r7, [r0, r7]
 80124f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80124f8:	4637      	mov	r7, r6
 80124fa:	42bb      	cmp	r3, r7
 80124fc:	460e      	mov	r6, r1
 80124fe:	d9f4      	bls.n	80124ea <_printf_i+0x11a>
 8012500:	2b08      	cmp	r3, #8
 8012502:	d10b      	bne.n	801251c <_printf_i+0x14c>
 8012504:	6823      	ldr	r3, [r4, #0]
 8012506:	07de      	lsls	r6, r3, #31
 8012508:	d508      	bpl.n	801251c <_printf_i+0x14c>
 801250a:	6923      	ldr	r3, [r4, #16]
 801250c:	6861      	ldr	r1, [r4, #4]
 801250e:	4299      	cmp	r1, r3
 8012510:	bfde      	ittt	le
 8012512:	2330      	movle	r3, #48	; 0x30
 8012514:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012518:	f105 35ff 	addle.w	r5, r5, #4294967295
 801251c:	1b52      	subs	r2, r2, r5
 801251e:	6122      	str	r2, [r4, #16]
 8012520:	f8cd a000 	str.w	sl, [sp]
 8012524:	464b      	mov	r3, r9
 8012526:	aa03      	add	r2, sp, #12
 8012528:	4621      	mov	r1, r4
 801252a:	4640      	mov	r0, r8
 801252c:	f7ff fee2 	bl	80122f4 <_printf_common>
 8012530:	3001      	adds	r0, #1
 8012532:	d14c      	bne.n	80125ce <_printf_i+0x1fe>
 8012534:	f04f 30ff 	mov.w	r0, #4294967295
 8012538:	b004      	add	sp, #16
 801253a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801253e:	4835      	ldr	r0, [pc, #212]	; (8012614 <_printf_i+0x244>)
 8012540:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012544:	6829      	ldr	r1, [r5, #0]
 8012546:	6823      	ldr	r3, [r4, #0]
 8012548:	f851 6b04 	ldr.w	r6, [r1], #4
 801254c:	6029      	str	r1, [r5, #0]
 801254e:	061d      	lsls	r5, r3, #24
 8012550:	d514      	bpl.n	801257c <_printf_i+0x1ac>
 8012552:	07df      	lsls	r7, r3, #31
 8012554:	bf44      	itt	mi
 8012556:	f043 0320 	orrmi.w	r3, r3, #32
 801255a:	6023      	strmi	r3, [r4, #0]
 801255c:	b91e      	cbnz	r6, 8012566 <_printf_i+0x196>
 801255e:	6823      	ldr	r3, [r4, #0]
 8012560:	f023 0320 	bic.w	r3, r3, #32
 8012564:	6023      	str	r3, [r4, #0]
 8012566:	2310      	movs	r3, #16
 8012568:	e7b0      	b.n	80124cc <_printf_i+0xfc>
 801256a:	6823      	ldr	r3, [r4, #0]
 801256c:	f043 0320 	orr.w	r3, r3, #32
 8012570:	6023      	str	r3, [r4, #0]
 8012572:	2378      	movs	r3, #120	; 0x78
 8012574:	4828      	ldr	r0, [pc, #160]	; (8012618 <_printf_i+0x248>)
 8012576:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801257a:	e7e3      	b.n	8012544 <_printf_i+0x174>
 801257c:	0659      	lsls	r1, r3, #25
 801257e:	bf48      	it	mi
 8012580:	b2b6      	uxthmi	r6, r6
 8012582:	e7e6      	b.n	8012552 <_printf_i+0x182>
 8012584:	4615      	mov	r5, r2
 8012586:	e7bb      	b.n	8012500 <_printf_i+0x130>
 8012588:	682b      	ldr	r3, [r5, #0]
 801258a:	6826      	ldr	r6, [r4, #0]
 801258c:	6961      	ldr	r1, [r4, #20]
 801258e:	1d18      	adds	r0, r3, #4
 8012590:	6028      	str	r0, [r5, #0]
 8012592:	0635      	lsls	r5, r6, #24
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	d501      	bpl.n	801259c <_printf_i+0x1cc>
 8012598:	6019      	str	r1, [r3, #0]
 801259a:	e002      	b.n	80125a2 <_printf_i+0x1d2>
 801259c:	0670      	lsls	r0, r6, #25
 801259e:	d5fb      	bpl.n	8012598 <_printf_i+0x1c8>
 80125a0:	8019      	strh	r1, [r3, #0]
 80125a2:	2300      	movs	r3, #0
 80125a4:	6123      	str	r3, [r4, #16]
 80125a6:	4615      	mov	r5, r2
 80125a8:	e7ba      	b.n	8012520 <_printf_i+0x150>
 80125aa:	682b      	ldr	r3, [r5, #0]
 80125ac:	1d1a      	adds	r2, r3, #4
 80125ae:	602a      	str	r2, [r5, #0]
 80125b0:	681d      	ldr	r5, [r3, #0]
 80125b2:	6862      	ldr	r2, [r4, #4]
 80125b4:	2100      	movs	r1, #0
 80125b6:	4628      	mov	r0, r5
 80125b8:	f7ed fe9a 	bl	80002f0 <memchr>
 80125bc:	b108      	cbz	r0, 80125c2 <_printf_i+0x1f2>
 80125be:	1b40      	subs	r0, r0, r5
 80125c0:	6060      	str	r0, [r4, #4]
 80125c2:	6863      	ldr	r3, [r4, #4]
 80125c4:	6123      	str	r3, [r4, #16]
 80125c6:	2300      	movs	r3, #0
 80125c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80125cc:	e7a8      	b.n	8012520 <_printf_i+0x150>
 80125ce:	6923      	ldr	r3, [r4, #16]
 80125d0:	462a      	mov	r2, r5
 80125d2:	4649      	mov	r1, r9
 80125d4:	4640      	mov	r0, r8
 80125d6:	47d0      	blx	sl
 80125d8:	3001      	adds	r0, #1
 80125da:	d0ab      	beq.n	8012534 <_printf_i+0x164>
 80125dc:	6823      	ldr	r3, [r4, #0]
 80125de:	079b      	lsls	r3, r3, #30
 80125e0:	d413      	bmi.n	801260a <_printf_i+0x23a>
 80125e2:	68e0      	ldr	r0, [r4, #12]
 80125e4:	9b03      	ldr	r3, [sp, #12]
 80125e6:	4298      	cmp	r0, r3
 80125e8:	bfb8      	it	lt
 80125ea:	4618      	movlt	r0, r3
 80125ec:	e7a4      	b.n	8012538 <_printf_i+0x168>
 80125ee:	2301      	movs	r3, #1
 80125f0:	4632      	mov	r2, r6
 80125f2:	4649      	mov	r1, r9
 80125f4:	4640      	mov	r0, r8
 80125f6:	47d0      	blx	sl
 80125f8:	3001      	adds	r0, #1
 80125fa:	d09b      	beq.n	8012534 <_printf_i+0x164>
 80125fc:	3501      	adds	r5, #1
 80125fe:	68e3      	ldr	r3, [r4, #12]
 8012600:	9903      	ldr	r1, [sp, #12]
 8012602:	1a5b      	subs	r3, r3, r1
 8012604:	42ab      	cmp	r3, r5
 8012606:	dcf2      	bgt.n	80125ee <_printf_i+0x21e>
 8012608:	e7eb      	b.n	80125e2 <_printf_i+0x212>
 801260a:	2500      	movs	r5, #0
 801260c:	f104 0619 	add.w	r6, r4, #25
 8012610:	e7f5      	b.n	80125fe <_printf_i+0x22e>
 8012612:	bf00      	nop
 8012614:	080129a5 	.word	0x080129a5
 8012618:	080129b6 	.word	0x080129b6

0801261c <memcpy>:
 801261c:	440a      	add	r2, r1
 801261e:	4291      	cmp	r1, r2
 8012620:	f100 33ff 	add.w	r3, r0, #4294967295
 8012624:	d100      	bne.n	8012628 <memcpy+0xc>
 8012626:	4770      	bx	lr
 8012628:	b510      	push	{r4, lr}
 801262a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801262e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012632:	4291      	cmp	r1, r2
 8012634:	d1f9      	bne.n	801262a <memcpy+0xe>
 8012636:	bd10      	pop	{r4, pc}

08012638 <memmove>:
 8012638:	4288      	cmp	r0, r1
 801263a:	b510      	push	{r4, lr}
 801263c:	eb01 0402 	add.w	r4, r1, r2
 8012640:	d902      	bls.n	8012648 <memmove+0x10>
 8012642:	4284      	cmp	r4, r0
 8012644:	4623      	mov	r3, r4
 8012646:	d807      	bhi.n	8012658 <memmove+0x20>
 8012648:	1e43      	subs	r3, r0, #1
 801264a:	42a1      	cmp	r1, r4
 801264c:	d008      	beq.n	8012660 <memmove+0x28>
 801264e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012652:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012656:	e7f8      	b.n	801264a <memmove+0x12>
 8012658:	4402      	add	r2, r0
 801265a:	4601      	mov	r1, r0
 801265c:	428a      	cmp	r2, r1
 801265e:	d100      	bne.n	8012662 <memmove+0x2a>
 8012660:	bd10      	pop	{r4, pc}
 8012662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012666:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801266a:	e7f7      	b.n	801265c <memmove+0x24>

0801266c <_free_r>:
 801266c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801266e:	2900      	cmp	r1, #0
 8012670:	d044      	beq.n	80126fc <_free_r+0x90>
 8012672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012676:	9001      	str	r0, [sp, #4]
 8012678:	2b00      	cmp	r3, #0
 801267a:	f1a1 0404 	sub.w	r4, r1, #4
 801267e:	bfb8      	it	lt
 8012680:	18e4      	addlt	r4, r4, r3
 8012682:	f000 f913 	bl	80128ac <__malloc_lock>
 8012686:	4a1e      	ldr	r2, [pc, #120]	; (8012700 <_free_r+0x94>)
 8012688:	9801      	ldr	r0, [sp, #4]
 801268a:	6813      	ldr	r3, [r2, #0]
 801268c:	b933      	cbnz	r3, 801269c <_free_r+0x30>
 801268e:	6063      	str	r3, [r4, #4]
 8012690:	6014      	str	r4, [r2, #0]
 8012692:	b003      	add	sp, #12
 8012694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012698:	f000 b90e 	b.w	80128b8 <__malloc_unlock>
 801269c:	42a3      	cmp	r3, r4
 801269e:	d908      	bls.n	80126b2 <_free_r+0x46>
 80126a0:	6825      	ldr	r5, [r4, #0]
 80126a2:	1961      	adds	r1, r4, r5
 80126a4:	428b      	cmp	r3, r1
 80126a6:	bf01      	itttt	eq
 80126a8:	6819      	ldreq	r1, [r3, #0]
 80126aa:	685b      	ldreq	r3, [r3, #4]
 80126ac:	1949      	addeq	r1, r1, r5
 80126ae:	6021      	streq	r1, [r4, #0]
 80126b0:	e7ed      	b.n	801268e <_free_r+0x22>
 80126b2:	461a      	mov	r2, r3
 80126b4:	685b      	ldr	r3, [r3, #4]
 80126b6:	b10b      	cbz	r3, 80126bc <_free_r+0x50>
 80126b8:	42a3      	cmp	r3, r4
 80126ba:	d9fa      	bls.n	80126b2 <_free_r+0x46>
 80126bc:	6811      	ldr	r1, [r2, #0]
 80126be:	1855      	adds	r5, r2, r1
 80126c0:	42a5      	cmp	r5, r4
 80126c2:	d10b      	bne.n	80126dc <_free_r+0x70>
 80126c4:	6824      	ldr	r4, [r4, #0]
 80126c6:	4421      	add	r1, r4
 80126c8:	1854      	adds	r4, r2, r1
 80126ca:	42a3      	cmp	r3, r4
 80126cc:	6011      	str	r1, [r2, #0]
 80126ce:	d1e0      	bne.n	8012692 <_free_r+0x26>
 80126d0:	681c      	ldr	r4, [r3, #0]
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	6053      	str	r3, [r2, #4]
 80126d6:	4421      	add	r1, r4
 80126d8:	6011      	str	r1, [r2, #0]
 80126da:	e7da      	b.n	8012692 <_free_r+0x26>
 80126dc:	d902      	bls.n	80126e4 <_free_r+0x78>
 80126de:	230c      	movs	r3, #12
 80126e0:	6003      	str	r3, [r0, #0]
 80126e2:	e7d6      	b.n	8012692 <_free_r+0x26>
 80126e4:	6825      	ldr	r5, [r4, #0]
 80126e6:	1961      	adds	r1, r4, r5
 80126e8:	428b      	cmp	r3, r1
 80126ea:	bf04      	itt	eq
 80126ec:	6819      	ldreq	r1, [r3, #0]
 80126ee:	685b      	ldreq	r3, [r3, #4]
 80126f0:	6063      	str	r3, [r4, #4]
 80126f2:	bf04      	itt	eq
 80126f4:	1949      	addeq	r1, r1, r5
 80126f6:	6021      	streq	r1, [r4, #0]
 80126f8:	6054      	str	r4, [r2, #4]
 80126fa:	e7ca      	b.n	8012692 <_free_r+0x26>
 80126fc:	b003      	add	sp, #12
 80126fe:	bd30      	pop	{r4, r5, pc}
 8012700:	24008a64 	.word	0x24008a64

08012704 <sbrk_aligned>:
 8012704:	b570      	push	{r4, r5, r6, lr}
 8012706:	4e0e      	ldr	r6, [pc, #56]	; (8012740 <sbrk_aligned+0x3c>)
 8012708:	460c      	mov	r4, r1
 801270a:	6831      	ldr	r1, [r6, #0]
 801270c:	4605      	mov	r5, r0
 801270e:	b911      	cbnz	r1, 8012716 <sbrk_aligned+0x12>
 8012710:	f000 f8bc 	bl	801288c <_sbrk_r>
 8012714:	6030      	str	r0, [r6, #0]
 8012716:	4621      	mov	r1, r4
 8012718:	4628      	mov	r0, r5
 801271a:	f000 f8b7 	bl	801288c <_sbrk_r>
 801271e:	1c43      	adds	r3, r0, #1
 8012720:	d00a      	beq.n	8012738 <sbrk_aligned+0x34>
 8012722:	1cc4      	adds	r4, r0, #3
 8012724:	f024 0403 	bic.w	r4, r4, #3
 8012728:	42a0      	cmp	r0, r4
 801272a:	d007      	beq.n	801273c <sbrk_aligned+0x38>
 801272c:	1a21      	subs	r1, r4, r0
 801272e:	4628      	mov	r0, r5
 8012730:	f000 f8ac 	bl	801288c <_sbrk_r>
 8012734:	3001      	adds	r0, #1
 8012736:	d101      	bne.n	801273c <sbrk_aligned+0x38>
 8012738:	f04f 34ff 	mov.w	r4, #4294967295
 801273c:	4620      	mov	r0, r4
 801273e:	bd70      	pop	{r4, r5, r6, pc}
 8012740:	24008a68 	.word	0x24008a68

08012744 <_malloc_r>:
 8012744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012748:	1ccd      	adds	r5, r1, #3
 801274a:	f025 0503 	bic.w	r5, r5, #3
 801274e:	3508      	adds	r5, #8
 8012750:	2d0c      	cmp	r5, #12
 8012752:	bf38      	it	cc
 8012754:	250c      	movcc	r5, #12
 8012756:	2d00      	cmp	r5, #0
 8012758:	4607      	mov	r7, r0
 801275a:	db01      	blt.n	8012760 <_malloc_r+0x1c>
 801275c:	42a9      	cmp	r1, r5
 801275e:	d905      	bls.n	801276c <_malloc_r+0x28>
 8012760:	230c      	movs	r3, #12
 8012762:	603b      	str	r3, [r7, #0]
 8012764:	2600      	movs	r6, #0
 8012766:	4630      	mov	r0, r6
 8012768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801276c:	4e2e      	ldr	r6, [pc, #184]	; (8012828 <_malloc_r+0xe4>)
 801276e:	f000 f89d 	bl	80128ac <__malloc_lock>
 8012772:	6833      	ldr	r3, [r6, #0]
 8012774:	461c      	mov	r4, r3
 8012776:	bb34      	cbnz	r4, 80127c6 <_malloc_r+0x82>
 8012778:	4629      	mov	r1, r5
 801277a:	4638      	mov	r0, r7
 801277c:	f7ff ffc2 	bl	8012704 <sbrk_aligned>
 8012780:	1c43      	adds	r3, r0, #1
 8012782:	4604      	mov	r4, r0
 8012784:	d14d      	bne.n	8012822 <_malloc_r+0xde>
 8012786:	6834      	ldr	r4, [r6, #0]
 8012788:	4626      	mov	r6, r4
 801278a:	2e00      	cmp	r6, #0
 801278c:	d140      	bne.n	8012810 <_malloc_r+0xcc>
 801278e:	6823      	ldr	r3, [r4, #0]
 8012790:	4631      	mov	r1, r6
 8012792:	4638      	mov	r0, r7
 8012794:	eb04 0803 	add.w	r8, r4, r3
 8012798:	f000 f878 	bl	801288c <_sbrk_r>
 801279c:	4580      	cmp	r8, r0
 801279e:	d13a      	bne.n	8012816 <_malloc_r+0xd2>
 80127a0:	6821      	ldr	r1, [r4, #0]
 80127a2:	3503      	adds	r5, #3
 80127a4:	1a6d      	subs	r5, r5, r1
 80127a6:	f025 0503 	bic.w	r5, r5, #3
 80127aa:	3508      	adds	r5, #8
 80127ac:	2d0c      	cmp	r5, #12
 80127ae:	bf38      	it	cc
 80127b0:	250c      	movcc	r5, #12
 80127b2:	4629      	mov	r1, r5
 80127b4:	4638      	mov	r0, r7
 80127b6:	f7ff ffa5 	bl	8012704 <sbrk_aligned>
 80127ba:	3001      	adds	r0, #1
 80127bc:	d02b      	beq.n	8012816 <_malloc_r+0xd2>
 80127be:	6823      	ldr	r3, [r4, #0]
 80127c0:	442b      	add	r3, r5
 80127c2:	6023      	str	r3, [r4, #0]
 80127c4:	e00e      	b.n	80127e4 <_malloc_r+0xa0>
 80127c6:	6822      	ldr	r2, [r4, #0]
 80127c8:	1b52      	subs	r2, r2, r5
 80127ca:	d41e      	bmi.n	801280a <_malloc_r+0xc6>
 80127cc:	2a0b      	cmp	r2, #11
 80127ce:	d916      	bls.n	80127fe <_malloc_r+0xba>
 80127d0:	1961      	adds	r1, r4, r5
 80127d2:	42a3      	cmp	r3, r4
 80127d4:	6025      	str	r5, [r4, #0]
 80127d6:	bf18      	it	ne
 80127d8:	6059      	strne	r1, [r3, #4]
 80127da:	6863      	ldr	r3, [r4, #4]
 80127dc:	bf08      	it	eq
 80127de:	6031      	streq	r1, [r6, #0]
 80127e0:	5162      	str	r2, [r4, r5]
 80127e2:	604b      	str	r3, [r1, #4]
 80127e4:	4638      	mov	r0, r7
 80127e6:	f104 060b 	add.w	r6, r4, #11
 80127ea:	f000 f865 	bl	80128b8 <__malloc_unlock>
 80127ee:	f026 0607 	bic.w	r6, r6, #7
 80127f2:	1d23      	adds	r3, r4, #4
 80127f4:	1af2      	subs	r2, r6, r3
 80127f6:	d0b6      	beq.n	8012766 <_malloc_r+0x22>
 80127f8:	1b9b      	subs	r3, r3, r6
 80127fa:	50a3      	str	r3, [r4, r2]
 80127fc:	e7b3      	b.n	8012766 <_malloc_r+0x22>
 80127fe:	6862      	ldr	r2, [r4, #4]
 8012800:	42a3      	cmp	r3, r4
 8012802:	bf0c      	ite	eq
 8012804:	6032      	streq	r2, [r6, #0]
 8012806:	605a      	strne	r2, [r3, #4]
 8012808:	e7ec      	b.n	80127e4 <_malloc_r+0xa0>
 801280a:	4623      	mov	r3, r4
 801280c:	6864      	ldr	r4, [r4, #4]
 801280e:	e7b2      	b.n	8012776 <_malloc_r+0x32>
 8012810:	4634      	mov	r4, r6
 8012812:	6876      	ldr	r6, [r6, #4]
 8012814:	e7b9      	b.n	801278a <_malloc_r+0x46>
 8012816:	230c      	movs	r3, #12
 8012818:	603b      	str	r3, [r7, #0]
 801281a:	4638      	mov	r0, r7
 801281c:	f000 f84c 	bl	80128b8 <__malloc_unlock>
 8012820:	e7a1      	b.n	8012766 <_malloc_r+0x22>
 8012822:	6025      	str	r5, [r4, #0]
 8012824:	e7de      	b.n	80127e4 <_malloc_r+0xa0>
 8012826:	bf00      	nop
 8012828:	24008a64 	.word	0x24008a64

0801282c <_realloc_r>:
 801282c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012830:	4680      	mov	r8, r0
 8012832:	4614      	mov	r4, r2
 8012834:	460e      	mov	r6, r1
 8012836:	b921      	cbnz	r1, 8012842 <_realloc_r+0x16>
 8012838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801283c:	4611      	mov	r1, r2
 801283e:	f7ff bf81 	b.w	8012744 <_malloc_r>
 8012842:	b92a      	cbnz	r2, 8012850 <_realloc_r+0x24>
 8012844:	f7ff ff12 	bl	801266c <_free_r>
 8012848:	4625      	mov	r5, r4
 801284a:	4628      	mov	r0, r5
 801284c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012850:	f000 f838 	bl	80128c4 <_malloc_usable_size_r>
 8012854:	4284      	cmp	r4, r0
 8012856:	4607      	mov	r7, r0
 8012858:	d802      	bhi.n	8012860 <_realloc_r+0x34>
 801285a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801285e:	d812      	bhi.n	8012886 <_realloc_r+0x5a>
 8012860:	4621      	mov	r1, r4
 8012862:	4640      	mov	r0, r8
 8012864:	f7ff ff6e 	bl	8012744 <_malloc_r>
 8012868:	4605      	mov	r5, r0
 801286a:	2800      	cmp	r0, #0
 801286c:	d0ed      	beq.n	801284a <_realloc_r+0x1e>
 801286e:	42bc      	cmp	r4, r7
 8012870:	4622      	mov	r2, r4
 8012872:	4631      	mov	r1, r6
 8012874:	bf28      	it	cs
 8012876:	463a      	movcs	r2, r7
 8012878:	f7ff fed0 	bl	801261c <memcpy>
 801287c:	4631      	mov	r1, r6
 801287e:	4640      	mov	r0, r8
 8012880:	f7ff fef4 	bl	801266c <_free_r>
 8012884:	e7e1      	b.n	801284a <_realloc_r+0x1e>
 8012886:	4635      	mov	r5, r6
 8012888:	e7df      	b.n	801284a <_realloc_r+0x1e>
	...

0801288c <_sbrk_r>:
 801288c:	b538      	push	{r3, r4, r5, lr}
 801288e:	4d06      	ldr	r5, [pc, #24]	; (80128a8 <_sbrk_r+0x1c>)
 8012890:	2300      	movs	r3, #0
 8012892:	4604      	mov	r4, r0
 8012894:	4608      	mov	r0, r1
 8012896:	602b      	str	r3, [r5, #0]
 8012898:	f7f0 fa8e 	bl	8002db8 <_sbrk>
 801289c:	1c43      	adds	r3, r0, #1
 801289e:	d102      	bne.n	80128a6 <_sbrk_r+0x1a>
 80128a0:	682b      	ldr	r3, [r5, #0]
 80128a2:	b103      	cbz	r3, 80128a6 <_sbrk_r+0x1a>
 80128a4:	6023      	str	r3, [r4, #0]
 80128a6:	bd38      	pop	{r3, r4, r5, pc}
 80128a8:	24008a6c 	.word	0x24008a6c

080128ac <__malloc_lock>:
 80128ac:	4801      	ldr	r0, [pc, #4]	; (80128b4 <__malloc_lock+0x8>)
 80128ae:	f000 b811 	b.w	80128d4 <__retarget_lock_acquire_recursive>
 80128b2:	bf00      	nop
 80128b4:	24008a70 	.word	0x24008a70

080128b8 <__malloc_unlock>:
 80128b8:	4801      	ldr	r0, [pc, #4]	; (80128c0 <__malloc_unlock+0x8>)
 80128ba:	f000 b80c 	b.w	80128d6 <__retarget_lock_release_recursive>
 80128be:	bf00      	nop
 80128c0:	24008a70 	.word	0x24008a70

080128c4 <_malloc_usable_size_r>:
 80128c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128c8:	1f18      	subs	r0, r3, #4
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	bfbc      	itt	lt
 80128ce:	580b      	ldrlt	r3, [r1, r0]
 80128d0:	18c0      	addlt	r0, r0, r3
 80128d2:	4770      	bx	lr

080128d4 <__retarget_lock_acquire_recursive>:
 80128d4:	4770      	bx	lr

080128d6 <__retarget_lock_release_recursive>:
 80128d6:	4770      	bx	lr

080128d8 <_init>:
 80128d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128da:	bf00      	nop
 80128dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128de:	bc08      	pop	{r3}
 80128e0:	469e      	mov	lr, r3
 80128e2:	4770      	bx	lr

080128e4 <_fini>:
 80128e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128e6:	bf00      	nop
 80128e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128ea:	bc08      	pop	{r3}
 80128ec:	469e      	mov	lr, r3
 80128ee:	4770      	bx	lr
