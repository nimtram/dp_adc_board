
dp_adc_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017900  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  08017bb0  08017bb0  00027bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018268  08018268  00028268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018270  08018270  00028270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018274  08018274  00028274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  24000000  08018278  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008c44  240001f0  08018468  000301f0  2**2
                  ALLOC
  8 .sdram_section 00000c00  c0000000  c0000000  00040000  2**2
                  ALLOC
  9 ._user_heap_stack 00000c04  24008e34  24008e34  00038e34  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002791b  00000000  00000000  0003021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000044ad  00000000  00000000  00057b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001dc0  00000000  00000000  0005bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001bf8  00000000  00000000  0005dda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003692b  00000000  00000000  0005f9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00028fd1  00000000  00000000  000962cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00151c7d  00000000  00000000  000bf29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00210f19  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009118  00000000  00000000  00210f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001f0 	.word	0x240001f0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08017b98 	.word	0x08017b98

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001f4 	.word	0x240001f4
 80002ec:	08017b98 	.word	0x08017b98

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <SDRAM_Startup_Sequence>:
uint32_t aTxBuffer[BUFFER_SIZE];
uint32_t aRxBuffer[BUFFER_SIZE];
uint32_t uwIndex = 0;
__IO uint32_t uwWriteReadStatus = 0;

void SDRAM_Startup_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  /* Program the SDRAM external device */
  SDRAM_Initialization_Sequence(hsdram, Command);
 8000ab6:	6839      	ldr	r1, [r7, #0]
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 f875 	bl	8000ba8 <SDRAM_Initialization_Sequence>

  /*##-2- SDRAM memory read/write access #####################################*/
  //*(__IO uint32_t*) (TEST_WRITE) = 0x1;

  /* Fill the buffer to write */
  Fill_Buffer(aTxBuffer, BUFFER_SIZE, 0xA244250F);
 8000abe:	4a34      	ldr	r2, [pc, #208]	; (8000b90 <SDRAM_Startup_Sequence+0xe4>)
 8000ac0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac4:	4833      	ldr	r0, [pc, #204]	; (8000b94 <SDRAM_Startup_Sequence+0xe8>)
 8000ac6:	f000 f8cc 	bl	8000c62 <Fill_Buffer>

    /* Fill the Read buffer */
  Fill_Buffer(aRxBuffer, BUFFER_SIZE, 0xBBBBBBBB);
 8000aca:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8000ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad2:	4831      	ldr	r0, [pc, #196]	; (8000b98 <SDRAM_Startup_Sequence+0xec>)
 8000ad4:	f000 f8c5 	bl	8000c62 <Fill_Buffer>

  /* Write data to the SDRAM memory */
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000ad8:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	e010      	b.n	8000b02 <SDRAM_Startup_Sequence+0x56>
  {
    *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uwIndex) = aTxBuffer[uwIndex];
 8000ae0:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000ae6:	6819      	ldr	r1, [r3, #0]
 8000ae8:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <SDRAM_Startup_Sequence+0xf4>)
 8000aea:	440b      	add	r3, r1
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4619      	mov	r1, r3
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <SDRAM_Startup_Sequence+0xe8>)
 8000af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af6:	600b      	str	r3, [r1, #0]
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000af8:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	4a27      	ldr	r2, [pc, #156]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b0a:	d3e9      	bcc.n	8000ae0 <SDRAM_Startup_Sequence+0x34>
  }

  /* Read back data from the SDRAM memory */
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000b0c:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	e010      	b.n	8000b36 <SDRAM_Startup_Sequence+0x8a>
  {
    aRxBuffer[uwIndex] = *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uwIndex);
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <SDRAM_Startup_Sequence+0xf4>)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6812      	ldr	r2, [r2, #0]
 8000b26:	491c      	ldr	r1, [pc, #112]	; (8000b98 <SDRAM_Startup_Sequence+0xec>)
 8000b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++)
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	4a1a      	ldr	r2, [pc, #104]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b3e:	d3e9      	bcc.n	8000b14 <SDRAM_Startup_Sequence+0x68>
  }

  /*##-3- Checking data integrity ############################################*/

  for (uwIndex = 0; (uwIndex < BUFFER_SIZE) && (uwWriteReadStatus == 0); uwIndex++)
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	e015      	b.n	8000b74 <SDRAM_Startup_Sequence+0xc8>
  {
    if (aRxBuffer[uwIndex] != aTxBuffer[uwIndex])
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <SDRAM_Startup_Sequence+0xec>)
 8000b4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	490f      	ldr	r1, [pc, #60]	; (8000b94 <SDRAM_Startup_Sequence+0xe8>)
 8000b58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d004      	beq.n	8000b6a <SDRAM_Startup_Sequence+0xbe>
    {
      uwWriteReadStatus++;
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <SDRAM_Startup_Sequence+0xf8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <SDRAM_Startup_Sequence+0xf8>)
 8000b68:	6013      	str	r3, [r2, #0]
  for (uwIndex = 0; (uwIndex < BUFFER_SIZE) && (uwWriteReadStatus == 0); uwIndex++)
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <SDRAM_Startup_Sequence+0xf0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b7c:	d203      	bcs.n	8000b86 <SDRAM_Startup_Sequence+0xda>
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <SDRAM_Startup_Sequence+0xf8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0e0      	beq.n	8000b48 <SDRAM_Startup_Sequence+0x9c>
    }
  }
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	a244250f 	.word	0xa244250f
 8000b94:	2400020c 	.word	0x2400020c
 8000b98:	2400420c 	.word	0x2400420c
 8000b9c:	2400820c 	.word	0x2400820c
 8000ba0:	30000200 	.word	0x30000200
 8000ba4:	24008210 	.word	0x24008210

08000ba8 <SDRAM_Initialization_Sequence>:



void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f00b f803 	bl	800bbe0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f003 f89c 	bl	8003d18 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	2202      	movs	r2, #2
 8000be4:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	2210      	movs	r2, #16
 8000bea:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bfc:	6839      	ldr	r1, [r7, #0]
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f00a ffee 	bl	800bbe0 <HAL_SDRAM_SendCommand>

  /* Step 4 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2203      	movs	r2, #3
 8000c08:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	2210      	movs	r2, #16
 8000c0e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	2208      	movs	r2, #8
 8000c14:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c20:	6839      	ldr	r1, [r7, #0]
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f00a ffdc 	bl	800bbe0 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000c28:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000c2c:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2204      	movs	r2, #4
 8000c32:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2210      	movs	r2, #16
 8000c38:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c4a:	6839      	ldr	r1, [r7, #0]
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f00a ffc7 	bl	800bbe0 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, 230);
 8000c52:	21e6      	movs	r1, #230	; 0xe6
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f00a fff8 	bl	800bc4a <HAL_SDRAM_ProgramRefreshRate>
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <Fill_Buffer>:

void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b087      	sub	sp, #28
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	e00a      	b.n	8000c8e <Fill_Buffer+0x2c>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	6979      	ldr	r1, [r7, #20]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	440a      	add	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d3f0      	bcc.n	8000c78 <Fill_Buffer+0x16>
  }
}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	371c      	adds	r7, #28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	b08f      	sub	sp, #60	; 0x3c
 8000ca8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000caa:	f002 ffa3 	bl	8003bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cae:	f000 fa41 	bl	8001134 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000cb2:	f000 fabb 	bl	800122c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */
//TODO: need to move DMA init everytime up after GPIO init!!
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb6:	f000 fe57 	bl	8001968 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cba:	f000 fda3 	bl	8001804 <MX_DMA_Init>
  MX_SPI1_Init();
 8000cbe:	f000 fb05 	bl	80012cc <MX_SPI1_Init>
  MX_TIM1_Init();
 8000cc2:	f000 fc0b 	bl	80014dc <MX_TIM1_Init>
  MX_UART4_Init();
 8000cc6:	f000 fd4f 	bl	8001768 <MX_UART4_Init>
  MX_FMC_Init();
 8000cca:	f000 fdfb 	bl	80018c4 <MX_FMC_Init>
  MX_SPI2_Init();
 8000cce:	f000 fb55 	bl	800137c <MX_SPI2_Init>
  MX_SPI4_Init();
 8000cd2:	f000 fbab 	bl	800142c <MX_SPI4_Init>
  MX_TIM2_Init();
 8000cd6:	f000 fcad 	bl	8001634 <MX_TIM2_Init>
  MX_SDMMC1_SD_Init();
 8000cda:	f000 fad9 	bl	8001290 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000cde:	f011 f89b 	bl	8011e18 <MX_FATFS_Init>
  MX_TIM16_Init();
 8000ce2:	f000 fd19 	bl	8001718 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // setting up timer for time measuring
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ce6:	4bc5      	ldr	r3, [pc, #788]	; (8000ffc <main+0x358>)
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	4ac4      	ldr	r2, [pc, #784]	; (8000ffc <main+0x358>)
 8000cec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cf0:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8000cf2:	4bc3      	ldr	r3, [pc, #780]	; (8001000 <main+0x35c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000cf8:	4bc1      	ldr	r3, [pc, #772]	; (8001000 <main+0x35c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4ac0      	ldr	r2, [pc, #768]	; (8001000 <main+0x35c>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6013      	str	r3, [r2, #0]
  HAL_Delay(500);
 8000d04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d08:	f003 f806 	bl	8003d18 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SDRAM_Startup_Sequence(&hsdram1, &fmc_command);
 8000d0c:	49bd      	ldr	r1, [pc, #756]	; (8001004 <main+0x360>)
 8000d0e:	48be      	ldr	r0, [pc, #760]	; (8001008 <main+0x364>)
 8000d10:	f7ff fecc 	bl	8000aac <SDRAM_Startup_Sequence>
  sdCardInitError = sd_card_init();
 8000d14:	f001 fab4 	bl	8002280 <sd_card_init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4bbb      	ldr	r3, [pc, #748]	; (800100c <main+0x368>)
 8000d1e:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8000d20:	2064      	movs	r0, #100	; 0x64
 8000d22:	f002 fff9 	bl	8003d18 <HAL_Delay>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 4);
 8000d26:	2204      	movs	r2, #4
 8000d28:	2104      	movs	r1, #4
 8000d2a:	2017      	movs	r0, #23
 8000d2c:	f003 f917 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 1);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2101      	movs	r1, #1
 8000d34:	2028      	movs	r0, #40	; 0x28
 8000d36:	f003 f912 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000d3a:	2017      	movs	r0, #23
 8000d3c:	f003 f937 	bl	8003fae <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000d40:	2028      	movs	r0, #40	; 0x28
 8000d42:	f003 f934 	bl	8003fae <HAL_NVIC_DisableIRQ>

  // uart4 and uart5 IT enable
  HAL_UART_Receive_IT (&huart4, rxUart4Buffer, 1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	49b1      	ldr	r1, [pc, #708]	; (8001010 <main+0x36c>)
 8000d4a:	48b2      	ldr	r0, [pc, #712]	; (8001014 <main+0x370>)
 8000d4c:	f00d fe12 	bl	800e974 <HAL_UART_Receive_IT>
//  HAL_UART_Receive_IT (&huart5, rxUart5Buffer, 1);

  // LED timer enable
  HAL_TIM_Base_Start_IT(&htim16);
 8000d50:	48b1      	ldr	r0, [pc, #708]	; (8001018 <main+0x374>)
 8000d52:	f00c f84f 	bl	800cdf4 <HAL_TIM_Base_Start_IT>

  if (sdCardInitError == true){
 8000d56:	4bad      	ldr	r3, [pc, #692]	; (800100c <main+0x368>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <main+0xc2>
    setColorLED(red);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f001 f86c 	bl	8001e3c <setColorLED>
 8000d64:	e005      	b.n	8000d72 <main+0xce>
  }else{
    setColorLED(blue);
 8000d66:	2002      	movs	r0, #2
 8000d68:	f001 f868 	bl	8001e3c <setColorLED>
    readConfigFile("config.txt");
 8000d6c:	48ab      	ldr	r0, [pc, #684]	; (800101c <main+0x378>)
 8000d6e:	f001 f8b1 	bl	8001ed4 <readConfigFile>
  }

  spi1_soft_reset();
 8000d72:	f001 fda7 	bl	80028c4 <spi1_soft_reset>
  spi2_soft_reset();
 8000d76:	f001 fdcb 	bl	8002910 <spi2_soft_reset>
  spi4_soft_reset();
 8000d7a:	f001 fdef 	bl	800295c <spi4_soft_reset>
  spi1_adc_init(SPS_VALUE_5);
 8000d7e:	4ba8      	ldr	r3, [pc, #672]	; (8001020 <main+0x37c>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 fb1a 	bl	80023bc <spi1_adc_init>
  spi2_adc_init(SPS_VALUE_5);
 8000d88:	4ba5      	ldr	r3, [pc, #660]	; (8001020 <main+0x37c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 fbed 	bl	800256c <spi2_adc_init>
  spi4_adc_init(SPS_VALUE_5);
 8000d92:	4ba3      	ldr	r3, [pc, #652]	; (8001020 <main+0x37c>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fcc0 	bl	800271c <spi4_adc_init>

  //initial setup:
  initialSetupADC();
 8000d9c:	f001 f9e2 	bl	8002164 <initialSetupADC>
  HAL_Delay(500);
 8000da0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000da4:	f002 ffb8 	bl	8003d18 <HAL_Delay>

  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8000da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dac:	2220      	movs	r2, #32
 8000dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8000db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db6:	2240      	movs	r2, #64	; 0x40
 8000db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8000dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000dc8:	2017      	movs	r0, #23
 8000dca:	f003 f8e2 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dce:	2028      	movs	r0, #40	; 0x28
 8000dd0:	f003 f8df 	bl	8003f92 <HAL_NVIC_EnableIRQ>

  //run all before main loop
  run_all_adc();
 8000dd4:	f001 fd5a 	bl	800288c <run_all_adc>

  char stringBufferValues[39];

  floating_point_values = true;
 8000dd8:	4b92      	ldr	r3, [pc, #584]	; (8001024 <main+0x380>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
    while (1){
      if(spiCommonBufferCounter < findMin(spi1ValuesBufferCounter,spi2ValuesBufferCounter,spi4ValuesBufferCounter)){
 8000dde:	4b92      	ldr	r3, [pc, #584]	; (8001028 <main+0x384>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a92      	ldr	r2, [pc, #584]	; (800102c <main+0x388>)
 8000de4:	6811      	ldr	r1, [r2, #0]
 8000de6:	4a92      	ldr	r2, [pc, #584]	; (8001030 <main+0x38c>)
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 f80a 	bl	8001e04 <findMin>
 8000df0:	4602      	mov	r2, r0
 8000df2:	4b90      	ldr	r3, [pc, #576]	; (8001034 <main+0x390>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d96a      	bls.n	8000ed0 <main+0x22c>
        if (floating_point_values == true){
 8000dfa:	4b8a      	ldr	r3, [pc, #552]	; (8001024 <main+0x380>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d024      	beq.n	8000e4c <main+0x1a8>
          getStringFromValuesFloat(spi1ValuesStorage[spiCommonBufferCounter],spi2ValuesStorage[spiCommonBufferCounter],spi4ValuesStorage[spiCommonBufferCounter],stringBufferValues, range_x_value, range_y_value, range_z_value);
 8000e02:	4b8c      	ldr	r3, [pc, #560]	; (8001034 <main+0x390>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a8c      	ldr	r2, [pc, #560]	; (8001038 <main+0x394>)
 8000e08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e0c:	4b89      	ldr	r3, [pc, #548]	; (8001034 <main+0x390>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a8a      	ldr	r2, [pc, #552]	; (800103c <main+0x398>)
 8000e12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000e16:	4b87      	ldr	r3, [pc, #540]	; (8001034 <main+0x390>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a89      	ldr	r2, [pc, #548]	; (8001040 <main+0x39c>)
 8000e1c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8000e20:	4b88      	ldr	r3, [pc, #544]	; (8001044 <main+0x3a0>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4a88      	ldr	r2, [pc, #544]	; (8001048 <main+0x3a4>)
 8000e26:	7812      	ldrb	r2, [r2, #0]
 8000e28:	4988      	ldr	r1, [pc, #544]	; (800104c <main+0x3a8>)
 8000e2a:	7809      	ldrb	r1, [r1, #0]
 8000e2c:	463e      	mov	r6, r7
 8000e2e:	9102      	str	r1, [sp, #8]
 8000e30:	9201      	str	r2, [sp, #4]
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	4633      	mov	r3, r6
 8000e36:	462a      	mov	r2, r5
 8000e38:	4621      	mov	r1, r4
 8000e3a:	f001 fde5 	bl	8002a08 <getStringFromValuesFloat>
          HAL_UART_Transmit(&huart4, stringBufferValues, 30,100);
 8000e3e:	4639      	mov	r1, r7
 8000e40:	2364      	movs	r3, #100	; 0x64
 8000e42:	221e      	movs	r2, #30
 8000e44:	4873      	ldr	r0, [pc, #460]	; (8001014 <main+0x370>)
 8000e46:	f00d fcff 	bl	800e848 <HAL_UART_Transmit>
 8000e4a:	e017      	b.n	8000e7c <main+0x1d8>
        }else{
          getStringFromValues(spi1ValuesStorage[spiCommonBufferCounter],spi2ValuesStorage[spiCommonBufferCounter],spi4ValuesStorage[spiCommonBufferCounter],stringBufferValues);
 8000e4c:	4b79      	ldr	r3, [pc, #484]	; (8001034 <main+0x390>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a79      	ldr	r2, [pc, #484]	; (8001038 <main+0x394>)
 8000e52:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e56:	4b77      	ldr	r3, [pc, #476]	; (8001034 <main+0x390>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a78      	ldr	r2, [pc, #480]	; (800103c <main+0x398>)
 8000e5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000e60:	4b74      	ldr	r3, [pc, #464]	; (8001034 <main+0x390>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a76      	ldr	r2, [pc, #472]	; (8001040 <main+0x39c>)
 8000e66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	f001 fd9a 	bl	80029a4 <getStringFromValues>
          HAL_UART_Transmit(&huart4, stringBufferValues, 33,100);
 8000e70:	4639      	mov	r1, r7
 8000e72:	2364      	movs	r3, #100	; 0x64
 8000e74:	2221      	movs	r2, #33	; 0x21
 8000e76:	4867      	ldr	r0, [pc, #412]	; (8001014 <main+0x370>)
 8000e78:	f00d fce6 	bl	800e848 <HAL_UART_Transmit>
        }

        if((sdCardWriteEnable == true) && (sdCardInitError == false) && (sdCardOpenFileError == false)){
 8000e7c:	4b74      	ldr	r3, [pc, #464]	; (8001050 <main+0x3ac>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d020      	beq.n	8000ec6 <main+0x222>
 8000e84:	4b61      	ldr	r3, [pc, #388]	; (800100c <main+0x368>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	f083 0301 	eor.w	r3, r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d019      	beq.n	8000ec6 <main+0x222>
 8000e92:	4b70      	ldr	r3, [pc, #448]	; (8001054 <main+0x3b0>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	f083 0301 	eor.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d012      	beq.n	8000ec6 <main+0x222>
          sdCardWriteError = sd_card_write_to_opened_file(stringBufferValues);
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f001 fa58 	bl	8002358 <sd_card_write_to_opened_file>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b6a      	ldr	r3, [pc, #424]	; (8001058 <main+0x3b4>)
 8000eae:	701a      	strb	r2, [r3, #0]
          if (sdCardWriteError == true){
 8000eb0:	4b69      	ldr	r3, [pc, #420]	; (8001058 <main+0x3b4>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <main+0x21c>
            setColorLED(red);
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f000 ffbf 	bl	8001e3c <setColorLED>
 8000ebe:	e002      	b.n	8000ec6 <main+0x222>
          }else{
            setColorLED(green);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f000 ffbb 	bl	8001e3c <setColorLED>
          }
        }
      spiCommonBufferCounter++;
 8000ec6:	4b5b      	ldr	r3, [pc, #364]	; (8001034 <main+0x390>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	4a59      	ldr	r2, [pc, #356]	; (8001034 <main+0x390>)
 8000ece:	6013      	str	r3, [r2, #0]
      }


      if (uartNewCommand == true){
 8000ed0:	4b62      	ldr	r3, [pc, #392]	; (800105c <main+0x3b8>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d082      	beq.n	8000dde <main+0x13a>
        switch (uartCommand) {
 8000ed8:	4b61      	ldr	r3, [pc, #388]	; (8001060 <main+0x3bc>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	3b30      	subs	r3, #48	; 0x30
 8000ede:	2b40      	cmp	r3, #64	; 0x40
 8000ee0:	f200 810e 	bhi.w	8001100 <main+0x45c>
 8000ee4:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <main+0x248>)
 8000ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eea:	bf00      	nop
 8000eec:	080010c5 	.word	0x080010c5
 8000ef0:	080010d1 	.word	0x080010d1
 8000ef4:	080010dd 	.word	0x080010dd
 8000ef8:	080010e9 	.word	0x080010e9
 8000efc:	080010f5 	.word	0x080010f5
 8000f00:	08001101 	.word	0x08001101
 8000f04:	08001101 	.word	0x08001101
 8000f08:	08001101 	.word	0x08001101
 8000f0c:	08001101 	.word	0x08001101
 8000f10:	08001101 	.word	0x08001101
 8000f14:	08001101 	.word	0x08001101
 8000f18:	08001101 	.word	0x08001101
 8000f1c:	08001101 	.word	0x08001101
 8000f20:	08001101 	.word	0x08001101
 8000f24:	08001101 	.word	0x08001101
 8000f28:	08001101 	.word	0x08001101
 8000f2c:	08001101 	.word	0x08001101
 8000f30:	08001101 	.word	0x08001101
 8000f34:	08001101 	.word	0x08001101
 8000f38:	08001101 	.word	0x08001101
 8000f3c:	08001101 	.word	0x08001101
 8000f40:	08001101 	.word	0x08001101
 8000f44:	08001101 	.word	0x08001101
 8000f48:	08001101 	.word	0x08001101
 8000f4c:	08001101 	.word	0x08001101
 8000f50:	08001101 	.word	0x08001101
 8000f54:	08001101 	.word	0x08001101
 8000f58:	08001101 	.word	0x08001101
 8000f5c:	08001101 	.word	0x08001101
 8000f60:	08001101 	.word	0x08001101
 8000f64:	08001101 	.word	0x08001101
 8000f68:	08001101 	.word	0x08001101
 8000f6c:	08001101 	.word	0x08001101
 8000f70:	08001101 	.word	0x08001101
 8000f74:	08001101 	.word	0x08001101
 8000f78:	08001101 	.word	0x08001101
 8000f7c:	08001101 	.word	0x08001101
 8000f80:	08001101 	.word	0x08001101
 8000f84:	08001101 	.word	0x08001101
 8000f88:	08001101 	.word	0x08001101
 8000f8c:	08001101 	.word	0x08001101
 8000f90:	08001101 	.word	0x08001101
 8000f94:	08001101 	.word	0x08001101
 8000f98:	08001101 	.word	0x08001101
 8000f9c:	08001101 	.word	0x08001101
 8000fa0:	08001101 	.word	0x08001101
 8000fa4:	08001101 	.word	0x08001101
 8000fa8:	08001101 	.word	0x08001101
 8000fac:	08001101 	.word	0x08001101
 8000fb0:	08000ff1 	.word	0x08000ff1
 8000fb4:	08001069 	.word	0x08001069
 8000fb8:	08001075 	.word	0x08001075
 8000fbc:	08001081 	.word	0x08001081
 8000fc0:	0800108d 	.word	0x0800108d
 8000fc4:	08001099 	.word	0x08001099
 8000fc8:	08001101 	.word	0x08001101
 8000fcc:	08001101 	.word	0x08001101
 8000fd0:	08001101 	.word	0x08001101
 8000fd4:	08001101 	.word	0x08001101
 8000fd8:	08001101 	.word	0x08001101
 8000fdc:	08001101 	.word	0x08001101
 8000fe0:	08001101 	.word	0x08001101
 8000fe4:	08001101 	.word	0x08001101
 8000fe8:	08001101 	.word	0x08001101
 8000fec:	080010a5 	.word	0x080010a5
          case 'a': // multiplexer X -> 0
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2120      	movs	r1, #32
 8000ff4:	481b      	ldr	r0, [pc, #108]	; (8001064 <main+0x3c0>)
 8000ff6:	f006 f891 	bl	800711c <HAL_GPIO_WritePin>
            break;
 8000ffa:	e082      	b.n	8001102 <main+0x45e>
 8000ffc:	e000edf0 	.word	0xe000edf0
 8001000:	e0001000 	.word	0xe0001000
 8001004:	24008918 	.word	0x24008918
 8001008:	240088e4 	.word	0x240088e4
 800100c:	24008929 	.word	0x24008929
 8001010:	2400894c 	.word	0x2400894c
 8001014:	240087dc 	.word	0x240087dc
 8001018:	24008790 	.word	0x24008790
 800101c:	08017bb0 	.word	0x08017bb0
 8001020:	24000000 	.word	0x24000000
 8001024:	2400894f 	.word	0x2400894f
 8001028:	24008930 	.word	0x24008930
 800102c:	24008934 	.word	0x24008934
 8001030:	24008938 	.word	0x24008938
 8001034:	2400893c 	.word	0x2400893c
 8001038:	c0000000 	.word	0xc0000000
 800103c:	c0000400 	.word	0xc0000400
 8001040:	c0000800 	.word	0xc0000800
 8001044:	24000005 	.word	0x24000005
 8001048:	24000006 	.word	0x24000006
 800104c:	24000007 	.word	0x24000007
 8001050:	24008928 	.word	0x24008928
 8001054:	2400892b 	.word	0x2400892b
 8001058:	2400892a 	.word	0x2400892a
 800105c:	2400894e 	.word	0x2400894e
 8001060:	2400894d 	.word	0x2400894d
 8001064:	58020000 	.word	0x58020000
          case 'b': // multiplexer X -> 1
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2120      	movs	r1, #32
 800106c:	4827      	ldr	r0, [pc, #156]	; (800110c <main+0x468>)
 800106e:	f006 f855 	bl	800711c <HAL_GPIO_WritePin>
            break;
 8001072:	e046      	b.n	8001102 <main+0x45e>

          case 'c': // multiplexer Y -> 0
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	4825      	ldr	r0, [pc, #148]	; (8001110 <main+0x46c>)
 800107a:	f006 f84f 	bl	800711c <HAL_GPIO_WritePin>
            break;
 800107e:	e040      	b.n	8001102 <main+0x45e>

          case 'd': // multiplexer Y -> 1
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	2110      	movs	r1, #16
 8001084:	4822      	ldr	r0, [pc, #136]	; (8001110 <main+0x46c>)
 8001086:	f006 f849 	bl	800711c <HAL_GPIO_WritePin>
            break;
 800108a:	e03a      	b.n	8001102 <main+0x45e>

          case 'e': // multiplexer Z -> 0
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2101      	movs	r1, #1
 8001090:	4820      	ldr	r0, [pc, #128]	; (8001114 <main+0x470>)
 8001092:	f006 f843 	bl	800711c <HAL_GPIO_WritePin>
            break;
 8001096:	e034      	b.n	8001102 <main+0x45e>

          case 'f': // multiplexer Z -> 1
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2101      	movs	r1, #1
 800109c:	481d      	ldr	r0, [pc, #116]	; (8001114 <main+0x470>)
 800109e:	f006 f83d 	bl	800711c <HAL_GPIO_WritePin>
            break;
 80010a2:	e02e      	b.n	8001102 <main+0x45e>

          case 'p':
            floating_point_values = !floating_point_values;
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <main+0x474>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bf14      	ite	ne
 80010ac:	2301      	movne	r3, #1
 80010ae:	2300      	moveq	r3, #0
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f083 0301 	eor.w	r3, r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <main+0x474>)
 80010c0:	701a      	strb	r2, [r3, #0]
            break;
 80010c2:	e01e      	b.n	8001102 <main+0x45e>

         // Numbers reserved for SPS values
          case '0':
            //set SPS to 5
            setNewSPStoAllADCs(SPS_VALUE_5);
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <main+0x478>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fd53 	bl	8002b74 <setNewSPStoAllADCs>
            break;
 80010ce:	e018      	b.n	8001102 <main+0x45e>
          case '1':
            //set SPS to 20
            setNewSPStoAllADCs(SPS_VALUE_20);
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <main+0x47c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fd4d 	bl	8002b74 <setNewSPStoAllADCs>
            break;
 80010da:	e012      	b.n	8001102 <main+0x45e>
          case '2':
            //set SPS to 100
            setNewSPStoAllADCs(SPS_VALUE_100);
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <main+0x480>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f001 fd47 	bl	8002b74 <setNewSPStoAllADCs>
            break;
 80010e6:	e00c      	b.n	8001102 <main+0x45e>
          case '3':
            //set SPS to 500
            setNewSPStoAllADCs(SPS_VALUE_500);
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <main+0x484>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fd41 	bl	8002b74 <setNewSPStoAllADCs>
            break;
 80010f2:	e006      	b.n	8001102 <main+0x45e>
          case '4':
            //set SPS to 1000
            setNewSPStoAllADCs(SPS_VALUE_1000);
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <main+0x488>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fd3b 	bl	8002b74 <setNewSPStoAllADCs>
            break;
 80010fe:	e000      	b.n	8001102 <main+0x45e>
          default:
            break;
 8001100:	bf00      	nop
        }
        uartNewCommand = false;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <main+0x48c>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
      if(spiCommonBufferCounter < findMin(spi1ValuesBufferCounter,spi2ValuesBufferCounter,spi4ValuesBufferCounter)){
 8001108:	e669      	b.n	8000dde <main+0x13a>
 800110a:	bf00      	nop
 800110c:	58020000 	.word	0x58020000
 8001110:	58020800 	.word	0x58020800
 8001114:	58020400 	.word	0x58020400
 8001118:	2400894f 	.word	0x2400894f
 800111c:	24000000 	.word	0x24000000
 8001120:	24000001 	.word	0x24000001
 8001124:	24000002 	.word	0x24000002
 8001128:	24000003 	.word	0x24000003
 800112c:	24000004 	.word	0x24000004
 8001130:	2400894e 	.word	0x2400894e

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b09c      	sub	sp, #112	; 0x70
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	224c      	movs	r2, #76	; 0x4c
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f013 fc04 	bl	8014950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2220      	movs	r2, #32
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f013 fbfe 	bl	8014950 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001154:	4b33      	ldr	r3, [pc, #204]	; (8001224 <SystemClock_Config+0xf0>)
 8001156:	f04f 32ff 	mov.w	r2, #4294967295
 800115a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800115e:	2002      	movs	r0, #2
 8001160:	f006 f82a 	bl	80071b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001164:	2300      	movs	r3, #0
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <SystemClock_Config+0xf4>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a2e      	ldr	r2, [pc, #184]	; (8001228 <SystemClock_Config+0xf4>)
 800116e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <SystemClock_Config+0xf4>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001180:	bf00      	nop
 8001182:	4b29      	ldr	r3, [pc, #164]	; (8001228 <SystemClock_Config+0xf4>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800118a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800118e:	d1f8      	bne.n	8001182 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001190:	4b24      	ldr	r3, [pc, #144]	; (8001224 <SystemClock_Config+0xf0>)
 8001192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001194:	4a23      	ldr	r2, [pc, #140]	; (8001224 <SystemClock_Config+0xf0>)
 8001196:	f023 0303 	bic.w	r3, r3, #3
 800119a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119c:	2302      	movs	r3, #2
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a4:	2340      	movs	r3, #64	; 0x40
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a8:	2302      	movs	r3, #2
 80011aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ac:	2300      	movs	r3, #0
 80011ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011b0:	2304      	movs	r3, #4
 80011b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 80011b4:	2323      	movs	r3, #35	; 0x23
 80011b6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011c4:	230c      	movs	r3, #12
 80011c6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	4618      	mov	r0, r3
 80011d6:	f006 f829 	bl	800722c <HAL_RCC_OscConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80011e0:	f001 f848 	bl	8002274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e4:	233f      	movs	r3, #63	; 0x3f
 80011e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e8:	2303      	movs	r3, #3
 80011ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011f4:	2340      	movs	r3, #64	; 0x40
 80011f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011f8:	2340      	movs	r3, #64	; 0x40
 80011fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001200:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001202:	2340      	movs	r3, #64	; 0x40
 8001204:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2107      	movs	r1, #7
 800120a:	4618      	mov	r0, r3
 800120c:	f006 fc14 	bl	8007a38 <HAL_RCC_ClockConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001216:	f001 f82d 	bl	8002274 <Error_Handler>
  }
}
 800121a:	bf00      	nop
 800121c:	3770      	adds	r7, #112	; 0x70
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	58024400 	.word	0x58024400
 8001228:	58024800 	.word	0x58024800

0800122c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0ae      	sub	sp, #184	; 0xb8
 8001230:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	22b8      	movs	r2, #184	; 0xb8
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f013 fb89 	bl	8014950 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <PeriphCommonClock_Config+0x60>)
 8001240:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001242:	2304      	movs	r3, #4
 8001244:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 8;
 8001246:	2308      	movs	r3, #8
 8001248:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800124a:	2302      	movs	r3, #2
 800124c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800124e:	2302      	movs	r3, #2
 8001250:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001252:	2302      	movs	r3, #2
 8001254:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001256:	23c0      	movs	r3, #192	; 0xc0
 8001258:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8001262:	2302      	movs	r3, #2
 8001264:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800126a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800126c:	2300      	movs	r3, #0
 800126e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4618      	mov	r0, r3
 8001274:	f006 ff6c 	bl	8008150 <HAL_RCCEx_PeriphCLKConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800127e:	f000 fff9 	bl	8002274 <Error_Handler>
  }
}
 8001282:	bf00      	nop
 8001284:	37b8      	adds	r7, #184	; 0xb8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	81010000 	.word	0x81010000

08001290 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <MX_SDMMC1_SD_Init+0x34>)
 8001296:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <MX_SDMMC1_SD_Init+0x38>)
 8001298:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <MX_SDMMC1_SD_Init+0x34>)
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <MX_SDMMC1_SD_Init+0x34>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <MX_SDMMC1_SD_Init+0x34>)
 80012a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ac:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <MX_SDMMC1_SD_Init+0x34>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 64;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <MX_SDMMC1_SD_Init+0x34>)
 80012b6:	2240      	movs	r2, #64	; 0x40
 80012b8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	24008214 	.word	0x24008214
 80012c8:	52007000 	.word	0x52007000

080012cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012d0:	4b28      	ldr	r3, [pc, #160]	; (8001374 <MX_SPI1_Init+0xa8>)
 80012d2:	4a29      	ldr	r2, [pc, #164]	; (8001378 <MX_SPI1_Init+0xac>)
 80012d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <MX_SPI1_Init+0xa8>)
 80012d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012de:	4b25      	ldr	r3, [pc, #148]	; (8001374 <MX_SPI1_Init+0xa8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <MX_SPI1_Init+0xa8>)
 80012e6:	2207      	movs	r2, #7
 80012e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012ea:	4b22      	ldr	r3, [pc, #136]	; (8001374 <MX_SPI1_Init+0xa8>)
 80012ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_SPI1_Init+0xa8>)
 80012f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_SPI1_Init+0xa8>)
 80012fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001300:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <MX_SPI1_Init+0xa8>)
 8001304:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001308:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_SPI1_Init+0xa8>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_SPI1_Init+0xa8>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_SPI1_Init+0xa8>)
 8001318:	2200      	movs	r2, #0
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_SPI1_Init+0xa8>)
 800131e:	2200      	movs	r2, #0
 8001320:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_SPI1_Init+0xa8>)
 8001324:	2200      	movs	r2, #0
 8001326:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_SPI1_Init+0xa8>)
 800132a:	2200      	movs	r2, #0
 800132c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_SPI1_Init+0xa8>)
 8001330:	2200      	movs	r2, #0
 8001332:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_SPI1_Init+0xa8>)
 8001336:	2200      	movs	r2, #0
 8001338:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_SPI1_Init+0xa8>)
 800133c:	2200      	movs	r2, #0
 800133e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_SPI1_Init+0xa8>)
 8001342:	2200      	movs	r2, #0
 8001344:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <MX_SPI1_Init+0xa8>)
 8001348:	2200      	movs	r2, #0
 800134a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_SPI1_Init+0xa8>)
 800134e:	2200      	movs	r2, #0
 8001350:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <MX_SPI1_Init+0xa8>)
 8001354:	2200      	movs	r2, #0
 8001356:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_SPI1_Init+0xa8>)
 800135a:	2200      	movs	r2, #0
 800135c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_SPI1_Init+0xa8>)
 8001360:	f00a fc9c 	bl	800bc9c <HAL_SPI_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800136a:	f000 ff83 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	24008290 	.word	0x24008290
 8001378:	40013000 	.word	0x40013000

0800137c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001380:	4b28      	ldr	r3, [pc, #160]	; (8001424 <MX_SPI2_Init+0xa8>)
 8001382:	4a29      	ldr	r2, [pc, #164]	; (8001428 <MX_SPI2_Init+0xac>)
 8001384:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001386:	4b27      	ldr	r3, [pc, #156]	; (8001424 <MX_SPI2_Init+0xa8>)
 8001388:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800138c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800138e:	4b25      	ldr	r3, [pc, #148]	; (8001424 <MX_SPI2_Init+0xa8>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001394:	4b23      	ldr	r3, [pc, #140]	; (8001424 <MX_SPI2_Init+0xa8>)
 8001396:	2207      	movs	r2, #7
 8001398:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800139a:	4b22      	ldr	r3, [pc, #136]	; (8001424 <MX_SPI2_Init+0xa8>)
 800139c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <MX_SPI2_Init+0xa8>)
 80013a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <MX_SPI2_Init+0xa8>)
 80013ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <MX_SPI2_Init+0xa8>)
 80013b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_SPI2_Init+0xa8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_SPI2_Init+0xa8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <MX_SPI2_Init+0xa8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <MX_SPI2_Init+0xa8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_SPI2_Init+0xa8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <MX_SPI2_Init+0xa8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_SPI2_Init+0xa8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_SPI2_Init+0xa8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_SPI2_Init+0xa8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_SPI2_Init+0xa8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_SPI2_Init+0xa8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_SPI2_Init+0xa8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_SPI2_Init+0xa8>)
 8001404:	2200      	movs	r2, #0
 8001406:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_SPI2_Init+0xa8>)
 800140a:	2200      	movs	r2, #0
 800140c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_SPI2_Init+0xa8>)
 8001410:	f00a fc44 	bl	800bc9c <HAL_SPI_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800141a:	f000 ff2b 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	24008318 	.word	0x24008318
 8001428:	40003800 	.word	0x40003800

0800142c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001430:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <MX_SPI4_Init+0xa8>)
 8001432:	4a29      	ldr	r2, [pc, #164]	; (80014d8 <MX_SPI4_Init+0xac>)
 8001434:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001436:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <MX_SPI4_Init+0xa8>)
 8001438:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800143c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800143e:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <MX_SPI4_Init+0xa8>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <MX_SPI4_Init+0xa8>)
 8001446:	2207      	movs	r2, #7
 8001448:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800144a:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <MX_SPI4_Init+0xa8>)
 800144c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001450:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <MX_SPI4_Init+0xa8>)
 8001454:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001458:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <MX_SPI4_Init+0xa8>)
 800145c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001460:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_SPI4_Init+0xa8>)
 8001464:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001468:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_SPI4_Init+0xa8>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <MX_SPI4_Init+0xa8>)
 8001472:	2200      	movs	r2, #0
 8001474:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_SPI4_Init+0xa8>)
 8001478:	2200      	movs	r2, #0
 800147a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_SPI4_Init+0xa8>)
 800147e:	2200      	movs	r2, #0
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_SPI4_Init+0xa8>)
 8001484:	2200      	movs	r2, #0
 8001486:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <MX_SPI4_Init+0xa8>)
 800148a:	2200      	movs	r2, #0
 800148c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_SPI4_Init+0xa8>)
 8001490:	2200      	movs	r2, #0
 8001492:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_SPI4_Init+0xa8>)
 8001496:	2200      	movs	r2, #0
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_SPI4_Init+0xa8>)
 800149c:	2200      	movs	r2, #0
 800149e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_SPI4_Init+0xa8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_SPI4_Init+0xa8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_SPI4_Init+0xa8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_SPI4_Init+0xa8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_SPI4_Init+0xa8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_SPI4_Init+0xa8>)
 80014c0:	f00a fbec 	bl	800bc9c <HAL_SPI_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80014ca:	f000 fed3 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	240083a0 	.word	0x240083a0
 80014d8:	40013400 	.word	0x40013400

080014dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b09c      	sub	sp, #112	; 0x70
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	615a      	str	r2, [r3, #20]
 800150e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2234      	movs	r2, #52	; 0x34
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f013 fa1a 	bl	8014950 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800151c:	4b43      	ldr	r3, [pc, #268]	; (800162c <MX_TIM1_Init+0x150>)
 800151e:	4a44      	ldr	r2, [pc, #272]	; (8001630 <MX_TIM1_Init+0x154>)
 8001520:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001522:	4b42      	ldr	r3, [pc, #264]	; (800162c <MX_TIM1_Init+0x150>)
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b40      	ldr	r3, [pc, #256]	; (800162c <MX_TIM1_Init+0x150>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800152e:	4b3f      	ldr	r3, [pc, #252]	; (800162c <MX_TIM1_Init+0x150>)
 8001530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001534:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <MX_TIM1_Init+0x150>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800153c:	4b3b      	ldr	r3, [pc, #236]	; (800162c <MX_TIM1_Init+0x150>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b3a      	ldr	r3, [pc, #232]	; (800162c <MX_TIM1_Init+0x150>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001548:	4838      	ldr	r0, [pc, #224]	; (800162c <MX_TIM1_Init+0x150>)
 800154a:	f00b fbfc 	bl	800cd46 <HAL_TIM_Base_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001554:	f000 fe8e 	bl	8002274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800155e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001562:	4619      	mov	r1, r3
 8001564:	4831      	ldr	r0, [pc, #196]	; (800162c <MX_TIM1_Init+0x150>)
 8001566:	f00c f84f 	bl	800d608 <HAL_TIM_ConfigClockSource>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001570:	f000 fe80 	bl	8002274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001574:	482d      	ldr	r0, [pc, #180]	; (800162c <MX_TIM1_Init+0x150>)
 8001576:	f00b fcb5 	bl	800cee4 <HAL_TIM_PWM_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001580:	f000 fe78 	bl	8002274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001590:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001594:	4619      	mov	r1, r3
 8001596:	4825      	ldr	r0, [pc, #148]	; (800162c <MX_TIM1_Init+0x150>)
 8001598:	f00c ffba 	bl	800e510 <HAL_TIMEx_MasterConfigSynchronization>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80015a2:	f000 fe67 	bl	8002274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a6:	2360      	movs	r3, #96	; 0x60
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ae:	2300      	movs	r3, #0
 80015b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b2:	2300      	movs	r3, #0
 80015b4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015c6:	2200      	movs	r2, #0
 80015c8:	4619      	mov	r1, r3
 80015ca:	4818      	ldr	r0, [pc, #96]	; (800162c <MX_TIM1_Init+0x150>)
 80015cc:	f00b ff08 	bl	800d3e0 <HAL_TIM_PWM_ConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80015d6:	f000 fe4d 	bl	8002274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4807      	ldr	r0, [pc, #28]	; (800162c <MX_TIM1_Init+0x150>)
 8001610:	f00d f80c 	bl	800e62c <HAL_TIMEx_ConfigBreakDeadTime>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800161a:	f000 fe2b 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <MX_TIM1_Init+0x150>)
 8001620:	f001 ff56 	bl	80034d0 <HAL_TIM_MspPostInit>

}
 8001624:	bf00      	nop
 8001626:	3770      	adds	r7, #112	; 0x70
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	240086f8 	.word	0x240086f8
 8001630:	40010000 	.word	0x40010000

08001634 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08c      	sub	sp, #48	; 0x30
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164a:	f107 0310 	add.w	r3, r7, #16
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001656:	463b      	mov	r3, r7
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001662:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <MX_TIM2_Init+0xe0>)
 8001664:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001668:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800166a:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <MX_TIM2_Init+0xe0>)
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <MX_TIM2_Init+0xe0>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001676:	4b27      	ldr	r3, [pc, #156]	; (8001714 <MX_TIM2_Init+0xe0>)
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <MX_TIM2_Init+0xe0>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <MX_TIM2_Init+0xe0>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800168a:	4822      	ldr	r0, [pc, #136]	; (8001714 <MX_TIM2_Init+0xe0>)
 800168c:	f00b fb5b 	bl	800cd46 <HAL_TIM_Base_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001696:	f000 fded 	bl	8002274 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800169a:	481e      	ldr	r0, [pc, #120]	; (8001714 <MX_TIM2_Init+0xe0>)
 800169c:	f00b fc83 	bl	800cfa6 <HAL_TIM_IC_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80016a6:	f000 fde5 	bl	8002274 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80016aa:	2307      	movs	r3, #7
 80016ac:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	4816      	ldr	r0, [pc, #88]	; (8001714 <MX_TIM2_Init+0xe0>)
 80016ba:	f00c f89d 	bl	800d7f8 <HAL_TIM_SlaveConfigSynchro>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80016c4:	f000 fdd6 	bl	8002274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	4619      	mov	r1, r3
 80016d6:	480f      	ldr	r0, [pc, #60]	; (8001714 <MX_TIM2_Init+0xe0>)
 80016d8:	f00c ff1a 	bl	800e510 <HAL_TIMEx_MasterConfigSynchronization>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80016e2:	f000 fdc7 	bl	8002274 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016ea:	2301      	movs	r3, #1
 80016ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016f6:	463b      	mov	r3, r7
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_TIM2_Init+0xe0>)
 80016fe:	f00b fdd2 	bl	800d2a6 <HAL_TIM_IC_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001708:	f000 fdb4 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	3730      	adds	r7, #48	; 0x30
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	24008744 	.word	0x24008744

08001718 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800171c:	4b10      	ldr	r3, [pc, #64]	; (8001760 <MX_TIM16_Init+0x48>)
 800171e:	4a11      	ldr	r2, [pc, #68]	; (8001764 <MX_TIM16_Init+0x4c>)
 8001720:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 28000-1;
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <MX_TIM16_Init+0x48>)
 8001724:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8001728:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <MX_TIM16_Init+0x48>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <MX_TIM16_Init+0x48>)
 8001732:	f242 720f 	movw	r2, #9999	; 0x270f
 8001736:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_TIM16_Init+0x48>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <MX_TIM16_Init+0x48>)
 8001740:	2200      	movs	r2, #0
 8001742:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <MX_TIM16_Init+0x48>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_TIM16_Init+0x48>)
 800174c:	f00b fafb 	bl	800cd46 <HAL_TIM_Base_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001756:	f000 fd8d 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	24008790 	.word	0x24008790
 8001764:	40014400 	.word	0x40014400

08001768 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800176c:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <MX_UART4_Init+0x90>)
 800176e:	4a23      	ldr	r2, [pc, #140]	; (80017fc <MX_UART4_Init+0x94>)
 8001770:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 3000000;
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <MX_UART4_Init+0x90>)
 8001774:	4a22      	ldr	r2, [pc, #136]	; (8001800 <MX_UART4_Init+0x98>)
 8001776:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <MX_UART4_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MX_UART4_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_UART4_Init+0x90>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <MX_UART4_Init+0x90>)
 800178c:	220c      	movs	r2, #12
 800178e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_UART4_Init+0x90>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <MX_UART4_Init+0x90>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_UART4_Init+0x90>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_UART4_Init+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_UART4_Init+0x90>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017ae:	4812      	ldr	r0, [pc, #72]	; (80017f8 <MX_UART4_Init+0x90>)
 80017b0:	f00c fffa 	bl	800e7a8 <HAL_UART_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_UART4_Init+0x56>
  {
    Error_Handler();
 80017ba:	f000 fd5b 	bl	8002274 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017be:	2100      	movs	r1, #0
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <MX_UART4_Init+0x90>)
 80017c2:	f00f fb92 	bl	8010eea <HAL_UARTEx_SetTxFifoThreshold>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 80017cc:	f000 fd52 	bl	8002274 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d0:	2100      	movs	r1, #0
 80017d2:	4809      	ldr	r0, [pc, #36]	; (80017f8 <MX_UART4_Init+0x90>)
 80017d4:	f00f fbc7 	bl	8010f66 <HAL_UARTEx_SetRxFifoThreshold>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 80017de:	f000 fd49 	bl	8002274 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_UART4_Init+0x90>)
 80017e4:	f00f fb48 	bl	8010e78 <HAL_UARTEx_DisableFifoMode>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 80017ee:	f000 fd41 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	240087dc 	.word	0x240087dc
 80017fc:	40004c00 	.word	0x40004c00
 8001800:	002dc6c0 	.word	0x002dc6c0

08001804 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <MX_DMA_Init+0xbc>)
 800180c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001810:	4a2b      	ldr	r2, [pc, #172]	; (80018c0 <MX_DMA_Init+0xbc>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800181a:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <MX_DMA_Init+0xbc>)
 800181c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <MX_DMA_Init+0xbc>)
 800182a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800182e:	4a24      	ldr	r2, [pc, #144]	; (80018c0 <MX_DMA_Init+0xbc>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <MX_DMA_Init+0xbc>)
 800183a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	200b      	movs	r0, #11
 800184c:	f002 fb87 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001850:	200b      	movs	r0, #11
 8001852:	f002 fb9e 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	200c      	movs	r0, #12
 800185c:	f002 fb7f 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001860:	200c      	movs	r0, #12
 8001862:	f002 fb96 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	200d      	movs	r0, #13
 800186c:	f002 fb77 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001870:	200d      	movs	r0, #13
 8001872:	f002 fb8e 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	200e      	movs	r0, #14
 800187c:	f002 fb6f 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001880:	200e      	movs	r0, #14
 8001882:	f002 fb86 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	200f      	movs	r0, #15
 800188c:	f002 fb67 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001890:	200f      	movs	r0, #15
 8001892:	f002 fb7e 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	202f      	movs	r0, #47	; 0x2f
 800189c:	f002 fb5f 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80018a0:	202f      	movs	r0, #47	; 0x2f
 80018a2:	f002 fb76 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	2038      	movs	r0, #56	; 0x38
 80018ac:	f002 fb57 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018b0:	2038      	movs	r0, #56	; 0x38
 80018b2:	f002 fb6e 	bl	8003f92 <HAL_NVIC_EnableIRQ>

}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	58024400 	.word	0x58024400

080018c4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
 80018d8:	615a      	str	r2, [r3, #20]
 80018da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80018dc:	4b20      	ldr	r3, [pc, #128]	; (8001960 <MX_FMC_Init+0x9c>)
 80018de:	4a21      	ldr	r2, [pc, #132]	; (8001964 <MX_FMC_Init+0xa0>)
 80018e0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80018e2:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <MX_FMC_Init+0x9c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <MX_FMC_Init+0x9c>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <MX_FMC_Init+0x9c>)
 80018f0:	2208      	movs	r2, #8
 80018f2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <MX_FMC_Init+0x9c>)
 80018f6:	2210      	movs	r2, #16
 80018f8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <MX_FMC_Init+0x9c>)
 80018fc:	2240      	movs	r2, #64	; 0x40
 80018fe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <MX_FMC_Init+0x9c>)
 8001902:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001906:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_FMC_Init+0x9c>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_FMC_Init+0x9c>)
 8001910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001914:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <MX_FMC_Init+0x9c>)
 8001918:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800191c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <MX_FMC_Init+0x9c>)
 8001920:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001926:	2302      	movs	r3, #2
 8001928:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 800192a:	2309      	movs	r3, #9
 800192c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 800192e:	2306      	movs	r3, #6
 8001930:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 8001932:	2309      	movs	r3, #9
 8001934:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
 8001936:	2304      	movs	r3, #4
 8001938:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 800193a:	2303      	movs	r3, #3
 800193c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 800193e:	2303      	movs	r3, #3
 8001940:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	4619      	mov	r1, r3
 8001946:	4806      	ldr	r0, [pc, #24]	; (8001960 <MX_FMC_Init+0x9c>)
 8001948:	f00a f90e 	bl	800bb68 <HAL_SDRAM_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8001952:	f000 fc8f 	bl	8002274 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001956:	bf00      	nop
 8001958:	3720      	adds	r7, #32
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	240088e4 	.word	0x240088e4
 8001964:	52004140 	.word	0x52004140

08001968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	; 0x38
 800196c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800197e:	4b7d      	ldr	r3, [pc, #500]	; (8001b74 <MX_GPIO_Init+0x20c>)
 8001980:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001984:	4a7b      	ldr	r2, [pc, #492]	; (8001b74 <MX_GPIO_Init+0x20c>)
 8001986:	f043 0310 	orr.w	r3, r3, #16
 800198a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800198e:	4b79      	ldr	r3, [pc, #484]	; (8001b74 <MX_GPIO_Init+0x20c>)
 8001990:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	623b      	str	r3, [r7, #32]
 800199a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199c:	4b75      	ldr	r3, [pc, #468]	; (8001b74 <MX_GPIO_Init+0x20c>)
 800199e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019a2:	4a74      	ldr	r2, [pc, #464]	; (8001b74 <MX_GPIO_Init+0x20c>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80019ac:	4b71      	ldr	r3, [pc, #452]	; (8001b74 <MX_GPIO_Init+0x20c>)
 80019ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ba:	4b6e      	ldr	r3, [pc, #440]	; (8001b74 <MX_GPIO_Init+0x20c>)
 80019bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019c0:	4a6c      	ldr	r2, [pc, #432]	; (8001b74 <MX_GPIO_Init+0x20c>)
 80019c2:	f043 0320 	orr.w	r3, r3, #32
 80019c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80019ca:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <MX_GPIO_Init+0x20c>)
 80019cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019d0:	f003 0320 	and.w	r3, r3, #32
 80019d4:	61bb      	str	r3, [r7, #24]
 80019d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019d8:	4b66      	ldr	r3, [pc, #408]	; (8001b74 <MX_GPIO_Init+0x20c>)
 80019da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019de:	4a65      	ldr	r2, [pc, #404]	; (8001b74 <MX_GPIO_Init+0x20c>)
 80019e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80019e8:	4b62      	ldr	r3, [pc, #392]	; (8001b74 <MX_GPIO_Init+0x20c>)
 80019ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <MX_GPIO_Init+0x20c>)
 80019f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019fc:	4a5d      	ldr	r2, [pc, #372]	; (8001b74 <MX_GPIO_Init+0x20c>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a06:	4b5b      	ldr	r3, [pc, #364]	; (8001b74 <MX_GPIO_Init+0x20c>)
 8001a08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a14:	4b57      	ldr	r3, [pc, #348]	; (8001b74 <MX_GPIO_Init+0x20c>)
 8001a16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a1a:	4a56      	ldr	r2, [pc, #344]	; (8001b74 <MX_GPIO_Init+0x20c>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <MX_GPIO_Init+0x20c>)
 8001a26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a32:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <MX_GPIO_Init+0x20c>)
 8001a34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a38:	4a4e      	ldr	r2, [pc, #312]	; (8001b74 <MX_GPIO_Init+0x20c>)
 8001a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a3e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a42:	4b4c      	ldr	r3, [pc, #304]	; (8001b74 <MX_GPIO_Init+0x20c>)
 8001a44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a50:	4b48      	ldr	r3, [pc, #288]	; (8001b74 <MX_GPIO_Init+0x20c>)
 8001a52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a56:	4a47      	ldr	r2, [pc, #284]	; (8001b74 <MX_GPIO_Init+0x20c>)
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a60:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <MX_GPIO_Init+0x20c>)
 8001a62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2110      	movs	r1, #16
 8001a72:	4841      	ldr	r0, [pc, #260]	; (8001b78 <MX_GPIO_Init+0x210>)
 8001a74:	f005 fb52 	bl	800711c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MULT_IN_X_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 8001a7e:	483f      	ldr	r0, [pc, #252]	; (8001b7c <MX_GPIO_Init+0x214>)
 8001a80:	f005 fb4c 	bl	800711c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MULT_IN_Y_GPIO_Port, MULT_IN_Y_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2110      	movs	r1, #16
 8001a88:	483d      	ldr	r0, [pc, #244]	; (8001b80 <MX_GPIO_Init+0x218>)
 8001a8a:	f005 fb47 	bl	800711c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MULT_IN_Z_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f241 0101 	movw	r1, #4097	; 0x1001
 8001a94:	483b      	ldr	r0, [pc, #236]	; (8001b84 <MX_GPIO_Init+0x21c>)
 8001a96:	f005 fb41 	bl	800711c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10|USB_C_Reset_Pin|USB_C_Alert_Pin, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 8001aa0:	4839      	ldr	r0, [pc, #228]	; (8001b88 <MX_GPIO_Init+0x220>)
 8001aa2:	f005 fb3b 	bl	800711c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aa6:	2310      	movs	r3, #16
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aba:	4619      	mov	r1, r3
 8001abc:	482e      	ldr	r0, [pc, #184]	; (8001b78 <MX_GPIO_Init+0x210>)
 8001abe:	f005 f97d 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001ac2:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ac8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	482c      	ldr	r0, [pc, #176]	; (8001b8c <MX_GPIO_Init+0x224>)
 8001ada:	f005 f96f 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : MULT_IN_X_Pin PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = MULT_IN_X_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ade:	f44f 53f1 	mov.w	r3, #7712	; 0x1e20
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af4:	4619      	mov	r1, r3
 8001af6:	4821      	ldr	r0, [pc, #132]	; (8001b7c <MX_GPIO_Init+0x214>)
 8001af8:	f005 f960 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : MULT_IN_Y_Pin */
  GPIO_InitStruct.Pin = MULT_IN_Y_Pin;
 8001afc:	2310      	movs	r3, #16
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MULT_IN_Y_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b10:	4619      	mov	r1, r3
 8001b12:	481b      	ldr	r0, [pc, #108]	; (8001b80 <MX_GPIO_Init+0x218>)
 8001b14:	f005 f952 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : MULT_IN_Z_Pin PB12 */
  GPIO_InitStruct.Pin = MULT_IN_Z_Pin|GPIO_PIN_12;
 8001b18:	f241 0301 	movw	r3, #4097	; 0x1001
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4814      	ldr	r0, [pc, #80]	; (8001b84 <MX_GPIO_Init+0x21c>)
 8001b32:	f005 f943 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b36:	2380      	movs	r3, #128	; 0x80
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b46:	4619      	mov	r1, r3
 8001b48:	4811      	ldr	r0, [pc, #68]	; (8001b90 <MX_GPIO_Init+0x228>)
 8001b4a:	f005 f937 	bl	8006dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 USB_C_Reset_Pin USB_C_Alert_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|USB_C_Reset_Pin|USB_C_Alert_Pin;
 8001b4e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b64:	4619      	mov	r1, r3
 8001b66:	4808      	ldr	r0, [pc, #32]	; (8001b88 <MX_GPIO_Init+0x220>)
 8001b68:	f005 f928 	bl	8006dbc <HAL_GPIO_Init>

}
 8001b6c:	bf00      	nop
 8001b6e:	3738      	adds	r7, #56	; 0x38
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	58024400 	.word	0x58024400
 8001b78:	58021000 	.word	0x58021000
 8001b7c:	58020000 	.word	0x58020000
 8001b80:	58020800 	.word	0x58020800
 8001b84:	58020400 	.word	0x58020400
 8001b88:	58021800 	.word	0x58021800
 8001b8c:	58021400 	.word	0x58021400
 8001b90:	58020c00 	.word	0x58020c00

08001b94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// TODO:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	80fb      	strh	r3, [r7, #6]

  //SPI1 MISO
  if (GPIO_Pin == GPIO_PIN_6){
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	2b40      	cmp	r3, #64	; 0x40
 8001ba2:	d109      	bne.n	8001bb8 <HAL_GPIO_EXTI_Callback+0x24>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001ba4:	2017      	movs	r0, #23
 8001ba6:	f002 fa02 	bl	8003fae <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi1, pTxData, spi1Buffer, 4);
 8001baa:	2304      	movs	r3, #4
 8001bac:	4a27      	ldr	r2, [pc, #156]	; (8001c4c <HAL_GPIO_EXTI_Callback+0xb8>)
 8001bae:	4928      	ldr	r1, [pc, #160]	; (8001c50 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001bb0:	4828      	ldr	r0, [pc, #160]	; (8001c54 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001bb2:	f00a fb6b 	bl	800c28c <HAL_SPI_TransmitReceive_DMA>
  }
  else if (GPIO_Pin == GPIO_PIN_9){
    __NOP();
    //sendToSDcard = true;
  }
}
 8001bb6:	e044      	b.n	8001c42 <HAL_GPIO_EXTI_Callback+0xae>
  else if (GPIO_Pin == GPIO_PIN_14){
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bbe:	d109      	bne.n	8001bd4 <HAL_GPIO_EXTI_Callback+0x40>
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001bc0:	2028      	movs	r0, #40	; 0x28
 8001bc2:	f002 f9f4 	bl	8003fae <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi2, pTxData, spi2Buffer, 4);
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	4a23      	ldr	r2, [pc, #140]	; (8001c58 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001bca:	4921      	ldr	r1, [pc, #132]	; (8001c50 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001bcc:	4823      	ldr	r0, [pc, #140]	; (8001c5c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001bce:	f00a fb5d 	bl	800c28c <HAL_SPI_TransmitReceive_DMA>
}
 8001bd2:	e036      	b.n	8001c42 <HAL_GPIO_EXTI_Callback+0xae>
  else if (GPIO_Pin == GPIO_PIN_5){
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	d109      	bne.n	8001bee <HAL_GPIO_EXTI_Callback+0x5a>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001bda:	2017      	movs	r0, #23
 8001bdc:	f002 f9e7 	bl	8003fae <HAL_NVIC_DisableIRQ>
    HAL_SPI_TransmitReceive_DMA(&hspi4, pTxData, spi4Buffer, 4);
 8001be0:	2304      	movs	r3, #4
 8001be2:	4a1f      	ldr	r2, [pc, #124]	; (8001c60 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001be4:	491a      	ldr	r1, [pc, #104]	; (8001c50 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001be6:	481f      	ldr	r0, [pc, #124]	; (8001c64 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001be8:	f00a fb50 	bl	800c28c <HAL_SPI_TransmitReceive_DMA>
}
 8001bec:	e029      	b.n	8001c42 <HAL_GPIO_EXTI_Callback+0xae>
  else if (GPIO_Pin == GPIO_PIN_7){
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	2b80      	cmp	r3, #128	; 0x80
 8001bf2:	d121      	bne.n	8001c38 <HAL_GPIO_EXTI_Callback+0xa4>
    if(sdCardWriteEnable == false){
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	f083 0301 	eor.w	r3, r3, #1
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d011      	beq.n	8001c26 <HAL_GPIO_EXTI_Callback+0x92>
      sdCardOpenFileError = sd_card_open_file();
 8001c02:	f000 fb5d 	bl	80022c0 <sd_card_open_file>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <HAL_GPIO_EXTI_Callback+0xd8>)
 8001c0c:	701a      	strb	r2, [r3, #0]
      if (sdCardOpenFileError == true){
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_GPIO_EXTI_Callback+0xd8>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_EXTI_Callback+0x8a>
        setColorLED(red);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f000 f910 	bl	8001e3c <setColorLED>
}
 8001c1c:	e011      	b.n	8001c42 <HAL_GPIO_EXTI_Callback+0xae>
        sdCardWriteEnable = true;
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
}
 8001c24:	e00d      	b.n	8001c42 <HAL_GPIO_EXTI_Callback+0xae>
      sdCardWriteEnable = false;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
      sd_card_close_file();
 8001c2c:	f000 fbbc 	bl	80023a8 <sd_card_close_file>
      setColorLED(blue);
 8001c30:	2002      	movs	r0, #2
 8001c32:	f000 f903 	bl	8001e3c <setColorLED>
}
 8001c36:	e004      	b.n	8001c42 <HAL_GPIO_EXTI_Callback+0xae>
  else if (GPIO_Pin == GPIO_PIN_9){
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c3e:	d100      	bne.n	8001c42 <HAL_GPIO_EXTI_Callback+0xae>
    __NOP();
 8001c40:	bf00      	nop
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	24008940 	.word	0x24008940
 8001c50:	2400892c 	.word	0x2400892c
 8001c54:	24008290 	.word	0x24008290
 8001c58:	24008944 	.word	0x24008944
 8001c5c:	24008318 	.word	0x24008318
 8001c60:	24008948 	.word	0x24008948
 8001c64:	240083a0 	.word	0x240083a0
 8001c68:	24008928 	.word	0x24008928
 8001c6c:	2400892b 	.word	0x2400892b

08001c70 <HAL_SPI_TxRxCpltCallback>:

//FIXME: changed here from TxRx to Rx
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if (hspi == &hspi1){
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a3b      	ldr	r2, [pc, #236]	; (8001d68 <HAL_SPI_TxRxCpltCallback+0xf8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d121      	bne.n	8001cc4 <HAL_SPI_TxRxCpltCallback+0x54>
    spi1ValuesStorage[spi1ValuesBufferCounter] = (uint32_t)spi1Buffer[3] | ((uint32_t)spi1Buffer[2] << 8) | ((uint32_t)spi1Buffer[1] << 16) | ((uint32_t)spi1Buffer[0] << 24);;
 8001c80:	4b3a      	ldr	r3, [pc, #232]	; (8001d6c <HAL_SPI_TxRxCpltCallback+0xfc>)
 8001c82:	78db      	ldrb	r3, [r3, #3]
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <HAL_SPI_TxRxCpltCallback+0xfc>)
 8001c88:	789b      	ldrb	r3, [r3, #2]
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <HAL_SPI_TxRxCpltCallback+0xfc>)
 8001c90:	785b      	ldrb	r3, [r3, #1]
 8001c92:	041b      	lsls	r3, r3, #16
 8001c94:	ea42 0103 	orr.w	r1, r2, r3
 8001c98:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <HAL_SPI_TxRxCpltCallback+0xfc>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	061a      	lsls	r2, r3, #24
 8001c9e:	4b34      	ldr	r3, [pc, #208]	; (8001d70 <HAL_SPI_TxRxCpltCallback+0x100>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	4933      	ldr	r1, [pc, #204]	; (8001d74 <HAL_SPI_TxRxCpltCallback+0x104>)
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8001caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cae:	2240      	movs	r2, #64	; 0x40
 8001cb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cb4:	2017      	movs	r0, #23
 8001cb6:	f002 f96c 	bl	8003f92 <HAL_NVIC_EnableIRQ>
    spi1ValuesBufferCounter++;
 8001cba:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_SPI_TxRxCpltCallback+0x100>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	4a2b      	ldr	r2, [pc, #172]	; (8001d70 <HAL_SPI_TxRxCpltCallback+0x100>)
 8001cc2:	6013      	str	r3, [r2, #0]
  }

  if (hspi == &hspi2){
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a2c      	ldr	r2, [pc, #176]	; (8001d78 <HAL_SPI_TxRxCpltCallback+0x108>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d122      	bne.n	8001d12 <HAL_SPI_TxRxCpltCallback+0xa2>
    spi2ValuesStorage[spi2ValuesBufferCounter] = (uint32_t)spi2Buffer[3] | ((uint32_t)spi2Buffer[2] << 8) | ((uint32_t)spi2Buffer[1] << 16) | ((uint32_t)spi2Buffer[0] << 24);
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_SPI_TxRxCpltCallback+0x10c>)
 8001cce:	78db      	ldrb	r3, [r3, #3]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <HAL_SPI_TxRxCpltCallback+0x10c>)
 8001cd4:	789b      	ldrb	r3, [r3, #2]
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <HAL_SPI_TxRxCpltCallback+0x10c>)
 8001cdc:	785b      	ldrb	r3, [r3, #1]
 8001cde:	041b      	lsls	r3, r3, #16
 8001ce0:	ea42 0103 	orr.w	r1, r2, r3
 8001ce4:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <HAL_SPI_TxRxCpltCallback+0x10c>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	061a      	lsls	r2, r3, #24
 8001cea:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <HAL_SPI_TxRxCpltCallback+0x110>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	4924      	ldr	r1, [pc, #144]	; (8001d84 <HAL_SPI_TxRxCpltCallback+0x114>)
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8001cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d02:	2028      	movs	r0, #40	; 0x28
 8001d04:	f002 f945 	bl	8003f92 <HAL_NVIC_EnableIRQ>
    spi2ValuesBufferCounter++;
 8001d08:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_SPI_TxRxCpltCallback+0x110>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	4a1c      	ldr	r2, [pc, #112]	; (8001d80 <HAL_SPI_TxRxCpltCallback+0x110>)
 8001d10:	6013      	str	r3, [r2, #0]
  }

  if (hspi == &hspi4){
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_SPI_TxRxCpltCallback+0x118>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d121      	bne.n	8001d5e <HAL_SPI_TxRxCpltCallback+0xee>
    spi4ValuesStorage[spi4ValuesBufferCounter] = (uint32_t)spi4Buffer[3] | ((uint32_t)spi4Buffer[2] << 8) | ((uint32_t)spi4Buffer[1] << 16) | ((uint32_t)spi4Buffer[0] << 24);
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <HAL_SPI_TxRxCpltCallback+0x11c>)
 8001d1c:	78db      	ldrb	r3, [r3, #3]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <HAL_SPI_TxRxCpltCallback+0x11c>)
 8001d22:	789b      	ldrb	r3, [r3, #2]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	431a      	orrs	r2, r3
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_SPI_TxRxCpltCallback+0x11c>)
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	041b      	lsls	r3, r3, #16
 8001d2e:	ea42 0103 	orr.w	r1, r2, r3
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <HAL_SPI_TxRxCpltCallback+0x11c>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	061a      	lsls	r2, r3, #24
 8001d38:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_SPI_TxRxCpltCallback+0x120>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	4915      	ldr	r1, [pc, #84]	; (8001d94 <HAL_SPI_TxRxCpltCallback+0x124>)
 8001d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8001d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d48:	2220      	movs	r2, #32
 8001d4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d4e:	2017      	movs	r0, #23
 8001d50:	f002 f91f 	bl	8003f92 <HAL_NVIC_EnableIRQ>
    spi4ValuesBufferCounter++;
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <HAL_SPI_TxRxCpltCallback+0x120>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <HAL_SPI_TxRxCpltCallback+0x120>)
 8001d5c:	6013      	str	r3, [r2, #0]
  }
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	24008290 	.word	0x24008290
 8001d6c:	24008940 	.word	0x24008940
 8001d70:	24008930 	.word	0x24008930
 8001d74:	c0000000 	.word	0xc0000000
 8001d78:	24008318 	.word	0x24008318
 8001d7c:	24008944 	.word	0x24008944
 8001d80:	24008934 	.word	0x24008934
 8001d84:	c0000400 	.word	0xc0000400
 8001d88:	240083a0 	.word	0x240083a0
 8001d8c:	24008948 	.word	0x24008948
 8001d90:	24008938 	.word	0x24008938
 8001d94:	c0000800 	.word	0xc0000800

08001d98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if (huart == &huart4){
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_UART_RxCpltCallback+0x30>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d10b      	bne.n	8001dc0 <HAL_UART_RxCpltCallback+0x28>
    HAL_UART_Receive_IT (&huart4, rxUart4Buffer, 1);
 8001da8:	2201      	movs	r2, #1
 8001daa:	4908      	ldr	r1, [pc, #32]	; (8001dcc <HAL_UART_RxCpltCallback+0x34>)
 8001dac:	4806      	ldr	r0, [pc, #24]	; (8001dc8 <HAL_UART_RxCpltCallback+0x30>)
 8001dae:	f00c fde1 	bl	800e974 <HAL_UART_Receive_IT>
    uartCommand = rxUart4Buffer[0];
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_UART_RxCpltCallback+0x34>)
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_UART_RxCpltCallback+0x38>)
 8001db8:	701a      	strb	r2, [r3, #0]
    uartNewCommand = true;
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_UART_RxCpltCallback+0x3c>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
//  else if (huart == &huart5){
//      HAL_UART_Receive_IT (&huart5, rxUart5Buffer, 1);
//      uartCommand = rxUart5Buffer[0];
//      uartNewCommand = true;
//  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	240087dc 	.word	0x240087dc
 8001dcc:	2400894c 	.word	0x2400894c
 8001dd0:	2400894d 	.word	0x2400894d
 8001dd4:	2400894e 	.word	0x2400894e

08001dd8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if(htim == &htim16){
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a06      	ldr	r2, [pc, #24]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d104      	bne.n	8001df2 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8001de8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dec:	4804      	ldr	r0, [pc, #16]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001dee:	f005 f9ae 	bl	800714e <HAL_GPIO_TogglePin>
  }
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	24008790 	.word	0x24008790
 8001e00:	58020000 	.word	0x58020000

08001e04 <findMin>:

uint32_t findMin(uint32_t a, uint32_t b, uint32_t c) {
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
    uint32_t min = a;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	617b      	str	r3, [r7, #20]
    if (b < min) {
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d201      	bcs.n	8001e20 <findMin+0x1c>
        min = b;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	617b      	str	r3, [r7, #20]
    }
    if (c < min) {
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d201      	bcs.n	8001e2c <findMin+0x28>
        min = c;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	617b      	str	r3, [r7, #20]
    }
    return min;
 8001e2c:	697b      	ldr	r3, [r7, #20]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	371c      	adds	r7, #28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <setColorLED>:

void setColorLED(colorLED color){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  if(color == red){
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d112      	bne.n	8001e72 <setColorLED+0x36>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e52:	481f      	ldr	r0, [pc, #124]	; (8001ed0 <setColorLED+0x94>)
 8001e54:	f005 f962 	bl	800711c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e5e:	481c      	ldr	r0, [pc, #112]	; (8001ed0 <setColorLED+0x94>)
 8001e60:	f005 f95c 	bl	800711c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e64:	2200      	movs	r2, #0
 8001e66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e6a:	4819      	ldr	r0, [pc, #100]	; (8001ed0 <setColorLED+0x94>)
 8001e6c:	f005 f956 	bl	800711c <HAL_GPIO_WritePin>
  } else if (color == green){
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
  }
}
 8001e70:	e02a      	b.n	8001ec8 <setColorLED+0x8c>
  }else if(color == blue){
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d112      	bne.n	8001e9e <setColorLED+0x62>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e7e:	4814      	ldr	r0, [pc, #80]	; (8001ed0 <setColorLED+0x94>)
 8001e80:	f005 f94c 	bl	800711c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001e84:	2201      	movs	r2, #1
 8001e86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e8a:	4811      	ldr	r0, [pc, #68]	; (8001ed0 <setColorLED+0x94>)
 8001e8c:	f005 f946 	bl	800711c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e90:	2200      	movs	r2, #0
 8001e92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e96:	480e      	ldr	r0, [pc, #56]	; (8001ed0 <setColorLED+0x94>)
 8001e98:	f005 f940 	bl	800711c <HAL_GPIO_WritePin>
}
 8001e9c:	e014      	b.n	8001ec8 <setColorLED+0x8c>
  } else if (color == green){
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d111      	bne.n	8001ec8 <setColorLED+0x8c>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001eaa:	4809      	ldr	r0, [pc, #36]	; (8001ed0 <setColorLED+0x94>)
 8001eac:	f005 f936 	bl	800711c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb6:	4806      	ldr	r0, [pc, #24]	; (8001ed0 <setColorLED+0x94>)
 8001eb8:	f005 f930 	bl	800711c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ec2:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <setColorLED+0x94>)
 8001ec4:	f005 f92a 	bl	800711c <HAL_GPIO_WritePin>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	58020000 	.word	0x58020000

08001ed4 <readConfigFile>:

void readConfigFile(const char* filename) {
 8001ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ed8:	b088      	sub	sp, #32
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	466b      	mov	r3, sp
 8001ee0:	469a      	mov	sl, r3
  uint8_t bufferSize =128;
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	77fb      	strb	r3, [r7, #31]
  FRESULT result;
  char buffer[bufferSize];
 8001ee6:	7ffe      	ldrb	r6, [r7, #31]
 8001ee8:	4633      	mov	r3, r6
 8001eea:	3b01      	subs	r3, #1
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	b2f3      	uxtb	r3, r6
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	4698      	mov	r8, r3
 8001ef4:	4691      	mov	r9, r2
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f0a:	b2f3      	uxtb	r3, r6
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	461c      	mov	r4, r3
 8001f10:	4615      	mov	r5, r2
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	00eb      	lsls	r3, r5, #3
 8001f1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f20:	00e2      	lsls	r2, r4, #3
 8001f22:	4633      	mov	r3, r6
 8001f24:	3307      	adds	r3, #7
 8001f26:	08db      	lsrs	r3, r3, #3
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	ebad 0d03 	sub.w	sp, sp, r3
 8001f2e:	466b      	mov	r3, sp
 8001f30:	3300      	adds	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]

  // Open the file
  result = f_open(&SDFile, filename, FA_READ);
 8001f34:	2201      	movs	r2, #1
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4870      	ldr	r0, [pc, #448]	; (80020fc <readConfigFile+0x228>)
 8001f3a:	f011 ff25 	bl	8013d88 <f_open>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	74fb      	strb	r3, [r7, #19]
  if (result != FR_OK) {
      // Handle file open error
  }

  // Read and parse each line
  while (f_gets(buffer, sizeof(buffer), &SDFile) != NULL) {
 8001f42:	e0c7      	b.n	80020d4 <readConfigFile+0x200>
      // Split the line into key and value
      char* key = strtok(buffer, ": ");
 8001f44:	496e      	ldr	r1, [pc, #440]	; (8002100 <readConfigFile+0x22c>)
 8001f46:	6978      	ldr	r0, [r7, #20]
 8001f48:	f013 fb08 	bl	801555c <strtok>
 8001f4c:	60f8      	str	r0, [r7, #12]
      char* value = strtok(NULL, ": ");
 8001f4e:	496c      	ldr	r1, [pc, #432]	; (8002100 <readConfigFile+0x22c>)
 8001f50:	2000      	movs	r0, #0
 8001f52:	f013 fb03 	bl	801555c <strtok>
 8001f56:	60b8      	str	r0, [r7, #8]

      // Handle each key-value pair
      if (strcmp(key, "range_x") == 0) {
 8001f58:	496a      	ldr	r1, [pc, #424]	; (8002104 <readConfigFile+0x230>)
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f7fe f9c8 	bl	80002f0 <strcmp>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d104      	bne.n	8001f70 <readConfigFile+0x9c>
        // Save value for range_x
        range_x_value = value[0];
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	4b67      	ldr	r3, [pc, #412]	; (8002108 <readConfigFile+0x234>)
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	e0ab      	b.n	80020c8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "range_y") == 0) {
 8001f70:	4966      	ldr	r1, [pc, #408]	; (800210c <readConfigFile+0x238>)
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f7fe f9bc 	bl	80002f0 <strcmp>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d104      	bne.n	8001f88 <readConfigFile+0xb4>
        // Save value for range_y
        range_y_value = value[0];
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	781a      	ldrb	r2, [r3, #0]
 8001f82:	4b63      	ldr	r3, [pc, #396]	; (8002110 <readConfigFile+0x23c>)
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e09f      	b.n	80020c8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "range_z") == 0) {
 8001f88:	4962      	ldr	r1, [pc, #392]	; (8002114 <readConfigFile+0x240>)
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f7fe f9b0 	bl	80002f0 <strcmp>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d104      	bne.n	8001fa0 <readConfigFile+0xcc>
        // Save value for range_z
        range_z_value = value[0];
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	781a      	ldrb	r2, [r3, #0]
 8001f9a:	4b5f      	ldr	r3, [pc, #380]	; (8002118 <readConfigFile+0x244>)
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	e093      	b.n	80020c8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "sps") == 0) {
 8001fa0:	495e      	ldr	r1, [pc, #376]	; (800211c <readConfigFile+0x248>)
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7fe f9a4 	bl	80002f0 <strcmp>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d107      	bne.n	8001fbe <readConfigFile+0xea>
        // Save value for sps
        sps = atoi(value);
 8001fae:	68b8      	ldr	r0, [r7, #8]
 8001fb0:	f012 fca0 	bl	80148f4 <atoi>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	4b59      	ldr	r3, [pc, #356]	; (8002120 <readConfigFile+0x24c>)
 8001fba:	801a      	strh	r2, [r3, #0]
 8001fbc:	e084      	b.n	80020c8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "floating_point_values") == 0) {
 8001fbe:	4959      	ldr	r1, [pc, #356]	; (8002124 <readConfigFile+0x250>)
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f7fe f995 	bl	80002f0 <strcmp>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10b      	bne.n	8001fe4 <readConfigFile+0x110>
        // Save value for floating_point_values
        floating_point_values = atoi(value) != 0;
 8001fcc:	68b8      	ldr	r0, [r7, #8]
 8001fce:	f012 fc91 	bl	80148f4 <atoi>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4b52      	ldr	r3, [pc, #328]	; (8002128 <readConfigFile+0x254>)
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e071      	b.n	80020c8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "saving_to_sd_card") == 0) {
 8001fe4:	4951      	ldr	r1, [pc, #324]	; (800212c <readConfigFile+0x258>)
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7fe f982 	bl	80002f0 <strcmp>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10b      	bne.n	800200a <readConfigFile+0x136>
        // Save value for saving_to_sd_card
        saving_to_sd_card =  atoi(value) != 0;
 8001ff2:	68b8      	ldr	r0, [r7, #8]
 8001ff4:	f012 fc7e 	bl	80148f4 <atoi>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bf14      	ite	ne
 8001ffe:	2301      	movne	r3, #1
 8002000:	2300      	moveq	r3, #0
 8002002:	b2da      	uxtb	r2, r3
 8002004:	4b4a      	ldr	r3, [pc, #296]	; (8002130 <readConfigFile+0x25c>)
 8002006:	701a      	strb	r2, [r3, #0]
 8002008:	e05e      	b.n	80020c8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "gain_x") == 0) {
 800200a:	494a      	ldr	r1, [pc, #296]	; (8002134 <readConfigFile+0x260>)
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f7fe f96f 	bl	80002f0 <strcmp>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10a      	bne.n	800202e <readConfigFile+0x15a>
        // Save value for gain_x
        gain_x = atof(value);
 8002018:	68b8      	ldr	r0, [r7, #8]
 800201a:	f012 fc68 	bl	80148ee <atof>
 800201e:	eeb0 7b40 	vmov.f64	d7, d0
 8002022:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002026:	4b44      	ldr	r3, [pc, #272]	; (8002138 <readConfigFile+0x264>)
 8002028:	edc3 7a00 	vstr	s15, [r3]
 800202c:	e04c      	b.n	80020c8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "gain_y") == 0) {
 800202e:	4943      	ldr	r1, [pc, #268]	; (800213c <readConfigFile+0x268>)
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f7fe f95d 	bl	80002f0 <strcmp>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10a      	bne.n	8002052 <readConfigFile+0x17e>
        // Save value for gain_y
        gain_y = atof(value);
 800203c:	68b8      	ldr	r0, [r7, #8]
 800203e:	f012 fc56 	bl	80148ee <atof>
 8002042:	eeb0 7b40 	vmov.f64	d7, d0
 8002046:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800204a:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <readConfigFile+0x26c>)
 800204c:	edc3 7a00 	vstr	s15, [r3]
 8002050:	e03a      	b.n	80020c8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "gain_z") == 0) {
 8002052:	493c      	ldr	r1, [pc, #240]	; (8002144 <readConfigFile+0x270>)
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f7fe f94b 	bl	80002f0 <strcmp>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10a      	bne.n	8002076 <readConfigFile+0x1a2>
        // Save value for gain_z
        gain_z = atof(value);
 8002060:	68b8      	ldr	r0, [r7, #8]
 8002062:	f012 fc44 	bl	80148ee <atof>
 8002066:	eeb0 7b40 	vmov.f64	d7, d0
 800206a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800206e:	4b36      	ldr	r3, [pc, #216]	; (8002148 <readConfigFile+0x274>)
 8002070:	edc3 7a00 	vstr	s15, [r3]
 8002074:	e028      	b.n	80020c8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "offset_x") == 0) {
 8002076:	4935      	ldr	r1, [pc, #212]	; (800214c <readConfigFile+0x278>)
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7fe f939 	bl	80002f0 <strcmp>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d106      	bne.n	8002092 <readConfigFile+0x1be>
        // Save value for offset_x
        offset_x = atoi(value);
 8002084:	68b8      	ldr	r0, [r7, #8]
 8002086:	f012 fc35 	bl	80148f4 <atoi>
 800208a:	4603      	mov	r3, r0
 800208c:	4a30      	ldr	r2, [pc, #192]	; (8002150 <readConfigFile+0x27c>)
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	e01a      	b.n	80020c8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "offset_y") == 0) {
 8002092:	4930      	ldr	r1, [pc, #192]	; (8002154 <readConfigFile+0x280>)
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f7fe f92b 	bl	80002f0 <strcmp>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d106      	bne.n	80020ae <readConfigFile+0x1da>
        // Save value for offset_y
        offset_y = atoi(value);
 80020a0:	68b8      	ldr	r0, [r7, #8]
 80020a2:	f012 fc27 	bl	80148f4 <atoi>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4a2b      	ldr	r2, [pc, #172]	; (8002158 <readConfigFile+0x284>)
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	e00c      	b.n	80020c8 <readConfigFile+0x1f4>
      } else if (strcmp(key, "offset_z") == 0) {
 80020ae:	492b      	ldr	r1, [pc, #172]	; (800215c <readConfigFile+0x288>)
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f7fe f91d 	bl	80002f0 <strcmp>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <readConfigFile+0x1f4>
        // Save value for offset_z
        offset_z = atoi(value);
 80020bc:	68b8      	ldr	r0, [r7, #8]
 80020be:	f012 fc19 	bl	80148f4 <atoi>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4a26      	ldr	r2, [pc, #152]	; (8002160 <readConfigFile+0x28c>)
 80020c6:	6013      	str	r3, [r2, #0]
      }
      // Add more key comparisons as needed

      // Clear buffer for the next line
      memset(buffer, 0, sizeof(buffer));
 80020c8:	4633      	mov	r3, r6
 80020ca:	461a      	mov	r2, r3
 80020cc:	2100      	movs	r1, #0
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f012 fc3e 	bl	8014950 <memset>
  while (f_gets(buffer, sizeof(buffer), &SDFile) != NULL) {
 80020d4:	4633      	mov	r3, r6
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <readConfigFile+0x228>)
 80020d8:	4619      	mov	r1, r3
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f012 fb6e 	bl	80147bc <f_gets>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f47f af2e 	bne.w	8001f44 <readConfigFile+0x70>
  }

  // Close the file
  f_close(&SDFile);
 80020e8:	4804      	ldr	r0, [pc, #16]	; (80020fc <readConfigFile+0x228>)
 80020ea:	f012 fb3d 	bl	8014768 <f_close>
 80020ee:	46d5      	mov	sp, sl
}
 80020f0:	bf00      	nop
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020fa:	bf00      	nop
 80020fc:	24008bb8 	.word	0x24008bb8
 8002100:	08017bbc 	.word	0x08017bbc
 8002104:	08017bc0 	.word	0x08017bc0
 8002108:	24000005 	.word	0x24000005
 800210c:	08017bc8 	.word	0x08017bc8
 8002110:	24000006 	.word	0x24000006
 8002114:	08017bd0 	.word	0x08017bd0
 8002118:	24000007 	.word	0x24000007
 800211c:	08017bd8 	.word	0x08017bd8
 8002120:	24000008 	.word	0x24000008
 8002124:	08017bdc 	.word	0x08017bdc
 8002128:	2400894f 	.word	0x2400894f
 800212c:	08017bf4 	.word	0x08017bf4
 8002130:	24008950 	.word	0x24008950
 8002134:	08017c08 	.word	0x08017c08
 8002138:	24008954 	.word	0x24008954
 800213c:	08017c10 	.word	0x08017c10
 8002140:	24008958 	.word	0x24008958
 8002144:	08017c18 	.word	0x08017c18
 8002148:	2400895c 	.word	0x2400895c
 800214c:	08017c20 	.word	0x08017c20
 8002150:	24008960 	.word	0x24008960
 8002154:	08017c2c 	.word	0x08017c2c
 8002158:	24008964 	.word	0x24008964
 800215c:	08017c38 	.word	0x08017c38
 8002160:	24008968 	.word	0x24008968

08002164 <initialSetupADC>:

void initialSetupADC(void){
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
  if(range_x_value == 'H'){
 800216a:	4b37      	ldr	r3, [pc, #220]	; (8002248 <initialSetupADC+0xe4>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b48      	cmp	r3, #72	; 0x48
 8002170:	d105      	bne.n	800217e <initialSetupADC+0x1a>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002172:	2200      	movs	r2, #0
 8002174:	2120      	movs	r1, #32
 8002176:	4835      	ldr	r0, [pc, #212]	; (800224c <initialSetupADC+0xe8>)
 8002178:	f004 ffd0 	bl	800711c <HAL_GPIO_WritePin>
 800217c:	e004      	b.n	8002188 <initialSetupADC+0x24>
  }else{
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800217e:	2201      	movs	r2, #1
 8002180:	2120      	movs	r1, #32
 8002182:	4832      	ldr	r0, [pc, #200]	; (800224c <initialSetupADC+0xe8>)
 8002184:	f004 ffca 	bl	800711c <HAL_GPIO_WritePin>
  }
  if(range_y_value == 'H'){
 8002188:	4b31      	ldr	r3, [pc, #196]	; (8002250 <initialSetupADC+0xec>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b48      	cmp	r3, #72	; 0x48
 800218e:	d105      	bne.n	800219c <initialSetupADC+0x38>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8002190:	2200      	movs	r2, #0
 8002192:	2110      	movs	r1, #16
 8002194:	482f      	ldr	r0, [pc, #188]	; (8002254 <initialSetupADC+0xf0>)
 8002196:	f004 ffc1 	bl	800711c <HAL_GPIO_WritePin>
 800219a:	e004      	b.n	80021a6 <initialSetupADC+0x42>
  }else{
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800219c:	2201      	movs	r2, #1
 800219e:	2110      	movs	r1, #16
 80021a0:	482c      	ldr	r0, [pc, #176]	; (8002254 <initialSetupADC+0xf0>)
 80021a2:	f004 ffbb 	bl	800711c <HAL_GPIO_WritePin>
  }
  if(range_y_value == 'H'){
 80021a6:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <initialSetupADC+0xec>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b48      	cmp	r3, #72	; 0x48
 80021ac:	d105      	bne.n	80021ba <initialSetupADC+0x56>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2101      	movs	r1, #1
 80021b2:	4829      	ldr	r0, [pc, #164]	; (8002258 <initialSetupADC+0xf4>)
 80021b4:	f004 ffb2 	bl	800711c <HAL_GPIO_WritePin>
 80021b8:	e004      	b.n	80021c4 <initialSetupADC+0x60>
  }else{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80021ba:	2201      	movs	r2, #1
 80021bc:	2101      	movs	r1, #1
 80021be:	4826      	ldr	r0, [pc, #152]	; (8002258 <initialSetupADC+0xf4>)
 80021c0:	f004 ffac 	bl	800711c <HAL_GPIO_WritePin>
  }


  spi1_soft_reset();
 80021c4:	f000 fb7e 	bl	80028c4 <spi1_soft_reset>
  spi2_soft_reset();
 80021c8:	f000 fba2 	bl	8002910 <spi2_soft_reset>
  spi4_soft_reset();
 80021cc:	f000 fbc6 	bl	800295c <spi4_soft_reset>
  uint8_t spsHex = SPS_VALUE_5;
 80021d0:	4b22      	ldr	r3, [pc, #136]	; (800225c <initialSetupADC+0xf8>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	71fb      	strb	r3, [r7, #7]
  if (sps == 5){
 80021d6:	4b22      	ldr	r3, [pc, #136]	; (8002260 <initialSetupADC+0xfc>)
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	2b05      	cmp	r3, #5
 80021dc:	d103      	bne.n	80021e6 <initialSetupADC+0x82>
    spsHex = SPS_VALUE_5;
 80021de:	4b1f      	ldr	r3, [pc, #124]	; (800225c <initialSetupADC+0xf8>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	71fb      	strb	r3, [r7, #7]
 80021e4:	e020      	b.n	8002228 <initialSetupADC+0xc4>
  }else if(sps == 20){
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <initialSetupADC+0xfc>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	2b14      	cmp	r3, #20
 80021ec:	d103      	bne.n	80021f6 <initialSetupADC+0x92>
    spsHex = SPS_VALUE_20;
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <initialSetupADC+0x100>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	71fb      	strb	r3, [r7, #7]
 80021f4:	e018      	b.n	8002228 <initialSetupADC+0xc4>
  }else if(sps == 100){
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <initialSetupADC+0xfc>)
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d103      	bne.n	8002206 <initialSetupADC+0xa2>
    spsHex = SPS_VALUE_100;
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <initialSetupADC+0x104>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	71fb      	strb	r3, [r7, #7]
 8002204:	e010      	b.n	8002228 <initialSetupADC+0xc4>
  }else if(sps == 500){
 8002206:	4b16      	ldr	r3, [pc, #88]	; (8002260 <initialSetupADC+0xfc>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800220e:	d103      	bne.n	8002218 <initialSetupADC+0xb4>
    spsHex = SPS_VALUE_500;
 8002210:	4b16      	ldr	r3, [pc, #88]	; (800226c <initialSetupADC+0x108>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	71fb      	strb	r3, [r7, #7]
 8002216:	e007      	b.n	8002228 <initialSetupADC+0xc4>
  }else if(sps == 1000){
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <initialSetupADC+0xfc>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002220:	d102      	bne.n	8002228 <initialSetupADC+0xc4>
    spsHex = SPS_VALUE_1000;
 8002222:	4b13      	ldr	r3, [pc, #76]	; (8002270 <initialSetupADC+0x10c>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  }

  spi1_adc_init(spsHex);
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f8c6 	bl	80023bc <spi1_adc_init>
  spi2_adc_init(spsHex);
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f99a 	bl	800256c <spi2_adc_init>
  spi4_adc_init(spsHex);
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fa6e 	bl	800271c <spi4_adc_init>


}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	24000005 	.word	0x24000005
 800224c:	58020000 	.word	0x58020000
 8002250:	24000006 	.word	0x24000006
 8002254:	58020800 	.word	0x58020800
 8002258:	58020400 	.word	0x58020400
 800225c:	24000000 	.word	0x24000000
 8002260:	24000008 	.word	0x24000008
 8002264:	24000001 	.word	0x24000001
 8002268:	24000002 	.word	0x24000002
 800226c:	24000003 	.word	0x24000003
 8002270:	24000004 	.word	0x24000004

08002274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002278:	b672      	cpsid	i
}
 800227a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800227c:	e7fe      	b.n	800227c <Error_Handler+0x8>
	...

08002280 <sd_card_init>:
FILINFO fno;
uint8_t nameFileNumber = 1;
bool newMeasurement = false;

bool sd_card_init (void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
  bool initError = false;
 8002286:	2300      	movs	r3, #0
 8002288:	71fb      	strb	r3, [r7, #7]
  res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	4909      	ldr	r1, [pc, #36]	; (80022b4 <sd_card_init+0x34>)
 800228e:	480a      	ldr	r0, [pc, #40]	; (80022b8 <sd_card_init+0x38>)
 8002290:	f011 fd34 	bl	8013cfc <f_mount>
 8002294:	4603      	mov	r3, r0
 8002296:	461a      	mov	r2, r3
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <sd_card_init+0x3c>)
 800229a:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK){
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <sd_card_init+0x3c>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <sd_card_init+0x28>
    initError = true;
 80022a4:	2301      	movs	r3, #1
 80022a6:	71fb      	strb	r3, [r7, #7]
  }
  return initError;
 80022a8:	79fb      	ldrb	r3, [r7, #7]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	24008984 	.word	0x24008984
 80022b8:	24008988 	.word	0x24008988
 80022bc:	2400896c 	.word	0x2400896c

080022c0 <sd_card_open_file>:
   f_close(&SDFile);

}


bool sd_card_open_file(void){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
  FRESULT localRes;
  uint8_t fileNumber = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	75bb      	strb	r3, [r7, #22]
  char filename0[] = {'a', 'd', 'c', '.', 't', 'x', 't', '\0'};
 80022ca:	4a1f      	ldr	r2, [pc, #124]	; (8002348 <sd_card_open_file+0x88>)
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022d4:	e883 0003 	stmia.w	r3, {r0, r1}
  char filename1[] = {'a', 'd', 'c', '1', '.', 't', 'x', 't', '\0'};
 80022d8:	4a1c      	ldr	r2, [pc, #112]	; (800234c <sd_card_open_file+0x8c>)
 80022da:	463b      	mov	r3, r7
 80022dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80022de:	c303      	stmia	r3!, {r0, r1}
 80022e0:	701a      	strb	r2, [r3, #0]
  bool openFileError = false;
 80022e2:	2300      	movs	r3, #0
 80022e4:	757b      	strb	r3, [r7, #21]
  do {
      if (fileNumber == 0) {
 80022e6:	7dbb      	ldrb	r3, [r7, #22]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d109      	bne.n	8002300 <sd_card_open_file+0x40>
        localRes = f_open(&SDFile, filename0, FA_WRITE | FA_CREATE_NEW); // Create the file if it doesn't exist
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	2206      	movs	r2, #6
 80022f2:	4619      	mov	r1, r3
 80022f4:	4816      	ldr	r0, [pc, #88]	; (8002350 <sd_card_open_file+0x90>)
 80022f6:	f011 fd47 	bl	8013d88 <f_open>
 80022fa:	4603      	mov	r3, r0
 80022fc:	75fb      	strb	r3, [r7, #23]
 80022fe:	e00c      	b.n	800231a <sd_card_open_file+0x5a>
      } else{
        filename1[3] = nameFileNumber + '0';
 8002300:	4b14      	ldr	r3, [pc, #80]	; (8002354 <sd_card_open_file+0x94>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	3330      	adds	r3, #48	; 0x30
 8002306:	b2db      	uxtb	r3, r3
 8002308:	70fb      	strb	r3, [r7, #3]
        localRes = f_open(&SDFile, filename1, FA_WRITE | FA_CREATE_NEW); // Create the file if it doesn't exist
 800230a:	463b      	mov	r3, r7
 800230c:	2206      	movs	r2, #6
 800230e:	4619      	mov	r1, r3
 8002310:	480f      	ldr	r0, [pc, #60]	; (8002350 <sd_card_open_file+0x90>)
 8002312:	f011 fd39 	bl	8013d88 <f_open>
 8002316:	4603      	mov	r3, r0
 8002318:	75fb      	strb	r3, [r7, #23]
      }

      if (localRes == FR_EXIST) {
 800231a:	7dfb      	ldrb	r3, [r7, #23]
 800231c:	2b08      	cmp	r3, #8
 800231e:	d105      	bne.n	800232c <sd_card_open_file+0x6c>
          f_close(&SDFile); // Close the file if it already exists
 8002320:	480b      	ldr	r0, [pc, #44]	; (8002350 <sd_card_open_file+0x90>)
 8002322:	f012 fa21 	bl	8014768 <f_close>
          fileNumber++;   // Increment the file number to create a new name
 8002326:	7dbb      	ldrb	r3, [r7, #22]
 8002328:	3301      	adds	r3, #1
 800232a:	75bb      	strb	r3, [r7, #22]
      }
  } while (localRes == FR_EXIST);
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	2b08      	cmp	r3, #8
 8002330:	d0d9      	beq.n	80022e6 <sd_card_open_file+0x26>

  if (localRes != FR_OK){
 8002332:	7dfb      	ldrb	r3, [r7, #23]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <sd_card_open_file+0x7c>
    openFileError = true;
 8002338:	2301      	movs	r3, #1
 800233a:	757b      	strb	r3, [r7, #21]
  }

  return openFileError;
 800233c:	7d7b      	ldrb	r3, [r7, #21]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	08017c44 	.word	0x08017c44
 800234c:	08017c4c 	.word	0x08017c4c
 8002350:	24008bb8 	.word	0x24008bb8
 8002354:	2400000a 	.word	0x2400000a

08002358 <sd_card_write_to_opened_file>:



bool sd_card_write_to_opened_file(char * buffer){
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  bool writeToFileError = false;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]
  res = f_write(&SDFile, buffer, strlen((char *)buffer), (void *)&byteswritten);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7fd ffcd 	bl	8000304 <strlen>
 800236a:	4602      	mov	r2, r0
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <sd_card_write_to_opened_file+0x44>)
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	480b      	ldr	r0, [pc, #44]	; (80023a0 <sd_card_write_to_opened_file+0x48>)
 8002372:	f012 f806 	bl	8014382 <f_write>
 8002376:	4603      	mov	r3, r0
 8002378:	461a      	mov	r2, r3
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <sd_card_write_to_opened_file+0x4c>)
 800237c:	701a      	strb	r2, [r3, #0]

   if((byteswritten == 0) || (res != FR_OK))
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <sd_card_write_to_opened_file+0x44>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <sd_card_write_to_opened_file+0x36>
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <sd_card_write_to_opened_file+0x4c>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <sd_card_write_to_opened_file+0x3a>
   {
     writeToFileError = true;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
   }
   return writeToFileError;
 8002392:	7bfb      	ldrb	r3, [r7, #15]

}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	24008970 	.word	0x24008970
 80023a0:	24008bb8 	.word	0x24008bb8
 80023a4:	2400896c 	.word	0x2400896c

080023a8 <sd_card_close_file>:

void sd_card_close_file(void){
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0

  f_close(&SDFile);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <sd_card_close_file+0x10>)
 80023ae:	f012 f9db 	bl	8014768 <f_close>
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	24008bb8 	.word	0x24008bb8

080023bc <spi1_adc_init>:


uint32_t readIndex=0;
uint8_t adc_values[80];

void spi1_adc_init(uint8_t spsValue){
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08e      	sub	sp, #56	; 0x38
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  //GPIOG->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 80023c6:	2320      	movs	r3, #32
 80023c8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 80023cc:	2310      	movs	r3, #16
 80023ce:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 80023d0:	2301      	movs	r3, #1
 80023d2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 80023d6:	2300      	movs	r3, #0
 80023d8:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 80023da:	2310      	movs	r3, #16
 80023dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 80023e0:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 80023e4:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 80023e6:	2302      	movs	r3, #2
 80023e8:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 80023ea:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80023ee:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 80023f0:	2328      	movs	r3, #40	; 0x28
 80023f2:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 80023f4:	2305      	movs	r3, #5
 80023f6:	743b      	strb	r3, [r7, #16]
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 80023fc:	2306      	movs	r3, #6
 80023fe:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 8002400:	2300      	movs	r3, #0
 8002402:	813b      	strh	r3, [r7, #8]

  /*Start init ADC1*/
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8002404:	2200      	movs	r2, #0
 8002406:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800240a:	4856      	ldr	r0, [pc, #344]	; (8002564 <spi1_adc_init+0x1a8>)
 800240c:	f004 fe86 	bl	800711c <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi1, adcChannelRegister, 1, 100);
 8002410:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002414:	2364      	movs	r3, #100	; 0x64
 8002416:	2201      	movs	r2, #1
 8002418:	4853      	ldr	r0, [pc, #332]	; (8002568 <spi1_adc_init+0x1ac>)
 800241a:	f009 fd45 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, adcChannel, 2, 100);
 800241e:	f107 0120 	add.w	r1, r7, #32
 8002422:	2364      	movs	r3, #100	; 0x64
 8002424:	2202      	movs	r2, #2
 8002426:	4850      	ldr	r0, [pc, #320]	; (8002568 <spi1_adc_init+0x1ac>)
 8002428:	f009 fd3e 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 800242c:	2201      	movs	r2, #1
 800242e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002432:	484c      	ldr	r0, [pc, #304]	; (8002564 <spi1_adc_init+0x1a8>)
 8002434:	f004 fe72 	bl	800711c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002438:	2001      	movs	r0, #1
 800243a:	f001 fc6d 	bl	8003d18 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002444:	4847      	ldr	r0, [pc, #284]	; (8002564 <spi1_adc_init+0x1a8>)
 8002446:	f004 fe69 	bl	800711c <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi1, setupConfigurationRegister, 1, 100);
 800244a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800244e:	2364      	movs	r3, #100	; 0x64
 8002450:	2201      	movs	r2, #1
 8002452:	4845      	ldr	r0, [pc, #276]	; (8002568 <spi1_adc_init+0x1ac>)
 8002454:	f009 fd28 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, setupConfiguration, 2, 100);
 8002458:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800245c:	2364      	movs	r3, #100	; 0x64
 800245e:	2202      	movs	r2, #2
 8002460:	4841      	ldr	r0, [pc, #260]	; (8002568 <spi1_adc_init+0x1ac>)
 8002462:	f009 fd21 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8002466:	2201      	movs	r2, #1
 8002468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800246c:	483d      	ldr	r0, [pc, #244]	; (8002564 <spi1_adc_init+0x1a8>)
 800246e:	f004 fe55 	bl	800711c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002472:	2001      	movs	r0, #1
 8002474:	f001 fc50 	bl	8003d18 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8002478:	2200      	movs	r2, #0
 800247a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800247e:	4839      	ldr	r0, [pc, #228]	; (8002564 <spi1_adc_init+0x1a8>)
 8002480:	f004 fe4c 	bl	800711c <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi1, adcModeRegister, 1, 100);
 8002484:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002488:	2364      	movs	r3, #100	; 0x64
 800248a:	2201      	movs	r2, #1
 800248c:	4836      	ldr	r0, [pc, #216]	; (8002568 <spi1_adc_init+0x1ac>)
 800248e:	f009 fd0b 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, adcMode, 2, 100);
 8002492:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002496:	2364      	movs	r3, #100	; 0x64
 8002498:	2202      	movs	r2, #2
 800249a:	4833      	ldr	r0, [pc, #204]	; (8002568 <spi1_adc_init+0x1ac>)
 800249c:	f009 fd04 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 80024a0:	2201      	movs	r2, #1
 80024a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024a6:	482f      	ldr	r0, [pc, #188]	; (8002564 <spi1_adc_init+0x1a8>)
 80024a8:	f004 fe38 	bl	800711c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80024ac:	2001      	movs	r0, #1
 80024ae:	f001 fc33 	bl	8003d18 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024b8:	482a      	ldr	r0, [pc, #168]	; (8002564 <spi1_adc_init+0x1a8>)
 80024ba:	f004 fe2f 	bl	800711c <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi1, dataWriteSPS_REGISTER, 1, 100);
 80024be:	f107 0114 	add.w	r1, r7, #20
 80024c2:	2364      	movs	r3, #100	; 0x64
 80024c4:	2201      	movs	r2, #1
 80024c6:	4828      	ldr	r0, [pc, #160]	; (8002568 <spi1_adc_init+0x1ac>)
 80024c8:	f009 fcee 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, dataWriteSPS, 2, 100);
 80024cc:	f107 0110 	add.w	r1, r7, #16
 80024d0:	2364      	movs	r3, #100	; 0x64
 80024d2:	2202      	movs	r2, #2
 80024d4:	4824      	ldr	r0, [pc, #144]	; (8002568 <spi1_adc_init+0x1ac>)
 80024d6:	f009 fce7 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 80024da:	2201      	movs	r2, #1
 80024dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024e0:	4820      	ldr	r0, [pc, #128]	; (8002564 <spi1_adc_init+0x1a8>)
 80024e2:	f004 fe1b 	bl	800711c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80024e6:	2001      	movs	r0, #1
 80024e8:	f001 fc16 	bl	8003d18 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80024ec:	2200      	movs	r2, #0
 80024ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024f2:	481c      	ldr	r0, [pc, #112]	; (8002564 <spi1_adc_init+0x1a8>)
 80024f4:	f004 fe12 	bl	800711c <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi1, dataWriteSyncError_REGISTER, 1, 100);
 80024f8:	f107 010c 	add.w	r1, r7, #12
 80024fc:	2364      	movs	r3, #100	; 0x64
 80024fe:	2201      	movs	r2, #1
 8002500:	4819      	ldr	r0, [pc, #100]	; (8002568 <spi1_adc_init+0x1ac>)
 8002502:	f009 fcd1 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, dataWriteSyncError, 2, 100);
 8002506:	f107 0108 	add.w	r1, r7, #8
 800250a:	2364      	movs	r3, #100	; 0x64
 800250c:	2202      	movs	r2, #2
 800250e:	4816      	ldr	r0, [pc, #88]	; (8002568 <spi1_adc_init+0x1ac>)
 8002510:	f009 fcca 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8002514:	2201      	movs	r2, #1
 8002516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800251a:	4812      	ldr	r0, [pc, #72]	; (8002564 <spi1_adc_init+0x1a8>)
 800251c:	f004 fdfe 	bl	800711c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002520:	2001      	movs	r0, #1
 8002522:	f001 fbf9 	bl	8003d18 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800252c:	480d      	ldr	r0, [pc, #52]	; (8002564 <spi1_adc_init+0x1a8>)
 800252e:	f004 fdf5 	bl	800711c <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi1, continuousConvEnableRegister, 1, 100);
 8002532:	f107 011c 	add.w	r1, r7, #28
 8002536:	2364      	movs	r3, #100	; 0x64
 8002538:	2201      	movs	r2, #1
 800253a:	480b      	ldr	r0, [pc, #44]	; (8002568 <spi1_adc_init+0x1ac>)
 800253c:	f009 fcb4 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, continuousConvEnable, 2, 100);
 8002540:	f107 0118 	add.w	r1, r7, #24
 8002544:	2364      	movs	r3, #100	; 0x64
 8002546:	2202      	movs	r2, #2
 8002548:	4807      	ldr	r0, [pc, #28]	; (8002568 <spi1_adc_init+0x1ac>)
 800254a:	f009 fcad 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 800254e:	2201      	movs	r2, #1
 8002550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002554:	4803      	ldr	r0, [pc, #12]	; (8002564 <spi1_adc_init+0x1a8>)
 8002556:	f004 fde1 	bl	800711c <HAL_GPIO_WritePin>
}
 800255a:	bf00      	nop
 800255c:	3738      	adds	r7, #56	; 0x38
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	58021800 	.word	0x58021800
 8002568:	24008290 	.word	0x24008290

0800256c <spi2_adc_init>:

void spi2_adc_init(uint8_t spsValue){
 800256c:	b580      	push	{r7, lr}
 800256e:	b08e      	sub	sp, #56	; 0x38
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
//  GPIOC->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8002576:	2320      	movs	r3, #32
 8002578:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 800257c:	2310      	movs	r3, #16
 800257e:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8002580:	2301      	movs	r3, #1
 8002582:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 8002586:	2300      	movs	r3, #0
 8002588:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 800258a:	2310      	movs	r3, #16
 800258c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8002590:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8002594:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8002596:	2302      	movs	r3, #2
 8002598:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 800259a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 800259e:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 80025a0:	2328      	movs	r3, #40	; 0x28
 80025a2:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 80025a4:	2305      	movs	r3, #5
 80025a6:	743b      	strb	r3, [r7, #16]
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 80025ac:	2306      	movs	r3, #6
 80025ae:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 80025b0:	2300      	movs	r3, #0
 80025b2:	813b      	strh	r3, [r7, #8]

  /*Start init ADC2*/
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 80025b4:	2200      	movs	r2, #0
 80025b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025ba:	4856      	ldr	r0, [pc, #344]	; (8002714 <spi2_adc_init+0x1a8>)
 80025bc:	f004 fdae 	bl	800711c <HAL_GPIO_WritePin>

  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
  HAL_SPI_Transmit(&hspi2, adcChannelRegister, 1, 100);
 80025c0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80025c4:	2364      	movs	r3, #100	; 0x64
 80025c6:	2201      	movs	r2, #1
 80025c8:	4853      	ldr	r0, [pc, #332]	; (8002718 <spi2_adc_init+0x1ac>)
 80025ca:	f009 fc6d 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, adcChannel, 2, 100);
 80025ce:	f107 0120 	add.w	r1, r7, #32
 80025d2:	2364      	movs	r3, #100	; 0x64
 80025d4:	2202      	movs	r2, #2
 80025d6:	4850      	ldr	r0, [pc, #320]	; (8002718 <spi2_adc_init+0x1ac>)
 80025d8:	f009 fc66 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 80025dc:	2201      	movs	r2, #1
 80025de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025e2:	484c      	ldr	r0, [pc, #304]	; (8002714 <spi2_adc_init+0x1a8>)
 80025e4:	f004 fd9a 	bl	800711c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80025e8:	2001      	movs	r0, #1
 80025ea:	f001 fb95 	bl	8003d18 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025f4:	4847      	ldr	r0, [pc, #284]	; (8002714 <spi2_adc_init+0x1a8>)
 80025f6:	f004 fd91 	bl	800711c <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi2, setupConfigurationRegister, 1, 100);
 80025fa:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80025fe:	2364      	movs	r3, #100	; 0x64
 8002600:	2201      	movs	r2, #1
 8002602:	4845      	ldr	r0, [pc, #276]	; (8002718 <spi2_adc_init+0x1ac>)
 8002604:	f009 fc50 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, setupConfiguration, 2, 100);
 8002608:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800260c:	2364      	movs	r3, #100	; 0x64
 800260e:	2202      	movs	r2, #2
 8002610:	4841      	ldr	r0, [pc, #260]	; (8002718 <spi2_adc_init+0x1ac>)
 8002612:	f009 fc49 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8002616:	2201      	movs	r2, #1
 8002618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800261c:	483d      	ldr	r0, [pc, #244]	; (8002714 <spi2_adc_init+0x1a8>)
 800261e:	f004 fd7d 	bl	800711c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002622:	2001      	movs	r0, #1
 8002624:	f001 fb78 	bl	8003d18 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8002628:	2200      	movs	r2, #0
 800262a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800262e:	4839      	ldr	r0, [pc, #228]	; (8002714 <spi2_adc_init+0x1a8>)
 8002630:	f004 fd74 	bl	800711c <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi2, adcModeRegister, 1, 100);
 8002634:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002638:	2364      	movs	r3, #100	; 0x64
 800263a:	2201      	movs	r2, #1
 800263c:	4836      	ldr	r0, [pc, #216]	; (8002718 <spi2_adc_init+0x1ac>)
 800263e:	f009 fc33 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, adcMode, 2, 100);
 8002642:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002646:	2364      	movs	r3, #100	; 0x64
 8002648:	2202      	movs	r2, #2
 800264a:	4833      	ldr	r0, [pc, #204]	; (8002718 <spi2_adc_init+0x1ac>)
 800264c:	f009 fc2c 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8002650:	2201      	movs	r2, #1
 8002652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002656:	482f      	ldr	r0, [pc, #188]	; (8002714 <spi2_adc_init+0x1a8>)
 8002658:	f004 fd60 	bl	800711c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800265c:	2001      	movs	r0, #1
 800265e:	f001 fb5b 	bl	8003d18 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002668:	482a      	ldr	r0, [pc, #168]	; (8002714 <spi2_adc_init+0x1a8>)
 800266a:	f004 fd57 	bl	800711c <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi2, dataWriteSPS_REGISTER, 1, 100);
 800266e:	f107 0114 	add.w	r1, r7, #20
 8002672:	2364      	movs	r3, #100	; 0x64
 8002674:	2201      	movs	r2, #1
 8002676:	4828      	ldr	r0, [pc, #160]	; (8002718 <spi2_adc_init+0x1ac>)
 8002678:	f009 fc16 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, dataWriteSPS, 2, 100);
 800267c:	f107 0110 	add.w	r1, r7, #16
 8002680:	2364      	movs	r3, #100	; 0x64
 8002682:	2202      	movs	r2, #2
 8002684:	4824      	ldr	r0, [pc, #144]	; (8002718 <spi2_adc_init+0x1ac>)
 8002686:	f009 fc0f 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 800268a:	2201      	movs	r2, #1
 800268c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002690:	4820      	ldr	r0, [pc, #128]	; (8002714 <spi2_adc_init+0x1a8>)
 8002692:	f004 fd43 	bl	800711c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002696:	2001      	movs	r0, #1
 8002698:	f001 fb3e 	bl	8003d18 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 800269c:	2200      	movs	r2, #0
 800269e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026a2:	481c      	ldr	r0, [pc, #112]	; (8002714 <spi2_adc_init+0x1a8>)
 80026a4:	f004 fd3a 	bl	800711c <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi2, dataWriteSyncError_REGISTER, 1, 100);
 80026a8:	f107 010c 	add.w	r1, r7, #12
 80026ac:	2364      	movs	r3, #100	; 0x64
 80026ae:	2201      	movs	r2, #1
 80026b0:	4819      	ldr	r0, [pc, #100]	; (8002718 <spi2_adc_init+0x1ac>)
 80026b2:	f009 fbf9 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, dataWriteSyncError, 2, 100);
 80026b6:	f107 0108 	add.w	r1, r7, #8
 80026ba:	2364      	movs	r3, #100	; 0x64
 80026bc:	2202      	movs	r2, #2
 80026be:	4816      	ldr	r0, [pc, #88]	; (8002718 <spi2_adc_init+0x1ac>)
 80026c0:	f009 fbf2 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 80026c4:	2201      	movs	r2, #1
 80026c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026ca:	4812      	ldr	r0, [pc, #72]	; (8002714 <spi2_adc_init+0x1a8>)
 80026cc:	f004 fd26 	bl	800711c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80026d0:	2001      	movs	r0, #1
 80026d2:	f001 fb21 	bl	8003d18 <HAL_Delay>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 80026d6:	2200      	movs	r2, #0
 80026d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026dc:	480d      	ldr	r0, [pc, #52]	; (8002714 <spi2_adc_init+0x1a8>)
 80026de:	f004 fd1d 	bl	800711c <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi2, continuousConvEnableRegister, 1, 100);
 80026e2:	f107 011c 	add.w	r1, r7, #28
 80026e6:	2364      	movs	r3, #100	; 0x64
 80026e8:	2201      	movs	r2, #1
 80026ea:	480b      	ldr	r0, [pc, #44]	; (8002718 <spi2_adc_init+0x1ac>)
 80026ec:	f009 fbdc 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, continuousConvEnable, 2, 100);
 80026f0:	f107 0118 	add.w	r1, r7, #24
 80026f4:	2364      	movs	r3, #100	; 0x64
 80026f6:	2202      	movs	r2, #2
 80026f8:	4807      	ldr	r0, [pc, #28]	; (8002718 <spi2_adc_init+0x1ac>)
 80026fa:	f009 fbd5 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 80026fe:	2201      	movs	r2, #1
 8002700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002704:	4803      	ldr	r0, [pc, #12]	; (8002714 <spi2_adc_init+0x1a8>)
 8002706:	f004 fd09 	bl	800711c <HAL_GPIO_WritePin>
}
 800270a:	bf00      	nop
 800270c:	3738      	adds	r7, #56	; 0x38
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	58020400 	.word	0x58020400
 8002718:	24008318 	.word	0x24008318

0800271c <spi4_adc_init>:

void spi4_adc_init(uint8_t spsValue){
 800271c:	b580      	push	{r7, lr}
 800271e:	b08e      	sub	sp, #56	; 0x38
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
//  GPIOC->PUPDR |= (uint32_t)0x400000;

  uint8_t setupConfigurationRegister[] = {0x20};
 8002726:	2320      	movs	r3, #32
 8002728:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//  uint8_t setupConfiguration[] = {0x1F, 0x30};//{0x13, 0x00}; FIXME testing..
  uint8_t setupConfiguration[] = {0x10, 0x00};//{0x13, 0x00}; FIXME testing..
 800272c:	2310      	movs	r3, #16
 800272e:	863b      	strh	r3, [r7, #48]	; 0x30

  uint8_t adcModeRegister[] = {0x01};
 8002730:	2301      	movs	r3, #1
 8002732:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t adcMode[] = {0x0, 0x0};
 8002736:	2300      	movs	r3, #0
 8002738:	853b      	strh	r3, [r7, #40]	; 0x28

  uint8_t adcChannelRegister[] = {0x10};
 800273a:	2310      	movs	r3, #16
 800273c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t adcChannel[] = {0x80, 0x20};
 8002740:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8002744:	843b      	strh	r3, [r7, #32]

  uint8_t continuousConvEnableRegister[] = {0x02};
 8002746:	2302      	movs	r3, #2
 8002748:	773b      	strb	r3, [r7, #28]
  uint8_t continuousConvEnable[] = {0x00, 0x82};
 800274a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 800274e:	833b      	strh	r3, [r7, #24]

  uint8_t dataWriteSPS_REGISTER[] = {0x28};
 8002750:	2328      	movs	r3, #40	; 0x28
 8002752:	753b      	strb	r3, [r7, #20]
  uint8_t dataWriteSPS[] = {0x05, spsValue}; // 5000SPS = 0x08, 1000SPS = 0x0A, 100SPS = 0x0E, 5SPS = 0x14
 8002754:	2305      	movs	r3, #5
 8002756:	743b      	strb	r3, [r7, #16]
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	747b      	strb	r3, [r7, #17]

  uint8_t dataWriteSyncError_REGISTER[] = {0x06};
 800275c:	2306      	movs	r3, #6
 800275e:	733b      	strb	r3, [r7, #12]
  uint8_t dataWriteSyncError[] = {0x00, 0x00};
 8002760:	2300      	movs	r3, #0
 8002762:	813b      	strh	r3, [r7, #8]
//
//  /* Switch AIN0 and AIN1 as inputs due to change in scheme */
//  HAL_SPI_Transmit(&hspi4, adcChannelRegister, 1, 100);
//  HAL_SPI_Transmit(&hspi4, adcChannel, 2, 100);

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002764:	2201      	movs	r2, #1
 8002766:	2110      	movs	r1, #16
 8002768:	4846      	ldr	r0, [pc, #280]	; (8002884 <spi4_adc_init+0x168>)
 800276a:	f004 fcd7 	bl	800711c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800276e:	2001      	movs	r0, #1
 8002770:	f001 fad2 	bl	8003d18 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8002774:	2200      	movs	r2, #0
 8002776:	2110      	movs	r1, #16
 8002778:	4842      	ldr	r0, [pc, #264]	; (8002884 <spi4_adc_init+0x168>)
 800277a:	f004 fccf 	bl	800711c <HAL_GPIO_WritePin>

  /* Set external reference to be used */
  HAL_SPI_Transmit(&hspi4, setupConfigurationRegister, 1, 100);
 800277e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002782:	2364      	movs	r3, #100	; 0x64
 8002784:	2201      	movs	r2, #1
 8002786:	4840      	ldr	r0, [pc, #256]	; (8002888 <spi4_adc_init+0x16c>)
 8002788:	f009 fb8e 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, setupConfiguration, 2, 100);
 800278c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002790:	2364      	movs	r3, #100	; 0x64
 8002792:	2202      	movs	r2, #2
 8002794:	483c      	ldr	r0, [pc, #240]	; (8002888 <spi4_adc_init+0x16c>)
 8002796:	f009 fb87 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 800279a:	2201      	movs	r2, #1
 800279c:	2110      	movs	r1, #16
 800279e:	4839      	ldr	r0, [pc, #228]	; (8002884 <spi4_adc_init+0x168>)
 80027a0:	f004 fcbc 	bl	800711c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80027a4:	2001      	movs	r0, #1
 80027a6:	f001 fab7 	bl	8003d18 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2110      	movs	r1, #16
 80027ae:	4835      	ldr	r0, [pc, #212]	; (8002884 <spi4_adc_init+0x168>)
 80027b0:	f004 fcb4 	bl	800711c <HAL_GPIO_WritePin>

  /* Set continuous conversion mode */
  HAL_SPI_Transmit(&hspi4, adcModeRegister, 1, 100);
 80027b4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80027b8:	2364      	movs	r3, #100	; 0x64
 80027ba:	2201      	movs	r2, #1
 80027bc:	4832      	ldr	r0, [pc, #200]	; (8002888 <spi4_adc_init+0x16c>)
 80027be:	f009 fb73 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, adcMode, 2, 100);
 80027c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80027c6:	2364      	movs	r3, #100	; 0x64
 80027c8:	2202      	movs	r2, #2
 80027ca:	482f      	ldr	r0, [pc, #188]	; (8002888 <spi4_adc_init+0x16c>)
 80027cc:	f009 fb6c 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 80027d0:	2201      	movs	r2, #1
 80027d2:	2110      	movs	r1, #16
 80027d4:	482b      	ldr	r0, [pc, #172]	; (8002884 <spi4_adc_init+0x168>)
 80027d6:	f004 fca1 	bl	800711c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80027da:	2001      	movs	r0, #1
 80027dc:	f001 fa9c 	bl	8003d18 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2110      	movs	r1, #16
 80027e4:	4827      	ldr	r0, [pc, #156]	; (8002884 <spi4_adc_init+0x168>)
 80027e6:	f004 fc99 	bl	800711c <HAL_GPIO_WritePin>

  /* Set SPS */
  HAL_SPI_Transmit(&hspi4, dataWriteSPS_REGISTER, 1, 100);
 80027ea:	f107 0114 	add.w	r1, r7, #20
 80027ee:	2364      	movs	r3, #100	; 0x64
 80027f0:	2201      	movs	r2, #1
 80027f2:	4825      	ldr	r0, [pc, #148]	; (8002888 <spi4_adc_init+0x16c>)
 80027f4:	f009 fb58 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, dataWriteSPS, 2, 100);
 80027f8:	f107 0110 	add.w	r1, r7, #16
 80027fc:	2364      	movs	r3, #100	; 0x64
 80027fe:	2202      	movs	r2, #2
 8002800:	4821      	ldr	r0, [pc, #132]	; (8002888 <spi4_adc_init+0x16c>)
 8002802:	f009 fb51 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002806:	2201      	movs	r2, #1
 8002808:	2110      	movs	r1, #16
 800280a:	481e      	ldr	r0, [pc, #120]	; (8002884 <spi4_adc_init+0x168>)
 800280c:	f004 fc86 	bl	800711c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002810:	2001      	movs	r0, #1
 8002812:	f001 fa81 	bl	8003d18 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2110      	movs	r1, #16
 800281a:	481a      	ldr	r0, [pc, #104]	; (8002884 <spi4_adc_init+0x168>)
 800281c:	f004 fc7e 	bl	800711c <HAL_GPIO_WritePin>

  /* Set sync pin  */
  HAL_SPI_Transmit(&hspi4, dataWriteSyncError_REGISTER, 1, 100);
 8002820:	f107 010c 	add.w	r1, r7, #12
 8002824:	2364      	movs	r3, #100	; 0x64
 8002826:	2201      	movs	r2, #1
 8002828:	4817      	ldr	r0, [pc, #92]	; (8002888 <spi4_adc_init+0x16c>)
 800282a:	f009 fb3d 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, dataWriteSyncError, 2, 100);
 800282e:	f107 0108 	add.w	r1, r7, #8
 8002832:	2364      	movs	r3, #100	; 0x64
 8002834:	2202      	movs	r2, #2
 8002836:	4814      	ldr	r0, [pc, #80]	; (8002888 <spi4_adc_init+0x16c>)
 8002838:	f009 fb36 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 800283c:	2201      	movs	r2, #1
 800283e:	2110      	movs	r1, #16
 8002840:	4810      	ldr	r0, [pc, #64]	; (8002884 <spi4_adc_init+0x168>)
 8002842:	f004 fc6b 	bl	800711c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002846:	2001      	movs	r0, #1
 8002848:	f001 fa66 	bl	8003d18 <HAL_Delay>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 800284c:	2200      	movs	r2, #0
 800284e:	2110      	movs	r1, #16
 8002850:	480c      	ldr	r0, [pc, #48]	; (8002884 <spi4_adc_init+0x168>)
 8002852:	f004 fc63 	bl	800711c <HAL_GPIO_WritePin>

  /* Set 32bit values and continuous coversion mode */
  HAL_SPI_Transmit(&hspi4, continuousConvEnableRegister, 1, 100);
 8002856:	f107 011c 	add.w	r1, r7, #28
 800285a:	2364      	movs	r3, #100	; 0x64
 800285c:	2201      	movs	r2, #1
 800285e:	480a      	ldr	r0, [pc, #40]	; (8002888 <spi4_adc_init+0x16c>)
 8002860:	f009 fb22 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi4, continuousConvEnable, 2, 100);
 8002864:	f107 0118 	add.w	r1, r7, #24
 8002868:	2364      	movs	r3, #100	; 0x64
 800286a:	2202      	movs	r2, #2
 800286c:	4806      	ldr	r0, [pc, #24]	; (8002888 <spi4_adc_init+0x16c>)
 800286e:	f009 fb1b 	bl	800bea8 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002872:	2201      	movs	r2, #1
 8002874:	2110      	movs	r1, #16
 8002876:	4803      	ldr	r0, [pc, #12]	; (8002884 <spi4_adc_init+0x168>)
 8002878:	f004 fc50 	bl	800711c <HAL_GPIO_WritePin>
}
 800287c:	bf00      	nop
 800287e:	3738      	adds	r7, #56	; 0x38
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	58021000 	.word	0x58021000
 8002888:	240083a0 	.word	0x240083a0

0800288c <run_all_adc>:


void run_all_adc(void){
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 8002890:	2200      	movs	r2, #0
 8002892:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002896:	4808      	ldr	r0, [pc, #32]	; (80028b8 <run_all_adc+0x2c>)
 8002898:	f004 fc40 	bl	800711c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028a2:	4806      	ldr	r0, [pc, #24]	; (80028bc <run_all_adc+0x30>)
 80028a4:	f004 fc3a 	bl	800711c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 80028a8:	2200      	movs	r2, #0
 80028aa:	2110      	movs	r1, #16
 80028ac:	4804      	ldr	r0, [pc, #16]	; (80028c0 <run_all_adc+0x34>)
 80028ae:	f004 fc35 	bl	800711c <HAL_GPIO_WritePin>
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	58021800 	.word	0x58021800
 80028bc:	58020400 	.word	0x58020400
 80028c0:	58021000 	.word	0x58021000

080028c4 <spi1_soft_reset>:
      HAL_UART_Transmit(&huart5, (uint8_t*)", ", 2, 10);
      HAL_Delay(10);
  }
}

void spi1_soft_reset(void){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 80028ca:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <spi1_soft_reset+0x40>)
 80028cc:	463b      	mov	r3, r7
 80028ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028d2:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028dc:	480a      	ldr	r0, [pc, #40]	; (8002908 <spi1_soft_reset+0x44>)
 80028de:	f004 fc1d 	bl	800711c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, softResetValue, 8, 100);
 80028e2:	4639      	mov	r1, r7
 80028e4:	2364      	movs	r3, #100	; 0x64
 80028e6:	2208      	movs	r2, #8
 80028e8:	4808      	ldr	r0, [pc, #32]	; (800290c <spi1_soft_reset+0x48>)
 80028ea:	f009 fadd 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 80028ee:	2201      	movs	r2, #1
 80028f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028f4:	4804      	ldr	r0, [pc, #16]	; (8002908 <spi1_soft_reset+0x44>)
 80028f6:	f004 fc11 	bl	800711c <HAL_GPIO_WritePin>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	08017c6c 	.word	0x08017c6c
 8002908:	58021800 	.word	0x58021800
 800290c:	24008290 	.word	0x24008290

08002910 <spi2_soft_reset>:

void spi2_soft_reset(void){
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8002916:	4a0e      	ldr	r2, [pc, #56]	; (8002950 <spi2_soft_reset+0x40>)
 8002918:	463b      	mov	r3, r7
 800291a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800291e:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002928:	480a      	ldr	r0, [pc, #40]	; (8002954 <spi2_soft_reset+0x44>)
 800292a:	f004 fbf7 	bl	800711c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, softResetValue, 8, 100);
 800292e:	4639      	mov	r1, r7
 8002930:	2364      	movs	r3, #100	; 0x64
 8002932:	2208      	movs	r2, #8
 8002934:	4808      	ldr	r0, [pc, #32]	; (8002958 <spi2_soft_reset+0x48>)
 8002936:	f009 fab7 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 800293a:	2201      	movs	r2, #1
 800293c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002940:	4804      	ldr	r0, [pc, #16]	; (8002954 <spi2_soft_reset+0x44>)
 8002942:	f004 fbeb 	bl	800711c <HAL_GPIO_WritePin>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	08017c6c 	.word	0x08017c6c
 8002954:	58020400 	.word	0x58020400
 8002958:	24008318 	.word	0x24008318

0800295c <spi4_soft_reset>:

void spi4_soft_reset(void){
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
  uint8_t softResetValue[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 8002962:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <spi4_soft_reset+0x3c>)
 8002964:	463b      	mov	r3, r7
 8002966:	e892 0003 	ldmia.w	r2, {r0, r1}
 800296a:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2110      	movs	r1, #16
 8002972:	480a      	ldr	r0, [pc, #40]	; (800299c <spi4_soft_reset+0x40>)
 8002974:	f004 fbd2 	bl	800711c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi4, softResetValue, 8, 100);
 8002978:	4639      	mov	r1, r7
 800297a:	2364      	movs	r3, #100	; 0x64
 800297c:	2208      	movs	r2, #8
 800297e:	4808      	ldr	r0, [pc, #32]	; (80029a0 <spi4_soft_reset+0x44>)
 8002980:	f009 fa92 	bl	800bea8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002984:	2201      	movs	r2, #1
 8002986:	2110      	movs	r1, #16
 8002988:	4804      	ldr	r0, [pc, #16]	; (800299c <spi4_soft_reset+0x40>)
 800298a:	f004 fbc7 	bl	800711c <HAL_GPIO_WritePin>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	08017c6c 	.word	0x08017c6c
 800299c:	58021000 	.word	0x58021000
 80029a0:	240083a0 	.word	0x240083a0

080029a4 <getStringFromValues>:
  }
  HAL_UART_Transmit(&huart4, (uint8_t*)"\n\r", 2, 10);
}


void getStringFromValues(uint32_t adcRawValue_x, uint32_t adcRawValue_y, uint32_t adcRawValue_z, char* concatenatedBuffer){
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b092      	sub	sp, #72	; 0x48
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
  uint8_t uartBuffer_x[14];
  uint8_t uartBuffer_y[14];
  uint8_t uartBuffer_z[14];

  (void)sprintf((char *)uartBuffer_x, "%10lu", adcRawValue_x);
 80029b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4910      	ldr	r1, [pc, #64]	; (80029fc <getStringFromValues+0x58>)
 80029ba:	4618      	mov	r0, r3
 80029bc:	f011 ffd0 	bl	8014960 <siprintf>
  (void)sprintf((char *)uartBuffer_y, "%10lu", adcRawValue_y);
 80029c0:	f107 0320 	add.w	r3, r7, #32
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	490d      	ldr	r1, [pc, #52]	; (80029fc <getStringFromValues+0x58>)
 80029c8:	4618      	mov	r0, r3
 80029ca:	f011 ffc9 	bl	8014960 <siprintf>
  (void)sprintf((char *)uartBuffer_z, "%10lu", adcRawValue_z);
 80029ce:	f107 0310 	add.w	r3, r7, #16
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4909      	ldr	r1, [pc, #36]	; (80029fc <getStringFromValues+0x58>)
 80029d6:	4618      	mov	r0, r3
 80029d8:	f011 ffc2 	bl	8014960 <siprintf>

  (void)sprintf((char *)concatenatedBuffer, "%s %s %s\n", (char*)uartBuffer_x, (char*)uartBuffer_y, (char*)uartBuffer_z);
 80029dc:	f107 0120 	add.w	r1, r7, #32
 80029e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80029e4:	f107 0310 	add.w	r3, r7, #16
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	460b      	mov	r3, r1
 80029ec:	4904      	ldr	r1, [pc, #16]	; (8002a00 <getStringFromValues+0x5c>)
 80029ee:	6838      	ldr	r0, [r7, #0]
 80029f0:	f011 ffb6 	bl	8014960 <siprintf>

//  HAL_UART_Transmit(&huart4, concatenatedBuffer, 34,100);
}
 80029f4:	bf00      	nop
 80029f6:	3740      	adds	r7, #64	; 0x40
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	08017c94 	.word	0x08017c94
 8002a00:	08017c9c 	.word	0x08017c9c
 8002a04:	00000000 	.word	0x00000000

08002a08 <getStringFromValuesFloat>:

void getStringFromValuesFloat(uint32_t adcRawValue_x, uint32_t adcRawValue_y, uint32_t adcRawValue_z, char* concatenatedBuffer, char resolutionX, char resolutionY, char resolutionZ){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b098      	sub	sp, #96	; 0x60
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  char uartBuffer_y[20];
  char uartBuffer_z[20];
  float convertedValueX;
  float convertedValueY;
  float convertedValueZ;
  if(resolutionX == 'H'){
 8002a16:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002a1a:	2b48      	cmp	r3, #72	; 0x48
 8002a1c:	d115      	bne.n	8002a4a <getStringFromValuesFloat+0x42>
    convertedValueX = (20* (double)adcRawValue_x / (pow(2,32))) - 10 ;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	ee07 3a90 	vmov	s15, r3
 8002a24:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002a28:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002a2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002a30:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8002b68 <getStringFromValuesFloat+0x160>
 8002a34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a38:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002a3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a40:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a44:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 8002a48:	e010      	b.n	8002a6c <getStringFromValuesFloat+0x64>
  }else{
    convertedValueX = ((double)adcRawValue_x / (pow(2,32))) - 0.5 ;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	ee07 3a90 	vmov	s15, r3
 8002a50:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002a54:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8002b68 <getStringFromValuesFloat+0x160>
 8002a58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a5c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002a60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a68:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  }

  if(resolutionY == 'H'){
 8002a6c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8002a70:	2b48      	cmp	r3, #72	; 0x48
 8002a72:	d115      	bne.n	8002aa0 <getStringFromValuesFloat+0x98>
    convertedValueY = (20* (double)adcRawValue_y / (pow(2,32))) - 10 ;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002a7e:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002a82:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002a86:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8002b68 <getStringFromValuesFloat+0x160>
 8002a8a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a8e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002a92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a9a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002a9e:	e010      	b.n	8002ac2 <getStringFromValuesFloat+0xba>
  }else{
    convertedValueY = ((double)adcRawValue_y / (pow(2,32))) - 0.5 ;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	ee07 3a90 	vmov	s15, r3
 8002aa6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002aaa:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8002b68 <getStringFromValuesFloat+0x160>
 8002aae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002ab2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002ab6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002aba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002abe:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
  }

  if(resolutionZ == 'H'){
 8002ac2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002ac6:	2b48      	cmp	r3, #72	; 0x48
 8002ac8:	d115      	bne.n	8002af6 <getStringFromValuesFloat+0xee>
    convertedValueZ = (20* (double)adcRawValue_z / (pow(2,32))) - 10 ;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	ee07 3a90 	vmov	s15, r3
 8002ad0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002ad4:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002ad8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002adc:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8002b68 <getStringFromValuesFloat+0x160>
 8002ae0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002ae4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002ae8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002aec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002af0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8002af4:	e010      	b.n	8002b18 <getStringFromValuesFloat+0x110>
  }else{
    convertedValueZ = ((double)adcRawValue_z / (pow(2,32))) - 0.5 ;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	ee07 3a90 	vmov	s15, r3
 8002afc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002b00:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8002b68 <getStringFromValuesFloat+0x160>
 8002b04:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b08:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002b0c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002b10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b14:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
  }

  formatFloatString(uartBuffer_x,convertedValueX);
 8002b18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b1c:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f87b 	bl	8002c1c <formatFloatString>
  formatFloatString(uartBuffer_y,convertedValueY);
 8002b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2a:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f874 	bl	8002c1c <formatFloatString>
  formatFloatString(uartBuffer_z,convertedValueZ);
 8002b34:	f107 0310 	add.w	r3, r7, #16
 8002b38:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 f86d 	bl	8002c1c <formatFloatString>
  //(void)sprintf(uartBuffer_x, "%6.3f", convertedValueX);
//  (void)snprintf((char *)uartBuffer_x, 10, "%f", convertedValueX);
//  (void)sprintf((char *)uartBuffer_y, "%.10f", convertedValueY);
//  (void)sprintf((char *)uartBuffer_z, "%.10f", convertedValueZ);

  (void)sprintf((char *)concatenatedBuffer, "%s %s %s\n", (char*)uartBuffer_x, (char*)uartBuffer_y, (char*)uartBuffer_z);
 8002b42:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002b46:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b4a:	f107 0310 	add.w	r3, r7, #16
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	460b      	mov	r3, r1
 8002b52:	4907      	ldr	r1, [pc, #28]	; (8002b70 <getStringFromValuesFloat+0x168>)
 8002b54:	6838      	ldr	r0, [r7, #0]
 8002b56:	f011 ff03 	bl	8014960 <siprintf>

}
 8002b5a:	bf00      	nop
 8002b5c:	3758      	adds	r7, #88	; 0x58
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	f3af 8000 	nop.w
 8002b68:	00000000 	.word	0x00000000
 8002b6c:	41f00000 	.word	0x41f00000
 8002b70:	08017c9c 	.word	0x08017c9c

08002b74 <setNewSPStoAllADCs>:
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}



void setNewSPStoAllADCs(uint8_t spsValue){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002b7e:	2017      	movs	r0, #23
 8002b80:	f001 fa15 	bl	8003fae <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8002b84:	2028      	movs	r0, #40	; 0x28
 8002b86:	f001 fa12 	bl	8003fae <HAL_NVIC_DisableIRQ>
  HAL_GPIO_WritePin(SPI1_CS_PIN, SPI1_CS_PIN_NUMBER, 1);
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b90:	481f      	ldr	r0, [pc, #124]	; (8002c10 <setNewSPStoAllADCs+0x9c>)
 8002b92:	f004 fac3 	bl	800711c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_PIN, SPI2_CS_PIN_NUMBER, 1);
 8002b96:	2201      	movs	r2, #1
 8002b98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b9c:	481d      	ldr	r0, [pc, #116]	; (8002c14 <setNewSPStoAllADCs+0xa0>)
 8002b9e:	f004 fabd 	bl	800711c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2110      	movs	r1, #16
 8002ba6:	481c      	ldr	r0, [pc, #112]	; (8002c18 <setNewSPStoAllADCs+0xa4>)
 8002ba8:	f004 fab8 	bl	800711c <HAL_GPIO_WritePin>
  spi1_soft_reset();
 8002bac:	f7ff fe8a 	bl	80028c4 <spi1_soft_reset>
  spi2_soft_reset();
 8002bb0:	f7ff feae 	bl	8002910 <spi2_soft_reset>
  spi4_soft_reset();
 8002bb4:	f7ff fed2 	bl	800295c <spi4_soft_reset>
  spi1_adc_init(spsValue);
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fbfe 	bl	80023bc <spi1_adc_init>
  spi2_adc_init(spsValue);
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fcd2 	bl	800256c <spi2_adc_init>
  spi4_adc_init(spsValue);
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fda6 	bl	800271c <spi4_adc_init>
  run_all_adc();
 8002bd0:	f7ff fe5c 	bl	800288c <run_all_adc>
  HAL_Delay(1);
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	f001 f89f 	bl	8003d18 <HAL_Delay>
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8002bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bde:	2220      	movs	r2, #32
 8002be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be8:	2240      	movs	r2, #64	; 0x40
 8002bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8002bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002bfa:	2017      	movs	r0, #23
 8002bfc:	f001 f9c9 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c00:	2028      	movs	r0, #40	; 0x28
 8002c02:	f001 f9c6 	bl	8003f92 <HAL_NVIC_EnableIRQ>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	58021800 	.word	0x58021800
 8002c14:	58020400 	.word	0x58020400
 8002c18:	58021000 	.word	0x58021000

08002c1c <formatFloatString>:
  HAL_SPI_TransmitReceive(&hspi4, pTxData, pRxData,3,100);
  HAL_GPIO_WritePin(SPI4_CS_PIN, SPI4_CS_PIN_NUMBER, 1);
  __NOP();
}

void formatFloatString(char* str, float floatValue) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	; 0x28
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	ed87 0a00 	vstr	s0, [r7]
    char *tmpSign = (floatValue < 0) ? "-" : "";
 8002c28:	edd7 7a00 	vldr	s15, [r7]
 8002c2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c34:	d501      	bpl.n	8002c3a <formatFloatString+0x1e>
 8002c36:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <formatFloatString+0x94>)
 8002c38:	e000      	b.n	8002c3c <formatFloatString+0x20>
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <formatFloatString+0x98>)
 8002c3c:	61fb      	str	r3, [r7, #28]
    float tmpVal = (floatValue < 0) ? -floatValue : floatValue;
 8002c3e:	edd7 7a00 	vldr	s15, [r7]
 8002c42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4a:	d504      	bpl.n	8002c56 <formatFloatString+0x3a>
 8002c4c:	edd7 7a00 	vldr	s15, [r7]
 8002c50:	eef1 7a67 	vneg.f32	s15, s15
 8002c54:	e001      	b.n	8002c5a <formatFloatString+0x3e>
 8002c56:	edd7 7a00 	vldr	s15, [r7]
 8002c5a:	edc7 7a06 	vstr	s15, [r7, #24]
    int tmpInt1 = (int)tmpVal;                  // Get the integer part.
 8002c5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c66:	ee17 3a90 	vmov	r3, s15
 8002c6a:	617b      	str	r3, [r7, #20]
    float tmpFrac = tmpVal - tmpInt1;           // Get the fractional part.
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	ee07 3a90 	vmov	s15, r3
 8002c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c76:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c7e:	edc7 7a04 	vstr	s15, [r7, #16]
    int tmpInt2 = (int)(tmpFrac * 10000000);    // Turn into integer.
 8002c82:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c86:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002cb8 <formatFloatString+0x9c>
 8002c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c92:	ee17 3a90 	vmov	r3, s15
 8002c96:	60fb      	str	r3, [r7, #12]
    sprintf(str, "%s%d.%07d", tmpSign, tmpInt1, tmpInt2);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	4906      	ldr	r1, [pc, #24]	; (8002cbc <formatFloatString+0xa0>)
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f011 fe5c 	bl	8014960 <siprintf>
}
 8002ca8:	bf00      	nop
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	08017cb0 	.word	0x08017cb0
 8002cb4:	08017cb4 	.word	0x08017cb4
 8002cb8:	4b189680 	.word	0x4b189680
 8002cbc:	08017cb8 	.word	0x08017cb8

08002cc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_MspInit+0x30>)
 8002cc8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002ccc:	4a08      	ldr	r2, [pc, #32]	; (8002cf0 <HAL_MspInit+0x30>)
 8002cce:	f043 0302 	orr.w	r3, r3, #2
 8002cd2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_MspInit+0x30>)
 8002cd8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	58024400 	.word	0x58024400

08002cf4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08c      	sub	sp, #48	; 0x30
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 031c 	add.w	r3, r7, #28
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a3e      	ldr	r2, [pc, #248]	; (8002e0c <HAL_SD_MspInit+0x118>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d175      	bne.n	8002e02 <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002d16:	4b3e      	ldr	r3, [pc, #248]	; (8002e10 <HAL_SD_MspInit+0x11c>)
 8002d18:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002d1c:	4a3c      	ldr	r2, [pc, #240]	; (8002e10 <HAL_SD_MspInit+0x11c>)
 8002d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d22:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8002d26:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <HAL_SD_MspInit+0x11c>)
 8002d28:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d34:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <HAL_SD_MspInit+0x11c>)
 8002d36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d3a:	4a35      	ldr	r2, [pc, #212]	; (8002e10 <HAL_SD_MspInit+0x11c>)
 8002d3c:	f043 0302 	orr.w	r3, r3, #2
 8002d40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002d44:	4b32      	ldr	r3, [pc, #200]	; (8002e10 <HAL_SD_MspInit+0x11c>)
 8002d46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d52:	4b2f      	ldr	r3, [pc, #188]	; (8002e10 <HAL_SD_MspInit+0x11c>)
 8002d54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d58:	4a2d      	ldr	r2, [pc, #180]	; (8002e10 <HAL_SD_MspInit+0x11c>)
 8002d5a:	f043 0304 	orr.w	r3, r3, #4
 8002d5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <HAL_SD_MspInit+0x11c>)
 8002d64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d70:	4b27      	ldr	r3, [pc, #156]	; (8002e10 <HAL_SD_MspInit+0x11c>)
 8002d72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d76:	4a26      	ldr	r2, [pc, #152]	; (8002e10 <HAL_SD_MspInit+0x11c>)
 8002d78:	f043 0308 	orr.w	r3, r3, #8
 8002d7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002d80:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <HAL_SD_MspInit+0x11c>)
 8002d82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002da0:	230c      	movs	r3, #12
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da4:	f107 031c 	add.w	r3, r7, #28
 8002da8:	4619      	mov	r1, r3
 8002daa:	481a      	ldr	r0, [pc, #104]	; (8002e14 <HAL_SD_MspInit+0x120>)
 8002dac:	f004 f806 	bl	8006dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002db0:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002dc2:	230c      	movs	r3, #12
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc6:	f107 031c 	add.w	r3, r7, #28
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4812      	ldr	r0, [pc, #72]	; (8002e18 <HAL_SD_MspInit+0x124>)
 8002dce:	f003 fff5 	bl	8006dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dde:	2303      	movs	r3, #3
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002de2:	230c      	movs	r3, #12
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002de6:	f107 031c 	add.w	r3, r7, #28
 8002dea:	4619      	mov	r1, r3
 8002dec:	480b      	ldr	r0, [pc, #44]	; (8002e1c <HAL_SD_MspInit+0x128>)
 8002dee:	f003 ffe5 	bl	8006dbc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	2031      	movs	r0, #49	; 0x31
 8002df8:	f001 f8b1 	bl	8003f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002dfc:	2031      	movs	r0, #49	; 0x31
 8002dfe:	f001 f8c8 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002e02:	bf00      	nop
 8002e04:	3730      	adds	r7, #48	; 0x30
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	52007000 	.word	0x52007000
 8002e10:	58024400 	.word	0x58024400
 8002e14:	58020400 	.word	0x58020400
 8002e18:	58020800 	.word	0x58020800
 8002e1c:	58020c00 	.word	0x58020c00

08002e20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b0be      	sub	sp, #248	; 0xf8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e3c:	22b8      	movs	r2, #184	; 0xb8
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f011 fd85 	bl	8014950 <memset>
  if(hspi->Instance==SPI1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a72      	ldr	r2, [pc, #456]	; (8003014 <HAL_SPI_MspInit+0x1f4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	f040 80f3 	bne.w	8003038 <HAL_SPI_MspInit+0x218>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002e58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e64:	4618      	mov	r0, r3
 8002e66:	f005 f973 	bl	8008150 <HAL_RCCEx_PeriphCLKConfig>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002e70:	f7ff fa00 	bl	8002274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e74:	4b68      	ldr	r3, [pc, #416]	; (8003018 <HAL_SPI_MspInit+0x1f8>)
 8002e76:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002e7a:	4a67      	ldr	r2, [pc, #412]	; (8003018 <HAL_SPI_MspInit+0x1f8>)
 8002e7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e80:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002e84:	4b64      	ldr	r3, [pc, #400]	; (8003018 <HAL_SPI_MspInit+0x1f8>)
 8002e86:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e92:	4b61      	ldr	r3, [pc, #388]	; (8003018 <HAL_SPI_MspInit+0x1f8>)
 8002e94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e98:	4a5f      	ldr	r2, [pc, #380]	; (8003018 <HAL_SPI_MspInit+0x1f8>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002ea2:	4b5d      	ldr	r3, [pc, #372]	; (8003018 <HAL_SPI_MspInit+0x1f8>)
 8002ea4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002eb0:	4b59      	ldr	r3, [pc, #356]	; (8003018 <HAL_SPI_MspInit+0x1f8>)
 8002eb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002eb6:	4a58      	ldr	r2, [pc, #352]	; (8003018 <HAL_SPI_MspInit+0x1f8>)
 8002eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ebc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002ec0:	4b55      	ldr	r3, [pc, #340]	; (8003018 <HAL_SPI_MspInit+0x1f8>)
 8002ec2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	623b      	str	r3, [r7, #32]
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ece:	23c0      	movs	r3, #192	; 0xc0
 8002ed0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ee6:	2305      	movs	r3, #5
 8002ee8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	484a      	ldr	r0, [pc, #296]	; (800301c <HAL_SPI_MspInit+0x1fc>)
 8002ef4:	f003 ff62 	bl	8006dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ef8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002efc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f00:	2302      	movs	r3, #2
 8002f02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f12:	2305      	movs	r3, #5
 8002f14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4840      	ldr	r0, [pc, #256]	; (8003020 <HAL_SPI_MspInit+0x200>)
 8002f20:	f003 ff4c 	bl	8006dbc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8002f24:	4b3f      	ldr	r3, [pc, #252]	; (8003024 <HAL_SPI_MspInit+0x204>)
 8002f26:	4a40      	ldr	r2, [pc, #256]	; (8003028 <HAL_SPI_MspInit+0x208>)
 8002f28:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002f2a:	4b3e      	ldr	r3, [pc, #248]	; (8003024 <HAL_SPI_MspInit+0x204>)
 8002f2c:	2225      	movs	r2, #37	; 0x25
 8002f2e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f30:	4b3c      	ldr	r3, [pc, #240]	; (8003024 <HAL_SPI_MspInit+0x204>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f36:	4b3b      	ldr	r3, [pc, #236]	; (8003024 <HAL_SPI_MspInit+0x204>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f3c:	4b39      	ldr	r3, [pc, #228]	; (8003024 <HAL_SPI_MspInit+0x204>)
 8002f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f42:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f44:	4b37      	ldr	r3, [pc, #220]	; (8003024 <HAL_SPI_MspInit+0x204>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f4a:	4b36      	ldr	r3, [pc, #216]	; (8003024 <HAL_SPI_MspInit+0x204>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002f50:	4b34      	ldr	r3, [pc, #208]	; (8003024 <HAL_SPI_MspInit+0x204>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f56:	4b33      	ldr	r3, [pc, #204]	; (8003024 <HAL_SPI_MspInit+0x204>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f5c:	4b31      	ldr	r3, [pc, #196]	; (8003024 <HAL_SPI_MspInit+0x204>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002f62:	4830      	ldr	r0, [pc, #192]	; (8003024 <HAL_SPI_MspInit+0x204>)
 8002f64:	f001 f83e 	bl	8003fe4 <HAL_DMA_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_SPI_MspInit+0x152>
    {
      Error_Handler();
 8002f6e:	f7ff f981 	bl	8002274 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a2b      	ldr	r2, [pc, #172]	; (8003024 <HAL_SPI_MspInit+0x204>)
 8002f76:	67da      	str	r2, [r3, #124]	; 0x7c
 8002f78:	4a2a      	ldr	r2, [pc, #168]	; (8003024 <HAL_SPI_MspInit+0x204>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8002f7e:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_SPI_MspInit+0x20c>)
 8002f80:	4a2b      	ldr	r2, [pc, #172]	; (8003030 <HAL_SPI_MspInit+0x210>)
 8002f82:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002f84:	4b29      	ldr	r3, [pc, #164]	; (800302c <HAL_SPI_MspInit+0x20c>)
 8002f86:	2226      	movs	r2, #38	; 0x26
 8002f88:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f8a:	4b28      	ldr	r3, [pc, #160]	; (800302c <HAL_SPI_MspInit+0x20c>)
 8002f8c:	2240      	movs	r2, #64	; 0x40
 8002f8e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f90:	4b26      	ldr	r3, [pc, #152]	; (800302c <HAL_SPI_MspInit+0x20c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f96:	4b25      	ldr	r3, [pc, #148]	; (800302c <HAL_SPI_MspInit+0x20c>)
 8002f98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f9c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f9e:	4b23      	ldr	r3, [pc, #140]	; (800302c <HAL_SPI_MspInit+0x20c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fa4:	4b21      	ldr	r3, [pc, #132]	; (800302c <HAL_SPI_MspInit+0x20c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002faa:	4b20      	ldr	r3, [pc, #128]	; (800302c <HAL_SPI_MspInit+0x20c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fb0:	4b1e      	ldr	r3, [pc, #120]	; (800302c <HAL_SPI_MspInit+0x20c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fb6:	4b1d      	ldr	r3, [pc, #116]	; (800302c <HAL_SPI_MspInit+0x20c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002fbc:	481b      	ldr	r0, [pc, #108]	; (800302c <HAL_SPI_MspInit+0x20c>)
 8002fbe:	f001 f811 	bl	8003fe4 <HAL_DMA_Init>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 8002fc8:	f7ff f954 	bl	8002274 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a17      	ldr	r2, [pc, #92]	; (800302c <HAL_SPI_MspInit+0x20c>)
 8002fd0:	679a      	str	r2, [r3, #120]	; 0x78
 8002fd2:	4a16      	ldr	r2, [pc, #88]	; (800302c <HAL_SPI_MspInit+0x20c>)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2100      	movs	r1, #0
 8002fdc:	2023      	movs	r0, #35	; 0x23
 8002fde:	f000 ffbe 	bl	8003f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002fe2:	2023      	movs	r0, #35	; 0x23
 8002fe4:	f000 ffd5 	bl	8003f92 <HAL_NVIC_EnableIRQ>
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
//    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

    // SPI1 MISO interrupt setting FIXME
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fe8:	2340      	movs	r3, #64	; 0x40
 8002fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING; //GPIO_MODE_AF_PP  | TRIGGER_RISING | TRIGGER_FALLING;
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_SPI_MspInit+0x214>)
 8002ff0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003000:	2305      	movs	r3, #5
 8003002:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003006:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800300a:	4619      	mov	r1, r3
 800300c:	4803      	ldr	r0, [pc, #12]	; (800301c <HAL_SPI_MspInit+0x1fc>)
 800300e:	f003 fed5 	bl	8006dbc <HAL_GPIO_Init>


  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003012:	e1cb      	b.n	80033ac <HAL_SPI_MspInit+0x58c>
 8003014:	40013000 	.word	0x40013000
 8003018:	58024400 	.word	0x58024400
 800301c:	58020000 	.word	0x58020000
 8003020:	58021800 	.word	0x58021800
 8003024:	24008428 	.word	0x24008428
 8003028:	40020010 	.word	0x40020010
 800302c:	240084a0 	.word	0x240084a0
 8003030:	40020028 	.word	0x40020028
 8003034:	00210002 	.word	0x00210002
  else if(hspi->Instance==SPI2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a72      	ldr	r2, [pc, #456]	; (8003208 <HAL_SPI_MspInit+0x3e8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	f040 80f4 	bne.w	800322c <HAL_SPI_MspInit+0x40c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800304a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800304e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003052:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003056:	4618      	mov	r0, r3
 8003058:	f005 f87a 	bl	8008150 <HAL_RCCEx_PeriphCLKConfig>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_SPI_MspInit+0x246>
      Error_Handler();
 8003062:	f7ff f907 	bl	8002274 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003066:	4b69      	ldr	r3, [pc, #420]	; (800320c <HAL_SPI_MspInit+0x3ec>)
 8003068:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800306c:	4a67      	ldr	r2, [pc, #412]	; (800320c <HAL_SPI_MspInit+0x3ec>)
 800306e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003072:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8003076:	4b65      	ldr	r3, [pc, #404]	; (800320c <HAL_SPI_MspInit+0x3ec>)
 8003078:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800307c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003084:	4b61      	ldr	r3, [pc, #388]	; (800320c <HAL_SPI_MspInit+0x3ec>)
 8003086:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800308a:	4a60      	ldr	r2, [pc, #384]	; (800320c <HAL_SPI_MspInit+0x3ec>)
 800308c:	f043 0304 	orr.w	r3, r3, #4
 8003090:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003094:	4b5d      	ldr	r3, [pc, #372]	; (800320c <HAL_SPI_MspInit+0x3ec>)
 8003096:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a2:	4b5a      	ldr	r3, [pc, #360]	; (800320c <HAL_SPI_MspInit+0x3ec>)
 80030a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030a8:	4a58      	ldr	r2, [pc, #352]	; (800320c <HAL_SPI_MspInit+0x3ec>)
 80030aa:	f043 0302 	orr.w	r3, r3, #2
 80030ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80030b2:	4b56      	ldr	r3, [pc, #344]	; (800320c <HAL_SPI_MspInit+0x3ec>)
 80030b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80030c0:	2302      	movs	r3, #2
 80030c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c6:	2302      	movs	r3, #2
 80030c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030d8:	2305      	movs	r3, #5
 80030da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030e2:	4619      	mov	r1, r3
 80030e4:	484a      	ldr	r0, [pc, #296]	; (8003210 <HAL_SPI_MspInit+0x3f0>)
 80030e6:	f003 fe69 	bl	8006dbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 80030ea:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80030ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f2:	2302      	movs	r3, #2
 80030f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fe:	2300      	movs	r3, #0
 8003100:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003104:	2305      	movs	r3, #5
 8003106:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800310e:	4619      	mov	r1, r3
 8003110:	4840      	ldr	r0, [pc, #256]	; (8003214 <HAL_SPI_MspInit+0x3f4>)
 8003112:	f003 fe53 	bl	8006dbc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream7;
 8003116:	4b40      	ldr	r3, [pc, #256]	; (8003218 <HAL_SPI_MspInit+0x3f8>)
 8003118:	4a40      	ldr	r2, [pc, #256]	; (800321c <HAL_SPI_MspInit+0x3fc>)
 800311a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800311c:	4b3e      	ldr	r3, [pc, #248]	; (8003218 <HAL_SPI_MspInit+0x3f8>)
 800311e:	2227      	movs	r2, #39	; 0x27
 8003120:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003122:	4b3d      	ldr	r3, [pc, #244]	; (8003218 <HAL_SPI_MspInit+0x3f8>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003128:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <HAL_SPI_MspInit+0x3f8>)
 800312a:	2200      	movs	r2, #0
 800312c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800312e:	4b3a      	ldr	r3, [pc, #232]	; (8003218 <HAL_SPI_MspInit+0x3f8>)
 8003130:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003134:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003136:	4b38      	ldr	r3, [pc, #224]	; (8003218 <HAL_SPI_MspInit+0x3f8>)
 8003138:	2200      	movs	r2, #0
 800313a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800313c:	4b36      	ldr	r3, [pc, #216]	; (8003218 <HAL_SPI_MspInit+0x3f8>)
 800313e:	2200      	movs	r2, #0
 8003140:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003142:	4b35      	ldr	r3, [pc, #212]	; (8003218 <HAL_SPI_MspInit+0x3f8>)
 8003144:	2200      	movs	r2, #0
 8003146:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003148:	4b33      	ldr	r3, [pc, #204]	; (8003218 <HAL_SPI_MspInit+0x3f8>)
 800314a:	2200      	movs	r2, #0
 800314c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800314e:	4b32      	ldr	r3, [pc, #200]	; (8003218 <HAL_SPI_MspInit+0x3f8>)
 8003150:	2200      	movs	r2, #0
 8003152:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003154:	4830      	ldr	r0, [pc, #192]	; (8003218 <HAL_SPI_MspInit+0x3f8>)
 8003156:	f000 ff45 	bl	8003fe4 <HAL_DMA_Init>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_SPI_MspInit+0x344>
      Error_Handler();
 8003160:	f7ff f888 	bl	8002274 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a2c      	ldr	r2, [pc, #176]	; (8003218 <HAL_SPI_MspInit+0x3f8>)
 8003168:	67da      	str	r2, [r3, #124]	; 0x7c
 800316a:	4a2b      	ldr	r2, [pc, #172]	; (8003218 <HAL_SPI_MspInit+0x3f8>)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA2_Stream0;
 8003170:	4b2b      	ldr	r3, [pc, #172]	; (8003220 <HAL_SPI_MspInit+0x400>)
 8003172:	4a2c      	ldr	r2, [pc, #176]	; (8003224 <HAL_SPI_MspInit+0x404>)
 8003174:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8003176:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <HAL_SPI_MspInit+0x400>)
 8003178:	2228      	movs	r2, #40	; 0x28
 800317a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800317c:	4b28      	ldr	r3, [pc, #160]	; (8003220 <HAL_SPI_MspInit+0x400>)
 800317e:	2240      	movs	r2, #64	; 0x40
 8003180:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003182:	4b27      	ldr	r3, [pc, #156]	; (8003220 <HAL_SPI_MspInit+0x400>)
 8003184:	2200      	movs	r2, #0
 8003186:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003188:	4b25      	ldr	r3, [pc, #148]	; (8003220 <HAL_SPI_MspInit+0x400>)
 800318a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800318e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003190:	4b23      	ldr	r3, [pc, #140]	; (8003220 <HAL_SPI_MspInit+0x400>)
 8003192:	2200      	movs	r2, #0
 8003194:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003196:	4b22      	ldr	r3, [pc, #136]	; (8003220 <HAL_SPI_MspInit+0x400>)
 8003198:	2200      	movs	r2, #0
 800319a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800319c:	4b20      	ldr	r3, [pc, #128]	; (8003220 <HAL_SPI_MspInit+0x400>)
 800319e:	2200      	movs	r2, #0
 80031a0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031a2:	4b1f      	ldr	r3, [pc, #124]	; (8003220 <HAL_SPI_MspInit+0x400>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_SPI_MspInit+0x400>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80031ae:	481c      	ldr	r0, [pc, #112]	; (8003220 <HAL_SPI_MspInit+0x400>)
 80031b0:	f000 ff18 	bl	8003fe4 <HAL_DMA_Init>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_SPI_MspInit+0x39e>
      Error_Handler();
 80031ba:	f7ff f85b 	bl	8002274 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a17      	ldr	r2, [pc, #92]	; (8003220 <HAL_SPI_MspInit+0x400>)
 80031c2:	679a      	str	r2, [r3, #120]	; 0x78
 80031c4:	4a16      	ldr	r2, [pc, #88]	; (8003220 <HAL_SPI_MspInit+0x400>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	2024      	movs	r0, #36	; 0x24
 80031d0:	f000 fec5 	bl	8003f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80031d4:	2024      	movs	r0, #36	; 0x24
 80031d6:	f000 fedc 	bl	8003f92 <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80031da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING;// | EXTI_IT | TRIGGER_FALLING;
 80031e2:	4b11      	ldr	r3, [pc, #68]	; (8003228 <HAL_SPI_MspInit+0x408>)
 80031e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031f4:	2305      	movs	r3, #5
 80031f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80031fe:	4619      	mov	r1, r3
 8003200:	4804      	ldr	r0, [pc, #16]	; (8003214 <HAL_SPI_MspInit+0x3f4>)
 8003202:	f003 fddb 	bl	8006dbc <HAL_GPIO_Init>
}
 8003206:	e0d1      	b.n	80033ac <HAL_SPI_MspInit+0x58c>
 8003208:	40003800 	.word	0x40003800
 800320c:	58024400 	.word	0x58024400
 8003210:	58020800 	.word	0x58020800
 8003214:	58020400 	.word	0x58020400
 8003218:	24008518 	.word	0x24008518
 800321c:	400200b8 	.word	0x400200b8
 8003220:	24008590 	.word	0x24008590
 8003224:	40020410 	.word	0x40020410
 8003228:	00210002 	.word	0x00210002
  else if(hspi->Instance==SPI4)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a60      	ldr	r2, [pc, #384]	; (80033b4 <HAL_SPI_MspInit+0x594>)
 8003232:	4293      	cmp	r3, r2
 8003234:	f040 80ba 	bne.w	80033ac <HAL_SPI_MspInit+0x58c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8003238:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800323e:	2300      	movs	r3, #0
 8003240:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003248:	4618      	mov	r0, r3
 800324a:	f004 ff81 	bl	8008150 <HAL_RCCEx_PeriphCLKConfig>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_SPI_MspInit+0x438>
      Error_Handler();
 8003254:	f7ff f80e 	bl	8002274 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003258:	4b57      	ldr	r3, [pc, #348]	; (80033b8 <HAL_SPI_MspInit+0x598>)
 800325a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800325e:	4a56      	ldr	r2, [pc, #344]	; (80033b8 <HAL_SPI_MspInit+0x598>)
 8003260:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003264:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8003268:	4b53      	ldr	r3, [pc, #332]	; (80033b8 <HAL_SPI_MspInit+0x598>)
 800326a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800326e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003276:	4b50      	ldr	r3, [pc, #320]	; (80033b8 <HAL_SPI_MspInit+0x598>)
 8003278:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800327c:	4a4e      	ldr	r2, [pc, #312]	; (80033b8 <HAL_SPI_MspInit+0x598>)
 800327e:	f043 0310 	orr.w	r3, r3, #16
 8003282:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003286:	4b4c      	ldr	r3, [pc, #304]	; (80033b8 <HAL_SPI_MspInit+0x598>)
 8003288:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8003294:	2364      	movs	r3, #100	; 0x64
 8003296:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80032ac:	2305      	movs	r3, #5
 80032ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80032b6:	4619      	mov	r1, r3
 80032b8:	4840      	ldr	r0, [pc, #256]	; (80033bc <HAL_SPI_MspInit+0x59c>)
 80032ba:	f003 fd7f 	bl	8006dbc <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA1_Stream2;
 80032be:	4b40      	ldr	r3, [pc, #256]	; (80033c0 <HAL_SPI_MspInit+0x5a0>)
 80032c0:	4a40      	ldr	r2, [pc, #256]	; (80033c4 <HAL_SPI_MspInit+0x5a4>)
 80032c2:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80032c4:	4b3e      	ldr	r3, [pc, #248]	; (80033c0 <HAL_SPI_MspInit+0x5a0>)
 80032c6:	2253      	movs	r2, #83	; 0x53
 80032c8:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032ca:	4b3d      	ldr	r3, [pc, #244]	; (80033c0 <HAL_SPI_MspInit+0x5a0>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032d0:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <HAL_SPI_MspInit+0x5a0>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032d6:	4b3a      	ldr	r3, [pc, #232]	; (80033c0 <HAL_SPI_MspInit+0x5a0>)
 80032d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032dc:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032de:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <HAL_SPI_MspInit+0x5a0>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032e4:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <HAL_SPI_MspInit+0x5a0>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80032ea:	4b35      	ldr	r3, [pc, #212]	; (80033c0 <HAL_SPI_MspInit+0x5a0>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032f0:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <HAL_SPI_MspInit+0x5a0>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032f6:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <HAL_SPI_MspInit+0x5a0>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80032fc:	4830      	ldr	r0, [pc, #192]	; (80033c0 <HAL_SPI_MspInit+0x5a0>)
 80032fe:	f000 fe71 	bl	8003fe4 <HAL_DMA_Init>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_SPI_MspInit+0x4ec>
      Error_Handler();
 8003308:	f7fe ffb4 	bl	8002274 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <HAL_SPI_MspInit+0x5a0>)
 8003310:	67da      	str	r2, [r3, #124]	; 0x7c
 8003312:	4a2b      	ldr	r2, [pc, #172]	; (80033c0 <HAL_SPI_MspInit+0x5a0>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA1_Stream3;
 8003318:	4b2b      	ldr	r3, [pc, #172]	; (80033c8 <HAL_SPI_MspInit+0x5a8>)
 800331a:	4a2c      	ldr	r2, [pc, #176]	; (80033cc <HAL_SPI_MspInit+0x5ac>)
 800331c:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 800331e:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <HAL_SPI_MspInit+0x5a8>)
 8003320:	2254      	movs	r2, #84	; 0x54
 8003322:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003324:	4b28      	ldr	r3, [pc, #160]	; (80033c8 <HAL_SPI_MspInit+0x5a8>)
 8003326:	2240      	movs	r2, #64	; 0x40
 8003328:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800332a:	4b27      	ldr	r3, [pc, #156]	; (80033c8 <HAL_SPI_MspInit+0x5a8>)
 800332c:	2200      	movs	r2, #0
 800332e:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <HAL_SPI_MspInit+0x5a8>)
 8003332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003336:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003338:	4b23      	ldr	r3, [pc, #140]	; (80033c8 <HAL_SPI_MspInit+0x5a8>)
 800333a:	2200      	movs	r2, #0
 800333c:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800333e:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <HAL_SPI_MspInit+0x5a8>)
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8003344:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <HAL_SPI_MspInit+0x5a8>)
 8003346:	2200      	movs	r2, #0
 8003348:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800334a:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <HAL_SPI_MspInit+0x5a8>)
 800334c:	2200      	movs	r2, #0
 800334e:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003350:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <HAL_SPI_MspInit+0x5a8>)
 8003352:	2200      	movs	r2, #0
 8003354:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8003356:	481c      	ldr	r0, [pc, #112]	; (80033c8 <HAL_SPI_MspInit+0x5a8>)
 8003358:	f000 fe44 	bl	8003fe4 <HAL_DMA_Init>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_SPI_MspInit+0x546>
      Error_Handler();
 8003362:	f7fe ff87 	bl	8002274 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a17      	ldr	r2, [pc, #92]	; (80033c8 <HAL_SPI_MspInit+0x5a8>)
 800336a:	679a      	str	r2, [r3, #120]	; 0x78
 800336c:	4a16      	ldr	r2, [pc, #88]	; (80033c8 <HAL_SPI_MspInit+0x5a8>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8003372:	2200      	movs	r2, #0
 8003374:	2100      	movs	r1, #0
 8003376:	2054      	movs	r0, #84	; 0x54
 8003378:	f000 fdf1 	bl	8003f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800337c:	2054      	movs	r0, #84	; 0x54
 800337e:	f000 fe08 	bl	8003f92 <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003382:	2320      	movs	r3, #32
 8003384:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP | GPIO_MODE_IT_FALLING;// | EXTI_IT | TRIGGER_FALLING;
 8003388:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <HAL_SPI_MspInit+0x5b0>)
 800338a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338e:	2300      	movs	r3, #0
 8003390:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003394:	2300      	movs	r3, #0
 8003396:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800339a:	2305      	movs	r3, #5
 800339c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4805      	ldr	r0, [pc, #20]	; (80033bc <HAL_SPI_MspInit+0x59c>)
 80033a8:	f003 fd08 	bl	8006dbc <HAL_GPIO_Init>
}
 80033ac:	bf00      	nop
 80033ae:	37f8      	adds	r7, #248	; 0xf8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40013400 	.word	0x40013400
 80033b8:	58024400 	.word	0x58024400
 80033bc:	58021000 	.word	0x58021000
 80033c0:	24008608 	.word	0x24008608
 80033c4:	40020040 	.word	0x40020040
 80033c8:	24008680 	.word	0x24008680
 80033cc:	40020058 	.word	0x40020058
 80033d0:	00210002 	.word	0x00210002

080033d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08c      	sub	sp, #48	; 0x30
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 031c 	add.w	r3, r7, #28
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a33      	ldr	r2, [pc, #204]	; (80034c0 <HAL_TIM_Base_MspInit+0xec>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d10f      	bne.n	8003416 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033f6:	4b33      	ldr	r3, [pc, #204]	; (80034c4 <HAL_TIM_Base_MspInit+0xf0>)
 80033f8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80033fc:	4a31      	ldr	r2, [pc, #196]	; (80034c4 <HAL_TIM_Base_MspInit+0xf0>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8003406:	4b2f      	ldr	r3, [pc, #188]	; (80034c4 <HAL_TIM_Base_MspInit+0xf0>)
 8003408:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003414:	e050      	b.n	80034b8 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341e:	d12f      	bne.n	8003480 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003420:	4b28      	ldr	r3, [pc, #160]	; (80034c4 <HAL_TIM_Base_MspInit+0xf0>)
 8003422:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003426:	4a27      	ldr	r2, [pc, #156]	; (80034c4 <HAL_TIM_Base_MspInit+0xf0>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8003430:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_TIM_Base_MspInit+0xf0>)
 8003432:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343e:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <HAL_TIM_Base_MspInit+0xf0>)
 8003440:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003444:	4a1f      	ldr	r2, [pc, #124]	; (80034c4 <HAL_TIM_Base_MspInit+0xf0>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_TIM_Base_MspInit+0xf0>)
 8003450:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800345c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003462:	2302      	movs	r3, #2
 8003464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346a:	2300      	movs	r3, #0
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800346e:	2301      	movs	r3, #1
 8003470:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003472:	f107 031c 	add.w	r3, r7, #28
 8003476:	4619      	mov	r1, r3
 8003478:	4813      	ldr	r0, [pc, #76]	; (80034c8 <HAL_TIM_Base_MspInit+0xf4>)
 800347a:	f003 fc9f 	bl	8006dbc <HAL_GPIO_Init>
}
 800347e:	e01b      	b.n	80034b8 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM16)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a11      	ldr	r2, [pc, #68]	; (80034cc <HAL_TIM_Base_MspInit+0xf8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d116      	bne.n	80034b8 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800348a:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <HAL_TIM_Base_MspInit+0xf0>)
 800348c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003490:	4a0c      	ldr	r2, [pc, #48]	; (80034c4 <HAL_TIM_Base_MspInit+0xf0>)
 8003492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003496:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800349a:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <HAL_TIM_Base_MspInit+0xf0>)
 800349c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80034a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80034a8:	2200      	movs	r2, #0
 80034aa:	2100      	movs	r1, #0
 80034ac:	2075      	movs	r0, #117	; 0x75
 80034ae:	f000 fd56 	bl	8003f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80034b2:	2075      	movs	r0, #117	; 0x75
 80034b4:	f000 fd6d 	bl	8003f92 <HAL_NVIC_EnableIRQ>
}
 80034b8:	bf00      	nop
 80034ba:	3730      	adds	r7, #48	; 0x30
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40010000 	.word	0x40010000
 80034c4:	58024400 	.word	0x58024400
 80034c8:	58020000 	.word	0x58020000
 80034cc:	40014400 	.word	0x40014400

080034d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d8:	f107 030c 	add.w	r3, r7, #12
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a13      	ldr	r2, [pc, #76]	; (800353c <HAL_TIM_MspPostInit+0x6c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d11f      	bne.n	8003532 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f2:	4b13      	ldr	r3, [pc, #76]	; (8003540 <HAL_TIM_MspPostInit+0x70>)
 80034f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80034f8:	4a11      	ldr	r2, [pc, #68]	; (8003540 <HAL_TIM_MspPostInit+0x70>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003502:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <HAL_TIM_MspPostInit+0x70>)
 8003504:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003514:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003516:	2302      	movs	r3, #2
 8003518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351e:	2300      	movs	r3, #0
 8003520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003522:	2301      	movs	r3, #1
 8003524:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003526:	f107 030c 	add.w	r3, r7, #12
 800352a:	4619      	mov	r1, r3
 800352c:	4805      	ldr	r0, [pc, #20]	; (8003544 <HAL_TIM_MspPostInit+0x74>)
 800352e:	f003 fc45 	bl	8006dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003532:	bf00      	nop
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40010000 	.word	0x40010000
 8003540:	58024400 	.word	0x58024400
 8003544:	58020000 	.word	0x58020000

08003548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b0b8      	sub	sp, #224	; 0xe0
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003550:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003560:	f107 0314 	add.w	r3, r7, #20
 8003564:	22b8      	movs	r2, #184	; 0xb8
 8003566:	2100      	movs	r1, #0
 8003568:	4618      	mov	r0, r3
 800356a:	f011 f9f1 	bl	8014950 <memset>
  if(huart->Instance==UART4)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a3f      	ldr	r2, [pc, #252]	; (8003670 <HAL_UART_MspInit+0x128>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d176      	bne.n	8003666 <HAL_UART_MspInit+0x11e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003578:	2302      	movs	r3, #2
 800357a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003582:	f107 0314 	add.w	r3, r7, #20
 8003586:	4618      	mov	r0, r3
 8003588:	f004 fde2 	bl	8008150 <HAL_RCCEx_PeriphCLKConfig>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003592:	f7fe fe6f 	bl	8002274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003596:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_UART_MspInit+0x12c>)
 8003598:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800359c:	4a35      	ldr	r2, [pc, #212]	; (8003674 <HAL_UART_MspInit+0x12c>)
 800359e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035a2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <HAL_UART_MspInit+0x12c>)
 80035a8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80035ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b4:	4b2f      	ldr	r3, [pc, #188]	; (8003674 <HAL_UART_MspInit+0x12c>)
 80035b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80035ba:	4a2e      	ldr	r2, [pc, #184]	; (8003674 <HAL_UART_MspInit+0x12c>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80035c4:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <HAL_UART_MspInit+0x12c>)
 80035c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035d2:	2303      	movs	r3, #3
 80035d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e4:	2300      	movs	r3, #0
 80035e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035ea:	2308      	movs	r3, #8
 80035ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80035f4:	4619      	mov	r1, r3
 80035f6:	4820      	ldr	r0, [pc, #128]	; (8003678 <HAL_UART_MspInit+0x130>)
 80035f8:	f003 fbe0 	bl	8006dbc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <HAL_UART_MspInit+0x134>)
 80035fe:	4a20      	ldr	r2, [pc, #128]	; (8003680 <HAL_UART_MspInit+0x138>)
 8003600:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8003602:	4b1e      	ldr	r3, [pc, #120]	; (800367c <HAL_UART_MspInit+0x134>)
 8003604:	2240      	movs	r2, #64	; 0x40
 8003606:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003608:	4b1c      	ldr	r3, [pc, #112]	; (800367c <HAL_UART_MspInit+0x134>)
 800360a:	2240      	movs	r2, #64	; 0x40
 800360c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800360e:	4b1b      	ldr	r3, [pc, #108]	; (800367c <HAL_UART_MspInit+0x134>)
 8003610:	2200      	movs	r2, #0
 8003612:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <HAL_UART_MspInit+0x134>)
 8003616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800361a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800361c:	4b17      	ldr	r3, [pc, #92]	; (800367c <HAL_UART_MspInit+0x134>)
 800361e:	2200      	movs	r2, #0
 8003620:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003622:	4b16      	ldr	r3, [pc, #88]	; (800367c <HAL_UART_MspInit+0x134>)
 8003624:	2200      	movs	r2, #0
 8003626:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003628:	4b14      	ldr	r3, [pc, #80]	; (800367c <HAL_UART_MspInit+0x134>)
 800362a:	2200      	movs	r2, #0
 800362c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800362e:	4b13      	ldr	r3, [pc, #76]	; (800367c <HAL_UART_MspInit+0x134>)
 8003630:	2200      	movs	r2, #0
 8003632:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <HAL_UART_MspInit+0x134>)
 8003636:	2200      	movs	r2, #0
 8003638:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800363a:	4810      	ldr	r0, [pc, #64]	; (800367c <HAL_UART_MspInit+0x134>)
 800363c:	f000 fcd2 	bl	8003fe4 <HAL_DMA_Init>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8003646:	f7fe fe15 	bl	8002274 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a0b      	ldr	r2, [pc, #44]	; (800367c <HAL_UART_MspInit+0x134>)
 800364e:	679a      	str	r2, [r3, #120]	; 0x78
 8003650:	4a0a      	ldr	r2, [pc, #40]	; (800367c <HAL_UART_MspInit+0x134>)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003656:	2200      	movs	r2, #0
 8003658:	2100      	movs	r1, #0
 800365a:	2034      	movs	r0, #52	; 0x34
 800365c:	f000 fc7f 	bl	8003f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003660:	2034      	movs	r0, #52	; 0x34
 8003662:	f000 fc96 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8003666:	bf00      	nop
 8003668:	37e0      	adds	r7, #224	; 0xe0
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40004c00 	.word	0x40004c00
 8003674:	58024400 	.word	0x58024400
 8003678:	58020000 	.word	0x58020000
 800367c:	2400886c 	.word	0x2400886c
 8003680:	40020070 	.word	0x40020070

08003684 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003698:	4b34      	ldr	r3, [pc, #208]	; (800376c <HAL_FMC_MspInit+0xe8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d161      	bne.n	8003764 <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 80036a0:	4b32      	ldr	r3, [pc, #200]	; (800376c <HAL_FMC_MspInit+0xe8>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80036a6:	4b32      	ldr	r3, [pc, #200]	; (8003770 <HAL_FMC_MspInit+0xec>)
 80036a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80036ac:	4a30      	ldr	r2, [pc, #192]	; (8003770 <HAL_FMC_MspInit+0xec>)
 80036ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036b2:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80036b6:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <HAL_FMC_MspInit+0xec>)
 80036b8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80036bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c0:	603b      	str	r3, [r7, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80036c4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80036c8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	2302      	movs	r3, #2
 80036cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d2:	2303      	movs	r3, #3
 80036d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036d6:	230c      	movs	r3, #12
 80036d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	4619      	mov	r1, r3
 80036de:	4825      	ldr	r0, [pc, #148]	; (8003774 <HAL_FMC_MspInit+0xf0>)
 80036e0:	f003 fb6c 	bl	8006dbc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80036e4:	230d      	movs	r3, #13
 80036e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e8:	2302      	movs	r3, #2
 80036ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f0:	2303      	movs	r3, #3
 80036f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036f4:	230c      	movs	r3, #12
 80036f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036f8:	1d3b      	adds	r3, r7, #4
 80036fa:	4619      	mov	r1, r3
 80036fc:	481e      	ldr	r0, [pc, #120]	; (8003778 <HAL_FMC_MspInit+0xf4>)
 80036fe:	f003 fb5d 	bl	8006dbc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8003702:	f248 1337 	movw	r3, #33079	; 0x8137
 8003706:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003708:	2302      	movs	r3, #2
 800370a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003710:	2303      	movs	r3, #3
 8003712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003714:	230c      	movs	r3, #12
 8003716:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003718:	1d3b      	adds	r3, r7, #4
 800371a:	4619      	mov	r1, r3
 800371c:	4817      	ldr	r0, [pc, #92]	; (800377c <HAL_FMC_MspInit+0xf8>)
 800371e:	f003 fb4d 	bl	8006dbc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003722:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003726:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003728:	2302      	movs	r3, #2
 800372a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003730:	2303      	movs	r3, #3
 8003732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003734:	230c      	movs	r3, #12
 8003736:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	4619      	mov	r1, r3
 800373c:	4810      	ldr	r0, [pc, #64]	; (8003780 <HAL_FMC_MspInit+0xfc>)
 800373e:	f003 fb3d 	bl	8006dbc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003742:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003746:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003748:	2302      	movs	r3, #2
 800374a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003750:	2303      	movs	r3, #3
 8003752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003754:	230c      	movs	r3, #12
 8003756:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003758:	1d3b      	adds	r3, r7, #4
 800375a:	4619      	mov	r1, r3
 800375c:	4809      	ldr	r0, [pc, #36]	; (8003784 <HAL_FMC_MspInit+0x100>)
 800375e:	f003 fb2d 	bl	8006dbc <HAL_GPIO_Init>
 8003762:	e000      	b.n	8003766 <HAL_FMC_MspInit+0xe2>
    return;
 8003764:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	24008974 	.word	0x24008974
 8003770:	58024400 	.word	0x58024400
 8003774:	58021400 	.word	0x58021400
 8003778:	58020800 	.word	0x58020800
 800377c:	58021800 	.word	0x58021800
 8003780:	58021000 	.word	0x58021000
 8003784:	58020c00 	.word	0x58020c00

08003788 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003790:	f7ff ff78 	bl	8003684 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037a0:	e7fe      	b.n	80037a0 <NMI_Handler+0x4>

080037a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037a2:	b480      	push	{r7}
 80037a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037a6:	e7fe      	b.n	80037a6 <HardFault_Handler+0x4>

080037a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037ac:	e7fe      	b.n	80037ac <MemManage_Handler+0x4>

080037ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037b2:	e7fe      	b.n	80037b2 <BusFault_Handler+0x4>

080037b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037b8:	e7fe      	b.n	80037b8 <UsageFault_Handler+0x4>

080037ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037ba:	b480      	push	{r7}
 80037bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037cc:	bf00      	nop
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037d6:	b480      	push	{r7}
 80037d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037e8:	f000 fa76 	bl	8003cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037ec:	bf00      	nop
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80037f4:	4802      	ldr	r0, [pc, #8]	; (8003800 <DMA1_Stream0_IRQHandler+0x10>)
 80037f6:	f001 ff53 	bl	80056a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	24008428 	.word	0x24008428

08003804 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003808:	4802      	ldr	r0, [pc, #8]	; (8003814 <DMA1_Stream1_IRQHandler+0x10>)
 800380a:	f001 ff49 	bl	80056a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	240084a0 	.word	0x240084a0

08003818 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 800381c:	4802      	ldr	r0, [pc, #8]	; (8003828 <DMA1_Stream2_IRQHandler+0x10>)
 800381e:	f001 ff3f 	bl	80056a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	24008608 	.word	0x24008608

0800382c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8003830:	4802      	ldr	r0, [pc, #8]	; (800383c <DMA1_Stream3_IRQHandler+0x10>)
 8003832:	f001 ff35 	bl	80056a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	24008680 	.word	0x24008680

08003840 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003844:	4802      	ldr	r0, [pc, #8]	; (8003850 <DMA1_Stream4_IRQHandler+0x10>)
 8003846:	f001 ff2b 	bl	80056a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	2400886c 	.word	0x2400886c

08003854 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003858:	4802      	ldr	r0, [pc, #8]	; (8003864 <SPI1_IRQHandler+0x10>)
 800385a:	f008 feed 	bl	800c638 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	24008290 	.word	0x24008290

08003868 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800386c:	4802      	ldr	r0, [pc, #8]	; (8003878 <SPI2_IRQHandler+0x10>)
 800386e:	f008 fee3 	bl	800c638 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	24008318 	.word	0x24008318

0800387c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <DMA1_Stream7_IRQHandler+0x10>)
 8003882:	f001 ff0d 	bl	80056a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	24008518 	.word	0x24008518

08003890 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003894:	4802      	ldr	r0, [pc, #8]	; (80038a0 <SDMMC1_IRQHandler+0x10>)
 8003896:	f006 ff73 	bl	800a780 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	24008214 	.word	0x24008214

080038a4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80038a8:	4802      	ldr	r0, [pc, #8]	; (80038b4 <UART4_IRQHandler+0x10>)
 80038aa:	f00b f8b9 	bl	800ea20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	240087dc 	.word	0x240087dc

080038b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80038bc:	4802      	ldr	r0, [pc, #8]	; (80038c8 <DMA2_Stream0_IRQHandler+0x10>)
 80038be:	f001 feef 	bl	80056a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	24008590 	.word	0x24008590

080038cc <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80038d0:	4802      	ldr	r0, [pc, #8]	; (80038dc <SPI4_IRQHandler+0x10>)
 80038d2:	f008 feb1 	bl	800c638 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	240083a0 	.word	0x240083a0

080038e0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80038e4:	4802      	ldr	r0, [pc, #8]	; (80038f0 <TIM16_IRQHandler+0x10>)
 80038e6:	f009 fbbf 	bl	800d068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	24008790 	.word	0x24008790

080038f4 <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI9_5_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80038f8:	2020      	movs	r0, #32
 80038fa:	f003 fc42 	bl	8007182 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80038fe:	2040      	movs	r0, #64	; 0x40
 8003900:	f003 fc3f 	bl	8007182 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003904:	2080      	movs	r0, #128	; 0x80
 8003906:	f003 fc3c 	bl	8007182 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800390a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800390e:	f003 fc38 	bl	8007182 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}

08003916 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800391a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800391e:	f003 fc30 	bl	8007182 <HAL_GPIO_EXTI_IRQHandler>

}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}

08003926 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003926:	b480      	push	{r7}
 8003928:	af00      	add	r7, sp, #0
	return 1;
 800392a:	2301      	movs	r3, #1
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <_kill>:

int _kill(int pid, int sig)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003940:	f010 ffdc 	bl	80148fc <__errno>
 8003944:	4603      	mov	r3, r0
 8003946:	2216      	movs	r2, #22
 8003948:	601a      	str	r2, [r3, #0]
	return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <_exit>:

void _exit (int status)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800395e:	f04f 31ff 	mov.w	r1, #4294967295
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff ffe7 	bl	8003936 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003968:	e7fe      	b.n	8003968 <_exit+0x12>

0800396a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b086      	sub	sp, #24
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	e00a      	b.n	8003992 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800397c:	f3af 8000 	nop.w
 8003980:	4601      	mov	r1, r0
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	60ba      	str	r2, [r7, #8]
 8003988:	b2ca      	uxtb	r2, r1
 800398a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	3301      	adds	r3, #1
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	429a      	cmp	r2, r3
 8003998:	dbf0      	blt.n	800397c <_read+0x12>
	}

return len;
 800399a:	687b      	ldr	r3, [r7, #4]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	e009      	b.n	80039ca <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	60ba      	str	r2, [r7, #8]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	3301      	adds	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	dbf1      	blt.n	80039b6 <_write+0x12>
	}
	return len;
 80039d2:	687b      	ldr	r3, [r7, #4]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <_close>:

int _close(int file)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	return -1;
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a04:	605a      	str	r2, [r3, #4]
	return 0;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <_isatty>:

int _isatty(int file)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
	return 1;
 8003a1c:	2301      	movs	r3, #1
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
	return 0;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <_sbrk+0x5c>)
 8003a4e:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <_sbrk+0x60>)
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a58:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <_sbrk+0x64>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d102      	bne.n	8003a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a60:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <_sbrk+0x64>)
 8003a62:	4a12      	ldr	r2, [pc, #72]	; (8003aac <_sbrk+0x68>)
 8003a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a66:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <_sbrk+0x64>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d207      	bcs.n	8003a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a74:	f010 ff42 	bl	80148fc <__errno>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	220c      	movs	r2, #12
 8003a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a82:	e009      	b.n	8003a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a84:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <_sbrk+0x64>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <_sbrk+0x64>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	4a05      	ldr	r2, [pc, #20]	; (8003aa8 <_sbrk+0x64>)
 8003a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a96:	68fb      	ldr	r3, [r7, #12]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	24100000 	.word	0x24100000
 8003aa4:	00000800 	.word	0x00000800
 8003aa8:	24008978 	.word	0x24008978
 8003aac:	24008e38 	.word	0x24008e38

08003ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ab4:	4b32      	ldr	r3, [pc, #200]	; (8003b80 <SystemInit+0xd0>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	4a31      	ldr	r2, [pc, #196]	; (8003b80 <SystemInit+0xd0>)
 8003abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ac4:	4b2f      	ldr	r3, [pc, #188]	; (8003b84 <SystemInit+0xd4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d807      	bhi.n	8003ae0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ad0:	4b2c      	ldr	r3, [pc, #176]	; (8003b84 <SystemInit+0xd4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f023 030f 	bic.w	r3, r3, #15
 8003ad8:	4a2a      	ldr	r2, [pc, #168]	; (8003b84 <SystemInit+0xd4>)
 8003ada:	f043 0303 	orr.w	r3, r3, #3
 8003ade:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ae0:	4b29      	ldr	r3, [pc, #164]	; (8003b88 <SystemInit+0xd8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a28      	ldr	r2, [pc, #160]	; (8003b88 <SystemInit+0xd8>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003aec:	4b26      	ldr	r3, [pc, #152]	; (8003b88 <SystemInit+0xd8>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003af2:	4b25      	ldr	r3, [pc, #148]	; (8003b88 <SystemInit+0xd8>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4924      	ldr	r1, [pc, #144]	; (8003b88 <SystemInit+0xd8>)
 8003af8:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <SystemInit+0xdc>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003afe:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <SystemInit+0xd4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b0a:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <SystemInit+0xd4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 030f 	bic.w	r3, r3, #15
 8003b12:	4a1c      	ldr	r2, [pc, #112]	; (8003b84 <SystemInit+0xd4>)
 8003b14:	f043 0303 	orr.w	r3, r3, #3
 8003b18:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <SystemInit+0xd8>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <SystemInit+0xd8>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003b26:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <SystemInit+0xd8>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003b2c:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <SystemInit+0xd8>)
 8003b2e:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <SystemInit+0xe0>)
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003b32:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <SystemInit+0xd8>)
 8003b34:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <SystemInit+0xe4>)
 8003b36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003b38:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <SystemInit+0xd8>)
 8003b3a:	4a17      	ldr	r2, [pc, #92]	; (8003b98 <SystemInit+0xe8>)
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <SystemInit+0xd8>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003b44:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <SystemInit+0xd8>)
 8003b46:	4a14      	ldr	r2, [pc, #80]	; (8003b98 <SystemInit+0xe8>)
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003b4a:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <SystemInit+0xd8>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003b50:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <SystemInit+0xd8>)
 8003b52:	4a11      	ldr	r2, [pc, #68]	; (8003b98 <SystemInit+0xe8>)
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003b56:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <SystemInit+0xd8>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <SystemInit+0xd8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a09      	ldr	r2, [pc, #36]	; (8003b88 <SystemInit+0xd8>)
 8003b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b68:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <SystemInit+0xd8>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003b6e:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <SystemInit+0xec>)
 8003b70:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003b74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003b76:	bf00      	nop
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000ed00 	.word	0xe000ed00
 8003b84:	52002000 	.word	0x52002000
 8003b88:	58024400 	.word	0x58024400
 8003b8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003b90:	02020200 	.word	0x02020200
 8003b94:	01ff0000 	.word	0x01ff0000
 8003b98:	01010280 	.word	0x01010280
 8003b9c:	52004000 	.word	0x52004000

08003ba0 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 8003ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ba4:	f7ff ff84 	bl	8003ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ba8:	480c      	ldr	r0, [pc, #48]	; (8003bdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003baa:	490d      	ldr	r1, [pc, #52]	; (8003be0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bac:	4a0d      	ldr	r2, [pc, #52]	; (8003be4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bb0:	e002      	b.n	8003bb8 <LoopCopyDataInit>

08003bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bb6:	3304      	adds	r3, #4

08003bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bbc:	d3f9      	bcc.n	8003bb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bbe:	4a0a      	ldr	r2, [pc, #40]	; (8003be8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bc0:	4c0a      	ldr	r4, [pc, #40]	; (8003bec <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bc4:	e001      	b.n	8003bca <LoopFillZerobss>

08003bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bc8:	3204      	adds	r2, #4

08003bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bcc:	d3fb      	bcc.n	8003bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bce:	f010 fe9b 	bl	8014908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bd2:	f7fd f867 	bl	8000ca4 <main>
  bx  lr
 8003bd6:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 8003bd8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003bdc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003be0:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8003be4:	08018278 	.word	0x08018278
  ldr r2, =_sbss
 8003be8:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8003bec:	24008e34 	.word	0x24008e34

08003bf0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bf0:	e7fe      	b.n	8003bf0 <ADC_IRQHandler>
	...

08003bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bfa:	2003      	movs	r0, #3
 8003bfc:	f000 f9a4 	bl	8003f48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003c00:	f004 f8d0 	bl	8007da4 <HAL_RCC_GetSysClockFreq>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <HAL_Init+0x68>)
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	4913      	ldr	r1, [pc, #76]	; (8003c60 <HAL_Init+0x6c>)
 8003c12:	5ccb      	ldrb	r3, [r1, r3]
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <HAL_Init+0x68>)
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	4a0e      	ldr	r2, [pc, #56]	; (8003c60 <HAL_Init+0x6c>)
 8003c28:	5cd3      	ldrb	r3, [r2, r3]
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
 8003c34:	4a0b      	ldr	r2, [pc, #44]	; (8003c64 <HAL_Init+0x70>)
 8003c36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c38:	4a0b      	ldr	r2, [pc, #44]	; (8003c68 <HAL_Init+0x74>)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c3e:	200e      	movs	r0, #14
 8003c40:	f000 f814 	bl	8003c6c <HAL_InitTick>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e002      	b.n	8003c54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003c4e:	f7ff f837 	bl	8002cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	58024400 	.word	0x58024400
 8003c60:	08017d08 	.word	0x08017d08
 8003c64:	24000010 	.word	0x24000010
 8003c68:	2400000c 	.word	0x2400000c

08003c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003c74:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <HAL_InitTick+0x60>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e021      	b.n	8003cc4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003c80:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <HAL_InitTick+0x64>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <HAL_InitTick+0x60>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 f997 	bl	8003fca <HAL_SYSTICK_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e00e      	b.n	8003cc4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b0f      	cmp	r3, #15
 8003caa:	d80a      	bhi.n	8003cc2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cac:	2200      	movs	r2, #0
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb4:	f000 f953 	bl	8003f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cb8:	4a06      	ldr	r2, [pc, #24]	; (8003cd4 <HAL_InitTick+0x68>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e000      	b.n	8003cc4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	24000018 	.word	0x24000018
 8003cd0:	2400000c 	.word	0x2400000c
 8003cd4:	24000014 	.word	0x24000014

08003cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_IncTick+0x20>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_IncTick+0x24>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <HAL_IncTick+0x24>)
 8003cea:	6013      	str	r3, [r2, #0]
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	24000018 	.word	0x24000018
 8003cfc:	2400897c 	.word	0x2400897c

08003d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return uwTick;
 8003d04:	4b03      	ldr	r3, [pc, #12]	; (8003d14 <HAL_GetTick+0x14>)
 8003d06:	681b      	ldr	r3, [r3, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	2400897c 	.word	0x2400897c

08003d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d20:	f7ff ffee 	bl	8003d00 <HAL_GetTick>
 8003d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d005      	beq.n	8003d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <HAL_Delay+0x44>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d3e:	bf00      	nop
 8003d40:	f7ff ffde 	bl	8003d00 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d8f7      	bhi.n	8003d40 <HAL_Delay+0x28>
  {
  }
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	24000018 	.word	0x24000018

08003d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <__NVIC_SetPriorityGrouping+0x40>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d8e:	4a04      	ldr	r2, [pc, #16]	; (8003da0 <__NVIC_SetPriorityGrouping+0x40>)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	60d3      	str	r3, [r2, #12]
}
 8003d94:	bf00      	nop
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	e000ed00 	.word	0xe000ed00
 8003da4:	05fa0000 	.word	0x05fa0000

08003da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dac:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	f003 0307 	and.w	r3, r3, #7
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	db0b      	blt.n	8003dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	f003 021f 	and.w	r2, r3, #31
 8003ddc:	4907      	ldr	r1, [pc, #28]	; (8003dfc <__NVIC_EnableIRQ+0x38>)
 8003dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	2001      	movs	r0, #1
 8003de6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	e000e100 	.word	0xe000e100

08003e00 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	db12      	blt.n	8003e38 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	f003 021f 	and.w	r2, r3, #31
 8003e18:	490a      	ldr	r1, [pc, #40]	; (8003e44 <__NVIC_DisableIRQ+0x44>)
 8003e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	2001      	movs	r0, #1
 8003e22:	fa00 f202 	lsl.w	r2, r0, r2
 8003e26:	3320      	adds	r3, #32
 8003e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e2c:	f3bf 8f4f 	dsb	sy
}
 8003e30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e32:	f3bf 8f6f 	isb	sy
}
 8003e36:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	e000e100 	.word	0xe000e100

08003e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	6039      	str	r1, [r7, #0]
 8003e52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	db0a      	blt.n	8003e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	490c      	ldr	r1, [pc, #48]	; (8003e94 <__NVIC_SetPriority+0x4c>)
 8003e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e66:	0112      	lsls	r2, r2, #4
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e70:	e00a      	b.n	8003e88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	4908      	ldr	r1, [pc, #32]	; (8003e98 <__NVIC_SetPriority+0x50>)
 8003e78:	88fb      	ldrh	r3, [r7, #6]
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	3b04      	subs	r3, #4
 8003e80:	0112      	lsls	r2, r2, #4
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	440b      	add	r3, r1
 8003e86:	761a      	strb	r2, [r3, #24]
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	e000e100 	.word	0xe000e100
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b089      	sub	sp, #36	; 0x24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f1c3 0307 	rsb	r3, r3, #7
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	bf28      	it	cs
 8003eba:	2304      	movcs	r3, #4
 8003ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	2b06      	cmp	r3, #6
 8003ec4:	d902      	bls.n	8003ecc <NVIC_EncodePriority+0x30>
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3b03      	subs	r3, #3
 8003eca:	e000      	b.n	8003ece <NVIC_EncodePriority+0x32>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43da      	mvns	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	401a      	ands	r2, r3
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	43d9      	mvns	r1, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef4:	4313      	orrs	r3, r2
         );
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3724      	adds	r7, #36	; 0x24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f14:	d301      	bcc.n	8003f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f16:	2301      	movs	r3, #1
 8003f18:	e00f      	b.n	8003f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f1a:	4a0a      	ldr	r2, [pc, #40]	; (8003f44 <SysTick_Config+0x40>)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f22:	210f      	movs	r1, #15
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295
 8003f28:	f7ff ff8e 	bl	8003e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <SysTick_Config+0x40>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f32:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <SysTick_Config+0x40>)
 8003f34:	2207      	movs	r2, #7
 8003f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	e000e010 	.word	0xe000e010

08003f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff ff05 	bl	8003d60 <__NVIC_SetPriorityGrouping>
}
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b086      	sub	sp, #24
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	4603      	mov	r3, r0
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f6c:	f7ff ff1c 	bl	8003da8 <__NVIC_GetPriorityGrouping>
 8003f70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	6978      	ldr	r0, [r7, #20]
 8003f78:	f7ff ff90 	bl	8003e9c <NVIC_EncodePriority>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ff5f 	bl	8003e48 <__NVIC_SetPriority>
}
 8003f8a:	bf00      	nop
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	4603      	mov	r3, r0
 8003f9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ff0f 	bl	8003dc4 <__NVIC_EnableIRQ>
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003fb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff ff1f 	bl	8003e00 <__NVIC_DisableIRQ>
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff ff96 	bl	8003f04 <SysTick_Config>
 8003fd8:	4603      	mov	r3, r0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003fec:	f7ff fe88 	bl	8003d00 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e37f      	b.n	80046fc <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a66      	ldr	r2, [pc, #408]	; (800419c <HAL_DMA_Init+0x1b8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d04a      	beq.n	800409c <HAL_DMA_Init+0xb8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a65      	ldr	r2, [pc, #404]	; (80041a0 <HAL_DMA_Init+0x1bc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d045      	beq.n	800409c <HAL_DMA_Init+0xb8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a63      	ldr	r2, [pc, #396]	; (80041a4 <HAL_DMA_Init+0x1c0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d040      	beq.n	800409c <HAL_DMA_Init+0xb8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a62      	ldr	r2, [pc, #392]	; (80041a8 <HAL_DMA_Init+0x1c4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d03b      	beq.n	800409c <HAL_DMA_Init+0xb8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a60      	ldr	r2, [pc, #384]	; (80041ac <HAL_DMA_Init+0x1c8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d036      	beq.n	800409c <HAL_DMA_Init+0xb8>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a5f      	ldr	r2, [pc, #380]	; (80041b0 <HAL_DMA_Init+0x1cc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d031      	beq.n	800409c <HAL_DMA_Init+0xb8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a5d      	ldr	r2, [pc, #372]	; (80041b4 <HAL_DMA_Init+0x1d0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d02c      	beq.n	800409c <HAL_DMA_Init+0xb8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a5c      	ldr	r2, [pc, #368]	; (80041b8 <HAL_DMA_Init+0x1d4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d027      	beq.n	800409c <HAL_DMA_Init+0xb8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a5a      	ldr	r2, [pc, #360]	; (80041bc <HAL_DMA_Init+0x1d8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d022      	beq.n	800409c <HAL_DMA_Init+0xb8>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a59      	ldr	r2, [pc, #356]	; (80041c0 <HAL_DMA_Init+0x1dc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d01d      	beq.n	800409c <HAL_DMA_Init+0xb8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a57      	ldr	r2, [pc, #348]	; (80041c4 <HAL_DMA_Init+0x1e0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d018      	beq.n	800409c <HAL_DMA_Init+0xb8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a56      	ldr	r2, [pc, #344]	; (80041c8 <HAL_DMA_Init+0x1e4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d013      	beq.n	800409c <HAL_DMA_Init+0xb8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a54      	ldr	r2, [pc, #336]	; (80041cc <HAL_DMA_Init+0x1e8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00e      	beq.n	800409c <HAL_DMA_Init+0xb8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a53      	ldr	r2, [pc, #332]	; (80041d0 <HAL_DMA_Init+0x1ec>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d009      	beq.n	800409c <HAL_DMA_Init+0xb8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a51      	ldr	r2, [pc, #324]	; (80041d4 <HAL_DMA_Init+0x1f0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <HAL_DMA_Init+0xb8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a50      	ldr	r2, [pc, #320]	; (80041d8 <HAL_DMA_Init+0x1f4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d101      	bne.n	80040a0 <HAL_DMA_Init+0xbc>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <HAL_DMA_Init+0xbe>
 80040a0:	2300      	movs	r3, #0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 813c 	beq.w	8004320 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a37      	ldr	r2, [pc, #220]	; (800419c <HAL_DMA_Init+0x1b8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d04a      	beq.n	8004158 <HAL_DMA_Init+0x174>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a36      	ldr	r2, [pc, #216]	; (80041a0 <HAL_DMA_Init+0x1bc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d045      	beq.n	8004158 <HAL_DMA_Init+0x174>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a34      	ldr	r2, [pc, #208]	; (80041a4 <HAL_DMA_Init+0x1c0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d040      	beq.n	8004158 <HAL_DMA_Init+0x174>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a33      	ldr	r2, [pc, #204]	; (80041a8 <HAL_DMA_Init+0x1c4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d03b      	beq.n	8004158 <HAL_DMA_Init+0x174>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a31      	ldr	r2, [pc, #196]	; (80041ac <HAL_DMA_Init+0x1c8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d036      	beq.n	8004158 <HAL_DMA_Init+0x174>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a30      	ldr	r2, [pc, #192]	; (80041b0 <HAL_DMA_Init+0x1cc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d031      	beq.n	8004158 <HAL_DMA_Init+0x174>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a2e      	ldr	r2, [pc, #184]	; (80041b4 <HAL_DMA_Init+0x1d0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d02c      	beq.n	8004158 <HAL_DMA_Init+0x174>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a2d      	ldr	r2, [pc, #180]	; (80041b8 <HAL_DMA_Init+0x1d4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d027      	beq.n	8004158 <HAL_DMA_Init+0x174>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a2b      	ldr	r2, [pc, #172]	; (80041bc <HAL_DMA_Init+0x1d8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d022      	beq.n	8004158 <HAL_DMA_Init+0x174>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a2a      	ldr	r2, [pc, #168]	; (80041c0 <HAL_DMA_Init+0x1dc>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d01d      	beq.n	8004158 <HAL_DMA_Init+0x174>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a28      	ldr	r2, [pc, #160]	; (80041c4 <HAL_DMA_Init+0x1e0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d018      	beq.n	8004158 <HAL_DMA_Init+0x174>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a27      	ldr	r2, [pc, #156]	; (80041c8 <HAL_DMA_Init+0x1e4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d013      	beq.n	8004158 <HAL_DMA_Init+0x174>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a25      	ldr	r2, [pc, #148]	; (80041cc <HAL_DMA_Init+0x1e8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00e      	beq.n	8004158 <HAL_DMA_Init+0x174>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a24      	ldr	r2, [pc, #144]	; (80041d0 <HAL_DMA_Init+0x1ec>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d009      	beq.n	8004158 <HAL_DMA_Init+0x174>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a22      	ldr	r2, [pc, #136]	; (80041d4 <HAL_DMA_Init+0x1f0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d004      	beq.n	8004158 <HAL_DMA_Init+0x174>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a21      	ldr	r2, [pc, #132]	; (80041d8 <HAL_DMA_Init+0x1f4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d108      	bne.n	800416a <HAL_DMA_Init+0x186>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0201 	bic.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	e007      	b.n	800417a <HAL_DMA_Init+0x196>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0201 	bic.w	r2, r2, #1
 8004178:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800417a:	e02f      	b.n	80041dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800417c:	f7ff fdc0 	bl	8003d00 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b05      	cmp	r3, #5
 8004188:	d928      	bls.n	80041dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2203      	movs	r2, #3
 8004194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e2af      	b.n	80046fc <HAL_DMA_Init+0x718>
 800419c:	40020010 	.word	0x40020010
 80041a0:	40020028 	.word	0x40020028
 80041a4:	40020040 	.word	0x40020040
 80041a8:	40020058 	.word	0x40020058
 80041ac:	40020070 	.word	0x40020070
 80041b0:	40020088 	.word	0x40020088
 80041b4:	400200a0 	.word	0x400200a0
 80041b8:	400200b8 	.word	0x400200b8
 80041bc:	40020410 	.word	0x40020410
 80041c0:	40020428 	.word	0x40020428
 80041c4:	40020440 	.word	0x40020440
 80041c8:	40020458 	.word	0x40020458
 80041cc:	40020470 	.word	0x40020470
 80041d0:	40020488 	.word	0x40020488
 80041d4:	400204a0 	.word	0x400204a0
 80041d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1c8      	bne.n	800417c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4b73      	ldr	r3, [pc, #460]	; (80043c4 <HAL_DMA_Init+0x3e0>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004202:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800420e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800421a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	2b04      	cmp	r3, #4
 800422e:	d107      	bne.n	8004240 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	4313      	orrs	r3, r2
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b28      	cmp	r3, #40	; 0x28
 8004246:	d903      	bls.n	8004250 <HAL_DMA_Init+0x26c>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b2e      	cmp	r3, #46	; 0x2e
 800424e:	d91f      	bls.n	8004290 <HAL_DMA_Init+0x2ac>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b3e      	cmp	r3, #62	; 0x3e
 8004256:	d903      	bls.n	8004260 <HAL_DMA_Init+0x27c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b42      	cmp	r3, #66	; 0x42
 800425e:	d917      	bls.n	8004290 <HAL_DMA_Init+0x2ac>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b46      	cmp	r3, #70	; 0x46
 8004266:	d903      	bls.n	8004270 <HAL_DMA_Init+0x28c>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b48      	cmp	r3, #72	; 0x48
 800426e:	d90f      	bls.n	8004290 <HAL_DMA_Init+0x2ac>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b4e      	cmp	r3, #78	; 0x4e
 8004276:	d903      	bls.n	8004280 <HAL_DMA_Init+0x29c>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b52      	cmp	r3, #82	; 0x52
 800427e:	d907      	bls.n	8004290 <HAL_DMA_Init+0x2ac>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b73      	cmp	r3, #115	; 0x73
 8004286:	d905      	bls.n	8004294 <HAL_DMA_Init+0x2b0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b77      	cmp	r3, #119	; 0x77
 800428e:	d801      	bhi.n	8004294 <HAL_DMA_Init+0x2b0>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <HAL_DMA_Init+0x2b2>
 8004294:	2300      	movs	r3, #0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042a0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f023 0307 	bic.w	r3, r3, #7
 80042b8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d117      	bne.n	80042fc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00e      	beq.n	80042fc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f002 fbe2 	bl	8006aa8 <DMA_CheckFifoParam>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2240      	movs	r2, #64	; 0x40
 80042ee:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e1ff      	b.n	80046fc <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f002 fb1d 	bl	8006944 <DMA_CalcBaseAndBitshift>
 800430a:	4603      	mov	r3, r0
 800430c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	223f      	movs	r2, #63	; 0x3f
 8004318:	409a      	lsls	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	609a      	str	r2, [r3, #8]
 800431e:	e0fe      	b.n	800451e <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a28      	ldr	r2, [pc, #160]	; (80043c8 <HAL_DMA_Init+0x3e4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d04a      	beq.n	80043c0 <HAL_DMA_Init+0x3dc>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a27      	ldr	r2, [pc, #156]	; (80043cc <HAL_DMA_Init+0x3e8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d045      	beq.n	80043c0 <HAL_DMA_Init+0x3dc>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a25      	ldr	r2, [pc, #148]	; (80043d0 <HAL_DMA_Init+0x3ec>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d040      	beq.n	80043c0 <HAL_DMA_Init+0x3dc>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a24      	ldr	r2, [pc, #144]	; (80043d4 <HAL_DMA_Init+0x3f0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d03b      	beq.n	80043c0 <HAL_DMA_Init+0x3dc>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a22      	ldr	r2, [pc, #136]	; (80043d8 <HAL_DMA_Init+0x3f4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d036      	beq.n	80043c0 <HAL_DMA_Init+0x3dc>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a21      	ldr	r2, [pc, #132]	; (80043dc <HAL_DMA_Init+0x3f8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d031      	beq.n	80043c0 <HAL_DMA_Init+0x3dc>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1f      	ldr	r2, [pc, #124]	; (80043e0 <HAL_DMA_Init+0x3fc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d02c      	beq.n	80043c0 <HAL_DMA_Init+0x3dc>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1e      	ldr	r2, [pc, #120]	; (80043e4 <HAL_DMA_Init+0x400>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d027      	beq.n	80043c0 <HAL_DMA_Init+0x3dc>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <HAL_DMA_Init+0x404>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d022      	beq.n	80043c0 <HAL_DMA_Init+0x3dc>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <HAL_DMA_Init+0x408>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d01d      	beq.n	80043c0 <HAL_DMA_Init+0x3dc>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a19      	ldr	r2, [pc, #100]	; (80043f0 <HAL_DMA_Init+0x40c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d018      	beq.n	80043c0 <HAL_DMA_Init+0x3dc>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a18      	ldr	r2, [pc, #96]	; (80043f4 <HAL_DMA_Init+0x410>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d013      	beq.n	80043c0 <HAL_DMA_Init+0x3dc>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a16      	ldr	r2, [pc, #88]	; (80043f8 <HAL_DMA_Init+0x414>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00e      	beq.n	80043c0 <HAL_DMA_Init+0x3dc>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a15      	ldr	r2, [pc, #84]	; (80043fc <HAL_DMA_Init+0x418>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d009      	beq.n	80043c0 <HAL_DMA_Init+0x3dc>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a13      	ldr	r2, [pc, #76]	; (8004400 <HAL_DMA_Init+0x41c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d004      	beq.n	80043c0 <HAL_DMA_Init+0x3dc>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a12      	ldr	r2, [pc, #72]	; (8004404 <HAL_DMA_Init+0x420>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d123      	bne.n	8004408 <HAL_DMA_Init+0x424>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e022      	b.n	800440a <HAL_DMA_Init+0x426>
 80043c4:	fe10803f 	.word	0xfe10803f
 80043c8:	48022c08 	.word	0x48022c08
 80043cc:	48022c1c 	.word	0x48022c1c
 80043d0:	48022c30 	.word	0x48022c30
 80043d4:	48022c44 	.word	0x48022c44
 80043d8:	48022c58 	.word	0x48022c58
 80043dc:	48022c6c 	.word	0x48022c6c
 80043e0:	48022c80 	.word	0x48022c80
 80043e4:	48022c94 	.word	0x48022c94
 80043e8:	58025408 	.word	0x58025408
 80043ec:	5802541c 	.word	0x5802541c
 80043f0:	58025430 	.word	0x58025430
 80043f4:	58025444 	.word	0x58025444
 80043f8:	58025458 	.word	0x58025458
 80043fc:	5802546c 	.word	0x5802546c
 8004400:	58025480 	.word	0x58025480
 8004404:	58025494 	.word	0x58025494
 8004408:	2300      	movs	r3, #0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d07e      	beq.n	800450c <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a80      	ldr	r2, [pc, #512]	; (8004614 <HAL_DMA_Init+0x630>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d021      	beq.n	800445c <HAL_DMA_Init+0x478>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a7e      	ldr	r2, [pc, #504]	; (8004618 <HAL_DMA_Init+0x634>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01c      	beq.n	800445c <HAL_DMA_Init+0x478>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a7d      	ldr	r2, [pc, #500]	; (800461c <HAL_DMA_Init+0x638>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d017      	beq.n	800445c <HAL_DMA_Init+0x478>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a7b      	ldr	r2, [pc, #492]	; (8004620 <HAL_DMA_Init+0x63c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d012      	beq.n	800445c <HAL_DMA_Init+0x478>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a7a      	ldr	r2, [pc, #488]	; (8004624 <HAL_DMA_Init+0x640>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00d      	beq.n	800445c <HAL_DMA_Init+0x478>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a78      	ldr	r2, [pc, #480]	; (8004628 <HAL_DMA_Init+0x644>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d008      	beq.n	800445c <HAL_DMA_Init+0x478>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a77      	ldr	r2, [pc, #476]	; (800462c <HAL_DMA_Init+0x648>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d003      	beq.n	800445c <HAL_DMA_Init+0x478>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a75      	ldr	r2, [pc, #468]	; (8004630 <HAL_DMA_Init+0x64c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4b6e      	ldr	r3, [pc, #440]	; (8004634 <HAL_DMA_Init+0x650>)
 800447a:	4013      	ands	r3, r2
 800447c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b40      	cmp	r3, #64	; 0x40
 8004484:	d008      	beq.n	8004498 <HAL_DMA_Init+0x4b4>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b80      	cmp	r3, #128	; 0x80
 800448c:	d102      	bne.n	8004494 <HAL_DMA_Init+0x4b0>
 800448e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004492:	e002      	b.n	800449a <HAL_DMA_Init+0x4b6>
 8004494:	2300      	movs	r3, #0
 8004496:	e000      	b.n	800449a <HAL_DMA_Init+0x4b6>
 8004498:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68d2      	ldr	r2, [r2, #12]
 800449e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80044a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80044b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80044b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80044c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80044c8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	4b56      	ldr	r3, [pc, #344]	; (8004638 <HAL_DMA_Init+0x654>)
 80044e0:	4413      	add	r3, r2
 80044e2:	4a56      	ldr	r2, [pc, #344]	; (800463c <HAL_DMA_Init+0x658>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	009a      	lsls	r2, r3, #2
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f002 fa27 	bl	8006944 <DMA_CalcBaseAndBitshift>
 80044f6:	4603      	mov	r3, r0
 80044f8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fe:	f003 031f 	and.w	r3, r3, #31
 8004502:	2201      	movs	r2, #1
 8004504:	409a      	lsls	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	e008      	b.n	800451e <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2240      	movs	r2, #64	; 0x40
 8004510:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2203      	movs	r2, #3
 8004516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e0ee      	b.n	80046fc <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a47      	ldr	r2, [pc, #284]	; (8004640 <HAL_DMA_Init+0x65c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d072      	beq.n	800460e <HAL_DMA_Init+0x62a>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a45      	ldr	r2, [pc, #276]	; (8004644 <HAL_DMA_Init+0x660>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d06d      	beq.n	800460e <HAL_DMA_Init+0x62a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a44      	ldr	r2, [pc, #272]	; (8004648 <HAL_DMA_Init+0x664>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d068      	beq.n	800460e <HAL_DMA_Init+0x62a>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a42      	ldr	r2, [pc, #264]	; (800464c <HAL_DMA_Init+0x668>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d063      	beq.n	800460e <HAL_DMA_Init+0x62a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a41      	ldr	r2, [pc, #260]	; (8004650 <HAL_DMA_Init+0x66c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d05e      	beq.n	800460e <HAL_DMA_Init+0x62a>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a3f      	ldr	r2, [pc, #252]	; (8004654 <HAL_DMA_Init+0x670>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d059      	beq.n	800460e <HAL_DMA_Init+0x62a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a3e      	ldr	r2, [pc, #248]	; (8004658 <HAL_DMA_Init+0x674>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d054      	beq.n	800460e <HAL_DMA_Init+0x62a>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a3c      	ldr	r2, [pc, #240]	; (800465c <HAL_DMA_Init+0x678>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d04f      	beq.n	800460e <HAL_DMA_Init+0x62a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a3b      	ldr	r2, [pc, #236]	; (8004660 <HAL_DMA_Init+0x67c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d04a      	beq.n	800460e <HAL_DMA_Init+0x62a>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a39      	ldr	r2, [pc, #228]	; (8004664 <HAL_DMA_Init+0x680>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d045      	beq.n	800460e <HAL_DMA_Init+0x62a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a38      	ldr	r2, [pc, #224]	; (8004668 <HAL_DMA_Init+0x684>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d040      	beq.n	800460e <HAL_DMA_Init+0x62a>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a36      	ldr	r2, [pc, #216]	; (800466c <HAL_DMA_Init+0x688>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d03b      	beq.n	800460e <HAL_DMA_Init+0x62a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a35      	ldr	r2, [pc, #212]	; (8004670 <HAL_DMA_Init+0x68c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d036      	beq.n	800460e <HAL_DMA_Init+0x62a>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a33      	ldr	r2, [pc, #204]	; (8004674 <HAL_DMA_Init+0x690>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d031      	beq.n	800460e <HAL_DMA_Init+0x62a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a32      	ldr	r2, [pc, #200]	; (8004678 <HAL_DMA_Init+0x694>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d02c      	beq.n	800460e <HAL_DMA_Init+0x62a>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a30      	ldr	r2, [pc, #192]	; (800467c <HAL_DMA_Init+0x698>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d027      	beq.n	800460e <HAL_DMA_Init+0x62a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a14      	ldr	r2, [pc, #80]	; (8004614 <HAL_DMA_Init+0x630>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d022      	beq.n	800460e <HAL_DMA_Init+0x62a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a12      	ldr	r2, [pc, #72]	; (8004618 <HAL_DMA_Init+0x634>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d01d      	beq.n	800460e <HAL_DMA_Init+0x62a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a11      	ldr	r2, [pc, #68]	; (800461c <HAL_DMA_Init+0x638>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d018      	beq.n	800460e <HAL_DMA_Init+0x62a>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a0f      	ldr	r2, [pc, #60]	; (8004620 <HAL_DMA_Init+0x63c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d013      	beq.n	800460e <HAL_DMA_Init+0x62a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a0e      	ldr	r2, [pc, #56]	; (8004624 <HAL_DMA_Init+0x640>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00e      	beq.n	800460e <HAL_DMA_Init+0x62a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a0c      	ldr	r2, [pc, #48]	; (8004628 <HAL_DMA_Init+0x644>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d009      	beq.n	800460e <HAL_DMA_Init+0x62a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a0b      	ldr	r2, [pc, #44]	; (800462c <HAL_DMA_Init+0x648>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d004      	beq.n	800460e <HAL_DMA_Init+0x62a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a09      	ldr	r2, [pc, #36]	; (8004630 <HAL_DMA_Init+0x64c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d138      	bne.n	8004680 <HAL_DMA_Init+0x69c>
 800460e:	2301      	movs	r3, #1
 8004610:	e037      	b.n	8004682 <HAL_DMA_Init+0x69e>
 8004612:	bf00      	nop
 8004614:	58025408 	.word	0x58025408
 8004618:	5802541c 	.word	0x5802541c
 800461c:	58025430 	.word	0x58025430
 8004620:	58025444 	.word	0x58025444
 8004624:	58025458 	.word	0x58025458
 8004628:	5802546c 	.word	0x5802546c
 800462c:	58025480 	.word	0x58025480
 8004630:	58025494 	.word	0x58025494
 8004634:	fffe000f 	.word	0xfffe000f
 8004638:	a7fdabf8 	.word	0xa7fdabf8
 800463c:	cccccccd 	.word	0xcccccccd
 8004640:	40020010 	.word	0x40020010
 8004644:	40020028 	.word	0x40020028
 8004648:	40020040 	.word	0x40020040
 800464c:	40020058 	.word	0x40020058
 8004650:	40020070 	.word	0x40020070
 8004654:	40020088 	.word	0x40020088
 8004658:	400200a0 	.word	0x400200a0
 800465c:	400200b8 	.word	0x400200b8
 8004660:	40020410 	.word	0x40020410
 8004664:	40020428 	.word	0x40020428
 8004668:	40020440 	.word	0x40020440
 800466c:	40020458 	.word	0x40020458
 8004670:	40020470 	.word	0x40020470
 8004674:	40020488 	.word	0x40020488
 8004678:	400204a0 	.word	0x400204a0
 800467c:	400204b8 	.word	0x400204b8
 8004680:	2300      	movs	r3, #0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d032      	beq.n	80046ec <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f002 fa8a 	bl	8006ba0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b80      	cmp	r3, #128	; 0x80
 8004692:	d102      	bne.n	800469a <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046ae:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d010      	beq.n	80046da <HAL_DMA_Init+0x6f6>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d80c      	bhi.n	80046da <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f002 fb07 	bl	8006cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046d6:	605a      	str	r2, [r3, #4]
 80046d8:	e008      	b.n	80046ec <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e226      	b.n	8004b6e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_DMA_Start_IT+0x2a>
 800472a:	2302      	movs	r3, #2
 800472c:	e21f      	b.n	8004b6e <HAL_DMA_Start_IT+0x46a>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b01      	cmp	r3, #1
 8004740:	f040 820a 	bne.w	8004b58 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a68      	ldr	r2, [pc, #416]	; (80048f8 <HAL_DMA_Start_IT+0x1f4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d04a      	beq.n	80047f2 <HAL_DMA_Start_IT+0xee>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a66      	ldr	r2, [pc, #408]	; (80048fc <HAL_DMA_Start_IT+0x1f8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d045      	beq.n	80047f2 <HAL_DMA_Start_IT+0xee>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a65      	ldr	r2, [pc, #404]	; (8004900 <HAL_DMA_Start_IT+0x1fc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d040      	beq.n	80047f2 <HAL_DMA_Start_IT+0xee>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a63      	ldr	r2, [pc, #396]	; (8004904 <HAL_DMA_Start_IT+0x200>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d03b      	beq.n	80047f2 <HAL_DMA_Start_IT+0xee>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a62      	ldr	r2, [pc, #392]	; (8004908 <HAL_DMA_Start_IT+0x204>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d036      	beq.n	80047f2 <HAL_DMA_Start_IT+0xee>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a60      	ldr	r2, [pc, #384]	; (800490c <HAL_DMA_Start_IT+0x208>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d031      	beq.n	80047f2 <HAL_DMA_Start_IT+0xee>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a5f      	ldr	r2, [pc, #380]	; (8004910 <HAL_DMA_Start_IT+0x20c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d02c      	beq.n	80047f2 <HAL_DMA_Start_IT+0xee>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a5d      	ldr	r2, [pc, #372]	; (8004914 <HAL_DMA_Start_IT+0x210>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d027      	beq.n	80047f2 <HAL_DMA_Start_IT+0xee>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a5c      	ldr	r2, [pc, #368]	; (8004918 <HAL_DMA_Start_IT+0x214>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d022      	beq.n	80047f2 <HAL_DMA_Start_IT+0xee>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a5a      	ldr	r2, [pc, #360]	; (800491c <HAL_DMA_Start_IT+0x218>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d01d      	beq.n	80047f2 <HAL_DMA_Start_IT+0xee>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a59      	ldr	r2, [pc, #356]	; (8004920 <HAL_DMA_Start_IT+0x21c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d018      	beq.n	80047f2 <HAL_DMA_Start_IT+0xee>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a57      	ldr	r2, [pc, #348]	; (8004924 <HAL_DMA_Start_IT+0x220>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <HAL_DMA_Start_IT+0xee>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a56      	ldr	r2, [pc, #344]	; (8004928 <HAL_DMA_Start_IT+0x224>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00e      	beq.n	80047f2 <HAL_DMA_Start_IT+0xee>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a54      	ldr	r2, [pc, #336]	; (800492c <HAL_DMA_Start_IT+0x228>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d009      	beq.n	80047f2 <HAL_DMA_Start_IT+0xee>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a53      	ldr	r2, [pc, #332]	; (8004930 <HAL_DMA_Start_IT+0x22c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d004      	beq.n	80047f2 <HAL_DMA_Start_IT+0xee>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a51      	ldr	r2, [pc, #324]	; (8004934 <HAL_DMA_Start_IT+0x230>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d108      	bne.n	8004804 <HAL_DMA_Start_IT+0x100>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	e007      	b.n	8004814 <HAL_DMA_Start_IT+0x110>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0201 	bic.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f001 feae 	bl	800657c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a34      	ldr	r2, [pc, #208]	; (80048f8 <HAL_DMA_Start_IT+0x1f4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d04a      	beq.n	80048c0 <HAL_DMA_Start_IT+0x1bc>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a33      	ldr	r2, [pc, #204]	; (80048fc <HAL_DMA_Start_IT+0x1f8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d045      	beq.n	80048c0 <HAL_DMA_Start_IT+0x1bc>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a31      	ldr	r2, [pc, #196]	; (8004900 <HAL_DMA_Start_IT+0x1fc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d040      	beq.n	80048c0 <HAL_DMA_Start_IT+0x1bc>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a30      	ldr	r2, [pc, #192]	; (8004904 <HAL_DMA_Start_IT+0x200>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d03b      	beq.n	80048c0 <HAL_DMA_Start_IT+0x1bc>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a2e      	ldr	r2, [pc, #184]	; (8004908 <HAL_DMA_Start_IT+0x204>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d036      	beq.n	80048c0 <HAL_DMA_Start_IT+0x1bc>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a2d      	ldr	r2, [pc, #180]	; (800490c <HAL_DMA_Start_IT+0x208>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d031      	beq.n	80048c0 <HAL_DMA_Start_IT+0x1bc>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a2b      	ldr	r2, [pc, #172]	; (8004910 <HAL_DMA_Start_IT+0x20c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d02c      	beq.n	80048c0 <HAL_DMA_Start_IT+0x1bc>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a2a      	ldr	r2, [pc, #168]	; (8004914 <HAL_DMA_Start_IT+0x210>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d027      	beq.n	80048c0 <HAL_DMA_Start_IT+0x1bc>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a28      	ldr	r2, [pc, #160]	; (8004918 <HAL_DMA_Start_IT+0x214>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d022      	beq.n	80048c0 <HAL_DMA_Start_IT+0x1bc>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a27      	ldr	r2, [pc, #156]	; (800491c <HAL_DMA_Start_IT+0x218>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d01d      	beq.n	80048c0 <HAL_DMA_Start_IT+0x1bc>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a25      	ldr	r2, [pc, #148]	; (8004920 <HAL_DMA_Start_IT+0x21c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d018      	beq.n	80048c0 <HAL_DMA_Start_IT+0x1bc>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a24      	ldr	r2, [pc, #144]	; (8004924 <HAL_DMA_Start_IT+0x220>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d013      	beq.n	80048c0 <HAL_DMA_Start_IT+0x1bc>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a22      	ldr	r2, [pc, #136]	; (8004928 <HAL_DMA_Start_IT+0x224>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00e      	beq.n	80048c0 <HAL_DMA_Start_IT+0x1bc>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a21      	ldr	r2, [pc, #132]	; (800492c <HAL_DMA_Start_IT+0x228>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d009      	beq.n	80048c0 <HAL_DMA_Start_IT+0x1bc>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1f      	ldr	r2, [pc, #124]	; (8004930 <HAL_DMA_Start_IT+0x22c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d004      	beq.n	80048c0 <HAL_DMA_Start_IT+0x1bc>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1e      	ldr	r2, [pc, #120]	; (8004934 <HAL_DMA_Start_IT+0x230>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d101      	bne.n	80048c4 <HAL_DMA_Start_IT+0x1c0>
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <HAL_DMA_Start_IT+0x1c2>
 80048c4:	2300      	movs	r3, #0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d036      	beq.n	8004938 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f023 021e 	bic.w	r2, r3, #30
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0216 	orr.w	r2, r2, #22
 80048dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d03e      	beq.n	8004964 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0208 	orr.w	r2, r2, #8
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	e035      	b.n	8004964 <HAL_DMA_Start_IT+0x260>
 80048f8:	40020010 	.word	0x40020010
 80048fc:	40020028 	.word	0x40020028
 8004900:	40020040 	.word	0x40020040
 8004904:	40020058 	.word	0x40020058
 8004908:	40020070 	.word	0x40020070
 800490c:	40020088 	.word	0x40020088
 8004910:	400200a0 	.word	0x400200a0
 8004914:	400200b8 	.word	0x400200b8
 8004918:	40020410 	.word	0x40020410
 800491c:	40020428 	.word	0x40020428
 8004920:	40020440 	.word	0x40020440
 8004924:	40020458 	.word	0x40020458
 8004928:	40020470 	.word	0x40020470
 800492c:	40020488 	.word	0x40020488
 8004930:	400204a0 	.word	0x400204a0
 8004934:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f023 020e 	bic.w	r2, r3, #14
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 020a 	orr.w	r2, r2, #10
 800494a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0204 	orr.w	r2, r2, #4
 8004962:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a83      	ldr	r2, [pc, #524]	; (8004b78 <HAL_DMA_Start_IT+0x474>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d072      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a82      	ldr	r2, [pc, #520]	; (8004b7c <HAL_DMA_Start_IT+0x478>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d06d      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a80      	ldr	r2, [pc, #512]	; (8004b80 <HAL_DMA_Start_IT+0x47c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d068      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a7f      	ldr	r2, [pc, #508]	; (8004b84 <HAL_DMA_Start_IT+0x480>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d063      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a7d      	ldr	r2, [pc, #500]	; (8004b88 <HAL_DMA_Start_IT+0x484>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d05e      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a7c      	ldr	r2, [pc, #496]	; (8004b8c <HAL_DMA_Start_IT+0x488>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d059      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a7a      	ldr	r2, [pc, #488]	; (8004b90 <HAL_DMA_Start_IT+0x48c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d054      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a79      	ldr	r2, [pc, #484]	; (8004b94 <HAL_DMA_Start_IT+0x490>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d04f      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a77      	ldr	r2, [pc, #476]	; (8004b98 <HAL_DMA_Start_IT+0x494>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d04a      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a76      	ldr	r2, [pc, #472]	; (8004b9c <HAL_DMA_Start_IT+0x498>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d045      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a74      	ldr	r2, [pc, #464]	; (8004ba0 <HAL_DMA_Start_IT+0x49c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d040      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a73      	ldr	r2, [pc, #460]	; (8004ba4 <HAL_DMA_Start_IT+0x4a0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d03b      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a71      	ldr	r2, [pc, #452]	; (8004ba8 <HAL_DMA_Start_IT+0x4a4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d036      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a70      	ldr	r2, [pc, #448]	; (8004bac <HAL_DMA_Start_IT+0x4a8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d031      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a6e      	ldr	r2, [pc, #440]	; (8004bb0 <HAL_DMA_Start_IT+0x4ac>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d02c      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a6d      	ldr	r2, [pc, #436]	; (8004bb4 <HAL_DMA_Start_IT+0x4b0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d027      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a6b      	ldr	r2, [pc, #428]	; (8004bb8 <HAL_DMA_Start_IT+0x4b4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d022      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a6a      	ldr	r2, [pc, #424]	; (8004bbc <HAL_DMA_Start_IT+0x4b8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d01d      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a68      	ldr	r2, [pc, #416]	; (8004bc0 <HAL_DMA_Start_IT+0x4bc>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d018      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a67      	ldr	r2, [pc, #412]	; (8004bc4 <HAL_DMA_Start_IT+0x4c0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d013      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a65      	ldr	r2, [pc, #404]	; (8004bc8 <HAL_DMA_Start_IT+0x4c4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00e      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a64      	ldr	r2, [pc, #400]	; (8004bcc <HAL_DMA_Start_IT+0x4c8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d009      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a62      	ldr	r2, [pc, #392]	; (8004bd0 <HAL_DMA_Start_IT+0x4cc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d004      	beq.n	8004a54 <HAL_DMA_Start_IT+0x350>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a61      	ldr	r2, [pc, #388]	; (8004bd4 <HAL_DMA_Start_IT+0x4d0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d101      	bne.n	8004a58 <HAL_DMA_Start_IT+0x354>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <HAL_DMA_Start_IT+0x356>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01a      	beq.n	8004a94 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d007      	beq.n	8004a7c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a7a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d007      	beq.n	8004a94 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a92:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a37      	ldr	r2, [pc, #220]	; (8004b78 <HAL_DMA_Start_IT+0x474>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d04a      	beq.n	8004b34 <HAL_DMA_Start_IT+0x430>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a36      	ldr	r2, [pc, #216]	; (8004b7c <HAL_DMA_Start_IT+0x478>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d045      	beq.n	8004b34 <HAL_DMA_Start_IT+0x430>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a34      	ldr	r2, [pc, #208]	; (8004b80 <HAL_DMA_Start_IT+0x47c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d040      	beq.n	8004b34 <HAL_DMA_Start_IT+0x430>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a33      	ldr	r2, [pc, #204]	; (8004b84 <HAL_DMA_Start_IT+0x480>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d03b      	beq.n	8004b34 <HAL_DMA_Start_IT+0x430>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a31      	ldr	r2, [pc, #196]	; (8004b88 <HAL_DMA_Start_IT+0x484>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d036      	beq.n	8004b34 <HAL_DMA_Start_IT+0x430>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a30      	ldr	r2, [pc, #192]	; (8004b8c <HAL_DMA_Start_IT+0x488>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d031      	beq.n	8004b34 <HAL_DMA_Start_IT+0x430>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a2e      	ldr	r2, [pc, #184]	; (8004b90 <HAL_DMA_Start_IT+0x48c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d02c      	beq.n	8004b34 <HAL_DMA_Start_IT+0x430>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a2d      	ldr	r2, [pc, #180]	; (8004b94 <HAL_DMA_Start_IT+0x490>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d027      	beq.n	8004b34 <HAL_DMA_Start_IT+0x430>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a2b      	ldr	r2, [pc, #172]	; (8004b98 <HAL_DMA_Start_IT+0x494>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d022      	beq.n	8004b34 <HAL_DMA_Start_IT+0x430>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a2a      	ldr	r2, [pc, #168]	; (8004b9c <HAL_DMA_Start_IT+0x498>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d01d      	beq.n	8004b34 <HAL_DMA_Start_IT+0x430>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a28      	ldr	r2, [pc, #160]	; (8004ba0 <HAL_DMA_Start_IT+0x49c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d018      	beq.n	8004b34 <HAL_DMA_Start_IT+0x430>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a27      	ldr	r2, [pc, #156]	; (8004ba4 <HAL_DMA_Start_IT+0x4a0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d013      	beq.n	8004b34 <HAL_DMA_Start_IT+0x430>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a25      	ldr	r2, [pc, #148]	; (8004ba8 <HAL_DMA_Start_IT+0x4a4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00e      	beq.n	8004b34 <HAL_DMA_Start_IT+0x430>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a24      	ldr	r2, [pc, #144]	; (8004bac <HAL_DMA_Start_IT+0x4a8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d009      	beq.n	8004b34 <HAL_DMA_Start_IT+0x430>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a22      	ldr	r2, [pc, #136]	; (8004bb0 <HAL_DMA_Start_IT+0x4ac>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d004      	beq.n	8004b34 <HAL_DMA_Start_IT+0x430>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a21      	ldr	r2, [pc, #132]	; (8004bb4 <HAL_DMA_Start_IT+0x4b0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d108      	bne.n	8004b46 <HAL_DMA_Start_IT+0x442>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	e012      	b.n	8004b6c <HAL_DMA_Start_IT+0x468>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0201 	orr.w	r2, r2, #1
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	e009      	b.n	8004b6c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40020010 	.word	0x40020010
 8004b7c:	40020028 	.word	0x40020028
 8004b80:	40020040 	.word	0x40020040
 8004b84:	40020058 	.word	0x40020058
 8004b88:	40020070 	.word	0x40020070
 8004b8c:	40020088 	.word	0x40020088
 8004b90:	400200a0 	.word	0x400200a0
 8004b94:	400200b8 	.word	0x400200b8
 8004b98:	40020410 	.word	0x40020410
 8004b9c:	40020428 	.word	0x40020428
 8004ba0:	40020440 	.word	0x40020440
 8004ba4:	40020458 	.word	0x40020458
 8004ba8:	40020470 	.word	0x40020470
 8004bac:	40020488 	.word	0x40020488
 8004bb0:	400204a0 	.word	0x400204a0
 8004bb4:	400204b8 	.word	0x400204b8
 8004bb8:	58025408 	.word	0x58025408
 8004bbc:	5802541c 	.word	0x5802541c
 8004bc0:	58025430 	.word	0x58025430
 8004bc4:	58025444 	.word	0x58025444
 8004bc8:	58025458 	.word	0x58025458
 8004bcc:	5802546c 	.word	0x5802546c
 8004bd0:	58025480 	.word	0x58025480
 8004bd4:	58025494 	.word	0x58025494

08004bd8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004be0:	f7ff f88e 	bl	8003d00 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e2dc      	b.n	80051aa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d008      	beq.n	8004c0e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2280      	movs	r2, #128	; 0x80
 8004c00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e2cd      	b.n	80051aa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a76      	ldr	r2, [pc, #472]	; (8004dec <HAL_DMA_Abort+0x214>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d04a      	beq.n	8004cae <HAL_DMA_Abort+0xd6>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a74      	ldr	r2, [pc, #464]	; (8004df0 <HAL_DMA_Abort+0x218>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d045      	beq.n	8004cae <HAL_DMA_Abort+0xd6>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a73      	ldr	r2, [pc, #460]	; (8004df4 <HAL_DMA_Abort+0x21c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d040      	beq.n	8004cae <HAL_DMA_Abort+0xd6>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a71      	ldr	r2, [pc, #452]	; (8004df8 <HAL_DMA_Abort+0x220>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d03b      	beq.n	8004cae <HAL_DMA_Abort+0xd6>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a70      	ldr	r2, [pc, #448]	; (8004dfc <HAL_DMA_Abort+0x224>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d036      	beq.n	8004cae <HAL_DMA_Abort+0xd6>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a6e      	ldr	r2, [pc, #440]	; (8004e00 <HAL_DMA_Abort+0x228>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d031      	beq.n	8004cae <HAL_DMA_Abort+0xd6>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a6d      	ldr	r2, [pc, #436]	; (8004e04 <HAL_DMA_Abort+0x22c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d02c      	beq.n	8004cae <HAL_DMA_Abort+0xd6>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a6b      	ldr	r2, [pc, #428]	; (8004e08 <HAL_DMA_Abort+0x230>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d027      	beq.n	8004cae <HAL_DMA_Abort+0xd6>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a6a      	ldr	r2, [pc, #424]	; (8004e0c <HAL_DMA_Abort+0x234>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d022      	beq.n	8004cae <HAL_DMA_Abort+0xd6>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a68      	ldr	r2, [pc, #416]	; (8004e10 <HAL_DMA_Abort+0x238>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d01d      	beq.n	8004cae <HAL_DMA_Abort+0xd6>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a67      	ldr	r2, [pc, #412]	; (8004e14 <HAL_DMA_Abort+0x23c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d018      	beq.n	8004cae <HAL_DMA_Abort+0xd6>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a65      	ldr	r2, [pc, #404]	; (8004e18 <HAL_DMA_Abort+0x240>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <HAL_DMA_Abort+0xd6>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a64      	ldr	r2, [pc, #400]	; (8004e1c <HAL_DMA_Abort+0x244>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00e      	beq.n	8004cae <HAL_DMA_Abort+0xd6>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a62      	ldr	r2, [pc, #392]	; (8004e20 <HAL_DMA_Abort+0x248>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d009      	beq.n	8004cae <HAL_DMA_Abort+0xd6>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a61      	ldr	r2, [pc, #388]	; (8004e24 <HAL_DMA_Abort+0x24c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d004      	beq.n	8004cae <HAL_DMA_Abort+0xd6>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a5f      	ldr	r2, [pc, #380]	; (8004e28 <HAL_DMA_Abort+0x250>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d101      	bne.n	8004cb2 <HAL_DMA_Abort+0xda>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <HAL_DMA_Abort+0xdc>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d013      	beq.n	8004ce0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 021e 	bic.w	r2, r2, #30
 8004cc6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cd6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	e00a      	b.n	8004cf6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 020e 	bic.w	r2, r2, #14
 8004cee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a3c      	ldr	r2, [pc, #240]	; (8004dec <HAL_DMA_Abort+0x214>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d072      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a3a      	ldr	r2, [pc, #232]	; (8004df0 <HAL_DMA_Abort+0x218>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d06d      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a39      	ldr	r2, [pc, #228]	; (8004df4 <HAL_DMA_Abort+0x21c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d068      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a37      	ldr	r2, [pc, #220]	; (8004df8 <HAL_DMA_Abort+0x220>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d063      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a36      	ldr	r2, [pc, #216]	; (8004dfc <HAL_DMA_Abort+0x224>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d05e      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a34      	ldr	r2, [pc, #208]	; (8004e00 <HAL_DMA_Abort+0x228>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d059      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a33      	ldr	r2, [pc, #204]	; (8004e04 <HAL_DMA_Abort+0x22c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d054      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a31      	ldr	r2, [pc, #196]	; (8004e08 <HAL_DMA_Abort+0x230>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d04f      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a30      	ldr	r2, [pc, #192]	; (8004e0c <HAL_DMA_Abort+0x234>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d04a      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a2e      	ldr	r2, [pc, #184]	; (8004e10 <HAL_DMA_Abort+0x238>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d045      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2d      	ldr	r2, [pc, #180]	; (8004e14 <HAL_DMA_Abort+0x23c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d040      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a2b      	ldr	r2, [pc, #172]	; (8004e18 <HAL_DMA_Abort+0x240>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d03b      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a2a      	ldr	r2, [pc, #168]	; (8004e1c <HAL_DMA_Abort+0x244>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d036      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a28      	ldr	r2, [pc, #160]	; (8004e20 <HAL_DMA_Abort+0x248>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d031      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a27      	ldr	r2, [pc, #156]	; (8004e24 <HAL_DMA_Abort+0x24c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d02c      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a25      	ldr	r2, [pc, #148]	; (8004e28 <HAL_DMA_Abort+0x250>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d027      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a24      	ldr	r2, [pc, #144]	; (8004e2c <HAL_DMA_Abort+0x254>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d022      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a22      	ldr	r2, [pc, #136]	; (8004e30 <HAL_DMA_Abort+0x258>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01d      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a21      	ldr	r2, [pc, #132]	; (8004e34 <HAL_DMA_Abort+0x25c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d018      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a1f      	ldr	r2, [pc, #124]	; (8004e38 <HAL_DMA_Abort+0x260>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d013      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1e      	ldr	r2, [pc, #120]	; (8004e3c <HAL_DMA_Abort+0x264>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00e      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a1c      	ldr	r2, [pc, #112]	; (8004e40 <HAL_DMA_Abort+0x268>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d009      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1b      	ldr	r2, [pc, #108]	; (8004e44 <HAL_DMA_Abort+0x26c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d004      	beq.n	8004de6 <HAL_DMA_Abort+0x20e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a19      	ldr	r2, [pc, #100]	; (8004e48 <HAL_DMA_Abort+0x270>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d132      	bne.n	8004e4c <HAL_DMA_Abort+0x274>
 8004de6:	2301      	movs	r3, #1
 8004de8:	e031      	b.n	8004e4e <HAL_DMA_Abort+0x276>
 8004dea:	bf00      	nop
 8004dec:	40020010 	.word	0x40020010
 8004df0:	40020028 	.word	0x40020028
 8004df4:	40020040 	.word	0x40020040
 8004df8:	40020058 	.word	0x40020058
 8004dfc:	40020070 	.word	0x40020070
 8004e00:	40020088 	.word	0x40020088
 8004e04:	400200a0 	.word	0x400200a0
 8004e08:	400200b8 	.word	0x400200b8
 8004e0c:	40020410 	.word	0x40020410
 8004e10:	40020428 	.word	0x40020428
 8004e14:	40020440 	.word	0x40020440
 8004e18:	40020458 	.word	0x40020458
 8004e1c:	40020470 	.word	0x40020470
 8004e20:	40020488 	.word	0x40020488
 8004e24:	400204a0 	.word	0x400204a0
 8004e28:	400204b8 	.word	0x400204b8
 8004e2c:	58025408 	.word	0x58025408
 8004e30:	5802541c 	.word	0x5802541c
 8004e34:	58025430 	.word	0x58025430
 8004e38:	58025444 	.word	0x58025444
 8004e3c:	58025458 	.word	0x58025458
 8004e40:	5802546c 	.word	0x5802546c
 8004e44:	58025480 	.word	0x58025480
 8004e48:	58025494 	.word	0x58025494
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e60:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a6d      	ldr	r2, [pc, #436]	; (800501c <HAL_DMA_Abort+0x444>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d04a      	beq.n	8004f02 <HAL_DMA_Abort+0x32a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a6b      	ldr	r2, [pc, #428]	; (8005020 <HAL_DMA_Abort+0x448>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d045      	beq.n	8004f02 <HAL_DMA_Abort+0x32a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a6a      	ldr	r2, [pc, #424]	; (8005024 <HAL_DMA_Abort+0x44c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d040      	beq.n	8004f02 <HAL_DMA_Abort+0x32a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a68      	ldr	r2, [pc, #416]	; (8005028 <HAL_DMA_Abort+0x450>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d03b      	beq.n	8004f02 <HAL_DMA_Abort+0x32a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a67      	ldr	r2, [pc, #412]	; (800502c <HAL_DMA_Abort+0x454>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d036      	beq.n	8004f02 <HAL_DMA_Abort+0x32a>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a65      	ldr	r2, [pc, #404]	; (8005030 <HAL_DMA_Abort+0x458>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d031      	beq.n	8004f02 <HAL_DMA_Abort+0x32a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a64      	ldr	r2, [pc, #400]	; (8005034 <HAL_DMA_Abort+0x45c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d02c      	beq.n	8004f02 <HAL_DMA_Abort+0x32a>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a62      	ldr	r2, [pc, #392]	; (8005038 <HAL_DMA_Abort+0x460>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d027      	beq.n	8004f02 <HAL_DMA_Abort+0x32a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a61      	ldr	r2, [pc, #388]	; (800503c <HAL_DMA_Abort+0x464>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d022      	beq.n	8004f02 <HAL_DMA_Abort+0x32a>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a5f      	ldr	r2, [pc, #380]	; (8005040 <HAL_DMA_Abort+0x468>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d01d      	beq.n	8004f02 <HAL_DMA_Abort+0x32a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a5e      	ldr	r2, [pc, #376]	; (8005044 <HAL_DMA_Abort+0x46c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d018      	beq.n	8004f02 <HAL_DMA_Abort+0x32a>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a5c      	ldr	r2, [pc, #368]	; (8005048 <HAL_DMA_Abort+0x470>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <HAL_DMA_Abort+0x32a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a5b      	ldr	r2, [pc, #364]	; (800504c <HAL_DMA_Abort+0x474>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00e      	beq.n	8004f02 <HAL_DMA_Abort+0x32a>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a59      	ldr	r2, [pc, #356]	; (8005050 <HAL_DMA_Abort+0x478>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d009      	beq.n	8004f02 <HAL_DMA_Abort+0x32a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a58      	ldr	r2, [pc, #352]	; (8005054 <HAL_DMA_Abort+0x47c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d004      	beq.n	8004f02 <HAL_DMA_Abort+0x32a>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a56      	ldr	r2, [pc, #344]	; (8005058 <HAL_DMA_Abort+0x480>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d108      	bne.n	8004f14 <HAL_DMA_Abort+0x33c>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0201 	bic.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e007      	b.n	8004f24 <HAL_DMA_Abort+0x34c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0201 	bic.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004f24:	e013      	b.n	8004f4e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f26:	f7fe feeb 	bl	8003d00 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b05      	cmp	r3, #5
 8004f32:	d90c      	bls.n	8004f4e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2220      	movs	r2, #32
 8004f38:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e12d      	b.n	80051aa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e5      	bne.n	8004f26 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a2f      	ldr	r2, [pc, #188]	; (800501c <HAL_DMA_Abort+0x444>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d04a      	beq.n	8004ffa <HAL_DMA_Abort+0x422>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a2d      	ldr	r2, [pc, #180]	; (8005020 <HAL_DMA_Abort+0x448>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d045      	beq.n	8004ffa <HAL_DMA_Abort+0x422>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a2c      	ldr	r2, [pc, #176]	; (8005024 <HAL_DMA_Abort+0x44c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d040      	beq.n	8004ffa <HAL_DMA_Abort+0x422>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <HAL_DMA_Abort+0x450>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d03b      	beq.n	8004ffa <HAL_DMA_Abort+0x422>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a29      	ldr	r2, [pc, #164]	; (800502c <HAL_DMA_Abort+0x454>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d036      	beq.n	8004ffa <HAL_DMA_Abort+0x422>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a27      	ldr	r2, [pc, #156]	; (8005030 <HAL_DMA_Abort+0x458>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d031      	beq.n	8004ffa <HAL_DMA_Abort+0x422>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a26      	ldr	r2, [pc, #152]	; (8005034 <HAL_DMA_Abort+0x45c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d02c      	beq.n	8004ffa <HAL_DMA_Abort+0x422>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a24      	ldr	r2, [pc, #144]	; (8005038 <HAL_DMA_Abort+0x460>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d027      	beq.n	8004ffa <HAL_DMA_Abort+0x422>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a23      	ldr	r2, [pc, #140]	; (800503c <HAL_DMA_Abort+0x464>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d022      	beq.n	8004ffa <HAL_DMA_Abort+0x422>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a21      	ldr	r2, [pc, #132]	; (8005040 <HAL_DMA_Abort+0x468>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d01d      	beq.n	8004ffa <HAL_DMA_Abort+0x422>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a20      	ldr	r2, [pc, #128]	; (8005044 <HAL_DMA_Abort+0x46c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d018      	beq.n	8004ffa <HAL_DMA_Abort+0x422>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1e      	ldr	r2, [pc, #120]	; (8005048 <HAL_DMA_Abort+0x470>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d013      	beq.n	8004ffa <HAL_DMA_Abort+0x422>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1d      	ldr	r2, [pc, #116]	; (800504c <HAL_DMA_Abort+0x474>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00e      	beq.n	8004ffa <HAL_DMA_Abort+0x422>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1b      	ldr	r2, [pc, #108]	; (8005050 <HAL_DMA_Abort+0x478>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d009      	beq.n	8004ffa <HAL_DMA_Abort+0x422>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1a      	ldr	r2, [pc, #104]	; (8005054 <HAL_DMA_Abort+0x47c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d004      	beq.n	8004ffa <HAL_DMA_Abort+0x422>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a18      	ldr	r2, [pc, #96]	; (8005058 <HAL_DMA_Abort+0x480>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d101      	bne.n	8004ffe <HAL_DMA_Abort+0x426>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <HAL_DMA_Abort+0x428>
 8004ffe:	2300      	movs	r3, #0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d02b      	beq.n	800505c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	223f      	movs	r2, #63	; 0x3f
 8005014:	409a      	lsls	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	609a      	str	r2, [r3, #8]
 800501a:	e02a      	b.n	8005072 <HAL_DMA_Abort+0x49a>
 800501c:	40020010 	.word	0x40020010
 8005020:	40020028 	.word	0x40020028
 8005024:	40020040 	.word	0x40020040
 8005028:	40020058 	.word	0x40020058
 800502c:	40020070 	.word	0x40020070
 8005030:	40020088 	.word	0x40020088
 8005034:	400200a0 	.word	0x400200a0
 8005038:	400200b8 	.word	0x400200b8
 800503c:	40020410 	.word	0x40020410
 8005040:	40020428 	.word	0x40020428
 8005044:	40020440 	.word	0x40020440
 8005048:	40020458 	.word	0x40020458
 800504c:	40020470 	.word	0x40020470
 8005050:	40020488 	.word	0x40020488
 8005054:	400204a0 	.word	0x400204a0
 8005058:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005060:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	2201      	movs	r2, #1
 800506c:	409a      	lsls	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a4f      	ldr	r2, [pc, #316]	; (80051b4 <HAL_DMA_Abort+0x5dc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d072      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a4d      	ldr	r2, [pc, #308]	; (80051b8 <HAL_DMA_Abort+0x5e0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d06d      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a4c      	ldr	r2, [pc, #304]	; (80051bc <HAL_DMA_Abort+0x5e4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d068      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a4a      	ldr	r2, [pc, #296]	; (80051c0 <HAL_DMA_Abort+0x5e8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d063      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a49      	ldr	r2, [pc, #292]	; (80051c4 <HAL_DMA_Abort+0x5ec>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d05e      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a47      	ldr	r2, [pc, #284]	; (80051c8 <HAL_DMA_Abort+0x5f0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d059      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a46      	ldr	r2, [pc, #280]	; (80051cc <HAL_DMA_Abort+0x5f4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d054      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a44      	ldr	r2, [pc, #272]	; (80051d0 <HAL_DMA_Abort+0x5f8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d04f      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a43      	ldr	r2, [pc, #268]	; (80051d4 <HAL_DMA_Abort+0x5fc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d04a      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a41      	ldr	r2, [pc, #260]	; (80051d8 <HAL_DMA_Abort+0x600>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d045      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a40      	ldr	r2, [pc, #256]	; (80051dc <HAL_DMA_Abort+0x604>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d040      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a3e      	ldr	r2, [pc, #248]	; (80051e0 <HAL_DMA_Abort+0x608>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d03b      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a3d      	ldr	r2, [pc, #244]	; (80051e4 <HAL_DMA_Abort+0x60c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d036      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a3b      	ldr	r2, [pc, #236]	; (80051e8 <HAL_DMA_Abort+0x610>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d031      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a3a      	ldr	r2, [pc, #232]	; (80051ec <HAL_DMA_Abort+0x614>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d02c      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a38      	ldr	r2, [pc, #224]	; (80051f0 <HAL_DMA_Abort+0x618>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d027      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a37      	ldr	r2, [pc, #220]	; (80051f4 <HAL_DMA_Abort+0x61c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d022      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a35      	ldr	r2, [pc, #212]	; (80051f8 <HAL_DMA_Abort+0x620>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d01d      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a34      	ldr	r2, [pc, #208]	; (80051fc <HAL_DMA_Abort+0x624>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d018      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a32      	ldr	r2, [pc, #200]	; (8005200 <HAL_DMA_Abort+0x628>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d013      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a31      	ldr	r2, [pc, #196]	; (8005204 <HAL_DMA_Abort+0x62c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00e      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a2f      	ldr	r2, [pc, #188]	; (8005208 <HAL_DMA_Abort+0x630>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d009      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a2e      	ldr	r2, [pc, #184]	; (800520c <HAL_DMA_Abort+0x634>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d004      	beq.n	8005162 <HAL_DMA_Abort+0x58a>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a2c      	ldr	r2, [pc, #176]	; (8005210 <HAL_DMA_Abort+0x638>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d101      	bne.n	8005166 <HAL_DMA_Abort+0x58e>
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <HAL_DMA_Abort+0x590>
 8005166:	2300      	movs	r3, #0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d015      	beq.n	8005198 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005174:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00c      	beq.n	8005198 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005188:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800518c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005196:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40020010 	.word	0x40020010
 80051b8:	40020028 	.word	0x40020028
 80051bc:	40020040 	.word	0x40020040
 80051c0:	40020058 	.word	0x40020058
 80051c4:	40020070 	.word	0x40020070
 80051c8:	40020088 	.word	0x40020088
 80051cc:	400200a0 	.word	0x400200a0
 80051d0:	400200b8 	.word	0x400200b8
 80051d4:	40020410 	.word	0x40020410
 80051d8:	40020428 	.word	0x40020428
 80051dc:	40020440 	.word	0x40020440
 80051e0:	40020458 	.word	0x40020458
 80051e4:	40020470 	.word	0x40020470
 80051e8:	40020488 	.word	0x40020488
 80051ec:	400204a0 	.word	0x400204a0
 80051f0:	400204b8 	.word	0x400204b8
 80051f4:	58025408 	.word	0x58025408
 80051f8:	5802541c 	.word	0x5802541c
 80051fc:	58025430 	.word	0x58025430
 8005200:	58025444 	.word	0x58025444
 8005204:	58025458 	.word	0x58025458
 8005208:	5802546c 	.word	0x5802546c
 800520c:	58025480 	.word	0x58025480
 8005210:	58025494 	.word	0x58025494

08005214 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e237      	b.n	8005696 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d004      	beq.n	800523c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2280      	movs	r2, #128	; 0x80
 8005236:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e22c      	b.n	8005696 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a5c      	ldr	r2, [pc, #368]	; (80053b4 <HAL_DMA_Abort_IT+0x1a0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d04a      	beq.n	80052dc <HAL_DMA_Abort_IT+0xc8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a5b      	ldr	r2, [pc, #364]	; (80053b8 <HAL_DMA_Abort_IT+0x1a4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d045      	beq.n	80052dc <HAL_DMA_Abort_IT+0xc8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a59      	ldr	r2, [pc, #356]	; (80053bc <HAL_DMA_Abort_IT+0x1a8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d040      	beq.n	80052dc <HAL_DMA_Abort_IT+0xc8>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a58      	ldr	r2, [pc, #352]	; (80053c0 <HAL_DMA_Abort_IT+0x1ac>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d03b      	beq.n	80052dc <HAL_DMA_Abort_IT+0xc8>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a56      	ldr	r2, [pc, #344]	; (80053c4 <HAL_DMA_Abort_IT+0x1b0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d036      	beq.n	80052dc <HAL_DMA_Abort_IT+0xc8>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a55      	ldr	r2, [pc, #340]	; (80053c8 <HAL_DMA_Abort_IT+0x1b4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d031      	beq.n	80052dc <HAL_DMA_Abort_IT+0xc8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a53      	ldr	r2, [pc, #332]	; (80053cc <HAL_DMA_Abort_IT+0x1b8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d02c      	beq.n	80052dc <HAL_DMA_Abort_IT+0xc8>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a52      	ldr	r2, [pc, #328]	; (80053d0 <HAL_DMA_Abort_IT+0x1bc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d027      	beq.n	80052dc <HAL_DMA_Abort_IT+0xc8>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a50      	ldr	r2, [pc, #320]	; (80053d4 <HAL_DMA_Abort_IT+0x1c0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d022      	beq.n	80052dc <HAL_DMA_Abort_IT+0xc8>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a4f      	ldr	r2, [pc, #316]	; (80053d8 <HAL_DMA_Abort_IT+0x1c4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d01d      	beq.n	80052dc <HAL_DMA_Abort_IT+0xc8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a4d      	ldr	r2, [pc, #308]	; (80053dc <HAL_DMA_Abort_IT+0x1c8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d018      	beq.n	80052dc <HAL_DMA_Abort_IT+0xc8>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a4c      	ldr	r2, [pc, #304]	; (80053e0 <HAL_DMA_Abort_IT+0x1cc>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d013      	beq.n	80052dc <HAL_DMA_Abort_IT+0xc8>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a4a      	ldr	r2, [pc, #296]	; (80053e4 <HAL_DMA_Abort_IT+0x1d0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00e      	beq.n	80052dc <HAL_DMA_Abort_IT+0xc8>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a49      	ldr	r2, [pc, #292]	; (80053e8 <HAL_DMA_Abort_IT+0x1d4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d009      	beq.n	80052dc <HAL_DMA_Abort_IT+0xc8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a47      	ldr	r2, [pc, #284]	; (80053ec <HAL_DMA_Abort_IT+0x1d8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d004      	beq.n	80052dc <HAL_DMA_Abort_IT+0xc8>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a46      	ldr	r2, [pc, #280]	; (80053f0 <HAL_DMA_Abort_IT+0x1dc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d101      	bne.n	80052e0 <HAL_DMA_Abort_IT+0xcc>
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <HAL_DMA_Abort_IT+0xce>
 80052e0:	2300      	movs	r3, #0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 8086 	beq.w	80053f4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2204      	movs	r2, #4
 80052ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a2f      	ldr	r2, [pc, #188]	; (80053b4 <HAL_DMA_Abort_IT+0x1a0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d04a      	beq.n	8005390 <HAL_DMA_Abort_IT+0x17c>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a2e      	ldr	r2, [pc, #184]	; (80053b8 <HAL_DMA_Abort_IT+0x1a4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d045      	beq.n	8005390 <HAL_DMA_Abort_IT+0x17c>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a2c      	ldr	r2, [pc, #176]	; (80053bc <HAL_DMA_Abort_IT+0x1a8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d040      	beq.n	8005390 <HAL_DMA_Abort_IT+0x17c>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a2b      	ldr	r2, [pc, #172]	; (80053c0 <HAL_DMA_Abort_IT+0x1ac>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d03b      	beq.n	8005390 <HAL_DMA_Abort_IT+0x17c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a29      	ldr	r2, [pc, #164]	; (80053c4 <HAL_DMA_Abort_IT+0x1b0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d036      	beq.n	8005390 <HAL_DMA_Abort_IT+0x17c>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a28      	ldr	r2, [pc, #160]	; (80053c8 <HAL_DMA_Abort_IT+0x1b4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d031      	beq.n	8005390 <HAL_DMA_Abort_IT+0x17c>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a26      	ldr	r2, [pc, #152]	; (80053cc <HAL_DMA_Abort_IT+0x1b8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d02c      	beq.n	8005390 <HAL_DMA_Abort_IT+0x17c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a25      	ldr	r2, [pc, #148]	; (80053d0 <HAL_DMA_Abort_IT+0x1bc>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d027      	beq.n	8005390 <HAL_DMA_Abort_IT+0x17c>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a23      	ldr	r2, [pc, #140]	; (80053d4 <HAL_DMA_Abort_IT+0x1c0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d022      	beq.n	8005390 <HAL_DMA_Abort_IT+0x17c>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a22      	ldr	r2, [pc, #136]	; (80053d8 <HAL_DMA_Abort_IT+0x1c4>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d01d      	beq.n	8005390 <HAL_DMA_Abort_IT+0x17c>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a20      	ldr	r2, [pc, #128]	; (80053dc <HAL_DMA_Abort_IT+0x1c8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d018      	beq.n	8005390 <HAL_DMA_Abort_IT+0x17c>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <HAL_DMA_Abort_IT+0x1cc>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d013      	beq.n	8005390 <HAL_DMA_Abort_IT+0x17c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a1d      	ldr	r2, [pc, #116]	; (80053e4 <HAL_DMA_Abort_IT+0x1d0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00e      	beq.n	8005390 <HAL_DMA_Abort_IT+0x17c>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a1c      	ldr	r2, [pc, #112]	; (80053e8 <HAL_DMA_Abort_IT+0x1d4>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d009      	beq.n	8005390 <HAL_DMA_Abort_IT+0x17c>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1a      	ldr	r2, [pc, #104]	; (80053ec <HAL_DMA_Abort_IT+0x1d8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d004      	beq.n	8005390 <HAL_DMA_Abort_IT+0x17c>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <HAL_DMA_Abort_IT+0x1dc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d108      	bne.n	80053a2 <HAL_DMA_Abort_IT+0x18e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0201 	bic.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	e178      	b.n	8005694 <HAL_DMA_Abort_IT+0x480>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0201 	bic.w	r2, r2, #1
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	e16f      	b.n	8005694 <HAL_DMA_Abort_IT+0x480>
 80053b4:	40020010 	.word	0x40020010
 80053b8:	40020028 	.word	0x40020028
 80053bc:	40020040 	.word	0x40020040
 80053c0:	40020058 	.word	0x40020058
 80053c4:	40020070 	.word	0x40020070
 80053c8:	40020088 	.word	0x40020088
 80053cc:	400200a0 	.word	0x400200a0
 80053d0:	400200b8 	.word	0x400200b8
 80053d4:	40020410 	.word	0x40020410
 80053d8:	40020428 	.word	0x40020428
 80053dc:	40020440 	.word	0x40020440
 80053e0:	40020458 	.word	0x40020458
 80053e4:	40020470 	.word	0x40020470
 80053e8:	40020488 	.word	0x40020488
 80053ec:	400204a0 	.word	0x400204a0
 80053f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 020e 	bic.w	r2, r2, #14
 8005402:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a6c      	ldr	r2, [pc, #432]	; (80055bc <HAL_DMA_Abort_IT+0x3a8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d04a      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x290>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a6b      	ldr	r2, [pc, #428]	; (80055c0 <HAL_DMA_Abort_IT+0x3ac>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d045      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x290>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a69      	ldr	r2, [pc, #420]	; (80055c4 <HAL_DMA_Abort_IT+0x3b0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d040      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x290>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a68      	ldr	r2, [pc, #416]	; (80055c8 <HAL_DMA_Abort_IT+0x3b4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d03b      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x290>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a66      	ldr	r2, [pc, #408]	; (80055cc <HAL_DMA_Abort_IT+0x3b8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d036      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x290>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a65      	ldr	r2, [pc, #404]	; (80055d0 <HAL_DMA_Abort_IT+0x3bc>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d031      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x290>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a63      	ldr	r2, [pc, #396]	; (80055d4 <HAL_DMA_Abort_IT+0x3c0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d02c      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x290>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a62      	ldr	r2, [pc, #392]	; (80055d8 <HAL_DMA_Abort_IT+0x3c4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d027      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x290>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a60      	ldr	r2, [pc, #384]	; (80055dc <HAL_DMA_Abort_IT+0x3c8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d022      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x290>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a5f      	ldr	r2, [pc, #380]	; (80055e0 <HAL_DMA_Abort_IT+0x3cc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d01d      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x290>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a5d      	ldr	r2, [pc, #372]	; (80055e4 <HAL_DMA_Abort_IT+0x3d0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d018      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x290>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a5c      	ldr	r2, [pc, #368]	; (80055e8 <HAL_DMA_Abort_IT+0x3d4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d013      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x290>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a5a      	ldr	r2, [pc, #360]	; (80055ec <HAL_DMA_Abort_IT+0x3d8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00e      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x290>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a59      	ldr	r2, [pc, #356]	; (80055f0 <HAL_DMA_Abort_IT+0x3dc>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d009      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x290>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a57      	ldr	r2, [pc, #348]	; (80055f4 <HAL_DMA_Abort_IT+0x3e0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d004      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x290>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a56      	ldr	r2, [pc, #344]	; (80055f8 <HAL_DMA_Abort_IT+0x3e4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d108      	bne.n	80054b6 <HAL_DMA_Abort_IT+0x2a2>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0201 	bic.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	e007      	b.n	80054c6 <HAL_DMA_Abort_IT+0x2b2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0201 	bic.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a3c      	ldr	r2, [pc, #240]	; (80055bc <HAL_DMA_Abort_IT+0x3a8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d072      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a3a      	ldr	r2, [pc, #232]	; (80055c0 <HAL_DMA_Abort_IT+0x3ac>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d06d      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a39      	ldr	r2, [pc, #228]	; (80055c4 <HAL_DMA_Abort_IT+0x3b0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d068      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a37      	ldr	r2, [pc, #220]	; (80055c8 <HAL_DMA_Abort_IT+0x3b4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d063      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a36      	ldr	r2, [pc, #216]	; (80055cc <HAL_DMA_Abort_IT+0x3b8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d05e      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a34      	ldr	r2, [pc, #208]	; (80055d0 <HAL_DMA_Abort_IT+0x3bc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d059      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a33      	ldr	r2, [pc, #204]	; (80055d4 <HAL_DMA_Abort_IT+0x3c0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d054      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a31      	ldr	r2, [pc, #196]	; (80055d8 <HAL_DMA_Abort_IT+0x3c4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d04f      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a30      	ldr	r2, [pc, #192]	; (80055dc <HAL_DMA_Abort_IT+0x3c8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d04a      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a2e      	ldr	r2, [pc, #184]	; (80055e0 <HAL_DMA_Abort_IT+0x3cc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d045      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a2d      	ldr	r2, [pc, #180]	; (80055e4 <HAL_DMA_Abort_IT+0x3d0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d040      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a2b      	ldr	r2, [pc, #172]	; (80055e8 <HAL_DMA_Abort_IT+0x3d4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d03b      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a2a      	ldr	r2, [pc, #168]	; (80055ec <HAL_DMA_Abort_IT+0x3d8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d036      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a28      	ldr	r2, [pc, #160]	; (80055f0 <HAL_DMA_Abort_IT+0x3dc>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d031      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a27      	ldr	r2, [pc, #156]	; (80055f4 <HAL_DMA_Abort_IT+0x3e0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d02c      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a25      	ldr	r2, [pc, #148]	; (80055f8 <HAL_DMA_Abort_IT+0x3e4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d027      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a24      	ldr	r2, [pc, #144]	; (80055fc <HAL_DMA_Abort_IT+0x3e8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d022      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a22      	ldr	r2, [pc, #136]	; (8005600 <HAL_DMA_Abort_IT+0x3ec>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d01d      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a21      	ldr	r2, [pc, #132]	; (8005604 <HAL_DMA_Abort_IT+0x3f0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d018      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a1f      	ldr	r2, [pc, #124]	; (8005608 <HAL_DMA_Abort_IT+0x3f4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d013      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1e      	ldr	r2, [pc, #120]	; (800560c <HAL_DMA_Abort_IT+0x3f8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00e      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1c      	ldr	r2, [pc, #112]	; (8005610 <HAL_DMA_Abort_IT+0x3fc>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d009      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1b      	ldr	r2, [pc, #108]	; (8005614 <HAL_DMA_Abort_IT+0x400>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d004      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x3a2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a19      	ldr	r2, [pc, #100]	; (8005618 <HAL_DMA_Abort_IT+0x404>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d132      	bne.n	800561c <HAL_DMA_Abort_IT+0x408>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e031      	b.n	800561e <HAL_DMA_Abort_IT+0x40a>
 80055ba:	bf00      	nop
 80055bc:	40020010 	.word	0x40020010
 80055c0:	40020028 	.word	0x40020028
 80055c4:	40020040 	.word	0x40020040
 80055c8:	40020058 	.word	0x40020058
 80055cc:	40020070 	.word	0x40020070
 80055d0:	40020088 	.word	0x40020088
 80055d4:	400200a0 	.word	0x400200a0
 80055d8:	400200b8 	.word	0x400200b8
 80055dc:	40020410 	.word	0x40020410
 80055e0:	40020428 	.word	0x40020428
 80055e4:	40020440 	.word	0x40020440
 80055e8:	40020458 	.word	0x40020458
 80055ec:	40020470 	.word	0x40020470
 80055f0:	40020488 	.word	0x40020488
 80055f4:	400204a0 	.word	0x400204a0
 80055f8:	400204b8 	.word	0x400204b8
 80055fc:	58025408 	.word	0x58025408
 8005600:	5802541c 	.word	0x5802541c
 8005604:	58025430 	.word	0x58025430
 8005608:	58025444 	.word	0x58025444
 800560c:	58025458 	.word	0x58025458
 8005610:	5802546c 	.word	0x5802546c
 8005614:	58025480 	.word	0x58025480
 8005618:	58025494 	.word	0x58025494
 800561c:	2300      	movs	r3, #0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d028      	beq.n	8005674 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800562c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005630:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005636:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563c:	f003 031f 	and.w	r3, r3, #31
 8005640:	2201      	movs	r2, #1
 8005642:	409a      	lsls	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005650:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00c      	beq.n	8005674 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005668:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005672:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop

080056a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08a      	sub	sp, #40	; 0x28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056ac:	4b67      	ldr	r3, [pc, #412]	; (800584c <HAL_DMA_IRQHandler+0x1ac>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a67      	ldr	r2, [pc, #412]	; (8005850 <HAL_DMA_IRQHandler+0x1b0>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	0a9b      	lsrs	r3, r3, #10
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a5f      	ldr	r2, [pc, #380]	; (8005854 <HAL_DMA_IRQHandler+0x1b4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d04a      	beq.n	8005772 <HAL_DMA_IRQHandler+0xd2>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a5d      	ldr	r2, [pc, #372]	; (8005858 <HAL_DMA_IRQHandler+0x1b8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d045      	beq.n	8005772 <HAL_DMA_IRQHandler+0xd2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a5c      	ldr	r2, [pc, #368]	; (800585c <HAL_DMA_IRQHandler+0x1bc>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d040      	beq.n	8005772 <HAL_DMA_IRQHandler+0xd2>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a5a      	ldr	r2, [pc, #360]	; (8005860 <HAL_DMA_IRQHandler+0x1c0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d03b      	beq.n	8005772 <HAL_DMA_IRQHandler+0xd2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a59      	ldr	r2, [pc, #356]	; (8005864 <HAL_DMA_IRQHandler+0x1c4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d036      	beq.n	8005772 <HAL_DMA_IRQHandler+0xd2>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a57      	ldr	r2, [pc, #348]	; (8005868 <HAL_DMA_IRQHandler+0x1c8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d031      	beq.n	8005772 <HAL_DMA_IRQHandler+0xd2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a56      	ldr	r2, [pc, #344]	; (800586c <HAL_DMA_IRQHandler+0x1cc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d02c      	beq.n	8005772 <HAL_DMA_IRQHandler+0xd2>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a54      	ldr	r2, [pc, #336]	; (8005870 <HAL_DMA_IRQHandler+0x1d0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d027      	beq.n	8005772 <HAL_DMA_IRQHandler+0xd2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a53      	ldr	r2, [pc, #332]	; (8005874 <HAL_DMA_IRQHandler+0x1d4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d022      	beq.n	8005772 <HAL_DMA_IRQHandler+0xd2>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a51      	ldr	r2, [pc, #324]	; (8005878 <HAL_DMA_IRQHandler+0x1d8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d01d      	beq.n	8005772 <HAL_DMA_IRQHandler+0xd2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a50      	ldr	r2, [pc, #320]	; (800587c <HAL_DMA_IRQHandler+0x1dc>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d018      	beq.n	8005772 <HAL_DMA_IRQHandler+0xd2>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a4e      	ldr	r2, [pc, #312]	; (8005880 <HAL_DMA_IRQHandler+0x1e0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <HAL_DMA_IRQHandler+0xd2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a4d      	ldr	r2, [pc, #308]	; (8005884 <HAL_DMA_IRQHandler+0x1e4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00e      	beq.n	8005772 <HAL_DMA_IRQHandler+0xd2>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a4b      	ldr	r2, [pc, #300]	; (8005888 <HAL_DMA_IRQHandler+0x1e8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d009      	beq.n	8005772 <HAL_DMA_IRQHandler+0xd2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a4a      	ldr	r2, [pc, #296]	; (800588c <HAL_DMA_IRQHandler+0x1ec>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d004      	beq.n	8005772 <HAL_DMA_IRQHandler+0xd2>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a48      	ldr	r2, [pc, #288]	; (8005890 <HAL_DMA_IRQHandler+0x1f0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d101      	bne.n	8005776 <HAL_DMA_IRQHandler+0xd6>
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <HAL_DMA_IRQHandler+0xd8>
 8005776:	2300      	movs	r3, #0
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 842b 	beq.w	8005fd4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005782:	f003 031f 	and.w	r3, r3, #31
 8005786:	2208      	movs	r2, #8
 8005788:	409a      	lsls	r2, r3
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	4013      	ands	r3, r2
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 80a2 	beq.w	80058d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a2e      	ldr	r2, [pc, #184]	; (8005854 <HAL_DMA_IRQHandler+0x1b4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d04a      	beq.n	8005834 <HAL_DMA_IRQHandler+0x194>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a2d      	ldr	r2, [pc, #180]	; (8005858 <HAL_DMA_IRQHandler+0x1b8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d045      	beq.n	8005834 <HAL_DMA_IRQHandler+0x194>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a2b      	ldr	r2, [pc, #172]	; (800585c <HAL_DMA_IRQHandler+0x1bc>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d040      	beq.n	8005834 <HAL_DMA_IRQHandler+0x194>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a2a      	ldr	r2, [pc, #168]	; (8005860 <HAL_DMA_IRQHandler+0x1c0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d03b      	beq.n	8005834 <HAL_DMA_IRQHandler+0x194>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a28      	ldr	r2, [pc, #160]	; (8005864 <HAL_DMA_IRQHandler+0x1c4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d036      	beq.n	8005834 <HAL_DMA_IRQHandler+0x194>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a27      	ldr	r2, [pc, #156]	; (8005868 <HAL_DMA_IRQHandler+0x1c8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d031      	beq.n	8005834 <HAL_DMA_IRQHandler+0x194>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a25      	ldr	r2, [pc, #148]	; (800586c <HAL_DMA_IRQHandler+0x1cc>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d02c      	beq.n	8005834 <HAL_DMA_IRQHandler+0x194>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a24      	ldr	r2, [pc, #144]	; (8005870 <HAL_DMA_IRQHandler+0x1d0>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d027      	beq.n	8005834 <HAL_DMA_IRQHandler+0x194>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a22      	ldr	r2, [pc, #136]	; (8005874 <HAL_DMA_IRQHandler+0x1d4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d022      	beq.n	8005834 <HAL_DMA_IRQHandler+0x194>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a21      	ldr	r2, [pc, #132]	; (8005878 <HAL_DMA_IRQHandler+0x1d8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d01d      	beq.n	8005834 <HAL_DMA_IRQHandler+0x194>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1f      	ldr	r2, [pc, #124]	; (800587c <HAL_DMA_IRQHandler+0x1dc>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d018      	beq.n	8005834 <HAL_DMA_IRQHandler+0x194>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1e      	ldr	r2, [pc, #120]	; (8005880 <HAL_DMA_IRQHandler+0x1e0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d013      	beq.n	8005834 <HAL_DMA_IRQHandler+0x194>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a1c      	ldr	r2, [pc, #112]	; (8005884 <HAL_DMA_IRQHandler+0x1e4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00e      	beq.n	8005834 <HAL_DMA_IRQHandler+0x194>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1b      	ldr	r2, [pc, #108]	; (8005888 <HAL_DMA_IRQHandler+0x1e8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d009      	beq.n	8005834 <HAL_DMA_IRQHandler+0x194>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a19      	ldr	r2, [pc, #100]	; (800588c <HAL_DMA_IRQHandler+0x1ec>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d004      	beq.n	8005834 <HAL_DMA_IRQHandler+0x194>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a18      	ldr	r2, [pc, #96]	; (8005890 <HAL_DMA_IRQHandler+0x1f0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d12f      	bne.n	8005894 <HAL_DMA_IRQHandler+0x1f4>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0304 	and.w	r3, r3, #4
 800583e:	2b00      	cmp	r3, #0
 8005840:	bf14      	ite	ne
 8005842:	2301      	movne	r3, #1
 8005844:	2300      	moveq	r3, #0
 8005846:	b2db      	uxtb	r3, r3
 8005848:	e02e      	b.n	80058a8 <HAL_DMA_IRQHandler+0x208>
 800584a:	bf00      	nop
 800584c:	2400000c 	.word	0x2400000c
 8005850:	1b4e81b5 	.word	0x1b4e81b5
 8005854:	40020010 	.word	0x40020010
 8005858:	40020028 	.word	0x40020028
 800585c:	40020040 	.word	0x40020040
 8005860:	40020058 	.word	0x40020058
 8005864:	40020070 	.word	0x40020070
 8005868:	40020088 	.word	0x40020088
 800586c:	400200a0 	.word	0x400200a0
 8005870:	400200b8 	.word	0x400200b8
 8005874:	40020410 	.word	0x40020410
 8005878:	40020428 	.word	0x40020428
 800587c:	40020440 	.word	0x40020440
 8005880:	40020458 	.word	0x40020458
 8005884:	40020470 	.word	0x40020470
 8005888:	40020488 	.word	0x40020488
 800588c:	400204a0 	.word	0x400204a0
 8005890:	400204b8 	.word	0x400204b8
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bf14      	ite	ne
 80058a2:	2301      	movne	r3, #1
 80058a4:	2300      	moveq	r3, #0
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d015      	beq.n	80058d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0204 	bic.w	r2, r2, #4
 80058ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c0:	f003 031f 	and.w	r3, r3, #31
 80058c4:	2208      	movs	r2, #8
 80058c6:	409a      	lsls	r2, r3
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d0:	f043 0201 	orr.w	r2, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058dc:	f003 031f 	and.w	r3, r3, #31
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	fa22 f303 	lsr.w	r3, r2, r3
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d06e      	beq.n	80059cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a69      	ldr	r2, [pc, #420]	; (8005a98 <HAL_DMA_IRQHandler+0x3f8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d04a      	beq.n	800598e <HAL_DMA_IRQHandler+0x2ee>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a67      	ldr	r2, [pc, #412]	; (8005a9c <HAL_DMA_IRQHandler+0x3fc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d045      	beq.n	800598e <HAL_DMA_IRQHandler+0x2ee>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a66      	ldr	r2, [pc, #408]	; (8005aa0 <HAL_DMA_IRQHandler+0x400>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d040      	beq.n	800598e <HAL_DMA_IRQHandler+0x2ee>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a64      	ldr	r2, [pc, #400]	; (8005aa4 <HAL_DMA_IRQHandler+0x404>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d03b      	beq.n	800598e <HAL_DMA_IRQHandler+0x2ee>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a63      	ldr	r2, [pc, #396]	; (8005aa8 <HAL_DMA_IRQHandler+0x408>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d036      	beq.n	800598e <HAL_DMA_IRQHandler+0x2ee>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a61      	ldr	r2, [pc, #388]	; (8005aac <HAL_DMA_IRQHandler+0x40c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d031      	beq.n	800598e <HAL_DMA_IRQHandler+0x2ee>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a60      	ldr	r2, [pc, #384]	; (8005ab0 <HAL_DMA_IRQHandler+0x410>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d02c      	beq.n	800598e <HAL_DMA_IRQHandler+0x2ee>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a5e      	ldr	r2, [pc, #376]	; (8005ab4 <HAL_DMA_IRQHandler+0x414>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d027      	beq.n	800598e <HAL_DMA_IRQHandler+0x2ee>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a5d      	ldr	r2, [pc, #372]	; (8005ab8 <HAL_DMA_IRQHandler+0x418>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d022      	beq.n	800598e <HAL_DMA_IRQHandler+0x2ee>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a5b      	ldr	r2, [pc, #364]	; (8005abc <HAL_DMA_IRQHandler+0x41c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d01d      	beq.n	800598e <HAL_DMA_IRQHandler+0x2ee>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a5a      	ldr	r2, [pc, #360]	; (8005ac0 <HAL_DMA_IRQHandler+0x420>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d018      	beq.n	800598e <HAL_DMA_IRQHandler+0x2ee>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a58      	ldr	r2, [pc, #352]	; (8005ac4 <HAL_DMA_IRQHandler+0x424>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d013      	beq.n	800598e <HAL_DMA_IRQHandler+0x2ee>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a57      	ldr	r2, [pc, #348]	; (8005ac8 <HAL_DMA_IRQHandler+0x428>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00e      	beq.n	800598e <HAL_DMA_IRQHandler+0x2ee>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a55      	ldr	r2, [pc, #340]	; (8005acc <HAL_DMA_IRQHandler+0x42c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d009      	beq.n	800598e <HAL_DMA_IRQHandler+0x2ee>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a54      	ldr	r2, [pc, #336]	; (8005ad0 <HAL_DMA_IRQHandler+0x430>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d004      	beq.n	800598e <HAL_DMA_IRQHandler+0x2ee>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a52      	ldr	r2, [pc, #328]	; (8005ad4 <HAL_DMA_IRQHandler+0x434>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d10a      	bne.n	80059a4 <HAL_DMA_IRQHandler+0x304>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005998:	2b00      	cmp	r3, #0
 800599a:	bf14      	ite	ne
 800599c:	2301      	movne	r3, #1
 800599e:	2300      	moveq	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	e003      	b.n	80059ac <HAL_DMA_IRQHandler+0x30c>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2300      	movs	r3, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00d      	beq.n	80059cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	2201      	movs	r2, #1
 80059ba:	409a      	lsls	r2, r3
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c4:	f043 0202 	orr.w	r2, r3, #2
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d0:	f003 031f 	and.w	r3, r3, #31
 80059d4:	2204      	movs	r2, #4
 80059d6:	409a      	lsls	r2, r3
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 808f 	beq.w	8005b00 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a2c      	ldr	r2, [pc, #176]	; (8005a98 <HAL_DMA_IRQHandler+0x3f8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d04a      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x3e2>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a2a      	ldr	r2, [pc, #168]	; (8005a9c <HAL_DMA_IRQHandler+0x3fc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d045      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x3e2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a29      	ldr	r2, [pc, #164]	; (8005aa0 <HAL_DMA_IRQHandler+0x400>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d040      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x3e2>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a27      	ldr	r2, [pc, #156]	; (8005aa4 <HAL_DMA_IRQHandler+0x404>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d03b      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x3e2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a26      	ldr	r2, [pc, #152]	; (8005aa8 <HAL_DMA_IRQHandler+0x408>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d036      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x3e2>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a24      	ldr	r2, [pc, #144]	; (8005aac <HAL_DMA_IRQHandler+0x40c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d031      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x3e2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a23      	ldr	r2, [pc, #140]	; (8005ab0 <HAL_DMA_IRQHandler+0x410>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d02c      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x3e2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a21      	ldr	r2, [pc, #132]	; (8005ab4 <HAL_DMA_IRQHandler+0x414>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d027      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x3e2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a20      	ldr	r2, [pc, #128]	; (8005ab8 <HAL_DMA_IRQHandler+0x418>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d022      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x3e2>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a1e      	ldr	r2, [pc, #120]	; (8005abc <HAL_DMA_IRQHandler+0x41c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01d      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x3e2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1d      	ldr	r2, [pc, #116]	; (8005ac0 <HAL_DMA_IRQHandler+0x420>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d018      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x3e2>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1b      	ldr	r2, [pc, #108]	; (8005ac4 <HAL_DMA_IRQHandler+0x424>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d013      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x3e2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1a      	ldr	r2, [pc, #104]	; (8005ac8 <HAL_DMA_IRQHandler+0x428>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00e      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x3e2>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a18      	ldr	r2, [pc, #96]	; (8005acc <HAL_DMA_IRQHandler+0x42c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d009      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x3e2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a17      	ldr	r2, [pc, #92]	; (8005ad0 <HAL_DMA_IRQHandler+0x430>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d004      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x3e2>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a15      	ldr	r2, [pc, #84]	; (8005ad4 <HAL_DMA_IRQHandler+0x434>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d12a      	bne.n	8005ad8 <HAL_DMA_IRQHandler+0x438>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bf14      	ite	ne
 8005a90:	2301      	movne	r3, #1
 8005a92:	2300      	moveq	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	e023      	b.n	8005ae0 <HAL_DMA_IRQHandler+0x440>
 8005a98:	40020010 	.word	0x40020010
 8005a9c:	40020028 	.word	0x40020028
 8005aa0:	40020040 	.word	0x40020040
 8005aa4:	40020058 	.word	0x40020058
 8005aa8:	40020070 	.word	0x40020070
 8005aac:	40020088 	.word	0x40020088
 8005ab0:	400200a0 	.word	0x400200a0
 8005ab4:	400200b8 	.word	0x400200b8
 8005ab8:	40020410 	.word	0x40020410
 8005abc:	40020428 	.word	0x40020428
 8005ac0:	40020440 	.word	0x40020440
 8005ac4:	40020458 	.word	0x40020458
 8005ac8:	40020470 	.word	0x40020470
 8005acc:	40020488 	.word	0x40020488
 8005ad0:	400204a0 	.word	0x400204a0
 8005ad4:	400204b8 	.word	0x400204b8
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00d      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae8:	f003 031f 	and.w	r3, r3, #31
 8005aec:	2204      	movs	r2, #4
 8005aee:	409a      	lsls	r2, r3
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af8:	f043 0204 	orr.w	r2, r3, #4
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	2210      	movs	r2, #16
 8005b0a:	409a      	lsls	r2, r3
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80a6 	beq.w	8005c62 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a85      	ldr	r2, [pc, #532]	; (8005d30 <HAL_DMA_IRQHandler+0x690>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d04a      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x516>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a83      	ldr	r2, [pc, #524]	; (8005d34 <HAL_DMA_IRQHandler+0x694>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d045      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x516>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a82      	ldr	r2, [pc, #520]	; (8005d38 <HAL_DMA_IRQHandler+0x698>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d040      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x516>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a80      	ldr	r2, [pc, #512]	; (8005d3c <HAL_DMA_IRQHandler+0x69c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d03b      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x516>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a7f      	ldr	r2, [pc, #508]	; (8005d40 <HAL_DMA_IRQHandler+0x6a0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d036      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x516>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a7d      	ldr	r2, [pc, #500]	; (8005d44 <HAL_DMA_IRQHandler+0x6a4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d031      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x516>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a7c      	ldr	r2, [pc, #496]	; (8005d48 <HAL_DMA_IRQHandler+0x6a8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d02c      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x516>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a7a      	ldr	r2, [pc, #488]	; (8005d4c <HAL_DMA_IRQHandler+0x6ac>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d027      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x516>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a79      	ldr	r2, [pc, #484]	; (8005d50 <HAL_DMA_IRQHandler+0x6b0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d022      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x516>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a77      	ldr	r2, [pc, #476]	; (8005d54 <HAL_DMA_IRQHandler+0x6b4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d01d      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x516>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a76      	ldr	r2, [pc, #472]	; (8005d58 <HAL_DMA_IRQHandler+0x6b8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d018      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x516>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a74      	ldr	r2, [pc, #464]	; (8005d5c <HAL_DMA_IRQHandler+0x6bc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d013      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x516>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a73      	ldr	r2, [pc, #460]	; (8005d60 <HAL_DMA_IRQHandler+0x6c0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00e      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x516>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a71      	ldr	r2, [pc, #452]	; (8005d64 <HAL_DMA_IRQHandler+0x6c4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d009      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x516>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a70      	ldr	r2, [pc, #448]	; (8005d68 <HAL_DMA_IRQHandler+0x6c8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d004      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x516>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a6e      	ldr	r2, [pc, #440]	; (8005d6c <HAL_DMA_IRQHandler+0x6cc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d10a      	bne.n	8005bcc <HAL_DMA_IRQHandler+0x52c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	bf14      	ite	ne
 8005bc4:	2301      	movne	r3, #1
 8005bc6:	2300      	moveq	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	e009      	b.n	8005be0 <HAL_DMA_IRQHandler+0x540>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	bf14      	ite	ne
 8005bda:	2301      	movne	r3, #1
 8005bdc:	2300      	moveq	r3, #0
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d03e      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be8:	f003 031f 	and.w	r3, r3, #31
 8005bec:	2210      	movs	r2, #16
 8005bee:	409a      	lsls	r2, r3
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d018      	beq.n	8005c34 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d108      	bne.n	8005c22 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d024      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
 8005c20:	e01f      	b.n	8005c62 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d01b      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	4798      	blx	r3
 8005c32:	e016      	b.n	8005c62 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d107      	bne.n	8005c52 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0208 	bic.w	r2, r2, #8
 8005c50:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c66:	f003 031f 	and.w	r3, r3, #31
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	409a      	lsls	r2, r3
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	4013      	ands	r3, r2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 8110 	beq.w	8005e98 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a2c      	ldr	r2, [pc, #176]	; (8005d30 <HAL_DMA_IRQHandler+0x690>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d04a      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x678>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a2b      	ldr	r2, [pc, #172]	; (8005d34 <HAL_DMA_IRQHandler+0x694>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d045      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x678>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a29      	ldr	r2, [pc, #164]	; (8005d38 <HAL_DMA_IRQHandler+0x698>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d040      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x678>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a28      	ldr	r2, [pc, #160]	; (8005d3c <HAL_DMA_IRQHandler+0x69c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d03b      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x678>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a26      	ldr	r2, [pc, #152]	; (8005d40 <HAL_DMA_IRQHandler+0x6a0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d036      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x678>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a25      	ldr	r2, [pc, #148]	; (8005d44 <HAL_DMA_IRQHandler+0x6a4>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d031      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x678>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a23      	ldr	r2, [pc, #140]	; (8005d48 <HAL_DMA_IRQHandler+0x6a8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d02c      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x678>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a22      	ldr	r2, [pc, #136]	; (8005d4c <HAL_DMA_IRQHandler+0x6ac>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d027      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x678>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a20      	ldr	r2, [pc, #128]	; (8005d50 <HAL_DMA_IRQHandler+0x6b0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d022      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x678>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1f      	ldr	r2, [pc, #124]	; (8005d54 <HAL_DMA_IRQHandler+0x6b4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d01d      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x678>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1d      	ldr	r2, [pc, #116]	; (8005d58 <HAL_DMA_IRQHandler+0x6b8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d018      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x678>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1c      	ldr	r2, [pc, #112]	; (8005d5c <HAL_DMA_IRQHandler+0x6bc>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d013      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x678>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a1a      	ldr	r2, [pc, #104]	; (8005d60 <HAL_DMA_IRQHandler+0x6c0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00e      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x678>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a19      	ldr	r2, [pc, #100]	; (8005d64 <HAL_DMA_IRQHandler+0x6c4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d009      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x678>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <HAL_DMA_IRQHandler+0x6c8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d004      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x678>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a16      	ldr	r2, [pc, #88]	; (8005d6c <HAL_DMA_IRQHandler+0x6cc>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d12b      	bne.n	8005d70 <HAL_DMA_IRQHandler+0x6d0>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0310 	and.w	r3, r3, #16
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	bf14      	ite	ne
 8005d26:	2301      	movne	r3, #1
 8005d28:	2300      	moveq	r3, #0
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	e02a      	b.n	8005d84 <HAL_DMA_IRQHandler+0x6e4>
 8005d2e:	bf00      	nop
 8005d30:	40020010 	.word	0x40020010
 8005d34:	40020028 	.word	0x40020028
 8005d38:	40020040 	.word	0x40020040
 8005d3c:	40020058 	.word	0x40020058
 8005d40:	40020070 	.word	0x40020070
 8005d44:	40020088 	.word	0x40020088
 8005d48:	400200a0 	.word	0x400200a0
 8005d4c:	400200b8 	.word	0x400200b8
 8005d50:	40020410 	.word	0x40020410
 8005d54:	40020428 	.word	0x40020428
 8005d58:	40020440 	.word	0x40020440
 8005d5c:	40020458 	.word	0x40020458
 8005d60:	40020470 	.word	0x40020470
 8005d64:	40020488 	.word	0x40020488
 8005d68:	400204a0 	.word	0x400204a0
 8005d6c:	400204b8 	.word	0x400204b8
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	bf14      	ite	ne
 8005d7e:	2301      	movne	r3, #1
 8005d80:	2300      	moveq	r3, #0
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8087 	beq.w	8005e98 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8e:	f003 031f 	and.w	r3, r3, #31
 8005d92:	2220      	movs	r2, #32
 8005d94:	409a      	lsls	r2, r3
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d139      	bne.n	8005e1a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0216 	bic.w	r2, r2, #22
 8005db4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695a      	ldr	r2, [r3, #20]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dc4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d103      	bne.n	8005dd6 <HAL_DMA_IRQHandler+0x736>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d007      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0208 	bic.w	r2, r2, #8
 8005de4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	223f      	movs	r2, #63	; 0x3f
 8005df0:	409a      	lsls	r2, r3
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8382 	beq.w	8006514 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	4798      	blx	r3
          }
          return;
 8005e18:	e37c      	b.n	8006514 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d018      	beq.n	8005e5a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d108      	bne.n	8005e48 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d02c      	beq.n	8005e98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
 8005e46:	e027      	b.n	8005e98 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d023      	beq.n	8005e98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	4798      	blx	r3
 8005e58:	e01e      	b.n	8005e98 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10f      	bne.n	8005e88 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0210 	bic.w	r2, r2, #16
 8005e76:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 833e 	beq.w	800651e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 8088 	beq.w	8005fc0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2204      	movs	r2, #4
 8005eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a89      	ldr	r2, [pc, #548]	; (80060e4 <HAL_DMA_IRQHandler+0xa44>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d04a      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x8b8>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a88      	ldr	r2, [pc, #544]	; (80060e8 <HAL_DMA_IRQHandler+0xa48>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d045      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x8b8>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a86      	ldr	r2, [pc, #536]	; (80060ec <HAL_DMA_IRQHandler+0xa4c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d040      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x8b8>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a85      	ldr	r2, [pc, #532]	; (80060f0 <HAL_DMA_IRQHandler+0xa50>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d03b      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x8b8>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a83      	ldr	r2, [pc, #524]	; (80060f4 <HAL_DMA_IRQHandler+0xa54>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d036      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x8b8>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a82      	ldr	r2, [pc, #520]	; (80060f8 <HAL_DMA_IRQHandler+0xa58>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d031      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x8b8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a80      	ldr	r2, [pc, #512]	; (80060fc <HAL_DMA_IRQHandler+0xa5c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d02c      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x8b8>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a7f      	ldr	r2, [pc, #508]	; (8006100 <HAL_DMA_IRQHandler+0xa60>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d027      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x8b8>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a7d      	ldr	r2, [pc, #500]	; (8006104 <HAL_DMA_IRQHandler+0xa64>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d022      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x8b8>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a7c      	ldr	r2, [pc, #496]	; (8006108 <HAL_DMA_IRQHandler+0xa68>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d01d      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x8b8>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a7a      	ldr	r2, [pc, #488]	; (800610c <HAL_DMA_IRQHandler+0xa6c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d018      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x8b8>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a79      	ldr	r2, [pc, #484]	; (8006110 <HAL_DMA_IRQHandler+0xa70>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d013      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x8b8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a77      	ldr	r2, [pc, #476]	; (8006114 <HAL_DMA_IRQHandler+0xa74>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00e      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x8b8>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a76      	ldr	r2, [pc, #472]	; (8006118 <HAL_DMA_IRQHandler+0xa78>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d009      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x8b8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a74      	ldr	r2, [pc, #464]	; (800611c <HAL_DMA_IRQHandler+0xa7c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d004      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x8b8>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a73      	ldr	r2, [pc, #460]	; (8006120 <HAL_DMA_IRQHandler+0xa80>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d108      	bne.n	8005f6a <HAL_DMA_IRQHandler+0x8ca>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0201 	bic.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	e007      	b.n	8005f7a <HAL_DMA_IRQHandler+0x8da>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0201 	bic.w	r2, r2, #1
 8005f78:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d307      	bcc.n	8005f96 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1f2      	bne.n	8005f7a <HAL_DMA_IRQHandler+0x8da>
 8005f94:	e000      	b.n	8005f98 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005f96:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d004      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2203      	movs	r2, #3
 8005faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005fae:	e003      	b.n	8005fb8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 82aa 	beq.w	800651e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	4798      	blx	r3
 8005fd2:	e2a4      	b.n	800651e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a52      	ldr	r2, [pc, #328]	; (8006124 <HAL_DMA_IRQHandler+0xa84>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d04a      	beq.n	8006074 <HAL_DMA_IRQHandler+0x9d4>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a51      	ldr	r2, [pc, #324]	; (8006128 <HAL_DMA_IRQHandler+0xa88>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d045      	beq.n	8006074 <HAL_DMA_IRQHandler+0x9d4>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a4f      	ldr	r2, [pc, #316]	; (800612c <HAL_DMA_IRQHandler+0xa8c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d040      	beq.n	8006074 <HAL_DMA_IRQHandler+0x9d4>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a4e      	ldr	r2, [pc, #312]	; (8006130 <HAL_DMA_IRQHandler+0xa90>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d03b      	beq.n	8006074 <HAL_DMA_IRQHandler+0x9d4>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a4c      	ldr	r2, [pc, #304]	; (8006134 <HAL_DMA_IRQHandler+0xa94>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d036      	beq.n	8006074 <HAL_DMA_IRQHandler+0x9d4>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a4b      	ldr	r2, [pc, #300]	; (8006138 <HAL_DMA_IRQHandler+0xa98>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d031      	beq.n	8006074 <HAL_DMA_IRQHandler+0x9d4>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a49      	ldr	r2, [pc, #292]	; (800613c <HAL_DMA_IRQHandler+0xa9c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d02c      	beq.n	8006074 <HAL_DMA_IRQHandler+0x9d4>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a48      	ldr	r2, [pc, #288]	; (8006140 <HAL_DMA_IRQHandler+0xaa0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d027      	beq.n	8006074 <HAL_DMA_IRQHandler+0x9d4>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a46      	ldr	r2, [pc, #280]	; (8006144 <HAL_DMA_IRQHandler+0xaa4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d022      	beq.n	8006074 <HAL_DMA_IRQHandler+0x9d4>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a45      	ldr	r2, [pc, #276]	; (8006148 <HAL_DMA_IRQHandler+0xaa8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d01d      	beq.n	8006074 <HAL_DMA_IRQHandler+0x9d4>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a43      	ldr	r2, [pc, #268]	; (800614c <HAL_DMA_IRQHandler+0xaac>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d018      	beq.n	8006074 <HAL_DMA_IRQHandler+0x9d4>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a42      	ldr	r2, [pc, #264]	; (8006150 <HAL_DMA_IRQHandler+0xab0>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d013      	beq.n	8006074 <HAL_DMA_IRQHandler+0x9d4>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a40      	ldr	r2, [pc, #256]	; (8006154 <HAL_DMA_IRQHandler+0xab4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00e      	beq.n	8006074 <HAL_DMA_IRQHandler+0x9d4>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a3f      	ldr	r2, [pc, #252]	; (8006158 <HAL_DMA_IRQHandler+0xab8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d009      	beq.n	8006074 <HAL_DMA_IRQHandler+0x9d4>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a3d      	ldr	r2, [pc, #244]	; (800615c <HAL_DMA_IRQHandler+0xabc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d004      	beq.n	8006074 <HAL_DMA_IRQHandler+0x9d4>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a3c      	ldr	r2, [pc, #240]	; (8006160 <HAL_DMA_IRQHandler+0xac0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d101      	bne.n	8006078 <HAL_DMA_IRQHandler+0x9d8>
 8006074:	2301      	movs	r3, #1
 8006076:	e000      	b.n	800607a <HAL_DMA_IRQHandler+0x9da>
 8006078:	2300      	movs	r3, #0
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 824f 	beq.w	800651e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608c:	f003 031f 	and.w	r3, r3, #31
 8006090:	2204      	movs	r2, #4
 8006092:	409a      	lsls	r2, r3
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	4013      	ands	r3, r2
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 80dd 	beq.w	8006258 <HAL_DMA_IRQHandler+0xbb8>
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80d7 	beq.w	8006258 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	2204      	movs	r2, #4
 80060b4:	409a      	lsls	r2, r3
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d059      	beq.n	8006178 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d14a      	bne.n	8006164 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 8220 	beq.w	8006518 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060e0:	e21a      	b.n	8006518 <HAL_DMA_IRQHandler+0xe78>
 80060e2:	bf00      	nop
 80060e4:	40020010 	.word	0x40020010
 80060e8:	40020028 	.word	0x40020028
 80060ec:	40020040 	.word	0x40020040
 80060f0:	40020058 	.word	0x40020058
 80060f4:	40020070 	.word	0x40020070
 80060f8:	40020088 	.word	0x40020088
 80060fc:	400200a0 	.word	0x400200a0
 8006100:	400200b8 	.word	0x400200b8
 8006104:	40020410 	.word	0x40020410
 8006108:	40020428 	.word	0x40020428
 800610c:	40020440 	.word	0x40020440
 8006110:	40020458 	.word	0x40020458
 8006114:	40020470 	.word	0x40020470
 8006118:	40020488 	.word	0x40020488
 800611c:	400204a0 	.word	0x400204a0
 8006120:	400204b8 	.word	0x400204b8
 8006124:	48022c08 	.word	0x48022c08
 8006128:	48022c1c 	.word	0x48022c1c
 800612c:	48022c30 	.word	0x48022c30
 8006130:	48022c44 	.word	0x48022c44
 8006134:	48022c58 	.word	0x48022c58
 8006138:	48022c6c 	.word	0x48022c6c
 800613c:	48022c80 	.word	0x48022c80
 8006140:	48022c94 	.word	0x48022c94
 8006144:	58025408 	.word	0x58025408
 8006148:	5802541c 	.word	0x5802541c
 800614c:	58025430 	.word	0x58025430
 8006150:	58025444 	.word	0x58025444
 8006154:	58025458 	.word	0x58025458
 8006158:	5802546c 	.word	0x5802546c
 800615c:	58025480 	.word	0x58025480
 8006160:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 81d5 	beq.w	8006518 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006176:	e1cf      	b.n	8006518 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	d160      	bne.n	8006244 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a7f      	ldr	r2, [pc, #508]	; (8006384 <HAL_DMA_IRQHandler+0xce4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d04a      	beq.n	8006222 <HAL_DMA_IRQHandler+0xb82>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a7d      	ldr	r2, [pc, #500]	; (8006388 <HAL_DMA_IRQHandler+0xce8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d045      	beq.n	8006222 <HAL_DMA_IRQHandler+0xb82>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a7c      	ldr	r2, [pc, #496]	; (800638c <HAL_DMA_IRQHandler+0xcec>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d040      	beq.n	8006222 <HAL_DMA_IRQHandler+0xb82>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a7a      	ldr	r2, [pc, #488]	; (8006390 <HAL_DMA_IRQHandler+0xcf0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d03b      	beq.n	8006222 <HAL_DMA_IRQHandler+0xb82>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a79      	ldr	r2, [pc, #484]	; (8006394 <HAL_DMA_IRQHandler+0xcf4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d036      	beq.n	8006222 <HAL_DMA_IRQHandler+0xb82>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a77      	ldr	r2, [pc, #476]	; (8006398 <HAL_DMA_IRQHandler+0xcf8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d031      	beq.n	8006222 <HAL_DMA_IRQHandler+0xb82>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a76      	ldr	r2, [pc, #472]	; (800639c <HAL_DMA_IRQHandler+0xcfc>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d02c      	beq.n	8006222 <HAL_DMA_IRQHandler+0xb82>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a74      	ldr	r2, [pc, #464]	; (80063a0 <HAL_DMA_IRQHandler+0xd00>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d027      	beq.n	8006222 <HAL_DMA_IRQHandler+0xb82>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a73      	ldr	r2, [pc, #460]	; (80063a4 <HAL_DMA_IRQHandler+0xd04>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d022      	beq.n	8006222 <HAL_DMA_IRQHandler+0xb82>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a71      	ldr	r2, [pc, #452]	; (80063a8 <HAL_DMA_IRQHandler+0xd08>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d01d      	beq.n	8006222 <HAL_DMA_IRQHandler+0xb82>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a70      	ldr	r2, [pc, #448]	; (80063ac <HAL_DMA_IRQHandler+0xd0c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d018      	beq.n	8006222 <HAL_DMA_IRQHandler+0xb82>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a6e      	ldr	r2, [pc, #440]	; (80063b0 <HAL_DMA_IRQHandler+0xd10>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <HAL_DMA_IRQHandler+0xb82>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a6d      	ldr	r2, [pc, #436]	; (80063b4 <HAL_DMA_IRQHandler+0xd14>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00e      	beq.n	8006222 <HAL_DMA_IRQHandler+0xb82>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a6b      	ldr	r2, [pc, #428]	; (80063b8 <HAL_DMA_IRQHandler+0xd18>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d009      	beq.n	8006222 <HAL_DMA_IRQHandler+0xb82>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a6a      	ldr	r2, [pc, #424]	; (80063bc <HAL_DMA_IRQHandler+0xd1c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d004      	beq.n	8006222 <HAL_DMA_IRQHandler+0xb82>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a68      	ldr	r2, [pc, #416]	; (80063c0 <HAL_DMA_IRQHandler+0xd20>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d108      	bne.n	8006234 <HAL_DMA_IRQHandler+0xb94>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0208 	bic.w	r2, r2, #8
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	e007      	b.n	8006244 <HAL_DMA_IRQHandler+0xba4>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0204 	bic.w	r2, r2, #4
 8006242:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 8165 	beq.w	8006518 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006256:	e15f      	b.n	8006518 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625c:	f003 031f 	and.w	r3, r3, #31
 8006260:	2202      	movs	r2, #2
 8006262:	409a      	lsls	r2, r3
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	4013      	ands	r3, r2
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 80c5 	beq.w	80063f8 <HAL_DMA_IRQHandler+0xd58>
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 80bf 	beq.w	80063f8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800627e:	f003 031f 	and.w	r3, r3, #31
 8006282:	2202      	movs	r2, #2
 8006284:	409a      	lsls	r2, r3
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d018      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d109      	bne.n	80062b2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 813a 	beq.w	800651c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062b0:	e134      	b.n	800651c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 8130 	beq.w	800651c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062c4:	e12a      	b.n	800651c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f040 8089 	bne.w	80063e4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a2b      	ldr	r2, [pc, #172]	; (8006384 <HAL_DMA_IRQHandler+0xce4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d04a      	beq.n	8006372 <HAL_DMA_IRQHandler+0xcd2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a29      	ldr	r2, [pc, #164]	; (8006388 <HAL_DMA_IRQHandler+0xce8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d045      	beq.n	8006372 <HAL_DMA_IRQHandler+0xcd2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a28      	ldr	r2, [pc, #160]	; (800638c <HAL_DMA_IRQHandler+0xcec>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d040      	beq.n	8006372 <HAL_DMA_IRQHandler+0xcd2>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a26      	ldr	r2, [pc, #152]	; (8006390 <HAL_DMA_IRQHandler+0xcf0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d03b      	beq.n	8006372 <HAL_DMA_IRQHandler+0xcd2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a25      	ldr	r2, [pc, #148]	; (8006394 <HAL_DMA_IRQHandler+0xcf4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d036      	beq.n	8006372 <HAL_DMA_IRQHandler+0xcd2>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a23      	ldr	r2, [pc, #140]	; (8006398 <HAL_DMA_IRQHandler+0xcf8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d031      	beq.n	8006372 <HAL_DMA_IRQHandler+0xcd2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a22      	ldr	r2, [pc, #136]	; (800639c <HAL_DMA_IRQHandler+0xcfc>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d02c      	beq.n	8006372 <HAL_DMA_IRQHandler+0xcd2>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a20      	ldr	r2, [pc, #128]	; (80063a0 <HAL_DMA_IRQHandler+0xd00>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d027      	beq.n	8006372 <HAL_DMA_IRQHandler+0xcd2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a1f      	ldr	r2, [pc, #124]	; (80063a4 <HAL_DMA_IRQHandler+0xd04>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d022      	beq.n	8006372 <HAL_DMA_IRQHandler+0xcd2>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a1d      	ldr	r2, [pc, #116]	; (80063a8 <HAL_DMA_IRQHandler+0xd08>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d01d      	beq.n	8006372 <HAL_DMA_IRQHandler+0xcd2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a1c      	ldr	r2, [pc, #112]	; (80063ac <HAL_DMA_IRQHandler+0xd0c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d018      	beq.n	8006372 <HAL_DMA_IRQHandler+0xcd2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a1a      	ldr	r2, [pc, #104]	; (80063b0 <HAL_DMA_IRQHandler+0xd10>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d013      	beq.n	8006372 <HAL_DMA_IRQHandler+0xcd2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a19      	ldr	r2, [pc, #100]	; (80063b4 <HAL_DMA_IRQHandler+0xd14>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00e      	beq.n	8006372 <HAL_DMA_IRQHandler+0xcd2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a17      	ldr	r2, [pc, #92]	; (80063b8 <HAL_DMA_IRQHandler+0xd18>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d009      	beq.n	8006372 <HAL_DMA_IRQHandler+0xcd2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a16      	ldr	r2, [pc, #88]	; (80063bc <HAL_DMA_IRQHandler+0xd1c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d004      	beq.n	8006372 <HAL_DMA_IRQHandler+0xcd2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a14      	ldr	r2, [pc, #80]	; (80063c0 <HAL_DMA_IRQHandler+0xd20>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d128      	bne.n	80063c4 <HAL_DMA_IRQHandler+0xd24>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0214 	bic.w	r2, r2, #20
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	e027      	b.n	80063d4 <HAL_DMA_IRQHandler+0xd34>
 8006384:	40020010 	.word	0x40020010
 8006388:	40020028 	.word	0x40020028
 800638c:	40020040 	.word	0x40020040
 8006390:	40020058 	.word	0x40020058
 8006394:	40020070 	.word	0x40020070
 8006398:	40020088 	.word	0x40020088
 800639c:	400200a0 	.word	0x400200a0
 80063a0:	400200b8 	.word	0x400200b8
 80063a4:	40020410 	.word	0x40020410
 80063a8:	40020428 	.word	0x40020428
 80063ac:	40020440 	.word	0x40020440
 80063b0:	40020458 	.word	0x40020458
 80063b4:	40020470 	.word	0x40020470
 80063b8:	40020488 	.word	0x40020488
 80063bc:	400204a0 	.word	0x400204a0
 80063c0:	400204b8 	.word	0x400204b8
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 020a 	bic.w	r2, r2, #10
 80063d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 8097 	beq.w	800651c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063f6:	e091      	b.n	800651c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fc:	f003 031f 	and.w	r3, r3, #31
 8006400:	2208      	movs	r2, #8
 8006402:	409a      	lsls	r2, r3
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	4013      	ands	r3, r2
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 8088 	beq.w	800651e <HAL_DMA_IRQHandler+0xe7e>
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 8082 	beq.w	800651e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a41      	ldr	r2, [pc, #260]	; (8006524 <HAL_DMA_IRQHandler+0xe84>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d04a      	beq.n	80064ba <HAL_DMA_IRQHandler+0xe1a>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a3f      	ldr	r2, [pc, #252]	; (8006528 <HAL_DMA_IRQHandler+0xe88>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d045      	beq.n	80064ba <HAL_DMA_IRQHandler+0xe1a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a3e      	ldr	r2, [pc, #248]	; (800652c <HAL_DMA_IRQHandler+0xe8c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d040      	beq.n	80064ba <HAL_DMA_IRQHandler+0xe1a>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a3c      	ldr	r2, [pc, #240]	; (8006530 <HAL_DMA_IRQHandler+0xe90>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d03b      	beq.n	80064ba <HAL_DMA_IRQHandler+0xe1a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a3b      	ldr	r2, [pc, #236]	; (8006534 <HAL_DMA_IRQHandler+0xe94>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d036      	beq.n	80064ba <HAL_DMA_IRQHandler+0xe1a>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a39      	ldr	r2, [pc, #228]	; (8006538 <HAL_DMA_IRQHandler+0xe98>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d031      	beq.n	80064ba <HAL_DMA_IRQHandler+0xe1a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a38      	ldr	r2, [pc, #224]	; (800653c <HAL_DMA_IRQHandler+0xe9c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d02c      	beq.n	80064ba <HAL_DMA_IRQHandler+0xe1a>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a36      	ldr	r2, [pc, #216]	; (8006540 <HAL_DMA_IRQHandler+0xea0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d027      	beq.n	80064ba <HAL_DMA_IRQHandler+0xe1a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a35      	ldr	r2, [pc, #212]	; (8006544 <HAL_DMA_IRQHandler+0xea4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d022      	beq.n	80064ba <HAL_DMA_IRQHandler+0xe1a>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a33      	ldr	r2, [pc, #204]	; (8006548 <HAL_DMA_IRQHandler+0xea8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d01d      	beq.n	80064ba <HAL_DMA_IRQHandler+0xe1a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a32      	ldr	r2, [pc, #200]	; (800654c <HAL_DMA_IRQHandler+0xeac>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d018      	beq.n	80064ba <HAL_DMA_IRQHandler+0xe1a>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a30      	ldr	r2, [pc, #192]	; (8006550 <HAL_DMA_IRQHandler+0xeb0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d013      	beq.n	80064ba <HAL_DMA_IRQHandler+0xe1a>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a2f      	ldr	r2, [pc, #188]	; (8006554 <HAL_DMA_IRQHandler+0xeb4>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00e      	beq.n	80064ba <HAL_DMA_IRQHandler+0xe1a>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a2d      	ldr	r2, [pc, #180]	; (8006558 <HAL_DMA_IRQHandler+0xeb8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d009      	beq.n	80064ba <HAL_DMA_IRQHandler+0xe1a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a2c      	ldr	r2, [pc, #176]	; (800655c <HAL_DMA_IRQHandler+0xebc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d004      	beq.n	80064ba <HAL_DMA_IRQHandler+0xe1a>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a2a      	ldr	r2, [pc, #168]	; (8006560 <HAL_DMA_IRQHandler+0xec0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d108      	bne.n	80064cc <HAL_DMA_IRQHandler+0xe2c>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 021c 	bic.w	r2, r2, #28
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	e007      	b.n	80064dc <HAL_DMA_IRQHandler+0xe3c>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 020e 	bic.w	r2, r2, #14
 80064da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e0:	f003 031f 	and.w	r3, r3, #31
 80064e4:	2201      	movs	r2, #1
 80064e6:	409a      	lsls	r2, r3
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006506:	2b00      	cmp	r3, #0
 8006508:	d009      	beq.n	800651e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	4798      	blx	r3
 8006512:	e004      	b.n	800651e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006514:	bf00      	nop
 8006516:	e002      	b.n	800651e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006518:	bf00      	nop
 800651a:	e000      	b.n	800651e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800651c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800651e:	3728      	adds	r7, #40	; 0x28
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40020010 	.word	0x40020010
 8006528:	40020028 	.word	0x40020028
 800652c:	40020040 	.word	0x40020040
 8006530:	40020058 	.word	0x40020058
 8006534:	40020070 	.word	0x40020070
 8006538:	40020088 	.word	0x40020088
 800653c:	400200a0 	.word	0x400200a0
 8006540:	400200b8 	.word	0x400200b8
 8006544:	40020410 	.word	0x40020410
 8006548:	40020428 	.word	0x40020428
 800654c:	40020440 	.word	0x40020440
 8006550:	40020458 	.word	0x40020458
 8006554:	40020470 	.word	0x40020470
 8006558:	40020488 	.word	0x40020488
 800655c:	400204a0 	.word	0x400204a0
 8006560:	400204b8 	.word	0x400204b8

08006564 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006570:	4618      	mov	r0, r3
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800658e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006594:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a7f      	ldr	r2, [pc, #508]	; (8006798 <DMA_SetConfig+0x21c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d072      	beq.n	8006686 <DMA_SetConfig+0x10a>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a7d      	ldr	r2, [pc, #500]	; (800679c <DMA_SetConfig+0x220>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d06d      	beq.n	8006686 <DMA_SetConfig+0x10a>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a7c      	ldr	r2, [pc, #496]	; (80067a0 <DMA_SetConfig+0x224>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d068      	beq.n	8006686 <DMA_SetConfig+0x10a>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a7a      	ldr	r2, [pc, #488]	; (80067a4 <DMA_SetConfig+0x228>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d063      	beq.n	8006686 <DMA_SetConfig+0x10a>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a79      	ldr	r2, [pc, #484]	; (80067a8 <DMA_SetConfig+0x22c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d05e      	beq.n	8006686 <DMA_SetConfig+0x10a>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a77      	ldr	r2, [pc, #476]	; (80067ac <DMA_SetConfig+0x230>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d059      	beq.n	8006686 <DMA_SetConfig+0x10a>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a76      	ldr	r2, [pc, #472]	; (80067b0 <DMA_SetConfig+0x234>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d054      	beq.n	8006686 <DMA_SetConfig+0x10a>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a74      	ldr	r2, [pc, #464]	; (80067b4 <DMA_SetConfig+0x238>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d04f      	beq.n	8006686 <DMA_SetConfig+0x10a>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a73      	ldr	r2, [pc, #460]	; (80067b8 <DMA_SetConfig+0x23c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d04a      	beq.n	8006686 <DMA_SetConfig+0x10a>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a71      	ldr	r2, [pc, #452]	; (80067bc <DMA_SetConfig+0x240>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d045      	beq.n	8006686 <DMA_SetConfig+0x10a>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a70      	ldr	r2, [pc, #448]	; (80067c0 <DMA_SetConfig+0x244>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d040      	beq.n	8006686 <DMA_SetConfig+0x10a>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a6e      	ldr	r2, [pc, #440]	; (80067c4 <DMA_SetConfig+0x248>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d03b      	beq.n	8006686 <DMA_SetConfig+0x10a>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a6d      	ldr	r2, [pc, #436]	; (80067c8 <DMA_SetConfig+0x24c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d036      	beq.n	8006686 <DMA_SetConfig+0x10a>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a6b      	ldr	r2, [pc, #428]	; (80067cc <DMA_SetConfig+0x250>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d031      	beq.n	8006686 <DMA_SetConfig+0x10a>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a6a      	ldr	r2, [pc, #424]	; (80067d0 <DMA_SetConfig+0x254>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d02c      	beq.n	8006686 <DMA_SetConfig+0x10a>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a68      	ldr	r2, [pc, #416]	; (80067d4 <DMA_SetConfig+0x258>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d027      	beq.n	8006686 <DMA_SetConfig+0x10a>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a67      	ldr	r2, [pc, #412]	; (80067d8 <DMA_SetConfig+0x25c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d022      	beq.n	8006686 <DMA_SetConfig+0x10a>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a65      	ldr	r2, [pc, #404]	; (80067dc <DMA_SetConfig+0x260>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01d      	beq.n	8006686 <DMA_SetConfig+0x10a>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a64      	ldr	r2, [pc, #400]	; (80067e0 <DMA_SetConfig+0x264>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d018      	beq.n	8006686 <DMA_SetConfig+0x10a>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a62      	ldr	r2, [pc, #392]	; (80067e4 <DMA_SetConfig+0x268>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d013      	beq.n	8006686 <DMA_SetConfig+0x10a>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a61      	ldr	r2, [pc, #388]	; (80067e8 <DMA_SetConfig+0x26c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00e      	beq.n	8006686 <DMA_SetConfig+0x10a>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a5f      	ldr	r2, [pc, #380]	; (80067ec <DMA_SetConfig+0x270>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d009      	beq.n	8006686 <DMA_SetConfig+0x10a>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a5e      	ldr	r2, [pc, #376]	; (80067f0 <DMA_SetConfig+0x274>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d004      	beq.n	8006686 <DMA_SetConfig+0x10a>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a5c      	ldr	r2, [pc, #368]	; (80067f4 <DMA_SetConfig+0x278>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d101      	bne.n	800668a <DMA_SetConfig+0x10e>
 8006686:	2301      	movs	r3, #1
 8006688:	e000      	b.n	800668c <DMA_SetConfig+0x110>
 800668a:	2300      	movs	r3, #0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00d      	beq.n	80066ac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006698:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d004      	beq.n	80066ac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80066aa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a39      	ldr	r2, [pc, #228]	; (8006798 <DMA_SetConfig+0x21c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d04a      	beq.n	800674c <DMA_SetConfig+0x1d0>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a38      	ldr	r2, [pc, #224]	; (800679c <DMA_SetConfig+0x220>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d045      	beq.n	800674c <DMA_SetConfig+0x1d0>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a36      	ldr	r2, [pc, #216]	; (80067a0 <DMA_SetConfig+0x224>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d040      	beq.n	800674c <DMA_SetConfig+0x1d0>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a35      	ldr	r2, [pc, #212]	; (80067a4 <DMA_SetConfig+0x228>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d03b      	beq.n	800674c <DMA_SetConfig+0x1d0>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a33      	ldr	r2, [pc, #204]	; (80067a8 <DMA_SetConfig+0x22c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d036      	beq.n	800674c <DMA_SetConfig+0x1d0>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a32      	ldr	r2, [pc, #200]	; (80067ac <DMA_SetConfig+0x230>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d031      	beq.n	800674c <DMA_SetConfig+0x1d0>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a30      	ldr	r2, [pc, #192]	; (80067b0 <DMA_SetConfig+0x234>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d02c      	beq.n	800674c <DMA_SetConfig+0x1d0>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a2f      	ldr	r2, [pc, #188]	; (80067b4 <DMA_SetConfig+0x238>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d027      	beq.n	800674c <DMA_SetConfig+0x1d0>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a2d      	ldr	r2, [pc, #180]	; (80067b8 <DMA_SetConfig+0x23c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d022      	beq.n	800674c <DMA_SetConfig+0x1d0>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a2c      	ldr	r2, [pc, #176]	; (80067bc <DMA_SetConfig+0x240>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d01d      	beq.n	800674c <DMA_SetConfig+0x1d0>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a2a      	ldr	r2, [pc, #168]	; (80067c0 <DMA_SetConfig+0x244>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d018      	beq.n	800674c <DMA_SetConfig+0x1d0>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a29      	ldr	r2, [pc, #164]	; (80067c4 <DMA_SetConfig+0x248>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d013      	beq.n	800674c <DMA_SetConfig+0x1d0>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a27      	ldr	r2, [pc, #156]	; (80067c8 <DMA_SetConfig+0x24c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00e      	beq.n	800674c <DMA_SetConfig+0x1d0>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a26      	ldr	r2, [pc, #152]	; (80067cc <DMA_SetConfig+0x250>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d009      	beq.n	800674c <DMA_SetConfig+0x1d0>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a24      	ldr	r2, [pc, #144]	; (80067d0 <DMA_SetConfig+0x254>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d004      	beq.n	800674c <DMA_SetConfig+0x1d0>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a23      	ldr	r2, [pc, #140]	; (80067d4 <DMA_SetConfig+0x258>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d101      	bne.n	8006750 <DMA_SetConfig+0x1d4>
 800674c:	2301      	movs	r3, #1
 800674e:	e000      	b.n	8006752 <DMA_SetConfig+0x1d6>
 8006750:	2300      	movs	r3, #0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d059      	beq.n	800680a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675a:	f003 031f 	and.w	r3, r3, #31
 800675e:	223f      	movs	r2, #63	; 0x3f
 8006760:	409a      	lsls	r2, r3
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006774:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	2b40      	cmp	r3, #64	; 0x40
 8006784:	d138      	bne.n	80067f8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006796:	e0ae      	b.n	80068f6 <DMA_SetConfig+0x37a>
 8006798:	40020010 	.word	0x40020010
 800679c:	40020028 	.word	0x40020028
 80067a0:	40020040 	.word	0x40020040
 80067a4:	40020058 	.word	0x40020058
 80067a8:	40020070 	.word	0x40020070
 80067ac:	40020088 	.word	0x40020088
 80067b0:	400200a0 	.word	0x400200a0
 80067b4:	400200b8 	.word	0x400200b8
 80067b8:	40020410 	.word	0x40020410
 80067bc:	40020428 	.word	0x40020428
 80067c0:	40020440 	.word	0x40020440
 80067c4:	40020458 	.word	0x40020458
 80067c8:	40020470 	.word	0x40020470
 80067cc:	40020488 	.word	0x40020488
 80067d0:	400204a0 	.word	0x400204a0
 80067d4:	400204b8 	.word	0x400204b8
 80067d8:	58025408 	.word	0x58025408
 80067dc:	5802541c 	.word	0x5802541c
 80067e0:	58025430 	.word	0x58025430
 80067e4:	58025444 	.word	0x58025444
 80067e8:	58025458 	.word	0x58025458
 80067ec:	5802546c 	.word	0x5802546c
 80067f0:	58025480 	.word	0x58025480
 80067f4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	60da      	str	r2, [r3, #12]
}
 8006808:	e075      	b.n	80068f6 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a3d      	ldr	r2, [pc, #244]	; (8006904 <DMA_SetConfig+0x388>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d04a      	beq.n	80068aa <DMA_SetConfig+0x32e>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a3b      	ldr	r2, [pc, #236]	; (8006908 <DMA_SetConfig+0x38c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d045      	beq.n	80068aa <DMA_SetConfig+0x32e>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a3a      	ldr	r2, [pc, #232]	; (800690c <DMA_SetConfig+0x390>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d040      	beq.n	80068aa <DMA_SetConfig+0x32e>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a38      	ldr	r2, [pc, #224]	; (8006910 <DMA_SetConfig+0x394>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d03b      	beq.n	80068aa <DMA_SetConfig+0x32e>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a37      	ldr	r2, [pc, #220]	; (8006914 <DMA_SetConfig+0x398>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d036      	beq.n	80068aa <DMA_SetConfig+0x32e>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a35      	ldr	r2, [pc, #212]	; (8006918 <DMA_SetConfig+0x39c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d031      	beq.n	80068aa <DMA_SetConfig+0x32e>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a34      	ldr	r2, [pc, #208]	; (800691c <DMA_SetConfig+0x3a0>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d02c      	beq.n	80068aa <DMA_SetConfig+0x32e>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a32      	ldr	r2, [pc, #200]	; (8006920 <DMA_SetConfig+0x3a4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d027      	beq.n	80068aa <DMA_SetConfig+0x32e>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a31      	ldr	r2, [pc, #196]	; (8006924 <DMA_SetConfig+0x3a8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d022      	beq.n	80068aa <DMA_SetConfig+0x32e>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a2f      	ldr	r2, [pc, #188]	; (8006928 <DMA_SetConfig+0x3ac>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d01d      	beq.n	80068aa <DMA_SetConfig+0x32e>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a2e      	ldr	r2, [pc, #184]	; (800692c <DMA_SetConfig+0x3b0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d018      	beq.n	80068aa <DMA_SetConfig+0x32e>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a2c      	ldr	r2, [pc, #176]	; (8006930 <DMA_SetConfig+0x3b4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d013      	beq.n	80068aa <DMA_SetConfig+0x32e>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a2b      	ldr	r2, [pc, #172]	; (8006934 <DMA_SetConfig+0x3b8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00e      	beq.n	80068aa <DMA_SetConfig+0x32e>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a29      	ldr	r2, [pc, #164]	; (8006938 <DMA_SetConfig+0x3bc>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d009      	beq.n	80068aa <DMA_SetConfig+0x32e>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a28      	ldr	r2, [pc, #160]	; (800693c <DMA_SetConfig+0x3c0>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d004      	beq.n	80068aa <DMA_SetConfig+0x32e>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a26      	ldr	r2, [pc, #152]	; (8006940 <DMA_SetConfig+0x3c4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d101      	bne.n	80068ae <DMA_SetConfig+0x332>
 80068aa:	2301      	movs	r3, #1
 80068ac:	e000      	b.n	80068b0 <DMA_SetConfig+0x334>
 80068ae:	2300      	movs	r3, #0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d020      	beq.n	80068f6 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b8:	f003 031f 	and.w	r3, r3, #31
 80068bc:	2201      	movs	r2, #1
 80068be:	409a      	lsls	r2, r3
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	2b40      	cmp	r3, #64	; 0x40
 80068d2:	d108      	bne.n	80068e6 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	60da      	str	r2, [r3, #12]
}
 80068e4:	e007      	b.n	80068f6 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	60da      	str	r2, [r3, #12]
}
 80068f6:	bf00      	nop
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	48022c08 	.word	0x48022c08
 8006908:	48022c1c 	.word	0x48022c1c
 800690c:	48022c30 	.word	0x48022c30
 8006910:	48022c44 	.word	0x48022c44
 8006914:	48022c58 	.word	0x48022c58
 8006918:	48022c6c 	.word	0x48022c6c
 800691c:	48022c80 	.word	0x48022c80
 8006920:	48022c94 	.word	0x48022c94
 8006924:	58025408 	.word	0x58025408
 8006928:	5802541c 	.word	0x5802541c
 800692c:	58025430 	.word	0x58025430
 8006930:	58025444 	.word	0x58025444
 8006934:	58025458 	.word	0x58025458
 8006938:	5802546c 	.word	0x5802546c
 800693c:	58025480 	.word	0x58025480
 8006940:	58025494 	.word	0x58025494

08006944 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a42      	ldr	r2, [pc, #264]	; (8006a5c <DMA_CalcBaseAndBitshift+0x118>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d04a      	beq.n	80069ec <DMA_CalcBaseAndBitshift+0xa8>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a41      	ldr	r2, [pc, #260]	; (8006a60 <DMA_CalcBaseAndBitshift+0x11c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d045      	beq.n	80069ec <DMA_CalcBaseAndBitshift+0xa8>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a3f      	ldr	r2, [pc, #252]	; (8006a64 <DMA_CalcBaseAndBitshift+0x120>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d040      	beq.n	80069ec <DMA_CalcBaseAndBitshift+0xa8>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a3e      	ldr	r2, [pc, #248]	; (8006a68 <DMA_CalcBaseAndBitshift+0x124>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d03b      	beq.n	80069ec <DMA_CalcBaseAndBitshift+0xa8>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a3c      	ldr	r2, [pc, #240]	; (8006a6c <DMA_CalcBaseAndBitshift+0x128>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d036      	beq.n	80069ec <DMA_CalcBaseAndBitshift+0xa8>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a3b      	ldr	r2, [pc, #236]	; (8006a70 <DMA_CalcBaseAndBitshift+0x12c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d031      	beq.n	80069ec <DMA_CalcBaseAndBitshift+0xa8>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a39      	ldr	r2, [pc, #228]	; (8006a74 <DMA_CalcBaseAndBitshift+0x130>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d02c      	beq.n	80069ec <DMA_CalcBaseAndBitshift+0xa8>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a38      	ldr	r2, [pc, #224]	; (8006a78 <DMA_CalcBaseAndBitshift+0x134>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d027      	beq.n	80069ec <DMA_CalcBaseAndBitshift+0xa8>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a36      	ldr	r2, [pc, #216]	; (8006a7c <DMA_CalcBaseAndBitshift+0x138>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d022      	beq.n	80069ec <DMA_CalcBaseAndBitshift+0xa8>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a35      	ldr	r2, [pc, #212]	; (8006a80 <DMA_CalcBaseAndBitshift+0x13c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d01d      	beq.n	80069ec <DMA_CalcBaseAndBitshift+0xa8>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a33      	ldr	r2, [pc, #204]	; (8006a84 <DMA_CalcBaseAndBitshift+0x140>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d018      	beq.n	80069ec <DMA_CalcBaseAndBitshift+0xa8>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a32      	ldr	r2, [pc, #200]	; (8006a88 <DMA_CalcBaseAndBitshift+0x144>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d013      	beq.n	80069ec <DMA_CalcBaseAndBitshift+0xa8>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a30      	ldr	r2, [pc, #192]	; (8006a8c <DMA_CalcBaseAndBitshift+0x148>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00e      	beq.n	80069ec <DMA_CalcBaseAndBitshift+0xa8>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a2f      	ldr	r2, [pc, #188]	; (8006a90 <DMA_CalcBaseAndBitshift+0x14c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d009      	beq.n	80069ec <DMA_CalcBaseAndBitshift+0xa8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a2d      	ldr	r2, [pc, #180]	; (8006a94 <DMA_CalcBaseAndBitshift+0x150>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d004      	beq.n	80069ec <DMA_CalcBaseAndBitshift+0xa8>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a2c      	ldr	r2, [pc, #176]	; (8006a98 <DMA_CalcBaseAndBitshift+0x154>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d101      	bne.n	80069f0 <DMA_CalcBaseAndBitshift+0xac>
 80069ec:	2301      	movs	r3, #1
 80069ee:	e000      	b.n	80069f2 <DMA_CalcBaseAndBitshift+0xae>
 80069f0:	2300      	movs	r3, #0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d024      	beq.n	8006a40 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	3b10      	subs	r3, #16
 80069fe:	4a27      	ldr	r2, [pc, #156]	; (8006a9c <DMA_CalcBaseAndBitshift+0x158>)
 8006a00:	fba2 2303 	umull	r2, r3, r2, r3
 8006a04:	091b      	lsrs	r3, r3, #4
 8006a06:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	4a24      	ldr	r2, [pc, #144]	; (8006aa0 <DMA_CalcBaseAndBitshift+0x15c>)
 8006a10:	5cd3      	ldrb	r3, [r2, r3]
 8006a12:	461a      	mov	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d908      	bls.n	8006a30 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	4b1f      	ldr	r3, [pc, #124]	; (8006aa4 <DMA_CalcBaseAndBitshift+0x160>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	1d1a      	adds	r2, r3, #4
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	659a      	str	r2, [r3, #88]	; 0x58
 8006a2e:	e00d      	b.n	8006a4c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	461a      	mov	r2, r3
 8006a36:	4b1b      	ldr	r3, [pc, #108]	; (8006aa4 <DMA_CalcBaseAndBitshift+0x160>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8006a3e:	e005      	b.n	8006a4c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	40020010 	.word	0x40020010
 8006a60:	40020028 	.word	0x40020028
 8006a64:	40020040 	.word	0x40020040
 8006a68:	40020058 	.word	0x40020058
 8006a6c:	40020070 	.word	0x40020070
 8006a70:	40020088 	.word	0x40020088
 8006a74:	400200a0 	.word	0x400200a0
 8006a78:	400200b8 	.word	0x400200b8
 8006a7c:	40020410 	.word	0x40020410
 8006a80:	40020428 	.word	0x40020428
 8006a84:	40020440 	.word	0x40020440
 8006a88:	40020458 	.word	0x40020458
 8006a8c:	40020470 	.word	0x40020470
 8006a90:	40020488 	.word	0x40020488
 8006a94:	400204a0 	.word	0x400204a0
 8006a98:	400204b8 	.word	0x400204b8
 8006a9c:	aaaaaaab 	.word	0xaaaaaaab
 8006aa0:	08017d18 	.word	0x08017d18
 8006aa4:	fffffc00 	.word	0xfffffc00

08006aa8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d120      	bne.n	8006afe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac0:	2b03      	cmp	r3, #3
 8006ac2:	d858      	bhi.n	8006b76 <DMA_CheckFifoParam+0xce>
 8006ac4:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <DMA_CheckFifoParam+0x24>)
 8006ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aca:	bf00      	nop
 8006acc:	08006add 	.word	0x08006add
 8006ad0:	08006aef 	.word	0x08006aef
 8006ad4:	08006add 	.word	0x08006add
 8006ad8:	08006b77 	.word	0x08006b77
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d048      	beq.n	8006b7a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006aec:	e045      	b.n	8006b7a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006af6:	d142      	bne.n	8006b7e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006afc:	e03f      	b.n	8006b7e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b06:	d123      	bne.n	8006b50 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	d838      	bhi.n	8006b82 <DMA_CheckFifoParam+0xda>
 8006b10:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <DMA_CheckFifoParam+0x70>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006b29 	.word	0x08006b29
 8006b1c:	08006b2f 	.word	0x08006b2f
 8006b20:	08006b29 	.word	0x08006b29
 8006b24:	08006b41 	.word	0x08006b41
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]
        break;
 8006b2c:	e030      	b.n	8006b90 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d025      	beq.n	8006b86 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b3e:	e022      	b.n	8006b86 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b48:	d11f      	bne.n	8006b8a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b4e:	e01c      	b.n	8006b8a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d902      	bls.n	8006b5e <DMA_CheckFifoParam+0xb6>
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	d003      	beq.n	8006b64 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006b5c:	e018      	b.n	8006b90 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	73fb      	strb	r3, [r7, #15]
        break;
 8006b62:	e015      	b.n	8006b90 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00e      	beq.n	8006b8e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	73fb      	strb	r3, [r7, #15]
    break;
 8006b74:	e00b      	b.n	8006b8e <DMA_CheckFifoParam+0xe6>
        break;
 8006b76:	bf00      	nop
 8006b78:	e00a      	b.n	8006b90 <DMA_CheckFifoParam+0xe8>
        break;
 8006b7a:	bf00      	nop
 8006b7c:	e008      	b.n	8006b90 <DMA_CheckFifoParam+0xe8>
        break;
 8006b7e:	bf00      	nop
 8006b80:	e006      	b.n	8006b90 <DMA_CheckFifoParam+0xe8>
        break;
 8006b82:	bf00      	nop
 8006b84:	e004      	b.n	8006b90 <DMA_CheckFifoParam+0xe8>
        break;
 8006b86:	bf00      	nop
 8006b88:	e002      	b.n	8006b90 <DMA_CheckFifoParam+0xe8>
        break;
 8006b8a:	bf00      	nop
 8006b8c:	e000      	b.n	8006b90 <DMA_CheckFifoParam+0xe8>
    break;
 8006b8e:	bf00      	nop
    }
  }

  return status;
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop

08006ba0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a38      	ldr	r2, [pc, #224]	; (8006c94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d022      	beq.n	8006bfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a36      	ldr	r2, [pc, #216]	; (8006c98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d01d      	beq.n	8006bfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a35      	ldr	r2, [pc, #212]	; (8006c9c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d018      	beq.n	8006bfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a33      	ldr	r2, [pc, #204]	; (8006ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d013      	beq.n	8006bfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a32      	ldr	r2, [pc, #200]	; (8006ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d00e      	beq.n	8006bfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a30      	ldr	r2, [pc, #192]	; (8006ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d009      	beq.n	8006bfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a2f      	ldr	r2, [pc, #188]	; (8006cac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d004      	beq.n	8006bfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a2d      	ldr	r2, [pc, #180]	; (8006cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d101      	bne.n	8006c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e000      	b.n	8006c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006c02:	2300      	movs	r3, #0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01a      	beq.n	8006c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	3b08      	subs	r3, #8
 8006c10:	4a28      	ldr	r2, [pc, #160]	; (8006cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006c12:	fba2 2303 	umull	r2, r3, r2, r3
 8006c16:	091b      	lsrs	r3, r3, #4
 8006c18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	4b26      	ldr	r3, [pc, #152]	; (8006cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	461a      	mov	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a24      	ldr	r2, [pc, #144]	; (8006cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006c2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f003 031f 	and.w	r3, r3, #31
 8006c34:	2201      	movs	r2, #1
 8006c36:	409a      	lsls	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006c3c:	e024      	b.n	8006c88 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	3b10      	subs	r3, #16
 8006c46:	4a1e      	ldr	r2, [pc, #120]	; (8006cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006c48:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4c:	091b      	lsrs	r3, r3, #4
 8006c4e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	4a1c      	ldr	r2, [pc, #112]	; (8006cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d806      	bhi.n	8006c66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4a1b      	ldr	r2, [pc, #108]	; (8006cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d902      	bls.n	8006c66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3308      	adds	r3, #8
 8006c64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	4b18      	ldr	r3, [pc, #96]	; (8006ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	461a      	mov	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a16      	ldr	r2, [pc, #88]	; (8006cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006c78:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f003 031f 	and.w	r3, r3, #31
 8006c80:	2201      	movs	r2, #1
 8006c82:	409a      	lsls	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	58025408 	.word	0x58025408
 8006c98:	5802541c 	.word	0x5802541c
 8006c9c:	58025430 	.word	0x58025430
 8006ca0:	58025444 	.word	0x58025444
 8006ca4:	58025458 	.word	0x58025458
 8006ca8:	5802546c 	.word	0x5802546c
 8006cac:	58025480 	.word	0x58025480
 8006cb0:	58025494 	.word	0x58025494
 8006cb4:	cccccccd 	.word	0xcccccccd
 8006cb8:	16009600 	.word	0x16009600
 8006cbc:	58025880 	.word	0x58025880
 8006cc0:	aaaaaaab 	.word	0xaaaaaaab
 8006cc4:	400204b8 	.word	0x400204b8
 8006cc8:	4002040f 	.word	0x4002040f
 8006ccc:	10008200 	.word	0x10008200
 8006cd0:	40020880 	.word	0x40020880

08006cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d04a      	beq.n	8006d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2b08      	cmp	r3, #8
 8006cee:	d847      	bhi.n	8006d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a25      	ldr	r2, [pc, #148]	; (8006d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d022      	beq.n	8006d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a24      	ldr	r2, [pc, #144]	; (8006d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d01d      	beq.n	8006d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a22      	ldr	r2, [pc, #136]	; (8006d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d018      	beq.n	8006d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a21      	ldr	r2, [pc, #132]	; (8006d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d013      	beq.n	8006d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a1f      	ldr	r2, [pc, #124]	; (8006d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00e      	beq.n	8006d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a1e      	ldr	r2, [pc, #120]	; (8006da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d009      	beq.n	8006d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a1c      	ldr	r2, [pc, #112]	; (8006da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d004      	beq.n	8006d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a1b      	ldr	r2, [pc, #108]	; (8006da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d101      	bne.n	8006d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006d40:	2301      	movs	r3, #1
 8006d42:	e000      	b.n	8006d46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006d44:	2300      	movs	r3, #0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	4b17      	ldr	r3, [pc, #92]	; (8006dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006d4e:	4413      	add	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	461a      	mov	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a15      	ldr	r2, [pc, #84]	; (8006db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006d5c:	671a      	str	r2, [r3, #112]	; 0x70
 8006d5e:	e009      	b.n	8006d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	4b14      	ldr	r3, [pc, #80]	; (8006db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	461a      	mov	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a11      	ldr	r2, [pc, #68]	; (8006db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006d72:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	2201      	movs	r2, #1
 8006d7a:	409a      	lsls	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006d80:	bf00      	nop
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	58025408 	.word	0x58025408
 8006d90:	5802541c 	.word	0x5802541c
 8006d94:	58025430 	.word	0x58025430
 8006d98:	58025444 	.word	0x58025444
 8006d9c:	58025458 	.word	0x58025458
 8006da0:	5802546c 	.word	0x5802546c
 8006da4:	58025480 	.word	0x58025480
 8006da8:	58025494 	.word	0x58025494
 8006dac:	1600963f 	.word	0x1600963f
 8006db0:	58025940 	.word	0x58025940
 8006db4:	1000823f 	.word	0x1000823f
 8006db8:	40020940 	.word	0x40020940

08006dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b089      	sub	sp, #36	; 0x24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006dca:	4b89      	ldr	r3, [pc, #548]	; (8006ff0 <HAL_GPIO_Init+0x234>)
 8006dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006dce:	e194      	b.n	80070fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ddc:	4013      	ands	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 8186 	beq.w	80070f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f003 0303 	and.w	r3, r3, #3
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d005      	beq.n	8006e00 <HAL_GPIO_Init+0x44>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f003 0303 	and.w	r3, r3, #3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d130      	bne.n	8006e62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e10:	43db      	mvns	r3, r3
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	4013      	ands	r3, r2
 8006e16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	fa02 f303 	lsl.w	r3, r2, r3
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e36:	2201      	movs	r2, #1
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3e:	43db      	mvns	r3, r3
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	4013      	ands	r3, r2
 8006e44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	091b      	lsrs	r3, r3, #4
 8006e4c:	f003 0201 	and.w	r2, r3, #1
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	fa02 f303 	lsl.w	r3, r2, r3
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d017      	beq.n	8006e9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	2203      	movs	r2, #3
 8006e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7e:	43db      	mvns	r3, r3
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	4013      	ands	r3, r2
 8006e84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	689a      	ldr	r2, [r3, #8]
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d123      	bne.n	8006ef2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	08da      	lsrs	r2, r3, #3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3208      	adds	r2, #8
 8006eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f003 0307 	and.w	r3, r3, #7
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	220f      	movs	r2, #15
 8006ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec6:	43db      	mvns	r3, r3
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	4013      	ands	r3, r2
 8006ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	691a      	ldr	r2, [r3, #16]
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	fa02 f303 	lsl.w	r3, r2, r3
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	08da      	lsrs	r2, r3, #3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3208      	adds	r2, #8
 8006eec:	69b9      	ldr	r1, [r7, #24]
 8006eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	2203      	movs	r2, #3
 8006efe:	fa02 f303 	lsl.w	r3, r2, r3
 8006f02:	43db      	mvns	r3, r3
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	4013      	ands	r3, r2
 8006f08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f003 0203 	and.w	r2, r3, #3
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 80e0 	beq.w	80070f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f34:	4b2f      	ldr	r3, [pc, #188]	; (8006ff4 <HAL_GPIO_Init+0x238>)
 8006f36:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006f3a:	4a2e      	ldr	r2, [pc, #184]	; (8006ff4 <HAL_GPIO_Init+0x238>)
 8006f3c:	f043 0302 	orr.w	r3, r3, #2
 8006f40:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8006f44:	4b2b      	ldr	r3, [pc, #172]	; (8006ff4 <HAL_GPIO_Init+0x238>)
 8006f46:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f52:	4a29      	ldr	r2, [pc, #164]	; (8006ff8 <HAL_GPIO_Init+0x23c>)
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	089b      	lsrs	r3, r3, #2
 8006f58:	3302      	adds	r3, #2
 8006f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	220f      	movs	r2, #15
 8006f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6e:	43db      	mvns	r3, r3
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	4013      	ands	r3, r2
 8006f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a20      	ldr	r2, [pc, #128]	; (8006ffc <HAL_GPIO_Init+0x240>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d052      	beq.n	8007024 <HAL_GPIO_Init+0x268>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a1f      	ldr	r2, [pc, #124]	; (8007000 <HAL_GPIO_Init+0x244>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d031      	beq.n	8006fea <HAL_GPIO_Init+0x22e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a1e      	ldr	r2, [pc, #120]	; (8007004 <HAL_GPIO_Init+0x248>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d02b      	beq.n	8006fe6 <HAL_GPIO_Init+0x22a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a1d      	ldr	r2, [pc, #116]	; (8007008 <HAL_GPIO_Init+0x24c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d025      	beq.n	8006fe2 <HAL_GPIO_Init+0x226>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a1c      	ldr	r2, [pc, #112]	; (800700c <HAL_GPIO_Init+0x250>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d01f      	beq.n	8006fde <HAL_GPIO_Init+0x222>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a1b      	ldr	r2, [pc, #108]	; (8007010 <HAL_GPIO_Init+0x254>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d019      	beq.n	8006fda <HAL_GPIO_Init+0x21e>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a1a      	ldr	r2, [pc, #104]	; (8007014 <HAL_GPIO_Init+0x258>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d013      	beq.n	8006fd6 <HAL_GPIO_Init+0x21a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a19      	ldr	r2, [pc, #100]	; (8007018 <HAL_GPIO_Init+0x25c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d00d      	beq.n	8006fd2 <HAL_GPIO_Init+0x216>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a18      	ldr	r2, [pc, #96]	; (800701c <HAL_GPIO_Init+0x260>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d007      	beq.n	8006fce <HAL_GPIO_Init+0x212>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a17      	ldr	r2, [pc, #92]	; (8007020 <HAL_GPIO_Init+0x264>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d101      	bne.n	8006fca <HAL_GPIO_Init+0x20e>
 8006fc6:	2309      	movs	r3, #9
 8006fc8:	e02d      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fca:	230a      	movs	r3, #10
 8006fcc:	e02b      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fce:	2308      	movs	r3, #8
 8006fd0:	e029      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fd2:	2307      	movs	r3, #7
 8006fd4:	e027      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fd6:	2306      	movs	r3, #6
 8006fd8:	e025      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fda:	2305      	movs	r3, #5
 8006fdc:	e023      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fde:	2304      	movs	r3, #4
 8006fe0:	e021      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e01f      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	e01d      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e01b      	b.n	8007026 <HAL_GPIO_Init+0x26a>
 8006fee:	bf00      	nop
 8006ff0:	58000080 	.word	0x58000080
 8006ff4:	58024400 	.word	0x58024400
 8006ff8:	58000400 	.word	0x58000400
 8006ffc:	58020000 	.word	0x58020000
 8007000:	58020400 	.word	0x58020400
 8007004:	58020800 	.word	0x58020800
 8007008:	58020c00 	.word	0x58020c00
 800700c:	58021000 	.word	0x58021000
 8007010:	58021400 	.word	0x58021400
 8007014:	58021800 	.word	0x58021800
 8007018:	58021c00 	.word	0x58021c00
 800701c:	58022000 	.word	0x58022000
 8007020:	58022400 	.word	0x58022400
 8007024:	2300      	movs	r3, #0
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	f002 0203 	and.w	r2, r2, #3
 800702c:	0092      	lsls	r2, r2, #2
 800702e:	4093      	lsls	r3, r2
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	4313      	orrs	r3, r2
 8007034:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007036:	4938      	ldr	r1, [pc, #224]	; (8007118 <HAL_GPIO_Init+0x35c>)
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	089b      	lsrs	r3, r3, #2
 800703c:	3302      	adds	r3, #2
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	43db      	mvns	r3, r3
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	4013      	ands	r3, r2
 8007054:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	4313      	orrs	r3, r2
 8007068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800706a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	43db      	mvns	r3, r3
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	4013      	ands	r3, r2
 8007082:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	43db      	mvns	r3, r3
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	4013      	ands	r3, r2
 80070ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	43db      	mvns	r3, r3
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	4013      	ands	r3, r2
 80070d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	3301      	adds	r3, #1
 80070f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	fa22 f303 	lsr.w	r3, r2, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	f47f ae63 	bne.w	8006dd0 <HAL_GPIO_Init+0x14>
  }
}
 800710a:	bf00      	nop
 800710c:	bf00      	nop
 800710e:	3724      	adds	r7, #36	; 0x24
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	58000400 	.word	0x58000400

0800711c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	807b      	strh	r3, [r7, #2]
 8007128:	4613      	mov	r3, r2
 800712a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800712c:	787b      	ldrb	r3, [r7, #1]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007132:	887a      	ldrh	r2, [r7, #2]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007138:	e003      	b.n	8007142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800713a:	887b      	ldrh	r3, [r7, #2]
 800713c:	041a      	lsls	r2, r3, #16
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	619a      	str	r2, [r3, #24]
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800714e:	b480      	push	{r7}
 8007150:	b085      	sub	sp, #20
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	460b      	mov	r3, r1
 8007158:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007160:	887a      	ldrh	r2, [r7, #2]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4013      	ands	r3, r2
 8007166:	041a      	lsls	r2, r3, #16
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	43d9      	mvns	r1, r3
 800716c:	887b      	ldrh	r3, [r7, #2]
 800716e:	400b      	ands	r3, r1
 8007170:	431a      	orrs	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	619a      	str	r2, [r3, #24]
}
 8007176:	bf00      	nop
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b082      	sub	sp, #8
 8007186:	af00      	add	r7, sp, #0
 8007188:	4603      	mov	r3, r0
 800718a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800718c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007190:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007194:	88fb      	ldrh	r3, [r7, #6]
 8007196:	4013      	ands	r3, r2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d008      	beq.n	80071ae <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800719c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071a0:	88fb      	ldrh	r3, [r7, #6]
 80071a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7fa fcf3 	bl	8001b94 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80071ae:	bf00      	nop
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80071c0:	4b19      	ldr	r3, [pc, #100]	; (8007228 <HAL_PWREx_ConfigSupply+0x70>)
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f003 0304 	and.w	r3, r3, #4
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	d00a      	beq.n	80071e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80071cc:	4b16      	ldr	r3, [pc, #88]	; (8007228 <HAL_PWREx_ConfigSupply+0x70>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0307 	and.w	r3, r3, #7
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d001      	beq.n	80071de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e01f      	b.n	800721e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	e01d      	b.n	800721e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80071e2:	4b11      	ldr	r3, [pc, #68]	; (8007228 <HAL_PWREx_ConfigSupply+0x70>)
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f023 0207 	bic.w	r2, r3, #7
 80071ea:	490f      	ldr	r1, [pc, #60]	; (8007228 <HAL_PWREx_ConfigSupply+0x70>)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80071f2:	f7fc fd85 	bl	8003d00 <HAL_GetTick>
 80071f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80071f8:	e009      	b.n	800720e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80071fa:	f7fc fd81 	bl	8003d00 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007208:	d901      	bls.n	800720e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e007      	b.n	800721e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800720e:	4b06      	ldr	r3, [pc, #24]	; (8007228 <HAL_PWREx_ConfigSupply+0x70>)
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800721a:	d1ee      	bne.n	80071fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	58024800 	.word	0x58024800

0800722c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08c      	sub	sp, #48	; 0x30
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e3f6      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 80b5 	beq.w	80073b6 <HAL_RCC_OscConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800724c:	4b96      	ldr	r3, [pc, #600]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007254:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007256:	4b94      	ldr	r3, [pc, #592]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 8007258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725e:	2b10      	cmp	r3, #16
 8007260:	d007      	beq.n	8007272 <HAL_RCC_OscConfig+0x46>
 8007262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007264:	2b18      	cmp	r3, #24
 8007266:	d112      	bne.n	800728e <HAL_RCC_OscConfig+0x62>
 8007268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d10d      	bne.n	800728e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007272:	4b8d      	ldr	r3, [pc, #564]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 809a 	beq.w	80073b4 <HAL_RCC_OscConfig+0x188>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	f040 8095 	bne.w	80073b4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e3ce      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007296:	d106      	bne.n	80072a6 <HAL_RCC_OscConfig+0x7a>
 8007298:	4b83      	ldr	r3, [pc, #524]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a82      	ldr	r2, [pc, #520]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 800729e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	e058      	b.n	8007358 <HAL_RCC_OscConfig+0x12c>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d112      	bne.n	80072d4 <HAL_RCC_OscConfig+0xa8>
 80072ae:	4b7e      	ldr	r3, [pc, #504]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a7d      	ldr	r2, [pc, #500]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80072b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072b8:	6013      	str	r3, [r2, #0]
 80072ba:	4b7b      	ldr	r3, [pc, #492]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a7a      	ldr	r2, [pc, #488]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80072c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	4b78      	ldr	r3, [pc, #480]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a77      	ldr	r2, [pc, #476]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80072cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	e041      	b.n	8007358 <HAL_RCC_OscConfig+0x12c>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072dc:	d112      	bne.n	8007304 <HAL_RCC_OscConfig+0xd8>
 80072de:	4b72      	ldr	r3, [pc, #456]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a71      	ldr	r2, [pc, #452]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80072e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	4b6f      	ldr	r3, [pc, #444]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a6e      	ldr	r2, [pc, #440]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80072f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	4b6c      	ldr	r3, [pc, #432]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a6b      	ldr	r2, [pc, #428]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80072fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	e029      	b.n	8007358 <HAL_RCC_OscConfig+0x12c>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800730c:	d112      	bne.n	8007334 <HAL_RCC_OscConfig+0x108>
 800730e:	4b66      	ldr	r3, [pc, #408]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a65      	ldr	r2, [pc, #404]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 8007314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	4b63      	ldr	r3, [pc, #396]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a62      	ldr	r2, [pc, #392]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 8007320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007324:	6013      	str	r3, [r2, #0]
 8007326:	4b60      	ldr	r3, [pc, #384]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a5f      	ldr	r2, [pc, #380]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 800732c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	e011      	b.n	8007358 <HAL_RCC_OscConfig+0x12c>
 8007334:	4b5c      	ldr	r3, [pc, #368]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a5b      	ldr	r2, [pc, #364]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 800733a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	4b59      	ldr	r3, [pc, #356]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a58      	ldr	r2, [pc, #352]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 8007346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	4b56      	ldr	r3, [pc, #344]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a55      	ldr	r2, [pc, #340]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 8007352:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d014      	beq.n	800738a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007360:	f7fc fcce 	bl	8003d00 <HAL_GetTick>
 8007364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007366:	e009      	b.n	800737c <HAL_RCC_OscConfig+0x150>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007368:	f7fc fcca 	bl	8003d00 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007376:	d901      	bls.n	800737c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e357      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800737c:	4b4a      	ldr	r3, [pc, #296]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0ef      	beq.n	8007368 <HAL_RCC_OscConfig+0x13c>
 8007388:	e015      	b.n	80073b6 <HAL_RCC_OscConfig+0x18a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800738a:	f7fc fcb9 	bl	8003d00 <HAL_GetTick>
 800738e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007390:	e009      	b.n	80073a6 <HAL_RCC_OscConfig+0x17a>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007392:	f7fc fcb5 	bl	8003d00 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e342      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073a6:	4b40      	ldr	r3, [pc, #256]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1ef      	bne.n	8007392 <HAL_RCC_OscConfig+0x166>
 80073b2:	e000      	b.n	80073b6 <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 808d 	beq.w	80074de <HAL_RCC_OscConfig+0x2b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073c4:	4b38      	ldr	r3, [pc, #224]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073ce:	4b36      	ldr	r3, [pc, #216]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80073d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d007      	beq.n	80073ea <HAL_RCC_OscConfig+0x1be>
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	2b18      	cmp	r3, #24
 80073de:	d137      	bne.n	8007450 <HAL_RCC_OscConfig+0x224>
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d132      	bne.n	8007450 <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073ea:	4b2f      	ldr	r3, [pc, #188]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <HAL_RCC_OscConfig+0x1d6>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e314      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007402:	4b29      	ldr	r3, [pc, #164]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f023 0219 	bic.w	r2, r3, #25
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	4926      	ldr	r1, [pc, #152]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 8007410:	4313      	orrs	r3, r2
 8007412:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007414:	f7fc fc74 	bl	8003d00 <HAL_GetTick>
 8007418:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800741a:	e008      	b.n	800742e <HAL_RCC_OscConfig+0x202>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800741c:	f7fc fc70 	bl	8003d00 <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	2b02      	cmp	r3, #2
 8007428:	d901      	bls.n	800742e <HAL_RCC_OscConfig+0x202>
            {
              return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e2fe      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800742e:	4b1e      	ldr	r3, [pc, #120]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0304 	and.w	r3, r3, #4
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0f0      	beq.n	800741c <HAL_RCC_OscConfig+0x1f0>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800743a:	4b1b      	ldr	r3, [pc, #108]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	061b      	lsls	r3, r3, #24
 8007448:	4917      	ldr	r1, [pc, #92]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 800744a:	4313      	orrs	r3, r2
 800744c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800744e:	e046      	b.n	80074de <HAL_RCC_OscConfig+0x2b2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d029      	beq.n	80074ac <HAL_RCC_OscConfig+0x280>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007458:	4b13      	ldr	r3, [pc, #76]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f023 0219 	bic.w	r2, r3, #25
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	4910      	ldr	r1, [pc, #64]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 8007466:	4313      	orrs	r3, r2
 8007468:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800746a:	f7fc fc49 	bl	8003d00 <HAL_GetTick>
 800746e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007470:	e008      	b.n	8007484 <HAL_RCC_OscConfig+0x258>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007472:	f7fc fc45 	bl	8003d00 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	2b02      	cmp	r3, #2
 800747e:	d901      	bls.n	8007484 <HAL_RCC_OscConfig+0x258>
          {
            return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e2d3      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007484:	4b08      	ldr	r3, [pc, #32]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0f0      	beq.n	8007472 <HAL_RCC_OscConfig+0x246>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007490:	4b05      	ldr	r3, [pc, #20]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	061b      	lsls	r3, r3, #24
 800749e:	4902      	ldr	r1, [pc, #8]	; (80074a8 <HAL_RCC_OscConfig+0x27c>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	604b      	str	r3, [r1, #4]
 80074a4:	e01b      	b.n	80074de <HAL_RCC_OscConfig+0x2b2>
 80074a6:	bf00      	nop
 80074a8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074ac:	4b97      	ldr	r3, [pc, #604]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a96      	ldr	r2, [pc, #600]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 80074b2:	f023 0301 	bic.w	r3, r3, #1
 80074b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b8:	f7fc fc22 	bl	8003d00 <HAL_GetTick>
 80074bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80074be:	e008      	b.n	80074d2 <HAL_RCC_OscConfig+0x2a6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074c0:	f7fc fc1e 	bl	8003d00 <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d901      	bls.n	80074d2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e2ac      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80074d2:	4b8e      	ldr	r3, [pc, #568]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0304 	and.w	r3, r3, #4
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1f0      	bne.n	80074c0 <HAL_RCC_OscConfig+0x294>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0310 	and.w	r3, r3, #16
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d06a      	beq.n	80075c0 <HAL_RCC_OscConfig+0x394>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074ea:	4b88      	ldr	r3, [pc, #544]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80074f4:	4b85      	ldr	r3, [pc, #532]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 80074f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d007      	beq.n	8007510 <HAL_RCC_OscConfig+0x2e4>
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	2b18      	cmp	r3, #24
 8007504:	d11b      	bne.n	800753e <HAL_RCC_OscConfig+0x312>
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f003 0303 	and.w	r3, r3, #3
 800750c:	2b01      	cmp	r3, #1
 800750e:	d116      	bne.n	800753e <HAL_RCC_OscConfig+0x312>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007510:	4b7e      	ldr	r3, [pc, #504]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_RCC_OscConfig+0x2fc>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	2b80      	cmp	r3, #128	; 0x80
 8007522:	d001      	beq.n	8007528 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e281      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007528:	4b78      	ldr	r3, [pc, #480]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	061b      	lsls	r3, r3, #24
 8007536:	4975      	ldr	r1, [pc, #468]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 8007538:	4313      	orrs	r3, r2
 800753a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800753c:	e040      	b.n	80075c0 <HAL_RCC_OscConfig+0x394>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d023      	beq.n	800758e <HAL_RCC_OscConfig+0x362>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007546:	4b71      	ldr	r3, [pc, #452]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a70      	ldr	r2, [pc, #448]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 800754c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007552:	f7fc fbd5 	bl	8003d00 <HAL_GetTick>
 8007556:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007558:	e008      	b.n	800756c <HAL_RCC_OscConfig+0x340>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800755a:	f7fc fbd1 	bl	8003d00 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	2b02      	cmp	r3, #2
 8007566:	d901      	bls.n	800756c <HAL_RCC_OscConfig+0x340>
          {
            return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e25f      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800756c:	4b67      	ldr	r3, [pc, #412]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007574:	2b00      	cmp	r3, #0
 8007576:	d0f0      	beq.n	800755a <HAL_RCC_OscConfig+0x32e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007578:	4b64      	ldr	r3, [pc, #400]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	061b      	lsls	r3, r3, #24
 8007586:	4961      	ldr	r1, [pc, #388]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 8007588:	4313      	orrs	r3, r2
 800758a:	60cb      	str	r3, [r1, #12]
 800758c:	e018      	b.n	80075c0 <HAL_RCC_OscConfig+0x394>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800758e:	4b5f      	ldr	r3, [pc, #380]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a5e      	ldr	r2, [pc, #376]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 8007594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759a:	f7fc fbb1 	bl	8003d00 <HAL_GetTick>
 800759e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075a0:	e008      	b.n	80075b4 <HAL_RCC_OscConfig+0x388>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80075a2:	f7fc fbad 	bl	8003d00 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x388>
          {
            return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e23b      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075b4:	4b55      	ldr	r3, [pc, #340]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1f0      	bne.n	80075a2 <HAL_RCC_OscConfig+0x376>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0308 	and.w	r3, r3, #8
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d036      	beq.n	800763a <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d019      	beq.n	8007608 <HAL_RCC_OscConfig+0x3dc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075d4:	4b4d      	ldr	r3, [pc, #308]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 80075d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075d8:	4a4c      	ldr	r2, [pc, #304]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 80075da:	f043 0301 	orr.w	r3, r3, #1
 80075de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075e0:	f7fc fb8e 	bl	8003d00 <HAL_GetTick>
 80075e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075e6:	e008      	b.n	80075fa <HAL_RCC_OscConfig+0x3ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075e8:	f7fc fb8a 	bl	8003d00 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d901      	bls.n	80075fa <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e218      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075fa:	4b44      	ldr	r3, [pc, #272]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 80075fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0f0      	beq.n	80075e8 <HAL_RCC_OscConfig+0x3bc>
 8007606:	e018      	b.n	800763a <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007608:	4b40      	ldr	r3, [pc, #256]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 800760a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800760c:	4a3f      	ldr	r2, [pc, #252]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 800760e:	f023 0301 	bic.w	r3, r3, #1
 8007612:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007614:	f7fc fb74 	bl	8003d00 <HAL_GetTick>
 8007618:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800761a:	e008      	b.n	800762e <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800761c:	f7fc fb70 	bl	8003d00 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b02      	cmp	r3, #2
 8007628:	d901      	bls.n	800762e <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e1fe      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800762e:	4b37      	ldr	r3, [pc, #220]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 8007630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1f0      	bne.n	800761c <HAL_RCC_OscConfig+0x3f0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	d036      	beq.n	80076b4 <HAL_RCC_OscConfig+0x488>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d019      	beq.n	8007682 <HAL_RCC_OscConfig+0x456>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800764e:	4b2f      	ldr	r3, [pc, #188]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a2e      	ldr	r2, [pc, #184]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 8007654:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007658:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800765a:	f7fc fb51 	bl	8003d00 <HAL_GetTick>
 800765e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007660:	e008      	b.n	8007674 <HAL_RCC_OscConfig+0x448>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007662:	f7fc fb4d 	bl	8003d00 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	2b02      	cmp	r3, #2
 800766e:	d901      	bls.n	8007674 <HAL_RCC_OscConfig+0x448>
        {
          return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e1db      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007674:	4b25      	ldr	r3, [pc, #148]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0f0      	beq.n	8007662 <HAL_RCC_OscConfig+0x436>
 8007680:	e018      	b.n	80076b4 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007682:	4b22      	ldr	r3, [pc, #136]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a21      	ldr	r2, [pc, #132]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 8007688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800768c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800768e:	f7fc fb37 	bl	8003d00 <HAL_GetTick>
 8007692:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007694:	e008      	b.n	80076a8 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007696:	f7fc fb33 	bl	8003d00 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d901      	bls.n	80076a8 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e1c1      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076a8:	4b18      	ldr	r3, [pc, #96]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1f0      	bne.n	8007696 <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 80af 	beq.w	8007820 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80076c2:	4b13      	ldr	r3, [pc, #76]	; (8007710 <HAL_RCC_OscConfig+0x4e4>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a12      	ldr	r2, [pc, #72]	; (8007710 <HAL_RCC_OscConfig+0x4e4>)
 80076c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076ce:	f7fc fb17 	bl	8003d00 <HAL_GetTick>
 80076d2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076d4:	e008      	b.n	80076e8 <HAL_RCC_OscConfig+0x4bc>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80076d6:	f7fc fb13 	bl	8003d00 <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	2b64      	cmp	r3, #100	; 0x64
 80076e2:	d901      	bls.n	80076e8 <HAL_RCC_OscConfig+0x4bc>
      {
        return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e1a1      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076e8:	4b09      	ldr	r3, [pc, #36]	; (8007710 <HAL_RCC_OscConfig+0x4e4>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d0f0      	beq.n	80076d6 <HAL_RCC_OscConfig+0x4aa>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d10b      	bne.n	8007714 <HAL_RCC_OscConfig+0x4e8>
 80076fc:	4b03      	ldr	r3, [pc, #12]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 80076fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007700:	4a02      	ldr	r2, [pc, #8]	; (800770c <HAL_RCC_OscConfig+0x4e0>)
 8007702:	f043 0301 	orr.w	r3, r3, #1
 8007706:	6713      	str	r3, [r2, #112]	; 0x70
 8007708:	e05b      	b.n	80077c2 <HAL_RCC_OscConfig+0x596>
 800770a:	bf00      	nop
 800770c:	58024400 	.word	0x58024400
 8007710:	58024800 	.word	0x58024800
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d112      	bne.n	8007742 <HAL_RCC_OscConfig+0x516>
 800771c:	4b9d      	ldr	r3, [pc, #628]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800771e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007720:	4a9c      	ldr	r2, [pc, #624]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007722:	f023 0301 	bic.w	r3, r3, #1
 8007726:	6713      	str	r3, [r2, #112]	; 0x70
 8007728:	4b9a      	ldr	r3, [pc, #616]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800772a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800772c:	4a99      	ldr	r2, [pc, #612]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800772e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007732:	6713      	str	r3, [r2, #112]	; 0x70
 8007734:	4b97      	ldr	r3, [pc, #604]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007738:	4a96      	ldr	r2, [pc, #600]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800773a:	f023 0304 	bic.w	r3, r3, #4
 800773e:	6713      	str	r3, [r2, #112]	; 0x70
 8007740:	e03f      	b.n	80077c2 <HAL_RCC_OscConfig+0x596>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	2b05      	cmp	r3, #5
 8007748:	d112      	bne.n	8007770 <HAL_RCC_OscConfig+0x544>
 800774a:	4b92      	ldr	r3, [pc, #584]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800774c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800774e:	4a91      	ldr	r2, [pc, #580]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007750:	f043 0304 	orr.w	r3, r3, #4
 8007754:	6713      	str	r3, [r2, #112]	; 0x70
 8007756:	4b8f      	ldr	r3, [pc, #572]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800775a:	4a8e      	ldr	r2, [pc, #568]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800775c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007760:	6713      	str	r3, [r2, #112]	; 0x70
 8007762:	4b8c      	ldr	r3, [pc, #560]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007766:	4a8b      	ldr	r2, [pc, #556]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007768:	f043 0301 	orr.w	r3, r3, #1
 800776c:	6713      	str	r3, [r2, #112]	; 0x70
 800776e:	e028      	b.n	80077c2 <HAL_RCC_OscConfig+0x596>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	2b85      	cmp	r3, #133	; 0x85
 8007776:	d112      	bne.n	800779e <HAL_RCC_OscConfig+0x572>
 8007778:	4b86      	ldr	r3, [pc, #536]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800777a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777c:	4a85      	ldr	r2, [pc, #532]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800777e:	f043 0304 	orr.w	r3, r3, #4
 8007782:	6713      	str	r3, [r2, #112]	; 0x70
 8007784:	4b83      	ldr	r3, [pc, #524]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007788:	4a82      	ldr	r2, [pc, #520]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800778a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800778e:	6713      	str	r3, [r2, #112]	; 0x70
 8007790:	4b80      	ldr	r3, [pc, #512]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007794:	4a7f      	ldr	r2, [pc, #508]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007796:	f043 0301 	orr.w	r3, r3, #1
 800779a:	6713      	str	r3, [r2, #112]	; 0x70
 800779c:	e011      	b.n	80077c2 <HAL_RCC_OscConfig+0x596>
 800779e:	4b7d      	ldr	r3, [pc, #500]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 80077a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a2:	4a7c      	ldr	r2, [pc, #496]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 80077a4:	f023 0301 	bic.w	r3, r3, #1
 80077a8:	6713      	str	r3, [r2, #112]	; 0x70
 80077aa:	4b7a      	ldr	r3, [pc, #488]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 80077ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ae:	4a79      	ldr	r2, [pc, #484]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 80077b0:	f023 0304 	bic.w	r3, r3, #4
 80077b4:	6713      	str	r3, [r2, #112]	; 0x70
 80077b6:	4b77      	ldr	r3, [pc, #476]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 80077b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ba:	4a76      	ldr	r2, [pc, #472]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 80077bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d015      	beq.n	80077f6 <HAL_RCC_OscConfig+0x5ca>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ca:	f7fc fa99 	bl	8003d00 <HAL_GetTick>
 80077ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077d0:	e00a      	b.n	80077e8 <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077d2:	f7fc fa95 	bl	8003d00 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d901      	bls.n	80077e8 <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e121      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077e8:	4b6a      	ldr	r3, [pc, #424]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 80077ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ec:	f003 0302 	and.w	r3, r3, #2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d0ee      	beq.n	80077d2 <HAL_RCC_OscConfig+0x5a6>
 80077f4:	e014      	b.n	8007820 <HAL_RCC_OscConfig+0x5f4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f6:	f7fc fa83 	bl	8003d00 <HAL_GetTick>
 80077fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077fc:	e00a      	b.n	8007814 <HAL_RCC_OscConfig+0x5e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077fe:	f7fc fa7f 	bl	8003d00 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	f241 3288 	movw	r2, #5000	; 0x1388
 800780c:	4293      	cmp	r3, r2
 800780e:	d901      	bls.n	8007814 <HAL_RCC_OscConfig+0x5e8>
        {
          return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e10b      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007814:	4b5f      	ldr	r3, [pc, #380]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007818:	f003 0302 	and.w	r3, r3, #2
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1ee      	bne.n	80077fe <HAL_RCC_OscConfig+0x5d2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 8100 	beq.w	8007a2a <HAL_RCC_OscConfig+0x7fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800782a:	4b5a      	ldr	r3, [pc, #360]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007832:	2b18      	cmp	r3, #24
 8007834:	f000 80bb 	beq.w	80079ae <HAL_RCC_OscConfig+0x782>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	2b02      	cmp	r3, #2
 800783e:	f040 8095 	bne.w	800796c <HAL_RCC_OscConfig+0x740>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007842:	4b54      	ldr	r3, [pc, #336]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a53      	ldr	r2, [pc, #332]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007848:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800784c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800784e:	f7fc fa57 	bl	8003d00 <HAL_GetTick>
 8007852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007854:	e008      	b.n	8007868 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007856:	f7fc fa53 	bl	8003d00 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	2b02      	cmp	r3, #2
 8007862:	d901      	bls.n	8007868 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e0e1      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007868:	4b4a      	ldr	r3, [pc, #296]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1f0      	bne.n	8007856 <HAL_RCC_OscConfig+0x62a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007874:	4b47      	ldr	r3, [pc, #284]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007878:	4b47      	ldr	r3, [pc, #284]	; (8007998 <HAL_RCC_OscConfig+0x76c>)
 800787a:	4013      	ands	r3, r2
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007884:	0112      	lsls	r2, r2, #4
 8007886:	430a      	orrs	r2, r1
 8007888:	4942      	ldr	r1, [pc, #264]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800788a:	4313      	orrs	r3, r2
 800788c:	628b      	str	r3, [r1, #40]	; 0x28
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	3b01      	subs	r3, #1
 8007894:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800789c:	3b01      	subs	r3, #1
 800789e:	025b      	lsls	r3, r3, #9
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	431a      	orrs	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a8:	3b01      	subs	r3, #1
 80078aa:	041b      	lsls	r3, r3, #16
 80078ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b6:	3b01      	subs	r3, #1
 80078b8:	061b      	lsls	r3, r3, #24
 80078ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80078be:	4935      	ldr	r1, [pc, #212]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80078c4:	4b33      	ldr	r3, [pc, #204]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 80078c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c8:	4a32      	ldr	r2, [pc, #200]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 80078ca:	f023 0301 	bic.w	r3, r3, #1
 80078ce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80078d0:	4b30      	ldr	r3, [pc, #192]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 80078d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078d4:	4b31      	ldr	r3, [pc, #196]	; (800799c <HAL_RCC_OscConfig+0x770>)
 80078d6:	4013      	ands	r3, r2
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80078dc:	00d2      	lsls	r2, r2, #3
 80078de:	492d      	ldr	r1, [pc, #180]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80078e4:	4b2b      	ldr	r3, [pc, #172]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	f023 020c 	bic.w	r2, r3, #12
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f0:	4928      	ldr	r1, [pc, #160]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80078f6:	4b27      	ldr	r3, [pc, #156]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fa:	f023 0202 	bic.w	r2, r3, #2
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007902:	4924      	ldr	r1, [pc, #144]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007904:	4313      	orrs	r3, r2
 8007906:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007908:	4b22      	ldr	r3, [pc, #136]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790c:	4a21      	ldr	r2, [pc, #132]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800790e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007912:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007914:	4b1f      	ldr	r3, [pc, #124]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	4a1e      	ldr	r2, [pc, #120]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800791a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800791e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007920:	4b1c      	ldr	r3, [pc, #112]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	4a1b      	ldr	r2, [pc, #108]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007926:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800792a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800792c:	4b19      	ldr	r3, [pc, #100]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	4a18      	ldr	r2, [pc, #96]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007932:	f043 0301 	orr.w	r3, r3, #1
 8007936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007938:	4b16      	ldr	r3, [pc, #88]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a15      	ldr	r2, [pc, #84]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800793e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007944:	f7fc f9dc 	bl	8003d00 <HAL_GetTick>
 8007948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800794a:	e008      	b.n	800795e <HAL_RCC_OscConfig+0x732>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800794c:	f7fc f9d8 	bl	8003d00 <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d901      	bls.n	800795e <HAL_RCC_OscConfig+0x732>
          {
            return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e066      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800795e:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0f0      	beq.n	800794c <HAL_RCC_OscConfig+0x720>
 800796a:	e05e      	b.n	8007a2a <HAL_RCC_OscConfig+0x7fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800796c:	4b09      	ldr	r3, [pc, #36]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a08      	ldr	r2, [pc, #32]	; (8007994 <HAL_RCC_OscConfig+0x768>)
 8007972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007978:	f7fc f9c2 	bl	8003d00 <HAL_GetTick>
 800797c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800797e:	e00f      	b.n	80079a0 <HAL_RCC_OscConfig+0x774>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007980:	f7fc f9be 	bl	8003d00 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d908      	bls.n	80079a0 <HAL_RCC_OscConfig+0x774>
          {
            return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e04c      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
 8007992:	bf00      	nop
 8007994:	58024400 	.word	0x58024400
 8007998:	fffffc0c 	.word	0xfffffc0c
 800799c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80079a0:	4b24      	ldr	r3, [pc, #144]	; (8007a34 <HAL_RCC_OscConfig+0x808>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e9      	bne.n	8007980 <HAL_RCC_OscConfig+0x754>
 80079ac:	e03d      	b.n	8007a2a <HAL_RCC_OscConfig+0x7fe>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80079ae:	4b21      	ldr	r3, [pc, #132]	; (8007a34 <HAL_RCC_OscConfig+0x808>)
 80079b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80079b4:	4b1f      	ldr	r3, [pc, #124]	; (8007a34 <HAL_RCC_OscConfig+0x808>)
 80079b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d031      	beq.n	8007a26 <HAL_RCC_OscConfig+0x7fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f003 0203 	and.w	r2, r3, #3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d12a      	bne.n	8007a26 <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	091b      	lsrs	r3, r3, #4
 80079d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079dc:	429a      	cmp	r2, r3
 80079de:	d122      	bne.n	8007a26 <HAL_RCC_OscConfig+0x7fa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d11a      	bne.n	8007a26 <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	0a5b      	lsrs	r3, r3, #9
 80079f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d111      	bne.n	8007a26 <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	0c1b      	lsrs	r3, r3, #16
 8007a06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d108      	bne.n	8007a26 <HAL_RCC_OscConfig+0x7fa>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	0e1b      	lsrs	r3, r3, #24
 8007a18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a20:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d001      	beq.n	8007a2a <HAL_RCC_OscConfig+0x7fe>
      {
        return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e000      	b.n	8007a2c <HAL_RCC_OscConfig+0x800>
      }
    }
  }
  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3730      	adds	r7, #48	; 0x30
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	58024400 	.word	0x58024400

08007a38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e19c      	b.n	8007d86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a4c:	4b8a      	ldr	r3, [pc, #552]	; (8007c78 <HAL_RCC_ClockConfig+0x240>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 030f 	and.w	r3, r3, #15
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d910      	bls.n	8007a7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a5a:	4b87      	ldr	r3, [pc, #540]	; (8007c78 <HAL_RCC_ClockConfig+0x240>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f023 020f 	bic.w	r2, r3, #15
 8007a62:	4985      	ldr	r1, [pc, #532]	; (8007c78 <HAL_RCC_ClockConfig+0x240>)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a6a:	4b83      	ldr	r3, [pc, #524]	; (8007c78 <HAL_RCC_ClockConfig+0x240>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 030f 	and.w	r3, r3, #15
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d001      	beq.n	8007a7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e184      	b.n	8007d86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0304 	and.w	r3, r3, #4
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d010      	beq.n	8007aaa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691a      	ldr	r2, [r3, #16]
 8007a8c:	4b7b      	ldr	r3, [pc, #492]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d908      	bls.n	8007aaa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a98:	4b78      	ldr	r3, [pc, #480]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	4975      	ldr	r1, [pc, #468]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0308 	and.w	r3, r3, #8
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d010      	beq.n	8007ad8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	695a      	ldr	r2, [r3, #20]
 8007aba:	4b70      	ldr	r3, [pc, #448]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d908      	bls.n	8007ad8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ac6:	4b6d      	ldr	r3, [pc, #436]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	496a      	ldr	r1, [pc, #424]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0310 	and.w	r3, r3, #16
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d010      	beq.n	8007b06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699a      	ldr	r2, [r3, #24]
 8007ae8:	4b64      	ldr	r3, [pc, #400]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d908      	bls.n	8007b06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007af4:	4b61      	ldr	r3, [pc, #388]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	495e      	ldr	r1, [pc, #376]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d010      	beq.n	8007b34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	69da      	ldr	r2, [r3, #28]
 8007b16:	4b59      	ldr	r3, [pc, #356]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d908      	bls.n	8007b34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007b22:	4b56      	ldr	r3, [pc, #344]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	4953      	ldr	r1, [pc, #332]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0302 	and.w	r3, r3, #2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d010      	beq.n	8007b62 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	4b4d      	ldr	r3, [pc, #308]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	f003 030f 	and.w	r3, r3, #15
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d908      	bls.n	8007b62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b50:	4b4a      	ldr	r3, [pc, #296]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	f023 020f 	bic.w	r2, r3, #15
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	4947      	ldr	r1, [pc, #284]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d055      	beq.n	8007c1a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007b6e:	4b43      	ldr	r3, [pc, #268]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	4940      	ldr	r1, [pc, #256]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d107      	bne.n	8007b98 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b88:	4b3c      	ldr	r3, [pc, #240]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d121      	bne.n	8007bd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e0f6      	b.n	8007d86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d107      	bne.n	8007bb0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ba0:	4b36      	ldr	r3, [pc, #216]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d115      	bne.n	8007bd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e0ea      	b.n	8007d86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d107      	bne.n	8007bc8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007bb8:	4b30      	ldr	r3, [pc, #192]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d109      	bne.n	8007bd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e0de      	b.n	8007d86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bc8:	4b2c      	ldr	r3, [pc, #176]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e0d6      	b.n	8007d86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007bd8:	4b28      	ldr	r3, [pc, #160]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	f023 0207 	bic.w	r2, r3, #7
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	4925      	ldr	r1, [pc, #148]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bea:	f7fc f889 	bl	8003d00 <HAL_GetTick>
 8007bee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bf0:	e00a      	b.n	8007c08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bf2:	f7fc f885 	bl	8003d00 <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d901      	bls.n	8007c08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e0be      	b.n	8007d86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c08:	4b1c      	ldr	r3, [pc, #112]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	00db      	lsls	r3, r3, #3
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d1eb      	bne.n	8007bf2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0302 	and.w	r3, r3, #2
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d010      	beq.n	8007c48 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	4b14      	ldr	r3, [pc, #80]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	f003 030f 	and.w	r3, r3, #15
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d208      	bcs.n	8007c48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c36:	4b11      	ldr	r3, [pc, #68]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	f023 020f 	bic.w	r2, r3, #15
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	490e      	ldr	r1, [pc, #56]	; (8007c7c <HAL_RCC_ClockConfig+0x244>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c48:	4b0b      	ldr	r3, [pc, #44]	; (8007c78 <HAL_RCC_ClockConfig+0x240>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 030f 	and.w	r3, r3, #15
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d214      	bcs.n	8007c80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c56:	4b08      	ldr	r3, [pc, #32]	; (8007c78 <HAL_RCC_ClockConfig+0x240>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f023 020f 	bic.w	r2, r3, #15
 8007c5e:	4906      	ldr	r1, [pc, #24]	; (8007c78 <HAL_RCC_ClockConfig+0x240>)
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c66:	4b04      	ldr	r3, [pc, #16]	; (8007c78 <HAL_RCC_ClockConfig+0x240>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 030f 	and.w	r3, r3, #15
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d005      	beq.n	8007c80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e086      	b.n	8007d86 <HAL_RCC_ClockConfig+0x34e>
 8007c78:	52002000 	.word	0x52002000
 8007c7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d010      	beq.n	8007cae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	691a      	ldr	r2, [r3, #16]
 8007c90:	4b3f      	ldr	r3, [pc, #252]	; (8007d90 <HAL_RCC_ClockConfig+0x358>)
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d208      	bcs.n	8007cae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c9c:	4b3c      	ldr	r3, [pc, #240]	; (8007d90 <HAL_RCC_ClockConfig+0x358>)
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	4939      	ldr	r1, [pc, #228]	; (8007d90 <HAL_RCC_ClockConfig+0x358>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0308 	and.w	r3, r3, #8
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d010      	beq.n	8007cdc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	695a      	ldr	r2, [r3, #20]
 8007cbe:	4b34      	ldr	r3, [pc, #208]	; (8007d90 <HAL_RCC_ClockConfig+0x358>)
 8007cc0:	69db      	ldr	r3, [r3, #28]
 8007cc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d208      	bcs.n	8007cdc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cca:	4b31      	ldr	r3, [pc, #196]	; (8007d90 <HAL_RCC_ClockConfig+0x358>)
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	492e      	ldr	r1, [pc, #184]	; (8007d90 <HAL_RCC_ClockConfig+0x358>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0310 	and.w	r3, r3, #16
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d010      	beq.n	8007d0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	699a      	ldr	r2, [r3, #24]
 8007cec:	4b28      	ldr	r3, [pc, #160]	; (8007d90 <HAL_RCC_ClockConfig+0x358>)
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d208      	bcs.n	8007d0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007cf8:	4b25      	ldr	r3, [pc, #148]	; (8007d90 <HAL_RCC_ClockConfig+0x358>)
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	4922      	ldr	r1, [pc, #136]	; (8007d90 <HAL_RCC_ClockConfig+0x358>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0320 	and.w	r3, r3, #32
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d010      	beq.n	8007d38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	69da      	ldr	r2, [r3, #28]
 8007d1a:	4b1d      	ldr	r3, [pc, #116]	; (8007d90 <HAL_RCC_ClockConfig+0x358>)
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d208      	bcs.n	8007d38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007d26:	4b1a      	ldr	r3, [pc, #104]	; (8007d90 <HAL_RCC_ClockConfig+0x358>)
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	4917      	ldr	r1, [pc, #92]	; (8007d90 <HAL_RCC_ClockConfig+0x358>)
 8007d34:	4313      	orrs	r3, r2
 8007d36:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007d38:	f000 f834 	bl	8007da4 <HAL_RCC_GetSysClockFreq>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	4b14      	ldr	r3, [pc, #80]	; (8007d90 <HAL_RCC_ClockConfig+0x358>)
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	0a1b      	lsrs	r3, r3, #8
 8007d44:	f003 030f 	and.w	r3, r3, #15
 8007d48:	4912      	ldr	r1, [pc, #72]	; (8007d94 <HAL_RCC_ClockConfig+0x35c>)
 8007d4a:	5ccb      	ldrb	r3, [r1, r3]
 8007d4c:	f003 031f 	and.w	r3, r3, #31
 8007d50:	fa22 f303 	lsr.w	r3, r2, r3
 8007d54:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007d56:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <HAL_RCC_ClockConfig+0x358>)
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	f003 030f 	and.w	r3, r3, #15
 8007d5e:	4a0d      	ldr	r2, [pc, #52]	; (8007d94 <HAL_RCC_ClockConfig+0x35c>)
 8007d60:	5cd3      	ldrb	r3, [r2, r3]
 8007d62:	f003 031f 	and.w	r3, r3, #31
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	fa22 f303 	lsr.w	r3, r2, r3
 8007d6c:	4a0a      	ldr	r2, [pc, #40]	; (8007d98 <HAL_RCC_ClockConfig+0x360>)
 8007d6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d70:	4a0a      	ldr	r2, [pc, #40]	; (8007d9c <HAL_RCC_ClockConfig+0x364>)
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007d76:	4b0a      	ldr	r3, [pc, #40]	; (8007da0 <HAL_RCC_ClockConfig+0x368>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fb ff76 	bl	8003c6c <HAL_InitTick>
 8007d80:	4603      	mov	r3, r0
 8007d82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	58024400 	.word	0x58024400
 8007d94:	08017d08 	.word	0x08017d08
 8007d98:	24000010 	.word	0x24000010
 8007d9c:	2400000c 	.word	0x2400000c
 8007da0:	24000014 	.word	0x24000014

08007da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b089      	sub	sp, #36	; 0x24
 8007da8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007daa:	4bb3      	ldr	r3, [pc, #716]	; (8008078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007db2:	2b18      	cmp	r3, #24
 8007db4:	f200 8155 	bhi.w	8008062 <HAL_RCC_GetSysClockFreq+0x2be>
 8007db8:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbe:	bf00      	nop
 8007dc0:	08007e25 	.word	0x08007e25
 8007dc4:	08008063 	.word	0x08008063
 8007dc8:	08008063 	.word	0x08008063
 8007dcc:	08008063 	.word	0x08008063
 8007dd0:	08008063 	.word	0x08008063
 8007dd4:	08008063 	.word	0x08008063
 8007dd8:	08008063 	.word	0x08008063
 8007ddc:	08008063 	.word	0x08008063
 8007de0:	08007e4b 	.word	0x08007e4b
 8007de4:	08008063 	.word	0x08008063
 8007de8:	08008063 	.word	0x08008063
 8007dec:	08008063 	.word	0x08008063
 8007df0:	08008063 	.word	0x08008063
 8007df4:	08008063 	.word	0x08008063
 8007df8:	08008063 	.word	0x08008063
 8007dfc:	08008063 	.word	0x08008063
 8007e00:	08007e51 	.word	0x08007e51
 8007e04:	08008063 	.word	0x08008063
 8007e08:	08008063 	.word	0x08008063
 8007e0c:	08008063 	.word	0x08008063
 8007e10:	08008063 	.word	0x08008063
 8007e14:	08008063 	.word	0x08008063
 8007e18:	08008063 	.word	0x08008063
 8007e1c:	08008063 	.word	0x08008063
 8007e20:	08007e57 	.word	0x08007e57
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e24:	4b94      	ldr	r3, [pc, #592]	; (8008078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d009      	beq.n	8007e44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e30:	4b91      	ldr	r3, [pc, #580]	; (8008078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	08db      	lsrs	r3, r3, #3
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	4a90      	ldr	r2, [pc, #576]	; (800807c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007e42:	e111      	b.n	8008068 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007e44:	4b8d      	ldr	r3, [pc, #564]	; (800807c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e46:	61bb      	str	r3, [r7, #24]
    break;
 8007e48:	e10e      	b.n	8008068 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007e4a:	4b8d      	ldr	r3, [pc, #564]	; (8008080 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e4c:	61bb      	str	r3, [r7, #24]
    break;
 8007e4e:	e10b      	b.n	8008068 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007e50:	4b8c      	ldr	r3, [pc, #560]	; (8008084 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007e52:	61bb      	str	r3, [r7, #24]
    break;
 8007e54:	e108      	b.n	8008068 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e56:	4b88      	ldr	r3, [pc, #544]	; (8008078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5a:	f003 0303 	and.w	r3, r3, #3
 8007e5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007e60:	4b85      	ldr	r3, [pc, #532]	; (8008078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e64:	091b      	lsrs	r3, r3, #4
 8007e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007e6c:	4b82      	ldr	r3, [pc, #520]	; (8008078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007e76:	4b80      	ldr	r3, [pc, #512]	; (8008078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7a:	08db      	lsrs	r3, r3, #3
 8007e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	fb02 f303 	mul.w	r3, r2, r3
 8007e86:	ee07 3a90 	vmov	s15, r3
 8007e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e8e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 80e1 	beq.w	800805c <HAL_RCC_GetSysClockFreq+0x2b8>
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	f000 8083 	beq.w	8007fa8 <HAL_RCC_GetSysClockFreq+0x204>
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	f200 80a1 	bhi.w	8007fec <HAL_RCC_GetSysClockFreq+0x248>
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <HAL_RCC_GetSysClockFreq+0x114>
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d056      	beq.n	8007f64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007eb6:	e099      	b.n	8007fec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eb8:	4b6f      	ldr	r3, [pc, #444]	; (8008078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d02d      	beq.n	8007f20 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ec4:	4b6c      	ldr	r3, [pc, #432]	; (8008078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	08db      	lsrs	r3, r3, #3
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	4a6b      	ldr	r2, [pc, #428]	; (800807c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	ee07 3a90 	vmov	s15, r3
 8007edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	ee07 3a90 	vmov	s15, r3
 8007ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eee:	4b62      	ldr	r3, [pc, #392]	; (8008078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef6:	ee07 3a90 	vmov	s15, r3
 8007efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007f1e:	e087      	b.n	8008030 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800808c <HAL_RCC_GetSysClockFreq+0x2e8>
 8007f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f32:	4b51      	ldr	r3, [pc, #324]	; (8008078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3a:	ee07 3a90 	vmov	s15, r3
 8007f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f62:	e065      	b.n	8008030 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008090 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f76:	4b40      	ldr	r3, [pc, #256]	; (8008078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7e:	ee07 3a90 	vmov	s15, r3
 8007f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fa6:	e043      	b.n	8008030 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008094 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fba:	4b2f      	ldr	r3, [pc, #188]	; (8008078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fea:	e021      	b.n	8008030 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008090 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ffe:	4b1e      	ldr	r3, [pc, #120]	; (8008078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008006:	ee07 3a90 	vmov	s15, r3
 800800a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800800e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008012:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800801a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800801e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800802a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800802e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008030:	4b11      	ldr	r3, [pc, #68]	; (8008078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008034:	0a5b      	lsrs	r3, r3, #9
 8008036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800803a:	3301      	adds	r3, #1
 800803c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	ee07 3a90 	vmov	s15, r3
 8008044:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008048:	edd7 6a07 	vldr	s13, [r7, #28]
 800804c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008054:	ee17 3a90 	vmov	r3, s15
 8008058:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800805a:	e005      	b.n	8008068 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	61bb      	str	r3, [r7, #24]
    break;
 8008060:	e002      	b.n	8008068 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008062:	4b07      	ldr	r3, [pc, #28]	; (8008080 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008064:	61bb      	str	r3, [r7, #24]
    break;
 8008066:	bf00      	nop
  }

  return sysclockfreq;
 8008068:	69bb      	ldr	r3, [r7, #24]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3724      	adds	r7, #36	; 0x24
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	58024400 	.word	0x58024400
 800807c:	03d09000 	.word	0x03d09000
 8008080:	003d0900 	.word	0x003d0900
 8008084:	016e3600 	.word	0x016e3600
 8008088:	46000000 	.word	0x46000000
 800808c:	4c742400 	.word	0x4c742400
 8008090:	4a742400 	.word	0x4a742400
 8008094:	4bb71b00 	.word	0x4bb71b00

08008098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800809e:	f7ff fe81 	bl	8007da4 <HAL_RCC_GetSysClockFreq>
 80080a2:	4602      	mov	r2, r0
 80080a4:	4b10      	ldr	r3, [pc, #64]	; (80080e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	0a1b      	lsrs	r3, r3, #8
 80080aa:	f003 030f 	and.w	r3, r3, #15
 80080ae:	490f      	ldr	r1, [pc, #60]	; (80080ec <HAL_RCC_GetHCLKFreq+0x54>)
 80080b0:	5ccb      	ldrb	r3, [r1, r3]
 80080b2:	f003 031f 	and.w	r3, r3, #31
 80080b6:	fa22 f303 	lsr.w	r3, r2, r3
 80080ba:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	f003 030f 	and.w	r3, r3, #15
 80080c4:	4a09      	ldr	r2, [pc, #36]	; (80080ec <HAL_RCC_GetHCLKFreq+0x54>)
 80080c6:	5cd3      	ldrb	r3, [r2, r3]
 80080c8:	f003 031f 	and.w	r3, r3, #31
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	fa22 f303 	lsr.w	r3, r2, r3
 80080d2:	4a07      	ldr	r2, [pc, #28]	; (80080f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80080d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80080d6:	4a07      	ldr	r2, [pc, #28]	; (80080f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80080dc:	4b04      	ldr	r3, [pc, #16]	; (80080f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80080de:	681b      	ldr	r3, [r3, #0]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	58024400 	.word	0x58024400
 80080ec:	08017d08 	.word	0x08017d08
 80080f0:	24000010 	.word	0x24000010
 80080f4:	2400000c 	.word	0x2400000c

080080f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80080fc:	f7ff ffcc 	bl	8008098 <HAL_RCC_GetHCLKFreq>
 8008100:	4602      	mov	r2, r0
 8008102:	4b06      	ldr	r3, [pc, #24]	; (800811c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	091b      	lsrs	r3, r3, #4
 8008108:	f003 0307 	and.w	r3, r3, #7
 800810c:	4904      	ldr	r1, [pc, #16]	; (8008120 <HAL_RCC_GetPCLK1Freq+0x28>)
 800810e:	5ccb      	ldrb	r3, [r1, r3]
 8008110:	f003 031f 	and.w	r3, r3, #31
 8008114:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008118:	4618      	mov	r0, r3
 800811a:	bd80      	pop	{r7, pc}
 800811c:	58024400 	.word	0x58024400
 8008120:	08017d08 	.word	0x08017d08

08008124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8008128:	f7ff ffb6 	bl	8008098 <HAL_RCC_GetHCLKFreq>
 800812c:	4602      	mov	r2, r0
 800812e:	4b06      	ldr	r3, [pc, #24]	; (8008148 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	0a1b      	lsrs	r3, r3, #8
 8008134:	f003 0307 	and.w	r3, r3, #7
 8008138:	4904      	ldr	r1, [pc, #16]	; (800814c <HAL_RCC_GetPCLK2Freq+0x28>)
 800813a:	5ccb      	ldrb	r3, [r1, r3]
 800813c:	f003 031f 	and.w	r3, r3, #31
 8008140:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008144:	4618      	mov	r0, r3
 8008146:	bd80      	pop	{r7, pc}
 8008148:	58024400 	.word	0x58024400
 800814c:	08017d08 	.word	0x08017d08

08008150 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008158:	2300      	movs	r3, #0
 800815a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800815c:	2300      	movs	r3, #0
 800815e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d03f      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008170:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008174:	d02a      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008176:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800817a:	d824      	bhi.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800817c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008180:	d018      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008186:	d81e      	bhi.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008188:	2b00      	cmp	r3, #0
 800818a:	d003      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800818c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008190:	d007      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008192:	e018      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008194:	4b9f      	ldr	r3, [pc, #636]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	4a9e      	ldr	r2, [pc, #632]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800819a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800819e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80081a0:	e015      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	3304      	adds	r3, #4
 80081a6:	2102      	movs	r1, #2
 80081a8:	4618      	mov	r0, r3
 80081aa:	f001 ff1b 	bl	8009fe4 <RCCEx_PLL2_Config>
 80081ae:	4603      	mov	r3, r0
 80081b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80081b2:	e00c      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	3324      	adds	r3, #36	; 0x24
 80081b8:	2102      	movs	r1, #2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f001 ffc4 	bl	800a148 <RCCEx_PLL3_Config>
 80081c0:	4603      	mov	r3, r0
 80081c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80081c4:	e003      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	75fb      	strb	r3, [r7, #23]
      break;
 80081ca:	e000      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80081cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d109      	bne.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80081d4:	4b8f      	ldr	r3, [pc, #572]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80081d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081e0:	498c      	ldr	r1, [pc, #560]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	650b      	str	r3, [r1, #80]	; 0x50
 80081e6:	e001      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e8:	7dfb      	ldrb	r3, [r7, #23]
 80081ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d03d      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	d826      	bhi.n	800824e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008200:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008206:	bf00      	nop
 8008208:	0800821d 	.word	0x0800821d
 800820c:	0800822b 	.word	0x0800822b
 8008210:	0800823d 	.word	0x0800823d
 8008214:	08008255 	.word	0x08008255
 8008218:	08008255 	.word	0x08008255
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800821c:	4b7d      	ldr	r3, [pc, #500]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	4a7c      	ldr	r2, [pc, #496]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008226:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008228:	e015      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3304      	adds	r3, #4
 800822e:	2100      	movs	r1, #0
 8008230:	4618      	mov	r0, r3
 8008232:	f001 fed7 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008236:	4603      	mov	r3, r0
 8008238:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800823a:	e00c      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	3324      	adds	r3, #36	; 0x24
 8008240:	2100      	movs	r1, #0
 8008242:	4618      	mov	r0, r3
 8008244:	f001 ff80 	bl	800a148 <RCCEx_PLL3_Config>
 8008248:	4603      	mov	r3, r0
 800824a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800824c:	e003      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	75fb      	strb	r3, [r7, #23]
      break;
 8008252:	e000      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d109      	bne.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800825c:	4b6d      	ldr	r3, [pc, #436]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800825e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008260:	f023 0207 	bic.w	r2, r3, #7
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008268:	496a      	ldr	r1, [pc, #424]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800826a:	4313      	orrs	r3, r2
 800826c:	650b      	str	r3, [r1, #80]	; 0x50
 800826e:	e001      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008270:	7dfb      	ldrb	r3, [r7, #23]
 8008272:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800827c:	2b00      	cmp	r3, #0
 800827e:	d04a      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008284:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008288:	d031      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800828a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800828e:	d82b      	bhi.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008294:	d02d      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8008296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800829a:	d825      	bhi.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800829c:	2bc0      	cmp	r3, #192	; 0xc0
 800829e:	d02a      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80082a0:	2bc0      	cmp	r3, #192	; 0xc0
 80082a2:	d821      	bhi.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80082a4:	2b80      	cmp	r3, #128	; 0x80
 80082a6:	d016      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80082a8:	2b80      	cmp	r3, #128	; 0x80
 80082aa:	d81d      	bhi.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80082b0:	2b40      	cmp	r3, #64	; 0x40
 80082b2:	d007      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80082b4:	e018      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082b6:	4b57      	ldr	r3, [pc, #348]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ba:	4a56      	ldr	r2, [pc, #344]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80082bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80082c2:	e019      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3304      	adds	r3, #4
 80082c8:	2100      	movs	r1, #0
 80082ca:	4618      	mov	r0, r3
 80082cc:	f001 fe8a 	bl	8009fe4 <RCCEx_PLL2_Config>
 80082d0:	4603      	mov	r3, r0
 80082d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80082d4:	e010      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3324      	adds	r3, #36	; 0x24
 80082da:	2100      	movs	r1, #0
 80082dc:	4618      	mov	r0, r3
 80082de:	f001 ff33 	bl	800a148 <RCCEx_PLL3_Config>
 80082e2:	4603      	mov	r3, r0
 80082e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80082e6:	e007      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	75fb      	strb	r3, [r7, #23]
      break;
 80082ec:	e004      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80082ee:	bf00      	nop
 80082f0:	e002      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80082f2:	bf00      	nop
 80082f4:	e000      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80082f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082f8:	7dfb      	ldrb	r3, [r7, #23]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d109      	bne.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80082fe:	4b45      	ldr	r3, [pc, #276]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008302:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800830a:	4942      	ldr	r1, [pc, #264]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800830c:	4313      	orrs	r3, r2
 800830e:	650b      	str	r3, [r1, #80]	; 0x50
 8008310:	e001      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008312:	7dfb      	ldrb	r3, [r7, #23]
 8008314:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800831e:	2b00      	cmp	r3, #0
 8008320:	d04f      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008326:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800832a:	d036      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800832c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008330:	d830      	bhi.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8008332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008336:	d032      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8008338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800833c:	d82a      	bhi.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800833e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008342:	d02e      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8008344:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008348:	d824      	bhi.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800834a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800834e:	d018      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8008350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008354:	d81e      	bhi.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800835a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800835e:	d007      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8008360:	e018      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008362:	4b2c      	ldr	r3, [pc, #176]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008366:	4a2b      	ldr	r2, [pc, #172]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800836c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800836e:	e019      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3304      	adds	r3, #4
 8008374:	2100      	movs	r1, #0
 8008376:	4618      	mov	r0, r3
 8008378:	f001 fe34 	bl	8009fe4 <RCCEx_PLL2_Config>
 800837c:	4603      	mov	r3, r0
 800837e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8008380:	e010      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	3324      	adds	r3, #36	; 0x24
 8008386:	2100      	movs	r1, #0
 8008388:	4618      	mov	r0, r3
 800838a:	f001 fedd 	bl	800a148 <RCCEx_PLL3_Config>
 800838e:	4603      	mov	r3, r0
 8008390:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8008392:	e007      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	75fb      	strb	r3, [r7, #23]
      break;
 8008398:	e004      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800839a:	bf00      	nop
 800839c:	e002      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800839e:	bf00      	nop
 80083a0:	e000      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80083a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d109      	bne.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80083aa:	4b1a      	ldr	r3, [pc, #104]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80083ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ae:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b6:	4917      	ldr	r1, [pc, #92]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	650b      	str	r3, [r1, #80]	; 0x50
 80083bc:	e001      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d034      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083d2:	2b30      	cmp	r3, #48	; 0x30
 80083d4:	d01c      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80083d6:	2b30      	cmp	r3, #48	; 0x30
 80083d8:	d817      	bhi.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80083da:	2b20      	cmp	r3, #32
 80083dc:	d00c      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80083de:	2b20      	cmp	r3, #32
 80083e0:	d813      	bhi.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d018      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80083e6:	2b10      	cmp	r3, #16
 80083e8:	d10f      	bne.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083ea:	4b0a      	ldr	r3, [pc, #40]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	4a09      	ldr	r2, [pc, #36]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80083f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80083f6:	e010      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	3304      	adds	r3, #4
 80083fc:	2102      	movs	r1, #2
 80083fe:	4618      	mov	r0, r3
 8008400:	f001 fdf0 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008404:	4603      	mov	r3, r0
 8008406:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008408:	e007      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	75fb      	strb	r3, [r7, #23]
      break;
 800840e:	e004      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8008410:	bf00      	nop
 8008412:	e002      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008414:	58024400 	.word	0x58024400
      break;
 8008418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800841a:	7dfb      	ldrb	r3, [r7, #23]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d109      	bne.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008420:	4b9b      	ldr	r3, [pc, #620]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008424:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800842c:	4998      	ldr	r1, [pc, #608]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800842e:	4313      	orrs	r3, r2
 8008430:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008432:	e001      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008434:	7dfb      	ldrb	r3, [r7, #23]
 8008436:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d047      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800844c:	d030      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800844e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008452:	d82a      	bhi.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8008454:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008458:	d02c      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800845a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800845e:	d824      	bhi.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8008460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008464:	d018      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800846a:	d81e      	bhi.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8008470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008474:	d007      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8008476:	e018      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008478:	4b85      	ldr	r3, [pc, #532]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	4a84      	ldr	r2, [pc, #528]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800847e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008482:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008484:	e017      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3304      	adds	r3, #4
 800848a:	2100      	movs	r1, #0
 800848c:	4618      	mov	r0, r3
 800848e:	f001 fda9 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008492:	4603      	mov	r3, r0
 8008494:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008496:	e00e      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	3324      	adds	r3, #36	; 0x24
 800849c:	2100      	movs	r1, #0
 800849e:	4618      	mov	r0, r3
 80084a0:	f001 fe52 	bl	800a148 <RCCEx_PLL3_Config>
 80084a4:	4603      	mov	r3, r0
 80084a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80084a8:	e005      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	75fb      	strb	r3, [r7, #23]
      break;
 80084ae:	e002      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80084b0:	bf00      	nop
 80084b2:	e000      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80084b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084b6:	7dfb      	ldrb	r3, [r7, #23]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d109      	bne.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80084bc:	4b74      	ldr	r3, [pc, #464]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80084be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c8:	4971      	ldr	r1, [pc, #452]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	650b      	str	r3, [r1, #80]	; 0x50
 80084ce:	e001      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d0:	7dfb      	ldrb	r3, [r7, #23]
 80084d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d049      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084e8:	d02e      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80084ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084ee:	d828      	bhi.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80084f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084f4:	d02a      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80084f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084fa:	d822      	bhi.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80084fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008500:	d026      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8008502:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008506:	d81c      	bhi.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008508:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800850c:	d010      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800850e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008512:	d816      	bhi.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008514:	2b00      	cmp	r3, #0
 8008516:	d01d      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8008518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800851c:	d111      	bne.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	3304      	adds	r3, #4
 8008522:	2101      	movs	r1, #1
 8008524:	4618      	mov	r0, r3
 8008526:	f001 fd5d 	bl	8009fe4 <RCCEx_PLL2_Config>
 800852a:	4603      	mov	r3, r0
 800852c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800852e:	e012      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3324      	adds	r3, #36	; 0x24
 8008534:	2101      	movs	r1, #1
 8008536:	4618      	mov	r0, r3
 8008538:	f001 fe06 	bl	800a148 <RCCEx_PLL3_Config>
 800853c:	4603      	mov	r3, r0
 800853e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008540:	e009      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	75fb      	strb	r3, [r7, #23]
      break;
 8008546:	e006      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8008548:	bf00      	nop
 800854a:	e004      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800854c:	bf00      	nop
 800854e:	e002      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8008550:	bf00      	nop
 8008552:	e000      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8008554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d109      	bne.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800855c:	4b4c      	ldr	r3, [pc, #304]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800855e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008560:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008568:	4949      	ldr	r1, [pc, #292]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800856a:	4313      	orrs	r3, r2
 800856c:	650b      	str	r3, [r1, #80]	; 0x50
 800856e:	e001      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008570:	7dfb      	ldrb	r3, [r7, #23]
 8008572:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d053      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008586:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800858a:	d034      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800858c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008590:	d82e      	bhi.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008596:	d030      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8008598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800859c:	d828      	bhi.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800859e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085a2:	d02c      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80085a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085a8:	d822      	bhi.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80085aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085ae:	d028      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80085b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085b4:	d81c      	bhi.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80085b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085ba:	d010      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80085bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085c0:	d816      	bhi.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d01f      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80085c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085ca:	d111      	bne.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3304      	adds	r3, #4
 80085d0:	2101      	movs	r1, #1
 80085d2:	4618      	mov	r0, r3
 80085d4:	f001 fd06 	bl	8009fe4 <RCCEx_PLL2_Config>
 80085d8:	4603      	mov	r3, r0
 80085da:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80085dc:	e014      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	3324      	adds	r3, #36	; 0x24
 80085e2:	2101      	movs	r1, #1
 80085e4:	4618      	mov	r0, r3
 80085e6:	f001 fdaf 	bl	800a148 <RCCEx_PLL3_Config>
 80085ea:	4603      	mov	r3, r0
 80085ec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80085ee:	e00b      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	75fb      	strb	r3, [r7, #23]
      break;
 80085f4:	e008      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80085f6:	bf00      	nop
 80085f8:	e006      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80085fa:	bf00      	nop
 80085fc:	e004      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80085fe:	bf00      	nop
 8008600:	e002      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008602:	bf00      	nop
 8008604:	e000      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008606:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008608:	7dfb      	ldrb	r3, [r7, #23]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10a      	bne.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800860e:	4b20      	ldr	r3, [pc, #128]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008612:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800861c:	491c      	ldr	r1, [pc, #112]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800861e:	4313      	orrs	r3, r2
 8008620:	658b      	str	r3, [r1, #88]	; 0x58
 8008622:	e001      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008624:	7dfb      	ldrb	r3, [r7, #23]
 8008626:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d031      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800863c:	d00e      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800863e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008642:	d814      	bhi.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d015      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008648:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800864c:	d10f      	bne.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800864e:	4b10      	ldr	r3, [pc, #64]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008652:	4a0f      	ldr	r2, [pc, #60]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008658:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800865a:	e00c      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	3304      	adds	r3, #4
 8008660:	2101      	movs	r1, #1
 8008662:	4618      	mov	r0, r3
 8008664:	f001 fcbe 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008668:	4603      	mov	r3, r0
 800866a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800866c:	e003      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	75fb      	strb	r3, [r7, #23]
      break;
 8008672:	e000      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8008674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10b      	bne.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800867c:	4b04      	ldr	r3, [pc, #16]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800867e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008680:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008688:	4901      	ldr	r1, [pc, #4]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800868a:	4313      	orrs	r3, r2
 800868c:	650b      	str	r3, [r1, #80]	; 0x50
 800868e:	e003      	b.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8008690:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d032      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a8:	2b03      	cmp	r3, #3
 80086aa:	d81b      	bhi.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80086ac:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80086ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b2:	bf00      	nop
 80086b4:	080086eb 	.word	0x080086eb
 80086b8:	080086c5 	.word	0x080086c5
 80086bc:	080086d3 	.word	0x080086d3
 80086c0:	080086eb 	.word	0x080086eb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086c4:	4bb2      	ldr	r3, [pc, #712]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80086c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c8:	4ab1      	ldr	r2, [pc, #708]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80086ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80086d0:	e00c      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	3304      	adds	r3, #4
 80086d6:	2102      	movs	r1, #2
 80086d8:	4618      	mov	r0, r3
 80086da:	f001 fc83 	bl	8009fe4 <RCCEx_PLL2_Config>
 80086de:	4603      	mov	r3, r0
 80086e0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80086e2:	e003      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	75fb      	strb	r3, [r7, #23]
      break;
 80086e8:	e000      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80086ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086ec:	7dfb      	ldrb	r3, [r7, #23]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d109      	bne.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80086f2:	4ba7      	ldr	r3, [pc, #668]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80086f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f6:	f023 0203 	bic.w	r2, r3, #3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fe:	49a4      	ldr	r1, [pc, #656]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008700:	4313      	orrs	r3, r2
 8008702:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008704:	e001      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008706:	7dfb      	ldrb	r3, [r7, #23]
 8008708:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 8086 	beq.w	8008824 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008718:	4b9e      	ldr	r3, [pc, #632]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a9d      	ldr	r2, [pc, #628]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800871e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008722:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008724:	f7fb faec 	bl	8003d00 <HAL_GetTick>
 8008728:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800872a:	e009      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800872c:	f7fb fae8 	bl	8003d00 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	2b64      	cmp	r3, #100	; 0x64
 8008738:	d902      	bls.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	75fb      	strb	r3, [r7, #23]
        break;
 800873e:	e005      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008740:	4b94      	ldr	r3, [pc, #592]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008748:	2b00      	cmp	r3, #0
 800874a:	d0ef      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800874c:	7dfb      	ldrb	r3, [r7, #23]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d166      	bne.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008752:	4b8f      	ldr	r3, [pc, #572]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008754:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800875c:	4053      	eors	r3, r2
 800875e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008762:	2b00      	cmp	r3, #0
 8008764:	d013      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008766:	4b8a      	ldr	r3, [pc, #552]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800876a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800876e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008770:	4b87      	ldr	r3, [pc, #540]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008774:	4a86      	ldr	r2, [pc, #536]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800877a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800877c:	4b84      	ldr	r3, [pc, #528]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800877e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008780:	4a83      	ldr	r2, [pc, #524]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008786:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008788:	4a81      	ldr	r2, [pc, #516]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008798:	d115      	bne.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879a:	f7fb fab1 	bl	8003d00 <HAL_GetTick>
 800879e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087a0:	e00b      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087a2:	f7fb faad 	bl	8003d00 <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d902      	bls.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	75fb      	strb	r3, [r7, #23]
            break;
 80087b8:	e005      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087ba:	4b75      	ldr	r3, [pc, #468]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80087bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0ed      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d126      	bne.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087da:	d10d      	bne.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80087dc:	4b6c      	ldr	r3, [pc, #432]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087ea:	0919      	lsrs	r1, r3, #4
 80087ec:	4b6a      	ldr	r3, [pc, #424]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80087ee:	400b      	ands	r3, r1
 80087f0:	4967      	ldr	r1, [pc, #412]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	610b      	str	r3, [r1, #16]
 80087f6:	e005      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80087f8:	4b65      	ldr	r3, [pc, #404]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	4a64      	ldr	r2, [pc, #400]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80087fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008802:	6113      	str	r3, [r2, #16]
 8008804:	4b62      	ldr	r3, [pc, #392]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008806:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800880e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008812:	495f      	ldr	r1, [pc, #380]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008814:	4313      	orrs	r3, r2
 8008816:	670b      	str	r3, [r1, #112]	; 0x70
 8008818:	e004      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	75bb      	strb	r3, [r7, #22]
 800881e:	e001      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d07f      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008836:	2b28      	cmp	r3, #40	; 0x28
 8008838:	d866      	bhi.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 800883a:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	0800890f 	.word	0x0800890f
 8008844:	08008909 	.word	0x08008909
 8008848:	08008909 	.word	0x08008909
 800884c:	08008909 	.word	0x08008909
 8008850:	08008909 	.word	0x08008909
 8008854:	08008909 	.word	0x08008909
 8008858:	08008909 	.word	0x08008909
 800885c:	08008909 	.word	0x08008909
 8008860:	080088e5 	.word	0x080088e5
 8008864:	08008909 	.word	0x08008909
 8008868:	08008909 	.word	0x08008909
 800886c:	08008909 	.word	0x08008909
 8008870:	08008909 	.word	0x08008909
 8008874:	08008909 	.word	0x08008909
 8008878:	08008909 	.word	0x08008909
 800887c:	08008909 	.word	0x08008909
 8008880:	080088f7 	.word	0x080088f7
 8008884:	08008909 	.word	0x08008909
 8008888:	08008909 	.word	0x08008909
 800888c:	08008909 	.word	0x08008909
 8008890:	08008909 	.word	0x08008909
 8008894:	08008909 	.word	0x08008909
 8008898:	08008909 	.word	0x08008909
 800889c:	08008909 	.word	0x08008909
 80088a0:	0800890f 	.word	0x0800890f
 80088a4:	08008909 	.word	0x08008909
 80088a8:	08008909 	.word	0x08008909
 80088ac:	08008909 	.word	0x08008909
 80088b0:	08008909 	.word	0x08008909
 80088b4:	08008909 	.word	0x08008909
 80088b8:	08008909 	.word	0x08008909
 80088bc:	08008909 	.word	0x08008909
 80088c0:	0800890f 	.word	0x0800890f
 80088c4:	08008909 	.word	0x08008909
 80088c8:	08008909 	.word	0x08008909
 80088cc:	08008909 	.word	0x08008909
 80088d0:	08008909 	.word	0x08008909
 80088d4:	08008909 	.word	0x08008909
 80088d8:	08008909 	.word	0x08008909
 80088dc:	08008909 	.word	0x08008909
 80088e0:	0800890f 	.word	0x0800890f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	3304      	adds	r3, #4
 80088e8:	2101      	movs	r1, #1
 80088ea:	4618      	mov	r0, r3
 80088ec:	f001 fb7a 	bl	8009fe4 <RCCEx_PLL2_Config>
 80088f0:	4603      	mov	r3, r0
 80088f2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80088f4:	e00c      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	3324      	adds	r3, #36	; 0x24
 80088fa:	2101      	movs	r1, #1
 80088fc:	4618      	mov	r0, r3
 80088fe:	f001 fc23 	bl	800a148 <RCCEx_PLL3_Config>
 8008902:	4603      	mov	r3, r0
 8008904:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008906:	e003      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	75fb      	strb	r3, [r7, #23]
      break;
 800890c:	e000      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 800890e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008910:	7dfb      	ldrb	r3, [r7, #23]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10a      	bne.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008916:	4b1e      	ldr	r3, [pc, #120]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008924:	491a      	ldr	r1, [pc, #104]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008926:	4313      	orrs	r3, r2
 8008928:	654b      	str	r3, [r1, #84]	; 0x54
 800892a:	e001      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800892c:	7dfb      	ldrb	r3, [r7, #23]
 800892e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d03f      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008940:	2b05      	cmp	r3, #5
 8008942:	d821      	bhi.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8008944:	a201      	add	r2, pc, #4	; (adr r2, 800894c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894a:	bf00      	nop
 800894c:	0800899d 	.word	0x0800899d
 8008950:	08008965 	.word	0x08008965
 8008954:	08008977 	.word	0x08008977
 8008958:	0800899d 	.word	0x0800899d
 800895c:	0800899d 	.word	0x0800899d
 8008960:	0800899d 	.word	0x0800899d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3304      	adds	r3, #4
 8008968:	2101      	movs	r1, #1
 800896a:	4618      	mov	r0, r3
 800896c:	f001 fb3a 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008970:	4603      	mov	r3, r0
 8008972:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008974:	e013      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	3324      	adds	r3, #36	; 0x24
 800897a:	2101      	movs	r1, #1
 800897c:	4618      	mov	r0, r3
 800897e:	f001 fbe3 	bl	800a148 <RCCEx_PLL3_Config>
 8008982:	4603      	mov	r3, r0
 8008984:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008986:	e00a      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	75fb      	strb	r3, [r7, #23]
      break;
 800898c:	e007      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800898e:	bf00      	nop
 8008990:	58024400 	.word	0x58024400
 8008994:	58024800 	.word	0x58024800
 8008998:	00ffffcf 	.word	0x00ffffcf
      break;
 800899c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800899e:	7dfb      	ldrb	r3, [r7, #23]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d109      	bne.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80089a4:	4b9f      	ldr	r3, [pc, #636]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80089a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a8:	f023 0207 	bic.w	r2, r3, #7
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089b0:	499c      	ldr	r1, [pc, #624]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	654b      	str	r3, [r1, #84]	; 0x54
 80089b6:	e001      	b.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089b8:	7dfb      	ldrb	r3, [r7, #23]
 80089ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0304 	and.w	r3, r3, #4
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d039      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089ce:	2b05      	cmp	r3, #5
 80089d0:	d820      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80089d2:	a201      	add	r2, pc, #4	; (adr r2, 80089d8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80089d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d8:	08008a1b 	.word	0x08008a1b
 80089dc:	080089f1 	.word	0x080089f1
 80089e0:	08008a03 	.word	0x08008a03
 80089e4:	08008a1b 	.word	0x08008a1b
 80089e8:	08008a1b 	.word	0x08008a1b
 80089ec:	08008a1b 	.word	0x08008a1b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3304      	adds	r3, #4
 80089f4:	2101      	movs	r1, #1
 80089f6:	4618      	mov	r0, r3
 80089f8:	f001 faf4 	bl	8009fe4 <RCCEx_PLL2_Config>
 80089fc:	4603      	mov	r3, r0
 80089fe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008a00:	e00c      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	3324      	adds	r3, #36	; 0x24
 8008a06:	2101      	movs	r1, #1
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f001 fb9d 	bl	800a148 <RCCEx_PLL3_Config>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008a12:	e003      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	75fb      	strb	r3, [r7, #23]
      break;
 8008a18:	e000      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8008a1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10a      	bne.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a22:	4b80      	ldr	r3, [pc, #512]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a26:	f023 0207 	bic.w	r2, r3, #7
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a30:	497c      	ldr	r1, [pc, #496]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	658b      	str	r3, [r1, #88]	; 0x58
 8008a36:	e001      	b.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
 8008a3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0320 	and.w	r3, r3, #32
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d04b      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a52:	d02e      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8008a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a58:	d828      	bhi.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a5e:	d02a      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a64:	d822      	bhi.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008a66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a6a:	d026      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008a6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a70:	d81c      	bhi.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a76:	d010      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8008a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a7c:	d816      	bhi.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d01d      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008a82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a86:	d111      	bne.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f001 faa8 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008a94:	4603      	mov	r3, r0
 8008a96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008a98:	e012      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	3324      	adds	r3, #36	; 0x24
 8008a9e:	2102      	movs	r1, #2
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f001 fb51 	bl	800a148 <RCCEx_PLL3_Config>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008aaa:	e009      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	75fb      	strb	r3, [r7, #23]
      break;
 8008ab0:	e006      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008ab2:	bf00      	nop
 8008ab4:	e004      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008ab6:	bf00      	nop
 8008ab8:	e002      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008aba:	bf00      	nop
 8008abc:	e000      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ac0:	7dfb      	ldrb	r3, [r7, #23]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10a      	bne.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ac6:	4b57      	ldr	r3, [pc, #348]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ad4:	4953      	ldr	r1, [pc, #332]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	654b      	str	r3, [r1, #84]	; 0x54
 8008ada:	e001      	b.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
 8008ade:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d04b      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008af2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008af6:	d02e      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8008af8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008afc:	d828      	bhi.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b02:	d02a      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b08:	d822      	bhi.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008b0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b0e:	d026      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008b10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b14:	d81c      	bhi.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b1a:	d010      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8008b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b20:	d816      	bhi.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d01d      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b2a:	d111      	bne.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3304      	adds	r3, #4
 8008b30:	2100      	movs	r1, #0
 8008b32:	4618      	mov	r0, r3
 8008b34:	f001 fa56 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008b3c:	e012      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	3324      	adds	r3, #36	; 0x24
 8008b42:	2102      	movs	r1, #2
 8008b44:	4618      	mov	r0, r3
 8008b46:	f001 faff 	bl	800a148 <RCCEx_PLL3_Config>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008b4e:	e009      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	75fb      	strb	r3, [r7, #23]
      break;
 8008b54:	e006      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008b56:	bf00      	nop
 8008b58:	e004      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008b5a:	bf00      	nop
 8008b5c:	e002      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008b5e:	bf00      	nop
 8008b60:	e000      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10a      	bne.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b6a:	4b2e      	ldr	r3, [pc, #184]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b6e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b78:	492a      	ldr	r1, [pc, #168]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	658b      	str	r3, [r1, #88]	; 0x58
 8008b7e:	e001      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
 8008b82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d04d      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008b96:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008b9a:	d02e      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8008b9c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ba0:	d828      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ba6:	d02a      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bac:	d822      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008bae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008bb2:	d026      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008bb4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008bb8:	d81c      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008bba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bbe:	d010      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8008bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bc4:	d816      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d01d      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bce:	d111      	bne.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f001 fa04 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008be0:	e012      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	3324      	adds	r3, #36	; 0x24
 8008be6:	2102      	movs	r1, #2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f001 faad 	bl	800a148 <RCCEx_PLL3_Config>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008bf2:	e009      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8008bf8:	e006      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008bfa:	bf00      	nop
 8008bfc:	e004      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008bfe:	bf00      	nop
 8008c00:	e002      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008c02:	bf00      	nop
 8008c04:	e000      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10c      	bne.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008c0e:	4b05      	ldr	r3, [pc, #20]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c1c:	4901      	ldr	r1, [pc, #4]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	658b      	str	r3, [r1, #88]	; 0x58
 8008c22:	e003      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008c24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
 8008c2a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 0308 	and.w	r3, r3, #8
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d01a      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c42:	d10a      	bne.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	3324      	adds	r3, #36	; 0x24
 8008c48:	2102      	movs	r1, #2
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f001 fa7c 	bl	800a148 <RCCEx_PLL3_Config>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008c5a:	4b8c      	ldr	r3, [pc, #560]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c68:	4988      	ldr	r1, [pc, #544]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0310 	and.w	r3, r3, #16
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d01a      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c84:	d10a      	bne.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	3324      	adds	r3, #36	; 0x24
 8008c8a:	2102      	movs	r1, #2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f001 fa5b 	bl	800a148 <RCCEx_PLL3_Config>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d001      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c9c:	4b7b      	ldr	r3, [pc, #492]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008caa:	4978      	ldr	r1, [pc, #480]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008cac:	4313      	orrs	r3, r2
 8008cae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d034      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cc6:	d01d      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8008cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ccc:	d817      	bhi.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8008cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cd6:	d009      	beq.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008cd8:	e011      	b.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	2100      	movs	r1, #0
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f001 f97f 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008cea:	e00c      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	3324      	adds	r3, #36	; 0x24
 8008cf0:	2102      	movs	r1, #2
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f001 fa28 	bl	800a148 <RCCEx_PLL3_Config>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008cfc:	e003      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	75fb      	strb	r3, [r7, #23]
      break;
 8008d02:	e000      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8008d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10a      	bne.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d0c:	4b5f      	ldr	r3, [pc, #380]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d1a:	495c      	ldr	r1, [pc, #368]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	658b      	str	r3, [r1, #88]	; 0x58
 8008d20:	e001      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d22:	7dfb      	ldrb	r3, [r7, #23]
 8008d24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d033      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d3c:	d01c      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008d3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d42:	d816      	bhi.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008d44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d48:	d003      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8008d4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d4e:	d007      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008d50:	e00f      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d52:	4b4e      	ldr	r3, [pc, #312]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d56:	4a4d      	ldr	r2, [pc, #308]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008d5e:	e00c      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3324      	adds	r3, #36	; 0x24
 8008d64:	2101      	movs	r1, #1
 8008d66:	4618      	mov	r0, r3
 8008d68:	f001 f9ee 	bl	800a148 <RCCEx_PLL3_Config>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008d70:	e003      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	75fb      	strb	r3, [r7, #23]
      break;
 8008d76:	e000      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10a      	bne.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d80:	4b42      	ldr	r3, [pc, #264]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d8e:	493f      	ldr	r1, [pc, #252]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	654b      	str	r3, [r1, #84]	; 0x54
 8008d94:	e001      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
 8008d98:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d029      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d003      	beq.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8008dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008db2:	d007      	beq.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008db4:	e00f      	b.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008db6:	4b35      	ldr	r3, [pc, #212]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dba:	4a34      	ldr	r2, [pc, #208]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008dc2:	e00b      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	2102      	movs	r1, #2
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f001 f90a 	bl	8009fe4 <RCCEx_PLL2_Config>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008dd4:	e002      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8008dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d109      	bne.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008de2:	4b2a      	ldr	r3, [pc, #168]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008de6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dee:	4927      	ldr	r1, [pc, #156]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008df0:	4313      	orrs	r3, r2
 8008df2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008df4:	e001      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008df6:	7dfb      	ldrb	r3, [r7, #23]
 8008df8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00a      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	3324      	adds	r3, #36	; 0x24
 8008e0a:	2102      	movs	r1, #2
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f001 f99b 	bl	800a148 <RCCEx_PLL3_Config>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d035      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e32:	d017      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e38:	d811      	bhi.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e3e:	d013      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e44:	d80b      	bhi.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d010      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8008e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e4e:	d106      	bne.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e50:	4b0e      	ldr	r3, [pc, #56]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e54:	4a0d      	ldr	r2, [pc, #52]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008e5c:	e007      	b.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	75fb      	strb	r3, [r7, #23]
      break;
 8008e62:	e004      	b.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008e64:	bf00      	nop
 8008e66:	e002      	b.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008e68:	bf00      	nop
 8008e6a:	e000      	b.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008e6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10d      	bne.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e74:	4b05      	ldr	r3, [pc, #20]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e82:	4902      	ldr	r1, [pc, #8]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	654b      	str	r3, [r1, #84]	; 0x54
 8008e88:	e004      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008e8a:	bf00      	nop
 8008e8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e90:	7dfb      	ldrb	r3, [r7, #23]
 8008e92:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d008      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ea0:	4b30      	ldr	r3, [pc, #192]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eac:	492d      	ldr	r1, [pc, #180]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d008      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008ebe:	4b29      	ldr	r3, [pc, #164]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ec2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eca:	4926      	ldr	r1, [pc, #152]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d008      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008edc:	4b21      	ldr	r3, [pc, #132]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ee0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee8:	491e      	ldr	r1, [pc, #120]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00d      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008efa:	4b1a      	ldr	r3, [pc, #104]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	4a19      	ldr	r2, [pc, #100]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008f00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f04:	6113      	str	r3, [r2, #16]
 8008f06:	4b17      	ldr	r3, [pc, #92]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008f08:	691a      	ldr	r2, [r3, #16]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008f10:	4914      	ldr	r1, [pc, #80]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	da08      	bge.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008f1e:	4b11      	ldr	r3, [pc, #68]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f2a:	490e      	ldr	r1, [pc, #56]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d009      	beq.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f3c:	4b09      	ldr	r3, [pc, #36]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f4a:	4906      	ldr	r1, [pc, #24]	; (8008f64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008f50:	7dbb      	ldrb	r3, [r7, #22]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	e000      	b.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	58024400 	.word	0x58024400

08008f68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b090      	sub	sp, #64	; 0x40
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f76:	f040 8089 	bne.w	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008f7a:	4b91      	ldr	r3, [pc, #580]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f7e:	f003 0307 	and.w	r3, r3, #7
 8008f82:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	2b04      	cmp	r3, #4
 8008f88:	d87d      	bhi.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8008f8a:	a201      	add	r2, pc, #4	; (adr r2, 8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f90:	08008fa5 	.word	0x08008fa5
 8008f94:	08008fc9 	.word	0x08008fc9
 8008f98:	08008fed 	.word	0x08008fed
 8008f9c:	08009081 	.word	0x08009081
 8008fa0:	08009011 	.word	0x08009011
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fa4:	4b86      	ldr	r3, [pc, #536]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fb0:	d107      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 fec2 	bl	8009d40 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fc0:	e3f4      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fc6:	e3f1      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fc8:	4b7d      	ldr	r3, [pc, #500]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fd4:	d107      	bne.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fd6:	f107 0318 	add.w	r3, r7, #24
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fc08 	bl	80097f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fe4:	e3e2      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fea:	e3df      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fec:	4b74      	ldr	r3, [pc, #464]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff8:	d107      	bne.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ffa:	f107 030c 	add.w	r3, r7, #12
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 fd4a 	bl	8009a98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009008:	e3d0      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800900e:	e3cd      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009010:	4b6b      	ldr	r3, [pc, #428]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009014:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009018:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800901a:	4b69      	ldr	r3, [pc, #420]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 0304 	and.w	r3, r3, #4
 8009022:	2b04      	cmp	r3, #4
 8009024:	d10c      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8009026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009028:	2b00      	cmp	r3, #0
 800902a:	d109      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800902c:	4b64      	ldr	r3, [pc, #400]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	08db      	lsrs	r3, r3, #3
 8009032:	f003 0303 	and.w	r3, r3, #3
 8009036:	4a63      	ldr	r2, [pc, #396]	; (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009038:	fa22 f303 	lsr.w	r3, r2, r3
 800903c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800903e:	e01e      	b.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009040:	4b5f      	ldr	r3, [pc, #380]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800904c:	d106      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800904e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009050:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009054:	d102      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009056:	4b5c      	ldr	r3, [pc, #368]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800905a:	e010      	b.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800905c:	4b58      	ldr	r3, [pc, #352]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009068:	d106      	bne.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800906a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009070:	d102      	bne.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009072:	4b56      	ldr	r3, [pc, #344]	; (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8009074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009076:	e002      	b.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800907c:	e396      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800907e:	e395      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009080:	4b53      	ldr	r3, [pc, #332]	; (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009082:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009084:	e392      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800908a:	e38f      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009092:	f040 809f 	bne.w	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8009096:	4b4a      	ldr	r3, [pc, #296]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800909a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800909e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80090a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090a6:	d04d      	beq.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80090a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ae:	f200 8084 	bhi.w	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80090b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b4:	2bc0      	cmp	r3, #192	; 0xc0
 80090b6:	d07d      	beq.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80090b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ba:	2bc0      	cmp	r3, #192	; 0xc0
 80090bc:	d87d      	bhi.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80090be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c0:	2b80      	cmp	r3, #128	; 0x80
 80090c2:	d02d      	beq.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	2b80      	cmp	r3, #128	; 0x80
 80090c8:	d877      	bhi.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d003      	beq.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80090d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d2:	2b40      	cmp	r3, #64	; 0x40
 80090d4:	d012      	beq.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80090d6:	e070      	b.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090d8:	4b39      	ldr	r3, [pc, #228]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090e4:	d107      	bne.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 fe28 	bl	8009d40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090f4:	e35a      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090fa:	e357      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090fc:	4b30      	ldr	r3, [pc, #192]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009108:	d107      	bne.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800910a:	f107 0318 	add.w	r3, r7, #24
 800910e:	4618      	mov	r0, r3
 8009110:	f000 fb6e 	bl	80097f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009118:	e348      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800911e:	e345      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009120:	4b27      	ldr	r3, [pc, #156]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800912c:	d107      	bne.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800912e:	f107 030c 	add.w	r3, r7, #12
 8009132:	4618      	mov	r0, r3
 8009134:	f000 fcb0 	bl	8009a98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800913c:	e336      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009142:	e333      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009144:	4b1e      	ldr	r3, [pc, #120]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009148:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800914c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800914e:	4b1c      	ldr	r3, [pc, #112]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 0304 	and.w	r3, r3, #4
 8009156:	2b04      	cmp	r3, #4
 8009158:	d10c      	bne.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 800915a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915c:	2b00      	cmp	r3, #0
 800915e:	d109      	bne.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009160:	4b17      	ldr	r3, [pc, #92]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	08db      	lsrs	r3, r3, #3
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	4a16      	ldr	r2, [pc, #88]	; (80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800916c:	fa22 f303 	lsr.w	r3, r2, r3
 8009170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009172:	e01e      	b.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009174:	4b12      	ldr	r3, [pc, #72]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800917c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009180:	d106      	bne.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8009182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009188:	d102      	bne.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800918a:	4b0f      	ldr	r3, [pc, #60]	; (80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800918c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800918e:	e010      	b.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009190:	4b0b      	ldr	r3, [pc, #44]	; (80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800919c:	d106      	bne.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800919e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091a4:	d102      	bne.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80091a6:	4b09      	ldr	r3, [pc, #36]	; (80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80091a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091aa:	e002      	b.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80091b0:	e2fc      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80091b2:	e2fb      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80091b4:	4b06      	ldr	r3, [pc, #24]	; (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091b8:	e2f8      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80091ba:	2300      	movs	r3, #0
 80091bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091be:	e2f5      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80091c0:	58024400 	.word	0x58024400
 80091c4:	03d09000 	.word	0x03d09000
 80091c8:	003d0900 	.word	0x003d0900
 80091cc:	016e3600 	.word	0x016e3600
 80091d0:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091da:	f040 809c 	bne.w	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 80091de:	4b9d      	ldr	r3, [pc, #628]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80091e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e2:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80091e6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80091e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091ee:	d054      	beq.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80091f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091f6:	f200 808b 	bhi.w	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009200:	f000 8083 	beq.w	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009206:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800920a:	f200 8081 	bhi.w	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 800920e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009214:	d02f      	beq.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800921c:	d878      	bhi.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 800921e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009220:	2b00      	cmp	r3, #0
 8009222:	d004      	beq.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8009224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800922a:	d012      	beq.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800922c:	e070      	b.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800922e:	4b89      	ldr	r3, [pc, #548]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009236:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800923a:	d107      	bne.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800923c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009240:	4618      	mov	r0, r3
 8009242:	f000 fd7d 	bl	8009d40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009248:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800924a:	e2af      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800924c:	2300      	movs	r3, #0
 800924e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009250:	e2ac      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009252:	4b80      	ldr	r3, [pc, #512]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800925a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800925e:	d107      	bne.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009260:	f107 0318 	add.w	r3, r7, #24
 8009264:	4618      	mov	r0, r3
 8009266:	f000 fac3 	bl	80097f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800926e:	e29d      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009270:	2300      	movs	r3, #0
 8009272:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009274:	e29a      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009276:	4b77      	ldr	r3, [pc, #476]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800927e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009282:	d107      	bne.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009284:	f107 030c 	add.w	r3, r7, #12
 8009288:	4618      	mov	r0, r3
 800928a:	f000 fc05 	bl	8009a98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009292:	e28b      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009294:	2300      	movs	r3, #0
 8009296:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009298:	e288      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800929a:	4b6e      	ldr	r3, [pc, #440]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800929c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800929e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092a2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092a4:	4b6b      	ldr	r3, [pc, #428]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0304 	and.w	r3, r3, #4
 80092ac:	2b04      	cmp	r3, #4
 80092ae:	d10c      	bne.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 80092b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d109      	bne.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092b6:	4b67      	ldr	r3, [pc, #412]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	08db      	lsrs	r3, r3, #3
 80092bc:	f003 0303 	and.w	r3, r3, #3
 80092c0:	4a65      	ldr	r2, [pc, #404]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 80092c2:	fa22 f303 	lsr.w	r3, r2, r3
 80092c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092c8:	e01e      	b.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092ca:	4b62      	ldr	r3, [pc, #392]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d6:	d106      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80092d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092de:	d102      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80092e0:	4b5e      	ldr	r3, [pc, #376]	; (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80092e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092e4:	e010      	b.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092e6:	4b5b      	ldr	r3, [pc, #364]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092f2:	d106      	bne.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80092f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092fa:	d102      	bne.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80092fc:	4b58      	ldr	r3, [pc, #352]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 80092fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009300:	e002      	b.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009302:	2300      	movs	r3, #0
 8009304:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8009306:	e251      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009308:	e250      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800930a:	4b56      	ldr	r3, [pc, #344]	; (8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800930c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800930e:	e24d      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8009310:	2300      	movs	r3, #0
 8009312:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009314:	e24a      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800931c:	f040 80a7 	bne.w	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009320:	4b4c      	ldr	r3, [pc, #304]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009324:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009328:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800932a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009330:	d055      	beq.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009338:	f200 8096 	bhi.w	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009342:	f000 8084 	beq.w	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8009346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009348:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800934c:	f200 808c 	bhi.w	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8009350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009356:	d030      	beq.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800935e:	f200 8083 	bhi.w	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8009362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009364:	2b00      	cmp	r3, #0
 8009366:	d004      	beq.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8009368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800936e:	d012      	beq.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8009370:	e07a      	b.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009372:	4b38      	ldr	r3, [pc, #224]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800937a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800937e:	d107      	bne.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009384:	4618      	mov	r0, r3
 8009386:	f000 fcdb 	bl	8009d40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800938a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800938e:	e20d      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009390:	2300      	movs	r3, #0
 8009392:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009394:	e20a      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009396:	4b2f      	ldr	r3, [pc, #188]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800939e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093a2:	d107      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093a4:	f107 0318 	add.w	r3, r7, #24
 80093a8:	4618      	mov	r0, r3
 80093aa:	f000 fa21 	bl	80097f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093b2:	e1fb      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80093b4:	2300      	movs	r3, #0
 80093b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093b8:	e1f8      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093ba:	4b26      	ldr	r3, [pc, #152]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c6:	d107      	bne.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093c8:	f107 030c 	add.w	r3, r7, #12
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 fb63 	bl	8009a98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80093d6:	e1e9      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093dc:	e1e6      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80093de:	4b1d      	ldr	r3, [pc, #116]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80093e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093e6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093e8:	4b1a      	ldr	r3, [pc, #104]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0304 	and.w	r3, r3, #4
 80093f0:	2b04      	cmp	r3, #4
 80093f2:	d10c      	bne.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80093f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d109      	bne.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093fa:	4b16      	ldr	r3, [pc, #88]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	08db      	lsrs	r3, r3, #3
 8009400:	f003 0303 	and.w	r3, r3, #3
 8009404:	4a14      	ldr	r2, [pc, #80]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8009406:	fa22 f303 	lsr.w	r3, r2, r3
 800940a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800940c:	e01e      	b.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800940e:	4b11      	ldr	r3, [pc, #68]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800941a:	d106      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 800941c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009422:	d102      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009424:	4b0d      	ldr	r3, [pc, #52]	; (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8009426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009428:	e010      	b.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800942a:	4b0a      	ldr	r3, [pc, #40]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009432:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009436:	d106      	bne.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800943a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800943e:	d102      	bne.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009440:	4b07      	ldr	r3, [pc, #28]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8009442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009444:	e002      	b.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009446:	2300      	movs	r3, #0
 8009448:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800944a:	e1af      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800944c:	e1ae      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800944e:	4b05      	ldr	r3, [pc, #20]	; (8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009450:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009452:	e1ab      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009454:	58024400 	.word	0x58024400
 8009458:	03d09000 	.word	0x03d09000
 800945c:	003d0900 	.word	0x003d0900
 8009460:	016e3600 	.word	0x016e3600
 8009464:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800946c:	e19e      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009474:	d173      	bne.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009476:	4b9d      	ldr	r3, [pc, #628]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800947a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800947e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009486:	d02f      	beq.n	80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8009488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800948e:	d863      	bhi.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009492:	2b00      	cmp	r3, #0
 8009494:	d004      	beq.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800949c:	d012      	beq.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 800949e:	e05b      	b.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094a0:	4b92      	ldr	r3, [pc, #584]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094ac:	d107      	bne.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094ae:	f107 0318 	add.w	r3, r7, #24
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 f99c 	bl	80097f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094bc:	e176      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80094be:	2300      	movs	r3, #0
 80094c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094c2:	e173      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094c4:	4b89      	ldr	r3, [pc, #548]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094d0:	d107      	bne.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094d2:	f107 030c 	add.w	r3, r7, #12
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 fade 	bl	8009a98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094e0:	e164      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80094e2:	2300      	movs	r3, #0
 80094e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094e6:	e161      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80094e8:	4b80      	ldr	r3, [pc, #512]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80094ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094f0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094f2:	4b7e      	ldr	r3, [pc, #504]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0304 	and.w	r3, r3, #4
 80094fa:	2b04      	cmp	r3, #4
 80094fc:	d10c      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 80094fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009500:	2b00      	cmp	r3, #0
 8009502:	d109      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009504:	4b79      	ldr	r3, [pc, #484]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	08db      	lsrs	r3, r3, #3
 800950a:	f003 0303 	and.w	r3, r3, #3
 800950e:	4a78      	ldr	r2, [pc, #480]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009510:	fa22 f303 	lsr.w	r3, r2, r3
 8009514:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009516:	e01e      	b.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009518:	4b74      	ldr	r3, [pc, #464]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009524:	d106      	bne.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009528:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800952c:	d102      	bne.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800952e:	4b71      	ldr	r3, [pc, #452]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009530:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009532:	e010      	b.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009534:	4b6d      	ldr	r3, [pc, #436]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800953c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009540:	d106      	bne.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009548:	d102      	bne.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800954a:	4b6b      	ldr	r3, [pc, #428]	; (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800954c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800954e:	e002      	b.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009550:	2300      	movs	r3, #0
 8009552:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009554:	e12a      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009556:	e129      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8009558:	2300      	movs	r3, #0
 800955a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800955c:	e126      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009564:	d133      	bne.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009566:	4b61      	ldr	r3, [pc, #388]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800956a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800956e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009572:	2b00      	cmp	r3, #0
 8009574:	d004      	beq.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8009576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800957c:	d012      	beq.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800957e:	e023      	b.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009580:	4b5a      	ldr	r3, [pc, #360]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800958c:	d107      	bne.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800958e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009592:	4618      	mov	r0, r3
 8009594:	f000 fbd4 	bl	8009d40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800959c:	e106      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095a2:	e103      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095a4:	4b51      	ldr	r3, [pc, #324]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095b0:	d107      	bne.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095b2:	f107 0318 	add.w	r3, r7, #24
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 f91a 	bl	80097f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80095c0:	e0f4      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80095c2:	2300      	movs	r3, #0
 80095c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095c6:	e0f1      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095cc:	e0ee      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095d4:	f040 809b 	bne.w	800970e <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80095d8:	4b44      	ldr	r3, [pc, #272]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80095da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095dc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80095e0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80095e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80095e8:	f000 808b 	beq.w	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80095ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ee:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80095f2:	f200 8089 	bhi.w	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80095f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095fc:	d06c      	beq.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80095fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009600:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009604:	f200 8080 	bhi.w	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800960e:	d056      	beq.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8009610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009616:	d877      	bhi.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800961e:	d03b      	beq.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009626:	d86f      	bhi.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800962e:	d021      	beq.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8009630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009636:	d867      	bhi.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963a:	2b00      	cmp	r3, #0
 800963c:	d004      	beq.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800963e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009640:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009644:	d004      	beq.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8009646:	e05f      	b.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009648:	f000 f8bc 	bl	80097c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800964c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800964e:	e0ad      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009650:	4b26      	ldr	r3, [pc, #152]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800965c:	d107      	bne.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800965e:	f107 0318 	add.w	r3, r7, #24
 8009662:	4618      	mov	r0, r3
 8009664:	f000 f8c4 	bl	80097f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800966c:	e09e      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009672:	e09b      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009674:	4b1d      	ldr	r3, [pc, #116]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800967c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009680:	d107      	bne.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009682:	f107 030c 	add.w	r3, r7, #12
 8009686:	4618      	mov	r0, r3
 8009688:	f000 fa06 	bl	8009a98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009690:	e08c      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009692:	2300      	movs	r3, #0
 8009694:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009696:	e089      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009698:	4b14      	ldr	r3, [pc, #80]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 0304 	and.w	r3, r3, #4
 80096a0:	2b04      	cmp	r3, #4
 80096a2:	d109      	bne.n	80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096a4:	4b11      	ldr	r3, [pc, #68]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	08db      	lsrs	r3, r3, #3
 80096aa:	f003 0303 	and.w	r3, r3, #3
 80096ae:	4a10      	ldr	r2, [pc, #64]	; (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80096b0:	fa22 f303 	lsr.w	r3, r2, r3
 80096b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80096b6:	e079      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80096b8:	2300      	movs	r3, #0
 80096ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096bc:	e076      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80096be:	4b0b      	ldr	r3, [pc, #44]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096ca:	d102      	bne.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 80096cc:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80096ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096d0:	e06c      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096d6:	e069      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096d8:	4b04      	ldr	r3, [pc, #16]	; (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096e4:	d10a      	bne.n	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 80096e6:	4b04      	ldr	r3, [pc, #16]	; (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80096e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80096ea:	e05f      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80096ec:	58024400 	.word	0x58024400
 80096f0:	03d09000 	.word	0x03d09000
 80096f4:	003d0900 	.word	0x003d0900
 80096f8:	016e3600 	.word	0x016e3600
          frequency = 0;
 80096fc:	2300      	movs	r3, #0
 80096fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009700:	e054      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009702:	4b2d      	ldr	r3, [pc, #180]	; (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009704:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009706:	e051      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009708:	2300      	movs	r3, #0
 800970a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800970c:	e04e      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009714:	d148      	bne.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009716:	4b29      	ldr	r3, [pc, #164]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800971a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800971e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009726:	d02a      	beq.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800972e:	d838      	bhi.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009732:	2b00      	cmp	r3, #0
 8009734:	d004      	beq.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8009736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800973c:	d00d      	beq.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800973e:	e030      	b.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009740:	4b1e      	ldr	r3, [pc, #120]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800974c:	d102      	bne.n	8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 800974e:	4b1c      	ldr	r3, [pc, #112]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009750:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009752:	e02b      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009754:	2300      	movs	r3, #0
 8009756:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009758:	e028      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800975a:	4b18      	ldr	r3, [pc, #96]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009762:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009766:	d107      	bne.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800976c:	4618      	mov	r0, r3
 800976e:	f000 fae7 	bl	8009d40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009774:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009776:	e019      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009778:	2300      	movs	r3, #0
 800977a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800977c:	e016      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800977e:	4b0f      	ldr	r3, [pc, #60]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800978a:	d107      	bne.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800978c:	f107 0318 	add.w	r3, r7, #24
 8009790:	4618      	mov	r0, r3
 8009792:	f000 f82d 	bl	80097f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800979a:	e007      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097a0:	e004      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097a6:	e001      	b.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 80097a8:	2300      	movs	r3, #0
 80097aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80097ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3740      	adds	r7, #64	; 0x40
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	00bb8000 	.word	0x00bb8000
 80097bc:	58024400 	.word	0x58024400
 80097c0:	016e3600 	.word	0x016e3600

080097c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80097c8:	f7fe fc66 	bl	8008098 <HAL_RCC_GetHCLKFreq>
 80097cc:	4602      	mov	r2, r0
 80097ce:	4b06      	ldr	r3, [pc, #24]	; (80097e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	091b      	lsrs	r3, r3, #4
 80097d4:	f003 0307 	and.w	r3, r3, #7
 80097d8:	4904      	ldr	r1, [pc, #16]	; (80097ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80097da:	5ccb      	ldrb	r3, [r1, r3]
 80097dc:	f003 031f 	and.w	r3, r3, #31
 80097e0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	58024400 	.word	0x58024400
 80097ec:	08017d08 	.word	0x08017d08

080097f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b089      	sub	sp, #36	; 0x24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097f8:	4ba1      	ldr	r3, [pc, #644]	; (8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fc:	f003 0303 	and.w	r3, r3, #3
 8009800:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009802:	4b9f      	ldr	r3, [pc, #636]	; (8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009806:	0b1b      	lsrs	r3, r3, #12
 8009808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800980c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800980e:	4b9c      	ldr	r3, [pc, #624]	; (8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009812:	091b      	lsrs	r3, r3, #4
 8009814:	f003 0301 	and.w	r3, r3, #1
 8009818:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800981a:	4b99      	ldr	r3, [pc, #612]	; (8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800981c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800981e:	08db      	lsrs	r3, r3, #3
 8009820:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	fb02 f303 	mul.w	r3, r2, r3
 800982a:	ee07 3a90 	vmov	s15, r3
 800982e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009832:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 8111 	beq.w	8009a60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	2b02      	cmp	r3, #2
 8009842:	f000 8083 	beq.w	800994c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	2b02      	cmp	r3, #2
 800984a:	f200 80a1 	bhi.w	8009990 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d003      	beq.n	800985c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d056      	beq.n	8009908 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800985a:	e099      	b.n	8009990 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800985c:	4b88      	ldr	r3, [pc, #544]	; (8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 0320 	and.w	r3, r3, #32
 8009864:	2b00      	cmp	r3, #0
 8009866:	d02d      	beq.n	80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009868:	4b85      	ldr	r3, [pc, #532]	; (8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	08db      	lsrs	r3, r3, #3
 800986e:	f003 0303 	and.w	r3, r3, #3
 8009872:	4a84      	ldr	r2, [pc, #528]	; (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009874:	fa22 f303 	lsr.w	r3, r2, r3
 8009878:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	ee07 3a90 	vmov	s15, r3
 8009880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	ee07 3a90 	vmov	s15, r3
 800988a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800988e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009892:	4b7b      	ldr	r3, [pc, #492]	; (8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800989a:	ee07 3a90 	vmov	s15, r3
 800989e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80098a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80098c2:	e087      	b.n	80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	ee07 3a90 	vmov	s15, r3
 80098ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80098d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098d6:	4b6a      	ldr	r3, [pc, #424]	; (8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098de:	ee07 3a90 	vmov	s15, r3
 80098e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009902:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009906:	e065      	b.n	80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	ee07 3a90 	vmov	s15, r3
 800990e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009912:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991a:	4b59      	ldr	r3, [pc, #356]	; (8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800991c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009922:	ee07 3a90 	vmov	s15, r3
 8009926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992a:	ed97 6a03 	vldr	s12, [r7, #12]
 800992e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800993e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009946:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800994a:	e043      	b.n	80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	ee07 3a90 	vmov	s15, r3
 8009952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009956:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800995a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800995e:	4b48      	ldr	r3, [pc, #288]	; (8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009966:	ee07 3a90 	vmov	s15, r3
 800996a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800996e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009972:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800997e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800998e:	e021      	b.n	80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	ee07 3a90 	vmov	s15, r3
 8009996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800999e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099a2:	4b37      	ldr	r3, [pc, #220]	; (8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099aa:	ee07 3a90 	vmov	s15, r3
 80099ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80099d4:	4b2a      	ldr	r3, [pc, #168]	; (8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d8:	0a5b      	lsrs	r3, r3, #9
 80099da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80099f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099fa:	ee17 2a90 	vmov	r2, s15
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009a02:	4b1f      	ldr	r3, [pc, #124]	; (8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a06:	0c1b      	lsrs	r3, r3, #16
 8009a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a0c:	ee07 3a90 	vmov	s15, r3
 8009a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a28:	ee17 2a90 	vmov	r2, s15
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009a30:	4b13      	ldr	r3, [pc, #76]	; (8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a34:	0e1b      	lsrs	r3, r3, #24
 8009a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a3a:	ee07 3a90 	vmov	s15, r3
 8009a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a56:	ee17 2a90 	vmov	r2, s15
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a5e:	e008      	b.n	8009a72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	609a      	str	r2, [r3, #8]
}
 8009a72:	bf00      	nop
 8009a74:	3724      	adds	r7, #36	; 0x24
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	58024400 	.word	0x58024400
 8009a84:	03d09000 	.word	0x03d09000
 8009a88:	46000000 	.word	0x46000000
 8009a8c:	4c742400 	.word	0x4c742400
 8009a90:	4a742400 	.word	0x4a742400
 8009a94:	4bb71b00 	.word	0x4bb71b00

08009a98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b089      	sub	sp, #36	; 0x24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009aa0:	4ba1      	ldr	r3, [pc, #644]	; (8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa4:	f003 0303 	and.w	r3, r3, #3
 8009aa8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009aaa:	4b9f      	ldr	r3, [pc, #636]	; (8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aae:	0d1b      	lsrs	r3, r3, #20
 8009ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ab4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009ab6:	4b9c      	ldr	r3, [pc, #624]	; (8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aba:	0a1b      	lsrs	r3, r3, #8
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009ac2:	4b99      	ldr	r3, [pc, #612]	; (8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ac6:	08db      	lsrs	r3, r3, #3
 8009ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009acc:	693a      	ldr	r2, [r7, #16]
 8009ace:	fb02 f303 	mul.w	r3, r2, r3
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ada:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 8111 	beq.w	8009d08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	f000 8083 	beq.w	8009bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	f200 80a1 	bhi.w	8009c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d003      	beq.n	8009b04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d056      	beq.n	8009bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009b02:	e099      	b.n	8009c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b04:	4b88      	ldr	r3, [pc, #544]	; (8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0320 	and.w	r3, r3, #32
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d02d      	beq.n	8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b10:	4b85      	ldr	r3, [pc, #532]	; (8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	08db      	lsrs	r3, r3, #3
 8009b16:	f003 0303 	and.w	r3, r3, #3
 8009b1a:	4a84      	ldr	r2, [pc, #528]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b20:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	ee07 3a90 	vmov	s15, r3
 8009b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	ee07 3a90 	vmov	s15, r3
 8009b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b3a:	4b7b      	ldr	r3, [pc, #492]	; (8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b42:	ee07 3a90 	vmov	s15, r3
 8009b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b4e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b66:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b6a:	e087      	b.n	8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	ee07 3a90 	vmov	s15, r3
 8009b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b76:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b7e:	4b6a      	ldr	r3, [pc, #424]	; (8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b86:	ee07 3a90 	vmov	s15, r3
 8009b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b92:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009baa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bae:	e065      	b.n	8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	ee07 3a90 	vmov	s15, r3
 8009bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bc2:	4b59      	ldr	r3, [pc, #356]	; (8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bca:	ee07 3a90 	vmov	s15, r3
 8009bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bd6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bf2:	e043      	b.n	8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	ee07 3a90 	vmov	s15, r3
 8009bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bfe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c06:	4b48      	ldr	r3, [pc, #288]	; (8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c0e:	ee07 3a90 	vmov	s15, r3
 8009c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c36:	e021      	b.n	8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	ee07 3a90 	vmov	s15, r3
 8009c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c4a:	4b37      	ldr	r3, [pc, #220]	; (8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c52:	ee07 3a90 	vmov	s15, r3
 8009c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009c7c:	4b2a      	ldr	r3, [pc, #168]	; (8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c80:	0a5b      	lsrs	r3, r3, #9
 8009c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c96:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca2:	ee17 2a90 	vmov	r2, s15
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009caa:	4b1f      	ldr	r3, [pc, #124]	; (8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cae:	0c1b      	lsrs	r3, r3, #16
 8009cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cb4:	ee07 3a90 	vmov	s15, r3
 8009cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cd0:	ee17 2a90 	vmov	r2, s15
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009cd8:	4b13      	ldr	r3, [pc, #76]	; (8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cdc:	0e1b      	lsrs	r3, r3, #24
 8009cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ce2:	ee07 3a90 	vmov	s15, r3
 8009ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cfe:	ee17 2a90 	vmov	r2, s15
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009d06:	e008      	b.n	8009d1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	609a      	str	r2, [r3, #8]
}
 8009d1a:	bf00      	nop
 8009d1c:	3724      	adds	r7, #36	; 0x24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	58024400 	.word	0x58024400
 8009d2c:	03d09000 	.word	0x03d09000
 8009d30:	46000000 	.word	0x46000000
 8009d34:	4c742400 	.word	0x4c742400
 8009d38:	4a742400 	.word	0x4a742400
 8009d3c:	4bb71b00 	.word	0x4bb71b00

08009d40 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b089      	sub	sp, #36	; 0x24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d48:	4ba0      	ldr	r3, [pc, #640]	; (8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4c:	f003 0303 	and.w	r3, r3, #3
 8009d50:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009d52:	4b9e      	ldr	r3, [pc, #632]	; (8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d56:	091b      	lsrs	r3, r3, #4
 8009d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d5c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009d5e:	4b9b      	ldr	r3, [pc, #620]	; (8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d62:	f003 0301 	and.w	r3, r3, #1
 8009d66:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009d68:	4b98      	ldr	r3, [pc, #608]	; (8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d6c:	08db      	lsrs	r3, r3, #3
 8009d6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d72:	693a      	ldr	r2, [r7, #16]
 8009d74:	fb02 f303 	mul.w	r3, r2, r3
 8009d78:	ee07 3a90 	vmov	s15, r3
 8009d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d80:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f000 8111 	beq.w	8009fae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	f000 8083 	beq.w	8009e9a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	f200 80a1 	bhi.w	8009ede <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d056      	beq.n	8009e56 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009da8:	e099      	b.n	8009ede <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009daa:	4b88      	ldr	r3, [pc, #544]	; (8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0320 	and.w	r3, r3, #32
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d02d      	beq.n	8009e12 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009db6:	4b85      	ldr	r3, [pc, #532]	; (8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	08db      	lsrs	r3, r3, #3
 8009dbc:	f003 0303 	and.w	r3, r3, #3
 8009dc0:	4a83      	ldr	r2, [pc, #524]	; (8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	ee07 3a90 	vmov	s15, r3
 8009dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009de0:	4b7a      	ldr	r3, [pc, #488]	; (8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de8:	ee07 3a90 	vmov	s15, r3
 8009dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009df0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009df4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009df8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e0c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e10:	e087      	b.n	8009f22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	ee07 3a90 	vmov	s15, r3
 8009e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009e20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e24:	4b69      	ldr	r3, [pc, #420]	; (8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e2c:	ee07 3a90 	vmov	s15, r3
 8009e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e34:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e38:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e54:	e065      	b.n	8009f22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	ee07 3a90 	vmov	s15, r3
 8009e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e60:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009fdc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009e64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e68:	4b58      	ldr	r3, [pc, #352]	; (8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e70:	ee07 3a90 	vmov	s15, r3
 8009e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e78:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e7c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e98:	e043      	b.n	8009f22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	ee07 3a90 	vmov	s15, r3
 8009ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009ea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eac:	4b47      	ldr	r3, [pc, #284]	; (8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb4:	ee07 3a90 	vmov	s15, r3
 8009eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ebc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ec0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ec4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ecc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009edc:	e021      	b.n	8009f22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	ee07 3a90 	vmov	s15, r3
 8009ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009eec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ef0:	4b36      	ldr	r3, [pc, #216]	; (8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef8:	ee07 3a90 	vmov	s15, r3
 8009efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f00:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f04:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f20:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009f22:	4b2a      	ldr	r3, [pc, #168]	; (8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f26:	0a5b      	lsrs	r3, r3, #9
 8009f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f2c:	ee07 3a90 	vmov	s15, r3
 8009f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f48:	ee17 2a90 	vmov	r2, s15
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009f50:	4b1e      	ldr	r3, [pc, #120]	; (8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f54:	0c1b      	lsrs	r3, r3, #16
 8009f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f5a:	ee07 3a90 	vmov	s15, r3
 8009f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f76:	ee17 2a90 	vmov	r2, s15
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009f7e:	4b13      	ldr	r3, [pc, #76]	; (8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f82:	0e1b      	lsrs	r3, r3, #24
 8009f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f88:	ee07 3a90 	vmov	s15, r3
 8009f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f98:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fa4:	ee17 2a90 	vmov	r2, s15
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009fac:	e008      	b.n	8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	609a      	str	r2, [r3, #8]
}
 8009fc0:	bf00      	nop
 8009fc2:	3724      	adds	r7, #36	; 0x24
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	58024400 	.word	0x58024400
 8009fd0:	03d09000 	.word	0x03d09000
 8009fd4:	46000000 	.word	0x46000000
 8009fd8:	4c742400 	.word	0x4c742400
 8009fdc:	4a742400 	.word	0x4a742400
 8009fe0:	4bb71b00 	.word	0x4bb71b00

08009fe4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ff2:	4b53      	ldr	r3, [pc, #332]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 8009ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff6:	f003 0303 	and.w	r3, r3, #3
 8009ffa:	2b03      	cmp	r3, #3
 8009ffc:	d101      	bne.n	800a002 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e099      	b.n	800a136 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a002:	4b4f      	ldr	r3, [pc, #316]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a4e      	ldr	r2, [pc, #312]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a008:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a00c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a00e:	f7f9 fe77 	bl	8003d00 <HAL_GetTick>
 800a012:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a014:	e008      	b.n	800a028 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a016:	f7f9 fe73 	bl	8003d00 <HAL_GetTick>
 800a01a:	4602      	mov	r2, r0
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	1ad3      	subs	r3, r2, r3
 800a020:	2b02      	cmp	r3, #2
 800a022:	d901      	bls.n	800a028 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a024:	2303      	movs	r3, #3
 800a026:	e086      	b.n	800a136 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a028:	4b45      	ldr	r3, [pc, #276]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1f0      	bne.n	800a016 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a034:	4b42      	ldr	r3, [pc, #264]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a038:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	031b      	lsls	r3, r3, #12
 800a042:	493f      	ldr	r1, [pc, #252]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a044:	4313      	orrs	r3, r2
 800a046:	628b      	str	r3, [r1, #40]	; 0x28
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	3b01      	subs	r3, #1
 800a058:	025b      	lsls	r3, r3, #9
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	431a      	orrs	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	3b01      	subs	r3, #1
 800a064:	041b      	lsls	r3, r3, #16
 800a066:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a06a:	431a      	orrs	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	3b01      	subs	r3, #1
 800a072:	061b      	lsls	r3, r3, #24
 800a074:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a078:	4931      	ldr	r1, [pc, #196]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a07e:	4b30      	ldr	r3, [pc, #192]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a082:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	492d      	ldr	r1, [pc, #180]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a090:	4b2b      	ldr	r3, [pc, #172]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a094:	f023 0220 	bic.w	r2, r3, #32
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	4928      	ldr	r1, [pc, #160]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a0a2:	4b27      	ldr	r3, [pc, #156]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a6:	4a26      	ldr	r2, [pc, #152]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0a8:	f023 0310 	bic.w	r3, r3, #16
 800a0ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a0ae:	4b24      	ldr	r3, [pc, #144]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0b2:	4b24      	ldr	r3, [pc, #144]	; (800a144 <RCCEx_PLL2_Config+0x160>)
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	69d2      	ldr	r2, [r2, #28]
 800a0ba:	00d2      	lsls	r2, r2, #3
 800a0bc:	4920      	ldr	r1, [pc, #128]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a0c2:	4b1f      	ldr	r3, [pc, #124]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c6:	4a1e      	ldr	r2, [pc, #120]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0c8:	f043 0310 	orr.w	r3, r3, #16
 800a0cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d106      	bne.n	800a0e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0d4:	4b1a      	ldr	r3, [pc, #104]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d8:	4a19      	ldr	r2, [pc, #100]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0e0:	e00f      	b.n	800a102 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d106      	bne.n	800a0f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a0e8:	4b15      	ldr	r3, [pc, #84]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ec:	4a14      	ldr	r2, [pc, #80]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0f4:	e005      	b.n	800a102 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0f6:	4b12      	ldr	r3, [pc, #72]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fa:	4a11      	ldr	r2, [pc, #68]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a0fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a100:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a102:	4b0f      	ldr	r3, [pc, #60]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a0e      	ldr	r2, [pc, #56]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a108:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a10c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a10e:	f7f9 fdf7 	bl	8003d00 <HAL_GetTick>
 800a112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a114:	e008      	b.n	800a128 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a116:	f7f9 fdf3 	bl	8003d00 <HAL_GetTick>
 800a11a:	4602      	mov	r2, r0
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	1ad3      	subs	r3, r2, r3
 800a120:	2b02      	cmp	r3, #2
 800a122:	d901      	bls.n	800a128 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a124:	2303      	movs	r3, #3
 800a126:	e006      	b.n	800a136 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a128:	4b05      	ldr	r3, [pc, #20]	; (800a140 <RCCEx_PLL2_Config+0x15c>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a130:	2b00      	cmp	r3, #0
 800a132:	d0f0      	beq.n	800a116 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a134:	7bfb      	ldrb	r3, [r7, #15]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	58024400 	.word	0x58024400
 800a144:	ffff0007 	.word	0xffff0007

0800a148 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a156:	4b53      	ldr	r3, [pc, #332]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15a:	f003 0303 	and.w	r3, r3, #3
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d101      	bne.n	800a166 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e099      	b.n	800a29a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a166:	4b4f      	ldr	r3, [pc, #316]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a4e      	ldr	r2, [pc, #312]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a16c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a172:	f7f9 fdc5 	bl	8003d00 <HAL_GetTick>
 800a176:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a178:	e008      	b.n	800a18c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a17a:	f7f9 fdc1 	bl	8003d00 <HAL_GetTick>
 800a17e:	4602      	mov	r2, r0
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	2b02      	cmp	r3, #2
 800a186:	d901      	bls.n	800a18c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a188:	2303      	movs	r3, #3
 800a18a:	e086      	b.n	800a29a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a18c:	4b45      	ldr	r3, [pc, #276]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1f0      	bne.n	800a17a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a198:	4b42      	ldr	r3, [pc, #264]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	051b      	lsls	r3, r3, #20
 800a1a6:	493f      	ldr	r1, [pc, #252]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	628b      	str	r3, [r1, #40]	; 0x28
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	025b      	lsls	r3, r3, #9
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	431a      	orrs	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	041b      	lsls	r3, r3, #16
 800a1ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1ce:	431a      	orrs	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	061b      	lsls	r3, r3, #24
 800a1d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1dc:	4931      	ldr	r1, [pc, #196]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1e2:	4b30      	ldr	r3, [pc, #192]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	695b      	ldr	r3, [r3, #20]
 800a1ee:	492d      	ldr	r1, [pc, #180]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1f4:	4b2b      	ldr	r3, [pc, #172]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	4928      	ldr	r1, [pc, #160]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a202:	4313      	orrs	r3, r2
 800a204:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a206:	4b27      	ldr	r3, [pc, #156]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20a:	4a26      	ldr	r2, [pc, #152]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a20c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a210:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a212:	4b24      	ldr	r3, [pc, #144]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a216:	4b24      	ldr	r3, [pc, #144]	; (800a2a8 <RCCEx_PLL3_Config+0x160>)
 800a218:	4013      	ands	r3, r2
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	69d2      	ldr	r2, [r2, #28]
 800a21e:	00d2      	lsls	r2, r2, #3
 800a220:	4920      	ldr	r1, [pc, #128]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a222:	4313      	orrs	r3, r2
 800a224:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a226:	4b1f      	ldr	r3, [pc, #124]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22a:	4a1e      	ldr	r2, [pc, #120]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a22c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a230:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d106      	bne.n	800a246 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a238:	4b1a      	ldr	r3, [pc, #104]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23c:	4a19      	ldr	r2, [pc, #100]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a23e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a242:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a244:	e00f      	b.n	800a266 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d106      	bne.n	800a25a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a24c:	4b15      	ldr	r3, [pc, #84]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a250:	4a14      	ldr	r2, [pc, #80]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a252:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a256:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a258:	e005      	b.n	800a266 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a25a:	4b12      	ldr	r3, [pc, #72]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25e:	4a11      	ldr	r2, [pc, #68]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a264:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a266:	4b0f      	ldr	r3, [pc, #60]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a0e      	ldr	r2, [pc, #56]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a26c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a272:	f7f9 fd45 	bl	8003d00 <HAL_GetTick>
 800a276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a278:	e008      	b.n	800a28c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a27a:	f7f9 fd41 	bl	8003d00 <HAL_GetTick>
 800a27e:	4602      	mov	r2, r0
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	2b02      	cmp	r3, #2
 800a286:	d901      	bls.n	800a28c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a288:	2303      	movs	r3, #3
 800a28a:	e006      	b.n	800a29a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a28c:	4b05      	ldr	r3, [pc, #20]	; (800a2a4 <RCCEx_PLL3_Config+0x15c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a294:	2b00      	cmp	r3, #0
 800a296:	d0f0      	beq.n	800a27a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a298:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	58024400 	.word	0x58024400
 800a2a8:	ffff0007 	.word	0xffff0007

0800a2ac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08a      	sub	sp, #40	; 0x28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e075      	b.n	800a3aa <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d105      	bne.n	800a2d6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7f8 fd0f 	bl	8002cf4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2204      	movs	r2, #4
 800a2da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f868 	bl	800a3b4 <HAL_SD_InitCard>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e05d      	b.n	800a3aa <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a2ee:	f107 0308 	add.w	r3, r7, #8
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 fda9 	bl	800ae4c <HAL_SD_GetCardStatus>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d001      	beq.n	800a304 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	e052      	b.n	800a3aa <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a304:	7e3b      	ldrb	r3, [r7, #24]
 800a306:	b2db      	uxtb	r3, r3
 800a308:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a30a:	7e7b      	ldrb	r3, [r7, #25]
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a314:	2b01      	cmp	r3, #1
 800a316:	d10a      	bne.n	800a32e <HAL_SD_Init+0x82>
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d102      	bne.n	800a324 <HAL_SD_Init+0x78>
 800a31e:	6a3b      	ldr	r3, [r7, #32]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d004      	beq.n	800a32e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a32a:	659a      	str	r2, [r3, #88]	; 0x58
 800a32c:	e00b      	b.n	800a346 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a332:	2b01      	cmp	r3, #1
 800a334:	d104      	bne.n	800a340 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a33c:	659a      	str	r2, [r3, #88]	; 0x58
 800a33e:	e002      	b.n	800a346 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	4619      	mov	r1, r3
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fe67 	bl	800b020 <HAL_SD_ConfigWideBusOperation>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	e026      	b.n	800a3aa <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a35c:	f7f9 fcd0 	bl	8003d00 <HAL_GetTick>
 800a360:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a362:	e011      	b.n	800a388 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a364:	f7f9 fccc 	bl	8003d00 <HAL_GetTick>
 800a368:	4602      	mov	r2, r0
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	1ad3      	subs	r3, r2, r3
 800a36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a372:	d109      	bne.n	800a388 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a37a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800a384:	2303      	movs	r3, #3
 800a386:	e010      	b.n	800a3aa <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 ff5b 	bl	800b244 <HAL_SD_GetCardState>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b04      	cmp	r3, #4
 800a392:	d1e7      	bne.n	800a364 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3728      	adds	r7, #40	; 0x28
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
	...

0800a3b4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a3b4:	b590      	push	{r4, r7, lr}
 800a3b6:	b08d      	sub	sp, #52	; 0x34
 800a3b8:	af02      	add	r7, sp, #8
 800a3ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a3d0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a3d4:	f7fe fdc8 	bl	8008f68 <HAL_RCCEx_GetPeriphCLKFreq>
 800a3d8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d109      	bne.n	800a3f4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a3ee:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e06a      	b.n	800a4ca <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	0a1b      	lsrs	r3, r3, #8
 800a3f8:	4a36      	ldr	r2, [pc, #216]	; (800a4d4 <HAL_SD_InitCard+0x120>)
 800a3fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a3fe:	091b      	lsrs	r3, r3, #4
 800a400:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681c      	ldr	r4, [r3, #0]
 800a406:	466a      	mov	r2, sp
 800a408:	f107 0318 	add.w	r3, r7, #24
 800a40c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a410:	e882 0003 	stmia.w	r2, {r0, r1}
 800a414:	f107 030c 	add.w	r3, r7, #12
 800a418:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a41a:	4620      	mov	r0, r4
 800a41c:	f006 ff32 	bl	8011284 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4618      	mov	r0, r3
 800a426:	f006 ff75 	bl	8011314 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	005b      	lsls	r3, r3, #1
 800a42e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a430:	fbb2 f3f3 	udiv	r3, r2, r3
 800a434:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a436:	4a28      	ldr	r2, [pc, #160]	; (800a4d8 <HAL_SD_InitCard+0x124>)
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a43e:	3301      	adds	r3, #1
 800a440:	4618      	mov	r0, r3
 800a442:	f7f9 fc69 	bl	8003d18 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 ffea 	bl	800b420 <SD_PowerON>
 800a44c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a44e:	6a3b      	ldr	r3, [r7, #32]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00b      	beq.n	800a46c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a460:	6a3b      	ldr	r3, [r7, #32]
 800a462:	431a      	orrs	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e02e      	b.n	800a4ca <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 ff09 	bl	800b284 <SD_InitCard>
 800a472:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a474:	6a3b      	ldr	r3, [r7, #32]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00b      	beq.n	800a492 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a486:	6a3b      	ldr	r3, [r7, #32]
 800a488:	431a      	orrs	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	e01b      	b.n	800a4ca <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a49a:	4618      	mov	r0, r3
 800a49c:	f006 ffd0 	bl	8011440 <SDMMC_CmdBlockLength>
 800a4a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00f      	beq.n	800a4c8 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a0b      	ldr	r2, [pc, #44]	; (800a4dc <HAL_SD_InitCard+0x128>)
 800a4ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	431a      	orrs	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e000      	b.n	800a4ca <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	372c      	adds	r7, #44	; 0x2c
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd90      	pop	{r4, r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	014f8b59 	.word	0x014f8b59
 800a4d8:	00012110 	.word	0x00012110
 800a4dc:	1fe00fff 	.word	0x1fe00fff

0800a4e0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b08c      	sub	sp, #48	; 0x30
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d107      	bne.n	800a508 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	e08d      	b.n	800a624 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b01      	cmp	r3, #1
 800a512:	f040 8086 	bne.w	800a622 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a51c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	441a      	add	r2, r3
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a526:	429a      	cmp	r2, r3
 800a528:	d907      	bls.n	800a53a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a52e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	e074      	b.n	800a624 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2203      	movs	r2, #3
 800a53e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2200      	movs	r2, #0
 800a548:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	025a      	lsls	r2, r3, #9
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d002      	beq.n	800a566 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800a560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a562:	025b      	lsls	r3, r3, #9
 800a564:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a566:	f04f 33ff 	mov.w	r3, #4294967295
 800a56a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	025b      	lsls	r3, r3, #9
 800a570:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a572:	2390      	movs	r3, #144	; 0x90
 800a574:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a576:	2302      	movs	r3, #2
 800a578:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a57e:	2300      	movs	r3, #0
 800a580:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f107 0210 	add.w	r2, r7, #16
 800a58a:	4611      	mov	r1, r2
 800a58c:	4618      	mov	r0, r3
 800a58e:	f006 ff2b 	bl	80113e8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68da      	ldr	r2, [r3, #12]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5a0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d90a      	bls.n	800a5ce <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2282      	movs	r2, #130	; 0x82
 800a5bc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f006 ff81 	bl	80114cc <SDMMC_CmdReadMultiBlock>
 800a5ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a5cc:	e009      	b.n	800a5e2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2281      	movs	r2, #129	; 0x81
 800a5d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f006 ff53 	bl	8011486 <SDMMC_CmdReadSingleBlock>
 800a5e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d012      	beq.n	800a60e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a0f      	ldr	r2, [pc, #60]	; (800a62c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a5ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f6:	431a      	orrs	r2, r3
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	e00a      	b.n	800a624 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a61c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800a61e:	2300      	movs	r3, #0
 800a620:	e000      	b.n	800a624 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a622:	2302      	movs	r3, #2
  }
}
 800a624:	4618      	mov	r0, r3
 800a626:	3730      	adds	r7, #48	; 0x30
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	1fe00fff 	.word	0x1fe00fff

0800a630 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b08c      	sub	sp, #48	; 0x30
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
 800a63c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d107      	bne.n	800a658 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	e08d      	b.n	800a774 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	2b01      	cmp	r3, #1
 800a662:	f040 8086 	bne.w	800a772 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a66c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	441a      	add	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a676:	429a      	cmp	r2, r3
 800a678:	d907      	bls.n	800a68a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	e074      	b.n	800a774 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2203      	movs	r2, #3
 800a68e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2200      	movs	r2, #0
 800a698:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	025a      	lsls	r2, r3, #9
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d002      	beq.n	800a6b6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b2:	025b      	lsls	r3, r3, #9
 800a6b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a6b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ba:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	025b      	lsls	r3, r3, #9
 800a6c0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a6c2:	2390      	movs	r3, #144	; 0x90
 800a6c4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f107 0210 	add.w	r2, r7, #16
 800a6da:	4611      	mov	r1, r2
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f006 fe83 	bl	80113e8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68da      	ldr	r2, [r3, #12]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6f0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2201      	movs	r2, #1
 800a700:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	2b01      	cmp	r3, #1
 800a706:	d90a      	bls.n	800a71e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	22a0      	movs	r2, #160	; 0xa0
 800a70c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a714:	4618      	mov	r0, r3
 800a716:	f006 ff1f 	bl	8011558 <SDMMC_CmdWriteMultiBlock>
 800a71a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a71c:	e009      	b.n	800a732 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2290      	movs	r2, #144	; 0x90
 800a722:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a72a:	4618      	mov	r0, r3
 800a72c:	f006 fef1 	bl	8011512 <SDMMC_CmdWriteSingleBlock>
 800a730:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a734:	2b00      	cmp	r3, #0
 800a736:	d012      	beq.n	800a75e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a0f      	ldr	r2, [pc, #60]	; (800a77c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a73e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a746:	431a      	orrs	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	e00a      	b.n	800a774 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a76c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a76e:	2300      	movs	r3, #0
 800a770:	e000      	b.n	800a774 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a772:	2302      	movs	r3, #2
  }
}
 800a774:	4618      	mov	r0, r3
 800a776:	3730      	adds	r7, #48	; 0x30
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	1fe00fff 	.word	0x1fe00fff

0800a780 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d008      	beq.n	800a7ae <HAL_SD_IRQHandler+0x2e>
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f003 0308 	and.w	r3, r3, #8
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d003      	beq.n	800a7ae <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f001 f926 	bl	800b9f8 <SD_Read_IT>
 800a7ac:	e19a      	b.n	800aae4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 80ac 	beq.w	800a916 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7c6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	4b59      	ldr	r3, [pc, #356]	; (800a938 <HAL_SD_IRQHandler+0x1b8>)
 800a7d4:	400b      	ands	r3, r1
 800a7d6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a7e6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68da      	ldr	r2, [r3, #12]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7f6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f003 0308 	and.w	r3, r3, #8
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d038      	beq.n	800a874 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f003 0302 	and.w	r3, r3, #2
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d104      	bne.n	800a816 <HAL_SD_IRQHandler+0x96>
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f003 0320 	and.w	r3, r3, #32
 800a812:	2b00      	cmp	r3, #0
 800a814:	d011      	beq.n	800a83a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f006 fec0 	bl	80115a0 <SDMMC_CmdStopTransfer>
 800a820:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d008      	beq.n	800a83a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	431a      	orrs	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f95b 	bl	800aaf0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a3f      	ldr	r2, [pc, #252]	; (800a93c <HAL_SD_IRQHandler+0x1bc>)
 800a840:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f003 0301 	and.w	r3, r3, #1
 800a856:	2b00      	cmp	r3, #0
 800a858:	d104      	bne.n	800a864 <HAL_SD_IRQHandler+0xe4>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f003 0302 	and.w	r3, r3, #2
 800a860:	2b00      	cmp	r3, #0
 800a862:	d003      	beq.n	800a86c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f007 fb73 	bl	8011f50 <HAL_SD_RxCpltCallback>
 800a86a:	e13b      	b.n	800aae4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f007 fb65 	bl	8011f3c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a872:	e137      	b.n	800aae4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f000 8132 	beq.w	800aae4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2200      	movs	r2, #0
 800a886:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2200      	movs	r2, #0
 800a88e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2200      	movs	r2, #0
 800a896:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f003 0302 	and.w	r3, r3, #2
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d104      	bne.n	800a8ac <HAL_SD_IRQHandler+0x12c>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f003 0320 	and.w	r3, r3, #32
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d011      	beq.n	800a8d0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f006 fe75 	bl	80115a0 <SDMMC_CmdStopTransfer>
 800a8b6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d008      	beq.n	800a8d0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	431a      	orrs	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f910 	bl	800aaf0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f003 0310 	and.w	r3, r3, #16
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d104      	bne.n	800a8f2 <HAL_SD_IRQHandler+0x172>
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f003 0320 	and.w	r3, r3, #32
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d002      	beq.n	800a8f8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f007 fb22 	bl	8011f3c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d105      	bne.n	800a90e <HAL_SD_IRQHandler+0x18e>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f003 0302 	and.w	r3, r3, #2
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f000 80eb 	beq.w	800aae4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f007 fb1e 	bl	8011f50 <HAL_SD_RxCpltCallback>
}
 800a914:	e0e6      	b.n	800aae4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a91c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00d      	beq.n	800a940 <HAL_SD_IRQHandler+0x1c0>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f003 0308 	and.w	r3, r3, #8
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d008      	beq.n	800a940 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f001 f8a8 	bl	800ba84 <SD_Write_IT>
 800a934:	e0d6      	b.n	800aae4 <HAL_SD_IRQHandler+0x364>
 800a936:	bf00      	nop
 800a938:	ffff3ec5 	.word	0xffff3ec5
 800a93c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a946:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f000 809d 	beq.w	800aa8a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a956:	f003 0302 	and.w	r3, r3, #2
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d005      	beq.n	800a96a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a962:	f043 0202 	orr.w	r2, r3, #2
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a970:	f003 0308 	and.w	r3, r3, #8
 800a974:	2b00      	cmp	r3, #0
 800a976:	d005      	beq.n	800a984 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a97c:	f043 0208 	orr.w	r2, r3, #8
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a98a:	f003 0320 	and.w	r3, r3, #32
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d005      	beq.n	800a99e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a996:	f043 0220 	orr.w	r2, r3, #32
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a4:	f003 0310 	and.w	r3, r3, #16
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d005      	beq.n	800a9b8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9b0:	f043 0210 	orr.w	r2, r3, #16
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a4b      	ldr	r2, [pc, #300]	; (800aaec <HAL_SD_IRQHandler+0x36c>)
 800a9be:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a9ce:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68da      	ldr	r2, [r3, #12]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9de:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a9ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68da      	ldr	r2, [r3, #12]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a9fe:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4618      	mov	r0, r3
 800aa06:	f006 fdcb 	bl	80115a0 <SDMMC_CmdStopTransfer>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa10:	431a      	orrs	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68da      	ldr	r2, [r3, #12]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa24:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa2e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f003 0308 	and.w	r3, r3, #8
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00a      	beq.n	800aa50 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 f851 	bl	800aaf0 <HAL_SD_ErrorCallback>
}
 800aa4e:	e049      	b.n	800aae4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d044      	beq.n	800aae4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d040      	beq.n	800aae4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800aa70:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2200      	movs	r2, #0
 800aa78:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f834 	bl	800aaf0 <HAL_SD_ErrorCallback>
}
 800aa88:	e02c      	b.n	800aae4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d025      	beq.n	800aae4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaa0:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaa8:	f003 0304 	and.w	r3, r3, #4
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10c      	bne.n	800aaca <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f003 0320 	and.w	r3, r3, #32
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d003      	beq.n	800aac2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f001 f84a 	bl	800bb54 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800aac0:	e010      	b.n	800aae4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f001 f832 	bl	800bb2c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800aac8:	e00c      	b.n	800aae4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f003 0320 	and.w	r3, r3, #32
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d003      	beq.n	800aadc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f001 f833 	bl	800bb40 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800aada:	e003      	b.n	800aae4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f001 f81b 	bl	800bb18 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800aae2:	e7ff      	b.n	800aae4 <HAL_SD_IRQHandler+0x364>
 800aae4:	bf00      	nop
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	18000f3a 	.word	0x18000f3a

0800aaf0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800aaf8:	bf00      	nop
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab12:	0f9b      	lsrs	r3, r3, #30
 800ab14:	b2da      	uxtb	r2, r3
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab1e:	0e9b      	lsrs	r3, r3, #26
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	f003 030f 	and.w	r3, r3, #15
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab30:	0e1b      	lsrs	r3, r3, #24
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	f003 0303 	and.w	r3, r3, #3
 800ab38:	b2da      	uxtb	r2, r3
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab42:	0c1b      	lsrs	r3, r3, #16
 800ab44:	b2da      	uxtb	r2, r3
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab4e:	0a1b      	lsrs	r3, r3, #8
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab64:	0d1b      	lsrs	r3, r3, #20
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab70:	0c1b      	lsrs	r3, r3, #16
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	f003 030f 	and.w	r3, r3, #15
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab82:	0bdb      	lsrs	r3, r3, #15
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	f003 0301 	and.w	r3, r3, #1
 800ab8a:	b2da      	uxtb	r2, r3
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab94:	0b9b      	lsrs	r3, r3, #14
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	f003 0301 	and.w	r3, r3, #1
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aba6:	0b5b      	lsrs	r3, r3, #13
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	f003 0301 	and.w	r3, r3, #1
 800abae:	b2da      	uxtb	r2, r3
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abb8:	0b1b      	lsrs	r3, r3, #12
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	f003 0301 	and.w	r3, r3, #1
 800abc0:	b2da      	uxtb	r2, r3
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2200      	movs	r2, #0
 800abca:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d163      	bne.n	800ac9c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abd8:	009a      	lsls	r2, r3, #2
 800abda:	f640 73fc 	movw	r3, #4092	; 0xffc
 800abde:	4013      	ands	r3, r2
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800abe4:	0f92      	lsrs	r2, r2, #30
 800abe6:	431a      	orrs	r2, r3
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abf0:	0edb      	lsrs	r3, r3, #27
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	f003 0307 	and.w	r3, r3, #7
 800abf8:	b2da      	uxtb	r2, r3
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac02:	0e1b      	lsrs	r3, r3, #24
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	f003 0307 	and.w	r3, r3, #7
 800ac0a:	b2da      	uxtb	r2, r3
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac14:	0d5b      	lsrs	r3, r3, #21
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	f003 0307 	and.w	r3, r3, #7
 800ac1c:	b2da      	uxtb	r2, r3
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac26:	0c9b      	lsrs	r3, r3, #18
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	f003 0307 	and.w	r3, r3, #7
 800ac2e:	b2da      	uxtb	r2, r3
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac38:	0bdb      	lsrs	r3, r3, #15
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	f003 0307 	and.w	r3, r3, #7
 800ac40:	b2da      	uxtb	r2, r3
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	1c5a      	adds	r2, r3, #1
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	7e1b      	ldrb	r3, [r3, #24]
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	f003 0307 	and.w	r3, r3, #7
 800ac5a:	3302      	adds	r3, #2
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac66:	fb03 f202 	mul.w	r2, r3, r2
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	7a1b      	ldrb	r3, [r3, #8]
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	f003 030f 	and.w	r3, r3, #15
 800ac78:	2201      	movs	r2, #1
 800ac7a:	409a      	lsls	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ac88:	0a52      	lsrs	r2, r2, #9
 800ac8a:	fb03 f202 	mul.w	r2, r3, r2
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac98:	655a      	str	r2, [r3, #84]	; 0x54
 800ac9a:	e031      	b.n	800ad00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d11d      	bne.n	800ace0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aca8:	041b      	lsls	r3, r3, #16
 800acaa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acb2:	0c1b      	lsrs	r3, r3, #16
 800acb4:	431a      	orrs	r2, r3
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	3301      	adds	r3, #1
 800acc0:	029a      	lsls	r2, r3, #10
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acd4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	655a      	str	r2, [r3, #84]	; 0x54
 800acde:	e00f      	b.n	800ad00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a58      	ldr	r2, [pc, #352]	; (800ae48 <HAL_SD_GetCardCSD+0x344>)
 800ace6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	e09d      	b.n	800ae3c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad04:	0b9b      	lsrs	r3, r3, #14
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	b2da      	uxtb	r2, r3
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad16:	09db      	lsrs	r3, r3, #7
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad2e:	b2da      	uxtb	r2, r3
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad38:	0fdb      	lsrs	r3, r3, #31
 800ad3a:	b2da      	uxtb	r2, r3
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad44:	0f5b      	lsrs	r3, r3, #29
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	f003 0303 	and.w	r3, r3, #3
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad56:	0e9b      	lsrs	r3, r3, #26
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	f003 0307 	and.w	r3, r3, #7
 800ad5e:	b2da      	uxtb	r2, r3
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad68:	0d9b      	lsrs	r3, r3, #22
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	f003 030f 	and.w	r3, r3, #15
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad7a:	0d5b      	lsrs	r3, r3, #21
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	f003 0301 	and.w	r3, r3, #1
 800ad82:	b2da      	uxtb	r2, r3
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad96:	0c1b      	lsrs	r3, r3, #16
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	f003 0301 	and.w	r3, r3, #1
 800ad9e:	b2da      	uxtb	r2, r3
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adaa:	0bdb      	lsrs	r3, r3, #15
 800adac:	b2db      	uxtb	r3, r3
 800adae:	f003 0301 	and.w	r3, r3, #1
 800adb2:	b2da      	uxtb	r2, r3
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adbe:	0b9b      	lsrs	r3, r3, #14
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	f003 0301 	and.w	r3, r3, #1
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800add2:	0b5b      	lsrs	r3, r3, #13
 800add4:	b2db      	uxtb	r3, r3
 800add6:	f003 0301 	and.w	r3, r3, #1
 800adda:	b2da      	uxtb	r2, r3
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ade6:	0b1b      	lsrs	r3, r3, #12
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	f003 0301 	and.w	r3, r3, #1
 800adee:	b2da      	uxtb	r2, r3
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adfa:	0a9b      	lsrs	r3, r3, #10
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	f003 0303 	and.w	r3, r3, #3
 800ae02:	b2da      	uxtb	r2, r3
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae0e:	0a1b      	lsrs	r3, r3, #8
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	f003 0303 	and.w	r3, r3, #3
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae22:	085b      	lsrs	r3, r3, #1
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae2a:	b2da      	uxtb	r2, r3
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	2201      	movs	r2, #1
 800ae36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr
 800ae48:	1fe00fff 	.word	0x1fe00fff

0800ae4c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b094      	sub	sp, #80	; 0x50
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ae56:	2300      	movs	r3, #0
 800ae58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	2b03      	cmp	r3, #3
 800ae66:	d101      	bne.n	800ae6c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e0a7      	b.n	800afbc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ae6c:	f107 0308 	add.w	r3, r7, #8
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 fb62 	bl	800b53c <SD_SendSDStatus>
 800ae78:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d011      	beq.n	800aea4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a4f      	ldr	r2, [pc, #316]	; (800afc4 <HAL_SD_GetCardStatus+0x178>)
 800ae86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae8e:	431a      	orrs	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800aea2:	e070      	b.n	800af86 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	099b      	lsrs	r3, r3, #6
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	f003 0303 	and.w	r3, r3, #3
 800aeae:	b2da      	uxtb	r2, r3
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	095b      	lsrs	r3, r3, #5
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	0a1b      	lsrs	r3, r3, #8
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aece:	b29a      	uxth	r2, r3
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	0e1b      	lsrs	r3, r3, #24
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	4313      	orrs	r3, r2
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	061a      	lsls	r2, r3, #24
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	021b      	lsls	r3, r3, #8
 800aee6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aeea:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	0a1b      	lsrs	r3, r3, #8
 800aef0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aef4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	0e1b      	lsrs	r3, r3, #24
 800aefa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	b2da      	uxtb	r2, r3
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	0a1b      	lsrs	r3, r3, #8
 800af0c:	b2da      	uxtb	r2, r3
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	0d1b      	lsrs	r3, r3, #20
 800af16:	b2db      	uxtb	r3, r3
 800af18:	f003 030f 	and.w	r3, r3, #15
 800af1c:	b2da      	uxtb	r2, r3
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	0c1b      	lsrs	r3, r3, #16
 800af26:	b29b      	uxth	r3, r3
 800af28:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800af2c:	b29a      	uxth	r2, r3
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	b29b      	uxth	r3, r3
 800af32:	b2db      	uxtb	r3, r3
 800af34:	b29b      	uxth	r3, r3
 800af36:	4313      	orrs	r3, r2
 800af38:	b29a      	uxth	r2, r3
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	0a9b      	lsrs	r3, r3, #10
 800af42:	b2db      	uxtb	r3, r3
 800af44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	0a1b      	lsrs	r3, r3, #8
 800af52:	b2db      	uxtb	r3, r3
 800af54:	f003 0303 	and.w	r3, r3, #3
 800af58:	b2da      	uxtb	r2, r3
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	091b      	lsrs	r3, r3, #4
 800af62:	b2db      	uxtb	r3, r3
 800af64:	f003 030f 	and.w	r3, r3, #15
 800af68:	b2da      	uxtb	r2, r3
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	b2db      	uxtb	r3, r3
 800af72:	f003 030f 	and.w	r3, r3, #15
 800af76:	b2da      	uxtb	r2, r3
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	0e1b      	lsrs	r3, r3, #24
 800af80:	b2da      	uxtb	r2, r3
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af8e:	4618      	mov	r0, r3
 800af90:	f006 fa56 	bl	8011440 <SDMMC_CmdBlockLength>
 800af94:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800af96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d00d      	beq.n	800afb8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a08      	ldr	r2, [pc, #32]	; (800afc4 <HAL_SD_GetCardStatus+0x178>)
 800afa2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afa8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2201      	movs	r2, #1
 800afae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800afb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3750      	adds	r7, #80	; 0x50
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	1fe00fff 	.word	0x1fe00fff

0800afc8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b020:	b590      	push	{r4, r7, lr}
 800b022:	b08d      	sub	sp, #52	; 0x34
 800b024:	af02      	add	r7, sp, #8
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800b02a:	2300      	movs	r3, #0
 800b02c:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800b02e:	2300      	movs	r3, #0
 800b030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2203      	movs	r2, #3
 800b038:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b040:	2b03      	cmp	r3, #3
 800b042:	d02e      	beq.n	800b0a2 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b04a:	d106      	bne.n	800b05a <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b050:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	635a      	str	r2, [r3, #52]	; 0x34
 800b058:	e029      	b.n	800b0ae <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b060:	d10a      	bne.n	800b078 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 fb62 	bl	800b72c <SD_WideBus_Enable>
 800b068:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	431a      	orrs	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	635a      	str	r2, [r3, #52]	; 0x34
 800b076:	e01a      	b.n	800b0ae <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d10a      	bne.n	800b094 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fb9f 	bl	800b7c2 <SD_WideBus_Disable>
 800b084:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	431a      	orrs	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	635a      	str	r2, [r3, #52]	; 0x34
 800b092:	e00c      	b.n	800b0ae <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b098:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	635a      	str	r2, [r3, #52]	; 0x34
 800b0a0:	e005      	b.n	800b0ae <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d007      	beq.n	800b0c6 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a5e      	ldr	r2, [pc, #376]	; (800b234 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b0bc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b0c4:	e094      	b.n	800b1f0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b0c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b0ca:	f7fd ff4d 	bl	8008f68 <HAL_RCCEx_GetPeriphCLKFreq>
 800b0ce:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800b0d0:	6a3b      	ldr	r3, [r7, #32]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f000 8083 	beq.w	800b1de <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	695a      	ldr	r2, [r3, #20]
 800b0f2:	6a3b      	ldr	r3, [r7, #32]
 800b0f4:	4950      	ldr	r1, [pc, #320]	; (800b238 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b0f6:	fba1 1303 	umull	r1, r3, r1, r3
 800b0fa:	0e1b      	lsrs	r3, r3, #24
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d303      	bcc.n	800b108 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	61bb      	str	r3, [r7, #24]
 800b106:	e05a      	b.n	800b1be <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b10c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b110:	d103      	bne.n	800b11a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	695b      	ldr	r3, [r3, #20]
 800b116:	61bb      	str	r3, [r7, #24]
 800b118:	e051      	b.n	800b1be <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b11e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b122:	d126      	bne.n	800b172 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	695b      	ldr	r3, [r3, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10e      	bne.n	800b14a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800b12c:	6a3b      	ldr	r3, [r7, #32]
 800b12e:	4a43      	ldr	r2, [pc, #268]	; (800b23c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d906      	bls.n	800b142 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b134:	6a3b      	ldr	r3, [r7, #32]
 800b136:	4a40      	ldr	r2, [pc, #256]	; (800b238 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b138:	fba2 2303 	umull	r2, r3, r2, r3
 800b13c:	0e5b      	lsrs	r3, r3, #25
 800b13e:	61bb      	str	r3, [r7, #24]
 800b140:	e03d      	b.n	800b1be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	695b      	ldr	r3, [r3, #20]
 800b146:	61bb      	str	r3, [r7, #24]
 800b148:	e039      	b.n	800b1be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	695b      	ldr	r3, [r3, #20]
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	6a3a      	ldr	r2, [r7, #32]
 800b152:	fbb2 f3f3 	udiv	r3, r2, r3
 800b156:	4a39      	ldr	r2, [pc, #228]	; (800b23c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d906      	bls.n	800b16a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b15c:	6a3b      	ldr	r3, [r7, #32]
 800b15e:	4a36      	ldr	r2, [pc, #216]	; (800b238 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b160:	fba2 2303 	umull	r2, r3, r2, r3
 800b164:	0e5b      	lsrs	r3, r3, #25
 800b166:	61bb      	str	r3, [r7, #24]
 800b168:	e029      	b.n	800b1be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	695b      	ldr	r3, [r3, #20]
 800b16e:	61bb      	str	r3, [r7, #24]
 800b170:	e025      	b.n	800b1be <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	695b      	ldr	r3, [r3, #20]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10e      	bne.n	800b198 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	4a30      	ldr	r2, [pc, #192]	; (800b240 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d906      	bls.n	800b190 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b182:	6a3b      	ldr	r3, [r7, #32]
 800b184:	4a2c      	ldr	r2, [pc, #176]	; (800b238 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b186:	fba2 2303 	umull	r2, r3, r2, r3
 800b18a:	0e1b      	lsrs	r3, r3, #24
 800b18c:	61bb      	str	r3, [r7, #24]
 800b18e:	e016      	b.n	800b1be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	695b      	ldr	r3, [r3, #20]
 800b194:	61bb      	str	r3, [r7, #24]
 800b196:	e012      	b.n	800b1be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	695b      	ldr	r3, [r3, #20]
 800b19c:	005b      	lsls	r3, r3, #1
 800b19e:	6a3a      	ldr	r2, [r7, #32]
 800b1a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1a4:	4a26      	ldr	r2, [pc, #152]	; (800b240 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d906      	bls.n	800b1b8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b1aa:	6a3b      	ldr	r3, [r7, #32]
 800b1ac:	4a22      	ldr	r2, [pc, #136]	; (800b238 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b1ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b2:	0e1b      	lsrs	r3, r3, #24
 800b1b4:	61bb      	str	r3, [r7, #24]
 800b1b6:	e002      	b.n	800b1be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	695b      	ldr	r3, [r3, #20]
 800b1bc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681c      	ldr	r4, [r3, #0]
 800b1c2:	466a      	mov	r2, sp
 800b1c4:	f107 0314 	add.w	r3, r7, #20
 800b1c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b1cc:	e882 0003 	stmia.w	r2, {r0, r1}
 800b1d0:	f107 0308 	add.w	r3, r7, #8
 800b1d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f006 f854 	bl	8011284 <SDMMC_Init>
 800b1dc:	e008      	b.n	800b1f0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f006 f921 	bl	8011440 <SDMMC_CmdBlockLength>
 800b1fe:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00c      	beq.n	800b220 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a0a      	ldr	r2, [pc, #40]	; (800b234 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b20c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	431a      	orrs	r2, r3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	372c      	adds	r7, #44	; 0x2c
 800b230:	46bd      	mov	sp, r7
 800b232:	bd90      	pop	{r4, r7, pc}
 800b234:	1fe00fff 	.word	0x1fe00fff
 800b238:	55e63b89 	.word	0x55e63b89
 800b23c:	02faf080 	.word	0x02faf080
 800b240:	017d7840 	.word	0x017d7840

0800b244 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b24c:	2300      	movs	r3, #0
 800b24e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b250:	f107 030c 	add.w	r3, r7, #12
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fa40 	bl	800b6dc <SD_SendStatus>
 800b25c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d005      	beq.n	800b270 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	431a      	orrs	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	0a5b      	lsrs	r3, r3, #9
 800b274:	f003 030f 	and.w	r3, r3, #15
 800b278:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b27a:	693b      	ldr	r3, [r7, #16]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3718      	adds	r7, #24
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b090      	sub	sp, #64	; 0x40
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800b28c:	2300      	movs	r3, #0
 800b28e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800b290:	f7f8 fd36 	bl	8003d00 <HAL_GetTick>
 800b294:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f006 f84b 	bl	8011336 <SDMMC_GetPowerState>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d102      	bne.n	800b2ac <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b2a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b2aa:	e0b5      	b.n	800b418 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b0:	2b03      	cmp	r3, #3
 800b2b2:	d02e      	beq.n	800b312 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f006 fa96 	bl	80117ea <SDMMC_CmdSendCID>
 800b2be:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <SD_InitCard+0x46>
    {
      return errorstate;
 800b2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c8:	e0a6      	b.n	800b418 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f006 f876 	bl	80113c2 <SDMMC_GetResponse>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2104      	movs	r1, #4
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f006 f86d 	bl	80113c2 <SDMMC_GetResponse>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2108      	movs	r1, #8
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f006 f864 	bl	80113c2 <SDMMC_GetResponse>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	210c      	movs	r1, #12
 800b306:	4618      	mov	r0, r3
 800b308:	f006 f85b 	bl	80113c2 <SDMMC_GetResponse>
 800b30c:	4602      	mov	r2, r0
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b316:	2b03      	cmp	r3, #3
 800b318:	d01d      	beq.n	800b356 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800b31a:	e019      	b.n	800b350 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f107 020a 	add.w	r2, r7, #10
 800b324:	4611      	mov	r1, r2
 800b326:	4618      	mov	r0, r3
 800b328:	f006 fa9e 	bl	8011868 <SDMMC_CmdSetRelAdd>
 800b32c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800b32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b330:	2b00      	cmp	r3, #0
 800b332:	d001      	beq.n	800b338 <SD_InitCard+0xb4>
      {
        return errorstate;
 800b334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b336:	e06f      	b.n	800b418 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800b338:	f7f8 fce2 	bl	8003d00 <HAL_GetTick>
 800b33c:	4602      	mov	r2, r0
 800b33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	f241 3287 	movw	r2, #4999	; 0x1387
 800b346:	4293      	cmp	r3, r2
 800b348:	d902      	bls.n	800b350 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800b34a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b34e:	e063      	b.n	800b418 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800b350:	897b      	ldrh	r3, [r7, #10]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d0e2      	beq.n	800b31c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	d036      	beq.n	800b3cc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b35e:	897b      	ldrh	r3, [r7, #10]
 800b360:	461a      	mov	r2, r3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b36e:	041b      	lsls	r3, r3, #16
 800b370:	4619      	mov	r1, r3
 800b372:	4610      	mov	r0, r2
 800b374:	f006 fa58 	bl	8011828 <SDMMC_CmdSendCSD>
 800b378:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <SD_InitCard+0x100>
    {
      return errorstate;
 800b380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b382:	e049      	b.n	800b418 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2100      	movs	r1, #0
 800b38a:	4618      	mov	r0, r3
 800b38c:	f006 f819 	bl	80113c2 <SDMMC_GetResponse>
 800b390:	4602      	mov	r2, r0
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2104      	movs	r1, #4
 800b39c:	4618      	mov	r0, r3
 800b39e:	f006 f810 	bl	80113c2 <SDMMC_GetResponse>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2108      	movs	r1, #8
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f006 f807 	bl	80113c2 <SDMMC_GetResponse>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	210c      	movs	r1, #12
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f005 fffe 	bl	80113c2 <SDMMC_GetResponse>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2104      	movs	r1, #4
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f005 fff5 	bl	80113c2 <SDMMC_GetResponse>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	0d1a      	lsrs	r2, r3, #20
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b3e0:	f107 030c 	add.w	r3, r7, #12
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f7ff fb8c 	bl	800ab04 <HAL_SD_GetCardCSD>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d002      	beq.n	800b3f8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b3f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b3f6:	e00f      	b.n	800b418 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b400:	041b      	lsls	r3, r3, #16
 800b402:	4619      	mov	r1, r3
 800b404:	4610      	mov	r0, r2
 800b406:	f006 f907 	bl	8011618 <SDMMC_CmdSelDesel>
 800b40a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800b40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d001      	beq.n	800b416 <SD_InitCard+0x192>
  {
    return errorstate;
 800b412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b414:	e000      	b.n	800b418 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3740      	adds	r7, #64	; 0x40
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b428:	2300      	movs	r3, #0
 800b42a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b42c:	2300      	movs	r3, #0
 800b42e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b430:	2300      	movs	r3, #0
 800b432:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4618      	mov	r0, r3
 800b43a:	f006 f910 	bl	801165e <SDMMC_CmdGoIdleState>
 800b43e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <SD_PowerON+0x2a>
  {
    return errorstate;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	e072      	b.n	800b530 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4618      	mov	r0, r3
 800b450:	f006 f923 	bl	801169a <SDMMC_CmdOperCond>
 800b454:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b45c:	d10d      	bne.n	800b47a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4618      	mov	r0, r3
 800b46a:	f006 f8f8 	bl	801165e <SDMMC_CmdGoIdleState>
 800b46e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d004      	beq.n	800b480 <SD_PowerON+0x60>
    {
      return errorstate;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	e05a      	b.n	800b530 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2201      	movs	r2, #1
 800b47e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b484:	2b01      	cmp	r3, #1
 800b486:	d137      	bne.n	800b4f8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2100      	movs	r1, #0
 800b48e:	4618      	mov	r0, r3
 800b490:	f006 f923 	bl	80116da <SDMMC_CmdAppCommand>
 800b494:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d02d      	beq.n	800b4f8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b49c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b4a0:	e046      	b.n	800b530 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f006 f916 	bl	80116da <SDMMC_CmdAppCommand>
 800b4ae:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d001      	beq.n	800b4ba <SD_PowerON+0x9a>
    {
      return errorstate;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	e03a      	b.n	800b530 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	491e      	ldr	r1, [pc, #120]	; (800b538 <SD_PowerON+0x118>)
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f006 f92d 	bl	8011720 <SDMMC_CmdAppOperCommand>
 800b4c6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d002      	beq.n	800b4d4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b4ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b4d2:	e02d      	b.n	800b530 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2100      	movs	r1, #0
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f005 ff71 	bl	80113c2 <SDMMC_GetResponse>
 800b4e0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	0fdb      	lsrs	r3, r3, #31
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d101      	bne.n	800b4ee <SD_PowerON+0xce>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e000      	b.n	800b4f0 <SD_PowerON+0xd0>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	613b      	str	r3, [r7, #16]

    count++;
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d802      	bhi.n	800b508 <SD_PowerON+0xe8>
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d0cc      	beq.n	800b4a2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b50e:	4293      	cmp	r3, r2
 800b510:	d902      	bls.n	800b518 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b512:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b516:	e00b      	b.n	800b530 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b524:	2b00      	cmp	r3, #0
 800b526:	d002      	beq.n	800b52e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2201      	movs	r2, #1
 800b52c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3718      	adds	r7, #24
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	c1100000 	.word	0xc1100000

0800b53c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b08c      	sub	sp, #48	; 0x30
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b546:	f7f8 fbdb 	bl	8003d00 <HAL_GetTick>
 800b54a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2100      	movs	r1, #0
 800b556:	4618      	mov	r0, r3
 800b558:	f005 ff33 	bl	80113c2 <SDMMC_GetResponse>
 800b55c:	4603      	mov	r3, r0
 800b55e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b562:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b566:	d102      	bne.n	800b56e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b568:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b56c:	e0b0      	b.n	800b6d0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2140      	movs	r1, #64	; 0x40
 800b574:	4618      	mov	r0, r3
 800b576:	f005 ff63 	bl	8011440 <SDMMC_CmdBlockLength>
 800b57a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b57c:	6a3b      	ldr	r3, [r7, #32]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d005      	beq.n	800b58e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b58a:	6a3b      	ldr	r3, [r7, #32]
 800b58c:	e0a0      	b.n	800b6d0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b596:	041b      	lsls	r3, r3, #16
 800b598:	4619      	mov	r1, r3
 800b59a:	4610      	mov	r0, r2
 800b59c:	f006 f89d 	bl	80116da <SDMMC_CmdAppCommand>
 800b5a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b5a2:	6a3b      	ldr	r3, [r7, #32]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d005      	beq.n	800b5b4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b5b0:	6a3b      	ldr	r3, [r7, #32]
 800b5b2:	e08d      	b.n	800b6d0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b5b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5b8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b5ba:	2340      	movs	r3, #64	; 0x40
 800b5bc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b5be:	2360      	movs	r3, #96	; 0x60
 800b5c0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b5c2:	2302      	movs	r3, #2
 800b5c4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f107 0208 	add.w	r2, r7, #8
 800b5d6:	4611      	mov	r1, r2
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f005 ff05 	bl	80113e8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f006 f985 	bl	80118f2 <SDMMC_CmdStatusRegister>
 800b5e8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d02b      	beq.n	800b648 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b5f8:	6a3b      	ldr	r3, [r7, #32]
 800b5fa:	e069      	b.n	800b6d0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b606:	2b00      	cmp	r3, #0
 800b608:	d013      	beq.n	800b632 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b60a:	2300      	movs	r3, #0
 800b60c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b60e:	e00d      	b.n	800b62c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4618      	mov	r0, r3
 800b616:	f005 fe5f 	bl	80112d8 <SDMMC_ReadFIFO>
 800b61a:	4602      	mov	r2, r0
 800b61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61e:	601a      	str	r2, [r3, #0]
        pData++;
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	3304      	adds	r3, #4
 800b624:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800b626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b628:	3301      	adds	r3, #1
 800b62a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62e:	2b07      	cmp	r3, #7
 800b630:	d9ee      	bls.n	800b610 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b632:	f7f8 fb65 	bl	8003d00 <HAL_GetTick>
 800b636:	4602      	mov	r2, r0
 800b638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b640:	d102      	bne.n	800b648 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b642:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b646:	e043      	b.n	800b6d0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b64e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b652:	2b00      	cmp	r3, #0
 800b654:	d0d2      	beq.n	800b5fc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b65c:	f003 0308 	and.w	r3, r3, #8
 800b660:	2b00      	cmp	r3, #0
 800b662:	d001      	beq.n	800b668 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b664:	2308      	movs	r3, #8
 800b666:	e033      	b.n	800b6d0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b66e:	f003 0302 	and.w	r3, r3, #2
 800b672:	2b00      	cmp	r3, #0
 800b674:	d001      	beq.n	800b67a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b676:	2302      	movs	r3, #2
 800b678:	e02a      	b.n	800b6d0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b680:	f003 0320 	and.w	r3, r3, #32
 800b684:	2b00      	cmp	r3, #0
 800b686:	d017      	beq.n	800b6b8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b688:	2320      	movs	r3, #32
 800b68a:	e021      	b.n	800b6d0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4618      	mov	r0, r3
 800b692:	f005 fe21 	bl	80112d8 <SDMMC_ReadFIFO>
 800b696:	4602      	mov	r2, r0
 800b698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69a:	601a      	str	r2, [r3, #0]
    pData++;
 800b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69e:	3304      	adds	r3, #4
 800b6a0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b6a2:	f7f8 fb2d 	bl	8003d00 <HAL_GetTick>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6aa:	1ad3      	subs	r3, r2, r3
 800b6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6b0:	d102      	bne.n	800b6b8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b6b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6b6:	e00b      	b.n	800b6d0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1e2      	bne.n	800b68c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a03      	ldr	r2, [pc, #12]	; (800b6d8 <SD_SendSDStatus+0x19c>)
 800b6cc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3730      	adds	r7, #48	; 0x30
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	18000f3a 	.word	0x18000f3a

0800b6dc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d102      	bne.n	800b6f2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b6ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b6f0:	e018      	b.n	800b724 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6fa:	041b      	lsls	r3, r3, #16
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	4610      	mov	r0, r2
 800b700:	f006 f8d4 	bl	80118ac <SDMMC_CmdSendStatus>
 800b704:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	e009      	b.n	800b724 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2100      	movs	r1, #0
 800b716:	4618      	mov	r0, r3
 800b718:	f005 fe53 	bl	80113c2 <SDMMC_GetResponse>
 800b71c:	4602      	mov	r2, r0
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3710      	adds	r7, #16
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b086      	sub	sp, #24
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b734:	2300      	movs	r3, #0
 800b736:	60fb      	str	r3, [r7, #12]
 800b738:	2300      	movs	r3, #0
 800b73a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2100      	movs	r1, #0
 800b742:	4618      	mov	r0, r3
 800b744:	f005 fe3d 	bl	80113c2 <SDMMC_GetResponse>
 800b748:	4603      	mov	r3, r0
 800b74a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b74e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b752:	d102      	bne.n	800b75a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b754:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b758:	e02f      	b.n	800b7ba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b75a:	f107 030c 	add.w	r3, r7, #12
 800b75e:	4619      	mov	r1, r3
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 f879 	bl	800b858 <SD_FindSCR>
 800b766:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d001      	beq.n	800b772 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	e023      	b.n	800b7ba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d01c      	beq.n	800b7b6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b784:	041b      	lsls	r3, r3, #16
 800b786:	4619      	mov	r1, r3
 800b788:	4610      	mov	r0, r2
 800b78a:	f005 ffa6 	bl	80116da <SDMMC_CmdAppCommand>
 800b78e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	e00f      	b.n	800b7ba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2102      	movs	r1, #2
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f005 ffdd 	bl	8011760 <SDMMC_CmdBusWidth>
 800b7a6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d001      	beq.n	800b7b2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	e003      	b.n	800b7ba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	e001      	b.n	800b7ba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b7b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3718      	adds	r7, #24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b086      	sub	sp, #24
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	60fb      	str	r3, [r7, #12]
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f005 fdf2 	bl	80113c2 <SDMMC_GetResponse>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7e8:	d102      	bne.n	800b7f0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b7ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7ee:	e02f      	b.n	800b850 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b7f0:	f107 030c 	add.w	r3, r7, #12
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 f82e 	bl	800b858 <SD_FindSCR>
 800b7fc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d001      	beq.n	800b808 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	e023      	b.n	800b850 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d01c      	beq.n	800b84c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b81a:	041b      	lsls	r3, r3, #16
 800b81c:	4619      	mov	r1, r3
 800b81e:	4610      	mov	r0, r2
 800b820:	f005 ff5b 	bl	80116da <SDMMC_CmdAppCommand>
 800b824:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d001      	beq.n	800b830 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	e00f      	b.n	800b850 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2100      	movs	r1, #0
 800b836:	4618      	mov	r0, r3
 800b838:	f005 ff92 	bl	8011760 <SDMMC_CmdBusWidth>
 800b83c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d001      	beq.n	800b848 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	e003      	b.n	800b850 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b848:	2300      	movs	r3, #0
 800b84a:	e001      	b.n	800b850 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b84c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b850:	4618      	mov	r0, r3
 800b852:	3718      	adds	r7, #24
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b08e      	sub	sp, #56	; 0x38
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b862:	f7f8 fa4d 	bl	8003d00 <HAL_GetTick>
 800b866:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b868:	2300      	movs	r3, #0
 800b86a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b86c:	2300      	movs	r3, #0
 800b86e:	60bb      	str	r3, [r7, #8]
 800b870:	2300      	movs	r3, #0
 800b872:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2108      	movs	r1, #8
 800b87e:	4618      	mov	r0, r3
 800b880:	f005 fdde 	bl	8011440 <SDMMC_CmdBlockLength>
 800b884:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88e:	e0ad      	b.n	800b9ec <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b898:	041b      	lsls	r3, r3, #16
 800b89a:	4619      	mov	r1, r3
 800b89c:	4610      	mov	r0, r2
 800b89e:	f005 ff1c 	bl	80116da <SDMMC_CmdAppCommand>
 800b8a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <SD_FindSCR+0x56>
  {
    return errorstate;
 800b8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ac:	e09e      	b.n	800b9ec <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b8b2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b8b4:	2308      	movs	r3, #8
 800b8b6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b8b8:	2330      	movs	r3, #48	; 0x30
 800b8ba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b8bc:	2302      	movs	r3, #2
 800b8be:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f107 0210 	add.w	r2, r7, #16
 800b8d0:	4611      	mov	r1, r2
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f005 fd88 	bl	80113e8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f005 ff62 	bl	80117a6 <SDMMC_CmdSendSCR>
 800b8e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d027      	beq.n	800b93a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ec:	e07e      	b.n	800b9ec <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d113      	bne.n	800b924 <SD_FindSCR+0xcc>
 800b8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d110      	bne.n	800b924 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4618      	mov	r0, r3
 800b908:	f005 fce6 	bl	80112d8 <SDMMC_ReadFIFO>
 800b90c:	4603      	mov	r3, r0
 800b90e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4618      	mov	r0, r3
 800b916:	f005 fcdf 	bl	80112d8 <SDMMC_ReadFIFO>
 800b91a:	4603      	mov	r3, r0
 800b91c:	60fb      	str	r3, [r7, #12]
      index++;
 800b91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b920:	3301      	adds	r3, #1
 800b922:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b924:	f7f8 f9ec 	bl	8003d00 <HAL_GetTick>
 800b928:	4602      	mov	r2, r0
 800b92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b932:	d102      	bne.n	800b93a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b934:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b938:	e058      	b.n	800b9ec <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b940:	f240 532a 	movw	r3, #1322	; 0x52a
 800b944:	4013      	ands	r3, r2
 800b946:	2b00      	cmp	r3, #0
 800b948:	d0d1      	beq.n	800b8ee <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b950:	f003 0308 	and.w	r3, r3, #8
 800b954:	2b00      	cmp	r3, #0
 800b956:	d005      	beq.n	800b964 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2208      	movs	r2, #8
 800b95e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b960:	2308      	movs	r3, #8
 800b962:	e043      	b.n	800b9ec <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b96a:	f003 0302 	and.w	r3, r3, #2
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d005      	beq.n	800b97e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2202      	movs	r2, #2
 800b978:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b97a:	2302      	movs	r3, #2
 800b97c:	e036      	b.n	800b9ec <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b984:	f003 0320 	and.w	r3, r3, #32
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d005      	beq.n	800b998 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2220      	movs	r2, #32
 800b992:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b994:	2320      	movs	r3, #32
 800b996:	e029      	b.n	800b9ec <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a15      	ldr	r2, [pc, #84]	; (800b9f4 <SD_FindSCR+0x19c>)
 800b99e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	061a      	lsls	r2, r3, #24
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	021b      	lsls	r3, r3, #8
 800b9a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b9ac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	0a1b      	lsrs	r3, r3, #8
 800b9b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b9b6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	0e1b      	lsrs	r3, r3, #24
 800b9bc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c0:	601a      	str	r2, [r3, #0]
    scr++;
 800b9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c4:	3304      	adds	r3, #4
 800b9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	061a      	lsls	r2, r3, #24
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	021b      	lsls	r3, r3, #8
 800b9d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b9d4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	0a1b      	lsrs	r3, r3, #8
 800b9da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b9de:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	0e1b      	lsrs	r3, r3, #24
 800b9e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3738      	adds	r7, #56	; 0x38
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	18000f3a 	.word	0x18000f3a

0800b9f8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba04:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0a:	2b1f      	cmp	r3, #31
 800ba0c:	d936      	bls.n	800ba7c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ba0e:	2300      	movs	r3, #0
 800ba10:	617b      	str	r3, [r7, #20]
 800ba12:	e027      	b.n	800ba64 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f005 fc5d 	bl	80112d8 <SDMMC_ReadFIFO>
 800ba1e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	0a1b      	lsrs	r3, r3, #8
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	0c1b      	lsrs	r3, r3, #16
 800ba42:	b2da      	uxtb	r2, r3
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	0e1b      	lsrs	r3, r3, #24
 800ba52:	b2da      	uxtb	r2, r3
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	3301      	adds	r3, #1
 800ba62:	617b      	str	r3, [r7, #20]
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	2b07      	cmp	r3, #7
 800ba68:	d9d4      	bls.n	800ba14 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	693a      	ldr	r2, [r7, #16]
 800ba6e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba74:	f1a3 0220 	sub.w	r2, r3, #32
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800ba7c:	bf00      	nop
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b086      	sub	sp, #24
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	69db      	ldr	r3, [r3, #28]
 800ba90:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a1b      	ldr	r3, [r3, #32]
 800ba96:	2b1f      	cmp	r3, #31
 800ba98:	d93a      	bls.n	800bb10 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	617b      	str	r3, [r7, #20]
 800ba9e:	e02b      	b.n	800baf8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	3301      	adds	r3, #1
 800baaa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	021a      	lsls	r2, r3, #8
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	4313      	orrs	r3, r2
 800bab6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	3301      	adds	r3, #1
 800babc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	041a      	lsls	r2, r3, #16
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	3301      	adds	r3, #1
 800bace:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	061a      	lsls	r2, r3, #24
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	4313      	orrs	r3, r2
 800bada:	60fb      	str	r3, [r7, #12]
      tmp++;
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	3301      	adds	r3, #1
 800bae0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f107 020c 	add.w	r2, r7, #12
 800baea:	4611      	mov	r1, r2
 800baec:	4618      	mov	r0, r3
 800baee:	f005 fc00 	bl	80112f2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	3301      	adds	r3, #1
 800baf6:	617b      	str	r3, [r7, #20]
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	2b07      	cmp	r3, #7
 800bafc:	d9d0      	bls.n	800baa0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	693a      	ldr	r2, [r7, #16]
 800bb02:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6a1b      	ldr	r3, [r3, #32]
 800bb08:	f1a3 0220 	sub.w	r2, r3, #32
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	621a      	str	r2, [r3, #32]
  }
}
 800bb10:	bf00      	nop
 800bb12:	3718      	adds	r7, #24
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800bb20:	bf00      	nop
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800bb34:	bf00      	nop
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800bb48:	bf00      	nop
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800bb5c:	bf00      	nop
 800bb5e:	370c      	adds	r7, #12
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d101      	bne.n	800bb7c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e02b      	b.n	800bbd4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d106      	bne.n	800bb96 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f7f7 fdf9 	bl	8003788 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2202      	movs	r2, #2
 800bb9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	3304      	adds	r3, #4
 800bba6:	4619      	mov	r1, r3
 800bba8:	4610      	mov	r0, r2
 800bbaa:	f005 fa69 	bl	8011080 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6818      	ldr	r0, [r3, #0]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	f005 fabd 	bl	8011138 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800bbbe:	4b07      	ldr	r3, [pc, #28]	; (800bbdc <HAL_SDRAM_Init+0x74>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a06      	ldr	r2, [pc, #24]	; (800bbdc <HAL_SDRAM_Init+0x74>)
 800bbc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bbc8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2201      	movs	r2, #1
 800bbce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	52004000 	.word	0x52004000

0800bbe0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b086      	sub	sp, #24
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bbf2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800bbf4:	7dfb      	ldrb	r3, [r7, #23]
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	d101      	bne.n	800bbfe <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	e021      	b.n	800bc42 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800bbfe:	7dfb      	ldrb	r3, [r7, #23]
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d002      	beq.n	800bc0a <HAL_SDRAM_SendCommand+0x2a>
 800bc04:	7dfb      	ldrb	r3, [r7, #23]
 800bc06:	2b05      	cmp	r3, #5
 800bc08:	d118      	bne.n	800bc3c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2202      	movs	r2, #2
 800bc0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	68b9      	ldr	r1, [r7, #8]
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f005 faf6 	bl	801120c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	d104      	bne.n	800bc32 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2205      	movs	r2, #5
 800bc2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800bc30:	e006      	b.n	800bc40 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2201      	movs	r2, #1
 800bc36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800bc3a:	e001      	b.n	800bc40 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e000      	b.n	800bc42 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800bc40:	2300      	movs	r3, #0
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3718      	adds	r7, #24
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800bc4a:	b580      	push	{r7, lr}
 800bc4c:	b082      	sub	sp, #8
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
 800bc52:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d101      	bne.n	800bc64 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800bc60:	2302      	movs	r3, #2
 800bc62:	e016      	b.n	800bc92 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d10f      	bne.n	800bc90 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2202      	movs	r2, #2
 800bc74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6839      	ldr	r1, [r7, #0]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f005 fae8 	bl	8011254 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	e000      	b.n	800bc92 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800bc90:	2301      	movs	r3, #1
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3708      	adds	r7, #8
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
	...

0800bc9c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d101      	bne.n	800bcae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e0f1      	b.n	800be92 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a78      	ldr	r2, [pc, #480]	; (800be9c <HAL_SPI_Init+0x200>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d00f      	beq.n	800bcde <HAL_SPI_Init+0x42>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a77      	ldr	r2, [pc, #476]	; (800bea0 <HAL_SPI_Init+0x204>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d00a      	beq.n	800bcde <HAL_SPI_Init+0x42>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a75      	ldr	r2, [pc, #468]	; (800bea4 <HAL_SPI_Init+0x208>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d005      	beq.n	800bcde <HAL_SPI_Init+0x42>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	2b0f      	cmp	r3, #15
 800bcd8:	d901      	bls.n	800bcde <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e0d9      	b.n	800be92 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f001 f816 	bl	800cd10 <SPI_GetPacketSize>
 800bce4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a6c      	ldr	r2, [pc, #432]	; (800be9c <HAL_SPI_Init+0x200>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d00c      	beq.n	800bd0a <HAL_SPI_Init+0x6e>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a6a      	ldr	r2, [pc, #424]	; (800bea0 <HAL_SPI_Init+0x204>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d007      	beq.n	800bd0a <HAL_SPI_Init+0x6e>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a69      	ldr	r2, [pc, #420]	; (800bea4 <HAL_SPI_Init+0x208>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d002      	beq.n	800bd0a <HAL_SPI_Init+0x6e>
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2b08      	cmp	r3, #8
 800bd08:	d811      	bhi.n	800bd2e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bd0e:	4a63      	ldr	r2, [pc, #396]	; (800be9c <HAL_SPI_Init+0x200>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d009      	beq.n	800bd28 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a61      	ldr	r2, [pc, #388]	; (800bea0 <HAL_SPI_Init+0x204>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d004      	beq.n	800bd28 <HAL_SPI_Init+0x8c>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a60      	ldr	r2, [pc, #384]	; (800bea4 <HAL_SPI_Init+0x208>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d104      	bne.n	800bd32 <HAL_SPI_Init+0x96>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2b10      	cmp	r3, #16
 800bd2c:	d901      	bls.n	800bd32 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e0af      	b.n	800be92 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d106      	bne.n	800bd4c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f7f7 f86a 	bl	8002e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2202      	movs	r2, #2
 800bd50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f022 0201 	bic.w	r2, r2, #1
 800bd62:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800bd6e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	699b      	ldr	r3, [r3, #24]
 800bd74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd78:	d119      	bne.n	800bdae <HAL_SPI_Init+0x112>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd82:	d103      	bne.n	800bd8c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d008      	beq.n	800bd9e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10c      	bne.n	800bdae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bd98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd9c:	d107      	bne.n	800bdae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bdac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	69da      	ldr	r2, [r3, #28]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb6:	431a      	orrs	r2, r3
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	431a      	orrs	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdc0:	ea42 0103 	orr.w	r1, r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	68da      	ldr	r2, [r3, #12]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd8:	431a      	orrs	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdde:	431a      	orrs	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	699b      	ldr	r3, [r3, #24]
 800bde4:	431a      	orrs	r2, r3
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	431a      	orrs	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	695b      	ldr	r3, [r3, #20]
 800bdf0:	431a      	orrs	r2, r3
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	431a      	orrs	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	431a      	orrs	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be02:	431a      	orrs	r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	431a      	orrs	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be0e:	ea42 0103 	orr.w	r1, r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	430a      	orrs	r2, r1
 800be1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d113      	bne.n	800be4e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be38:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	689b      	ldr	r3, [r3, #8]
 800be40:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800be4c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f022 0201 	bic.w	r2, r2, #1
 800be5c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be66:	2b00      	cmp	r3, #0
 800be68:	d00a      	beq.n	800be80 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	430a      	orrs	r2, r1
 800be7e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	40013000 	.word	0x40013000
 800bea0:	40003800 	.word	0x40003800
 800bea4:	40003c00 	.word	0x40003c00

0800bea8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b08a      	sub	sp, #40	; 0x28
 800beac:	af02      	add	r7, sp, #8
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	603b      	str	r3, [r7, #0]
 800beb4:	4613      	mov	r3, r2
 800beb6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3320      	adds	r3, #32
 800bebe:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800beca:	2b01      	cmp	r3, #1
 800becc:	d101      	bne.n	800bed2 <HAL_SPI_Transmit+0x2a>
 800bece:	2302      	movs	r3, #2
 800bed0:	e1d7      	b.n	800c282 <HAL_SPI_Transmit+0x3da>
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2201      	movs	r2, #1
 800bed6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800beda:	f7f7 ff11 	bl	8003d00 <HAL_GetTick>
 800bede:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d007      	beq.n	800befc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800beec:	2302      	movs	r3, #2
 800beee:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bef8:	7efb      	ldrb	r3, [r7, #27]
 800befa:	e1c2      	b.n	800c282 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d002      	beq.n	800bf08 <HAL_SPI_Transmit+0x60>
 800bf02:	88fb      	ldrh	r3, [r7, #6]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d107      	bne.n	800bf18 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bf14:	7efb      	ldrb	r3, [r7, #27]
 800bf16:	e1b4      	b.n	800c282 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2203      	movs	r2, #3
 800bf1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	68ba      	ldr	r2, [r7, #8]
 800bf2c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	88fa      	ldrh	r2, [r7, #6]
 800bf32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	88fa      	ldrh	r2, [r7, #6]
 800bf3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2200      	movs	r2, #0
 800bf42:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2200      	movs	r2, #0
 800bf58:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bf68:	d107      	bne.n	800bf7a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf78:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	685a      	ldr	r2, [r3, #4]
 800bf80:	4b96      	ldr	r3, [pc, #600]	; (800c1dc <HAL_SPI_Transmit+0x334>)
 800bf82:	4013      	ands	r3, r2
 800bf84:	88f9      	ldrh	r1, [r7, #6]
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	6812      	ldr	r2, [r2, #0]
 800bf8a:	430b      	orrs	r3, r1
 800bf8c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f042 0201 	orr.w	r2, r2, #1
 800bf9c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfa6:	d107      	bne.n	800bfb8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	2b0f      	cmp	r3, #15
 800bfbe:	d947      	bls.n	800c050 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bfc0:	e03f      	b.n	800c042 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	695b      	ldr	r3, [r3, #20]
 800bfc8:	f003 0302 	and.w	r3, r3, #2
 800bfcc:	2b02      	cmp	r3, #2
 800bfce:	d114      	bne.n	800bffa <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	6812      	ldr	r2, [r2, #0]
 800bfda:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfe0:	1d1a      	adds	r2, r3, #4
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	3b01      	subs	r3, #1
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bff8:	e023      	b.n	800c042 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bffa:	f7f7 fe81 	bl	8003d00 <HAL_GetTick>
 800bffe:	4602      	mov	r2, r0
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	1ad3      	subs	r3, r2, r3
 800c004:	683a      	ldr	r2, [r7, #0]
 800c006:	429a      	cmp	r2, r3
 800c008:	d803      	bhi.n	800c012 <HAL_SPI_Transmit+0x16a>
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c010:	d102      	bne.n	800c018 <HAL_SPI_Transmit+0x170>
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d114      	bne.n	800c042 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f000 fdab 	bl	800cb74 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2200      	movs	r2, #0
 800c022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c02c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2201      	movs	r2, #1
 800c03a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c03e:	2303      	movs	r3, #3
 800c040:	e11f      	b.n	800c282 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c048:	b29b      	uxth	r3, r3
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1b9      	bne.n	800bfc2 <HAL_SPI_Transmit+0x11a>
 800c04e:	e0f2      	b.n	800c236 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	2b07      	cmp	r3, #7
 800c056:	f240 80e7 	bls.w	800c228 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c05a:	e05d      	b.n	800c118 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	695b      	ldr	r3, [r3, #20]
 800c062:	f003 0302 	and.w	r3, r3, #2
 800c066:	2b02      	cmp	r3, #2
 800c068:	d132      	bne.n	800c0d0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c070:	b29b      	uxth	r3, r3
 800c072:	2b01      	cmp	r3, #1
 800c074:	d918      	bls.n	800c0a8 <HAL_SPI_Transmit+0x200>
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d014      	beq.n	800c0a8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	6812      	ldr	r2, [r2, #0]
 800c088:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c08e:	1d1a      	adds	r2, r3, #4
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	3b02      	subs	r3, #2
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c0a6:	e037      	b.n	800c118 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0ac:	881a      	ldrh	r2, [r3, #0]
 800c0ae:	69fb      	ldr	r3, [r7, #28]
 800c0b0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0b6:	1c9a      	adds	r2, r3, #2
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c0ce:	e023      	b.n	800c118 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0d0:	f7f7 fe16 	bl	8003d00 <HAL_GetTick>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	683a      	ldr	r2, [r7, #0]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d803      	bhi.n	800c0e8 <HAL_SPI_Transmit+0x240>
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e6:	d102      	bne.n	800c0ee <HAL_SPI_Transmit+0x246>
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d114      	bne.n	800c118 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	f000 fd40 	bl	800cb74 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c102:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2201      	movs	r2, #1
 800c110:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c114:	2303      	movs	r3, #3
 800c116:	e0b4      	b.n	800c282 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c11e:	b29b      	uxth	r3, r3
 800c120:	2b00      	cmp	r3, #0
 800c122:	d19b      	bne.n	800c05c <HAL_SPI_Transmit+0x1b4>
 800c124:	e087      	b.n	800c236 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	695b      	ldr	r3, [r3, #20]
 800c12c:	f003 0302 	and.w	r3, r3, #2
 800c130:	2b02      	cmp	r3, #2
 800c132:	d155      	bne.n	800c1e0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	2b03      	cmp	r3, #3
 800c13e:	d918      	bls.n	800c172 <HAL_SPI_Transmit+0x2ca>
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c144:	2b40      	cmp	r3, #64	; 0x40
 800c146:	d914      	bls.n	800c172 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	6812      	ldr	r2, [r2, #0]
 800c152:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c158:	1d1a      	adds	r2, r3, #4
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c164:	b29b      	uxth	r3, r3
 800c166:	3b04      	subs	r3, #4
 800c168:	b29a      	uxth	r2, r3
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c170:	e05a      	b.n	800c228 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c178:	b29b      	uxth	r3, r3
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d917      	bls.n	800c1ae <HAL_SPI_Transmit+0x306>
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c182:	2b00      	cmp	r3, #0
 800c184:	d013      	beq.n	800c1ae <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c18a:	881a      	ldrh	r2, [r3, #0]
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c194:	1c9a      	adds	r2, r3, #2
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	3b02      	subs	r3, #2
 800c1a4:	b29a      	uxth	r2, r3
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c1ac:	e03c      	b.n	800c228 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	3320      	adds	r3, #32
 800c1b8:	7812      	ldrb	r2, [r2, #0]
 800c1ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1c0:	1c5a      	adds	r2, r3, #1
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	b29a      	uxth	r2, r3
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c1d8:	e026      	b.n	800c228 <HAL_SPI_Transmit+0x380>
 800c1da:	bf00      	nop
 800c1dc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1e0:	f7f7 fd8e 	bl	8003d00 <HAL_GetTick>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	1ad3      	subs	r3, r2, r3
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d803      	bhi.n	800c1f8 <HAL_SPI_Transmit+0x350>
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f6:	d102      	bne.n	800c1fe <HAL_SPI_Transmit+0x356>
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d114      	bne.n	800c228 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	f000 fcb8 	bl	800cb74 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2200      	movs	r2, #0
 800c208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c212:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2201      	movs	r2, #1
 800c220:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c224:	2303      	movs	r3, #3
 800c226:	e02c      	b.n	800c282 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c22e:	b29b      	uxth	r3, r3
 800c230:	2b00      	cmp	r3, #0
 800c232:	f47f af78 	bne.w	800c126 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	9300      	str	r3, [sp, #0]
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	2200      	movs	r2, #0
 800c23e:	2108      	movs	r1, #8
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f000 fd37 	bl	800ccb4 <SPI_WaitOnFlagUntilTimeout>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d007      	beq.n	800c25c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c252:	f043 0220 	orr.w	r2, r3, #32
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f000 fc89 	bl	800cb74 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2201      	movs	r2, #1
 800c26e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d001      	beq.n	800c280 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	e000      	b.n	800c282 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800c280:	7efb      	ldrb	r3, [r7, #27]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3720      	adds	r7, #32
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop

0800c28c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b086      	sub	sp, #24
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
 800c298:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d101      	bne.n	800c2ac <HAL_SPI_TransmitReceive_DMA+0x20>
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	e1b4      	b.n	800c616 <HAL_SPI_TransmitReceive_DMA+0x38a>
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c2ba:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c2c2:	7dbb      	ldrb	r3, [r7, #22]
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d012      	beq.n	800c2ee <HAL_SPI_TransmitReceive_DMA+0x62>
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2ce:	d106      	bne.n	800c2de <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d102      	bne.n	800c2de <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800c2d8:	7dbb      	ldrb	r3, [r7, #22]
 800c2da:	2b04      	cmp	r3, #4
 800c2dc:	d007      	beq.n	800c2ee <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800c2de:	2302      	movs	r3, #2
 800c2e0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c2ea:	7dfb      	ldrb	r3, [r7, #23]
 800c2ec:	e193      	b.n	800c616 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d005      	beq.n	800c300 <HAL_SPI_TransmitReceive_DMA+0x74>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d002      	beq.n	800c300 <HAL_SPI_TransmitReceive_DMA+0x74>
 800c2fa:	887b      	ldrh	r3, [r7, #2]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d107      	bne.n	800c310 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800c300:	2301      	movs	r3, #1
 800c302:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2200      	movs	r2, #0
 800c308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c30c:	7dfb      	ldrb	r3, [r7, #23]
 800c30e:	e182      	b.n	800c616 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c316:	b2db      	uxtb	r3, r3
 800c318:	2b04      	cmp	r3, #4
 800c31a:	d003      	beq.n	800c324 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2205      	movs	r2, #5
 800c320:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2200      	movs	r2, #0
 800c328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	68ba      	ldr	r2, [r7, #8]
 800c330:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	887a      	ldrh	r2, [r7, #2]
 800c336:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	887a      	ldrh	r2, [r7, #2]
 800c33e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	887a      	ldrh	r2, [r7, #2]
 800c34c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	887a      	ldrh	r2, [r7, #2]
 800c354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2200      	movs	r2, #0
 800c35c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2200      	movs	r2, #0
 800c362:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	689a      	ldr	r2, [r3, #8]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c372:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	2b0f      	cmp	r3, #15
 800c37a:	d905      	bls.n	800c388 <HAL_SPI_TransmitReceive_DMA+0xfc>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c380:	699b      	ldr	r3, [r3, #24]
 800c382:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c386:	d10f      	bne.n	800c3a8 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800c38c:	2b07      	cmp	r3, #7
 800c38e:	d913      	bls.n	800c3b8 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c394:	699b      	ldr	r3, [r3, #24]
 800c396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c39a:	d00d      	beq.n	800c3b8 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3a0:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c3a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3a6:	d007      	beq.n	800c3b8 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c3b4:	7dfb      	ldrb	r3, [r7, #23]
 800c3b6:	e12e      	b.n	800c616 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	2b07      	cmp	r3, #7
 800c3be:	d840      	bhi.n	800c442 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3c4:	699b      	ldr	r3, [r3, #24]
 800c3c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3ca:	d109      	bne.n	800c3e0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	105b      	asrs	r3, r3, #1
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3e4:	699b      	ldr	r3, [r3, #24]
 800c3e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3ea:	d109      	bne.n	800c400 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	3303      	adds	r3, #3
 800c3f6:	109b      	asrs	r3, r3, #2
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c404:	699b      	ldr	r3, [r3, #24]
 800c406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c40a:	d109      	bne.n	800c420 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c412:	b29b      	uxth	r3, r3
 800c414:	3301      	adds	r3, #1
 800c416:	105b      	asrs	r3, r3, #1
 800c418:	b29a      	uxth	r2, r3
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c42a:	d12e      	bne.n	800c48a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c432:	b29b      	uxth	r3, r3
 800c434:	3303      	adds	r3, #3
 800c436:	109b      	asrs	r3, r3, #2
 800c438:	b29a      	uxth	r2, r3
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c440:	e023      	b.n	800c48a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	2b0f      	cmp	r3, #15
 800c448:	d81f      	bhi.n	800c48a <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c44e:	699b      	ldr	r3, [r3, #24]
 800c450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c454:	d109      	bne.n	800c46a <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	3301      	adds	r3, #1
 800c460:	105b      	asrs	r3, r3, #1
 800c462:	b29a      	uxth	r2, r3
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c46e:	699b      	ldr	r3, [r3, #24]
 800c470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c474:	d109      	bne.n	800c48a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	3301      	adds	r3, #1
 800c480:	105b      	asrs	r3, r3, #1
 800c482:	b29a      	uxth	r2, r3
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c490:	b2db      	uxtb	r3, r3
 800c492:	2b04      	cmp	r3, #4
 800c494:	d108      	bne.n	800c4a8 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c49a:	4a61      	ldr	r2, [pc, #388]	; (800c620 <HAL_SPI_TransmitReceive_DMA+0x394>)
 800c49c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4a2:	4a60      	ldr	r2, [pc, #384]	; (800c624 <HAL_SPI_TransmitReceive_DMA+0x398>)
 800c4a4:	63da      	str	r2, [r3, #60]	; 0x3c
 800c4a6:	e007      	b.n	800c4b8 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4ac:	4a5e      	ldr	r2, [pc, #376]	; (800c628 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 800c4ae:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4b4:	4a5d      	ldr	r2, [pc, #372]	; (800c62c <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 800c4b6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4bc:	4a5c      	ldr	r2, [pc, #368]	; (800c630 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 800c4be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	3330      	adds	r3, #48	; 0x30
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4d8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c4e0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800c4e2:	f7f8 f90f 	bl	8004704 <HAL_DMA_Start_IT>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d013      	beq.n	800c514 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4f2:	f043 0210 	orr.w	r2, r3, #16
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2201      	movs	r2, #1
 800c508:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800c50c:	2301      	movs	r3, #1
 800c50e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800c510:	7dfb      	ldrb	r3, [r7, #23]
 800c512:	e080      	b.n	800c616 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	689a      	ldr	r2, [r3, #8]
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c522:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c528:	2200      	movs	r2, #0
 800c52a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c530:	2200      	movs	r2, #0
 800c532:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c538:	2200      	movs	r2, #0
 800c53a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c540:	2200      	movs	r2, #0
 800c542:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c54c:	4619      	mov	r1, r3
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	3320      	adds	r3, #32
 800c554:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c55c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800c55e:	f7f8 f8d1 	bl	8004704 <HAL_DMA_Start_IT>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d013      	beq.n	800c590 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c56e:	f043 0210 	orr.w	r2, r3, #16
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2201      	movs	r2, #1
 800c584:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800c58c:	7dfb      	ldrb	r3, [r7, #23]
 800c58e:	e042      	b.n	800c616 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c594:	69db      	ldr	r3, [r3, #28]
 800c596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c59a:	d108      	bne.n	800c5ae <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	6859      	ldr	r1, [r3, #4]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	4b23      	ldr	r3, [pc, #140]	; (800c634 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800c5a8:	400b      	ands	r3, r1
 800c5aa:	6053      	str	r3, [r2, #4]
 800c5ac:	e009      	b.n	800c5c2 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	685a      	ldr	r2, [r3, #4]
 800c5b4:	4b1f      	ldr	r3, [pc, #124]	; (800c634 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800c5b6:	4013      	ands	r3, r2
 800c5b8:	8879      	ldrh	r1, [r7, #2]
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	6812      	ldr	r2, [r2, #0]
 800c5be:	430b      	orrs	r3, r1
 800c5c0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	689a      	ldr	r2, [r3, #8]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5d0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	691a      	ldr	r2, [r3, #16]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800c5e0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f042 0201 	orr.w	r2, r2, #1
 800c5f0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5fa:	d107      	bne.n	800c60c <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c60a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800c614:	7dfb      	ldrb	r3, [r7, #23]
}
 800c616:	4618      	mov	r0, r3
 800c618:	3718      	adds	r7, #24
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	0800cac1 	.word	0x0800cac1
 800c624:	0800ca35 	.word	0x0800ca35
 800c628:	0800cadd 	.word	0x0800cadd
 800c62c:	0800ca7b 	.word	0x0800ca7b
 800c630:	0800caf9 	.word	0x0800caf9
 800c634:	ffff0000 	.word	0xffff0000

0800c638 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08a      	sub	sp, #40	; 0x28
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	691b      	ldr	r3, [r3, #16]
 800c646:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	695b      	ldr	r3, [r3, #20]
 800c64e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800c650:	6a3a      	ldr	r2, [r7, #32]
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	4013      	ands	r3, r2
 800c656:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800c660:	2300      	movs	r3, #0
 800c662:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c66a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	3330      	adds	r3, #48	; 0x30
 800c672:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c674:	69bb      	ldr	r3, [r7, #24]
 800c676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d113      	bne.n	800c6a6 <HAL_SPI_IRQHandler+0x6e>
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	f003 0320 	and.w	r3, r3, #32
 800c684:	2b00      	cmp	r3, #0
 800c686:	d10e      	bne.n	800c6a6 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d009      	beq.n	800c6a6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	4798      	blx	r3
    handled = 1UL;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10f      	bne.n	800c6d0 <HAL_SPI_IRQHandler+0x98>
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	f003 0301 	and.w	r3, r3, #1
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d00a      	beq.n	800c6d0 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d105      	bne.n	800c6d0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	4798      	blx	r3
    handled = 1UL;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	f003 0320 	and.w	r3, r3, #32
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d10f      	bne.n	800c6fa <HAL_SPI_IRQHandler+0xc2>
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	f003 0302 	and.w	r3, r3, #2
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00a      	beq.n	800c6fa <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d105      	bne.n	800c6fa <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	4798      	blx	r3
    handled = 1UL;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	f040 815a 	bne.w	800c9b6 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	f003 0308 	and.w	r3, r3, #8
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f000 808b 	beq.w	800c824 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	699a      	ldr	r2, [r3, #24]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f042 0208 	orr.w	r2, r2, #8
 800c71c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	699a      	ldr	r2, [r3, #24]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f042 0210 	orr.w	r2, r2, #16
 800c72c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	699a      	ldr	r2, [r3, #24]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c73c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	691a      	ldr	r2, [r3, #16]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f022 0208 	bic.w	r2, r2, #8
 800c74c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d13d      	bne.n	800c7d8 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800c75c:	e036      	b.n	800c7cc <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	2b0f      	cmp	r3, #15
 800c764:	d90b      	bls.n	800c77e <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c76e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c770:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c776:	1d1a      	adds	r2, r3, #4
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	665a      	str	r2, [r3, #100]	; 0x64
 800c77c:	e01d      	b.n	800c7ba <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	2b07      	cmp	r3, #7
 800c784:	d90b      	bls.n	800c79e <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c78a:	68fa      	ldr	r2, [r7, #12]
 800c78c:	8812      	ldrh	r2, [r2, #0]
 800c78e:	b292      	uxth	r2, r2
 800c790:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c796:	1c9a      	adds	r2, r3, #2
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	665a      	str	r2, [r3, #100]	; 0x64
 800c79c:	e00d      	b.n	800c7ba <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7aa:	7812      	ldrb	r2, [r2, #0]
 800c7ac:	b2d2      	uxtb	r2, r2
 800c7ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7b4:	1c5a      	adds	r2, r3, #1
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d1c2      	bne.n	800c75e <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f9cb 	bl	800cb74 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d003      	beq.n	800c7f8 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 f915 	bl	800ca20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c7f6:	e0e3      	b.n	800c9c0 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800c7f8:	7cfb      	ldrb	r3, [r7, #19]
 800c7fa:	2b05      	cmp	r3, #5
 800c7fc:	d103      	bne.n	800c806 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7f5 fa36 	bl	8001c70 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800c804:	e0d9      	b.n	800c9ba <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800c806:	7cfb      	ldrb	r3, [r7, #19]
 800c808:	2b04      	cmp	r3, #4
 800c80a:	d103      	bne.n	800c814 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 f8e9 	bl	800c9e4 <HAL_SPI_RxCpltCallback>
    return;
 800c812:	e0d2      	b.n	800c9ba <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800c814:	7cfb      	ldrb	r3, [r7, #19]
 800c816:	2b03      	cmp	r3, #3
 800c818:	f040 80cf 	bne.w	800c9ba <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 f8d7 	bl	800c9d0 <HAL_SPI_TxCpltCallback>
    return;
 800c822:	e0ca      	b.n	800c9ba <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00d      	beq.n	800c84a <HAL_SPI_IRQHandler+0x212>
 800c82e:	6a3b      	ldr	r3, [r7, #32]
 800c830:	f003 0308 	and.w	r3, r3, #8
 800c834:	2b00      	cmp	r3, #0
 800c836:	d008      	beq.n	800c84a <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	699a      	ldr	r2, [r3, #24]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c846:	619a      	str	r2, [r3, #24]

    return;
 800c848:	e0ba      	b.n	800c9c0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800c850:	2b00      	cmp	r3, #0
 800c852:	f000 80b5 	beq.w	800c9c0 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800c856:	69bb      	ldr	r3, [r7, #24]
 800c858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00f      	beq.n	800c880 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c866:	f043 0204 	orr.w	r2, r3, #4
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	699a      	ldr	r2, [r3, #24]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c87e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00f      	beq.n	800c8aa <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c890:	f043 0201 	orr.w	r2, r3, #1
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	699a      	ldr	r2, [r3, #24]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8a8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800c8aa:	69bb      	ldr	r3, [r7, #24]
 800c8ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00f      	beq.n	800c8d4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8ba:	f043 0208 	orr.w	r2, r3, #8
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	699a      	ldr	r2, [r3, #24]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c8d2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800c8d4:	69bb      	ldr	r3, [r7, #24]
 800c8d6:	f003 0320 	and.w	r3, r3, #32
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d00f      	beq.n	800c8fe <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	699a      	ldr	r2, [r3, #24]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f042 0220 	orr.w	r2, r2, #32
 800c8fc:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c904:	2b00      	cmp	r3, #0
 800c906:	d05a      	beq.n	800c9be <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f022 0201 	bic.w	r2, r2, #1
 800c916:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	6919      	ldr	r1, [r3, #16]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	4b29      	ldr	r3, [pc, #164]	; (800c9c8 <HAL_SPI_IRQHandler+0x390>)
 800c924:	400b      	ands	r3, r1
 800c926:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c92e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c932:	d138      	bne.n	800c9a6 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	689a      	ldr	r2, [r3, #8]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c942:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d013      	beq.n	800c974 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c950:	4a1e      	ldr	r2, [pc, #120]	; (800c9cc <HAL_SPI_IRQHandler+0x394>)
 800c952:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c958:	4618      	mov	r0, r3
 800c95a:	f7f8 fc5b 	bl	8005214 <HAL_DMA_Abort_IT>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d007      	beq.n	800c974 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c96a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d020      	beq.n	800c9be <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c980:	4a12      	ldr	r2, [pc, #72]	; (800c9cc <HAL_SPI_IRQHandler+0x394>)
 800c982:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c988:	4618      	mov	r0, r3
 800c98a:	f7f8 fc43 	bl	8005214 <HAL_DMA_Abort_IT>
 800c98e:	4603      	mov	r3, r0
 800c990:	2b00      	cmp	r3, #0
 800c992:	d014      	beq.n	800c9be <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c99a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c9a4:	e00b      	b.n	800c9be <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 f836 	bl	800ca20 <HAL_SPI_ErrorCallback>
    return;
 800c9b4:	e003      	b.n	800c9be <HAL_SPI_IRQHandler+0x386>
    return;
 800c9b6:	bf00      	nop
 800c9b8:	e002      	b.n	800c9c0 <HAL_SPI_IRQHandler+0x388>
    return;
 800c9ba:	bf00      	nop
 800c9bc:	e000      	b.n	800c9c0 <HAL_SPI_IRQHandler+0x388>
    return;
 800c9be:	bf00      	nop
  }
}
 800c9c0:	3728      	adds	r7, #40	; 0x28
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	fffffc94 	.word	0xfffffc94
 800c9cc:	0800cb3f 	.word	0x0800cb3f

0800c9d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b083      	sub	sp, #12
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c9d8:	bf00      	nop
 800c9da:	370c      	adds	r7, #12
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c9ec:	bf00      	nop
 800c9ee:	370c      	adds	r7, #12
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ca00:	bf00      	nop
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ca14:	bf00      	nop
 800ca16:	370c      	adds	r7, #12
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ca28:	bf00      	nop
 800ca2a:	370c      	adds	r7, #12
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca40:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	2b07      	cmp	r3, #7
 800ca4c:	d011      	beq.n	800ca72 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca52:	69db      	ldr	r3, [r3, #28]
 800ca54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca58:	d103      	bne.n	800ca62 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	f7ff ffc2 	bl	800c9e4 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800ca60:	e007      	b.n	800ca72 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	691a      	ldr	r2, [r3, #16]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f042 0208 	orr.w	r2, r2, #8
 800ca70:	611a      	str	r2, [r3, #16]
}
 800ca72:	bf00      	nop
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b084      	sub	sp, #16
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca86:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	2b07      	cmp	r3, #7
 800ca92:	d011      	beq.n	800cab8 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca98:	69db      	ldr	r3, [r3, #28]
 800ca9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca9e:	d103      	bne.n	800caa8 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f7f5 f8e5 	bl	8001c70 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800caa6:	e007      	b.n	800cab8 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	691a      	ldr	r2, [r3, #16]
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f042 0208 	orr.w	r2, r2, #8
 800cab6:	611a      	str	r2, [r3, #16]
}
 800cab8:	bf00      	nop
 800caba:	3710      	adds	r7, #16
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cacc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f7ff ff92 	bl	800c9f8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cad4:	bf00      	nop
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	f7ff ff8e 	bl	800ca0c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800caf0:	bf00      	nop
 800caf2:	3710      	adds	r7, #16
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb04:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f7f9 fd2c 	bl	8006564 <HAL_DMA_GetError>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d011      	beq.n	800cb36 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800cb12:	68f8      	ldr	r0, [r7, #12]
 800cb14:	f000 f82e 	bl	800cb74 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb1e:	f043 0210 	orr.w	r2, r3, #16
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	f7ff ff75 	bl	800ca20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800cb36:	bf00      	nop
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b084      	sub	sp, #16
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f7ff ff5b 	bl	800ca20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cb6a:	bf00      	nop
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b085      	sub	sp, #20
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	695b      	ldr	r3, [r3, #20]
 800cb82:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	699a      	ldr	r2, [r3, #24]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f042 0208 	orr.w	r2, r2, #8
 800cb92:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	699a      	ldr	r2, [r3, #24]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f042 0210 	orr.w	r2, r2, #16
 800cba2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f022 0201 	bic.w	r2, r2, #1
 800cbb2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	6919      	ldr	r1, [r3, #16]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	4b3c      	ldr	r3, [pc, #240]	; (800ccb0 <SPI_CloseTransfer+0x13c>)
 800cbc0:	400b      	ands	r3, r1
 800cbc2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	689a      	ldr	r2, [r3, #8]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cbd2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	2b04      	cmp	r3, #4
 800cbde:	d014      	beq.n	800cc0a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f003 0320 	and.w	r3, r3, #32
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d00f      	beq.n	800cc0a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbf0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	699a      	ldr	r2, [r3, #24]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f042 0220 	orr.w	r2, r2, #32
 800cc08:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	2b03      	cmp	r3, #3
 800cc14:	d014      	beq.n	800cc40 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d00f      	beq.n	800cc40 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc26:	f043 0204 	orr.w	r2, r3, #4
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	699a      	ldr	r2, [r3, #24]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc3e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00f      	beq.n	800cc6a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc50:	f043 0201 	orr.w	r2, r3, #1
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	699a      	ldr	r2, [r3, #24]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc68:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d00f      	beq.n	800cc94 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc7a:	f043 0208 	orr.w	r2, r3, #8
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	699a      	ldr	r2, [r3, #24]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc92:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800cca4:	bf00      	nop
 800cca6:	3714      	adds	r7, #20
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr
 800ccb0:	fffffc90 	.word	0xfffffc90

0800ccb4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	603b      	str	r3, [r7, #0]
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ccc4:	e010      	b.n	800cce8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ccc6:	f7f7 f81b 	bl	8003d00 <HAL_GetTick>
 800ccca:	4602      	mov	r2, r0
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	1ad3      	subs	r3, r2, r3
 800ccd0:	69ba      	ldr	r2, [r7, #24]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d803      	bhi.n	800ccde <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccdc:	d102      	bne.n	800cce4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d101      	bne.n	800cce8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800cce4:	2303      	movs	r3, #3
 800cce6:	e00f      	b.n	800cd08 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	695a      	ldr	r2, [r3, #20]
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	68ba      	ldr	r2, [r7, #8]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	bf0c      	ite	eq
 800ccf8:	2301      	moveq	r3, #1
 800ccfa:	2300      	movne	r3, #0
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	461a      	mov	r2, r3
 800cd00:	79fb      	ldrb	r3, [r7, #7]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d0df      	beq.n	800ccc6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800cd06:	2300      	movs	r3, #0
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3710      	adds	r7, #16
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd1c:	095b      	lsrs	r3, r3, #5
 800cd1e:	3301      	adds	r3, #1
 800cd20:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	3301      	adds	r3, #1
 800cd28:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	3307      	adds	r3, #7
 800cd2e:	08db      	lsrs	r3, r3, #3
 800cd30:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	fb02 f303 	mul.w	r3, r2, r3
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3714      	adds	r7, #20
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b082      	sub	sp, #8
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d101      	bne.n	800cd58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cd54:	2301      	movs	r3, #1
 800cd56:	e049      	b.n	800cdec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd5e:	b2db      	uxtb	r3, r3
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d106      	bne.n	800cd72 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f7f6 fb31 	bl	80033d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2202      	movs	r2, #2
 800cd76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	3304      	adds	r3, #4
 800cd82:	4619      	mov	r1, r3
 800cd84:	4610      	mov	r0, r2
 800cd86:	f000 fda1 	bl	800d8cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2201      	movs	r2, #1
 800cd96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2201      	movs	r2, #1
 800cda6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2201      	movs	r2, #1
 800cdae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2201      	movs	r2, #1
 800cdce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2201      	movs	r2, #1
 800cdde:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2201      	movs	r2, #1
 800cde6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cdea:	2300      	movs	r3, #0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b085      	sub	sp, #20
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d001      	beq.n	800ce0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e054      	b.n	800ceb6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2202      	movs	r2, #2
 800ce10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68da      	ldr	r2, [r3, #12]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f042 0201 	orr.w	r2, r2, #1
 800ce22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4a26      	ldr	r2, [pc, #152]	; (800cec4 <HAL_TIM_Base_Start_IT+0xd0>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d022      	beq.n	800ce74 <HAL_TIM_Base_Start_IT+0x80>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce36:	d01d      	beq.n	800ce74 <HAL_TIM_Base_Start_IT+0x80>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a22      	ldr	r2, [pc, #136]	; (800cec8 <HAL_TIM_Base_Start_IT+0xd4>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d018      	beq.n	800ce74 <HAL_TIM_Base_Start_IT+0x80>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a21      	ldr	r2, [pc, #132]	; (800cecc <HAL_TIM_Base_Start_IT+0xd8>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d013      	beq.n	800ce74 <HAL_TIM_Base_Start_IT+0x80>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a1f      	ldr	r2, [pc, #124]	; (800ced0 <HAL_TIM_Base_Start_IT+0xdc>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d00e      	beq.n	800ce74 <HAL_TIM_Base_Start_IT+0x80>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a1e      	ldr	r2, [pc, #120]	; (800ced4 <HAL_TIM_Base_Start_IT+0xe0>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d009      	beq.n	800ce74 <HAL_TIM_Base_Start_IT+0x80>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a1c      	ldr	r2, [pc, #112]	; (800ced8 <HAL_TIM_Base_Start_IT+0xe4>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d004      	beq.n	800ce74 <HAL_TIM_Base_Start_IT+0x80>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4a1b      	ldr	r2, [pc, #108]	; (800cedc <HAL_TIM_Base_Start_IT+0xe8>)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d115      	bne.n	800cea0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	689a      	ldr	r2, [r3, #8]
 800ce7a:	4b19      	ldr	r3, [pc, #100]	; (800cee0 <HAL_TIM_Base_Start_IT+0xec>)
 800ce7c:	4013      	ands	r3, r2
 800ce7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2b06      	cmp	r3, #6
 800ce84:	d015      	beq.n	800ceb2 <HAL_TIM_Base_Start_IT+0xbe>
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce8c:	d011      	beq.n	800ceb2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f042 0201 	orr.w	r2, r2, #1
 800ce9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce9e:	e008      	b.n	800ceb2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f042 0201 	orr.w	r2, r2, #1
 800ceae:	601a      	str	r2, [r3, #0]
 800ceb0:	e000      	b.n	800ceb4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ceb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ceb4:	2300      	movs	r3, #0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3714      	adds	r7, #20
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop
 800cec4:	40010000 	.word	0x40010000
 800cec8:	40000400 	.word	0x40000400
 800cecc:	40000800 	.word	0x40000800
 800ced0:	40000c00 	.word	0x40000c00
 800ced4:	40010400 	.word	0x40010400
 800ced8:	40001800 	.word	0x40001800
 800cedc:	40014000 	.word	0x40014000
 800cee0:	00010007 	.word	0x00010007

0800cee4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d101      	bne.n	800cef6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cef2:	2301      	movs	r3, #1
 800cef4:	e049      	b.n	800cf8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d106      	bne.n	800cf10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2200      	movs	r2, #0
 800cf06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 f841 	bl	800cf92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2202      	movs	r2, #2
 800cf14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681a      	ldr	r2, [r3, #0]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	3304      	adds	r3, #4
 800cf20:	4619      	mov	r1, r3
 800cf22:	4610      	mov	r0, r2
 800cf24:	f000 fcd2 	bl	800d8cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2201      	movs	r2, #1
 800cf54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2201      	movs	r2, #1
 800cf64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2201      	movs	r2, #1
 800cf84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf88:	2300      	movs	r3, #0
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3708      	adds	r7, #8
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cf92:	b480      	push	{r7}
 800cf94:	b083      	sub	sp, #12
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cf9a:	bf00      	nop
 800cf9c:	370c      	adds	r7, #12
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr

0800cfa6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b082      	sub	sp, #8
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d101      	bne.n	800cfb8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	e049      	b.n	800d04c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d106      	bne.n	800cfd2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 f841 	bl	800d054 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2202      	movs	r2, #2
 800cfd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	3304      	adds	r3, #4
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	4610      	mov	r0, r2
 800cfe6:	f000 fc71 	bl	800d8cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2201      	movs	r2, #1
 800cfee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2201      	movs	r2, #1
 800cff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2201      	movs	r2, #1
 800cffe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2201      	movs	r2, #1
 800d006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2201      	movs	r2, #1
 800d00e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2201      	movs	r2, #1
 800d016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2201      	movs	r2, #1
 800d01e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2201      	movs	r2, #1
 800d026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2201      	movs	r2, #1
 800d02e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2201      	movs	r2, #1
 800d036:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2201      	movs	r2, #1
 800d03e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2201      	movs	r2, #1
 800d046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d04a:	2300      	movs	r3, #0
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3708      	adds	r7, #8
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	f003 0302 	and.w	r3, r3, #2
 800d07a:	2b02      	cmp	r3, #2
 800d07c:	d122      	bne.n	800d0c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	f003 0302 	and.w	r3, r3, #2
 800d088:	2b02      	cmp	r3, #2
 800d08a:	d11b      	bne.n	800d0c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f06f 0202 	mvn.w	r2, #2
 800d094:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2201      	movs	r2, #1
 800d09a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	699b      	ldr	r3, [r3, #24]
 800d0a2:	f003 0303 	and.w	r3, r3, #3
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d003      	beq.n	800d0b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 fbf0 	bl	800d890 <HAL_TIM_IC_CaptureCallback>
 800d0b0:	e005      	b.n	800d0be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 fbe2 	bl	800d87c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 fbf3 	bl	800d8a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	691b      	ldr	r3, [r3, #16]
 800d0ca:	f003 0304 	and.w	r3, r3, #4
 800d0ce:	2b04      	cmp	r3, #4
 800d0d0:	d122      	bne.n	800d118 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	f003 0304 	and.w	r3, r3, #4
 800d0dc:	2b04      	cmp	r3, #4
 800d0de:	d11b      	bne.n	800d118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f06f 0204 	mvn.w	r2, #4
 800d0e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2202      	movs	r2, #2
 800d0ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	699b      	ldr	r3, [r3, #24]
 800d0f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d003      	beq.n	800d106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 fbc6 	bl	800d890 <HAL_TIM_IC_CaptureCallback>
 800d104:	e005      	b.n	800d112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 fbb8 	bl	800d87c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 fbc9 	bl	800d8a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	691b      	ldr	r3, [r3, #16]
 800d11e:	f003 0308 	and.w	r3, r3, #8
 800d122:	2b08      	cmp	r3, #8
 800d124:	d122      	bne.n	800d16c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	f003 0308 	and.w	r3, r3, #8
 800d130:	2b08      	cmp	r3, #8
 800d132:	d11b      	bne.n	800d16c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f06f 0208 	mvn.w	r2, #8
 800d13c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2204      	movs	r2, #4
 800d142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	69db      	ldr	r3, [r3, #28]
 800d14a:	f003 0303 	and.w	r3, r3, #3
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d003      	beq.n	800d15a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 fb9c 	bl	800d890 <HAL_TIM_IC_CaptureCallback>
 800d158:	e005      	b.n	800d166 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 fb8e 	bl	800d87c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 fb9f 	bl	800d8a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	f003 0310 	and.w	r3, r3, #16
 800d176:	2b10      	cmp	r3, #16
 800d178:	d122      	bne.n	800d1c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	f003 0310 	and.w	r3, r3, #16
 800d184:	2b10      	cmp	r3, #16
 800d186:	d11b      	bne.n	800d1c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f06f 0210 	mvn.w	r2, #16
 800d190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2208      	movs	r2, #8
 800d196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	69db      	ldr	r3, [r3, #28]
 800d19e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d003      	beq.n	800d1ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 fb72 	bl	800d890 <HAL_TIM_IC_CaptureCallback>
 800d1ac:	e005      	b.n	800d1ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 fb64 	bl	800d87c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 fb75 	bl	800d8a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	691b      	ldr	r3, [r3, #16]
 800d1c6:	f003 0301 	and.w	r3, r3, #1
 800d1ca:	2b01      	cmp	r3, #1
 800d1cc:	d10e      	bne.n	800d1ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	f003 0301 	and.w	r3, r3, #1
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d107      	bne.n	800d1ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f06f 0201 	mvn.w	r2, #1
 800d1e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7f4 fdf6 	bl	8001dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1f6:	2b80      	cmp	r3, #128	; 0x80
 800d1f8:	d10e      	bne.n	800d218 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d204:	2b80      	cmp	r3, #128	; 0x80
 800d206:	d107      	bne.n	800d218 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f001 fab4 	bl	800e780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	691b      	ldr	r3, [r3, #16]
 800d21e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d226:	d10e      	bne.n	800d246 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d232:	2b80      	cmp	r3, #128	; 0x80
 800d234:	d107      	bne.n	800d246 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d23e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f001 faa7 	bl	800e794 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d250:	2b40      	cmp	r3, #64	; 0x40
 800d252:	d10e      	bne.n	800d272 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	68db      	ldr	r3, [r3, #12]
 800d25a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d25e:	2b40      	cmp	r3, #64	; 0x40
 800d260:	d107      	bne.n	800d272 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d26a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 fb23 	bl	800d8b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	691b      	ldr	r3, [r3, #16]
 800d278:	f003 0320 	and.w	r3, r3, #32
 800d27c:	2b20      	cmp	r3, #32
 800d27e:	d10e      	bne.n	800d29e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	f003 0320 	and.w	r3, r3, #32
 800d28a:	2b20      	cmp	r3, #32
 800d28c:	d107      	bne.n	800d29e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f06f 0220 	mvn.w	r2, #32
 800d296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f001 fa67 	bl	800e76c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d29e:	bf00      	nop
 800d2a0:	3708      	adds	r7, #8
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}

0800d2a6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d2a6:	b580      	push	{r7, lr}
 800d2a8:	b086      	sub	sp, #24
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	60f8      	str	r0, [r7, #12]
 800d2ae:	60b9      	str	r1, [r7, #8]
 800d2b0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d101      	bne.n	800d2c4 <HAL_TIM_IC_ConfigChannel+0x1e>
 800d2c0:	2302      	movs	r3, #2
 800d2c2:	e088      	b.n	800d3d6 <HAL_TIM_IC_ConfigChannel+0x130>
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d11b      	bne.n	800d30a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	6818      	ldr	r0, [r3, #0]
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	6819      	ldr	r1, [r3, #0]
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	685a      	ldr	r2, [r3, #4]
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	68db      	ldr	r3, [r3, #12]
 800d2e2:	f000 ff4d 	bl	800e180 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	699a      	ldr	r2, [r3, #24]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f022 020c 	bic.w	r2, r2, #12
 800d2f4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	6999      	ldr	r1, [r3, #24]
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	689a      	ldr	r2, [r3, #8]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	430a      	orrs	r2, r1
 800d306:	619a      	str	r2, [r3, #24]
 800d308:	e060      	b.n	800d3cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2b04      	cmp	r3, #4
 800d30e:	d11c      	bne.n	800d34a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	6818      	ldr	r0, [r3, #0]
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	6819      	ldr	r1, [r3, #0]
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	685a      	ldr	r2, [r3, #4]
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	f000 ffd1 	bl	800e2c6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	699a      	ldr	r2, [r3, #24]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d332:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	6999      	ldr	r1, [r3, #24]
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	021a      	lsls	r2, r3, #8
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	430a      	orrs	r2, r1
 800d346:	619a      	str	r2, [r3, #24]
 800d348:	e040      	b.n	800d3cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2b08      	cmp	r3, #8
 800d34e:	d11b      	bne.n	800d388 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6818      	ldr	r0, [r3, #0]
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	6819      	ldr	r1, [r3, #0]
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	685a      	ldr	r2, [r3, #4]
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	f001 f81e 	bl	800e3a0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	69da      	ldr	r2, [r3, #28]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f022 020c 	bic.w	r2, r2, #12
 800d372:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	69d9      	ldr	r1, [r3, #28]
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	689a      	ldr	r2, [r3, #8]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	430a      	orrs	r2, r1
 800d384:	61da      	str	r2, [r3, #28]
 800d386:	e021      	b.n	800d3cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2b0c      	cmp	r3, #12
 800d38c:	d11c      	bne.n	800d3c8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	6818      	ldr	r0, [r3, #0]
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	6819      	ldr	r1, [r3, #0]
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	685a      	ldr	r2, [r3, #4]
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	f001 f83b 	bl	800e418 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	69da      	ldr	r2, [r3, #28]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d3b0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	69d9      	ldr	r1, [r3, #28]
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	021a      	lsls	r2, r3, #8
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	430a      	orrs	r2, r1
 800d3c4:	61da      	str	r2, [r3, #28]
 800d3c6:	e001      	b.n	800d3cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d3d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3718      	adds	r7, #24
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
	...

0800d3e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d101      	bne.n	800d3fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d3fa:	2302      	movs	r3, #2
 800d3fc:	e0ff      	b.n	800d5fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2201      	movs	r2, #1
 800d402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2b14      	cmp	r3, #20
 800d40a:	f200 80f0 	bhi.w	800d5ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d40e:	a201      	add	r2, pc, #4	; (adr r2, 800d414 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d414:	0800d469 	.word	0x0800d469
 800d418:	0800d5ef 	.word	0x0800d5ef
 800d41c:	0800d5ef 	.word	0x0800d5ef
 800d420:	0800d5ef 	.word	0x0800d5ef
 800d424:	0800d4a9 	.word	0x0800d4a9
 800d428:	0800d5ef 	.word	0x0800d5ef
 800d42c:	0800d5ef 	.word	0x0800d5ef
 800d430:	0800d5ef 	.word	0x0800d5ef
 800d434:	0800d4eb 	.word	0x0800d4eb
 800d438:	0800d5ef 	.word	0x0800d5ef
 800d43c:	0800d5ef 	.word	0x0800d5ef
 800d440:	0800d5ef 	.word	0x0800d5ef
 800d444:	0800d52b 	.word	0x0800d52b
 800d448:	0800d5ef 	.word	0x0800d5ef
 800d44c:	0800d5ef 	.word	0x0800d5ef
 800d450:	0800d5ef 	.word	0x0800d5ef
 800d454:	0800d56d 	.word	0x0800d56d
 800d458:	0800d5ef 	.word	0x0800d5ef
 800d45c:	0800d5ef 	.word	0x0800d5ef
 800d460:	0800d5ef 	.word	0x0800d5ef
 800d464:	0800d5ad 	.word	0x0800d5ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	68b9      	ldr	r1, [r7, #8]
 800d46e:	4618      	mov	r0, r3
 800d470:	f000 fac6 	bl	800da00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	699a      	ldr	r2, [r3, #24]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f042 0208 	orr.w	r2, r2, #8
 800d482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	699a      	ldr	r2, [r3, #24]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f022 0204 	bic.w	r2, r2, #4
 800d492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	6999      	ldr	r1, [r3, #24]
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	691a      	ldr	r2, [r3, #16]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	430a      	orrs	r2, r1
 800d4a4:	619a      	str	r2, [r3, #24]
      break;
 800d4a6:	e0a5      	b.n	800d5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	68b9      	ldr	r1, [r7, #8]
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f000 fb36 	bl	800db20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	699a      	ldr	r2, [r3, #24]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	699a      	ldr	r2, [r3, #24]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	6999      	ldr	r1, [r3, #24]
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	691b      	ldr	r3, [r3, #16]
 800d4de:	021a      	lsls	r2, r3, #8
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	430a      	orrs	r2, r1
 800d4e6:	619a      	str	r2, [r3, #24]
      break;
 800d4e8:	e084      	b.n	800d5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	68b9      	ldr	r1, [r7, #8]
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f000 fb9f 	bl	800dc34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	69da      	ldr	r2, [r3, #28]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f042 0208 	orr.w	r2, r2, #8
 800d504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	69da      	ldr	r2, [r3, #28]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f022 0204 	bic.w	r2, r2, #4
 800d514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	69d9      	ldr	r1, [r3, #28]
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	691a      	ldr	r2, [r3, #16]
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	430a      	orrs	r2, r1
 800d526:	61da      	str	r2, [r3, #28]
      break;
 800d528:	e064      	b.n	800d5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	68b9      	ldr	r1, [r7, #8]
 800d530:	4618      	mov	r0, r3
 800d532:	f000 fc07 	bl	800dd44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	69da      	ldr	r2, [r3, #28]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	69da      	ldr	r2, [r3, #28]
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	69d9      	ldr	r1, [r3, #28]
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	021a      	lsls	r2, r3, #8
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	430a      	orrs	r2, r1
 800d568:	61da      	str	r2, [r3, #28]
      break;
 800d56a:	e043      	b.n	800d5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	68b9      	ldr	r1, [r7, #8]
 800d572:	4618      	mov	r0, r3
 800d574:	f000 fc50 	bl	800de18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f042 0208 	orr.w	r2, r2, #8
 800d586:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f022 0204 	bic.w	r2, r2, #4
 800d596:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	691a      	ldr	r2, [r3, #16]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	430a      	orrs	r2, r1
 800d5a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d5aa:	e023      	b.n	800d5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	68b9      	ldr	r1, [r7, #8]
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f000 fc94 	bl	800dee0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d5c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	691b      	ldr	r3, [r3, #16]
 800d5e2:	021a      	lsls	r2, r3, #8
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	430a      	orrs	r2, r1
 800d5ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d5ec:	e002      	b.n	800d5f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	75fb      	strb	r3, [r7, #23]
      break;
 800d5f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d5fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3718      	adds	r7, #24
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop

0800d608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d612:	2300      	movs	r3, #0
 800d614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d101      	bne.n	800d624 <HAL_TIM_ConfigClockSource+0x1c>
 800d620:	2302      	movs	r3, #2
 800d622:	e0dc      	b.n	800d7de <HAL_TIM_ConfigClockSource+0x1d6>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2201      	movs	r2, #1
 800d628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2202      	movs	r2, #2
 800d630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d63c:	68ba      	ldr	r2, [r7, #8]
 800d63e:	4b6a      	ldr	r3, [pc, #424]	; (800d7e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d640:	4013      	ands	r3, r2
 800d642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d64a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	68ba      	ldr	r2, [r7, #8]
 800d652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a64      	ldr	r2, [pc, #400]	; (800d7ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	f000 80a9 	beq.w	800d7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d660:	4a62      	ldr	r2, [pc, #392]	; (800d7ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800d662:	4293      	cmp	r3, r2
 800d664:	f200 80ae 	bhi.w	800d7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d668:	4a61      	ldr	r2, [pc, #388]	; (800d7f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	f000 80a1 	beq.w	800d7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d670:	4a5f      	ldr	r2, [pc, #380]	; (800d7f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d672:	4293      	cmp	r3, r2
 800d674:	f200 80a6 	bhi.w	800d7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d678:	4a5e      	ldr	r2, [pc, #376]	; (800d7f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	f000 8099 	beq.w	800d7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d680:	4a5c      	ldr	r2, [pc, #368]	; (800d7f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d682:	4293      	cmp	r3, r2
 800d684:	f200 809e 	bhi.w	800d7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d688:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d68c:	f000 8091 	beq.w	800d7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d690:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d694:	f200 8096 	bhi.w	800d7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d69c:	f000 8089 	beq.w	800d7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6a4:	f200 808e 	bhi.w	800d7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6ac:	d03e      	beq.n	800d72c <HAL_TIM_ConfigClockSource+0x124>
 800d6ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6b2:	f200 8087 	bhi.w	800d7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6ba:	f000 8086 	beq.w	800d7ca <HAL_TIM_ConfigClockSource+0x1c2>
 800d6be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6c2:	d87f      	bhi.n	800d7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6c4:	2b70      	cmp	r3, #112	; 0x70
 800d6c6:	d01a      	beq.n	800d6fe <HAL_TIM_ConfigClockSource+0xf6>
 800d6c8:	2b70      	cmp	r3, #112	; 0x70
 800d6ca:	d87b      	bhi.n	800d7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6cc:	2b60      	cmp	r3, #96	; 0x60
 800d6ce:	d050      	beq.n	800d772 <HAL_TIM_ConfigClockSource+0x16a>
 800d6d0:	2b60      	cmp	r3, #96	; 0x60
 800d6d2:	d877      	bhi.n	800d7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6d4:	2b50      	cmp	r3, #80	; 0x50
 800d6d6:	d03c      	beq.n	800d752 <HAL_TIM_ConfigClockSource+0x14a>
 800d6d8:	2b50      	cmp	r3, #80	; 0x50
 800d6da:	d873      	bhi.n	800d7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6dc:	2b40      	cmp	r3, #64	; 0x40
 800d6de:	d058      	beq.n	800d792 <HAL_TIM_ConfigClockSource+0x18a>
 800d6e0:	2b40      	cmp	r3, #64	; 0x40
 800d6e2:	d86f      	bhi.n	800d7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6e4:	2b30      	cmp	r3, #48	; 0x30
 800d6e6:	d064      	beq.n	800d7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6e8:	2b30      	cmp	r3, #48	; 0x30
 800d6ea:	d86b      	bhi.n	800d7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6ec:	2b20      	cmp	r3, #32
 800d6ee:	d060      	beq.n	800d7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6f0:	2b20      	cmp	r3, #32
 800d6f2:	d867      	bhi.n	800d7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d05c      	beq.n	800d7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6f8:	2b10      	cmp	r3, #16
 800d6fa:	d05a      	beq.n	800d7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6fc:	e062      	b.n	800d7c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6818      	ldr	r0, [r3, #0]
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	6899      	ldr	r1, [r3, #8]
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	685a      	ldr	r2, [r3, #4]
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	f000 fedf 	bl	800e4d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	68ba      	ldr	r2, [r7, #8]
 800d728:	609a      	str	r2, [r3, #8]
      break;
 800d72a:	e04f      	b.n	800d7cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6818      	ldr	r0, [r3, #0]
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	6899      	ldr	r1, [r3, #8]
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	685a      	ldr	r2, [r3, #4]
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	68db      	ldr	r3, [r3, #12]
 800d73c:	f000 fec8 	bl	800e4d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	689a      	ldr	r2, [r3, #8]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d74e:	609a      	str	r2, [r3, #8]
      break;
 800d750:	e03c      	b.n	800d7cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6818      	ldr	r0, [r3, #0]
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	6859      	ldr	r1, [r3, #4]
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	461a      	mov	r2, r3
 800d760:	f000 fd82 	bl	800e268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	2150      	movs	r1, #80	; 0x50
 800d76a:	4618      	mov	r0, r3
 800d76c:	f000 fe92 	bl	800e494 <TIM_ITRx_SetConfig>
      break;
 800d770:	e02c      	b.n	800d7cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6818      	ldr	r0, [r3, #0]
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	6859      	ldr	r1, [r3, #4]
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	461a      	mov	r2, r3
 800d780:	f000 fdde 	bl	800e340 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2160      	movs	r1, #96	; 0x60
 800d78a:	4618      	mov	r0, r3
 800d78c:	f000 fe82 	bl	800e494 <TIM_ITRx_SetConfig>
      break;
 800d790:	e01c      	b.n	800d7cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6818      	ldr	r0, [r3, #0]
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	6859      	ldr	r1, [r3, #4]
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	461a      	mov	r2, r3
 800d7a0:	f000 fd62 	bl	800e268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2140      	movs	r1, #64	; 0x40
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f000 fe72 	bl	800e494 <TIM_ITRx_SetConfig>
      break;
 800d7b0:	e00c      	b.n	800d7cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	4610      	mov	r0, r2
 800d7be:	f000 fe69 	bl	800e494 <TIM_ITRx_SetConfig>
      break;
 800d7c2:	e003      	b.n	800d7cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	73fb      	strb	r3, [r7, #15]
      break;
 800d7c8:	e000      	b.n	800d7cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d7ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3710      	adds	r7, #16
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	ffceff88 	.word	0xffceff88
 800d7ec:	00100040 	.word	0x00100040
 800d7f0:	00100030 	.word	0x00100030
 800d7f4:	00100020 	.word	0x00100020

0800d7f8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d101      	bne.n	800d810 <HAL_TIM_SlaveConfigSynchro+0x18>
 800d80c:	2302      	movs	r3, #2
 800d80e:	e031      	b.n	800d874 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2201      	movs	r2, #1
 800d814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2202      	movs	r2, #2
 800d81c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d820:	6839      	ldr	r1, [r7, #0]
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f000 fbc2 	bl	800dfac <TIM_SlaveTimer_SetConfig>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d009      	beq.n	800d842 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2201      	movs	r2, #1
 800d832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2200      	movs	r2, #0
 800d83a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800d83e:	2301      	movs	r3, #1
 800d840:	e018      	b.n	800d874 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	68da      	ldr	r2, [r3, #12]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d850:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	68da      	ldr	r2, [r3, #12]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d860:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2201      	movs	r2, #1
 800d866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d872:	2300      	movs	r3, #0
}
 800d874:	4618      	mov	r0, r3
 800d876:	3708      	adds	r7, #8
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b083      	sub	sp, #12
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d884:	bf00      	nop
 800d886:	370c      	adds	r7, #12
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr

0800d890 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d898:	bf00      	nop
 800d89a:	370c      	adds	r7, #12
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr

0800d8a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d8ac:	bf00      	nop
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b083      	sub	sp, #12
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d8c0:	bf00      	nop
 800d8c2:	370c      	adds	r7, #12
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr

0800d8cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b085      	sub	sp, #20
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4a40      	ldr	r2, [pc, #256]	; (800d9e0 <TIM_Base_SetConfig+0x114>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d013      	beq.n	800d90c <TIM_Base_SetConfig+0x40>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8ea:	d00f      	beq.n	800d90c <TIM_Base_SetConfig+0x40>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4a3d      	ldr	r2, [pc, #244]	; (800d9e4 <TIM_Base_SetConfig+0x118>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d00b      	beq.n	800d90c <TIM_Base_SetConfig+0x40>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	4a3c      	ldr	r2, [pc, #240]	; (800d9e8 <TIM_Base_SetConfig+0x11c>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d007      	beq.n	800d90c <TIM_Base_SetConfig+0x40>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	4a3b      	ldr	r2, [pc, #236]	; (800d9ec <TIM_Base_SetConfig+0x120>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d003      	beq.n	800d90c <TIM_Base_SetConfig+0x40>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	4a3a      	ldr	r2, [pc, #232]	; (800d9f0 <TIM_Base_SetConfig+0x124>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	d108      	bne.n	800d91e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	4313      	orrs	r3, r2
 800d91c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4a2f      	ldr	r2, [pc, #188]	; (800d9e0 <TIM_Base_SetConfig+0x114>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d01f      	beq.n	800d966 <TIM_Base_SetConfig+0x9a>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d92c:	d01b      	beq.n	800d966 <TIM_Base_SetConfig+0x9a>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	4a2c      	ldr	r2, [pc, #176]	; (800d9e4 <TIM_Base_SetConfig+0x118>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d017      	beq.n	800d966 <TIM_Base_SetConfig+0x9a>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	4a2b      	ldr	r2, [pc, #172]	; (800d9e8 <TIM_Base_SetConfig+0x11c>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d013      	beq.n	800d966 <TIM_Base_SetConfig+0x9a>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	4a2a      	ldr	r2, [pc, #168]	; (800d9ec <TIM_Base_SetConfig+0x120>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d00f      	beq.n	800d966 <TIM_Base_SetConfig+0x9a>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	4a29      	ldr	r2, [pc, #164]	; (800d9f0 <TIM_Base_SetConfig+0x124>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d00b      	beq.n	800d966 <TIM_Base_SetConfig+0x9a>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	4a28      	ldr	r2, [pc, #160]	; (800d9f4 <TIM_Base_SetConfig+0x128>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d007      	beq.n	800d966 <TIM_Base_SetConfig+0x9a>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	4a27      	ldr	r2, [pc, #156]	; (800d9f8 <TIM_Base_SetConfig+0x12c>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d003      	beq.n	800d966 <TIM_Base_SetConfig+0x9a>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	4a26      	ldr	r2, [pc, #152]	; (800d9fc <TIM_Base_SetConfig+0x130>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d108      	bne.n	800d978 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d96c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	68fa      	ldr	r2, [r7, #12]
 800d974:	4313      	orrs	r3, r2
 800d976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	695b      	ldr	r3, [r3, #20]
 800d982:	4313      	orrs	r3, r2
 800d984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	68fa      	ldr	r2, [r7, #12]
 800d98a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	689a      	ldr	r2, [r3, #8]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	4a10      	ldr	r2, [pc, #64]	; (800d9e0 <TIM_Base_SetConfig+0x114>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d00f      	beq.n	800d9c4 <TIM_Base_SetConfig+0xf8>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	4a12      	ldr	r2, [pc, #72]	; (800d9f0 <TIM_Base_SetConfig+0x124>)
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d00b      	beq.n	800d9c4 <TIM_Base_SetConfig+0xf8>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	4a11      	ldr	r2, [pc, #68]	; (800d9f4 <TIM_Base_SetConfig+0x128>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d007      	beq.n	800d9c4 <TIM_Base_SetConfig+0xf8>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	4a10      	ldr	r2, [pc, #64]	; (800d9f8 <TIM_Base_SetConfig+0x12c>)
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d003      	beq.n	800d9c4 <TIM_Base_SetConfig+0xf8>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	4a0f      	ldr	r2, [pc, #60]	; (800d9fc <TIM_Base_SetConfig+0x130>)
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d103      	bne.n	800d9cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	691a      	ldr	r2, [r3, #16]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	615a      	str	r2, [r3, #20]
}
 800d9d2:	bf00      	nop
 800d9d4:	3714      	adds	r7, #20
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop
 800d9e0:	40010000 	.word	0x40010000
 800d9e4:	40000400 	.word	0x40000400
 800d9e8:	40000800 	.word	0x40000800
 800d9ec:	40000c00 	.word	0x40000c00
 800d9f0:	40010400 	.word	0x40010400
 800d9f4:	40014000 	.word	0x40014000
 800d9f8:	40014400 	.word	0x40014400
 800d9fc:	40014800 	.word	0x40014800

0800da00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800da00:	b480      	push	{r7}
 800da02:	b087      	sub	sp, #28
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6a1b      	ldr	r3, [r3, #32]
 800da0e:	f023 0201 	bic.w	r2, r3, #1
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6a1b      	ldr	r3, [r3, #32]
 800da1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	699b      	ldr	r3, [r3, #24]
 800da26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	4b37      	ldr	r3, [pc, #220]	; (800db08 <TIM_OC1_SetConfig+0x108>)
 800da2c:	4013      	ands	r3, r2
 800da2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f023 0303 	bic.w	r3, r3, #3
 800da36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	68fa      	ldr	r2, [r7, #12]
 800da3e:	4313      	orrs	r3, r2
 800da40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	f023 0302 	bic.w	r3, r3, #2
 800da48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	697a      	ldr	r2, [r7, #20]
 800da50:	4313      	orrs	r3, r2
 800da52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	4a2d      	ldr	r2, [pc, #180]	; (800db0c <TIM_OC1_SetConfig+0x10c>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d00f      	beq.n	800da7c <TIM_OC1_SetConfig+0x7c>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	4a2c      	ldr	r2, [pc, #176]	; (800db10 <TIM_OC1_SetConfig+0x110>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d00b      	beq.n	800da7c <TIM_OC1_SetConfig+0x7c>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	4a2b      	ldr	r2, [pc, #172]	; (800db14 <TIM_OC1_SetConfig+0x114>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d007      	beq.n	800da7c <TIM_OC1_SetConfig+0x7c>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	4a2a      	ldr	r2, [pc, #168]	; (800db18 <TIM_OC1_SetConfig+0x118>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d003      	beq.n	800da7c <TIM_OC1_SetConfig+0x7c>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	4a29      	ldr	r2, [pc, #164]	; (800db1c <TIM_OC1_SetConfig+0x11c>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d10c      	bne.n	800da96 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	f023 0308 	bic.w	r3, r3, #8
 800da82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	68db      	ldr	r3, [r3, #12]
 800da88:	697a      	ldr	r2, [r7, #20]
 800da8a:	4313      	orrs	r3, r2
 800da8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	f023 0304 	bic.w	r3, r3, #4
 800da94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	4a1c      	ldr	r2, [pc, #112]	; (800db0c <TIM_OC1_SetConfig+0x10c>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d00f      	beq.n	800dabe <TIM_OC1_SetConfig+0xbe>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	4a1b      	ldr	r2, [pc, #108]	; (800db10 <TIM_OC1_SetConfig+0x110>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d00b      	beq.n	800dabe <TIM_OC1_SetConfig+0xbe>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	4a1a      	ldr	r2, [pc, #104]	; (800db14 <TIM_OC1_SetConfig+0x114>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d007      	beq.n	800dabe <TIM_OC1_SetConfig+0xbe>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	4a19      	ldr	r2, [pc, #100]	; (800db18 <TIM_OC1_SetConfig+0x118>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d003      	beq.n	800dabe <TIM_OC1_SetConfig+0xbe>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	4a18      	ldr	r2, [pc, #96]	; (800db1c <TIM_OC1_SetConfig+0x11c>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d111      	bne.n	800dae2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dacc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	695b      	ldr	r3, [r3, #20]
 800dad2:	693a      	ldr	r2, [r7, #16]
 800dad4:	4313      	orrs	r3, r2
 800dad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	699b      	ldr	r3, [r3, #24]
 800dadc:	693a      	ldr	r2, [r7, #16]
 800dade:	4313      	orrs	r3, r2
 800dae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	693a      	ldr	r2, [r7, #16]
 800dae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	68fa      	ldr	r2, [r7, #12]
 800daec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	685a      	ldr	r2, [r3, #4]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	697a      	ldr	r2, [r7, #20]
 800dafa:	621a      	str	r2, [r3, #32]
}
 800dafc:	bf00      	nop
 800dafe:	371c      	adds	r7, #28
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr
 800db08:	fffeff8f 	.word	0xfffeff8f
 800db0c:	40010000 	.word	0x40010000
 800db10:	40010400 	.word	0x40010400
 800db14:	40014000 	.word	0x40014000
 800db18:	40014400 	.word	0x40014400
 800db1c:	40014800 	.word	0x40014800

0800db20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800db20:	b480      	push	{r7}
 800db22:	b087      	sub	sp, #28
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6a1b      	ldr	r3, [r3, #32]
 800db2e:	f023 0210 	bic.w	r2, r3, #16
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6a1b      	ldr	r3, [r3, #32]
 800db3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	699b      	ldr	r3, [r3, #24]
 800db46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800db48:	68fa      	ldr	r2, [r7, #12]
 800db4a:	4b34      	ldr	r3, [pc, #208]	; (800dc1c <TIM_OC2_SetConfig+0xfc>)
 800db4c:	4013      	ands	r3, r2
 800db4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	021b      	lsls	r3, r3, #8
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	4313      	orrs	r3, r2
 800db62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	f023 0320 	bic.w	r3, r3, #32
 800db6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	689b      	ldr	r3, [r3, #8]
 800db70:	011b      	lsls	r3, r3, #4
 800db72:	697a      	ldr	r2, [r7, #20]
 800db74:	4313      	orrs	r3, r2
 800db76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	4a29      	ldr	r2, [pc, #164]	; (800dc20 <TIM_OC2_SetConfig+0x100>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d003      	beq.n	800db88 <TIM_OC2_SetConfig+0x68>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	4a28      	ldr	r2, [pc, #160]	; (800dc24 <TIM_OC2_SetConfig+0x104>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d10d      	bne.n	800dba4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	68db      	ldr	r3, [r3, #12]
 800db94:	011b      	lsls	r3, r3, #4
 800db96:	697a      	ldr	r2, [r7, #20]
 800db98:	4313      	orrs	r3, r2
 800db9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dba2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	4a1e      	ldr	r2, [pc, #120]	; (800dc20 <TIM_OC2_SetConfig+0x100>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d00f      	beq.n	800dbcc <TIM_OC2_SetConfig+0xac>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	4a1d      	ldr	r2, [pc, #116]	; (800dc24 <TIM_OC2_SetConfig+0x104>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d00b      	beq.n	800dbcc <TIM_OC2_SetConfig+0xac>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	4a1c      	ldr	r2, [pc, #112]	; (800dc28 <TIM_OC2_SetConfig+0x108>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d007      	beq.n	800dbcc <TIM_OC2_SetConfig+0xac>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	4a1b      	ldr	r2, [pc, #108]	; (800dc2c <TIM_OC2_SetConfig+0x10c>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d003      	beq.n	800dbcc <TIM_OC2_SetConfig+0xac>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	4a1a      	ldr	r2, [pc, #104]	; (800dc30 <TIM_OC2_SetConfig+0x110>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d113      	bne.n	800dbf4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dbd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dbda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	695b      	ldr	r3, [r3, #20]
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	693a      	ldr	r2, [r7, #16]
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	699b      	ldr	r3, [r3, #24]
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	693a      	ldr	r2, [r7, #16]
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	693a      	ldr	r2, [r7, #16]
 800dbf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	68fa      	ldr	r2, [r7, #12]
 800dbfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	685a      	ldr	r2, [r3, #4]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	697a      	ldr	r2, [r7, #20]
 800dc0c:	621a      	str	r2, [r3, #32]
}
 800dc0e:	bf00      	nop
 800dc10:	371c      	adds	r7, #28
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr
 800dc1a:	bf00      	nop
 800dc1c:	feff8fff 	.word	0xfeff8fff
 800dc20:	40010000 	.word	0x40010000
 800dc24:	40010400 	.word	0x40010400
 800dc28:	40014000 	.word	0x40014000
 800dc2c:	40014400 	.word	0x40014400
 800dc30:	40014800 	.word	0x40014800

0800dc34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b087      	sub	sp, #28
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6a1b      	ldr	r3, [r3, #32]
 800dc42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6a1b      	ldr	r3, [r3, #32]
 800dc4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	69db      	ldr	r3, [r3, #28]
 800dc5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	4b33      	ldr	r3, [pc, #204]	; (800dd2c <TIM_OC3_SetConfig+0xf8>)
 800dc60:	4013      	ands	r3, r2
 800dc62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f023 0303 	bic.w	r3, r3, #3
 800dc6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	68fa      	ldr	r2, [r7, #12]
 800dc72:	4313      	orrs	r3, r2
 800dc74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	021b      	lsls	r3, r3, #8
 800dc84:	697a      	ldr	r2, [r7, #20]
 800dc86:	4313      	orrs	r3, r2
 800dc88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	4a28      	ldr	r2, [pc, #160]	; (800dd30 <TIM_OC3_SetConfig+0xfc>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d003      	beq.n	800dc9a <TIM_OC3_SetConfig+0x66>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	4a27      	ldr	r2, [pc, #156]	; (800dd34 <TIM_OC3_SetConfig+0x100>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d10d      	bne.n	800dcb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	021b      	lsls	r3, r3, #8
 800dca8:	697a      	ldr	r2, [r7, #20]
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dcb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4a1d      	ldr	r2, [pc, #116]	; (800dd30 <TIM_OC3_SetConfig+0xfc>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d00f      	beq.n	800dcde <TIM_OC3_SetConfig+0xaa>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4a1c      	ldr	r2, [pc, #112]	; (800dd34 <TIM_OC3_SetConfig+0x100>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d00b      	beq.n	800dcde <TIM_OC3_SetConfig+0xaa>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	4a1b      	ldr	r2, [pc, #108]	; (800dd38 <TIM_OC3_SetConfig+0x104>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d007      	beq.n	800dcde <TIM_OC3_SetConfig+0xaa>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4a1a      	ldr	r2, [pc, #104]	; (800dd3c <TIM_OC3_SetConfig+0x108>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d003      	beq.n	800dcde <TIM_OC3_SetConfig+0xaa>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	4a19      	ldr	r2, [pc, #100]	; (800dd40 <TIM_OC3_SetConfig+0x10c>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d113      	bne.n	800dd06 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dcec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	695b      	ldr	r3, [r3, #20]
 800dcf2:	011b      	lsls	r3, r3, #4
 800dcf4:	693a      	ldr	r2, [r7, #16]
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	699b      	ldr	r3, [r3, #24]
 800dcfe:	011b      	lsls	r3, r3, #4
 800dd00:	693a      	ldr	r2, [r7, #16]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	693a      	ldr	r2, [r7, #16]
 800dd0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	68fa      	ldr	r2, [r7, #12]
 800dd10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	685a      	ldr	r2, [r3, #4]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	697a      	ldr	r2, [r7, #20]
 800dd1e:	621a      	str	r2, [r3, #32]
}
 800dd20:	bf00      	nop
 800dd22:	371c      	adds	r7, #28
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr
 800dd2c:	fffeff8f 	.word	0xfffeff8f
 800dd30:	40010000 	.word	0x40010000
 800dd34:	40010400 	.word	0x40010400
 800dd38:	40014000 	.word	0x40014000
 800dd3c:	40014400 	.word	0x40014400
 800dd40:	40014800 	.word	0x40014800

0800dd44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b087      	sub	sp, #28
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6a1b      	ldr	r3, [r3, #32]
 800dd52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6a1b      	ldr	r3, [r3, #32]
 800dd5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	69db      	ldr	r3, [r3, #28]
 800dd6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dd6c:	68fa      	ldr	r2, [r7, #12]
 800dd6e:	4b24      	ldr	r3, [pc, #144]	; (800de00 <TIM_OC4_SetConfig+0xbc>)
 800dd70:	4013      	ands	r3, r2
 800dd72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	021b      	lsls	r3, r3, #8
 800dd82:	68fa      	ldr	r2, [r7, #12]
 800dd84:	4313      	orrs	r3, r2
 800dd86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dd8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	031b      	lsls	r3, r3, #12
 800dd96:	693a      	ldr	r2, [r7, #16]
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	4a19      	ldr	r2, [pc, #100]	; (800de04 <TIM_OC4_SetConfig+0xc0>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d00f      	beq.n	800ddc4 <TIM_OC4_SetConfig+0x80>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	4a18      	ldr	r2, [pc, #96]	; (800de08 <TIM_OC4_SetConfig+0xc4>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d00b      	beq.n	800ddc4 <TIM_OC4_SetConfig+0x80>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4a17      	ldr	r2, [pc, #92]	; (800de0c <TIM_OC4_SetConfig+0xc8>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d007      	beq.n	800ddc4 <TIM_OC4_SetConfig+0x80>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	4a16      	ldr	r2, [pc, #88]	; (800de10 <TIM_OC4_SetConfig+0xcc>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d003      	beq.n	800ddc4 <TIM_OC4_SetConfig+0x80>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	4a15      	ldr	r2, [pc, #84]	; (800de14 <TIM_OC4_SetConfig+0xd0>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d109      	bne.n	800ddd8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ddca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	695b      	ldr	r3, [r3, #20]
 800ddd0:	019b      	lsls	r3, r3, #6
 800ddd2:	697a      	ldr	r2, [r7, #20]
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	697a      	ldr	r2, [r7, #20]
 800dddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	68fa      	ldr	r2, [r7, #12]
 800dde2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	685a      	ldr	r2, [r3, #4]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	693a      	ldr	r2, [r7, #16]
 800ddf0:	621a      	str	r2, [r3, #32]
}
 800ddf2:	bf00      	nop
 800ddf4:	371c      	adds	r7, #28
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop
 800de00:	feff8fff 	.word	0xfeff8fff
 800de04:	40010000 	.word	0x40010000
 800de08:	40010400 	.word	0x40010400
 800de0c:	40014000 	.word	0x40014000
 800de10:	40014400 	.word	0x40014400
 800de14:	40014800 	.word	0x40014800

0800de18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800de18:	b480      	push	{r7}
 800de1a:	b087      	sub	sp, #28
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6a1b      	ldr	r3, [r3, #32]
 800de26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6a1b      	ldr	r3, [r3, #32]
 800de32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800de40:	68fa      	ldr	r2, [r7, #12]
 800de42:	4b21      	ldr	r3, [pc, #132]	; (800dec8 <TIM_OC5_SetConfig+0xb0>)
 800de44:	4013      	ands	r3, r2
 800de46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	68fa      	ldr	r2, [r7, #12]
 800de4e:	4313      	orrs	r3, r2
 800de50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800de58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	689b      	ldr	r3, [r3, #8]
 800de5e:	041b      	lsls	r3, r3, #16
 800de60:	693a      	ldr	r2, [r7, #16]
 800de62:	4313      	orrs	r3, r2
 800de64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a18      	ldr	r2, [pc, #96]	; (800decc <TIM_OC5_SetConfig+0xb4>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d00f      	beq.n	800de8e <TIM_OC5_SetConfig+0x76>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a17      	ldr	r2, [pc, #92]	; (800ded0 <TIM_OC5_SetConfig+0xb8>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d00b      	beq.n	800de8e <TIM_OC5_SetConfig+0x76>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a16      	ldr	r2, [pc, #88]	; (800ded4 <TIM_OC5_SetConfig+0xbc>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d007      	beq.n	800de8e <TIM_OC5_SetConfig+0x76>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4a15      	ldr	r2, [pc, #84]	; (800ded8 <TIM_OC5_SetConfig+0xc0>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d003      	beq.n	800de8e <TIM_OC5_SetConfig+0x76>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	4a14      	ldr	r2, [pc, #80]	; (800dedc <TIM_OC5_SetConfig+0xc4>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d109      	bne.n	800dea2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	021b      	lsls	r3, r3, #8
 800de9c:	697a      	ldr	r2, [r7, #20]
 800de9e:	4313      	orrs	r3, r2
 800dea0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	697a      	ldr	r2, [r7, #20]
 800dea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	68fa      	ldr	r2, [r7, #12]
 800deac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	685a      	ldr	r2, [r3, #4]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	693a      	ldr	r2, [r7, #16]
 800deba:	621a      	str	r2, [r3, #32]
}
 800debc:	bf00      	nop
 800debe:	371c      	adds	r7, #28
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr
 800dec8:	fffeff8f 	.word	0xfffeff8f
 800decc:	40010000 	.word	0x40010000
 800ded0:	40010400 	.word	0x40010400
 800ded4:	40014000 	.word	0x40014000
 800ded8:	40014400 	.word	0x40014400
 800dedc:	40014800 	.word	0x40014800

0800dee0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b087      	sub	sp, #28
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6a1b      	ldr	r3, [r3, #32]
 800deee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6a1b      	ldr	r3, [r3, #32]
 800defa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800df08:	68fa      	ldr	r2, [r7, #12]
 800df0a:	4b22      	ldr	r3, [pc, #136]	; (800df94 <TIM_OC6_SetConfig+0xb4>)
 800df0c:	4013      	ands	r3, r2
 800df0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	021b      	lsls	r3, r3, #8
 800df16:	68fa      	ldr	r2, [r7, #12]
 800df18:	4313      	orrs	r3, r2
 800df1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800df22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	051b      	lsls	r3, r3, #20
 800df2a:	693a      	ldr	r2, [r7, #16]
 800df2c:	4313      	orrs	r3, r2
 800df2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	4a19      	ldr	r2, [pc, #100]	; (800df98 <TIM_OC6_SetConfig+0xb8>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d00f      	beq.n	800df58 <TIM_OC6_SetConfig+0x78>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	4a18      	ldr	r2, [pc, #96]	; (800df9c <TIM_OC6_SetConfig+0xbc>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d00b      	beq.n	800df58 <TIM_OC6_SetConfig+0x78>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	4a17      	ldr	r2, [pc, #92]	; (800dfa0 <TIM_OC6_SetConfig+0xc0>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d007      	beq.n	800df58 <TIM_OC6_SetConfig+0x78>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	4a16      	ldr	r2, [pc, #88]	; (800dfa4 <TIM_OC6_SetConfig+0xc4>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d003      	beq.n	800df58 <TIM_OC6_SetConfig+0x78>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	4a15      	ldr	r2, [pc, #84]	; (800dfa8 <TIM_OC6_SetConfig+0xc8>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d109      	bne.n	800df6c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800df5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	695b      	ldr	r3, [r3, #20]
 800df64:	029b      	lsls	r3, r3, #10
 800df66:	697a      	ldr	r2, [r7, #20]
 800df68:	4313      	orrs	r3, r2
 800df6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	697a      	ldr	r2, [r7, #20]
 800df70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	68fa      	ldr	r2, [r7, #12]
 800df76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	685a      	ldr	r2, [r3, #4]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	693a      	ldr	r2, [r7, #16]
 800df84:	621a      	str	r2, [r3, #32]
}
 800df86:	bf00      	nop
 800df88:	371c      	adds	r7, #28
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	feff8fff 	.word	0xfeff8fff
 800df98:	40010000 	.word	0x40010000
 800df9c:	40010400 	.word	0x40010400
 800dfa0:	40014000 	.word	0x40014000
 800dfa4:	40014400 	.word	0x40014400
 800dfa8:	40014800 	.word	0x40014800

0800dfac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b086      	sub	sp, #24
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	689b      	ldr	r3, [r3, #8]
 800dfc0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dfc2:	693a      	ldr	r2, [r7, #16]
 800dfc4:	4b65      	ldr	r3, [pc, #404]	; (800e15c <TIM_SlaveTimer_SetConfig+0x1b0>)
 800dfc6:	4013      	ands	r3, r2
 800dfc8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	693a      	ldr	r2, [r7, #16]
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800dfd4:	693a      	ldr	r2, [r7, #16]
 800dfd6:	4b62      	ldr	r3, [pc, #392]	; (800e160 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800dfd8:	4013      	ands	r3, r2
 800dfda:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	693a      	ldr	r2, [r7, #16]
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	693a      	ldr	r2, [r7, #16]
 800dfec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	4a5c      	ldr	r2, [pc, #368]	; (800e164 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	f000 80ab 	beq.w	800e150 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dffa:	4a5a      	ldr	r2, [pc, #360]	; (800e164 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800dffc:	4293      	cmp	r3, r2
 800dffe:	f200 80a4 	bhi.w	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
 800e002:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e006:	f000 80a3 	beq.w	800e150 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e00a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e00e:	f200 809c 	bhi.w	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
 800e012:	4a55      	ldr	r2, [pc, #340]	; (800e168 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800e014:	4293      	cmp	r3, r2
 800e016:	f000 809b 	beq.w	800e150 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e01a:	4a53      	ldr	r2, [pc, #332]	; (800e168 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800e01c:	4293      	cmp	r3, r2
 800e01e:	f200 8094 	bhi.w	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
 800e022:	4a52      	ldr	r2, [pc, #328]	; (800e16c <TIM_SlaveTimer_SetConfig+0x1c0>)
 800e024:	4293      	cmp	r3, r2
 800e026:	f000 8093 	beq.w	800e150 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e02a:	4a50      	ldr	r2, [pc, #320]	; (800e16c <TIM_SlaveTimer_SetConfig+0x1c0>)
 800e02c:	4293      	cmp	r3, r2
 800e02e:	f200 808c 	bhi.w	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
 800e032:	4a4f      	ldr	r2, [pc, #316]	; (800e170 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800e034:	4293      	cmp	r3, r2
 800e036:	f000 808b 	beq.w	800e150 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e03a:	4a4d      	ldr	r2, [pc, #308]	; (800e170 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	f200 8084 	bhi.w	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
 800e042:	4a4c      	ldr	r2, [pc, #304]	; (800e174 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800e044:	4293      	cmp	r3, r2
 800e046:	f000 8083 	beq.w	800e150 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e04a:	4a4a      	ldr	r2, [pc, #296]	; (800e174 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800e04c:	4293      	cmp	r3, r2
 800e04e:	d87c      	bhi.n	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
 800e050:	4a49      	ldr	r2, [pc, #292]	; (800e178 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d07c      	beq.n	800e150 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e056:	4a48      	ldr	r2, [pc, #288]	; (800e178 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d876      	bhi.n	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
 800e05c:	4a47      	ldr	r2, [pc, #284]	; (800e17c <TIM_SlaveTimer_SetConfig+0x1d0>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d076      	beq.n	800e150 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e062:	4a46      	ldr	r2, [pc, #280]	; (800e17c <TIM_SlaveTimer_SetConfig+0x1d0>)
 800e064:	4293      	cmp	r3, r2
 800e066:	d870      	bhi.n	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
 800e068:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e06c:	d070      	beq.n	800e150 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e06e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e072:	d86a      	bhi.n	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
 800e074:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e078:	d06a      	beq.n	800e150 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e07a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e07e:	d864      	bhi.n	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
 800e080:	2b70      	cmp	r3, #112	; 0x70
 800e082:	d01a      	beq.n	800e0ba <TIM_SlaveTimer_SetConfig+0x10e>
 800e084:	2b70      	cmp	r3, #112	; 0x70
 800e086:	d860      	bhi.n	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
 800e088:	2b60      	cmp	r3, #96	; 0x60
 800e08a:	d054      	beq.n	800e136 <TIM_SlaveTimer_SetConfig+0x18a>
 800e08c:	2b60      	cmp	r3, #96	; 0x60
 800e08e:	d85c      	bhi.n	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
 800e090:	2b50      	cmp	r3, #80	; 0x50
 800e092:	d046      	beq.n	800e122 <TIM_SlaveTimer_SetConfig+0x176>
 800e094:	2b50      	cmp	r3, #80	; 0x50
 800e096:	d858      	bhi.n	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
 800e098:	2b40      	cmp	r3, #64	; 0x40
 800e09a:	d019      	beq.n	800e0d0 <TIM_SlaveTimer_SetConfig+0x124>
 800e09c:	2b40      	cmp	r3, #64	; 0x40
 800e09e:	d854      	bhi.n	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
 800e0a0:	2b30      	cmp	r3, #48	; 0x30
 800e0a2:	d055      	beq.n	800e150 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e0a4:	2b30      	cmp	r3, #48	; 0x30
 800e0a6:	d850      	bhi.n	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
 800e0a8:	2b20      	cmp	r3, #32
 800e0aa:	d051      	beq.n	800e150 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e0ac:	2b20      	cmp	r3, #32
 800e0ae:	d84c      	bhi.n	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d04d      	beq.n	800e150 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e0b4:	2b10      	cmp	r3, #16
 800e0b6:	d04b      	beq.n	800e150 <TIM_SlaveTimer_SetConfig+0x1a4>
 800e0b8:	e047      	b.n	800e14a <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6818      	ldr	r0, [r3, #0]
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	68d9      	ldr	r1, [r3, #12]
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	689a      	ldr	r2, [r3, #8]
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	691b      	ldr	r3, [r3, #16]
 800e0ca:	f000 fa01 	bl	800e4d0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800e0ce:	e040      	b.n	800e152 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2b05      	cmp	r3, #5
 800e0d6:	d101      	bne.n	800e0dc <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	e03b      	b.n	800e154 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	6a1b      	ldr	r3, [r3, #32]
 800e0e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	6a1a      	ldr	r2, [r3, #32]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f022 0201 	bic.w	r2, r2, #1
 800e0f2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	699b      	ldr	r3, [r3, #24]
 800e0fa:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e102:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	691b      	ldr	r3, [r3, #16]
 800e108:	011b      	lsls	r3, r3, #4
 800e10a:	68ba      	ldr	r2, [r7, #8]
 800e10c:	4313      	orrs	r3, r2
 800e10e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	68ba      	ldr	r2, [r7, #8]
 800e116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	68fa      	ldr	r2, [r7, #12]
 800e11e:	621a      	str	r2, [r3, #32]
      break;
 800e120:	e017      	b.n	800e152 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6818      	ldr	r0, [r3, #0]
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	6899      	ldr	r1, [r3, #8]
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	691b      	ldr	r3, [r3, #16]
 800e12e:	461a      	mov	r2, r3
 800e130:	f000 f89a 	bl	800e268 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800e134:	e00d      	b.n	800e152 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6818      	ldr	r0, [r3, #0]
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	6899      	ldr	r1, [r3, #8]
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	691b      	ldr	r3, [r3, #16]
 800e142:	461a      	mov	r2, r3
 800e144:	f000 f8fc 	bl	800e340 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800e148:	e003      	b.n	800e152 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800e14a:	2301      	movs	r3, #1
 800e14c:	75fb      	strb	r3, [r7, #23]
      break;
 800e14e:	e000      	b.n	800e152 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800e150:	bf00      	nop
  }

  return status;
 800e152:	7dfb      	ldrb	r3, [r7, #23]
}
 800e154:	4618      	mov	r0, r3
 800e156:	3718      	adds	r7, #24
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	ffcfff8f 	.word	0xffcfff8f
 800e160:	fffefff8 	.word	0xfffefff8
 800e164:	00200010 	.word	0x00200010
 800e168:	00100070 	.word	0x00100070
 800e16c:	00100060 	.word	0x00100060
 800e170:	00100050 	.word	0x00100050
 800e174:	00100040 	.word	0x00100040
 800e178:	00100030 	.word	0x00100030
 800e17c:	00100020 	.word	0x00100020

0800e180 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800e180:	b480      	push	{r7}
 800e182:	b087      	sub	sp, #28
 800e184:	af00      	add	r7, sp, #0
 800e186:	60f8      	str	r0, [r7, #12]
 800e188:	60b9      	str	r1, [r7, #8]
 800e18a:	607a      	str	r2, [r7, #4]
 800e18c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	6a1b      	ldr	r3, [r3, #32]
 800e192:	f023 0201 	bic.w	r2, r3, #1
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	699b      	ldr	r3, [r3, #24]
 800e19e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	6a1b      	ldr	r3, [r3, #32]
 800e1a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	4a28      	ldr	r2, [pc, #160]	; (800e24c <TIM_TI1_SetConfig+0xcc>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d01b      	beq.n	800e1e6 <TIM_TI1_SetConfig+0x66>
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1b4:	d017      	beq.n	800e1e6 <TIM_TI1_SetConfig+0x66>
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	4a25      	ldr	r2, [pc, #148]	; (800e250 <TIM_TI1_SetConfig+0xd0>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d013      	beq.n	800e1e6 <TIM_TI1_SetConfig+0x66>
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	4a24      	ldr	r2, [pc, #144]	; (800e254 <TIM_TI1_SetConfig+0xd4>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d00f      	beq.n	800e1e6 <TIM_TI1_SetConfig+0x66>
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	4a23      	ldr	r2, [pc, #140]	; (800e258 <TIM_TI1_SetConfig+0xd8>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d00b      	beq.n	800e1e6 <TIM_TI1_SetConfig+0x66>
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	4a22      	ldr	r2, [pc, #136]	; (800e25c <TIM_TI1_SetConfig+0xdc>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d007      	beq.n	800e1e6 <TIM_TI1_SetConfig+0x66>
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	4a21      	ldr	r2, [pc, #132]	; (800e260 <TIM_TI1_SetConfig+0xe0>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d003      	beq.n	800e1e6 <TIM_TI1_SetConfig+0x66>
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	4a20      	ldr	r2, [pc, #128]	; (800e264 <TIM_TI1_SetConfig+0xe4>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d101      	bne.n	800e1ea <TIM_TI1_SetConfig+0x6a>
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e000      	b.n	800e1ec <TIM_TI1_SetConfig+0x6c>
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d008      	beq.n	800e202 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	f023 0303 	bic.w	r3, r3, #3
 800e1f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800e1f8:	697a      	ldr	r2, [r7, #20]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	617b      	str	r3, [r7, #20]
 800e200:	e003      	b.n	800e20a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	f043 0301 	orr.w	r3, r3, #1
 800e208:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	011b      	lsls	r3, r3, #4
 800e216:	b2db      	uxtb	r3, r3
 800e218:	697a      	ldr	r2, [r7, #20]
 800e21a:	4313      	orrs	r3, r2
 800e21c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	f023 030a 	bic.w	r3, r3, #10
 800e224:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	f003 030a 	and.w	r3, r3, #10
 800e22c:	693a      	ldr	r2, [r7, #16]
 800e22e:	4313      	orrs	r3, r2
 800e230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	697a      	ldr	r2, [r7, #20]
 800e236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	693a      	ldr	r2, [r7, #16]
 800e23c:	621a      	str	r2, [r3, #32]
}
 800e23e:	bf00      	nop
 800e240:	371c      	adds	r7, #28
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop
 800e24c:	40010000 	.word	0x40010000
 800e250:	40000400 	.word	0x40000400
 800e254:	40000800 	.word	0x40000800
 800e258:	40000c00 	.word	0x40000c00
 800e25c:	40010400 	.word	0x40010400
 800e260:	40001800 	.word	0x40001800
 800e264:	40014000 	.word	0x40014000

0800e268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e268:	b480      	push	{r7}
 800e26a:	b087      	sub	sp, #28
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	6a1b      	ldr	r3, [r3, #32]
 800e278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	6a1b      	ldr	r3, [r3, #32]
 800e27e:	f023 0201 	bic.w	r2, r3, #1
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	699b      	ldr	r3, [r3, #24]
 800e28a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	011b      	lsls	r3, r3, #4
 800e298:	693a      	ldr	r2, [r7, #16]
 800e29a:	4313      	orrs	r3, r2
 800e29c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	f023 030a 	bic.w	r3, r3, #10
 800e2a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e2a6:	697a      	ldr	r2, [r7, #20]
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	693a      	ldr	r2, [r7, #16]
 800e2b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	697a      	ldr	r2, [r7, #20]
 800e2b8:	621a      	str	r2, [r3, #32]
}
 800e2ba:	bf00      	nop
 800e2bc:	371c      	adds	r7, #28
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr

0800e2c6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e2c6:	b480      	push	{r7}
 800e2c8:	b087      	sub	sp, #28
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	60f8      	str	r0, [r7, #12]
 800e2ce:	60b9      	str	r1, [r7, #8]
 800e2d0:	607a      	str	r2, [r7, #4]
 800e2d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	6a1b      	ldr	r3, [r3, #32]
 800e2d8:	f023 0210 	bic.w	r2, r3, #16
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	699b      	ldr	r3, [r3, #24]
 800e2e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	6a1b      	ldr	r3, [r3, #32]
 800e2ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	021b      	lsls	r3, r3, #8
 800e2f8:	697a      	ldr	r2, [r7, #20]
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e304:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	031b      	lsls	r3, r3, #12
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	697a      	ldr	r2, [r7, #20]
 800e30e:	4313      	orrs	r3, r2
 800e310:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e318:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	011b      	lsls	r3, r3, #4
 800e31e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e322:	693a      	ldr	r2, [r7, #16]
 800e324:	4313      	orrs	r3, r2
 800e326:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	697a      	ldr	r2, [r7, #20]
 800e32c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	693a      	ldr	r2, [r7, #16]
 800e332:	621a      	str	r2, [r3, #32]
}
 800e334:	bf00      	nop
 800e336:	371c      	adds	r7, #28
 800e338:	46bd      	mov	sp, r7
 800e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33e:	4770      	bx	lr

0800e340 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e340:	b480      	push	{r7}
 800e342:	b087      	sub	sp, #28
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6a1b      	ldr	r3, [r3, #32]
 800e350:	f023 0210 	bic.w	r2, r3, #16
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	699b      	ldr	r3, [r3, #24]
 800e35c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	6a1b      	ldr	r3, [r3, #32]
 800e362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e36a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	031b      	lsls	r3, r3, #12
 800e370:	697a      	ldr	r2, [r7, #20]
 800e372:	4313      	orrs	r3, r2
 800e374:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e37c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	011b      	lsls	r3, r3, #4
 800e382:	693a      	ldr	r2, [r7, #16]
 800e384:	4313      	orrs	r3, r2
 800e386:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	697a      	ldr	r2, [r7, #20]
 800e38c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	693a      	ldr	r2, [r7, #16]
 800e392:	621a      	str	r2, [r3, #32]
}
 800e394:	bf00      	nop
 800e396:	371c      	adds	r7, #28
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr

0800e3a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b087      	sub	sp, #28
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	60b9      	str	r1, [r7, #8]
 800e3aa:	607a      	str	r2, [r7, #4]
 800e3ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6a1b      	ldr	r3, [r3, #32]
 800e3b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	69db      	ldr	r3, [r3, #28]
 800e3be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	6a1b      	ldr	r3, [r3, #32]
 800e3c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	f023 0303 	bic.w	r3, r3, #3
 800e3cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800e3ce:	697a      	ldr	r2, [r7, #20]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e3dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	011b      	lsls	r3, r3, #4
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	697a      	ldr	r2, [r7, #20]
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800e3f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	021b      	lsls	r3, r3, #8
 800e3f6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800e3fa:	693a      	ldr	r2, [r7, #16]
 800e3fc:	4313      	orrs	r3, r2
 800e3fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	697a      	ldr	r2, [r7, #20]
 800e404:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	693a      	ldr	r2, [r7, #16]
 800e40a:	621a      	str	r2, [r3, #32]
}
 800e40c:	bf00      	nop
 800e40e:	371c      	adds	r7, #28
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr

0800e418 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e418:	b480      	push	{r7}
 800e41a:	b087      	sub	sp, #28
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	60b9      	str	r1, [r7, #8]
 800e422:	607a      	str	r2, [r7, #4]
 800e424:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	6a1b      	ldr	r3, [r3, #32]
 800e42a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	69db      	ldr	r3, [r3, #28]
 800e436:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6a1b      	ldr	r3, [r3, #32]
 800e43c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e444:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	021b      	lsls	r3, r3, #8
 800e44a:	697a      	ldr	r2, [r7, #20]
 800e44c:	4313      	orrs	r3, r2
 800e44e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e456:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	031b      	lsls	r3, r3, #12
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	697a      	ldr	r2, [r7, #20]
 800e460:	4313      	orrs	r3, r2
 800e462:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800e46a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	031b      	lsls	r3, r3, #12
 800e470:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800e474:	693a      	ldr	r2, [r7, #16]
 800e476:	4313      	orrs	r3, r2
 800e478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	697a      	ldr	r2, [r7, #20]
 800e47e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	693a      	ldr	r2, [r7, #16]
 800e484:	621a      	str	r2, [r3, #32]
}
 800e486:	bf00      	nop
 800e488:	371c      	adds	r7, #28
 800e48a:	46bd      	mov	sp, r7
 800e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e490:	4770      	bx	lr
	...

0800e494 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e494:	b480      	push	{r7}
 800e496:	b085      	sub	sp, #20
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	689b      	ldr	r3, [r3, #8]
 800e4a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	4b09      	ldr	r3, [pc, #36]	; (800e4cc <TIM_ITRx_SetConfig+0x38>)
 800e4a8:	4013      	ands	r3, r2
 800e4aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e4ac:	683a      	ldr	r2, [r7, #0]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	4313      	orrs	r3, r2
 800e4b2:	f043 0307 	orr.w	r3, r3, #7
 800e4b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	68fa      	ldr	r2, [r7, #12]
 800e4bc:	609a      	str	r2, [r3, #8]
}
 800e4be:	bf00      	nop
 800e4c0:	3714      	adds	r7, #20
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr
 800e4ca:	bf00      	nop
 800e4cc:	ffcfff8f 	.word	0xffcfff8f

0800e4d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b087      	sub	sp, #28
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	607a      	str	r2, [r7, #4]
 800e4dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	689b      	ldr	r3, [r3, #8]
 800e4e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e4ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	021a      	lsls	r2, r3, #8
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	431a      	orrs	r2, r3
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	4313      	orrs	r3, r2
 800e4f8:	697a      	ldr	r2, [r7, #20]
 800e4fa:	4313      	orrs	r3, r2
 800e4fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	697a      	ldr	r2, [r7, #20]
 800e502:	609a      	str	r2, [r3, #8]
}
 800e504:	bf00      	nop
 800e506:	371c      	adds	r7, #28
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr

0800e510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e510:	b480      	push	{r7}
 800e512:	b085      	sub	sp, #20
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e520:	2b01      	cmp	r3, #1
 800e522:	d101      	bne.n	800e528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e524:	2302      	movs	r3, #2
 800e526:	e06d      	b.n	800e604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2201      	movs	r2, #1
 800e52c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2202      	movs	r2, #2
 800e534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	689b      	ldr	r3, [r3, #8]
 800e546:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	4a30      	ldr	r2, [pc, #192]	; (800e610 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d004      	beq.n	800e55c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	4a2f      	ldr	r2, [pc, #188]	; (800e614 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e558:	4293      	cmp	r3, r2
 800e55a:	d108      	bne.n	800e56e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e562:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	685b      	ldr	r3, [r3, #4]
 800e568:	68fa      	ldr	r2, [r7, #12]
 800e56a:	4313      	orrs	r3, r2
 800e56c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	68fa      	ldr	r2, [r7, #12]
 800e57c:	4313      	orrs	r3, r2
 800e57e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	68fa      	ldr	r2, [r7, #12]
 800e586:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4a20      	ldr	r2, [pc, #128]	; (800e610 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d022      	beq.n	800e5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e59a:	d01d      	beq.n	800e5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a1d      	ldr	r2, [pc, #116]	; (800e618 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d018      	beq.n	800e5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4a1c      	ldr	r2, [pc, #112]	; (800e61c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d013      	beq.n	800e5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4a1a      	ldr	r2, [pc, #104]	; (800e620 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d00e      	beq.n	800e5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4a15      	ldr	r2, [pc, #84]	; (800e614 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d009      	beq.n	800e5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4a16      	ldr	r2, [pc, #88]	; (800e624 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d004      	beq.n	800e5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4a15      	ldr	r2, [pc, #84]	; (800e628 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	d10c      	bne.n	800e5f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	689b      	ldr	r3, [r3, #8]
 800e5e4:	68ba      	ldr	r2, [r7, #8]
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	68ba      	ldr	r2, [r7, #8]
 800e5f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e602:	2300      	movs	r3, #0
}
 800e604:	4618      	mov	r0, r3
 800e606:	3714      	adds	r7, #20
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr
 800e610:	40010000 	.word	0x40010000
 800e614:	40010400 	.word	0x40010400
 800e618:	40000400 	.word	0x40000400
 800e61c:	40000800 	.word	0x40000800
 800e620:	40000c00 	.word	0x40000c00
 800e624:	40001800 	.word	0x40001800
 800e628:	40014000 	.word	0x40014000

0800e62c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b085      	sub	sp, #20
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e636:	2300      	movs	r3, #0
 800e638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e640:	2b01      	cmp	r3, #1
 800e642:	d101      	bne.n	800e648 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e644:	2302      	movs	r3, #2
 800e646:	e087      	b.n	800e758 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2201      	movs	r2, #1
 800e64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	68db      	ldr	r3, [r3, #12]
 800e65a:	4313      	orrs	r3, r2
 800e65c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	689b      	ldr	r3, [r3, #8]
 800e668:	4313      	orrs	r3, r2
 800e66a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	4313      	orrs	r3, r2
 800e678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	4313      	orrs	r3, r2
 800e686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	691b      	ldr	r3, [r3, #16]
 800e692:	4313      	orrs	r3, r2
 800e694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	695b      	ldr	r3, [r3, #20]
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	699b      	ldr	r3, [r3, #24]
 800e6bc:	041b      	lsls	r3, r3, #16
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a27      	ldr	r2, [pc, #156]	; (800e764 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d004      	beq.n	800e6d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a25      	ldr	r2, [pc, #148]	; (800e768 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d106      	bne.n	800e6e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	69db      	ldr	r3, [r3, #28]
 800e6e0:	4313      	orrs	r3, r2
 800e6e2:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4a1e      	ldr	r2, [pc, #120]	; (800e764 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d004      	beq.n	800e6f8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4a1d      	ldr	r2, [pc, #116]	; (800e768 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d126      	bne.n	800e746 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e702:	051b      	lsls	r3, r3, #20
 800e704:	4313      	orrs	r3, r2
 800e706:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	6a1b      	ldr	r3, [r3, #32]
 800e712:	4313      	orrs	r3, r2
 800e714:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e720:	4313      	orrs	r3, r2
 800e722:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4a0e      	ldr	r2, [pc, #56]	; (800e764 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d004      	beq.n	800e738 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	4a0d      	ldr	r2, [pc, #52]	; (800e768 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d106      	bne.n	800e746 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e742:	4313      	orrs	r3, r2
 800e744:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	68fa      	ldr	r2, [r7, #12]
 800e74c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2200      	movs	r2, #0
 800e752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e756:	2300      	movs	r3, #0
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3714      	adds	r7, #20
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr
 800e764:	40010000 	.word	0x40010000
 800e768:	40010400 	.word	0x40010400

0800e76c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b083      	sub	sp, #12
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e774:	bf00      	nop
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr

0800e780 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e788:	bf00      	nop
 800e78a:	370c      	adds	r7, #12
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr

0800e794 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e794:	b480      	push	{r7}
 800e796:	b083      	sub	sp, #12
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e79c:	bf00      	nop
 800e79e:	370c      	adds	r7, #12
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr

0800e7a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d101      	bne.n	800e7ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e042      	b.n	800e840 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d106      	bne.n	800e7d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f7f4 febb 	bl	8003548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2224      	movs	r2, #36	; 0x24
 800e7d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	681a      	ldr	r2, [r3, #0]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	f022 0201 	bic.w	r2, r2, #1
 800e7e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f000 fcd6 	bl	800f19c <UART_SetConfig>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d101      	bne.n	800e7fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	e022      	b.n	800e840 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d002      	beq.n	800e808 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f001 fb36 	bl	800fe74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	685a      	ldr	r2, [r3, #4]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e816:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	689a      	ldr	r2, [r3, #8]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e826:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f042 0201 	orr.w	r2, r2, #1
 800e836:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f001 fbbd 	bl	800ffb8 <UART_CheckIdleState>
 800e83e:	4603      	mov	r3, r0
}
 800e840:	4618      	mov	r0, r3
 800e842:	3708      	adds	r7, #8
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b08a      	sub	sp, #40	; 0x28
 800e84c:	af02      	add	r7, sp, #8
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	603b      	str	r3, [r7, #0]
 800e854:	4613      	mov	r3, r2
 800e856:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e85e:	2b20      	cmp	r3, #32
 800e860:	f040 8083 	bne.w	800e96a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d002      	beq.n	800e870 <HAL_UART_Transmit+0x28>
 800e86a:	88fb      	ldrh	r3, [r7, #6]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d101      	bne.n	800e874 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e870:	2301      	movs	r3, #1
 800e872:	e07b      	b.n	800e96c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d101      	bne.n	800e882 <HAL_UART_Transmit+0x3a>
 800e87e:	2302      	movs	r3, #2
 800e880:	e074      	b.n	800e96c <HAL_UART_Transmit+0x124>
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2201      	movs	r2, #1
 800e886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	2200      	movs	r2, #0
 800e88e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2221      	movs	r2, #33	; 0x21
 800e896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e89a:	f7f5 fa31 	bl	8003d00 <HAL_GetTick>
 800e89e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	88fa      	ldrh	r2, [r7, #6]
 800e8a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	88fa      	ldrh	r2, [r7, #6]
 800e8ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8b8:	d108      	bne.n	800e8cc <HAL_UART_Transmit+0x84>
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	691b      	ldr	r3, [r3, #16]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d104      	bne.n	800e8cc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	61bb      	str	r3, [r7, #24]
 800e8ca:	e003      	b.n	800e8d4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800e8dc:	e02c      	b.n	800e938 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	9300      	str	r3, [sp, #0]
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	2180      	movs	r1, #128	; 0x80
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	f001 fbb0 	bl	801004e <UART_WaitOnFlagUntilTimeout>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d001      	beq.n	800e8f8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800e8f4:	2303      	movs	r3, #3
 800e8f6:	e039      	b.n	800e96c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d10b      	bne.n	800e916 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e8fe:	69bb      	ldr	r3, [r7, #24]
 800e900:	881b      	ldrh	r3, [r3, #0]
 800e902:	461a      	mov	r2, r3
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e90c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	3302      	adds	r3, #2
 800e912:	61bb      	str	r3, [r7, #24]
 800e914:	e007      	b.n	800e926 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	781a      	ldrb	r2, [r3, #0]
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	3301      	adds	r3, #1
 800e924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	3b01      	subs	r3, #1
 800e930:	b29a      	uxth	r2, r3
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e93e:	b29b      	uxth	r3, r3
 800e940:	2b00      	cmp	r3, #0
 800e942:	d1cc      	bne.n	800e8de <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	9300      	str	r3, [sp, #0]
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	2200      	movs	r2, #0
 800e94c:	2140      	movs	r1, #64	; 0x40
 800e94e:	68f8      	ldr	r0, [r7, #12]
 800e950:	f001 fb7d 	bl	801004e <UART_WaitOnFlagUntilTimeout>
 800e954:	4603      	mov	r3, r0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d001      	beq.n	800e95e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800e95a:	2303      	movs	r3, #3
 800e95c:	e006      	b.n	800e96c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2220      	movs	r2, #32
 800e962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800e966:	2300      	movs	r3, #0
 800e968:	e000      	b.n	800e96c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800e96a:	2302      	movs	r3, #2
  }
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3720      	adds	r7, #32
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b08a      	sub	sp, #40	; 0x28
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	4613      	mov	r3, r2
 800e980:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e988:	2b20      	cmp	r3, #32
 800e98a:	d142      	bne.n	800ea12 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d002      	beq.n	800e998 <HAL_UART_Receive_IT+0x24>
 800e992:	88fb      	ldrh	r3, [r7, #6]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d101      	bne.n	800e99c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e998:	2301      	movs	r3, #1
 800e99a:	e03b      	b.n	800ea14 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	d101      	bne.n	800e9aa <HAL_UART_Receive_IT+0x36>
 800e9a6:	2302      	movs	r3, #2
 800e9a8:	e034      	b.n	800ea14 <HAL_UART_Receive_IT+0xa0>
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a17      	ldr	r2, [pc, #92]	; (800ea1c <HAL_UART_Receive_IT+0xa8>)
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d01f      	beq.n	800ea02 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d018      	beq.n	800ea02 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	e853 3f00 	ldrex	r3, [r3]
 800e9dc:	613b      	str	r3, [r7, #16]
   return(result);
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e9e4:	627b      	str	r3, [r7, #36]	; 0x24
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ee:	623b      	str	r3, [r7, #32]
 800e9f0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9f2:	69f9      	ldr	r1, [r7, #28]
 800e9f4:	6a3a      	ldr	r2, [r7, #32]
 800e9f6:	e841 2300 	strex	r3, r2, [r1]
 800e9fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d1e6      	bne.n	800e9d0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ea02:	88fb      	ldrh	r3, [r7, #6]
 800ea04:	461a      	mov	r2, r3
 800ea06:	68b9      	ldr	r1, [r7, #8]
 800ea08:	68f8      	ldr	r0, [r7, #12]
 800ea0a:	f001 fbe9 	bl	80101e0 <UART_Start_Receive_IT>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	e000      	b.n	800ea14 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ea12:	2302      	movs	r3, #2
  }
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3728      	adds	r7, #40	; 0x28
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	58000c00 	.word	0x58000c00

0800ea20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b0ba      	sub	sp, #232	; 0xe8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	69db      	ldr	r3, [r3, #28]
 800ea2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	689b      	ldr	r3, [r3, #8]
 800ea42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ea46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ea4a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ea4e:	4013      	ands	r3, r2
 800ea50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ea54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d11b      	bne.n	800ea94 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ea5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea60:	f003 0320 	and.w	r3, r3, #32
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d015      	beq.n	800ea94 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ea68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea6c:	f003 0320 	and.w	r3, r3, #32
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d105      	bne.n	800ea80 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ea74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ea78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d009      	beq.n	800ea94 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	f000 835a 	beq.w	800f13e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	4798      	blx	r3
      }
      return;
 800ea92:	e354      	b.n	800f13e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ea94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	f000 811f 	beq.w	800ecdc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ea9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800eaa2:	4b8b      	ldr	r3, [pc, #556]	; (800ecd0 <HAL_UART_IRQHandler+0x2b0>)
 800eaa4:	4013      	ands	r3, r2
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d106      	bne.n	800eab8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800eaaa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800eaae:	4b89      	ldr	r3, [pc, #548]	; (800ecd4 <HAL_UART_IRQHandler+0x2b4>)
 800eab0:	4013      	ands	r3, r2
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f000 8112 	beq.w	800ecdc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eabc:	f003 0301 	and.w	r3, r3, #1
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d011      	beq.n	800eae8 <HAL_UART_IRQHandler+0xc8>
 800eac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00b      	beq.n	800eae8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	2201      	movs	r2, #1
 800ead6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eade:	f043 0201 	orr.w	r2, r3, #1
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaec:	f003 0302 	and.w	r3, r3, #2
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d011      	beq.n	800eb18 <HAL_UART_IRQHandler+0xf8>
 800eaf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eaf8:	f003 0301 	and.w	r3, r3, #1
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d00b      	beq.n	800eb18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	2202      	movs	r2, #2
 800eb06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb0e:	f043 0204 	orr.w	r2, r3, #4
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb1c:	f003 0304 	and.w	r3, r3, #4
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d011      	beq.n	800eb48 <HAL_UART_IRQHandler+0x128>
 800eb24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb28:	f003 0301 	and.w	r3, r3, #1
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d00b      	beq.n	800eb48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	2204      	movs	r2, #4
 800eb36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb3e:	f043 0202 	orr.w	r2, r3, #2
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800eb48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb4c:	f003 0308 	and.w	r3, r3, #8
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d017      	beq.n	800eb84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eb54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb58:	f003 0320 	and.w	r3, r3, #32
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d105      	bne.n	800eb6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800eb60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800eb64:	4b5a      	ldr	r3, [pc, #360]	; (800ecd0 <HAL_UART_IRQHandler+0x2b0>)
 800eb66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00b      	beq.n	800eb84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	2208      	movs	r2, #8
 800eb72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb7a:	f043 0208 	orr.w	r2, r3, #8
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800eb84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d012      	beq.n	800ebb6 <HAL_UART_IRQHandler+0x196>
 800eb90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d00c      	beq.n	800ebb6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eba4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebac:	f043 0220 	orr.w	r2, r3, #32
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	f000 82c0 	beq.w	800f142 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ebc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebc6:	f003 0320 	and.w	r3, r3, #32
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d013      	beq.n	800ebf6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ebce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebd2:	f003 0320 	and.w	r3, r3, #32
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d105      	bne.n	800ebe6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ebda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d007      	beq.n	800ebf6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d003      	beq.n	800ebf6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	689b      	ldr	r3, [r3, #8]
 800ec06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec0a:	2b40      	cmp	r3, #64	; 0x40
 800ec0c:	d005      	beq.n	800ec1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ec0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ec12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d04f      	beq.n	800ecba <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f001 fc0a 	bl	8010434 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	689b      	ldr	r3, [r3, #8]
 800ec26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec2a:	2b40      	cmp	r3, #64	; 0x40
 800ec2c:	d141      	bne.n	800ecb2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	3308      	adds	r3, #8
 800ec34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ec3c:	e853 3f00 	ldrex	r3, [r3]
 800ec40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ec44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ec48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	3308      	adds	r3, #8
 800ec56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ec5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ec5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ec66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ec6a:	e841 2300 	strex	r3, r2, [r1]
 800ec6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ec72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d1d9      	bne.n	800ec2e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d013      	beq.n	800ecaa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec86:	4a14      	ldr	r2, [pc, #80]	; (800ecd8 <HAL_UART_IRQHandler+0x2b8>)
 800ec88:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7f6 fac0 	bl	8005214 <HAL_DMA_Abort_IT>
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d017      	beq.n	800ecca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eca0:	687a      	ldr	r2, [r7, #4]
 800eca2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800eca4:	4610      	mov	r0, r2
 800eca6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eca8:	e00f      	b.n	800ecca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f000 fa60 	bl	800f170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecb0:	e00b      	b.n	800ecca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f000 fa5c 	bl	800f170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecb8:	e007      	b.n	800ecca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 fa58 	bl	800f170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ecc8:	e23b      	b.n	800f142 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecca:	bf00      	nop
    return;
 800eccc:	e239      	b.n	800f142 <HAL_UART_IRQHandler+0x722>
 800ecce:	bf00      	nop
 800ecd0:	10000001 	.word	0x10000001
 800ecd4:	04000120 	.word	0x04000120
 800ecd8:	08010501 	.word	0x08010501

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	f040 81ce 	bne.w	800f082 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ece6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecea:	f003 0310 	and.w	r3, r3, #16
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	f000 81c7 	beq.w	800f082 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ecf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecf8:	f003 0310 	and.w	r3, r3, #16
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f000 81c0 	beq.w	800f082 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2210      	movs	r2, #16
 800ed08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed14:	2b40      	cmp	r3, #64	; 0x40
 800ed16:	f040 813b 	bne.w	800ef90 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a8b      	ldr	r2, [pc, #556]	; (800ef50 <HAL_UART_IRQHandler+0x530>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d059      	beq.n	800edda <HAL_UART_IRQHandler+0x3ba>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4a89      	ldr	r2, [pc, #548]	; (800ef54 <HAL_UART_IRQHandler+0x534>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d053      	beq.n	800edda <HAL_UART_IRQHandler+0x3ba>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4a87      	ldr	r2, [pc, #540]	; (800ef58 <HAL_UART_IRQHandler+0x538>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d04d      	beq.n	800edda <HAL_UART_IRQHandler+0x3ba>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4a85      	ldr	r2, [pc, #532]	; (800ef5c <HAL_UART_IRQHandler+0x53c>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d047      	beq.n	800edda <HAL_UART_IRQHandler+0x3ba>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4a83      	ldr	r2, [pc, #524]	; (800ef60 <HAL_UART_IRQHandler+0x540>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d041      	beq.n	800edda <HAL_UART_IRQHandler+0x3ba>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4a81      	ldr	r2, [pc, #516]	; (800ef64 <HAL_UART_IRQHandler+0x544>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d03b      	beq.n	800edda <HAL_UART_IRQHandler+0x3ba>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a7f      	ldr	r2, [pc, #508]	; (800ef68 <HAL_UART_IRQHandler+0x548>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d035      	beq.n	800edda <HAL_UART_IRQHandler+0x3ba>
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4a7d      	ldr	r2, [pc, #500]	; (800ef6c <HAL_UART_IRQHandler+0x54c>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d02f      	beq.n	800edda <HAL_UART_IRQHandler+0x3ba>
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a7b      	ldr	r2, [pc, #492]	; (800ef70 <HAL_UART_IRQHandler+0x550>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d029      	beq.n	800edda <HAL_UART_IRQHandler+0x3ba>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	4a79      	ldr	r2, [pc, #484]	; (800ef74 <HAL_UART_IRQHandler+0x554>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d023      	beq.n	800edda <HAL_UART_IRQHandler+0x3ba>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4a77      	ldr	r2, [pc, #476]	; (800ef78 <HAL_UART_IRQHandler+0x558>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d01d      	beq.n	800edda <HAL_UART_IRQHandler+0x3ba>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4a75      	ldr	r2, [pc, #468]	; (800ef7c <HAL_UART_IRQHandler+0x55c>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d017      	beq.n	800edda <HAL_UART_IRQHandler+0x3ba>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a73      	ldr	r2, [pc, #460]	; (800ef80 <HAL_UART_IRQHandler+0x560>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d011      	beq.n	800edda <HAL_UART_IRQHandler+0x3ba>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	4a71      	ldr	r2, [pc, #452]	; (800ef84 <HAL_UART_IRQHandler+0x564>)
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d00b      	beq.n	800edda <HAL_UART_IRQHandler+0x3ba>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	4a6f      	ldr	r2, [pc, #444]	; (800ef88 <HAL_UART_IRQHandler+0x568>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d005      	beq.n	800edda <HAL_UART_IRQHandler+0x3ba>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4a6d      	ldr	r2, [pc, #436]	; (800ef8c <HAL_UART_IRQHandler+0x56c>)
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d105      	bne.n	800ede6 <HAL_UART_IRQHandler+0x3c6>
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	b29b      	uxth	r3, r3
 800ede4:	e004      	b.n	800edf0 <HAL_UART_IRQHandler+0x3d0>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	685b      	ldr	r3, [r3, #4]
 800edee:	b29b      	uxth	r3, r3
 800edf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800edf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f000 81a4 	beq.w	800f146 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	f080 819c 	bcs.w	800f146 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ee14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee1c:	69db      	ldr	r3, [r3, #28]
 800ee1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee22:	f000 8086 	beq.w	800ef32 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ee32:	e853 3f00 	ldrex	r3, [r3]
 800ee36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ee3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ee3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ee50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ee54:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee58:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ee5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ee60:	e841 2300 	strex	r3, r2, [r1]
 800ee64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ee68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d1da      	bne.n	800ee26 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	3308      	adds	r3, #8
 800ee76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee7a:	e853 3f00 	ldrex	r3, [r3]
 800ee7e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ee80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee82:	f023 0301 	bic.w	r3, r3, #1
 800ee86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	3308      	adds	r3, #8
 800ee90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ee94:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ee98:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee9a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ee9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800eea0:	e841 2300 	strex	r3, r2, [r1]
 800eea4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800eea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d1e1      	bne.n	800ee70 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	3308      	adds	r3, #8
 800eeb2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eeb6:	e853 3f00 	ldrex	r3, [r3]
 800eeba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800eebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eec2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	3308      	adds	r3, #8
 800eecc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800eed0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800eed2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eed4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eed6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eed8:	e841 2300 	strex	r3, r2, [r1]
 800eedc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800eede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d1e3      	bne.n	800eeac <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2220      	movs	r2, #32
 800eee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2200      	movs	r2, #0
 800eef0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eefa:	e853 3f00 	ldrex	r3, [r3]
 800eefe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ef00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef02:	f023 0310 	bic.w	r3, r3, #16
 800ef06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	461a      	mov	r2, r3
 800ef10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef14:	65bb      	str	r3, [r7, #88]	; 0x58
 800ef16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ef1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ef1c:	e841 2300 	strex	r3, r2, [r1]
 800ef20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ef22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d1e4      	bne.n	800eef2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f7f5 fe53 	bl	8004bd8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	1ad3      	subs	r3, r2, r3
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	4619      	mov	r1, r3
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f000 f91c 	bl	800f184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ef4c:	e0fb      	b.n	800f146 <HAL_UART_IRQHandler+0x726>
 800ef4e:	bf00      	nop
 800ef50:	40020010 	.word	0x40020010
 800ef54:	40020028 	.word	0x40020028
 800ef58:	40020040 	.word	0x40020040
 800ef5c:	40020058 	.word	0x40020058
 800ef60:	40020070 	.word	0x40020070
 800ef64:	40020088 	.word	0x40020088
 800ef68:	400200a0 	.word	0x400200a0
 800ef6c:	400200b8 	.word	0x400200b8
 800ef70:	40020410 	.word	0x40020410
 800ef74:	40020428 	.word	0x40020428
 800ef78:	40020440 	.word	0x40020440
 800ef7c:	40020458 	.word	0x40020458
 800ef80:	40020470 	.word	0x40020470
 800ef84:	40020488 	.word	0x40020488
 800ef88:	400204a0 	.word	0x400204a0
 800ef8c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	1ad3      	subs	r3, r2, r3
 800efa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800efaa:	b29b      	uxth	r3, r3
 800efac:	2b00      	cmp	r3, #0
 800efae:	f000 80cc 	beq.w	800f14a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800efb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	f000 80c7 	beq.w	800f14a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc4:	e853 3f00 	ldrex	r3, [r3]
 800efc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800efca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800efd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	461a      	mov	r2, r3
 800efda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800efde:	647b      	str	r3, [r7, #68]	; 0x44
 800efe0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efe2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800efe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efe6:	e841 2300 	strex	r3, r2, [r1]
 800efea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800efec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d1e4      	bne.n	800efbc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	3308      	adds	r3, #8
 800eff8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800effa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effc:	e853 3f00 	ldrex	r3, [r3]
 800f000:	623b      	str	r3, [r7, #32]
   return(result);
 800f002:	6a3a      	ldr	r2, [r7, #32]
 800f004:	4b54      	ldr	r3, [pc, #336]	; (800f158 <HAL_UART_IRQHandler+0x738>)
 800f006:	4013      	ands	r3, r2
 800f008:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	3308      	adds	r3, #8
 800f012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f016:	633a      	str	r2, [r7, #48]	; 0x30
 800f018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f01a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f01c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f01e:	e841 2300 	strex	r3, r2, [r1]
 800f022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f026:	2b00      	cmp	r3, #0
 800f028:	d1e3      	bne.n	800eff2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2220      	movs	r2, #32
 800f02e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2200      	movs	r2, #0
 800f036:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2200      	movs	r2, #0
 800f03c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	e853 3f00 	ldrex	r3, [r3]
 800f04a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f023 0310 	bic.w	r3, r3, #16
 800f052:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	461a      	mov	r2, r3
 800f05c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f060:	61fb      	str	r3, [r7, #28]
 800f062:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f064:	69b9      	ldr	r1, [r7, #24]
 800f066:	69fa      	ldr	r2, [r7, #28]
 800f068:	e841 2300 	strex	r3, r2, [r1]
 800f06c:	617b      	str	r3, [r7, #20]
   return(result);
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d1e4      	bne.n	800f03e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f078:	4619      	mov	r1, r3
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f000 f882 	bl	800f184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f080:	e063      	b.n	800f14a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d00e      	beq.n	800f0ac <HAL_UART_IRQHandler+0x68c>
 800f08e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f096:	2b00      	cmp	r3, #0
 800f098:	d008      	beq.n	800f0ac <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f0a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f001 fec9 	bl	8010e3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f0aa:	e051      	b.n	800f150 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f0ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d014      	beq.n	800f0e2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d105      	bne.n	800f0d0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f0c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f0c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d008      	beq.n	800f0e2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d03a      	beq.n	800f14e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	4798      	blx	r3
    }
    return;
 800f0e0:	e035      	b.n	800f14e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d009      	beq.n	800f102 <HAL_UART_IRQHandler+0x6e2>
 800f0ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d003      	beq.n	800f102 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f001 fa16 	bl	801052c <UART_EndTransmit_IT>
    return;
 800f100:	e026      	b.n	800f150 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d009      	beq.n	800f122 <HAL_UART_IRQHandler+0x702>
 800f10e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f112:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f116:	2b00      	cmp	r3, #0
 800f118:	d003      	beq.n	800f122 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f001 fea2 	bl	8010e64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f120:	e016      	b.n	800f150 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d010      	beq.n	800f150 <HAL_UART_IRQHandler+0x730>
 800f12e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f132:	2b00      	cmp	r3, #0
 800f134:	da0c      	bge.n	800f150 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f001 fe8a 	bl	8010e50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f13c:	e008      	b.n	800f150 <HAL_UART_IRQHandler+0x730>
      return;
 800f13e:	bf00      	nop
 800f140:	e006      	b.n	800f150 <HAL_UART_IRQHandler+0x730>
    return;
 800f142:	bf00      	nop
 800f144:	e004      	b.n	800f150 <HAL_UART_IRQHandler+0x730>
      return;
 800f146:	bf00      	nop
 800f148:	e002      	b.n	800f150 <HAL_UART_IRQHandler+0x730>
      return;
 800f14a:	bf00      	nop
 800f14c:	e000      	b.n	800f150 <HAL_UART_IRQHandler+0x730>
    return;
 800f14e:	bf00      	nop
  }
}
 800f150:	37e8      	adds	r7, #232	; 0xe8
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	effffffe 	.word	0xeffffffe

0800f15c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f15c:	b480      	push	{r7}
 800f15e:	b083      	sub	sp, #12
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f164:	bf00      	nop
 800f166:	370c      	adds	r7, #12
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f178:	bf00      	nop
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr

0800f184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	460b      	mov	r3, r1
 800f18e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f190:	bf00      	nop
 800f192:	370c      	adds	r7, #12
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr

0800f19c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f19c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f1a0:	b092      	sub	sp, #72	; 0x48
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	689a      	ldr	r2, [r3, #8]
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	691b      	ldr	r3, [r3, #16]
 800f1b4:	431a      	orrs	r2, r3
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	695b      	ldr	r3, [r3, #20]
 800f1ba:	431a      	orrs	r2, r3
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	69db      	ldr	r3, [r3, #28]
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	681a      	ldr	r2, [r3, #0]
 800f1ca:	4bbe      	ldr	r3, [pc, #760]	; (800f4c4 <UART_SetConfig+0x328>)
 800f1cc:	4013      	ands	r3, r2
 800f1ce:	697a      	ldr	r2, [r7, #20]
 800f1d0:	6812      	ldr	r2, [r2, #0]
 800f1d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1d4:	430b      	orrs	r3, r1
 800f1d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	68da      	ldr	r2, [r3, #12]
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	430a      	orrs	r2, r1
 800f1ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	699b      	ldr	r3, [r3, #24]
 800f1f2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	4ab3      	ldr	r2, [pc, #716]	; (800f4c8 <UART_SetConfig+0x32c>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d004      	beq.n	800f208 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	6a1b      	ldr	r3, [r3, #32]
 800f202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f204:	4313      	orrs	r3, r2
 800f206:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	689a      	ldr	r2, [r3, #8]
 800f20e:	4baf      	ldr	r3, [pc, #700]	; (800f4cc <UART_SetConfig+0x330>)
 800f210:	4013      	ands	r3, r2
 800f212:	697a      	ldr	r2, [r7, #20]
 800f214:	6812      	ldr	r2, [r2, #0]
 800f216:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f218:	430b      	orrs	r3, r1
 800f21a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f222:	f023 010f 	bic.w	r1, r3, #15
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	430a      	orrs	r2, r1
 800f230:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	4aa6      	ldr	r2, [pc, #664]	; (800f4d0 <UART_SetConfig+0x334>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d177      	bne.n	800f32c <UART_SetConfig+0x190>
 800f23c:	4ba5      	ldr	r3, [pc, #660]	; (800f4d4 <UART_SetConfig+0x338>)
 800f23e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f240:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f244:	2b28      	cmp	r3, #40	; 0x28
 800f246:	d86d      	bhi.n	800f324 <UART_SetConfig+0x188>
 800f248:	a201      	add	r2, pc, #4	; (adr r2, 800f250 <UART_SetConfig+0xb4>)
 800f24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f24e:	bf00      	nop
 800f250:	0800f2f5 	.word	0x0800f2f5
 800f254:	0800f325 	.word	0x0800f325
 800f258:	0800f325 	.word	0x0800f325
 800f25c:	0800f325 	.word	0x0800f325
 800f260:	0800f325 	.word	0x0800f325
 800f264:	0800f325 	.word	0x0800f325
 800f268:	0800f325 	.word	0x0800f325
 800f26c:	0800f325 	.word	0x0800f325
 800f270:	0800f2fd 	.word	0x0800f2fd
 800f274:	0800f325 	.word	0x0800f325
 800f278:	0800f325 	.word	0x0800f325
 800f27c:	0800f325 	.word	0x0800f325
 800f280:	0800f325 	.word	0x0800f325
 800f284:	0800f325 	.word	0x0800f325
 800f288:	0800f325 	.word	0x0800f325
 800f28c:	0800f325 	.word	0x0800f325
 800f290:	0800f305 	.word	0x0800f305
 800f294:	0800f325 	.word	0x0800f325
 800f298:	0800f325 	.word	0x0800f325
 800f29c:	0800f325 	.word	0x0800f325
 800f2a0:	0800f325 	.word	0x0800f325
 800f2a4:	0800f325 	.word	0x0800f325
 800f2a8:	0800f325 	.word	0x0800f325
 800f2ac:	0800f325 	.word	0x0800f325
 800f2b0:	0800f30d 	.word	0x0800f30d
 800f2b4:	0800f325 	.word	0x0800f325
 800f2b8:	0800f325 	.word	0x0800f325
 800f2bc:	0800f325 	.word	0x0800f325
 800f2c0:	0800f325 	.word	0x0800f325
 800f2c4:	0800f325 	.word	0x0800f325
 800f2c8:	0800f325 	.word	0x0800f325
 800f2cc:	0800f325 	.word	0x0800f325
 800f2d0:	0800f315 	.word	0x0800f315
 800f2d4:	0800f325 	.word	0x0800f325
 800f2d8:	0800f325 	.word	0x0800f325
 800f2dc:	0800f325 	.word	0x0800f325
 800f2e0:	0800f325 	.word	0x0800f325
 800f2e4:	0800f325 	.word	0x0800f325
 800f2e8:	0800f325 	.word	0x0800f325
 800f2ec:	0800f325 	.word	0x0800f325
 800f2f0:	0800f31d 	.word	0x0800f31d
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2fa:	e326      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f2fc:	2304      	movs	r3, #4
 800f2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f302:	e322      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f304:	2308      	movs	r3, #8
 800f306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f30a:	e31e      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f30c:	2310      	movs	r3, #16
 800f30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f312:	e31a      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f314:	2320      	movs	r3, #32
 800f316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f31a:	e316      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f31c:	2340      	movs	r3, #64	; 0x40
 800f31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f322:	e312      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f324:	2380      	movs	r3, #128	; 0x80
 800f326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f32a:	e30e      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	4a69      	ldr	r2, [pc, #420]	; (800f4d8 <UART_SetConfig+0x33c>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d130      	bne.n	800f398 <UART_SetConfig+0x1fc>
 800f336:	4b67      	ldr	r3, [pc, #412]	; (800f4d4 <UART_SetConfig+0x338>)
 800f338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f33a:	f003 0307 	and.w	r3, r3, #7
 800f33e:	2b05      	cmp	r3, #5
 800f340:	d826      	bhi.n	800f390 <UART_SetConfig+0x1f4>
 800f342:	a201      	add	r2, pc, #4	; (adr r2, 800f348 <UART_SetConfig+0x1ac>)
 800f344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f348:	0800f361 	.word	0x0800f361
 800f34c:	0800f369 	.word	0x0800f369
 800f350:	0800f371 	.word	0x0800f371
 800f354:	0800f379 	.word	0x0800f379
 800f358:	0800f381 	.word	0x0800f381
 800f35c:	0800f389 	.word	0x0800f389
 800f360:	2300      	movs	r3, #0
 800f362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f366:	e2f0      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f368:	2304      	movs	r3, #4
 800f36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f36e:	e2ec      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f370:	2308      	movs	r3, #8
 800f372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f376:	e2e8      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f378:	2310      	movs	r3, #16
 800f37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f37e:	e2e4      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f380:	2320      	movs	r3, #32
 800f382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f386:	e2e0      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f388:	2340      	movs	r3, #64	; 0x40
 800f38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f38e:	e2dc      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f390:	2380      	movs	r3, #128	; 0x80
 800f392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f396:	e2d8      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4a4f      	ldr	r2, [pc, #316]	; (800f4dc <UART_SetConfig+0x340>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d130      	bne.n	800f404 <UART_SetConfig+0x268>
 800f3a2:	4b4c      	ldr	r3, [pc, #304]	; (800f4d4 <UART_SetConfig+0x338>)
 800f3a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3a6:	f003 0307 	and.w	r3, r3, #7
 800f3aa:	2b05      	cmp	r3, #5
 800f3ac:	d826      	bhi.n	800f3fc <UART_SetConfig+0x260>
 800f3ae:	a201      	add	r2, pc, #4	; (adr r2, 800f3b4 <UART_SetConfig+0x218>)
 800f3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3b4:	0800f3cd 	.word	0x0800f3cd
 800f3b8:	0800f3d5 	.word	0x0800f3d5
 800f3bc:	0800f3dd 	.word	0x0800f3dd
 800f3c0:	0800f3e5 	.word	0x0800f3e5
 800f3c4:	0800f3ed 	.word	0x0800f3ed
 800f3c8:	0800f3f5 	.word	0x0800f3f5
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3d2:	e2ba      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f3d4:	2304      	movs	r3, #4
 800f3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3da:	e2b6      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f3dc:	2308      	movs	r3, #8
 800f3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3e2:	e2b2      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f3e4:	2310      	movs	r3, #16
 800f3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ea:	e2ae      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f3ec:	2320      	movs	r3, #32
 800f3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3f2:	e2aa      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f3f4:	2340      	movs	r3, #64	; 0x40
 800f3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3fa:	e2a6      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f3fc:	2380      	movs	r3, #128	; 0x80
 800f3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f402:	e2a2      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	4a35      	ldr	r2, [pc, #212]	; (800f4e0 <UART_SetConfig+0x344>)
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d130      	bne.n	800f470 <UART_SetConfig+0x2d4>
 800f40e:	4b31      	ldr	r3, [pc, #196]	; (800f4d4 <UART_SetConfig+0x338>)
 800f410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f412:	f003 0307 	and.w	r3, r3, #7
 800f416:	2b05      	cmp	r3, #5
 800f418:	d826      	bhi.n	800f468 <UART_SetConfig+0x2cc>
 800f41a:	a201      	add	r2, pc, #4	; (adr r2, 800f420 <UART_SetConfig+0x284>)
 800f41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f420:	0800f439 	.word	0x0800f439
 800f424:	0800f441 	.word	0x0800f441
 800f428:	0800f449 	.word	0x0800f449
 800f42c:	0800f451 	.word	0x0800f451
 800f430:	0800f459 	.word	0x0800f459
 800f434:	0800f461 	.word	0x0800f461
 800f438:	2300      	movs	r3, #0
 800f43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f43e:	e284      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f440:	2304      	movs	r3, #4
 800f442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f446:	e280      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f448:	2308      	movs	r3, #8
 800f44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f44e:	e27c      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f450:	2310      	movs	r3, #16
 800f452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f456:	e278      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f458:	2320      	movs	r3, #32
 800f45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f45e:	e274      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f460:	2340      	movs	r3, #64	; 0x40
 800f462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f466:	e270      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f468:	2380      	movs	r3, #128	; 0x80
 800f46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f46e:	e26c      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	4a1b      	ldr	r2, [pc, #108]	; (800f4e4 <UART_SetConfig+0x348>)
 800f476:	4293      	cmp	r3, r2
 800f478:	d142      	bne.n	800f500 <UART_SetConfig+0x364>
 800f47a:	4b16      	ldr	r3, [pc, #88]	; (800f4d4 <UART_SetConfig+0x338>)
 800f47c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f47e:	f003 0307 	and.w	r3, r3, #7
 800f482:	2b05      	cmp	r3, #5
 800f484:	d838      	bhi.n	800f4f8 <UART_SetConfig+0x35c>
 800f486:	a201      	add	r2, pc, #4	; (adr r2, 800f48c <UART_SetConfig+0x2f0>)
 800f488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f48c:	0800f4a5 	.word	0x0800f4a5
 800f490:	0800f4ad 	.word	0x0800f4ad
 800f494:	0800f4b5 	.word	0x0800f4b5
 800f498:	0800f4bd 	.word	0x0800f4bd
 800f49c:	0800f4e9 	.word	0x0800f4e9
 800f4a0:	0800f4f1 	.word	0x0800f4f1
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4aa:	e24e      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f4ac:	2304      	movs	r3, #4
 800f4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4b2:	e24a      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f4b4:	2308      	movs	r3, #8
 800f4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ba:	e246      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f4bc:	2310      	movs	r3, #16
 800f4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4c2:	e242      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f4c4:	cfff69f3 	.word	0xcfff69f3
 800f4c8:	58000c00 	.word	0x58000c00
 800f4cc:	11fff4ff 	.word	0x11fff4ff
 800f4d0:	40011000 	.word	0x40011000
 800f4d4:	58024400 	.word	0x58024400
 800f4d8:	40004400 	.word	0x40004400
 800f4dc:	40004800 	.word	0x40004800
 800f4e0:	40004c00 	.word	0x40004c00
 800f4e4:	40005000 	.word	0x40005000
 800f4e8:	2320      	movs	r3, #32
 800f4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ee:	e22c      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f4f0:	2340      	movs	r3, #64	; 0x40
 800f4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4f6:	e228      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f4f8:	2380      	movs	r3, #128	; 0x80
 800f4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4fe:	e224      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	4ab1      	ldr	r2, [pc, #708]	; (800f7cc <UART_SetConfig+0x630>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d176      	bne.n	800f5f8 <UART_SetConfig+0x45c>
 800f50a:	4bb1      	ldr	r3, [pc, #708]	; (800f7d0 <UART_SetConfig+0x634>)
 800f50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f50e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f512:	2b28      	cmp	r3, #40	; 0x28
 800f514:	d86c      	bhi.n	800f5f0 <UART_SetConfig+0x454>
 800f516:	a201      	add	r2, pc, #4	; (adr r2, 800f51c <UART_SetConfig+0x380>)
 800f518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f51c:	0800f5c1 	.word	0x0800f5c1
 800f520:	0800f5f1 	.word	0x0800f5f1
 800f524:	0800f5f1 	.word	0x0800f5f1
 800f528:	0800f5f1 	.word	0x0800f5f1
 800f52c:	0800f5f1 	.word	0x0800f5f1
 800f530:	0800f5f1 	.word	0x0800f5f1
 800f534:	0800f5f1 	.word	0x0800f5f1
 800f538:	0800f5f1 	.word	0x0800f5f1
 800f53c:	0800f5c9 	.word	0x0800f5c9
 800f540:	0800f5f1 	.word	0x0800f5f1
 800f544:	0800f5f1 	.word	0x0800f5f1
 800f548:	0800f5f1 	.word	0x0800f5f1
 800f54c:	0800f5f1 	.word	0x0800f5f1
 800f550:	0800f5f1 	.word	0x0800f5f1
 800f554:	0800f5f1 	.word	0x0800f5f1
 800f558:	0800f5f1 	.word	0x0800f5f1
 800f55c:	0800f5d1 	.word	0x0800f5d1
 800f560:	0800f5f1 	.word	0x0800f5f1
 800f564:	0800f5f1 	.word	0x0800f5f1
 800f568:	0800f5f1 	.word	0x0800f5f1
 800f56c:	0800f5f1 	.word	0x0800f5f1
 800f570:	0800f5f1 	.word	0x0800f5f1
 800f574:	0800f5f1 	.word	0x0800f5f1
 800f578:	0800f5f1 	.word	0x0800f5f1
 800f57c:	0800f5d9 	.word	0x0800f5d9
 800f580:	0800f5f1 	.word	0x0800f5f1
 800f584:	0800f5f1 	.word	0x0800f5f1
 800f588:	0800f5f1 	.word	0x0800f5f1
 800f58c:	0800f5f1 	.word	0x0800f5f1
 800f590:	0800f5f1 	.word	0x0800f5f1
 800f594:	0800f5f1 	.word	0x0800f5f1
 800f598:	0800f5f1 	.word	0x0800f5f1
 800f59c:	0800f5e1 	.word	0x0800f5e1
 800f5a0:	0800f5f1 	.word	0x0800f5f1
 800f5a4:	0800f5f1 	.word	0x0800f5f1
 800f5a8:	0800f5f1 	.word	0x0800f5f1
 800f5ac:	0800f5f1 	.word	0x0800f5f1
 800f5b0:	0800f5f1 	.word	0x0800f5f1
 800f5b4:	0800f5f1 	.word	0x0800f5f1
 800f5b8:	0800f5f1 	.word	0x0800f5f1
 800f5bc:	0800f5e9 	.word	0x0800f5e9
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5c6:	e1c0      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f5c8:	2304      	movs	r3, #4
 800f5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ce:	e1bc      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f5d0:	2308      	movs	r3, #8
 800f5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5d6:	e1b8      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f5d8:	2310      	movs	r3, #16
 800f5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5de:	e1b4      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f5e0:	2320      	movs	r3, #32
 800f5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5e6:	e1b0      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f5e8:	2340      	movs	r3, #64	; 0x40
 800f5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ee:	e1ac      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f5f0:	2380      	movs	r3, #128	; 0x80
 800f5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5f6:	e1a8      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4a75      	ldr	r2, [pc, #468]	; (800f7d4 <UART_SetConfig+0x638>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d130      	bne.n	800f664 <UART_SetConfig+0x4c8>
 800f602:	4b73      	ldr	r3, [pc, #460]	; (800f7d0 <UART_SetConfig+0x634>)
 800f604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f606:	f003 0307 	and.w	r3, r3, #7
 800f60a:	2b05      	cmp	r3, #5
 800f60c:	d826      	bhi.n	800f65c <UART_SetConfig+0x4c0>
 800f60e:	a201      	add	r2, pc, #4	; (adr r2, 800f614 <UART_SetConfig+0x478>)
 800f610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f614:	0800f62d 	.word	0x0800f62d
 800f618:	0800f635 	.word	0x0800f635
 800f61c:	0800f63d 	.word	0x0800f63d
 800f620:	0800f645 	.word	0x0800f645
 800f624:	0800f64d 	.word	0x0800f64d
 800f628:	0800f655 	.word	0x0800f655
 800f62c:	2300      	movs	r3, #0
 800f62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f632:	e18a      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f634:	2304      	movs	r3, #4
 800f636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f63a:	e186      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f63c:	2308      	movs	r3, #8
 800f63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f642:	e182      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f644:	2310      	movs	r3, #16
 800f646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f64a:	e17e      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f64c:	2320      	movs	r3, #32
 800f64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f652:	e17a      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f654:	2340      	movs	r3, #64	; 0x40
 800f656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f65a:	e176      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f65c:	2380      	movs	r3, #128	; 0x80
 800f65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f662:	e172      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4a5b      	ldr	r2, [pc, #364]	; (800f7d8 <UART_SetConfig+0x63c>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d130      	bne.n	800f6d0 <UART_SetConfig+0x534>
 800f66e:	4b58      	ldr	r3, [pc, #352]	; (800f7d0 <UART_SetConfig+0x634>)
 800f670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f672:	f003 0307 	and.w	r3, r3, #7
 800f676:	2b05      	cmp	r3, #5
 800f678:	d826      	bhi.n	800f6c8 <UART_SetConfig+0x52c>
 800f67a:	a201      	add	r2, pc, #4	; (adr r2, 800f680 <UART_SetConfig+0x4e4>)
 800f67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f680:	0800f699 	.word	0x0800f699
 800f684:	0800f6a1 	.word	0x0800f6a1
 800f688:	0800f6a9 	.word	0x0800f6a9
 800f68c:	0800f6b1 	.word	0x0800f6b1
 800f690:	0800f6b9 	.word	0x0800f6b9
 800f694:	0800f6c1 	.word	0x0800f6c1
 800f698:	2300      	movs	r3, #0
 800f69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f69e:	e154      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f6a0:	2304      	movs	r3, #4
 800f6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6a6:	e150      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f6a8:	2308      	movs	r3, #8
 800f6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ae:	e14c      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f6b0:	2310      	movs	r3, #16
 800f6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6b6:	e148      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f6b8:	2320      	movs	r3, #32
 800f6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6be:	e144      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f6c0:	2340      	movs	r3, #64	; 0x40
 800f6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6c6:	e140      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f6c8:	2380      	movs	r3, #128	; 0x80
 800f6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ce:	e13c      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4a41      	ldr	r2, [pc, #260]	; (800f7dc <UART_SetConfig+0x640>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	f040 8082 	bne.w	800f7e0 <UART_SetConfig+0x644>
 800f6dc:	4b3c      	ldr	r3, [pc, #240]	; (800f7d0 <UART_SetConfig+0x634>)
 800f6de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f6e4:	2b28      	cmp	r3, #40	; 0x28
 800f6e6:	d86d      	bhi.n	800f7c4 <UART_SetConfig+0x628>
 800f6e8:	a201      	add	r2, pc, #4	; (adr r2, 800f6f0 <UART_SetConfig+0x554>)
 800f6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ee:	bf00      	nop
 800f6f0:	0800f795 	.word	0x0800f795
 800f6f4:	0800f7c5 	.word	0x0800f7c5
 800f6f8:	0800f7c5 	.word	0x0800f7c5
 800f6fc:	0800f7c5 	.word	0x0800f7c5
 800f700:	0800f7c5 	.word	0x0800f7c5
 800f704:	0800f7c5 	.word	0x0800f7c5
 800f708:	0800f7c5 	.word	0x0800f7c5
 800f70c:	0800f7c5 	.word	0x0800f7c5
 800f710:	0800f79d 	.word	0x0800f79d
 800f714:	0800f7c5 	.word	0x0800f7c5
 800f718:	0800f7c5 	.word	0x0800f7c5
 800f71c:	0800f7c5 	.word	0x0800f7c5
 800f720:	0800f7c5 	.word	0x0800f7c5
 800f724:	0800f7c5 	.word	0x0800f7c5
 800f728:	0800f7c5 	.word	0x0800f7c5
 800f72c:	0800f7c5 	.word	0x0800f7c5
 800f730:	0800f7a5 	.word	0x0800f7a5
 800f734:	0800f7c5 	.word	0x0800f7c5
 800f738:	0800f7c5 	.word	0x0800f7c5
 800f73c:	0800f7c5 	.word	0x0800f7c5
 800f740:	0800f7c5 	.word	0x0800f7c5
 800f744:	0800f7c5 	.word	0x0800f7c5
 800f748:	0800f7c5 	.word	0x0800f7c5
 800f74c:	0800f7c5 	.word	0x0800f7c5
 800f750:	0800f7ad 	.word	0x0800f7ad
 800f754:	0800f7c5 	.word	0x0800f7c5
 800f758:	0800f7c5 	.word	0x0800f7c5
 800f75c:	0800f7c5 	.word	0x0800f7c5
 800f760:	0800f7c5 	.word	0x0800f7c5
 800f764:	0800f7c5 	.word	0x0800f7c5
 800f768:	0800f7c5 	.word	0x0800f7c5
 800f76c:	0800f7c5 	.word	0x0800f7c5
 800f770:	0800f7b5 	.word	0x0800f7b5
 800f774:	0800f7c5 	.word	0x0800f7c5
 800f778:	0800f7c5 	.word	0x0800f7c5
 800f77c:	0800f7c5 	.word	0x0800f7c5
 800f780:	0800f7c5 	.word	0x0800f7c5
 800f784:	0800f7c5 	.word	0x0800f7c5
 800f788:	0800f7c5 	.word	0x0800f7c5
 800f78c:	0800f7c5 	.word	0x0800f7c5
 800f790:	0800f7bd 	.word	0x0800f7bd
 800f794:	2301      	movs	r3, #1
 800f796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f79a:	e0d6      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f79c:	2304      	movs	r3, #4
 800f79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7a2:	e0d2      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f7a4:	2308      	movs	r3, #8
 800f7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7aa:	e0ce      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f7ac:	2310      	movs	r3, #16
 800f7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7b2:	e0ca      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f7b4:	2320      	movs	r3, #32
 800f7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ba:	e0c6      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f7bc:	2340      	movs	r3, #64	; 0x40
 800f7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7c2:	e0c2      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f7c4:	2380      	movs	r3, #128	; 0x80
 800f7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ca:	e0be      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f7cc:	40011400 	.word	0x40011400
 800f7d0:	58024400 	.word	0x58024400
 800f7d4:	40007800 	.word	0x40007800
 800f7d8:	40007c00 	.word	0x40007c00
 800f7dc:	40011800 	.word	0x40011800
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	4aad      	ldr	r2, [pc, #692]	; (800fa9c <UART_SetConfig+0x900>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d176      	bne.n	800f8d8 <UART_SetConfig+0x73c>
 800f7ea:	4bad      	ldr	r3, [pc, #692]	; (800faa0 <UART_SetConfig+0x904>)
 800f7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f7f2:	2b28      	cmp	r3, #40	; 0x28
 800f7f4:	d86c      	bhi.n	800f8d0 <UART_SetConfig+0x734>
 800f7f6:	a201      	add	r2, pc, #4	; (adr r2, 800f7fc <UART_SetConfig+0x660>)
 800f7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7fc:	0800f8a1 	.word	0x0800f8a1
 800f800:	0800f8d1 	.word	0x0800f8d1
 800f804:	0800f8d1 	.word	0x0800f8d1
 800f808:	0800f8d1 	.word	0x0800f8d1
 800f80c:	0800f8d1 	.word	0x0800f8d1
 800f810:	0800f8d1 	.word	0x0800f8d1
 800f814:	0800f8d1 	.word	0x0800f8d1
 800f818:	0800f8d1 	.word	0x0800f8d1
 800f81c:	0800f8a9 	.word	0x0800f8a9
 800f820:	0800f8d1 	.word	0x0800f8d1
 800f824:	0800f8d1 	.word	0x0800f8d1
 800f828:	0800f8d1 	.word	0x0800f8d1
 800f82c:	0800f8d1 	.word	0x0800f8d1
 800f830:	0800f8d1 	.word	0x0800f8d1
 800f834:	0800f8d1 	.word	0x0800f8d1
 800f838:	0800f8d1 	.word	0x0800f8d1
 800f83c:	0800f8b1 	.word	0x0800f8b1
 800f840:	0800f8d1 	.word	0x0800f8d1
 800f844:	0800f8d1 	.word	0x0800f8d1
 800f848:	0800f8d1 	.word	0x0800f8d1
 800f84c:	0800f8d1 	.word	0x0800f8d1
 800f850:	0800f8d1 	.word	0x0800f8d1
 800f854:	0800f8d1 	.word	0x0800f8d1
 800f858:	0800f8d1 	.word	0x0800f8d1
 800f85c:	0800f8b9 	.word	0x0800f8b9
 800f860:	0800f8d1 	.word	0x0800f8d1
 800f864:	0800f8d1 	.word	0x0800f8d1
 800f868:	0800f8d1 	.word	0x0800f8d1
 800f86c:	0800f8d1 	.word	0x0800f8d1
 800f870:	0800f8d1 	.word	0x0800f8d1
 800f874:	0800f8d1 	.word	0x0800f8d1
 800f878:	0800f8d1 	.word	0x0800f8d1
 800f87c:	0800f8c1 	.word	0x0800f8c1
 800f880:	0800f8d1 	.word	0x0800f8d1
 800f884:	0800f8d1 	.word	0x0800f8d1
 800f888:	0800f8d1 	.word	0x0800f8d1
 800f88c:	0800f8d1 	.word	0x0800f8d1
 800f890:	0800f8d1 	.word	0x0800f8d1
 800f894:	0800f8d1 	.word	0x0800f8d1
 800f898:	0800f8d1 	.word	0x0800f8d1
 800f89c:	0800f8c9 	.word	0x0800f8c9
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8a6:	e050      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f8a8:	2304      	movs	r3, #4
 800f8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ae:	e04c      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f8b0:	2308      	movs	r3, #8
 800f8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8b6:	e048      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f8b8:	2310      	movs	r3, #16
 800f8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8be:	e044      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f8c0:	2320      	movs	r3, #32
 800f8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8c6:	e040      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f8c8:	2340      	movs	r3, #64	; 0x40
 800f8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ce:	e03c      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f8d0:	2380      	movs	r3, #128	; 0x80
 800f8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8d6:	e038      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	4a71      	ldr	r2, [pc, #452]	; (800faa4 <UART_SetConfig+0x908>)
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d130      	bne.n	800f944 <UART_SetConfig+0x7a8>
 800f8e2:	4b6f      	ldr	r3, [pc, #444]	; (800faa0 <UART_SetConfig+0x904>)
 800f8e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8e6:	f003 0307 	and.w	r3, r3, #7
 800f8ea:	2b05      	cmp	r3, #5
 800f8ec:	d826      	bhi.n	800f93c <UART_SetConfig+0x7a0>
 800f8ee:	a201      	add	r2, pc, #4	; (adr r2, 800f8f4 <UART_SetConfig+0x758>)
 800f8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f4:	0800f90d 	.word	0x0800f90d
 800f8f8:	0800f915 	.word	0x0800f915
 800f8fc:	0800f91d 	.word	0x0800f91d
 800f900:	0800f925 	.word	0x0800f925
 800f904:	0800f92d 	.word	0x0800f92d
 800f908:	0800f935 	.word	0x0800f935
 800f90c:	2302      	movs	r3, #2
 800f90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f912:	e01a      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f914:	2304      	movs	r3, #4
 800f916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f91a:	e016      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f91c:	2308      	movs	r3, #8
 800f91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f922:	e012      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f924:	2310      	movs	r3, #16
 800f926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f92a:	e00e      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f92c:	2320      	movs	r3, #32
 800f92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f932:	e00a      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f934:	2340      	movs	r3, #64	; 0x40
 800f936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f93a:	e006      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f93c:	2380      	movs	r3, #128	; 0x80
 800f93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f942:	e002      	b.n	800f94a <UART_SetConfig+0x7ae>
 800f944:	2380      	movs	r3, #128	; 0x80
 800f946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4a55      	ldr	r2, [pc, #340]	; (800faa4 <UART_SetConfig+0x908>)
 800f950:	4293      	cmp	r3, r2
 800f952:	f040 80f8 	bne.w	800fb46 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f956:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f95a:	2b20      	cmp	r3, #32
 800f95c:	dc46      	bgt.n	800f9ec <UART_SetConfig+0x850>
 800f95e:	2b02      	cmp	r3, #2
 800f960:	db75      	blt.n	800fa4e <UART_SetConfig+0x8b2>
 800f962:	3b02      	subs	r3, #2
 800f964:	2b1e      	cmp	r3, #30
 800f966:	d872      	bhi.n	800fa4e <UART_SetConfig+0x8b2>
 800f968:	a201      	add	r2, pc, #4	; (adr r2, 800f970 <UART_SetConfig+0x7d4>)
 800f96a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f96e:	bf00      	nop
 800f970:	0800f9f3 	.word	0x0800f9f3
 800f974:	0800fa4f 	.word	0x0800fa4f
 800f978:	0800f9fb 	.word	0x0800f9fb
 800f97c:	0800fa4f 	.word	0x0800fa4f
 800f980:	0800fa4f 	.word	0x0800fa4f
 800f984:	0800fa4f 	.word	0x0800fa4f
 800f988:	0800fa0b 	.word	0x0800fa0b
 800f98c:	0800fa4f 	.word	0x0800fa4f
 800f990:	0800fa4f 	.word	0x0800fa4f
 800f994:	0800fa4f 	.word	0x0800fa4f
 800f998:	0800fa4f 	.word	0x0800fa4f
 800f99c:	0800fa4f 	.word	0x0800fa4f
 800f9a0:	0800fa4f 	.word	0x0800fa4f
 800f9a4:	0800fa4f 	.word	0x0800fa4f
 800f9a8:	0800fa1b 	.word	0x0800fa1b
 800f9ac:	0800fa4f 	.word	0x0800fa4f
 800f9b0:	0800fa4f 	.word	0x0800fa4f
 800f9b4:	0800fa4f 	.word	0x0800fa4f
 800f9b8:	0800fa4f 	.word	0x0800fa4f
 800f9bc:	0800fa4f 	.word	0x0800fa4f
 800f9c0:	0800fa4f 	.word	0x0800fa4f
 800f9c4:	0800fa4f 	.word	0x0800fa4f
 800f9c8:	0800fa4f 	.word	0x0800fa4f
 800f9cc:	0800fa4f 	.word	0x0800fa4f
 800f9d0:	0800fa4f 	.word	0x0800fa4f
 800f9d4:	0800fa4f 	.word	0x0800fa4f
 800f9d8:	0800fa4f 	.word	0x0800fa4f
 800f9dc:	0800fa4f 	.word	0x0800fa4f
 800f9e0:	0800fa4f 	.word	0x0800fa4f
 800f9e4:	0800fa4f 	.word	0x0800fa4f
 800f9e8:	0800fa41 	.word	0x0800fa41
 800f9ec:	2b40      	cmp	r3, #64	; 0x40
 800f9ee:	d02a      	beq.n	800fa46 <UART_SetConfig+0x8aa>
 800f9f0:	e02d      	b.n	800fa4e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f9f2:	f7f9 fee7 	bl	80097c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800f9f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f9f8:	e02f      	b.n	800fa5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7f9 fef6 	bl	80097f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa08:	e027      	b.n	800fa5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa0a:	f107 0318 	add.w	r3, r7, #24
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7fa f842 	bl	8009a98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fa14:	69fb      	ldr	r3, [r7, #28]
 800fa16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa18:	e01f      	b.n	800fa5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa1a:	4b21      	ldr	r3, [pc, #132]	; (800faa0 <UART_SetConfig+0x904>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f003 0320 	and.w	r3, r3, #32
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d009      	beq.n	800fa3a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa26:	4b1e      	ldr	r3, [pc, #120]	; (800faa0 <UART_SetConfig+0x904>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	08db      	lsrs	r3, r3, #3
 800fa2c:	f003 0303 	and.w	r3, r3, #3
 800fa30:	4a1d      	ldr	r2, [pc, #116]	; (800faa8 <UART_SetConfig+0x90c>)
 800fa32:	fa22 f303 	lsr.w	r3, r2, r3
 800fa36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa38:	e00f      	b.n	800fa5a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fa3a:	4b1b      	ldr	r3, [pc, #108]	; (800faa8 <UART_SetConfig+0x90c>)
 800fa3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa3e:	e00c      	b.n	800fa5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa40:	4b1a      	ldr	r3, [pc, #104]	; (800faac <UART_SetConfig+0x910>)
 800fa42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa44:	e009      	b.n	800fa5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa4c:	e005      	b.n	800fa5a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fa52:	2301      	movs	r3, #1
 800fa54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fa58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fa5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	f000 81ee 	beq.w	800fe3e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa66:	4a12      	ldr	r2, [pc, #72]	; (800fab0 <UART_SetConfig+0x914>)
 800fa68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa70:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa74:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	685a      	ldr	r2, [r3, #4]
 800fa7a:	4613      	mov	r3, r2
 800fa7c:	005b      	lsls	r3, r3, #1
 800fa7e:	4413      	add	r3, r2
 800fa80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d305      	bcc.n	800fa92 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	685b      	ldr	r3, [r3, #4]
 800fa8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d910      	bls.n	800fab4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fa92:	2301      	movs	r3, #1
 800fa94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fa98:	e1d1      	b.n	800fe3e <UART_SetConfig+0xca2>
 800fa9a:	bf00      	nop
 800fa9c:	40011c00 	.word	0x40011c00
 800faa0:	58024400 	.word	0x58024400
 800faa4:	58000c00 	.word	0x58000c00
 800faa8:	03d09000 	.word	0x03d09000
 800faac:	003d0900 	.word	0x003d0900
 800fab0:	08017d20 	.word	0x08017d20
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fab6:	2200      	movs	r2, #0
 800fab8:	60bb      	str	r3, [r7, #8]
 800faba:	60fa      	str	r2, [r7, #12]
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac0:	4ac0      	ldr	r2, [pc, #768]	; (800fdc4 <UART_SetConfig+0xc28>)
 800fac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fac6:	b29b      	uxth	r3, r3
 800fac8:	2200      	movs	r2, #0
 800faca:	603b      	str	r3, [r7, #0]
 800facc:	607a      	str	r2, [r7, #4]
 800face:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fad2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fad6:	f7f0 fe2f 	bl	8000738 <__aeabi_uldivmod>
 800fada:	4602      	mov	r2, r0
 800fadc:	460b      	mov	r3, r1
 800fade:	4610      	mov	r0, r2
 800fae0:	4619      	mov	r1, r3
 800fae2:	f04f 0200 	mov.w	r2, #0
 800fae6:	f04f 0300 	mov.w	r3, #0
 800faea:	020b      	lsls	r3, r1, #8
 800faec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800faf0:	0202      	lsls	r2, r0, #8
 800faf2:	6979      	ldr	r1, [r7, #20]
 800faf4:	6849      	ldr	r1, [r1, #4]
 800faf6:	0849      	lsrs	r1, r1, #1
 800faf8:	2000      	movs	r0, #0
 800fafa:	460c      	mov	r4, r1
 800fafc:	4605      	mov	r5, r0
 800fafe:	eb12 0804 	adds.w	r8, r2, r4
 800fb02:	eb43 0905 	adc.w	r9, r3, r5
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	685b      	ldr	r3, [r3, #4]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	469a      	mov	sl, r3
 800fb0e:	4693      	mov	fp, r2
 800fb10:	4652      	mov	r2, sl
 800fb12:	465b      	mov	r3, fp
 800fb14:	4640      	mov	r0, r8
 800fb16:	4649      	mov	r1, r9
 800fb18:	f7f0 fe0e 	bl	8000738 <__aeabi_uldivmod>
 800fb1c:	4602      	mov	r2, r0
 800fb1e:	460b      	mov	r3, r1
 800fb20:	4613      	mov	r3, r2
 800fb22:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fb2a:	d308      	bcc.n	800fb3e <UART_SetConfig+0x9a2>
 800fb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb32:	d204      	bcs.n	800fb3e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb3a:	60da      	str	r2, [r3, #12]
 800fb3c:	e17f      	b.n	800fe3e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fb3e:	2301      	movs	r3, #1
 800fb40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fb44:	e17b      	b.n	800fe3e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	69db      	ldr	r3, [r3, #28]
 800fb4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb4e:	f040 80bd 	bne.w	800fccc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fb52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fb56:	2b20      	cmp	r3, #32
 800fb58:	dc48      	bgt.n	800fbec <UART_SetConfig+0xa50>
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	db7b      	blt.n	800fc56 <UART_SetConfig+0xaba>
 800fb5e:	2b20      	cmp	r3, #32
 800fb60:	d879      	bhi.n	800fc56 <UART_SetConfig+0xaba>
 800fb62:	a201      	add	r2, pc, #4	; (adr r2, 800fb68 <UART_SetConfig+0x9cc>)
 800fb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb68:	0800fbf3 	.word	0x0800fbf3
 800fb6c:	0800fbfb 	.word	0x0800fbfb
 800fb70:	0800fc57 	.word	0x0800fc57
 800fb74:	0800fc57 	.word	0x0800fc57
 800fb78:	0800fc03 	.word	0x0800fc03
 800fb7c:	0800fc57 	.word	0x0800fc57
 800fb80:	0800fc57 	.word	0x0800fc57
 800fb84:	0800fc57 	.word	0x0800fc57
 800fb88:	0800fc13 	.word	0x0800fc13
 800fb8c:	0800fc57 	.word	0x0800fc57
 800fb90:	0800fc57 	.word	0x0800fc57
 800fb94:	0800fc57 	.word	0x0800fc57
 800fb98:	0800fc57 	.word	0x0800fc57
 800fb9c:	0800fc57 	.word	0x0800fc57
 800fba0:	0800fc57 	.word	0x0800fc57
 800fba4:	0800fc57 	.word	0x0800fc57
 800fba8:	0800fc23 	.word	0x0800fc23
 800fbac:	0800fc57 	.word	0x0800fc57
 800fbb0:	0800fc57 	.word	0x0800fc57
 800fbb4:	0800fc57 	.word	0x0800fc57
 800fbb8:	0800fc57 	.word	0x0800fc57
 800fbbc:	0800fc57 	.word	0x0800fc57
 800fbc0:	0800fc57 	.word	0x0800fc57
 800fbc4:	0800fc57 	.word	0x0800fc57
 800fbc8:	0800fc57 	.word	0x0800fc57
 800fbcc:	0800fc57 	.word	0x0800fc57
 800fbd0:	0800fc57 	.word	0x0800fc57
 800fbd4:	0800fc57 	.word	0x0800fc57
 800fbd8:	0800fc57 	.word	0x0800fc57
 800fbdc:	0800fc57 	.word	0x0800fc57
 800fbe0:	0800fc57 	.word	0x0800fc57
 800fbe4:	0800fc57 	.word	0x0800fc57
 800fbe8:	0800fc49 	.word	0x0800fc49
 800fbec:	2b40      	cmp	r3, #64	; 0x40
 800fbee:	d02e      	beq.n	800fc4e <UART_SetConfig+0xab2>
 800fbf0:	e031      	b.n	800fc56 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fbf2:	f7f8 fa81 	bl	80080f8 <HAL_RCC_GetPCLK1Freq>
 800fbf6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fbf8:	e033      	b.n	800fc62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fbfa:	f7f8 fa93 	bl	8008124 <HAL_RCC_GetPCLK2Freq>
 800fbfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fc00:	e02f      	b.n	800fc62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7f9 fdf2 	bl	80097f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc10:	e027      	b.n	800fc62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc12:	f107 0318 	add.w	r3, r7, #24
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7f9 ff3e 	bl	8009a98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc20:	e01f      	b.n	800fc62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc22:	4b69      	ldr	r3, [pc, #420]	; (800fdc8 <UART_SetConfig+0xc2c>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	f003 0320 	and.w	r3, r3, #32
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d009      	beq.n	800fc42 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc2e:	4b66      	ldr	r3, [pc, #408]	; (800fdc8 <UART_SetConfig+0xc2c>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	08db      	lsrs	r3, r3, #3
 800fc34:	f003 0303 	and.w	r3, r3, #3
 800fc38:	4a64      	ldr	r2, [pc, #400]	; (800fdcc <UART_SetConfig+0xc30>)
 800fc3a:	fa22 f303 	lsr.w	r3, r2, r3
 800fc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc40:	e00f      	b.n	800fc62 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fc42:	4b62      	ldr	r3, [pc, #392]	; (800fdcc <UART_SetConfig+0xc30>)
 800fc44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc46:	e00c      	b.n	800fc62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc48:	4b61      	ldr	r3, [pc, #388]	; (800fdd0 <UART_SetConfig+0xc34>)
 800fc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc4c:	e009      	b.n	800fc62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc54:	e005      	b.n	800fc62 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fc56:	2300      	movs	r3, #0
 800fc58:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fc60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fc62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f000 80ea 	beq.w	800fe3e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc6e:	4a55      	ldr	r2, [pc, #340]	; (800fdc4 <UART_SetConfig+0xc28>)
 800fc70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc74:	461a      	mov	r2, r3
 800fc76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc78:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc7c:	005a      	lsls	r2, r3, #1
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	085b      	lsrs	r3, r3, #1
 800fc84:	441a      	add	r2, r3
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc8e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc92:	2b0f      	cmp	r3, #15
 800fc94:	d916      	bls.n	800fcc4 <UART_SetConfig+0xb28>
 800fc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc9c:	d212      	bcs.n	800fcc4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca0:	b29b      	uxth	r3, r3
 800fca2:	f023 030f 	bic.w	r3, r3, #15
 800fca6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcaa:	085b      	lsrs	r3, r3, #1
 800fcac:	b29b      	uxth	r3, r3
 800fcae:	f003 0307 	and.w	r3, r3, #7
 800fcb2:	b29a      	uxth	r2, r3
 800fcb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fcb6:	4313      	orrs	r3, r2
 800fcb8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fcc0:	60da      	str	r2, [r3, #12]
 800fcc2:	e0bc      	b.n	800fe3e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fcca:	e0b8      	b.n	800fe3e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fccc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fcd0:	2b20      	cmp	r3, #32
 800fcd2:	dc4b      	bgt.n	800fd6c <UART_SetConfig+0xbd0>
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	f2c0 8087 	blt.w	800fde8 <UART_SetConfig+0xc4c>
 800fcda:	2b20      	cmp	r3, #32
 800fcdc:	f200 8084 	bhi.w	800fde8 <UART_SetConfig+0xc4c>
 800fce0:	a201      	add	r2, pc, #4	; (adr r2, 800fce8 <UART_SetConfig+0xb4c>)
 800fce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fce6:	bf00      	nop
 800fce8:	0800fd73 	.word	0x0800fd73
 800fcec:	0800fd7b 	.word	0x0800fd7b
 800fcf0:	0800fde9 	.word	0x0800fde9
 800fcf4:	0800fde9 	.word	0x0800fde9
 800fcf8:	0800fd83 	.word	0x0800fd83
 800fcfc:	0800fde9 	.word	0x0800fde9
 800fd00:	0800fde9 	.word	0x0800fde9
 800fd04:	0800fde9 	.word	0x0800fde9
 800fd08:	0800fd93 	.word	0x0800fd93
 800fd0c:	0800fde9 	.word	0x0800fde9
 800fd10:	0800fde9 	.word	0x0800fde9
 800fd14:	0800fde9 	.word	0x0800fde9
 800fd18:	0800fde9 	.word	0x0800fde9
 800fd1c:	0800fde9 	.word	0x0800fde9
 800fd20:	0800fde9 	.word	0x0800fde9
 800fd24:	0800fde9 	.word	0x0800fde9
 800fd28:	0800fda3 	.word	0x0800fda3
 800fd2c:	0800fde9 	.word	0x0800fde9
 800fd30:	0800fde9 	.word	0x0800fde9
 800fd34:	0800fde9 	.word	0x0800fde9
 800fd38:	0800fde9 	.word	0x0800fde9
 800fd3c:	0800fde9 	.word	0x0800fde9
 800fd40:	0800fde9 	.word	0x0800fde9
 800fd44:	0800fde9 	.word	0x0800fde9
 800fd48:	0800fde9 	.word	0x0800fde9
 800fd4c:	0800fde9 	.word	0x0800fde9
 800fd50:	0800fde9 	.word	0x0800fde9
 800fd54:	0800fde9 	.word	0x0800fde9
 800fd58:	0800fde9 	.word	0x0800fde9
 800fd5c:	0800fde9 	.word	0x0800fde9
 800fd60:	0800fde9 	.word	0x0800fde9
 800fd64:	0800fde9 	.word	0x0800fde9
 800fd68:	0800fddb 	.word	0x0800fddb
 800fd6c:	2b40      	cmp	r3, #64	; 0x40
 800fd6e:	d037      	beq.n	800fde0 <UART_SetConfig+0xc44>
 800fd70:	e03a      	b.n	800fde8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd72:	f7f8 f9c1 	bl	80080f8 <HAL_RCC_GetPCLK1Freq>
 800fd76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd78:	e03c      	b.n	800fdf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd7a:	f7f8 f9d3 	bl	8008124 <HAL_RCC_GetPCLK2Freq>
 800fd7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd80:	e038      	b.n	800fdf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7f9 fd32 	bl	80097f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd90:	e030      	b.n	800fdf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd92:	f107 0318 	add.w	r3, r7, #24
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7f9 fe7e 	bl	8009a98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fda0:	e028      	b.n	800fdf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fda2:	4b09      	ldr	r3, [pc, #36]	; (800fdc8 <UART_SetConfig+0xc2c>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f003 0320 	and.w	r3, r3, #32
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d012      	beq.n	800fdd4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fdae:	4b06      	ldr	r3, [pc, #24]	; (800fdc8 <UART_SetConfig+0xc2c>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	08db      	lsrs	r3, r3, #3
 800fdb4:	f003 0303 	and.w	r3, r3, #3
 800fdb8:	4a04      	ldr	r2, [pc, #16]	; (800fdcc <UART_SetConfig+0xc30>)
 800fdba:	fa22 f303 	lsr.w	r3, r2, r3
 800fdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fdc0:	e018      	b.n	800fdf4 <UART_SetConfig+0xc58>
 800fdc2:	bf00      	nop
 800fdc4:	08017d20 	.word	0x08017d20
 800fdc8:	58024400 	.word	0x58024400
 800fdcc:	03d09000 	.word	0x03d09000
 800fdd0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800fdd4:	4b24      	ldr	r3, [pc, #144]	; (800fe68 <UART_SetConfig+0xccc>)
 800fdd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdd8:	e00c      	b.n	800fdf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fdda:	4b24      	ldr	r3, [pc, #144]	; (800fe6c <UART_SetConfig+0xcd0>)
 800fddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdde:	e009      	b.n	800fdf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fde0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fde4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fde6:	e005      	b.n	800fdf4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800fde8:	2300      	movs	r3, #0
 800fdea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fdec:	2301      	movs	r3, #1
 800fdee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fdf2:	bf00      	nop
    }

    if (pclk != 0U)
 800fdf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d021      	beq.n	800fe3e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdfe:	4a1c      	ldr	r2, [pc, #112]	; (800fe70 <UART_SetConfig+0xcd4>)
 800fe00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe04:	461a      	mov	r2, r3
 800fe06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe08:	fbb3 f2f2 	udiv	r2, r3, r2
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	085b      	lsrs	r3, r3, #1
 800fe12:	441a      	add	r2, r3
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe1c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe20:	2b0f      	cmp	r3, #15
 800fe22:	d909      	bls.n	800fe38 <UART_SetConfig+0xc9c>
 800fe24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe2a:	d205      	bcs.n	800fe38 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fe2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2e:	b29a      	uxth	r2, r3
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	60da      	str	r2, [r3, #12]
 800fe36:	e002      	b.n	800fe3e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fe38:	2301      	movs	r3, #1
 800fe3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	2201      	movs	r2, #1
 800fe42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	2200      	movs	r2, #0
 800fe52:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	2200      	movs	r2, #0
 800fe58:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800fe5a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3748      	adds	r7, #72	; 0x48
 800fe62:	46bd      	mov	sp, r7
 800fe64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fe68:	03d09000 	.word	0x03d09000
 800fe6c:	003d0900 	.word	0x003d0900
 800fe70:	08017d20 	.word	0x08017d20

0800fe74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe80:	f003 0301 	and.w	r3, r3, #1
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d00a      	beq.n	800fe9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	430a      	orrs	r2, r1
 800fe9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fea2:	f003 0302 	and.w	r3, r3, #2
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d00a      	beq.n	800fec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	430a      	orrs	r2, r1
 800febe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fec4:	f003 0304 	and.w	r3, r3, #4
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d00a      	beq.n	800fee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	430a      	orrs	r2, r1
 800fee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fee6:	f003 0308 	and.w	r3, r3, #8
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00a      	beq.n	800ff04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	430a      	orrs	r2, r1
 800ff02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff08:	f003 0310 	and.w	r3, r3, #16
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d00a      	beq.n	800ff26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	689b      	ldr	r3, [r3, #8]
 800ff16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	430a      	orrs	r2, r1
 800ff24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff2a:	f003 0320 	and.w	r3, r3, #32
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d00a      	beq.n	800ff48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	689b      	ldr	r3, [r3, #8]
 800ff38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	430a      	orrs	r2, r1
 800ff46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d01a      	beq.n	800ff8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	685b      	ldr	r3, [r3, #4]
 800ff5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	430a      	orrs	r2, r1
 800ff68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff72:	d10a      	bne.n	800ff8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	430a      	orrs	r2, r1
 800ff88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d00a      	beq.n	800ffac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	685b      	ldr	r3, [r3, #4]
 800ff9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	430a      	orrs	r2, r1
 800ffaa:	605a      	str	r2, [r3, #4]
  }
}
 800ffac:	bf00      	nop
 800ffae:	370c      	adds	r7, #12
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb6:	4770      	bx	lr

0800ffb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b086      	sub	sp, #24
 800ffbc:	af02      	add	r7, sp, #8
 800ffbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ffc8:	f7f3 fe9a 	bl	8003d00 <HAL_GetTick>
 800ffcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	f003 0308 	and.w	r3, r3, #8
 800ffd8:	2b08      	cmp	r3, #8
 800ffda:	d10e      	bne.n	800fffa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ffdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ffe0:	9300      	str	r3, [sp, #0]
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 f82f 	bl	801004e <UART_WaitOnFlagUntilTimeout>
 800fff0:	4603      	mov	r3, r0
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d001      	beq.n	800fffa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fff6:	2303      	movs	r3, #3
 800fff8:	e025      	b.n	8010046 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f003 0304 	and.w	r3, r3, #4
 8010004:	2b04      	cmp	r3, #4
 8010006:	d10e      	bne.n	8010026 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801000c:	9300      	str	r3, [sp, #0]
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	2200      	movs	r2, #0
 8010012:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f000 f819 	bl	801004e <UART_WaitOnFlagUntilTimeout>
 801001c:	4603      	mov	r3, r0
 801001e:	2b00      	cmp	r3, #0
 8010020:	d001      	beq.n	8010026 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010022:	2303      	movs	r3, #3
 8010024:	e00f      	b.n	8010046 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2220      	movs	r2, #32
 801002a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2220      	movs	r2, #32
 8010032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2200      	movs	r2, #0
 801003a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2200      	movs	r2, #0
 8010040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010044:	2300      	movs	r3, #0
}
 8010046:	4618      	mov	r0, r3
 8010048:	3710      	adds	r7, #16
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}

0801004e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801004e:	b580      	push	{r7, lr}
 8010050:	b09c      	sub	sp, #112	; 0x70
 8010052:	af00      	add	r7, sp, #0
 8010054:	60f8      	str	r0, [r7, #12]
 8010056:	60b9      	str	r1, [r7, #8]
 8010058:	603b      	str	r3, [r7, #0]
 801005a:	4613      	mov	r3, r2
 801005c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801005e:	e0a9      	b.n	80101b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010060:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010066:	f000 80a5 	beq.w	80101b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801006a:	f7f3 fe49 	bl	8003d00 <HAL_GetTick>
 801006e:	4602      	mov	r2, r0
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	1ad3      	subs	r3, r2, r3
 8010074:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010076:	429a      	cmp	r2, r3
 8010078:	d302      	bcc.n	8010080 <UART_WaitOnFlagUntilTimeout+0x32>
 801007a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801007c:	2b00      	cmp	r3, #0
 801007e:	d140      	bne.n	8010102 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010088:	e853 3f00 	ldrex	r3, [r3]
 801008c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801008e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010090:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010094:	667b      	str	r3, [r7, #100]	; 0x64
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	461a      	mov	r2, r3
 801009c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801009e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80100a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80100a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80100a6:	e841 2300 	strex	r3, r2, [r1]
 80100aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80100ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d1e6      	bne.n	8010080 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	3308      	adds	r3, #8
 80100b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100bc:	e853 3f00 	ldrex	r3, [r3]
 80100c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80100c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c4:	f023 0301 	bic.w	r3, r3, #1
 80100c8:	663b      	str	r3, [r7, #96]	; 0x60
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	3308      	adds	r3, #8
 80100d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80100d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80100d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80100d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80100da:	e841 2300 	strex	r3, r2, [r1]
 80100de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80100e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d1e5      	bne.n	80100b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2220      	movs	r2, #32
 80100ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	2220      	movs	r2, #32
 80100f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	2200      	movs	r2, #0
 80100fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80100fe:	2303      	movs	r3, #3
 8010100:	e069      	b.n	80101d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	f003 0304 	and.w	r3, r3, #4
 801010c:	2b00      	cmp	r3, #0
 801010e:	d051      	beq.n	80101b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	69db      	ldr	r3, [r3, #28]
 8010116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801011a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801011e:	d149      	bne.n	80101b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010128:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010132:	e853 3f00 	ldrex	r3, [r3]
 8010136:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801013e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	461a      	mov	r2, r3
 8010146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010148:	637b      	str	r3, [r7, #52]	; 0x34
 801014a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801014c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801014e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010150:	e841 2300 	strex	r3, r2, [r1]
 8010154:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010158:	2b00      	cmp	r3, #0
 801015a:	d1e6      	bne.n	801012a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	3308      	adds	r3, #8
 8010162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	e853 3f00 	ldrex	r3, [r3]
 801016a:	613b      	str	r3, [r7, #16]
   return(result);
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	f023 0301 	bic.w	r3, r3, #1
 8010172:	66bb      	str	r3, [r7, #104]	; 0x68
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	3308      	adds	r3, #8
 801017a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801017c:	623a      	str	r2, [r7, #32]
 801017e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010180:	69f9      	ldr	r1, [r7, #28]
 8010182:	6a3a      	ldr	r2, [r7, #32]
 8010184:	e841 2300 	strex	r3, r2, [r1]
 8010188:	61bb      	str	r3, [r7, #24]
   return(result);
 801018a:	69bb      	ldr	r3, [r7, #24]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d1e5      	bne.n	801015c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2220      	movs	r2, #32
 8010194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2220      	movs	r2, #32
 801019c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2220      	movs	r2, #32
 80101a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	2200      	movs	r2, #0
 80101ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80101b0:	2303      	movs	r3, #3
 80101b2:	e010      	b.n	80101d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	69da      	ldr	r2, [r3, #28]
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	4013      	ands	r3, r2
 80101be:	68ba      	ldr	r2, [r7, #8]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	bf0c      	ite	eq
 80101c4:	2301      	moveq	r3, #1
 80101c6:	2300      	movne	r3, #0
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	461a      	mov	r2, r3
 80101cc:	79fb      	ldrb	r3, [r7, #7]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	f43f af46 	beq.w	8010060 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80101d4:	2300      	movs	r3, #0
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	3770      	adds	r7, #112	; 0x70
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}
	...

080101e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b0a3      	sub	sp, #140	; 0x8c
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	60f8      	str	r0, [r7, #12]
 80101e8:	60b9      	str	r1, [r7, #8]
 80101ea:	4613      	mov	r3, r2
 80101ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	68ba      	ldr	r2, [r7, #8]
 80101f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	88fa      	ldrh	r2, [r7, #6]
 80101f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	88fa      	ldrh	r2, [r7, #6]
 8010200:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2200      	movs	r2, #0
 8010208:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	689b      	ldr	r3, [r3, #8]
 801020e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010212:	d10e      	bne.n	8010232 <UART_Start_Receive_IT+0x52>
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	691b      	ldr	r3, [r3, #16]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d105      	bne.n	8010228 <UART_Start_Receive_IT+0x48>
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010222:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010226:	e02d      	b.n	8010284 <UART_Start_Receive_IT+0xa4>
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	22ff      	movs	r2, #255	; 0xff
 801022c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010230:	e028      	b.n	8010284 <UART_Start_Receive_IT+0xa4>
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	689b      	ldr	r3, [r3, #8]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d10d      	bne.n	8010256 <UART_Start_Receive_IT+0x76>
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	691b      	ldr	r3, [r3, #16]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d104      	bne.n	801024c <UART_Start_Receive_IT+0x6c>
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	22ff      	movs	r2, #255	; 0xff
 8010246:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801024a:	e01b      	b.n	8010284 <UART_Start_Receive_IT+0xa4>
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	227f      	movs	r2, #127	; 0x7f
 8010250:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010254:	e016      	b.n	8010284 <UART_Start_Receive_IT+0xa4>
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	689b      	ldr	r3, [r3, #8]
 801025a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801025e:	d10d      	bne.n	801027c <UART_Start_Receive_IT+0x9c>
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	691b      	ldr	r3, [r3, #16]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d104      	bne.n	8010272 <UART_Start_Receive_IT+0x92>
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	227f      	movs	r2, #127	; 0x7f
 801026c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010270:	e008      	b.n	8010284 <UART_Start_Receive_IT+0xa4>
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	223f      	movs	r2, #63	; 0x3f
 8010276:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801027a:	e003      	b.n	8010284 <UART_Start_Receive_IT+0xa4>
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2200      	movs	r2, #0
 8010280:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2200      	movs	r2, #0
 8010288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2222      	movs	r2, #34	; 0x22
 8010290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	3308      	adds	r3, #8
 801029a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801029c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801029e:	e853 3f00 	ldrex	r3, [r3]
 80102a2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80102a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102a6:	f043 0301 	orr.w	r3, r3, #1
 80102aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	3308      	adds	r3, #8
 80102b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80102b8:	673a      	str	r2, [r7, #112]	; 0x70
 80102ba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102bc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80102be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80102c0:	e841 2300 	strex	r3, r2, [r1]
 80102c4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80102c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d1e3      	bne.n	8010294 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80102d4:	d153      	bne.n	801037e <UART_Start_Receive_IT+0x19e>
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80102dc:	88fa      	ldrh	r2, [r7, #6]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d34d      	bcc.n	801037e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	689b      	ldr	r3, [r3, #8]
 80102e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102ea:	d107      	bne.n	80102fc <UART_Start_Receive_IT+0x11c>
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	691b      	ldr	r3, [r3, #16]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d103      	bne.n	80102fc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	4a4b      	ldr	r2, [pc, #300]	; (8010424 <UART_Start_Receive_IT+0x244>)
 80102f8:	671a      	str	r2, [r3, #112]	; 0x70
 80102fa:	e002      	b.n	8010302 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	4a4a      	ldr	r2, [pc, #296]	; (8010428 <UART_Start_Receive_IT+0x248>)
 8010300:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2200      	movs	r2, #0
 8010306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	691b      	ldr	r3, [r3, #16]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d01a      	beq.n	8010348 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801031a:	e853 3f00 	ldrex	r3, [r3]
 801031e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010326:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	461a      	mov	r2, r3
 8010330:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010334:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010336:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010338:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801033a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801033c:	e841 2300 	strex	r3, r2, [r1]
 8010340:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010344:	2b00      	cmp	r3, #0
 8010346:	d1e4      	bne.n	8010312 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	3308      	adds	r3, #8
 801034e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010352:	e853 3f00 	ldrex	r3, [r3]
 8010356:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801035e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	3308      	adds	r3, #8
 8010366:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010368:	64ba      	str	r2, [r7, #72]	; 0x48
 801036a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801036c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801036e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010370:	e841 2300 	strex	r3, r2, [r1]
 8010374:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010378:	2b00      	cmp	r3, #0
 801037a:	d1e5      	bne.n	8010348 <UART_Start_Receive_IT+0x168>
 801037c:	e04a      	b.n	8010414 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010386:	d107      	bne.n	8010398 <UART_Start_Receive_IT+0x1b8>
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	691b      	ldr	r3, [r3, #16]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d103      	bne.n	8010398 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	4a26      	ldr	r2, [pc, #152]	; (801042c <UART_Start_Receive_IT+0x24c>)
 8010394:	671a      	str	r2, [r3, #112]	; 0x70
 8010396:	e002      	b.n	801039e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	4a25      	ldr	r2, [pc, #148]	; (8010430 <UART_Start_Receive_IT+0x250>)
 801039c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	2200      	movs	r2, #0
 80103a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	691b      	ldr	r3, [r3, #16]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d019      	beq.n	80103e2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b6:	e853 3f00 	ldrex	r3, [r3]
 80103ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80103c2:	677b      	str	r3, [r7, #116]	; 0x74
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	461a      	mov	r2, r3
 80103ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103cc:	637b      	str	r3, [r7, #52]	; 0x34
 80103ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80103d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103d4:	e841 2300 	strex	r3, r2, [r1]
 80103d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80103da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d1e6      	bne.n	80103ae <UART_Start_Receive_IT+0x1ce>
 80103e0:	e018      	b.n	8010414 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	e853 3f00 	ldrex	r3, [r3]
 80103ee:	613b      	str	r3, [r7, #16]
   return(result);
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	f043 0320 	orr.w	r3, r3, #32
 80103f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	461a      	mov	r2, r3
 80103fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010400:	623b      	str	r3, [r7, #32]
 8010402:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010404:	69f9      	ldr	r1, [r7, #28]
 8010406:	6a3a      	ldr	r2, [r7, #32]
 8010408:	e841 2300 	strex	r3, r2, [r1]
 801040c:	61bb      	str	r3, [r7, #24]
   return(result);
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d1e6      	bne.n	80103e2 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8010414:	2300      	movs	r3, #0
}
 8010416:	4618      	mov	r0, r3
 8010418:	378c      	adds	r7, #140	; 0x8c
 801041a:	46bd      	mov	sp, r7
 801041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010420:	4770      	bx	lr
 8010422:	bf00      	nop
 8010424:	08010b3d 	.word	0x08010b3d
 8010428:	08010845 	.word	0x08010845
 801042c:	080106e3 	.word	0x080106e3
 8010430:	08010583 	.word	0x08010583

08010434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010434:	b480      	push	{r7}
 8010436:	b095      	sub	sp, #84	; 0x54
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010444:	e853 3f00 	ldrex	r3, [r3]
 8010448:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801044a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801044c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	461a      	mov	r2, r3
 8010458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801045a:	643b      	str	r3, [r7, #64]	; 0x40
 801045c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801045e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010460:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010462:	e841 2300 	strex	r3, r2, [r1]
 8010466:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801046a:	2b00      	cmp	r3, #0
 801046c:	d1e6      	bne.n	801043c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	3308      	adds	r3, #8
 8010474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010476:	6a3b      	ldr	r3, [r7, #32]
 8010478:	e853 3f00 	ldrex	r3, [r3]
 801047c:	61fb      	str	r3, [r7, #28]
   return(result);
 801047e:	69fa      	ldr	r2, [r7, #28]
 8010480:	4b1e      	ldr	r3, [pc, #120]	; (80104fc <UART_EndRxTransfer+0xc8>)
 8010482:	4013      	ands	r3, r2
 8010484:	64bb      	str	r3, [r7, #72]	; 0x48
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	3308      	adds	r3, #8
 801048c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801048e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010490:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010496:	e841 2300 	strex	r3, r2, [r1]
 801049a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801049c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d1e5      	bne.n	801046e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104a6:	2b01      	cmp	r3, #1
 80104a8:	d118      	bne.n	80104dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	e853 3f00 	ldrex	r3, [r3]
 80104b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	f023 0310 	bic.w	r3, r3, #16
 80104be:	647b      	str	r3, [r7, #68]	; 0x44
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	461a      	mov	r2, r3
 80104c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104c8:	61bb      	str	r3, [r7, #24]
 80104ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104cc:	6979      	ldr	r1, [r7, #20]
 80104ce:	69ba      	ldr	r2, [r7, #24]
 80104d0:	e841 2300 	strex	r3, r2, [r1]
 80104d4:	613b      	str	r3, [r7, #16]
   return(result);
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d1e6      	bne.n	80104aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2220      	movs	r2, #32
 80104e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2200      	movs	r2, #0
 80104e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2200      	movs	r2, #0
 80104ee:	671a      	str	r2, [r3, #112]	; 0x70
}
 80104f0:	bf00      	nop
 80104f2:	3754      	adds	r7, #84	; 0x54
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr
 80104fc:	effffffe 	.word	0xeffffffe

08010500 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b084      	sub	sp, #16
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801050c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2200      	movs	r2, #0
 8010512:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	2200      	movs	r2, #0
 801051a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801051e:	68f8      	ldr	r0, [r7, #12]
 8010520:	f7fe fe26 	bl	800f170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010524:	bf00      	nop
 8010526:	3710      	adds	r7, #16
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b088      	sub	sp, #32
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	e853 3f00 	ldrex	r3, [r3]
 8010540:	60bb      	str	r3, [r7, #8]
   return(result);
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010548:	61fb      	str	r3, [r7, #28]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	461a      	mov	r2, r3
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	61bb      	str	r3, [r7, #24]
 8010554:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010556:	6979      	ldr	r1, [r7, #20]
 8010558:	69ba      	ldr	r2, [r7, #24]
 801055a:	e841 2300 	strex	r3, r2, [r1]
 801055e:	613b      	str	r3, [r7, #16]
   return(result);
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d1e6      	bne.n	8010534 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2220      	movs	r2, #32
 801056a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2200      	movs	r2, #0
 8010572:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f7fe fdf1 	bl	800f15c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801057a:	bf00      	nop
 801057c:	3720      	adds	r7, #32
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}

08010582 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010582:	b580      	push	{r7, lr}
 8010584:	b096      	sub	sp, #88	; 0x58
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010590:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801059a:	2b22      	cmp	r3, #34	; 0x22
 801059c:	f040 8095 	bne.w	80106ca <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80105aa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80105ae:	b2d9      	uxtb	r1, r3
 80105b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80105b4:	b2da      	uxtb	r2, r3
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105ba:	400a      	ands	r2, r1
 80105bc:	b2d2      	uxtb	r2, r2
 80105be:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105c4:	1c5a      	adds	r2, r3, #1
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105d0:	b29b      	uxth	r3, r3
 80105d2:	3b01      	subs	r3, #1
 80105d4:	b29a      	uxth	r2, r3
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d178      	bne.n	80106da <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f0:	e853 3f00 	ldrex	r3, [r3]
 80105f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80105f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80105fc:	653b      	str	r3, [r7, #80]	; 0x50
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	461a      	mov	r2, r3
 8010604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010606:	647b      	str	r3, [r7, #68]	; 0x44
 8010608:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801060a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801060c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801060e:	e841 2300 	strex	r3, r2, [r1]
 8010612:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010616:	2b00      	cmp	r3, #0
 8010618:	d1e6      	bne.n	80105e8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	3308      	adds	r3, #8
 8010620:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010624:	e853 3f00 	ldrex	r3, [r3]
 8010628:	623b      	str	r3, [r7, #32]
   return(result);
 801062a:	6a3b      	ldr	r3, [r7, #32]
 801062c:	f023 0301 	bic.w	r3, r3, #1
 8010630:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	3308      	adds	r3, #8
 8010638:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801063a:	633a      	str	r2, [r7, #48]	; 0x30
 801063c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801063e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010642:	e841 2300 	strex	r3, r2, [r1]
 8010646:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064a:	2b00      	cmp	r3, #0
 801064c:	d1e5      	bne.n	801061a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2220      	movs	r2, #32
 8010652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2200      	movs	r2, #0
 801065a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010660:	2b01      	cmp	r3, #1
 8010662:	d12e      	bne.n	80106c2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2200      	movs	r2, #0
 8010668:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	e853 3f00 	ldrex	r3, [r3]
 8010676:	60fb      	str	r3, [r7, #12]
   return(result);
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	f023 0310 	bic.w	r3, r3, #16
 801067e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	461a      	mov	r2, r3
 8010686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010688:	61fb      	str	r3, [r7, #28]
 801068a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801068c:	69b9      	ldr	r1, [r7, #24]
 801068e:	69fa      	ldr	r2, [r7, #28]
 8010690:	e841 2300 	strex	r3, r2, [r1]
 8010694:	617b      	str	r3, [r7, #20]
   return(result);
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d1e6      	bne.n	801066a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	69db      	ldr	r3, [r3, #28]
 80106a2:	f003 0310 	and.w	r3, r3, #16
 80106a6:	2b10      	cmp	r3, #16
 80106a8:	d103      	bne.n	80106b2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	2210      	movs	r2, #16
 80106b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80106b8:	4619      	mov	r1, r3
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f7fe fd62 	bl	800f184 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80106c0:	e00b      	b.n	80106da <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f7f1 fb68 	bl	8001d98 <HAL_UART_RxCpltCallback>
}
 80106c8:	e007      	b.n	80106da <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	699a      	ldr	r2, [r3, #24]
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f042 0208 	orr.w	r2, r2, #8
 80106d8:	619a      	str	r2, [r3, #24]
}
 80106da:	bf00      	nop
 80106dc:	3758      	adds	r7, #88	; 0x58
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}

080106e2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80106e2:	b580      	push	{r7, lr}
 80106e4:	b096      	sub	sp, #88	; 0x58
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80106f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80106fa:	2b22      	cmp	r3, #34	; 0x22
 80106fc:	f040 8095 	bne.w	801082a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010706:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801070e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8010710:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8010714:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010718:	4013      	ands	r3, r2
 801071a:	b29a      	uxth	r2, r3
 801071c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801071e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010724:	1c9a      	adds	r2, r3, #2
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010730:	b29b      	uxth	r3, r3
 8010732:	3b01      	subs	r3, #1
 8010734:	b29a      	uxth	r2, r3
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010742:	b29b      	uxth	r3, r3
 8010744:	2b00      	cmp	r3, #0
 8010746:	d178      	bne.n	801083a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801074e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010750:	e853 3f00 	ldrex	r3, [r3]
 8010754:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801075c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	461a      	mov	r2, r3
 8010764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010766:	643b      	str	r3, [r7, #64]	; 0x40
 8010768:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801076a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801076c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801076e:	e841 2300 	strex	r3, r2, [r1]
 8010772:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010776:	2b00      	cmp	r3, #0
 8010778:	d1e6      	bne.n	8010748 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	3308      	adds	r3, #8
 8010780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010782:	6a3b      	ldr	r3, [r7, #32]
 8010784:	e853 3f00 	ldrex	r3, [r3]
 8010788:	61fb      	str	r3, [r7, #28]
   return(result);
 801078a:	69fb      	ldr	r3, [r7, #28]
 801078c:	f023 0301 	bic.w	r3, r3, #1
 8010790:	64bb      	str	r3, [r7, #72]	; 0x48
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	3308      	adds	r3, #8
 8010798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801079a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801079c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801079e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80107a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107a2:	e841 2300 	strex	r3, r2, [r1]
 80107a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80107a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d1e5      	bne.n	801077a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2220      	movs	r2, #32
 80107b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2200      	movs	r2, #0
 80107ba:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	d12e      	bne.n	8010822 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2200      	movs	r2, #0
 80107c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	e853 3f00 	ldrex	r3, [r3]
 80107d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	f023 0310 	bic.w	r3, r3, #16
 80107de:	647b      	str	r3, [r7, #68]	; 0x44
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	461a      	mov	r2, r3
 80107e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107e8:	61bb      	str	r3, [r7, #24]
 80107ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ec:	6979      	ldr	r1, [r7, #20]
 80107ee:	69ba      	ldr	r2, [r7, #24]
 80107f0:	e841 2300 	strex	r3, r2, [r1]
 80107f4:	613b      	str	r3, [r7, #16]
   return(result);
 80107f6:	693b      	ldr	r3, [r7, #16]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d1e6      	bne.n	80107ca <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	69db      	ldr	r3, [r3, #28]
 8010802:	f003 0310 	and.w	r3, r3, #16
 8010806:	2b10      	cmp	r3, #16
 8010808:	d103      	bne.n	8010812 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	2210      	movs	r2, #16
 8010810:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010818:	4619      	mov	r1, r3
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f7fe fcb2 	bl	800f184 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010820:	e00b      	b.n	801083a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f7f1 fab8 	bl	8001d98 <HAL_UART_RxCpltCallback>
}
 8010828:	e007      	b.n	801083a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	699a      	ldr	r2, [r3, #24]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	f042 0208 	orr.w	r2, r2, #8
 8010838:	619a      	str	r2, [r3, #24]
}
 801083a:	bf00      	nop
 801083c:	3758      	adds	r7, #88	; 0x58
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}
	...

08010844 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b0a6      	sub	sp, #152	; 0x98
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010852:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	69db      	ldr	r3, [r3, #28]
 801085c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	689b      	ldr	r3, [r3, #8]
 8010870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801087a:	2b22      	cmp	r3, #34	; 0x22
 801087c:	f040 814d 	bne.w	8010b1a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010886:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801088a:	e0f4      	b.n	8010a76 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010892:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010896:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801089a:	b2d9      	uxtb	r1, r3
 801089c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80108a0:	b2da      	uxtb	r2, r3
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108a6:	400a      	ands	r2, r1
 80108a8:	b2d2      	uxtb	r2, r2
 80108aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108b0:	1c5a      	adds	r2, r3, #1
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80108bc:	b29b      	uxth	r3, r3
 80108be:	3b01      	subs	r3, #1
 80108c0:	b29a      	uxth	r2, r3
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	69db      	ldr	r3, [r3, #28]
 80108ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80108d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80108d6:	f003 0307 	and.w	r3, r3, #7
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d053      	beq.n	8010986 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80108de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80108e2:	f003 0301 	and.w	r3, r3, #1
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d011      	beq.n	801090e <UART_RxISR_8BIT_FIFOEN+0xca>
 80108ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80108ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d00b      	beq.n	801090e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	2201      	movs	r2, #1
 80108fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010904:	f043 0201 	orr.w	r2, r3, #1
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801090e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010912:	f003 0302 	and.w	r3, r3, #2
 8010916:	2b00      	cmp	r3, #0
 8010918:	d011      	beq.n	801093e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801091a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801091e:	f003 0301 	and.w	r3, r3, #1
 8010922:	2b00      	cmp	r3, #0
 8010924:	d00b      	beq.n	801093e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	2202      	movs	r2, #2
 801092c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010934:	f043 0204 	orr.w	r2, r3, #4
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801093e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010942:	f003 0304 	and.w	r3, r3, #4
 8010946:	2b00      	cmp	r3, #0
 8010948:	d011      	beq.n	801096e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801094a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801094e:	f003 0301 	and.w	r3, r3, #1
 8010952:	2b00      	cmp	r3, #0
 8010954:	d00b      	beq.n	801096e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	2204      	movs	r2, #4
 801095c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010964:	f043 0202 	orr.w	r2, r3, #2
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010974:	2b00      	cmp	r3, #0
 8010976:	d006      	beq.n	8010986 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f7fe fbf9 	bl	800f170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2200      	movs	r2, #0
 8010982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801098c:	b29b      	uxth	r3, r3
 801098e:	2b00      	cmp	r3, #0
 8010990:	d171      	bne.n	8010a76 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801099a:	e853 3f00 	ldrex	r3, [r3]
 801099e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80109a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80109a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	461a      	mov	r2, r3
 80109b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80109b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80109b6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109b8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80109ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80109bc:	e841 2300 	strex	r3, r2, [r1]
 80109c0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80109c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d1e4      	bne.n	8010992 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	3308      	adds	r3, #8
 80109ce:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109d2:	e853 3f00 	ldrex	r3, [r3]
 80109d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80109d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109da:	4b56      	ldr	r3, [pc, #344]	; (8010b34 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80109dc:	4013      	ands	r3, r2
 80109de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	3308      	adds	r3, #8
 80109e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80109e8:	657a      	str	r2, [r7, #84]	; 0x54
 80109ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80109ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80109f0:	e841 2300 	strex	r3, r2, [r1]
 80109f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80109f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d1e5      	bne.n	80109c8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2220      	movs	r2, #32
 8010a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2200      	movs	r2, #0
 8010a08:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a0e:	2b01      	cmp	r3, #1
 8010a10:	d12e      	bne.n	8010a70 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2200      	movs	r2, #0
 8010a16:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a20:	e853 3f00 	ldrex	r3, [r3]
 8010a24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a28:	f023 0310 	bic.w	r3, r3, #16
 8010a2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	461a      	mov	r2, r3
 8010a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010a36:	643b      	str	r3, [r7, #64]	; 0x40
 8010a38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a3e:	e841 2300 	strex	r3, r2, [r1]
 8010a42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d1e6      	bne.n	8010a18 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	69db      	ldr	r3, [r3, #28]
 8010a50:	f003 0310 	and.w	r3, r3, #16
 8010a54:	2b10      	cmp	r3, #16
 8010a56:	d103      	bne.n	8010a60 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	2210      	movs	r2, #16
 8010a5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010a66:	4619      	mov	r1, r3
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f7fe fb8b 	bl	800f184 <HAL_UARTEx_RxEventCallback>
 8010a6e:	e002      	b.n	8010a76 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f7f1 f991 	bl	8001d98 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010a76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d006      	beq.n	8010a8c <UART_RxISR_8BIT_FIFOEN+0x248>
 8010a7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a82:	f003 0320 	and.w	r3, r3, #32
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	f47f af00 	bne.w	801088c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a92:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010a96:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d045      	beq.n	8010b2a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010aa4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d23e      	bcs.n	8010b2a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	3308      	adds	r3, #8
 8010ab2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ab4:	6a3b      	ldr	r3, [r7, #32]
 8010ab6:	e853 3f00 	ldrex	r3, [r3]
 8010aba:	61fb      	str	r3, [r7, #28]
   return(result);
 8010abc:	69fb      	ldr	r3, [r7, #28]
 8010abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010ac2:	673b      	str	r3, [r7, #112]	; 0x70
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	3308      	adds	r3, #8
 8010aca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010acc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010ace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ad4:	e841 2300 	strex	r3, r2, [r1]
 8010ad8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d1e5      	bne.n	8010aac <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	4a15      	ldr	r2, [pc, #84]	; (8010b38 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8010ae4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	e853 3f00 	ldrex	r3, [r3]
 8010af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	f043 0320 	orr.w	r3, r3, #32
 8010afa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	461a      	mov	r2, r3
 8010b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b04:	61bb      	str	r3, [r7, #24]
 8010b06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b08:	6979      	ldr	r1, [r7, #20]
 8010b0a:	69ba      	ldr	r2, [r7, #24]
 8010b0c:	e841 2300 	strex	r3, r2, [r1]
 8010b10:	613b      	str	r3, [r7, #16]
   return(result);
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d1e6      	bne.n	8010ae6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010b18:	e007      	b.n	8010b2a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	699a      	ldr	r2, [r3, #24]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f042 0208 	orr.w	r2, r2, #8
 8010b28:	619a      	str	r2, [r3, #24]
}
 8010b2a:	bf00      	nop
 8010b2c:	3798      	adds	r7, #152	; 0x98
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	effffffe 	.word	0xeffffffe
 8010b38:	08010583 	.word	0x08010583

08010b3c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b0a8      	sub	sp, #160	; 0xa0
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b4a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	69db      	ldr	r3, [r3, #28]
 8010b54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	689b      	ldr	r3, [r3, #8]
 8010b68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b72:	2b22      	cmp	r3, #34	; 0x22
 8010b74:	f040 8151 	bne.w	8010e1a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010b7e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010b82:	e0f8      	b.n	8010d76 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b8a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8010b96:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8010b9a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8010b9e:	4013      	ands	r3, r2
 8010ba0:	b29a      	uxth	r2, r3
 8010ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010ba6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bac:	1c9a      	adds	r2, r3, #2
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010bb8:	b29b      	uxth	r3, r3
 8010bba:	3b01      	subs	r3, #1
 8010bbc:	b29a      	uxth	r2, r3
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	69db      	ldr	r3, [r3, #28]
 8010bca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010bce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010bd2:	f003 0307 	and.w	r3, r3, #7
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d053      	beq.n	8010c82 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010bda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010bde:	f003 0301 	and.w	r3, r3, #1
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d011      	beq.n	8010c0a <UART_RxISR_16BIT_FIFOEN+0xce>
 8010be6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d00b      	beq.n	8010c0a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c00:	f043 0201 	orr.w	r2, r3, #1
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010c0e:	f003 0302 	and.w	r3, r3, #2
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d011      	beq.n	8010c3a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010c16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010c1a:	f003 0301 	and.w	r3, r3, #1
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d00b      	beq.n	8010c3a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	2202      	movs	r2, #2
 8010c28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c30:	f043 0204 	orr.w	r2, r3, #4
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010c3e:	f003 0304 	and.w	r3, r3, #4
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d011      	beq.n	8010c6a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010c46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010c4a:	f003 0301 	and.w	r3, r3, #1
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d00b      	beq.n	8010c6a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	2204      	movs	r2, #4
 8010c58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c60:	f043 0202 	orr.w	r2, r3, #2
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d006      	beq.n	8010c82 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	f7fe fa7b 	bl	800f170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d173      	bne.n	8010d76 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010c96:	e853 3f00 	ldrex	r3, [r3]
 8010c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ca2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	461a      	mov	r2, r3
 8010cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010cb2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cb4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010cb6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010cb8:	e841 2300 	strex	r3, r2, [r1]
 8010cbc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010cbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d1e4      	bne.n	8010c8e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	3308      	adds	r3, #8
 8010cca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cce:	e853 3f00 	ldrex	r3, [r3]
 8010cd2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010cd6:	4b57      	ldr	r3, [pc, #348]	; (8010e34 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8010cd8:	4013      	ands	r3, r2
 8010cda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	3308      	adds	r3, #8
 8010ce4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010ce8:	65ba      	str	r2, [r7, #88]	; 0x58
 8010cea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010cee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010cf0:	e841 2300 	strex	r3, r2, [r1]
 8010cf4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d1e3      	bne.n	8010cc4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2220      	movs	r2, #32
 8010d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2200      	movs	r2, #0
 8010d08:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	d12e      	bne.n	8010d70 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2200      	movs	r2, #0
 8010d16:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d20:	e853 3f00 	ldrex	r3, [r3]
 8010d24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d28:	f023 0310 	bic.w	r3, r3, #16
 8010d2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	461a      	mov	r2, r3
 8010d34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010d36:	647b      	str	r3, [r7, #68]	; 0x44
 8010d38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010d3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d3e:	e841 2300 	strex	r3, r2, [r1]
 8010d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d1e6      	bne.n	8010d18 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	69db      	ldr	r3, [r3, #28]
 8010d50:	f003 0310 	and.w	r3, r3, #16
 8010d54:	2b10      	cmp	r3, #16
 8010d56:	d103      	bne.n	8010d60 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	2210      	movs	r2, #16
 8010d5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d66:	4619      	mov	r1, r3
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f7fe fa0b 	bl	800f184 <HAL_UARTEx_RxEventCallback>
 8010d6e:	e002      	b.n	8010d76 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f7f1 f811 	bl	8001d98 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010d76:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d006      	beq.n	8010d8c <UART_RxISR_16BIT_FIFOEN+0x250>
 8010d7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010d82:	f003 0320 	and.w	r3, r3, #32
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	f47f aefc 	bne.w	8010b84 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d92:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010d96:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d045      	beq.n	8010e2a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010da4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d23e      	bcs.n	8010e2a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	3308      	adds	r3, #8
 8010db2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db6:	e853 3f00 	ldrex	r3, [r3]
 8010dba:	623b      	str	r3, [r7, #32]
   return(result);
 8010dbc:	6a3b      	ldr	r3, [r7, #32]
 8010dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010dc2:	677b      	str	r3, [r7, #116]	; 0x74
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	3308      	adds	r3, #8
 8010dca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010dcc:	633a      	str	r2, [r7, #48]	; 0x30
 8010dce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dd4:	e841 2300 	strex	r3, r2, [r1]
 8010dd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d1e5      	bne.n	8010dac <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	4a15      	ldr	r2, [pc, #84]	; (8010e38 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8010de4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dec:	693b      	ldr	r3, [r7, #16]
 8010dee:	e853 3f00 	ldrex	r3, [r3]
 8010df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	f043 0320 	orr.w	r3, r3, #32
 8010dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	461a      	mov	r2, r3
 8010e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e04:	61fb      	str	r3, [r7, #28]
 8010e06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e08:	69b9      	ldr	r1, [r7, #24]
 8010e0a:	69fa      	ldr	r2, [r7, #28]
 8010e0c:	e841 2300 	strex	r3, r2, [r1]
 8010e10:	617b      	str	r3, [r7, #20]
   return(result);
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d1e6      	bne.n	8010de6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010e18:	e007      	b.n	8010e2a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	699a      	ldr	r2, [r3, #24]
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	f042 0208 	orr.w	r2, r2, #8
 8010e28:	619a      	str	r2, [r3, #24]
}
 8010e2a:	bf00      	nop
 8010e2c:	37a0      	adds	r7, #160	; 0xa0
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}
 8010e32:	bf00      	nop
 8010e34:	effffffe 	.word	0xeffffffe
 8010e38:	080106e3 	.word	0x080106e3

08010e3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	b083      	sub	sp, #12
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010e44:	bf00      	nop
 8010e46:	370c      	adds	r7, #12
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4e:	4770      	bx	lr

08010e50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010e50:	b480      	push	{r7}
 8010e52:	b083      	sub	sp, #12
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010e58:	bf00      	nop
 8010e5a:	370c      	adds	r7, #12
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e62:	4770      	bx	lr

08010e64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010e64:	b480      	push	{r7}
 8010e66:	b083      	sub	sp, #12
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010e6c:	bf00      	nop
 8010e6e:	370c      	adds	r7, #12
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr

08010e78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b085      	sub	sp, #20
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010e86:	2b01      	cmp	r3, #1
 8010e88:	d101      	bne.n	8010e8e <HAL_UARTEx_DisableFifoMode+0x16>
 8010e8a:	2302      	movs	r3, #2
 8010e8c:	e027      	b.n	8010ede <HAL_UARTEx_DisableFifoMode+0x66>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	2201      	movs	r2, #1
 8010e92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	2224      	movs	r2, #36	; 0x24
 8010e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	681a      	ldr	r2, [r3, #0]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	f022 0201 	bic.w	r2, r2, #1
 8010eb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010ebc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	68fa      	ldr	r2, [r7, #12]
 8010eca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2220      	movs	r2, #32
 8010ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010edc:	2300      	movs	r3, #0
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3714      	adds	r7, #20
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee8:	4770      	bx	lr

08010eea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010eea:	b580      	push	{r7, lr}
 8010eec:	b084      	sub	sp, #16
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
 8010ef2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010efa:	2b01      	cmp	r3, #1
 8010efc:	d101      	bne.n	8010f02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010efe:	2302      	movs	r3, #2
 8010f00:	e02d      	b.n	8010f5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2201      	movs	r2, #1
 8010f06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2224      	movs	r2, #36	; 0x24
 8010f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	681a      	ldr	r2, [r3, #0]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	f022 0201 	bic.w	r2, r2, #1
 8010f28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	689b      	ldr	r3, [r3, #8]
 8010f30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	683a      	ldr	r2, [r7, #0]
 8010f3a:	430a      	orrs	r2, r1
 8010f3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 f850 	bl	8010fe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	68fa      	ldr	r2, [r7, #12]
 8010f4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2220      	movs	r2, #32
 8010f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2200      	movs	r2, #0
 8010f58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010f5c:	2300      	movs	r3, #0
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3710      	adds	r7, #16
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}

08010f66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b084      	sub	sp, #16
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
 8010f6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010f76:	2b01      	cmp	r3, #1
 8010f78:	d101      	bne.n	8010f7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010f7a:	2302      	movs	r3, #2
 8010f7c:	e02d      	b.n	8010fda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2201      	movs	r2, #1
 8010f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2224      	movs	r2, #36	; 0x24
 8010f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	681a      	ldr	r2, [r3, #0]
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	f022 0201 	bic.w	r2, r2, #1
 8010fa4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	689b      	ldr	r3, [r3, #8]
 8010fac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	683a      	ldr	r2, [r7, #0]
 8010fb6:	430a      	orrs	r2, r1
 8010fb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f000 f812 	bl	8010fe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	68fa      	ldr	r2, [r7, #12]
 8010fc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2220      	movs	r2, #32
 8010fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010fd8:	2300      	movs	r3, #0
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3710      	adds	r7, #16
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
	...

08010fe4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b085      	sub	sp, #20
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d108      	bne.n	8011006 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2201      	movs	r2, #1
 8011000:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011004:	e031      	b.n	801106a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011006:	2310      	movs	r3, #16
 8011008:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801100a:	2310      	movs	r3, #16
 801100c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	689b      	ldr	r3, [r3, #8]
 8011014:	0e5b      	lsrs	r3, r3, #25
 8011016:	b2db      	uxtb	r3, r3
 8011018:	f003 0307 	and.w	r3, r3, #7
 801101c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	689b      	ldr	r3, [r3, #8]
 8011024:	0f5b      	lsrs	r3, r3, #29
 8011026:	b2db      	uxtb	r3, r3
 8011028:	f003 0307 	and.w	r3, r3, #7
 801102c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801102e:	7bbb      	ldrb	r3, [r7, #14]
 8011030:	7b3a      	ldrb	r2, [r7, #12]
 8011032:	4911      	ldr	r1, [pc, #68]	; (8011078 <UARTEx_SetNbDataToProcess+0x94>)
 8011034:	5c8a      	ldrb	r2, [r1, r2]
 8011036:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801103a:	7b3a      	ldrb	r2, [r7, #12]
 801103c:	490f      	ldr	r1, [pc, #60]	; (801107c <UARTEx_SetNbDataToProcess+0x98>)
 801103e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011040:	fb93 f3f2 	sdiv	r3, r3, r2
 8011044:	b29a      	uxth	r2, r3
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801104c:	7bfb      	ldrb	r3, [r7, #15]
 801104e:	7b7a      	ldrb	r2, [r7, #13]
 8011050:	4909      	ldr	r1, [pc, #36]	; (8011078 <UARTEx_SetNbDataToProcess+0x94>)
 8011052:	5c8a      	ldrb	r2, [r1, r2]
 8011054:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011058:	7b7a      	ldrb	r2, [r7, #13]
 801105a:	4908      	ldr	r1, [pc, #32]	; (801107c <UARTEx_SetNbDataToProcess+0x98>)
 801105c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801105e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011062:	b29a      	uxth	r2, r3
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801106a:	bf00      	nop
 801106c:	3714      	adds	r7, #20
 801106e:	46bd      	mov	sp, r7
 8011070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011074:	4770      	bx	lr
 8011076:	bf00      	nop
 8011078:	08017d38 	.word	0x08017d38
 801107c:	08017d40 	.word	0x08017d40

08011080 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011080:	b480      	push	{r7}
 8011082:	b083      	sub	sp, #12
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
 8011088:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d121      	bne.n	80110d6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681a      	ldr	r2, [r3, #0]
 8011096:	4b27      	ldr	r3, [pc, #156]	; (8011134 <FMC_SDRAM_Init+0xb4>)
 8011098:	4013      	ands	r3, r2
 801109a:	683a      	ldr	r2, [r7, #0]
 801109c:	6851      	ldr	r1, [r2, #4]
 801109e:	683a      	ldr	r2, [r7, #0]
 80110a0:	6892      	ldr	r2, [r2, #8]
 80110a2:	4311      	orrs	r1, r2
 80110a4:	683a      	ldr	r2, [r7, #0]
 80110a6:	68d2      	ldr	r2, [r2, #12]
 80110a8:	4311      	orrs	r1, r2
 80110aa:	683a      	ldr	r2, [r7, #0]
 80110ac:	6912      	ldr	r2, [r2, #16]
 80110ae:	4311      	orrs	r1, r2
 80110b0:	683a      	ldr	r2, [r7, #0]
 80110b2:	6952      	ldr	r2, [r2, #20]
 80110b4:	4311      	orrs	r1, r2
 80110b6:	683a      	ldr	r2, [r7, #0]
 80110b8:	6992      	ldr	r2, [r2, #24]
 80110ba:	4311      	orrs	r1, r2
 80110bc:	683a      	ldr	r2, [r7, #0]
 80110be:	69d2      	ldr	r2, [r2, #28]
 80110c0:	4311      	orrs	r1, r2
 80110c2:	683a      	ldr	r2, [r7, #0]
 80110c4:	6a12      	ldr	r2, [r2, #32]
 80110c6:	4311      	orrs	r1, r2
 80110c8:	683a      	ldr	r2, [r7, #0]
 80110ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80110cc:	430a      	orrs	r2, r1
 80110ce:	431a      	orrs	r2, r3
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	601a      	str	r2, [r3, #0]
 80110d4:	e026      	b.n	8011124 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	69d9      	ldr	r1, [r3, #28]
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	6a1b      	ldr	r3, [r3, #32]
 80110e6:	4319      	orrs	r1, r3
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110ec:	430b      	orrs	r3, r1
 80110ee:	431a      	orrs	r2, r3
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	685a      	ldr	r2, [r3, #4]
 80110f8:	4b0e      	ldr	r3, [pc, #56]	; (8011134 <FMC_SDRAM_Init+0xb4>)
 80110fa:	4013      	ands	r3, r2
 80110fc:	683a      	ldr	r2, [r7, #0]
 80110fe:	6851      	ldr	r1, [r2, #4]
 8011100:	683a      	ldr	r2, [r7, #0]
 8011102:	6892      	ldr	r2, [r2, #8]
 8011104:	4311      	orrs	r1, r2
 8011106:	683a      	ldr	r2, [r7, #0]
 8011108:	68d2      	ldr	r2, [r2, #12]
 801110a:	4311      	orrs	r1, r2
 801110c:	683a      	ldr	r2, [r7, #0]
 801110e:	6912      	ldr	r2, [r2, #16]
 8011110:	4311      	orrs	r1, r2
 8011112:	683a      	ldr	r2, [r7, #0]
 8011114:	6952      	ldr	r2, [r2, #20]
 8011116:	4311      	orrs	r1, r2
 8011118:	683a      	ldr	r2, [r7, #0]
 801111a:	6992      	ldr	r2, [r2, #24]
 801111c:	430a      	orrs	r2, r1
 801111e:	431a      	orrs	r2, r3
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8011124:	2300      	movs	r3, #0
}
 8011126:	4618      	mov	r0, r3
 8011128:	370c      	adds	r7, #12
 801112a:	46bd      	mov	sp, r7
 801112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011130:	4770      	bx	lr
 8011132:	bf00      	nop
 8011134:	ffff8000 	.word	0xffff8000

08011138 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8011138:	b480      	push	{r7}
 801113a:	b085      	sub	sp, #20
 801113c:	af00      	add	r7, sp, #0
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d128      	bne.n	801119c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	689b      	ldr	r3, [r3, #8]
 801114e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8011152:	68bb      	ldr	r3, [r7, #8]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	1e59      	subs	r1, r3, #1
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	3b01      	subs	r3, #1
 801115e:	011b      	lsls	r3, r3, #4
 8011160:	4319      	orrs	r1, r3
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	689b      	ldr	r3, [r3, #8]
 8011166:	3b01      	subs	r3, #1
 8011168:	021b      	lsls	r3, r3, #8
 801116a:	4319      	orrs	r1, r3
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	3b01      	subs	r3, #1
 8011172:	031b      	lsls	r3, r3, #12
 8011174:	4319      	orrs	r1, r3
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	691b      	ldr	r3, [r3, #16]
 801117a:	3b01      	subs	r3, #1
 801117c:	041b      	lsls	r3, r3, #16
 801117e:	4319      	orrs	r1, r3
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	695b      	ldr	r3, [r3, #20]
 8011184:	3b01      	subs	r3, #1
 8011186:	051b      	lsls	r3, r3, #20
 8011188:	4319      	orrs	r1, r3
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	699b      	ldr	r3, [r3, #24]
 801118e:	3b01      	subs	r3, #1
 8011190:	061b      	lsls	r3, r3, #24
 8011192:	430b      	orrs	r3, r1
 8011194:	431a      	orrs	r2, r3
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	609a      	str	r2, [r3, #8]
 801119a:	e02d      	b.n	80111f8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	689a      	ldr	r2, [r3, #8]
 80111a0:	4b19      	ldr	r3, [pc, #100]	; (8011208 <FMC_SDRAM_Timing_Init+0xd0>)
 80111a2:	4013      	ands	r3, r2
 80111a4:	68ba      	ldr	r2, [r7, #8]
 80111a6:	68d2      	ldr	r2, [r2, #12]
 80111a8:	3a01      	subs	r2, #1
 80111aa:	0311      	lsls	r1, r2, #12
 80111ac:	68ba      	ldr	r2, [r7, #8]
 80111ae:	6952      	ldr	r2, [r2, #20]
 80111b0:	3a01      	subs	r2, #1
 80111b2:	0512      	lsls	r2, r2, #20
 80111b4:	430a      	orrs	r2, r1
 80111b6:	431a      	orrs	r2, r3
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	68db      	ldr	r3, [r3, #12]
 80111c0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	1e59      	subs	r1, r3, #1
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	685b      	ldr	r3, [r3, #4]
 80111ce:	3b01      	subs	r3, #1
 80111d0:	011b      	lsls	r3, r3, #4
 80111d2:	4319      	orrs	r1, r3
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	689b      	ldr	r3, [r3, #8]
 80111d8:	3b01      	subs	r3, #1
 80111da:	021b      	lsls	r3, r3, #8
 80111dc:	4319      	orrs	r1, r3
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	691b      	ldr	r3, [r3, #16]
 80111e2:	3b01      	subs	r3, #1
 80111e4:	041b      	lsls	r3, r3, #16
 80111e6:	4319      	orrs	r1, r3
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	699b      	ldr	r3, [r3, #24]
 80111ec:	3b01      	subs	r3, #1
 80111ee:	061b      	lsls	r3, r3, #24
 80111f0:	430b      	orrs	r3, r1
 80111f2:	431a      	orrs	r2, r3
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80111f8:	2300      	movs	r3, #0
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3714      	adds	r7, #20
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	ff0f0fff 	.word	0xff0f0fff

0801120c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801120c:	b480      	push	{r7}
 801120e:	b085      	sub	sp, #20
 8011210:	af00      	add	r7, sp, #0
 8011212:	60f8      	str	r0, [r7, #12]
 8011214:	60b9      	str	r1, [r7, #8]
 8011216:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	691a      	ldr	r2, [r3, #16]
 801121c:	4b0c      	ldr	r3, [pc, #48]	; (8011250 <FMC_SDRAM_SendCommand+0x44>)
 801121e:	4013      	ands	r3, r2
 8011220:	68ba      	ldr	r2, [r7, #8]
 8011222:	6811      	ldr	r1, [r2, #0]
 8011224:	68ba      	ldr	r2, [r7, #8]
 8011226:	6852      	ldr	r2, [r2, #4]
 8011228:	4311      	orrs	r1, r2
 801122a:	68ba      	ldr	r2, [r7, #8]
 801122c:	6892      	ldr	r2, [r2, #8]
 801122e:	3a01      	subs	r2, #1
 8011230:	0152      	lsls	r2, r2, #5
 8011232:	4311      	orrs	r1, r2
 8011234:	68ba      	ldr	r2, [r7, #8]
 8011236:	68d2      	ldr	r2, [r2, #12]
 8011238:	0252      	lsls	r2, r2, #9
 801123a:	430a      	orrs	r2, r1
 801123c:	431a      	orrs	r2, r3
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8011242:	2300      	movs	r3, #0
}
 8011244:	4618      	mov	r0, r3
 8011246:	3714      	adds	r7, #20
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr
 8011250:	ffc00000 	.word	0xffc00000

08011254 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011254:	b480      	push	{r7}
 8011256:	b083      	sub	sp, #12
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
 801125c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	695a      	ldr	r2, [r3, #20]
 8011262:	4b07      	ldr	r3, [pc, #28]	; (8011280 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8011264:	4013      	ands	r3, r2
 8011266:	683a      	ldr	r2, [r7, #0]
 8011268:	0052      	lsls	r2, r2, #1
 801126a:	431a      	orrs	r2, r3
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8011270:	2300      	movs	r3, #0
}
 8011272:	4618      	mov	r0, r3
 8011274:	370c      	adds	r7, #12
 8011276:	46bd      	mov	sp, r7
 8011278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127c:	4770      	bx	lr
 801127e:	bf00      	nop
 8011280:	ffffc001 	.word	0xffffc001

08011284 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011284:	b084      	sub	sp, #16
 8011286:	b480      	push	{r7}
 8011288:	b085      	sub	sp, #20
 801128a:	af00      	add	r7, sp, #0
 801128c:	6078      	str	r0, [r7, #4]
 801128e:	f107 001c 	add.w	r0, r7, #28
 8011292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011296:	2300      	movs	r3, #0
 8011298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801129a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801129c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801129e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80112a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80112a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80112a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80112a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80112a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80112aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80112ac:	68fa      	ldr	r2, [r7, #12]
 80112ae:	4313      	orrs	r3, r2
 80112b0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	685a      	ldr	r2, [r3, #4]
 80112b6:	4b07      	ldr	r3, [pc, #28]	; (80112d4 <SDMMC_Init+0x50>)
 80112b8:	4013      	ands	r3, r2
 80112ba:	68fa      	ldr	r2, [r7, #12]
 80112bc:	431a      	orrs	r2, r3
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80112c2:	2300      	movs	r3, #0
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	3714      	adds	r7, #20
 80112c8:	46bd      	mov	sp, r7
 80112ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ce:	b004      	add	sp, #16
 80112d0:	4770      	bx	lr
 80112d2:	bf00      	nop
 80112d4:	ffc02c00 	.word	0xffc02c00

080112d8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80112d8:	b480      	push	{r7}
 80112da:	b083      	sub	sp, #12
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	370c      	adds	r7, #12
 80112ea:	46bd      	mov	sp, r7
 80112ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f0:	4770      	bx	lr

080112f2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80112f2:	b480      	push	{r7}
 80112f4:	b083      	sub	sp, #12
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
 80112fa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	681a      	ldr	r2, [r3, #0]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011306:	2300      	movs	r3, #0
}
 8011308:	4618      	mov	r0, r3
 801130a:	370c      	adds	r7, #12
 801130c:	46bd      	mov	sp, r7
 801130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011312:	4770      	bx	lr

08011314 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011314:	b480      	push	{r7}
 8011316:	b083      	sub	sp, #12
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	f043 0203 	orr.w	r2, r3, #3
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011328:	2300      	movs	r3, #0
}
 801132a:	4618      	mov	r0, r3
 801132c:	370c      	adds	r7, #12
 801132e:	46bd      	mov	sp, r7
 8011330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011334:	4770      	bx	lr

08011336 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011336:	b480      	push	{r7}
 8011338:	b083      	sub	sp, #12
 801133a:	af00      	add	r7, sp, #0
 801133c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	f003 0303 	and.w	r3, r3, #3
}
 8011346:	4618      	mov	r0, r3
 8011348:	370c      	adds	r7, #12
 801134a:	46bd      	mov	sp, r7
 801134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011350:	4770      	bx	lr
	...

08011354 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011354:	b480      	push	{r7}
 8011356:	b085      	sub	sp, #20
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801135e:	2300      	movs	r3, #0
 8011360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	681a      	ldr	r2, [r3, #0]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011372:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011378:	431a      	orrs	r2, r3
                       Command->CPSM);
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801137e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011380:	68fa      	ldr	r2, [r7, #12]
 8011382:	4313      	orrs	r3, r2
 8011384:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	68da      	ldr	r2, [r3, #12]
 801138a:	4b06      	ldr	r3, [pc, #24]	; (80113a4 <SDMMC_SendCommand+0x50>)
 801138c:	4013      	ands	r3, r2
 801138e:	68fa      	ldr	r2, [r7, #12]
 8011390:	431a      	orrs	r2, r3
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011396:	2300      	movs	r3, #0
}
 8011398:	4618      	mov	r0, r3
 801139a:	3714      	adds	r7, #20
 801139c:	46bd      	mov	sp, r7
 801139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a2:	4770      	bx	lr
 80113a4:	fffee0c0 	.word	0xfffee0c0

080113a8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b083      	sub	sp, #12
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	691b      	ldr	r3, [r3, #16]
 80113b4:	b2db      	uxtb	r3, r3
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	370c      	adds	r7, #12
 80113ba:	46bd      	mov	sp, r7
 80113bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c0:	4770      	bx	lr

080113c2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80113c2:	b480      	push	{r7}
 80113c4:	b085      	sub	sp, #20
 80113c6:	af00      	add	r7, sp, #0
 80113c8:	6078      	str	r0, [r7, #4]
 80113ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	3314      	adds	r3, #20
 80113d0:	461a      	mov	r2, r3
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	4413      	add	r3, r2
 80113d6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	681b      	ldr	r3, [r3, #0]
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3714      	adds	r7, #20
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr

080113e8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80113e8:	b480      	push	{r7}
 80113ea:	b085      	sub	sp, #20
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80113f2:	2300      	movs	r3, #0
 80113f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	681a      	ldr	r2, [r3, #0]
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	685a      	ldr	r2, [r3, #4]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801140e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011414:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801141a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801141c:	68fa      	ldr	r2, [r7, #12]
 801141e:	4313      	orrs	r3, r2
 8011420:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011426:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	431a      	orrs	r2, r3
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011432:	2300      	movs	r3, #0

}
 8011434:	4618      	mov	r0, r3
 8011436:	3714      	adds	r7, #20
 8011438:	46bd      	mov	sp, r7
 801143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143e:	4770      	bx	lr

08011440 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b088      	sub	sp, #32
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801144e:	2310      	movs	r3, #16
 8011450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011458:	2300      	movs	r3, #0
 801145a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801145c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011460:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011462:	f107 0308 	add.w	r3, r7, #8
 8011466:	4619      	mov	r1, r3
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f7ff ff73 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801146e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011472:	2110      	movs	r1, #16
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f000 fa5f 	bl	8011938 <SDMMC_GetCmdResp1>
 801147a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801147c:	69fb      	ldr	r3, [r7, #28]
}
 801147e:	4618      	mov	r0, r3
 8011480:	3720      	adds	r7, #32
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}

08011486 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011486:	b580      	push	{r7, lr}
 8011488:	b088      	sub	sp, #32
 801148a:	af00      	add	r7, sp, #0
 801148c:	6078      	str	r0, [r7, #4]
 801148e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011494:	2311      	movs	r3, #17
 8011496:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011498:	f44f 7380 	mov.w	r3, #256	; 0x100
 801149c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801149e:	2300      	movs	r3, #0
 80114a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114a8:	f107 0308 	add.w	r3, r7, #8
 80114ac:	4619      	mov	r1, r3
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f7ff ff50 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80114b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80114b8:	2111      	movs	r1, #17
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f000 fa3c 	bl	8011938 <SDMMC_GetCmdResp1>
 80114c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114c2:	69fb      	ldr	r3, [r7, #28]
}
 80114c4:	4618      	mov	r0, r3
 80114c6:	3720      	adds	r7, #32
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd80      	pop	{r7, pc}

080114cc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b088      	sub	sp, #32
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
 80114d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80114da:	2312      	movs	r3, #18
 80114dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114e4:	2300      	movs	r3, #0
 80114e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114ee:	f107 0308 	add.w	r3, r7, #8
 80114f2:	4619      	mov	r1, r3
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f7ff ff2d 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80114fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80114fe:	2112      	movs	r1, #18
 8011500:	6878      	ldr	r0, [r7, #4]
 8011502:	f000 fa19 	bl	8011938 <SDMMC_GetCmdResp1>
 8011506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011508:	69fb      	ldr	r3, [r7, #28]
}
 801150a:	4618      	mov	r0, r3
 801150c:	3720      	adds	r7, #32
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}

08011512 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011512:	b580      	push	{r7, lr}
 8011514:	b088      	sub	sp, #32
 8011516:	af00      	add	r7, sp, #0
 8011518:	6078      	str	r0, [r7, #4]
 801151a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011520:	2318      	movs	r3, #24
 8011522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801152a:	2300      	movs	r3, #0
 801152c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011532:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011534:	f107 0308 	add.w	r3, r7, #8
 8011538:	4619      	mov	r1, r3
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	f7ff ff0a 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011540:	f241 3288 	movw	r2, #5000	; 0x1388
 8011544:	2118      	movs	r1, #24
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f000 f9f6 	bl	8011938 <SDMMC_GetCmdResp1>
 801154c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801154e:	69fb      	ldr	r3, [r7, #28]
}
 8011550:	4618      	mov	r0, r3
 8011552:	3720      	adds	r7, #32
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}

08011558 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b088      	sub	sp, #32
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011566:	2319      	movs	r3, #25
 8011568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801156a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801156e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011570:	2300      	movs	r3, #0
 8011572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011578:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801157a:	f107 0308 	add.w	r3, r7, #8
 801157e:	4619      	mov	r1, r3
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f7ff fee7 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011586:	f241 3288 	movw	r2, #5000	; 0x1388
 801158a:	2119      	movs	r1, #25
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f000 f9d3 	bl	8011938 <SDMMC_GetCmdResp1>
 8011592:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011594:	69fb      	ldr	r3, [r7, #28]
}
 8011596:	4618      	mov	r0, r3
 8011598:	3720      	adds	r7, #32
 801159a:	46bd      	mov	sp, r7
 801159c:	bd80      	pop	{r7, pc}
	...

080115a0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b088      	sub	sp, #32
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80115a8:	2300      	movs	r3, #0
 80115aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80115ac:	230c      	movs	r3, #12
 80115ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80115b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80115b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80115b6:	2300      	movs	r3, #0
 80115b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80115ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115be:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115d8:	f107 0308 	add.w	r3, r7, #8
 80115dc:	4619      	mov	r1, r3
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f7ff feb8 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80115e4:	4a0b      	ldr	r2, [pc, #44]	; (8011614 <SDMMC_CmdStopTransfer+0x74>)
 80115e6:	210c      	movs	r1, #12
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f000 f9a5 	bl	8011938 <SDMMC_GetCmdResp1>
 80115ee:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	68db      	ldr	r3, [r3, #12]
 80115f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80115fc:	69fb      	ldr	r3, [r7, #28]
 80115fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011602:	d101      	bne.n	8011608 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011604:	2300      	movs	r3, #0
 8011606:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011608:	69fb      	ldr	r3, [r7, #28]
}
 801160a:	4618      	mov	r0, r3
 801160c:	3720      	adds	r7, #32
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
 8011612:	bf00      	nop
 8011614:	05f5e100 	.word	0x05f5e100

08011618 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b088      	sub	sp, #32
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011626:	2307      	movs	r3, #7
 8011628:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801162a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801162e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011630:	2300      	movs	r3, #0
 8011632:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011638:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801163a:	f107 0308 	add.w	r3, r7, #8
 801163e:	4619      	mov	r1, r3
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f7ff fe87 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011646:	f241 3288 	movw	r2, #5000	; 0x1388
 801164a:	2107      	movs	r1, #7
 801164c:	6878      	ldr	r0, [r7, #4]
 801164e:	f000 f973 	bl	8011938 <SDMMC_GetCmdResp1>
 8011652:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011654:	69fb      	ldr	r3, [r7, #28]
}
 8011656:	4618      	mov	r0, r3
 8011658:	3720      	adds	r7, #32
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}

0801165e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801165e:	b580      	push	{r7, lr}
 8011660:	b088      	sub	sp, #32
 8011662:	af00      	add	r7, sp, #0
 8011664:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011666:	2300      	movs	r3, #0
 8011668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801166a:	2300      	movs	r3, #0
 801166c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801166e:	2300      	movs	r3, #0
 8011670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011672:	2300      	movs	r3, #0
 8011674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801167a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801167c:	f107 0308 	add.w	r3, r7, #8
 8011680:	4619      	mov	r1, r3
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f7ff fe66 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f000 fb97 	bl	8011dbc <SDMMC_GetCmdError>
 801168e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011690:	69fb      	ldr	r3, [r7, #28]
}
 8011692:	4618      	mov	r0, r3
 8011694:	3720      	adds	r7, #32
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}

0801169a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801169a:	b580      	push	{r7, lr}
 801169c:	b088      	sub	sp, #32
 801169e:	af00      	add	r7, sp, #0
 80116a0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80116a2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80116a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80116a8:	2308      	movs	r3, #8
 80116aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80116ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80116b2:	2300      	movs	r3, #0
 80116b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80116b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116bc:	f107 0308 	add.w	r3, r7, #8
 80116c0:	4619      	mov	r1, r3
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f7ff fe46 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f000 fb29 	bl	8011d20 <SDMMC_GetCmdResp7>
 80116ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116d0:	69fb      	ldr	r3, [r7, #28]
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3720      	adds	r7, #32
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}

080116da <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80116da:	b580      	push	{r7, lr}
 80116dc:	b088      	sub	sp, #32
 80116de:	af00      	add	r7, sp, #0
 80116e0:	6078      	str	r0, [r7, #4]
 80116e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80116e8:	2337      	movs	r3, #55	; 0x37
 80116ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80116ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80116f2:	2300      	movs	r3, #0
 80116f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80116f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116fc:	f107 0308 	add.w	r3, r7, #8
 8011700:	4619      	mov	r1, r3
 8011702:	6878      	ldr	r0, [r7, #4]
 8011704:	f7ff fe26 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011708:	f241 3288 	movw	r2, #5000	; 0x1388
 801170c:	2137      	movs	r1, #55	; 0x37
 801170e:	6878      	ldr	r0, [r7, #4]
 8011710:	f000 f912 	bl	8011938 <SDMMC_GetCmdResp1>
 8011714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011716:	69fb      	ldr	r3, [r7, #28]
}
 8011718:	4618      	mov	r0, r3
 801171a:	3720      	adds	r7, #32
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}

08011720 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b088      	sub	sp, #32
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801172e:	2329      	movs	r3, #41	; 0x29
 8011730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011738:	2300      	movs	r3, #0
 801173a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801173c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011740:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011742:	f107 0308 	add.w	r3, r7, #8
 8011746:	4619      	mov	r1, r3
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f7ff fe03 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f000 fa2e 	bl	8011bb0 <SDMMC_GetCmdResp3>
 8011754:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011756:	69fb      	ldr	r3, [r7, #28]
}
 8011758:	4618      	mov	r0, r3
 801175a:	3720      	adds	r7, #32
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}

08011760 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b088      	sub	sp, #32
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801176e:	2306      	movs	r3, #6
 8011770:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011778:	2300      	movs	r3, #0
 801177a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801177c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011780:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011782:	f107 0308 	add.w	r3, r7, #8
 8011786:	4619      	mov	r1, r3
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f7ff fde3 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801178e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011792:	2106      	movs	r1, #6
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	f000 f8cf 	bl	8011938 <SDMMC_GetCmdResp1>
 801179a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801179c:	69fb      	ldr	r3, [r7, #28]
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3720      	adds	r7, #32
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}

080117a6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80117a6:	b580      	push	{r7, lr}
 80117a8:	b088      	sub	sp, #32
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80117ae:	2300      	movs	r3, #0
 80117b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80117b2:	2333      	movs	r3, #51	; 0x33
 80117b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80117b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80117ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80117bc:	2300      	movs	r3, #0
 80117be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80117c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80117c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80117c6:	f107 0308 	add.w	r3, r7, #8
 80117ca:	4619      	mov	r1, r3
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f7ff fdc1 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80117d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80117d6:	2133      	movs	r1, #51	; 0x33
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f000 f8ad 	bl	8011938 <SDMMC_GetCmdResp1>
 80117de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80117e0:	69fb      	ldr	r3, [r7, #28]
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	3720      	adds	r7, #32
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}

080117ea <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80117ea:	b580      	push	{r7, lr}
 80117ec:	b088      	sub	sp, #32
 80117ee:	af00      	add	r7, sp, #0
 80117f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80117f2:	2300      	movs	r3, #0
 80117f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80117f6:	2302      	movs	r3, #2
 80117f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80117fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80117fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011800:	2300      	movs	r3, #0
 8011802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011808:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801180a:	f107 0308 	add.w	r3, r7, #8
 801180e:	4619      	mov	r1, r3
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f7ff fd9f 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f000 f980 	bl	8011b1c <SDMMC_GetCmdResp2>
 801181c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801181e:	69fb      	ldr	r3, [r7, #28]
}
 8011820:	4618      	mov	r0, r3
 8011822:	3720      	adds	r7, #32
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}

08011828 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b088      	sub	sp, #32
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011836:	2309      	movs	r3, #9
 8011838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801183a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801183e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011840:	2300      	movs	r3, #0
 8011842:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011848:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801184a:	f107 0308 	add.w	r3, r7, #8
 801184e:	4619      	mov	r1, r3
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f7ff fd7f 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	f000 f960 	bl	8011b1c <SDMMC_GetCmdResp2>
 801185c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801185e:	69fb      	ldr	r3, [r7, #28]
}
 8011860:	4618      	mov	r0, r3
 8011862:	3720      	adds	r7, #32
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}

08011868 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b088      	sub	sp, #32
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
 8011870:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011872:	2300      	movs	r3, #0
 8011874:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011876:	2303      	movs	r3, #3
 8011878:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801187a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801187e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011880:	2300      	movs	r3, #0
 8011882:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011888:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801188a:	f107 0308 	add.w	r3, r7, #8
 801188e:	4619      	mov	r1, r3
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f7ff fd5f 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011896:	683a      	ldr	r2, [r7, #0]
 8011898:	2103      	movs	r1, #3
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f000 f9c8 	bl	8011c30 <SDMMC_GetCmdResp6>
 80118a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80118a2:	69fb      	ldr	r3, [r7, #28]
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3720      	adds	r7, #32
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}

080118ac <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b088      	sub	sp, #32
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
 80118b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80118ba:	230d      	movs	r3, #13
 80118bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80118be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80118c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80118c4:	2300      	movs	r3, #0
 80118c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80118c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80118cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80118ce:	f107 0308 	add.w	r3, r7, #8
 80118d2:	4619      	mov	r1, r3
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f7ff fd3d 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80118da:	f241 3288 	movw	r2, #5000	; 0x1388
 80118de:	210d      	movs	r1, #13
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f000 f829 	bl	8011938 <SDMMC_GetCmdResp1>
 80118e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80118e8:	69fb      	ldr	r3, [r7, #28]
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	3720      	adds	r7, #32
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}

080118f2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80118f2:	b580      	push	{r7, lr}
 80118f4:	b088      	sub	sp, #32
 80118f6:	af00      	add	r7, sp, #0
 80118f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80118fa:	2300      	movs	r3, #0
 80118fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80118fe:	230d      	movs	r3, #13
 8011900:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011906:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011908:	2300      	movs	r3, #0
 801190a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801190c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011910:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011912:	f107 0308 	add.w	r3, r7, #8
 8011916:	4619      	mov	r1, r3
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f7ff fd1b 	bl	8011354 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801191e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011922:	210d      	movs	r1, #13
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f000 f807 	bl	8011938 <SDMMC_GetCmdResp1>
 801192a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801192c:	69fb      	ldr	r3, [r7, #28]
}
 801192e:	4618      	mov	r0, r3
 8011930:	3720      	adds	r7, #32
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}
	...

08011938 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b088      	sub	sp, #32
 801193c:	af00      	add	r7, sp, #0
 801193e:	60f8      	str	r0, [r7, #12]
 8011940:	460b      	mov	r3, r1
 8011942:	607a      	str	r2, [r7, #4]
 8011944:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8011946:	4b70      	ldr	r3, [pc, #448]	; (8011b08 <SDMMC_GetCmdResp1+0x1d0>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	4a70      	ldr	r2, [pc, #448]	; (8011b0c <SDMMC_GetCmdResp1+0x1d4>)
 801194c:	fba2 2303 	umull	r2, r3, r2, r3
 8011950:	0a5a      	lsrs	r2, r3, #9
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	fb02 f303 	mul.w	r3, r2, r3
 8011958:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801195a:	69fb      	ldr	r3, [r7, #28]
 801195c:	1e5a      	subs	r2, r3, #1
 801195e:	61fa      	str	r2, [r7, #28]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d102      	bne.n	801196a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011964:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011968:	e0c9      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801196e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8011970:	69ba      	ldr	r2, [r7, #24]
 8011972:	4b67      	ldr	r3, [pc, #412]	; (8011b10 <SDMMC_GetCmdResp1+0x1d8>)
 8011974:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011976:	2b00      	cmp	r3, #0
 8011978:	d0ef      	beq.n	801195a <SDMMC_GetCmdResp1+0x22>
 801197a:	69bb      	ldr	r3, [r7, #24]
 801197c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011980:	2b00      	cmp	r3, #0
 8011982:	d1ea      	bne.n	801195a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011988:	f003 0304 	and.w	r3, r3, #4
 801198c:	2b00      	cmp	r3, #0
 801198e:	d004      	beq.n	801199a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	2204      	movs	r2, #4
 8011994:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011996:	2304      	movs	r3, #4
 8011998:	e0b1      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801199e:	f003 0301 	and.w	r3, r3, #1
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d004      	beq.n	80119b0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	2201      	movs	r2, #1
 80119aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80119ac:	2301      	movs	r3, #1
 80119ae:	e0a6      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	4a58      	ldr	r2, [pc, #352]	; (8011b14 <SDMMC_GetCmdResp1+0x1dc>)
 80119b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80119b6:	68f8      	ldr	r0, [r7, #12]
 80119b8:	f7ff fcf6 	bl	80113a8 <SDMMC_GetCommandResponse>
 80119bc:	4603      	mov	r3, r0
 80119be:	461a      	mov	r2, r3
 80119c0:	7afb      	ldrb	r3, [r7, #11]
 80119c2:	4293      	cmp	r3, r2
 80119c4:	d001      	beq.n	80119ca <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80119c6:	2301      	movs	r3, #1
 80119c8:	e099      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80119ca:	2100      	movs	r1, #0
 80119cc:	68f8      	ldr	r0, [r7, #12]
 80119ce:	f7ff fcf8 	bl	80113c2 <SDMMC_GetResponse>
 80119d2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80119d4:	697a      	ldr	r2, [r7, #20]
 80119d6:	4b50      	ldr	r3, [pc, #320]	; (8011b18 <SDMMC_GetCmdResp1+0x1e0>)
 80119d8:	4013      	ands	r3, r2
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d101      	bne.n	80119e2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80119de:	2300      	movs	r3, #0
 80119e0:	e08d      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	da02      	bge.n	80119ee <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80119e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80119ec:	e087      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d001      	beq.n	80119fc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80119f8:	2340      	movs	r3, #64	; 0x40
 80119fa:	e080      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d001      	beq.n	8011a0a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011a06:	2380      	movs	r3, #128	; 0x80
 8011a08:	e079      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d002      	beq.n	8011a1a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a18:	e071      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d002      	beq.n	8011a2a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a28:	e069      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d002      	beq.n	8011a3a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a38:	e061      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d002      	beq.n	8011a4a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011a44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011a48:	e059      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d002      	beq.n	8011a5a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a58:	e051      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d002      	beq.n	8011a6a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011a68:	e049      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d002      	beq.n	8011a7a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011a74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011a78:	e041      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d002      	beq.n	8011a8a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011a84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a88:	e039      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011a8a:	697b      	ldr	r3, [r7, #20]
 8011a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d002      	beq.n	8011a9a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011a98:	e031      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011a9a:	697b      	ldr	r3, [r7, #20]
 8011a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d002      	beq.n	8011aaa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011aa4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011aa8:	e029      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d002      	beq.n	8011aba <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011ab4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011ab8:	e021      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d002      	beq.n	8011aca <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011ac4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011ac8:	e019      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011aca:	697b      	ldr	r3, [r7, #20]
 8011acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d002      	beq.n	8011ada <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011ad4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011ad8:	e011      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d002      	beq.n	8011aea <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011ae4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011ae8:	e009      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	f003 0308 	and.w	r3, r3, #8
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d002      	beq.n	8011afa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011af4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011af8:	e001      	b.n	8011afe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011afa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3720      	adds	r7, #32
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	2400000c 	.word	0x2400000c
 8011b0c:	10624dd3 	.word	0x10624dd3
 8011b10:	00200045 	.word	0x00200045
 8011b14:	002000c5 	.word	0x002000c5
 8011b18:	fdffe008 	.word	0xfdffe008

08011b1c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b085      	sub	sp, #20
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011b24:	4b1f      	ldr	r3, [pc, #124]	; (8011ba4 <SDMMC_GetCmdResp2+0x88>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	4a1f      	ldr	r2, [pc, #124]	; (8011ba8 <SDMMC_GetCmdResp2+0x8c>)
 8011b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8011b2e:	0a5b      	lsrs	r3, r3, #9
 8011b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b34:	fb02 f303 	mul.w	r3, r2, r3
 8011b38:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	1e5a      	subs	r2, r3, #1
 8011b3e:	60fa      	str	r2, [r7, #12]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d102      	bne.n	8011b4a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011b44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b48:	e026      	b.n	8011b98 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b4e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d0ef      	beq.n	8011b3a <SDMMC_GetCmdResp2+0x1e>
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d1ea      	bne.n	8011b3a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b68:	f003 0304 	and.w	r3, r3, #4
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d004      	beq.n	8011b7a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2204      	movs	r2, #4
 8011b74:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011b76:	2304      	movs	r3, #4
 8011b78:	e00e      	b.n	8011b98 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b7e:	f003 0301 	and.w	r3, r3, #1
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d004      	beq.n	8011b90 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2201      	movs	r2, #1
 8011b8a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	e003      	b.n	8011b98 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	4a06      	ldr	r2, [pc, #24]	; (8011bac <SDMMC_GetCmdResp2+0x90>)
 8011b94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011b96:	2300      	movs	r3, #0
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3714      	adds	r7, #20
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba2:	4770      	bx	lr
 8011ba4:	2400000c 	.word	0x2400000c
 8011ba8:	10624dd3 	.word	0x10624dd3
 8011bac:	002000c5 	.word	0x002000c5

08011bb0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	b085      	sub	sp, #20
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011bb8:	4b1a      	ldr	r3, [pc, #104]	; (8011c24 <SDMMC_GetCmdResp3+0x74>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	4a1a      	ldr	r2, [pc, #104]	; (8011c28 <SDMMC_GetCmdResp3+0x78>)
 8011bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8011bc2:	0a5b      	lsrs	r3, r3, #9
 8011bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8011bc8:	fb02 f303 	mul.w	r3, r2, r3
 8011bcc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	1e5a      	subs	r2, r3, #1
 8011bd2:	60fa      	str	r2, [r7, #12]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d102      	bne.n	8011bde <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011bd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011bdc:	e01b      	b.n	8011c16 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011be2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011be4:	68bb      	ldr	r3, [r7, #8]
 8011be6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d0ef      	beq.n	8011bce <SDMMC_GetCmdResp3+0x1e>
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d1ea      	bne.n	8011bce <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bfc:	f003 0304 	and.w	r3, r3, #4
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d004      	beq.n	8011c0e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2204      	movs	r2, #4
 8011c08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011c0a:	2304      	movs	r3, #4
 8011c0c:	e003      	b.n	8011c16 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	4a06      	ldr	r2, [pc, #24]	; (8011c2c <SDMMC_GetCmdResp3+0x7c>)
 8011c12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011c14:	2300      	movs	r3, #0
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3714      	adds	r7, #20
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c20:	4770      	bx	lr
 8011c22:	bf00      	nop
 8011c24:	2400000c 	.word	0x2400000c
 8011c28:	10624dd3 	.word	0x10624dd3
 8011c2c:	002000c5 	.word	0x002000c5

08011c30 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b088      	sub	sp, #32
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	60f8      	str	r0, [r7, #12]
 8011c38:	460b      	mov	r3, r1
 8011c3a:	607a      	str	r2, [r7, #4]
 8011c3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011c3e:	4b35      	ldr	r3, [pc, #212]	; (8011d14 <SDMMC_GetCmdResp6+0xe4>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	4a35      	ldr	r2, [pc, #212]	; (8011d18 <SDMMC_GetCmdResp6+0xe8>)
 8011c44:	fba2 2303 	umull	r2, r3, r2, r3
 8011c48:	0a5b      	lsrs	r3, r3, #9
 8011c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c4e:	fb02 f303 	mul.w	r3, r2, r3
 8011c52:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011c54:	69fb      	ldr	r3, [r7, #28]
 8011c56:	1e5a      	subs	r2, r3, #1
 8011c58:	61fa      	str	r2, [r7, #28]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d102      	bne.n	8011c64 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011c5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011c62:	e052      	b.n	8011d0a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c68:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011c6a:	69bb      	ldr	r3, [r7, #24]
 8011c6c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d0ef      	beq.n	8011c54 <SDMMC_GetCmdResp6+0x24>
 8011c74:	69bb      	ldr	r3, [r7, #24]
 8011c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d1ea      	bne.n	8011c54 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c82:	f003 0304 	and.w	r3, r3, #4
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d004      	beq.n	8011c94 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	2204      	movs	r2, #4
 8011c8e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011c90:	2304      	movs	r3, #4
 8011c92:	e03a      	b.n	8011d0a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c98:	f003 0301 	and.w	r3, r3, #1
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d004      	beq.n	8011caa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	2201      	movs	r2, #1
 8011ca4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	e02f      	b.n	8011d0a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011caa:	68f8      	ldr	r0, [r7, #12]
 8011cac:	f7ff fb7c 	bl	80113a8 <SDMMC_GetCommandResponse>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	7afb      	ldrb	r3, [r7, #11]
 8011cb6:	4293      	cmp	r3, r2
 8011cb8:	d001      	beq.n	8011cbe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011cba:	2301      	movs	r3, #1
 8011cbc:	e025      	b.n	8011d0a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	4a16      	ldr	r2, [pc, #88]	; (8011d1c <SDMMC_GetCmdResp6+0xec>)
 8011cc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011cc4:	2100      	movs	r1, #0
 8011cc6:	68f8      	ldr	r0, [r7, #12]
 8011cc8:	f7ff fb7b 	bl	80113c2 <SDMMC_GetResponse>
 8011ccc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8011cce:	697b      	ldr	r3, [r7, #20]
 8011cd0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d106      	bne.n	8011ce6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	0c1b      	lsrs	r3, r3, #16
 8011cdc:	b29a      	uxth	r2, r3
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	e011      	b.n	8011d0a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d002      	beq.n	8011cf6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011cf4:	e009      	b.n	8011d0a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d002      	beq.n	8011d06 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d04:	e001      	b.n	8011d0a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3720      	adds	r7, #32
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	2400000c 	.word	0x2400000c
 8011d18:	10624dd3 	.word	0x10624dd3
 8011d1c:	002000c5 	.word	0x002000c5

08011d20 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011d20:	b480      	push	{r7}
 8011d22:	b085      	sub	sp, #20
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011d28:	4b22      	ldr	r3, [pc, #136]	; (8011db4 <SDMMC_GetCmdResp7+0x94>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	4a22      	ldr	r2, [pc, #136]	; (8011db8 <SDMMC_GetCmdResp7+0x98>)
 8011d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8011d32:	0a5b      	lsrs	r3, r3, #9
 8011d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d38:	fb02 f303 	mul.w	r3, r2, r3
 8011d3c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	1e5a      	subs	r2, r3, #1
 8011d42:	60fa      	str	r2, [r7, #12]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d102      	bne.n	8011d4e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011d48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011d4c:	e02c      	b.n	8011da8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d52:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d0ef      	beq.n	8011d3e <SDMMC_GetCmdResp7+0x1e>
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d1ea      	bne.n	8011d3e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d6c:	f003 0304 	and.w	r3, r3, #4
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d004      	beq.n	8011d7e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2204      	movs	r2, #4
 8011d78:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011d7a:	2304      	movs	r3, #4
 8011d7c:	e014      	b.n	8011da8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d82:	f003 0301 	and.w	r3, r3, #1
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d004      	beq.n	8011d94 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2201      	movs	r2, #1
 8011d8e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011d90:	2301      	movs	r3, #1
 8011d92:	e009      	b.n	8011da8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d002      	beq.n	8011da6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2240      	movs	r2, #64	; 0x40
 8011da4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011da6:	2300      	movs	r3, #0

}
 8011da8:	4618      	mov	r0, r3
 8011daa:	3714      	adds	r7, #20
 8011dac:	46bd      	mov	sp, r7
 8011dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db2:	4770      	bx	lr
 8011db4:	2400000c 	.word	0x2400000c
 8011db8:	10624dd3 	.word	0x10624dd3

08011dbc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011dbc:	b480      	push	{r7}
 8011dbe:	b085      	sub	sp, #20
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011dc4:	4b11      	ldr	r3, [pc, #68]	; (8011e0c <SDMMC_GetCmdError+0x50>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	4a11      	ldr	r2, [pc, #68]	; (8011e10 <SDMMC_GetCmdError+0x54>)
 8011dca:	fba2 2303 	umull	r2, r3, r2, r3
 8011dce:	0a5b      	lsrs	r3, r3, #9
 8011dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011dd4:	fb02 f303 	mul.w	r3, r2, r3
 8011dd8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	1e5a      	subs	r2, r3, #1
 8011dde:	60fa      	str	r2, [r7, #12]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d102      	bne.n	8011dea <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011de4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011de8:	e009      	b.n	8011dfe <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d0f1      	beq.n	8011dda <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	4a06      	ldr	r2, [pc, #24]	; (8011e14 <SDMMC_GetCmdError+0x58>)
 8011dfa:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011dfc:	2300      	movs	r3, #0
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3714      	adds	r7, #20
 8011e02:	46bd      	mov	sp, r7
 8011e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e08:	4770      	bx	lr
 8011e0a:	bf00      	nop
 8011e0c:	2400000c 	.word	0x2400000c
 8011e10:	10624dd3 	.word	0x10624dd3
 8011e14:	002000c5 	.word	0x002000c5

08011e18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011e1c:	4904      	ldr	r1, [pc, #16]	; (8011e30 <MX_FATFS_Init+0x18>)
 8011e1e:	4805      	ldr	r0, [pc, #20]	; (8011e34 <MX_FATFS_Init+0x1c>)
 8011e20:	f002 fd56 	bl	80148d0 <FATFS_LinkDriver>
 8011e24:	4603      	mov	r3, r0
 8011e26:	461a      	mov	r2, r3
 8011e28:	4b03      	ldr	r3, [pc, #12]	; (8011e38 <MX_FATFS_Init+0x20>)
 8011e2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011e2c:	bf00      	nop
 8011e2e:	bd80      	pop	{r7, pc}
 8011e30:	24008984 	.word	0x24008984
 8011e34:	08017d48 	.word	0x08017d48
 8011e38:	24008980 	.word	0x24008980

08011e3c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011e40:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	46bd      	mov	sp, r7
 8011e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4a:	4770      	bx	lr

08011e4c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b082      	sub	sp, #8
 8011e50:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011e52:	2300      	movs	r3, #0
 8011e54:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011e56:	f000 f885 	bl	8011f64 <BSP_SD_IsDetected>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	d001      	beq.n	8011e64 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011e60:	2302      	movs	r3, #2
 8011e62:	e012      	b.n	8011e8a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011e64:	480b      	ldr	r0, [pc, #44]	; (8011e94 <BSP_SD_Init+0x48>)
 8011e66:	f7f8 fa21 	bl	800a2ac <HAL_SD_Init>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011e6e:	79fb      	ldrb	r3, [r7, #7]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d109      	bne.n	8011e88 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011e74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011e78:	4806      	ldr	r0, [pc, #24]	; (8011e94 <BSP_SD_Init+0x48>)
 8011e7a:	f7f9 f8d1 	bl	800b020 <HAL_SD_ConfigWideBusOperation>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d001      	beq.n	8011e88 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011e84:	2301      	movs	r3, #1
 8011e86:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011e88:	79fb      	ldrb	r3, [r7, #7]
}
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	3708      	adds	r7, #8
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}
 8011e92:	bf00      	nop
 8011e94:	24008214 	.word	0x24008214

08011e98 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b086      	sub	sp, #24
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	60f8      	str	r0, [r7, #12]
 8011ea0:	60b9      	str	r1, [r7, #8]
 8011ea2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	68ba      	ldr	r2, [r7, #8]
 8011eac:	68f9      	ldr	r1, [r7, #12]
 8011eae:	4806      	ldr	r0, [pc, #24]	; (8011ec8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011eb0:	f7f8 fb16 	bl	800a4e0 <HAL_SD_ReadBlocks_DMA>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d001      	beq.n	8011ebe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011eba:	2301      	movs	r3, #1
 8011ebc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3718      	adds	r7, #24
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}
 8011ec8:	24008214 	.word	0x24008214

08011ecc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b086      	sub	sp, #24
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	60f8      	str	r0, [r7, #12]
 8011ed4:	60b9      	str	r1, [r7, #8]
 8011ed6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	68ba      	ldr	r2, [r7, #8]
 8011ee0:	68f9      	ldr	r1, [r7, #12]
 8011ee2:	4806      	ldr	r0, [pc, #24]	; (8011efc <BSP_SD_WriteBlocks_DMA+0x30>)
 8011ee4:	f7f8 fba4 	bl	800a630 <HAL_SD_WriteBlocks_DMA>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d001      	beq.n	8011ef2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011eee:	2301      	movs	r3, #1
 8011ef0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3718      	adds	r7, #24
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}
 8011efc:	24008214 	.word	0x24008214

08011f00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011f04:	4805      	ldr	r0, [pc, #20]	; (8011f1c <BSP_SD_GetCardState+0x1c>)
 8011f06:	f7f9 f99d 	bl	800b244 <HAL_SD_GetCardState>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2b04      	cmp	r3, #4
 8011f0e:	bf14      	ite	ne
 8011f10:	2301      	movne	r3, #1
 8011f12:	2300      	moveq	r3, #0
 8011f14:	b2db      	uxtb	r3, r3
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	bd80      	pop	{r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	24008214 	.word	0x24008214

08011f20 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011f28:	6879      	ldr	r1, [r7, #4]
 8011f2a:	4803      	ldr	r0, [pc, #12]	; (8011f38 <BSP_SD_GetCardInfo+0x18>)
 8011f2c:	f7f9 f84c 	bl	800afc8 <HAL_SD_GetCardInfo>
}
 8011f30:	bf00      	nop
 8011f32:	3708      	adds	r7, #8
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}
 8011f38:	24008214 	.word	0x24008214

08011f3c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b082      	sub	sp, #8
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011f44:	f000 f984 	bl	8012250 <BSP_SD_WriteCpltCallback>
}
 8011f48:	bf00      	nop
 8011f4a:	3708      	adds	r7, #8
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}

08011f50 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011f58:	f000 f986 	bl	8012268 <BSP_SD_ReadCpltCallback>
}
 8011f5c:	bf00      	nop
 8011f5e:	3708      	adds	r7, #8
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}

08011f64 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011f64:	b480      	push	{r7}
 8011f66:	b083      	sub	sp, #12
 8011f68:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8011f6e:	79fb      	ldrb	r3, [r7, #7]
 8011f70:	b2db      	uxtb	r3, r3
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	370c      	adds	r7, #12
 8011f76:	46bd      	mov	sp, r7
 8011f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7c:	4770      	bx	lr

08011f7e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011f7e:	b580      	push	{r7, lr}
 8011f80:	b084      	sub	sp, #16
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011f86:	f7f1 febb 	bl	8003d00 <HAL_GetTick>
 8011f8a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011f8c:	e006      	b.n	8011f9c <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011f8e:	f7ff ffb7 	bl	8011f00 <BSP_SD_GetCardState>
 8011f92:	4603      	mov	r3, r0
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d101      	bne.n	8011f9c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	e009      	b.n	8011fb0 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011f9c:	f7f1 feb0 	bl	8003d00 <HAL_GetTick>
 8011fa0:	4602      	mov	r2, r0
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	1ad3      	subs	r3, r2, r3
 8011fa6:	687a      	ldr	r2, [r7, #4]
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d8f0      	bhi.n	8011f8e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011fac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	3710      	adds	r7, #16
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}

08011fb8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b082      	sub	sp, #8
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011fc2:	4b0b      	ldr	r3, [pc, #44]	; (8011ff0 <SD_CheckStatus+0x38>)
 8011fc4:	2201      	movs	r2, #1
 8011fc6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011fc8:	f7ff ff9a 	bl	8011f00 <BSP_SD_GetCardState>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d107      	bne.n	8011fe2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011fd2:	4b07      	ldr	r3, [pc, #28]	; (8011ff0 <SD_CheckStatus+0x38>)
 8011fd4:	781b      	ldrb	r3, [r3, #0]
 8011fd6:	b2db      	uxtb	r3, r3
 8011fd8:	f023 0301 	bic.w	r3, r3, #1
 8011fdc:	b2da      	uxtb	r2, r3
 8011fde:	4b04      	ldr	r3, [pc, #16]	; (8011ff0 <SD_CheckStatus+0x38>)
 8011fe0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011fe2:	4b03      	ldr	r3, [pc, #12]	; (8011ff0 <SD_CheckStatus+0x38>)
 8011fe4:	781b      	ldrb	r3, [r3, #0]
 8011fe6:	b2db      	uxtb	r3, r3
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3708      	adds	r7, #8
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}
 8011ff0:	24000019 	.word	0x24000019

08011ff4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b082      	sub	sp, #8
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011ffe:	f7ff ff25 	bl	8011e4c <BSP_SD_Init>
 8012002:	4603      	mov	r3, r0
 8012004:	2b00      	cmp	r3, #0
 8012006:	d107      	bne.n	8012018 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8012008:	79fb      	ldrb	r3, [r7, #7]
 801200a:	4618      	mov	r0, r3
 801200c:	f7ff ffd4 	bl	8011fb8 <SD_CheckStatus>
 8012010:	4603      	mov	r3, r0
 8012012:	461a      	mov	r2, r3
 8012014:	4b04      	ldr	r3, [pc, #16]	; (8012028 <SD_initialize+0x34>)
 8012016:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012018:	4b03      	ldr	r3, [pc, #12]	; (8012028 <SD_initialize+0x34>)
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	b2db      	uxtb	r3, r3
}
 801201e:	4618      	mov	r0, r3
 8012020:	3708      	adds	r7, #8
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}
 8012026:	bf00      	nop
 8012028:	24000019 	.word	0x24000019

0801202c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b082      	sub	sp, #8
 8012030:	af00      	add	r7, sp, #0
 8012032:	4603      	mov	r3, r0
 8012034:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012036:	79fb      	ldrb	r3, [r7, #7]
 8012038:	4618      	mov	r0, r3
 801203a:	f7ff ffbd 	bl	8011fb8 <SD_CheckStatus>
 801203e:	4603      	mov	r3, r0
}
 8012040:	4618      	mov	r0, r3
 8012042:	3708      	adds	r7, #8
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}

08012048 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b086      	sub	sp, #24
 801204c:	af00      	add	r7, sp, #0
 801204e:	60b9      	str	r1, [r7, #8]
 8012050:	607a      	str	r2, [r7, #4]
 8012052:	603b      	str	r3, [r7, #0]
 8012054:	4603      	mov	r3, r0
 8012056:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012058:	2301      	movs	r3, #1
 801205a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801205c:	f247 5030 	movw	r0, #30000	; 0x7530
 8012060:	f7ff ff8d 	bl	8011f7e <SD_CheckStatusWithTimeout>
 8012064:	4603      	mov	r3, r0
 8012066:	2b00      	cmp	r3, #0
 8012068:	da01      	bge.n	801206e <SD_read+0x26>
  {
    return res;
 801206a:	7dfb      	ldrb	r3, [r7, #23]
 801206c:	e03b      	b.n	80120e6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801206e:	683a      	ldr	r2, [r7, #0]
 8012070:	6879      	ldr	r1, [r7, #4]
 8012072:	68b8      	ldr	r0, [r7, #8]
 8012074:	f7ff ff10 	bl	8011e98 <BSP_SD_ReadBlocks_DMA>
 8012078:	4603      	mov	r3, r0
 801207a:	2b00      	cmp	r3, #0
 801207c:	d132      	bne.n	80120e4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801207e:	4b1c      	ldr	r3, [pc, #112]	; (80120f0 <SD_read+0xa8>)
 8012080:	2200      	movs	r2, #0
 8012082:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8012084:	f7f1 fe3c 	bl	8003d00 <HAL_GetTick>
 8012088:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801208a:	bf00      	nop
 801208c:	4b18      	ldr	r3, [pc, #96]	; (80120f0 <SD_read+0xa8>)
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d108      	bne.n	80120a6 <SD_read+0x5e>
 8012094:	f7f1 fe34 	bl	8003d00 <HAL_GetTick>
 8012098:	4602      	mov	r2, r0
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	1ad3      	subs	r3, r2, r3
 801209e:	f247 522f 	movw	r2, #29999	; 0x752f
 80120a2:	4293      	cmp	r3, r2
 80120a4:	d9f2      	bls.n	801208c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80120a6:	4b12      	ldr	r3, [pc, #72]	; (80120f0 <SD_read+0xa8>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d102      	bne.n	80120b4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80120ae:	2301      	movs	r3, #1
 80120b0:	75fb      	strb	r3, [r7, #23]
 80120b2:	e017      	b.n	80120e4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80120b4:	4b0e      	ldr	r3, [pc, #56]	; (80120f0 <SD_read+0xa8>)
 80120b6:	2200      	movs	r2, #0
 80120b8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80120ba:	f7f1 fe21 	bl	8003d00 <HAL_GetTick>
 80120be:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80120c0:	e007      	b.n	80120d2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80120c2:	f7ff ff1d 	bl	8011f00 <BSP_SD_GetCardState>
 80120c6:	4603      	mov	r3, r0
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d102      	bne.n	80120d2 <SD_read+0x8a>
          {
            res = RES_OK;
 80120cc:	2300      	movs	r3, #0
 80120ce:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80120d0:	e008      	b.n	80120e4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80120d2:	f7f1 fe15 	bl	8003d00 <HAL_GetTick>
 80120d6:	4602      	mov	r2, r0
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	1ad3      	subs	r3, r2, r3
 80120dc:	f247 522f 	movw	r2, #29999	; 0x752f
 80120e0:	4293      	cmp	r3, r2
 80120e2:	d9ee      	bls.n	80120c2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80120e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	3718      	adds	r7, #24
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}
 80120ee:	bf00      	nop
 80120f0:	24008dec 	.word	0x24008dec

080120f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b086      	sub	sp, #24
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	60b9      	str	r1, [r7, #8]
 80120fc:	607a      	str	r2, [r7, #4]
 80120fe:	603b      	str	r3, [r7, #0]
 8012100:	4603      	mov	r3, r0
 8012102:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012104:	2301      	movs	r3, #1
 8012106:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8012108:	4b24      	ldr	r3, [pc, #144]	; (801219c <SD_write+0xa8>)
 801210a:	2200      	movs	r2, #0
 801210c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801210e:	f247 5030 	movw	r0, #30000	; 0x7530
 8012112:	f7ff ff34 	bl	8011f7e <SD_CheckStatusWithTimeout>
 8012116:	4603      	mov	r3, r0
 8012118:	2b00      	cmp	r3, #0
 801211a:	da01      	bge.n	8012120 <SD_write+0x2c>
  {
    return res;
 801211c:	7dfb      	ldrb	r3, [r7, #23]
 801211e:	e038      	b.n	8012192 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012120:	683a      	ldr	r2, [r7, #0]
 8012122:	6879      	ldr	r1, [r7, #4]
 8012124:	68b8      	ldr	r0, [r7, #8]
 8012126:	f7ff fed1 	bl	8011ecc <BSP_SD_WriteBlocks_DMA>
 801212a:	4603      	mov	r3, r0
 801212c:	2b00      	cmp	r3, #0
 801212e:	d12f      	bne.n	8012190 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8012130:	f7f1 fde6 	bl	8003d00 <HAL_GetTick>
 8012134:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012136:	bf00      	nop
 8012138:	4b18      	ldr	r3, [pc, #96]	; (801219c <SD_write+0xa8>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d108      	bne.n	8012152 <SD_write+0x5e>
 8012140:	f7f1 fdde 	bl	8003d00 <HAL_GetTick>
 8012144:	4602      	mov	r2, r0
 8012146:	693b      	ldr	r3, [r7, #16]
 8012148:	1ad3      	subs	r3, r2, r3
 801214a:	f247 522f 	movw	r2, #29999	; 0x752f
 801214e:	4293      	cmp	r3, r2
 8012150:	d9f2      	bls.n	8012138 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8012152:	4b12      	ldr	r3, [pc, #72]	; (801219c <SD_write+0xa8>)
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d102      	bne.n	8012160 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801215a:	2301      	movs	r3, #1
 801215c:	75fb      	strb	r3, [r7, #23]
 801215e:	e017      	b.n	8012190 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8012160:	4b0e      	ldr	r3, [pc, #56]	; (801219c <SD_write+0xa8>)
 8012162:	2200      	movs	r2, #0
 8012164:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012166:	f7f1 fdcb 	bl	8003d00 <HAL_GetTick>
 801216a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801216c:	e007      	b.n	801217e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801216e:	f7ff fec7 	bl	8011f00 <BSP_SD_GetCardState>
 8012172:	4603      	mov	r3, r0
 8012174:	2b00      	cmp	r3, #0
 8012176:	d102      	bne.n	801217e <SD_write+0x8a>
          {
            res = RES_OK;
 8012178:	2300      	movs	r3, #0
 801217a:	75fb      	strb	r3, [r7, #23]
            break;
 801217c:	e008      	b.n	8012190 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801217e:	f7f1 fdbf 	bl	8003d00 <HAL_GetTick>
 8012182:	4602      	mov	r2, r0
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	1ad3      	subs	r3, r2, r3
 8012188:	f247 522f 	movw	r2, #29999	; 0x752f
 801218c:	4293      	cmp	r3, r2
 801218e:	d9ee      	bls.n	801216e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8012190:	7dfb      	ldrb	r3, [r7, #23]
}
 8012192:	4618      	mov	r0, r3
 8012194:	3718      	adds	r7, #24
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}
 801219a:	bf00      	nop
 801219c:	24008de8 	.word	0x24008de8

080121a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b08c      	sub	sp, #48	; 0x30
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	4603      	mov	r3, r0
 80121a8:	603a      	str	r2, [r7, #0]
 80121aa:	71fb      	strb	r3, [r7, #7]
 80121ac:	460b      	mov	r3, r1
 80121ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80121b0:	2301      	movs	r3, #1
 80121b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80121b6:	4b25      	ldr	r3, [pc, #148]	; (801224c <SD_ioctl+0xac>)
 80121b8:	781b      	ldrb	r3, [r3, #0]
 80121ba:	b2db      	uxtb	r3, r3
 80121bc:	f003 0301 	and.w	r3, r3, #1
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d001      	beq.n	80121c8 <SD_ioctl+0x28>
 80121c4:	2303      	movs	r3, #3
 80121c6:	e03c      	b.n	8012242 <SD_ioctl+0xa2>

  switch (cmd)
 80121c8:	79bb      	ldrb	r3, [r7, #6]
 80121ca:	2b03      	cmp	r3, #3
 80121cc:	d834      	bhi.n	8012238 <SD_ioctl+0x98>
 80121ce:	a201      	add	r2, pc, #4	; (adr r2, 80121d4 <SD_ioctl+0x34>)
 80121d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121d4:	080121e5 	.word	0x080121e5
 80121d8:	080121ed 	.word	0x080121ed
 80121dc:	08012205 	.word	0x08012205
 80121e0:	0801221f 	.word	0x0801221f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80121e4:	2300      	movs	r3, #0
 80121e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80121ea:	e028      	b.n	801223e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80121ec:	f107 0308 	add.w	r3, r7, #8
 80121f0:	4618      	mov	r0, r3
 80121f2:	f7ff fe95 	bl	8011f20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80121f6:	6a3a      	ldr	r2, [r7, #32]
 80121f8:	683b      	ldr	r3, [r7, #0]
 80121fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80121fc:	2300      	movs	r3, #0
 80121fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012202:	e01c      	b.n	801223e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012204:	f107 0308 	add.w	r3, r7, #8
 8012208:	4618      	mov	r0, r3
 801220a:	f7ff fe89 	bl	8011f20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012210:	b29a      	uxth	r2, r3
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012216:	2300      	movs	r3, #0
 8012218:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801221c:	e00f      	b.n	801223e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801221e:	f107 0308 	add.w	r3, r7, #8
 8012222:	4618      	mov	r0, r3
 8012224:	f7ff fe7c 	bl	8011f20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222a:	0a5a      	lsrs	r2, r3, #9
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012230:	2300      	movs	r3, #0
 8012232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012236:	e002      	b.n	801223e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012238:	2304      	movs	r3, #4
 801223a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801223e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012242:	4618      	mov	r0, r3
 8012244:	3730      	adds	r7, #48	; 0x30
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}
 801224a:	bf00      	nop
 801224c:	24000019 	.word	0x24000019

08012250 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012250:	b480      	push	{r7}
 8012252:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8012254:	4b03      	ldr	r3, [pc, #12]	; (8012264 <BSP_SD_WriteCpltCallback+0x14>)
 8012256:	2201      	movs	r2, #1
 8012258:	601a      	str	r2, [r3, #0]
}
 801225a:	bf00      	nop
 801225c:	46bd      	mov	sp, r7
 801225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012262:	4770      	bx	lr
 8012264:	24008de8 	.word	0x24008de8

08012268 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012268:	b480      	push	{r7}
 801226a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801226c:	4b03      	ldr	r3, [pc, #12]	; (801227c <BSP_SD_ReadCpltCallback+0x14>)
 801226e:	2201      	movs	r2, #1
 8012270:	601a      	str	r2, [r3, #0]
}
 8012272:	bf00      	nop
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr
 801227c:	24008dec 	.word	0x24008dec

08012280 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b084      	sub	sp, #16
 8012284:	af00      	add	r7, sp, #0
 8012286:	4603      	mov	r3, r0
 8012288:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801228a:	79fb      	ldrb	r3, [r7, #7]
 801228c:	4a08      	ldr	r2, [pc, #32]	; (80122b0 <disk_status+0x30>)
 801228e:	009b      	lsls	r3, r3, #2
 8012290:	4413      	add	r3, r2
 8012292:	685b      	ldr	r3, [r3, #4]
 8012294:	685b      	ldr	r3, [r3, #4]
 8012296:	79fa      	ldrb	r2, [r7, #7]
 8012298:	4905      	ldr	r1, [pc, #20]	; (80122b0 <disk_status+0x30>)
 801229a:	440a      	add	r2, r1
 801229c:	7a12      	ldrb	r2, [r2, #8]
 801229e:	4610      	mov	r0, r2
 80122a0:	4798      	blx	r3
 80122a2:	4603      	mov	r3, r0
 80122a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80122a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3710      	adds	r7, #16
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}
 80122b0:	24008e18 	.word	0x24008e18

080122b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b084      	sub	sp, #16
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	4603      	mov	r3, r0
 80122bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80122be:	2300      	movs	r3, #0
 80122c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80122c2:	79fb      	ldrb	r3, [r7, #7]
 80122c4:	4a0d      	ldr	r2, [pc, #52]	; (80122fc <disk_initialize+0x48>)
 80122c6:	5cd3      	ldrb	r3, [r2, r3]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d111      	bne.n	80122f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80122cc:	79fb      	ldrb	r3, [r7, #7]
 80122ce:	4a0b      	ldr	r2, [pc, #44]	; (80122fc <disk_initialize+0x48>)
 80122d0:	2101      	movs	r1, #1
 80122d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80122d4:	79fb      	ldrb	r3, [r7, #7]
 80122d6:	4a09      	ldr	r2, [pc, #36]	; (80122fc <disk_initialize+0x48>)
 80122d8:	009b      	lsls	r3, r3, #2
 80122da:	4413      	add	r3, r2
 80122dc:	685b      	ldr	r3, [r3, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	79fa      	ldrb	r2, [r7, #7]
 80122e2:	4906      	ldr	r1, [pc, #24]	; (80122fc <disk_initialize+0x48>)
 80122e4:	440a      	add	r2, r1
 80122e6:	7a12      	ldrb	r2, [r2, #8]
 80122e8:	4610      	mov	r0, r2
 80122ea:	4798      	blx	r3
 80122ec:	4603      	mov	r3, r0
 80122ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80122f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3710      	adds	r7, #16
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}
 80122fa:	bf00      	nop
 80122fc:	24008e18 	.word	0x24008e18

08012300 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012300:	b590      	push	{r4, r7, lr}
 8012302:	b087      	sub	sp, #28
 8012304:	af00      	add	r7, sp, #0
 8012306:	60b9      	str	r1, [r7, #8]
 8012308:	607a      	str	r2, [r7, #4]
 801230a:	603b      	str	r3, [r7, #0]
 801230c:	4603      	mov	r3, r0
 801230e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012310:	7bfb      	ldrb	r3, [r7, #15]
 8012312:	4a0a      	ldr	r2, [pc, #40]	; (801233c <disk_read+0x3c>)
 8012314:	009b      	lsls	r3, r3, #2
 8012316:	4413      	add	r3, r2
 8012318:	685b      	ldr	r3, [r3, #4]
 801231a:	689c      	ldr	r4, [r3, #8]
 801231c:	7bfb      	ldrb	r3, [r7, #15]
 801231e:	4a07      	ldr	r2, [pc, #28]	; (801233c <disk_read+0x3c>)
 8012320:	4413      	add	r3, r2
 8012322:	7a18      	ldrb	r0, [r3, #8]
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	687a      	ldr	r2, [r7, #4]
 8012328:	68b9      	ldr	r1, [r7, #8]
 801232a:	47a0      	blx	r4
 801232c:	4603      	mov	r3, r0
 801232e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012330:	7dfb      	ldrb	r3, [r7, #23]
}
 8012332:	4618      	mov	r0, r3
 8012334:	371c      	adds	r7, #28
 8012336:	46bd      	mov	sp, r7
 8012338:	bd90      	pop	{r4, r7, pc}
 801233a:	bf00      	nop
 801233c:	24008e18 	.word	0x24008e18

08012340 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012340:	b590      	push	{r4, r7, lr}
 8012342:	b087      	sub	sp, #28
 8012344:	af00      	add	r7, sp, #0
 8012346:	60b9      	str	r1, [r7, #8]
 8012348:	607a      	str	r2, [r7, #4]
 801234a:	603b      	str	r3, [r7, #0]
 801234c:	4603      	mov	r3, r0
 801234e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012350:	7bfb      	ldrb	r3, [r7, #15]
 8012352:	4a0a      	ldr	r2, [pc, #40]	; (801237c <disk_write+0x3c>)
 8012354:	009b      	lsls	r3, r3, #2
 8012356:	4413      	add	r3, r2
 8012358:	685b      	ldr	r3, [r3, #4]
 801235a:	68dc      	ldr	r4, [r3, #12]
 801235c:	7bfb      	ldrb	r3, [r7, #15]
 801235e:	4a07      	ldr	r2, [pc, #28]	; (801237c <disk_write+0x3c>)
 8012360:	4413      	add	r3, r2
 8012362:	7a18      	ldrb	r0, [r3, #8]
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	687a      	ldr	r2, [r7, #4]
 8012368:	68b9      	ldr	r1, [r7, #8]
 801236a:	47a0      	blx	r4
 801236c:	4603      	mov	r3, r0
 801236e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012370:	7dfb      	ldrb	r3, [r7, #23]
}
 8012372:	4618      	mov	r0, r3
 8012374:	371c      	adds	r7, #28
 8012376:	46bd      	mov	sp, r7
 8012378:	bd90      	pop	{r4, r7, pc}
 801237a:	bf00      	nop
 801237c:	24008e18 	.word	0x24008e18

08012380 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b084      	sub	sp, #16
 8012384:	af00      	add	r7, sp, #0
 8012386:	4603      	mov	r3, r0
 8012388:	603a      	str	r2, [r7, #0]
 801238a:	71fb      	strb	r3, [r7, #7]
 801238c:	460b      	mov	r3, r1
 801238e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012390:	79fb      	ldrb	r3, [r7, #7]
 8012392:	4a09      	ldr	r2, [pc, #36]	; (80123b8 <disk_ioctl+0x38>)
 8012394:	009b      	lsls	r3, r3, #2
 8012396:	4413      	add	r3, r2
 8012398:	685b      	ldr	r3, [r3, #4]
 801239a:	691b      	ldr	r3, [r3, #16]
 801239c:	79fa      	ldrb	r2, [r7, #7]
 801239e:	4906      	ldr	r1, [pc, #24]	; (80123b8 <disk_ioctl+0x38>)
 80123a0:	440a      	add	r2, r1
 80123a2:	7a10      	ldrb	r0, [r2, #8]
 80123a4:	79b9      	ldrb	r1, [r7, #6]
 80123a6:	683a      	ldr	r2, [r7, #0]
 80123a8:	4798      	blx	r3
 80123aa:	4603      	mov	r3, r0
 80123ac:	73fb      	strb	r3, [r7, #15]
  return res;
 80123ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	3710      	adds	r7, #16
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}
 80123b8:	24008e18 	.word	0x24008e18

080123bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80123bc:	b480      	push	{r7}
 80123be:	b085      	sub	sp, #20
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	3301      	adds	r3, #1
 80123c8:	781b      	ldrb	r3, [r3, #0]
 80123ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80123cc:	89fb      	ldrh	r3, [r7, #14]
 80123ce:	021b      	lsls	r3, r3, #8
 80123d0:	b21a      	sxth	r2, r3
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	781b      	ldrb	r3, [r3, #0]
 80123d6:	b21b      	sxth	r3, r3
 80123d8:	4313      	orrs	r3, r2
 80123da:	b21b      	sxth	r3, r3
 80123dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80123de:	89fb      	ldrh	r3, [r7, #14]
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3714      	adds	r7, #20
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr

080123ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80123ec:	b480      	push	{r7}
 80123ee:	b085      	sub	sp, #20
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	3303      	adds	r3, #3
 80123f8:	781b      	ldrb	r3, [r3, #0]
 80123fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	021b      	lsls	r3, r3, #8
 8012400:	687a      	ldr	r2, [r7, #4]
 8012402:	3202      	adds	r2, #2
 8012404:	7812      	ldrb	r2, [r2, #0]
 8012406:	4313      	orrs	r3, r2
 8012408:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	021b      	lsls	r3, r3, #8
 801240e:	687a      	ldr	r2, [r7, #4]
 8012410:	3201      	adds	r2, #1
 8012412:	7812      	ldrb	r2, [r2, #0]
 8012414:	4313      	orrs	r3, r2
 8012416:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	021b      	lsls	r3, r3, #8
 801241c:	687a      	ldr	r2, [r7, #4]
 801241e:	7812      	ldrb	r2, [r2, #0]
 8012420:	4313      	orrs	r3, r2
 8012422:	60fb      	str	r3, [r7, #12]
	return rv;
 8012424:	68fb      	ldr	r3, [r7, #12]
}
 8012426:	4618      	mov	r0, r3
 8012428:	3714      	adds	r7, #20
 801242a:	46bd      	mov	sp, r7
 801242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012430:	4770      	bx	lr

08012432 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012432:	b480      	push	{r7}
 8012434:	b083      	sub	sp, #12
 8012436:	af00      	add	r7, sp, #0
 8012438:	6078      	str	r0, [r7, #4]
 801243a:	460b      	mov	r3, r1
 801243c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	1c5a      	adds	r2, r3, #1
 8012442:	607a      	str	r2, [r7, #4]
 8012444:	887a      	ldrh	r2, [r7, #2]
 8012446:	b2d2      	uxtb	r2, r2
 8012448:	701a      	strb	r2, [r3, #0]
 801244a:	887b      	ldrh	r3, [r7, #2]
 801244c:	0a1b      	lsrs	r3, r3, #8
 801244e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	1c5a      	adds	r2, r3, #1
 8012454:	607a      	str	r2, [r7, #4]
 8012456:	887a      	ldrh	r2, [r7, #2]
 8012458:	b2d2      	uxtb	r2, r2
 801245a:	701a      	strb	r2, [r3, #0]
}
 801245c:	bf00      	nop
 801245e:	370c      	adds	r7, #12
 8012460:	46bd      	mov	sp, r7
 8012462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012466:	4770      	bx	lr

08012468 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012468:	b480      	push	{r7}
 801246a:	b083      	sub	sp, #12
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
 8012470:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	1c5a      	adds	r2, r3, #1
 8012476:	607a      	str	r2, [r7, #4]
 8012478:	683a      	ldr	r2, [r7, #0]
 801247a:	b2d2      	uxtb	r2, r2
 801247c:	701a      	strb	r2, [r3, #0]
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	0a1b      	lsrs	r3, r3, #8
 8012482:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	1c5a      	adds	r2, r3, #1
 8012488:	607a      	str	r2, [r7, #4]
 801248a:	683a      	ldr	r2, [r7, #0]
 801248c:	b2d2      	uxtb	r2, r2
 801248e:	701a      	strb	r2, [r3, #0]
 8012490:	683b      	ldr	r3, [r7, #0]
 8012492:	0a1b      	lsrs	r3, r3, #8
 8012494:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	1c5a      	adds	r2, r3, #1
 801249a:	607a      	str	r2, [r7, #4]
 801249c:	683a      	ldr	r2, [r7, #0]
 801249e:	b2d2      	uxtb	r2, r2
 80124a0:	701a      	strb	r2, [r3, #0]
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	0a1b      	lsrs	r3, r3, #8
 80124a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	1c5a      	adds	r2, r3, #1
 80124ac:	607a      	str	r2, [r7, #4]
 80124ae:	683a      	ldr	r2, [r7, #0]
 80124b0:	b2d2      	uxtb	r2, r2
 80124b2:	701a      	strb	r2, [r3, #0]
}
 80124b4:	bf00      	nop
 80124b6:	370c      	adds	r7, #12
 80124b8:	46bd      	mov	sp, r7
 80124ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124be:	4770      	bx	lr

080124c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80124c0:	b480      	push	{r7}
 80124c2:	b087      	sub	sp, #28
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	60f8      	str	r0, [r7, #12]
 80124c8:	60b9      	str	r1, [r7, #8]
 80124ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d00d      	beq.n	80124f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80124da:	693a      	ldr	r2, [r7, #16]
 80124dc:	1c53      	adds	r3, r2, #1
 80124de:	613b      	str	r3, [r7, #16]
 80124e0:	697b      	ldr	r3, [r7, #20]
 80124e2:	1c59      	adds	r1, r3, #1
 80124e4:	6179      	str	r1, [r7, #20]
 80124e6:	7812      	ldrb	r2, [r2, #0]
 80124e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	3b01      	subs	r3, #1
 80124ee:	607b      	str	r3, [r7, #4]
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d1f1      	bne.n	80124da <mem_cpy+0x1a>
	}
}
 80124f6:	bf00      	nop
 80124f8:	371c      	adds	r7, #28
 80124fa:	46bd      	mov	sp, r7
 80124fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012500:	4770      	bx	lr

08012502 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012502:	b480      	push	{r7}
 8012504:	b087      	sub	sp, #28
 8012506:	af00      	add	r7, sp, #0
 8012508:	60f8      	str	r0, [r7, #12]
 801250a:	60b9      	str	r1, [r7, #8]
 801250c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	1c5a      	adds	r2, r3, #1
 8012516:	617a      	str	r2, [r7, #20]
 8012518:	68ba      	ldr	r2, [r7, #8]
 801251a:	b2d2      	uxtb	r2, r2
 801251c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	3b01      	subs	r3, #1
 8012522:	607b      	str	r3, [r7, #4]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d1f3      	bne.n	8012512 <mem_set+0x10>
}
 801252a:	bf00      	nop
 801252c:	bf00      	nop
 801252e:	371c      	adds	r7, #28
 8012530:	46bd      	mov	sp, r7
 8012532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012536:	4770      	bx	lr

08012538 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012538:	b480      	push	{r7}
 801253a:	b089      	sub	sp, #36	; 0x24
 801253c:	af00      	add	r7, sp, #0
 801253e:	60f8      	str	r0, [r7, #12]
 8012540:	60b9      	str	r1, [r7, #8]
 8012542:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	61fb      	str	r3, [r7, #28]
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801254c:	2300      	movs	r3, #0
 801254e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012550:	69fb      	ldr	r3, [r7, #28]
 8012552:	1c5a      	adds	r2, r3, #1
 8012554:	61fa      	str	r2, [r7, #28]
 8012556:	781b      	ldrb	r3, [r3, #0]
 8012558:	4619      	mov	r1, r3
 801255a:	69bb      	ldr	r3, [r7, #24]
 801255c:	1c5a      	adds	r2, r3, #1
 801255e:	61ba      	str	r2, [r7, #24]
 8012560:	781b      	ldrb	r3, [r3, #0]
 8012562:	1acb      	subs	r3, r1, r3
 8012564:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	3b01      	subs	r3, #1
 801256a:	607b      	str	r3, [r7, #4]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d002      	beq.n	8012578 <mem_cmp+0x40>
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d0eb      	beq.n	8012550 <mem_cmp+0x18>

	return r;
 8012578:	697b      	ldr	r3, [r7, #20]
}
 801257a:	4618      	mov	r0, r3
 801257c:	3724      	adds	r7, #36	; 0x24
 801257e:	46bd      	mov	sp, r7
 8012580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012584:	4770      	bx	lr

08012586 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012586:	b480      	push	{r7}
 8012588:	b083      	sub	sp, #12
 801258a:	af00      	add	r7, sp, #0
 801258c:	6078      	str	r0, [r7, #4]
 801258e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012590:	e002      	b.n	8012598 <chk_chr+0x12>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	3301      	adds	r3, #1
 8012596:	607b      	str	r3, [r7, #4]
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	781b      	ldrb	r3, [r3, #0]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d005      	beq.n	80125ac <chk_chr+0x26>
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	461a      	mov	r2, r3
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	4293      	cmp	r3, r2
 80125aa:	d1f2      	bne.n	8012592 <chk_chr+0xc>
	return *str;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	781b      	ldrb	r3, [r3, #0]
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	370c      	adds	r7, #12
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr

080125bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80125bc:	b480      	push	{r7}
 80125be:	b085      	sub	sp, #20
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80125c6:	2300      	movs	r3, #0
 80125c8:	60bb      	str	r3, [r7, #8]
 80125ca:	68bb      	ldr	r3, [r7, #8]
 80125cc:	60fb      	str	r3, [r7, #12]
 80125ce:	e029      	b.n	8012624 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80125d0:	4a27      	ldr	r2, [pc, #156]	; (8012670 <chk_lock+0xb4>)
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	011b      	lsls	r3, r3, #4
 80125d6:	4413      	add	r3, r2
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d01d      	beq.n	801261a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80125de:	4a24      	ldr	r2, [pc, #144]	; (8012670 <chk_lock+0xb4>)
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	011b      	lsls	r3, r3, #4
 80125e4:	4413      	add	r3, r2
 80125e6:	681a      	ldr	r2, [r3, #0]
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	429a      	cmp	r2, r3
 80125ee:	d116      	bne.n	801261e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80125f0:	4a1f      	ldr	r2, [pc, #124]	; (8012670 <chk_lock+0xb4>)
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	011b      	lsls	r3, r3, #4
 80125f6:	4413      	add	r3, r2
 80125f8:	3304      	adds	r3, #4
 80125fa:	681a      	ldr	r2, [r3, #0]
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012600:	429a      	cmp	r2, r3
 8012602:	d10c      	bne.n	801261e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012604:	4a1a      	ldr	r2, [pc, #104]	; (8012670 <chk_lock+0xb4>)
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	011b      	lsls	r3, r3, #4
 801260a:	4413      	add	r3, r2
 801260c:	3308      	adds	r3, #8
 801260e:	681a      	ldr	r2, [r3, #0]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012614:	429a      	cmp	r2, r3
 8012616:	d102      	bne.n	801261e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012618:	e007      	b.n	801262a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801261a:	2301      	movs	r3, #1
 801261c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	3301      	adds	r3, #1
 8012622:	60fb      	str	r3, [r7, #12]
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	2b01      	cmp	r3, #1
 8012628:	d9d2      	bls.n	80125d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	2b02      	cmp	r3, #2
 801262e:	d109      	bne.n	8012644 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d102      	bne.n	801263c <chk_lock+0x80>
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	2b02      	cmp	r3, #2
 801263a:	d101      	bne.n	8012640 <chk_lock+0x84>
 801263c:	2300      	movs	r3, #0
 801263e:	e010      	b.n	8012662 <chk_lock+0xa6>
 8012640:	2312      	movs	r3, #18
 8012642:	e00e      	b.n	8012662 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012644:	683b      	ldr	r3, [r7, #0]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d108      	bne.n	801265c <chk_lock+0xa0>
 801264a:	4a09      	ldr	r2, [pc, #36]	; (8012670 <chk_lock+0xb4>)
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	011b      	lsls	r3, r3, #4
 8012650:	4413      	add	r3, r2
 8012652:	330c      	adds	r3, #12
 8012654:	881b      	ldrh	r3, [r3, #0]
 8012656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801265a:	d101      	bne.n	8012660 <chk_lock+0xa4>
 801265c:	2310      	movs	r3, #16
 801265e:	e000      	b.n	8012662 <chk_lock+0xa6>
 8012660:	2300      	movs	r3, #0
}
 8012662:	4618      	mov	r0, r3
 8012664:	3714      	adds	r7, #20
 8012666:	46bd      	mov	sp, r7
 8012668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266c:	4770      	bx	lr
 801266e:	bf00      	nop
 8012670:	24008df8 	.word	0x24008df8

08012674 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012674:	b480      	push	{r7}
 8012676:	b083      	sub	sp, #12
 8012678:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801267a:	2300      	movs	r3, #0
 801267c:	607b      	str	r3, [r7, #4]
 801267e:	e002      	b.n	8012686 <enq_lock+0x12>
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	3301      	adds	r3, #1
 8012684:	607b      	str	r3, [r7, #4]
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2b01      	cmp	r3, #1
 801268a:	d806      	bhi.n	801269a <enq_lock+0x26>
 801268c:	4a09      	ldr	r2, [pc, #36]	; (80126b4 <enq_lock+0x40>)
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	011b      	lsls	r3, r3, #4
 8012692:	4413      	add	r3, r2
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d1f2      	bne.n	8012680 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2b02      	cmp	r3, #2
 801269e:	bf14      	ite	ne
 80126a0:	2301      	movne	r3, #1
 80126a2:	2300      	moveq	r3, #0
 80126a4:	b2db      	uxtb	r3, r3
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	370c      	adds	r7, #12
 80126aa:	46bd      	mov	sp, r7
 80126ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b0:	4770      	bx	lr
 80126b2:	bf00      	nop
 80126b4:	24008df8 	.word	0x24008df8

080126b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80126b8:	b480      	push	{r7}
 80126ba:	b085      	sub	sp, #20
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80126c2:	2300      	movs	r3, #0
 80126c4:	60fb      	str	r3, [r7, #12]
 80126c6:	e01f      	b.n	8012708 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80126c8:	4a41      	ldr	r2, [pc, #260]	; (80127d0 <inc_lock+0x118>)
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	011b      	lsls	r3, r3, #4
 80126ce:	4413      	add	r3, r2
 80126d0:	681a      	ldr	r2, [r3, #0]
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d113      	bne.n	8012702 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80126da:	4a3d      	ldr	r2, [pc, #244]	; (80127d0 <inc_lock+0x118>)
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	011b      	lsls	r3, r3, #4
 80126e0:	4413      	add	r3, r2
 80126e2:	3304      	adds	r3, #4
 80126e4:	681a      	ldr	r2, [r3, #0]
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d109      	bne.n	8012702 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80126ee:	4a38      	ldr	r2, [pc, #224]	; (80127d0 <inc_lock+0x118>)
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	011b      	lsls	r3, r3, #4
 80126f4:	4413      	add	r3, r2
 80126f6:	3308      	adds	r3, #8
 80126f8:	681a      	ldr	r2, [r3, #0]
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80126fe:	429a      	cmp	r2, r3
 8012700:	d006      	beq.n	8012710 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	3301      	adds	r3, #1
 8012706:	60fb      	str	r3, [r7, #12]
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	2b01      	cmp	r3, #1
 801270c:	d9dc      	bls.n	80126c8 <inc_lock+0x10>
 801270e:	e000      	b.n	8012712 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012710:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	2b02      	cmp	r3, #2
 8012716:	d132      	bne.n	801277e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012718:	2300      	movs	r3, #0
 801271a:	60fb      	str	r3, [r7, #12]
 801271c:	e002      	b.n	8012724 <inc_lock+0x6c>
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	3301      	adds	r3, #1
 8012722:	60fb      	str	r3, [r7, #12]
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	2b01      	cmp	r3, #1
 8012728:	d806      	bhi.n	8012738 <inc_lock+0x80>
 801272a:	4a29      	ldr	r2, [pc, #164]	; (80127d0 <inc_lock+0x118>)
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	011b      	lsls	r3, r3, #4
 8012730:	4413      	add	r3, r2
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d1f2      	bne.n	801271e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	2b02      	cmp	r3, #2
 801273c:	d101      	bne.n	8012742 <inc_lock+0x8a>
 801273e:	2300      	movs	r3, #0
 8012740:	e040      	b.n	80127c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681a      	ldr	r2, [r3, #0]
 8012746:	4922      	ldr	r1, [pc, #136]	; (80127d0 <inc_lock+0x118>)
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	011b      	lsls	r3, r3, #4
 801274c:	440b      	add	r3, r1
 801274e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	689a      	ldr	r2, [r3, #8]
 8012754:	491e      	ldr	r1, [pc, #120]	; (80127d0 <inc_lock+0x118>)
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	011b      	lsls	r3, r3, #4
 801275a:	440b      	add	r3, r1
 801275c:	3304      	adds	r3, #4
 801275e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	695a      	ldr	r2, [r3, #20]
 8012764:	491a      	ldr	r1, [pc, #104]	; (80127d0 <inc_lock+0x118>)
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	011b      	lsls	r3, r3, #4
 801276a:	440b      	add	r3, r1
 801276c:	3308      	adds	r3, #8
 801276e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012770:	4a17      	ldr	r2, [pc, #92]	; (80127d0 <inc_lock+0x118>)
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	011b      	lsls	r3, r3, #4
 8012776:	4413      	add	r3, r2
 8012778:	330c      	adds	r3, #12
 801277a:	2200      	movs	r2, #0
 801277c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d009      	beq.n	8012798 <inc_lock+0xe0>
 8012784:	4a12      	ldr	r2, [pc, #72]	; (80127d0 <inc_lock+0x118>)
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	011b      	lsls	r3, r3, #4
 801278a:	4413      	add	r3, r2
 801278c:	330c      	adds	r3, #12
 801278e:	881b      	ldrh	r3, [r3, #0]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d001      	beq.n	8012798 <inc_lock+0xe0>
 8012794:	2300      	movs	r3, #0
 8012796:	e015      	b.n	80127c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d108      	bne.n	80127b0 <inc_lock+0xf8>
 801279e:	4a0c      	ldr	r2, [pc, #48]	; (80127d0 <inc_lock+0x118>)
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	011b      	lsls	r3, r3, #4
 80127a4:	4413      	add	r3, r2
 80127a6:	330c      	adds	r3, #12
 80127a8:	881b      	ldrh	r3, [r3, #0]
 80127aa:	3301      	adds	r3, #1
 80127ac:	b29a      	uxth	r2, r3
 80127ae:	e001      	b.n	80127b4 <inc_lock+0xfc>
 80127b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80127b4:	4906      	ldr	r1, [pc, #24]	; (80127d0 <inc_lock+0x118>)
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	011b      	lsls	r3, r3, #4
 80127ba:	440b      	add	r3, r1
 80127bc:	330c      	adds	r3, #12
 80127be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	3301      	adds	r3, #1
}
 80127c4:	4618      	mov	r0, r3
 80127c6:	3714      	adds	r7, #20
 80127c8:	46bd      	mov	sp, r7
 80127ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ce:	4770      	bx	lr
 80127d0:	24008df8 	.word	0x24008df8

080127d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80127d4:	b480      	push	{r7}
 80127d6:	b085      	sub	sp, #20
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	3b01      	subs	r3, #1
 80127e0:	607b      	str	r3, [r7, #4]
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	2b01      	cmp	r3, #1
 80127e6:	d825      	bhi.n	8012834 <dec_lock+0x60>
		n = Files[i].ctr;
 80127e8:	4a17      	ldr	r2, [pc, #92]	; (8012848 <dec_lock+0x74>)
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	011b      	lsls	r3, r3, #4
 80127ee:	4413      	add	r3, r2
 80127f0:	330c      	adds	r3, #12
 80127f2:	881b      	ldrh	r3, [r3, #0]
 80127f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80127f6:	89fb      	ldrh	r3, [r7, #14]
 80127f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127fc:	d101      	bne.n	8012802 <dec_lock+0x2e>
 80127fe:	2300      	movs	r3, #0
 8012800:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012802:	89fb      	ldrh	r3, [r7, #14]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d002      	beq.n	801280e <dec_lock+0x3a>
 8012808:	89fb      	ldrh	r3, [r7, #14]
 801280a:	3b01      	subs	r3, #1
 801280c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801280e:	4a0e      	ldr	r2, [pc, #56]	; (8012848 <dec_lock+0x74>)
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	011b      	lsls	r3, r3, #4
 8012814:	4413      	add	r3, r2
 8012816:	330c      	adds	r3, #12
 8012818:	89fa      	ldrh	r2, [r7, #14]
 801281a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801281c:	89fb      	ldrh	r3, [r7, #14]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d105      	bne.n	801282e <dec_lock+0x5a>
 8012822:	4a09      	ldr	r2, [pc, #36]	; (8012848 <dec_lock+0x74>)
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	011b      	lsls	r3, r3, #4
 8012828:	4413      	add	r3, r2
 801282a:	2200      	movs	r2, #0
 801282c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801282e:	2300      	movs	r3, #0
 8012830:	737b      	strb	r3, [r7, #13]
 8012832:	e001      	b.n	8012838 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012834:	2302      	movs	r3, #2
 8012836:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012838:	7b7b      	ldrb	r3, [r7, #13]
}
 801283a:	4618      	mov	r0, r3
 801283c:	3714      	adds	r7, #20
 801283e:	46bd      	mov	sp, r7
 8012840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012844:	4770      	bx	lr
 8012846:	bf00      	nop
 8012848:	24008df8 	.word	0x24008df8

0801284c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801284c:	b480      	push	{r7}
 801284e:	b085      	sub	sp, #20
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012854:	2300      	movs	r3, #0
 8012856:	60fb      	str	r3, [r7, #12]
 8012858:	e010      	b.n	801287c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801285a:	4a0d      	ldr	r2, [pc, #52]	; (8012890 <clear_lock+0x44>)
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	011b      	lsls	r3, r3, #4
 8012860:	4413      	add	r3, r2
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	687a      	ldr	r2, [r7, #4]
 8012866:	429a      	cmp	r2, r3
 8012868:	d105      	bne.n	8012876 <clear_lock+0x2a>
 801286a:	4a09      	ldr	r2, [pc, #36]	; (8012890 <clear_lock+0x44>)
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	011b      	lsls	r3, r3, #4
 8012870:	4413      	add	r3, r2
 8012872:	2200      	movs	r2, #0
 8012874:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	3301      	adds	r3, #1
 801287a:	60fb      	str	r3, [r7, #12]
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	2b01      	cmp	r3, #1
 8012880:	d9eb      	bls.n	801285a <clear_lock+0xe>
	}
}
 8012882:	bf00      	nop
 8012884:	bf00      	nop
 8012886:	3714      	adds	r7, #20
 8012888:	46bd      	mov	sp, r7
 801288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288e:	4770      	bx	lr
 8012890:	24008df8 	.word	0x24008df8

08012894 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b086      	sub	sp, #24
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801289c:	2300      	movs	r3, #0
 801289e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	78db      	ldrb	r3, [r3, #3]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d034      	beq.n	8012912 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	7858      	ldrb	r0, [r3, #1]
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128b8:	2301      	movs	r3, #1
 80128ba:	697a      	ldr	r2, [r7, #20]
 80128bc:	f7ff fd40 	bl	8012340 <disk_write>
 80128c0:	4603      	mov	r3, r0
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d002      	beq.n	80128cc <sync_window+0x38>
			res = FR_DISK_ERR;
 80128c6:	2301      	movs	r3, #1
 80128c8:	73fb      	strb	r3, [r7, #15]
 80128ca:	e022      	b.n	8012912 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2200      	movs	r2, #0
 80128d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	6a1b      	ldr	r3, [r3, #32]
 80128d6:	697a      	ldr	r2, [r7, #20]
 80128d8:	1ad2      	subs	r2, r2, r3
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	699b      	ldr	r3, [r3, #24]
 80128de:	429a      	cmp	r2, r3
 80128e0:	d217      	bcs.n	8012912 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	789b      	ldrb	r3, [r3, #2]
 80128e6:	613b      	str	r3, [r7, #16]
 80128e8:	e010      	b.n	801290c <sync_window+0x78>
					wsect += fs->fsize;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	699b      	ldr	r3, [r3, #24]
 80128ee:	697a      	ldr	r2, [r7, #20]
 80128f0:	4413      	add	r3, r2
 80128f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	7858      	ldrb	r0, [r3, #1]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128fe:	2301      	movs	r3, #1
 8012900:	697a      	ldr	r2, [r7, #20]
 8012902:	f7ff fd1d 	bl	8012340 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	3b01      	subs	r3, #1
 801290a:	613b      	str	r3, [r7, #16]
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	2b01      	cmp	r3, #1
 8012910:	d8eb      	bhi.n	80128ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012912:	7bfb      	ldrb	r3, [r7, #15]
}
 8012914:	4618      	mov	r0, r3
 8012916:	3718      	adds	r7, #24
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b084      	sub	sp, #16
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012926:	2300      	movs	r3, #0
 8012928:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801292e:	683a      	ldr	r2, [r7, #0]
 8012930:	429a      	cmp	r2, r3
 8012932:	d01b      	beq.n	801296c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f7ff ffad 	bl	8012894 <sync_window>
 801293a:	4603      	mov	r3, r0
 801293c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801293e:	7bfb      	ldrb	r3, [r7, #15]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d113      	bne.n	801296c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	7858      	ldrb	r0, [r3, #1]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801294e:	2301      	movs	r3, #1
 8012950:	683a      	ldr	r2, [r7, #0]
 8012952:	f7ff fcd5 	bl	8012300 <disk_read>
 8012956:	4603      	mov	r3, r0
 8012958:	2b00      	cmp	r3, #0
 801295a:	d004      	beq.n	8012966 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801295c:	f04f 33ff 	mov.w	r3, #4294967295
 8012960:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012962:	2301      	movs	r3, #1
 8012964:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	683a      	ldr	r2, [r7, #0]
 801296a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 801296c:	7bfb      	ldrb	r3, [r7, #15]
}
 801296e:	4618      	mov	r0, r3
 8012970:	3710      	adds	r7, #16
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}
	...

08012978 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b084      	sub	sp, #16
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f7ff ff87 	bl	8012894 <sync_window>
 8012986:	4603      	mov	r3, r0
 8012988:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801298a:	7bfb      	ldrb	r3, [r7, #15]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d158      	bne.n	8012a42 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	781b      	ldrb	r3, [r3, #0]
 8012994:	2b03      	cmp	r3, #3
 8012996:	d148      	bne.n	8012a2a <sync_fs+0xb2>
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	791b      	ldrb	r3, [r3, #4]
 801299c:	2b01      	cmp	r3, #1
 801299e:	d144      	bne.n	8012a2a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	3330      	adds	r3, #48	; 0x30
 80129a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80129a8:	2100      	movs	r1, #0
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7ff fda9 	bl	8012502 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	3330      	adds	r3, #48	; 0x30
 80129b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80129b8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80129bc:	4618      	mov	r0, r3
 80129be:	f7ff fd38 	bl	8012432 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	3330      	adds	r3, #48	; 0x30
 80129c6:	4921      	ldr	r1, [pc, #132]	; (8012a4c <sync_fs+0xd4>)
 80129c8:	4618      	mov	r0, r3
 80129ca:	f7ff fd4d 	bl	8012468 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	3330      	adds	r3, #48	; 0x30
 80129d2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80129d6:	491e      	ldr	r1, [pc, #120]	; (8012a50 <sync_fs+0xd8>)
 80129d8:	4618      	mov	r0, r3
 80129da:	f7ff fd45 	bl	8012468 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	3330      	adds	r3, #48	; 0x30
 80129e2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	691b      	ldr	r3, [r3, #16]
 80129ea:	4619      	mov	r1, r3
 80129ec:	4610      	mov	r0, r2
 80129ee:	f7ff fd3b 	bl	8012468 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	3330      	adds	r3, #48	; 0x30
 80129f6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	68db      	ldr	r3, [r3, #12]
 80129fe:	4619      	mov	r1, r3
 8012a00:	4610      	mov	r0, r2
 8012a02:	f7ff fd31 	bl	8012468 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	69db      	ldr	r3, [r3, #28]
 8012a0a:	1c5a      	adds	r2, r3, #1
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	7858      	ldrb	r0, [r3, #1]
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a1e:	2301      	movs	r3, #1
 8012a20:	f7ff fc8e 	bl	8012340 <disk_write>
			fs->fsi_flag = 0;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2200      	movs	r2, #0
 8012a28:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	785b      	ldrb	r3, [r3, #1]
 8012a2e:	2200      	movs	r2, #0
 8012a30:	2100      	movs	r1, #0
 8012a32:	4618      	mov	r0, r3
 8012a34:	f7ff fca4 	bl	8012380 <disk_ioctl>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d001      	beq.n	8012a42 <sync_fs+0xca>
 8012a3e:	2301      	movs	r3, #1
 8012a40:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	3710      	adds	r7, #16
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}
 8012a4c:	41615252 	.word	0x41615252
 8012a50:	61417272 	.word	0x61417272

08012a54 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012a54:	b480      	push	{r7}
 8012a56:	b083      	sub	sp, #12
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	3b02      	subs	r3, #2
 8012a62:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	695b      	ldr	r3, [r3, #20]
 8012a68:	3b02      	subs	r3, #2
 8012a6a:	683a      	ldr	r2, [r7, #0]
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d301      	bcc.n	8012a74 <clust2sect+0x20>
 8012a70:	2300      	movs	r3, #0
 8012a72:	e008      	b.n	8012a86 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	895b      	ldrh	r3, [r3, #10]
 8012a78:	461a      	mov	r2, r3
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	fb03 f202 	mul.w	r2, r3, r2
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a84:	4413      	add	r3, r2
}
 8012a86:	4618      	mov	r0, r3
 8012a88:	370c      	adds	r7, #12
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a90:	4770      	bx	lr

08012a92 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012a92:	b580      	push	{r7, lr}
 8012a94:	b086      	sub	sp, #24
 8012a96:	af00      	add	r7, sp, #0
 8012a98:	6078      	str	r0, [r7, #4]
 8012a9a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	2b01      	cmp	r3, #1
 8012aa6:	d904      	bls.n	8012ab2 <get_fat+0x20>
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	695b      	ldr	r3, [r3, #20]
 8012aac:	683a      	ldr	r2, [r7, #0]
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d302      	bcc.n	8012ab8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	617b      	str	r3, [r7, #20]
 8012ab6:	e08f      	b.n	8012bd8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8012abc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012abe:	693b      	ldr	r3, [r7, #16]
 8012ac0:	781b      	ldrb	r3, [r3, #0]
 8012ac2:	2b03      	cmp	r3, #3
 8012ac4:	d062      	beq.n	8012b8c <get_fat+0xfa>
 8012ac6:	2b03      	cmp	r3, #3
 8012ac8:	dc7c      	bgt.n	8012bc4 <get_fat+0x132>
 8012aca:	2b01      	cmp	r3, #1
 8012acc:	d002      	beq.n	8012ad4 <get_fat+0x42>
 8012ace:	2b02      	cmp	r3, #2
 8012ad0:	d042      	beq.n	8012b58 <get_fat+0xc6>
 8012ad2:	e077      	b.n	8012bc4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	60fb      	str	r3, [r7, #12]
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	085b      	lsrs	r3, r3, #1
 8012adc:	68fa      	ldr	r2, [r7, #12]
 8012ade:	4413      	add	r3, r2
 8012ae0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	6a1a      	ldr	r2, [r3, #32]
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	0a5b      	lsrs	r3, r3, #9
 8012aea:	4413      	add	r3, r2
 8012aec:	4619      	mov	r1, r3
 8012aee:	6938      	ldr	r0, [r7, #16]
 8012af0:	f7ff ff14 	bl	801291c <move_window>
 8012af4:	4603      	mov	r3, r0
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d167      	bne.n	8012bca <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	1c5a      	adds	r2, r3, #1
 8012afe:	60fa      	str	r2, [r7, #12]
 8012b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b04:	693a      	ldr	r2, [r7, #16]
 8012b06:	4413      	add	r3, r2
 8012b08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012b0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b0e:	693b      	ldr	r3, [r7, #16]
 8012b10:	6a1a      	ldr	r2, [r3, #32]
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	0a5b      	lsrs	r3, r3, #9
 8012b16:	4413      	add	r3, r2
 8012b18:	4619      	mov	r1, r3
 8012b1a:	6938      	ldr	r0, [r7, #16]
 8012b1c:	f7ff fefe 	bl	801291c <move_window>
 8012b20:	4603      	mov	r3, r0
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d153      	bne.n	8012bce <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b2c:	693a      	ldr	r2, [r7, #16]
 8012b2e:	4413      	add	r3, r2
 8012b30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012b34:	021b      	lsls	r3, r3, #8
 8012b36:	461a      	mov	r2, r3
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	4313      	orrs	r3, r2
 8012b3c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012b3e:	683b      	ldr	r3, [r7, #0]
 8012b40:	f003 0301 	and.w	r3, r3, #1
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d002      	beq.n	8012b4e <get_fat+0xbc>
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	091b      	lsrs	r3, r3, #4
 8012b4c:	e002      	b.n	8012b54 <get_fat+0xc2>
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012b54:	617b      	str	r3, [r7, #20]
			break;
 8012b56:	e03f      	b.n	8012bd8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	6a1a      	ldr	r2, [r3, #32]
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	0a1b      	lsrs	r3, r3, #8
 8012b60:	4413      	add	r3, r2
 8012b62:	4619      	mov	r1, r3
 8012b64:	6938      	ldr	r0, [r7, #16]
 8012b66:	f7ff fed9 	bl	801291c <move_window>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d130      	bne.n	8012bd2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	005b      	lsls	r3, r3, #1
 8012b7a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012b7e:	4413      	add	r3, r2
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7ff fc1b 	bl	80123bc <ld_word>
 8012b86:	4603      	mov	r3, r0
 8012b88:	617b      	str	r3, [r7, #20]
			break;
 8012b8a:	e025      	b.n	8012bd8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b8c:	693b      	ldr	r3, [r7, #16]
 8012b8e:	6a1a      	ldr	r2, [r3, #32]
 8012b90:	683b      	ldr	r3, [r7, #0]
 8012b92:	09db      	lsrs	r3, r3, #7
 8012b94:	4413      	add	r3, r2
 8012b96:	4619      	mov	r1, r3
 8012b98:	6938      	ldr	r0, [r7, #16]
 8012b9a:	f7ff febf 	bl	801291c <move_window>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d118      	bne.n	8012bd6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012baa:	683b      	ldr	r3, [r7, #0]
 8012bac:	009b      	lsls	r3, r3, #2
 8012bae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012bb2:	4413      	add	r3, r2
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f7ff fc19 	bl	80123ec <ld_dword>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012bc0:	617b      	str	r3, [r7, #20]
			break;
 8012bc2:	e009      	b.n	8012bd8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	617b      	str	r3, [r7, #20]
 8012bc8:	e006      	b.n	8012bd8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012bca:	bf00      	nop
 8012bcc:	e004      	b.n	8012bd8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012bce:	bf00      	nop
 8012bd0:	e002      	b.n	8012bd8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012bd2:	bf00      	nop
 8012bd4:	e000      	b.n	8012bd8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012bd6:	bf00      	nop
		}
	}

	return val;
 8012bd8:	697b      	ldr	r3, [r7, #20]
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3718      	adds	r7, #24
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}

08012be2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012be2:	b590      	push	{r4, r7, lr}
 8012be4:	b089      	sub	sp, #36	; 0x24
 8012be6:	af00      	add	r7, sp, #0
 8012be8:	60f8      	str	r0, [r7, #12]
 8012bea:	60b9      	str	r1, [r7, #8]
 8012bec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012bee:	2302      	movs	r3, #2
 8012bf0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	2b01      	cmp	r3, #1
 8012bf6:	f240 80d2 	bls.w	8012d9e <put_fat+0x1bc>
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	695b      	ldr	r3, [r3, #20]
 8012bfe:	68ba      	ldr	r2, [r7, #8]
 8012c00:	429a      	cmp	r2, r3
 8012c02:	f080 80cc 	bcs.w	8012d9e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	781b      	ldrb	r3, [r3, #0]
 8012c0a:	2b03      	cmp	r3, #3
 8012c0c:	f000 8096 	beq.w	8012d3c <put_fat+0x15a>
 8012c10:	2b03      	cmp	r3, #3
 8012c12:	f300 80cd 	bgt.w	8012db0 <put_fat+0x1ce>
 8012c16:	2b01      	cmp	r3, #1
 8012c18:	d002      	beq.n	8012c20 <put_fat+0x3e>
 8012c1a:	2b02      	cmp	r3, #2
 8012c1c:	d06e      	beq.n	8012cfc <put_fat+0x11a>
 8012c1e:	e0c7      	b.n	8012db0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	61bb      	str	r3, [r7, #24]
 8012c24:	69bb      	ldr	r3, [r7, #24]
 8012c26:	085b      	lsrs	r3, r3, #1
 8012c28:	69ba      	ldr	r2, [r7, #24]
 8012c2a:	4413      	add	r3, r2
 8012c2c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	6a1a      	ldr	r2, [r3, #32]
 8012c32:	69bb      	ldr	r3, [r7, #24]
 8012c34:	0a5b      	lsrs	r3, r3, #9
 8012c36:	4413      	add	r3, r2
 8012c38:	4619      	mov	r1, r3
 8012c3a:	68f8      	ldr	r0, [r7, #12]
 8012c3c:	f7ff fe6e 	bl	801291c <move_window>
 8012c40:	4603      	mov	r3, r0
 8012c42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c44:	7ffb      	ldrb	r3, [r7, #31]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	f040 80ab 	bne.w	8012da2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012c52:	69bb      	ldr	r3, [r7, #24]
 8012c54:	1c59      	adds	r1, r3, #1
 8012c56:	61b9      	str	r1, [r7, #24]
 8012c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c5c:	4413      	add	r3, r2
 8012c5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	f003 0301 	and.w	r3, r3, #1
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d00d      	beq.n	8012c86 <put_fat+0xa4>
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	781b      	ldrb	r3, [r3, #0]
 8012c6e:	b25b      	sxtb	r3, r3
 8012c70:	f003 030f 	and.w	r3, r3, #15
 8012c74:	b25a      	sxtb	r2, r3
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	b2db      	uxtb	r3, r3
 8012c7a:	011b      	lsls	r3, r3, #4
 8012c7c:	b25b      	sxtb	r3, r3
 8012c7e:	4313      	orrs	r3, r2
 8012c80:	b25b      	sxtb	r3, r3
 8012c82:	b2db      	uxtb	r3, r3
 8012c84:	e001      	b.n	8012c8a <put_fat+0xa8>
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	b2db      	uxtb	r3, r3
 8012c8a:	697a      	ldr	r2, [r7, #20]
 8012c8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	2201      	movs	r2, #1
 8012c92:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	6a1a      	ldr	r2, [r3, #32]
 8012c98:	69bb      	ldr	r3, [r7, #24]
 8012c9a:	0a5b      	lsrs	r3, r3, #9
 8012c9c:	4413      	add	r3, r2
 8012c9e:	4619      	mov	r1, r3
 8012ca0:	68f8      	ldr	r0, [r7, #12]
 8012ca2:	f7ff fe3b 	bl	801291c <move_window>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012caa:	7ffb      	ldrb	r3, [r7, #31]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d17a      	bne.n	8012da6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012cb6:	69bb      	ldr	r3, [r7, #24]
 8012cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cbc:	4413      	add	r3, r2
 8012cbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012cc0:	68bb      	ldr	r3, [r7, #8]
 8012cc2:	f003 0301 	and.w	r3, r3, #1
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d003      	beq.n	8012cd2 <put_fat+0xf0>
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	091b      	lsrs	r3, r3, #4
 8012cce:	b2db      	uxtb	r3, r3
 8012cd0:	e00e      	b.n	8012cf0 <put_fat+0x10e>
 8012cd2:	697b      	ldr	r3, [r7, #20]
 8012cd4:	781b      	ldrb	r3, [r3, #0]
 8012cd6:	b25b      	sxtb	r3, r3
 8012cd8:	f023 030f 	bic.w	r3, r3, #15
 8012cdc:	b25a      	sxtb	r2, r3
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	0a1b      	lsrs	r3, r3, #8
 8012ce2:	b25b      	sxtb	r3, r3
 8012ce4:	f003 030f 	and.w	r3, r3, #15
 8012ce8:	b25b      	sxtb	r3, r3
 8012cea:	4313      	orrs	r3, r2
 8012cec:	b25b      	sxtb	r3, r3
 8012cee:	b2db      	uxtb	r3, r3
 8012cf0:	697a      	ldr	r2, [r7, #20]
 8012cf2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	70da      	strb	r2, [r3, #3]
			break;
 8012cfa:	e059      	b.n	8012db0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	6a1a      	ldr	r2, [r3, #32]
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	0a1b      	lsrs	r3, r3, #8
 8012d04:	4413      	add	r3, r2
 8012d06:	4619      	mov	r1, r3
 8012d08:	68f8      	ldr	r0, [r7, #12]
 8012d0a:	f7ff fe07 	bl	801291c <move_window>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012d12:	7ffb      	ldrb	r3, [r7, #31]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d148      	bne.n	8012daa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	005b      	lsls	r3, r3, #1
 8012d22:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012d26:	4413      	add	r3, r2
 8012d28:	687a      	ldr	r2, [r7, #4]
 8012d2a:	b292      	uxth	r2, r2
 8012d2c:	4611      	mov	r1, r2
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f7ff fb7f 	bl	8012432 <st_word>
			fs->wflag = 1;
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	2201      	movs	r2, #1
 8012d38:	70da      	strb	r2, [r3, #3]
			break;
 8012d3a:	e039      	b.n	8012db0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	6a1a      	ldr	r2, [r3, #32]
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	09db      	lsrs	r3, r3, #7
 8012d44:	4413      	add	r3, r2
 8012d46:	4619      	mov	r1, r3
 8012d48:	68f8      	ldr	r0, [r7, #12]
 8012d4a:	f7ff fde7 	bl	801291c <move_window>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012d52:	7ffb      	ldrb	r3, [r7, #31]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d12a      	bne.n	8012dae <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	009b      	lsls	r3, r3, #2
 8012d68:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012d6c:	4413      	add	r3, r2
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7ff fb3c 	bl	80123ec <ld_dword>
 8012d74:	4603      	mov	r3, r0
 8012d76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012d7a:	4323      	orrs	r3, r4
 8012d7c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	009b      	lsls	r3, r3, #2
 8012d88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012d8c:	4413      	add	r3, r2
 8012d8e:	6879      	ldr	r1, [r7, #4]
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7ff fb69 	bl	8012468 <st_dword>
			fs->wflag = 1;
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	2201      	movs	r2, #1
 8012d9a:	70da      	strb	r2, [r3, #3]
			break;
 8012d9c:	e008      	b.n	8012db0 <put_fat+0x1ce>
		}
	}
 8012d9e:	bf00      	nop
 8012da0:	e006      	b.n	8012db0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012da2:	bf00      	nop
 8012da4:	e004      	b.n	8012db0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012da6:	bf00      	nop
 8012da8:	e002      	b.n	8012db0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012daa:	bf00      	nop
 8012dac:	e000      	b.n	8012db0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012dae:	bf00      	nop
	return res;
 8012db0:	7ffb      	ldrb	r3, [r7, #31]
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	3724      	adds	r7, #36	; 0x24
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd90      	pop	{r4, r7, pc}

08012dba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012dba:	b580      	push	{r7, lr}
 8012dbc:	b088      	sub	sp, #32
 8012dbe:	af00      	add	r7, sp, #0
 8012dc0:	60f8      	str	r0, [r7, #12]
 8012dc2:	60b9      	str	r1, [r7, #8]
 8012dc4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	2b01      	cmp	r3, #1
 8012dd4:	d904      	bls.n	8012de0 <remove_chain+0x26>
 8012dd6:	69bb      	ldr	r3, [r7, #24]
 8012dd8:	695b      	ldr	r3, [r3, #20]
 8012dda:	68ba      	ldr	r2, [r7, #8]
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d301      	bcc.n	8012de4 <remove_chain+0x2a>
 8012de0:	2302      	movs	r3, #2
 8012de2:	e04b      	b.n	8012e7c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d00c      	beq.n	8012e04 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012dea:	f04f 32ff 	mov.w	r2, #4294967295
 8012dee:	6879      	ldr	r1, [r7, #4]
 8012df0:	69b8      	ldr	r0, [r7, #24]
 8012df2:	f7ff fef6 	bl	8012be2 <put_fat>
 8012df6:	4603      	mov	r3, r0
 8012df8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012dfa:	7ffb      	ldrb	r3, [r7, #31]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d001      	beq.n	8012e04 <remove_chain+0x4a>
 8012e00:	7ffb      	ldrb	r3, [r7, #31]
 8012e02:	e03b      	b.n	8012e7c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012e04:	68b9      	ldr	r1, [r7, #8]
 8012e06:	68f8      	ldr	r0, [r7, #12]
 8012e08:	f7ff fe43 	bl	8012a92 <get_fat>
 8012e0c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012e0e:	697b      	ldr	r3, [r7, #20]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d031      	beq.n	8012e78 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	2b01      	cmp	r3, #1
 8012e18:	d101      	bne.n	8012e1e <remove_chain+0x64>
 8012e1a:	2302      	movs	r3, #2
 8012e1c:	e02e      	b.n	8012e7c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e24:	d101      	bne.n	8012e2a <remove_chain+0x70>
 8012e26:	2301      	movs	r3, #1
 8012e28:	e028      	b.n	8012e7c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	68b9      	ldr	r1, [r7, #8]
 8012e2e:	69b8      	ldr	r0, [r7, #24]
 8012e30:	f7ff fed7 	bl	8012be2 <put_fat>
 8012e34:	4603      	mov	r3, r0
 8012e36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012e38:	7ffb      	ldrb	r3, [r7, #31]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d001      	beq.n	8012e42 <remove_chain+0x88>
 8012e3e:	7ffb      	ldrb	r3, [r7, #31]
 8012e40:	e01c      	b.n	8012e7c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	691a      	ldr	r2, [r3, #16]
 8012e46:	69bb      	ldr	r3, [r7, #24]
 8012e48:	695b      	ldr	r3, [r3, #20]
 8012e4a:	3b02      	subs	r3, #2
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	d20b      	bcs.n	8012e68 <remove_chain+0xae>
			fs->free_clst++;
 8012e50:	69bb      	ldr	r3, [r7, #24]
 8012e52:	691b      	ldr	r3, [r3, #16]
 8012e54:	1c5a      	adds	r2, r3, #1
 8012e56:	69bb      	ldr	r3, [r7, #24]
 8012e58:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8012e5a:	69bb      	ldr	r3, [r7, #24]
 8012e5c:	791b      	ldrb	r3, [r3, #4]
 8012e5e:	f043 0301 	orr.w	r3, r3, #1
 8012e62:	b2da      	uxtb	r2, r3
 8012e64:	69bb      	ldr	r3, [r7, #24]
 8012e66:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012e68:	697b      	ldr	r3, [r7, #20]
 8012e6a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012e6c:	69bb      	ldr	r3, [r7, #24]
 8012e6e:	695b      	ldr	r3, [r3, #20]
 8012e70:	68ba      	ldr	r2, [r7, #8]
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d3c6      	bcc.n	8012e04 <remove_chain+0x4a>
 8012e76:	e000      	b.n	8012e7a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012e78:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012e7a:	2300      	movs	r3, #0
}
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3720      	adds	r7, #32
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}

08012e84 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b088      	sub	sp, #32
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
 8012e8c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d10d      	bne.n	8012eb6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012e9a:	693b      	ldr	r3, [r7, #16]
 8012e9c:	68db      	ldr	r3, [r3, #12]
 8012e9e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012ea0:	69bb      	ldr	r3, [r7, #24]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d004      	beq.n	8012eb0 <create_chain+0x2c>
 8012ea6:	693b      	ldr	r3, [r7, #16]
 8012ea8:	695b      	ldr	r3, [r3, #20]
 8012eaa:	69ba      	ldr	r2, [r7, #24]
 8012eac:	429a      	cmp	r2, r3
 8012eae:	d31b      	bcc.n	8012ee8 <create_chain+0x64>
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	61bb      	str	r3, [r7, #24]
 8012eb4:	e018      	b.n	8012ee8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012eb6:	6839      	ldr	r1, [r7, #0]
 8012eb8:	6878      	ldr	r0, [r7, #4]
 8012eba:	f7ff fdea 	bl	8012a92 <get_fat>
 8012ebe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	2b01      	cmp	r3, #1
 8012ec4:	d801      	bhi.n	8012eca <create_chain+0x46>
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	e070      	b.n	8012fac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ed0:	d101      	bne.n	8012ed6 <create_chain+0x52>
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	e06a      	b.n	8012fac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	695b      	ldr	r3, [r3, #20]
 8012eda:	68fa      	ldr	r2, [r7, #12]
 8012edc:	429a      	cmp	r2, r3
 8012ede:	d201      	bcs.n	8012ee4 <create_chain+0x60>
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	e063      	b.n	8012fac <create_chain+0x128>
		scl = clst;
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012ee8:	69bb      	ldr	r3, [r7, #24]
 8012eea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012eec:	69fb      	ldr	r3, [r7, #28]
 8012eee:	3301      	adds	r3, #1
 8012ef0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012ef2:	693b      	ldr	r3, [r7, #16]
 8012ef4:	695b      	ldr	r3, [r3, #20]
 8012ef6:	69fa      	ldr	r2, [r7, #28]
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	d307      	bcc.n	8012f0c <create_chain+0x88>
				ncl = 2;
 8012efc:	2302      	movs	r3, #2
 8012efe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012f00:	69fa      	ldr	r2, [r7, #28]
 8012f02:	69bb      	ldr	r3, [r7, #24]
 8012f04:	429a      	cmp	r2, r3
 8012f06:	d901      	bls.n	8012f0c <create_chain+0x88>
 8012f08:	2300      	movs	r3, #0
 8012f0a:	e04f      	b.n	8012fac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012f0c:	69f9      	ldr	r1, [r7, #28]
 8012f0e:	6878      	ldr	r0, [r7, #4]
 8012f10:	f7ff fdbf 	bl	8012a92 <get_fat>
 8012f14:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d00e      	beq.n	8012f3a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	2b01      	cmp	r3, #1
 8012f20:	d003      	beq.n	8012f2a <create_chain+0xa6>
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f28:	d101      	bne.n	8012f2e <create_chain+0xaa>
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	e03e      	b.n	8012fac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012f2e:	69fa      	ldr	r2, [r7, #28]
 8012f30:	69bb      	ldr	r3, [r7, #24]
 8012f32:	429a      	cmp	r2, r3
 8012f34:	d1da      	bne.n	8012eec <create_chain+0x68>
 8012f36:	2300      	movs	r3, #0
 8012f38:	e038      	b.n	8012fac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012f3a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8012f40:	69f9      	ldr	r1, [r7, #28]
 8012f42:	6938      	ldr	r0, [r7, #16]
 8012f44:	f7ff fe4d 	bl	8012be2 <put_fat>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012f4c:	7dfb      	ldrb	r3, [r7, #23]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d109      	bne.n	8012f66 <create_chain+0xe2>
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d006      	beq.n	8012f66 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012f58:	69fa      	ldr	r2, [r7, #28]
 8012f5a:	6839      	ldr	r1, [r7, #0]
 8012f5c:	6938      	ldr	r0, [r7, #16]
 8012f5e:	f7ff fe40 	bl	8012be2 <put_fat>
 8012f62:	4603      	mov	r3, r0
 8012f64:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012f66:	7dfb      	ldrb	r3, [r7, #23]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d116      	bne.n	8012f9a <create_chain+0x116>
		fs->last_clst = ncl;
 8012f6c:	693b      	ldr	r3, [r7, #16]
 8012f6e:	69fa      	ldr	r2, [r7, #28]
 8012f70:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012f72:	693b      	ldr	r3, [r7, #16]
 8012f74:	691a      	ldr	r2, [r3, #16]
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	695b      	ldr	r3, [r3, #20]
 8012f7a:	3b02      	subs	r3, #2
 8012f7c:	429a      	cmp	r2, r3
 8012f7e:	d804      	bhi.n	8012f8a <create_chain+0x106>
 8012f80:	693b      	ldr	r3, [r7, #16]
 8012f82:	691b      	ldr	r3, [r3, #16]
 8012f84:	1e5a      	subs	r2, r3, #1
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8012f8a:	693b      	ldr	r3, [r7, #16]
 8012f8c:	791b      	ldrb	r3, [r3, #4]
 8012f8e:	f043 0301 	orr.w	r3, r3, #1
 8012f92:	b2da      	uxtb	r2, r3
 8012f94:	693b      	ldr	r3, [r7, #16]
 8012f96:	711a      	strb	r2, [r3, #4]
 8012f98:	e007      	b.n	8012faa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012f9a:	7dfb      	ldrb	r3, [r7, #23]
 8012f9c:	2b01      	cmp	r3, #1
 8012f9e:	d102      	bne.n	8012fa6 <create_chain+0x122>
 8012fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8012fa4:	e000      	b.n	8012fa8 <create_chain+0x124>
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012faa:	69fb      	ldr	r3, [r7, #28]
}
 8012fac:	4618      	mov	r0, r3
 8012fae:	3720      	adds	r7, #32
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}

08012fb4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012fb4:	b480      	push	{r7}
 8012fb6:	b087      	sub	sp, #28
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
 8012fbc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fc8:	3304      	adds	r3, #4
 8012fca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	0a5b      	lsrs	r3, r3, #9
 8012fd0:	68fa      	ldr	r2, [r7, #12]
 8012fd2:	8952      	ldrh	r2, [r2, #10]
 8012fd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8012fd8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012fda:	693b      	ldr	r3, [r7, #16]
 8012fdc:	1d1a      	adds	r2, r3, #4
 8012fde:	613a      	str	r2, [r7, #16]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012fe4:	68bb      	ldr	r3, [r7, #8]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d101      	bne.n	8012fee <clmt_clust+0x3a>
 8012fea:	2300      	movs	r3, #0
 8012fec:	e010      	b.n	8013010 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012fee:	697a      	ldr	r2, [r7, #20]
 8012ff0:	68bb      	ldr	r3, [r7, #8]
 8012ff2:	429a      	cmp	r2, r3
 8012ff4:	d307      	bcc.n	8013006 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012ff6:	697a      	ldr	r2, [r7, #20]
 8012ff8:	68bb      	ldr	r3, [r7, #8]
 8012ffa:	1ad3      	subs	r3, r2, r3
 8012ffc:	617b      	str	r3, [r7, #20]
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	3304      	adds	r3, #4
 8013002:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013004:	e7e9      	b.n	8012fda <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013006:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013008:	693b      	ldr	r3, [r7, #16]
 801300a:	681a      	ldr	r2, [r3, #0]
 801300c:	697b      	ldr	r3, [r7, #20]
 801300e:	4413      	add	r3, r2
}
 8013010:	4618      	mov	r0, r3
 8013012:	371c      	adds	r7, #28
 8013014:	46bd      	mov	sp, r7
 8013016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301a:	4770      	bx	lr

0801301c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b086      	sub	sp, #24
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
 8013024:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013032:	d204      	bcs.n	801303e <dir_sdi+0x22>
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	f003 031f 	and.w	r3, r3, #31
 801303a:	2b00      	cmp	r3, #0
 801303c:	d001      	beq.n	8013042 <dir_sdi+0x26>
		return FR_INT_ERR;
 801303e:	2302      	movs	r3, #2
 8013040:	e063      	b.n	801310a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	683a      	ldr	r2, [r7, #0]
 8013046:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	689b      	ldr	r3, [r3, #8]
 801304c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d106      	bne.n	8013062 <dir_sdi+0x46>
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	2b02      	cmp	r3, #2
 801305a:	d902      	bls.n	8013062 <dir_sdi+0x46>
		clst = fs->dirbase;
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013060:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013062:	697b      	ldr	r3, [r7, #20]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d10c      	bne.n	8013082 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	095b      	lsrs	r3, r3, #5
 801306c:	693a      	ldr	r2, [r7, #16]
 801306e:	8912      	ldrh	r2, [r2, #8]
 8013070:	4293      	cmp	r3, r2
 8013072:	d301      	bcc.n	8013078 <dir_sdi+0x5c>
 8013074:	2302      	movs	r3, #2
 8013076:	e048      	b.n	801310a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013078:	693b      	ldr	r3, [r7, #16]
 801307a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	61da      	str	r2, [r3, #28]
 8013080:	e029      	b.n	80130d6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	895b      	ldrh	r3, [r3, #10]
 8013086:	025b      	lsls	r3, r3, #9
 8013088:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801308a:	e019      	b.n	80130c0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	6979      	ldr	r1, [r7, #20]
 8013090:	4618      	mov	r0, r3
 8013092:	f7ff fcfe 	bl	8012a92 <get_fat>
 8013096:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801309e:	d101      	bne.n	80130a4 <dir_sdi+0x88>
 80130a0:	2301      	movs	r3, #1
 80130a2:	e032      	b.n	801310a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80130a4:	697b      	ldr	r3, [r7, #20]
 80130a6:	2b01      	cmp	r3, #1
 80130a8:	d904      	bls.n	80130b4 <dir_sdi+0x98>
 80130aa:	693b      	ldr	r3, [r7, #16]
 80130ac:	695b      	ldr	r3, [r3, #20]
 80130ae:	697a      	ldr	r2, [r7, #20]
 80130b0:	429a      	cmp	r2, r3
 80130b2:	d301      	bcc.n	80130b8 <dir_sdi+0x9c>
 80130b4:	2302      	movs	r3, #2
 80130b6:	e028      	b.n	801310a <dir_sdi+0xee>
			ofs -= csz;
 80130b8:	683a      	ldr	r2, [r7, #0]
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	1ad3      	subs	r3, r2, r3
 80130be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80130c0:	683a      	ldr	r2, [r7, #0]
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d2e1      	bcs.n	801308c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80130c8:	6979      	ldr	r1, [r7, #20]
 80130ca:	6938      	ldr	r0, [r7, #16]
 80130cc:	f7ff fcc2 	bl	8012a54 <clust2sect>
 80130d0:	4602      	mov	r2, r0
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	697a      	ldr	r2, [r7, #20]
 80130da:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	69db      	ldr	r3, [r3, #28]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d101      	bne.n	80130e8 <dir_sdi+0xcc>
 80130e4:	2302      	movs	r3, #2
 80130e6:	e010      	b.n	801310a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	69da      	ldr	r2, [r3, #28]
 80130ec:	683b      	ldr	r3, [r7, #0]
 80130ee:	0a5b      	lsrs	r3, r3, #9
 80130f0:	441a      	add	r2, r3
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80130f6:	693b      	ldr	r3, [r7, #16]
 80130f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013102:	441a      	add	r2, r3
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013108:	2300      	movs	r3, #0
}
 801310a:	4618      	mov	r0, r3
 801310c:	3718      	adds	r7, #24
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}

08013112 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013112:	b580      	push	{r7, lr}
 8013114:	b086      	sub	sp, #24
 8013116:	af00      	add	r7, sp, #0
 8013118:	6078      	str	r0, [r7, #4]
 801311a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	695b      	ldr	r3, [r3, #20]
 8013126:	3320      	adds	r3, #32
 8013128:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	69db      	ldr	r3, [r3, #28]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d003      	beq.n	801313a <dir_next+0x28>
 8013132:	68bb      	ldr	r3, [r7, #8]
 8013134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013138:	d301      	bcc.n	801313e <dir_next+0x2c>
 801313a:	2304      	movs	r3, #4
 801313c:	e0aa      	b.n	8013294 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013144:	2b00      	cmp	r3, #0
 8013146:	f040 8098 	bne.w	801327a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	69db      	ldr	r3, [r3, #28]
 801314e:	1c5a      	adds	r2, r3, #1
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	699b      	ldr	r3, [r3, #24]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d10b      	bne.n	8013174 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	095b      	lsrs	r3, r3, #5
 8013160:	68fa      	ldr	r2, [r7, #12]
 8013162:	8912      	ldrh	r2, [r2, #8]
 8013164:	4293      	cmp	r3, r2
 8013166:	f0c0 8088 	bcc.w	801327a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	2200      	movs	r2, #0
 801316e:	61da      	str	r2, [r3, #28]
 8013170:	2304      	movs	r3, #4
 8013172:	e08f      	b.n	8013294 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	0a5b      	lsrs	r3, r3, #9
 8013178:	68fa      	ldr	r2, [r7, #12]
 801317a:	8952      	ldrh	r2, [r2, #10]
 801317c:	3a01      	subs	r2, #1
 801317e:	4013      	ands	r3, r2
 8013180:	2b00      	cmp	r3, #0
 8013182:	d17a      	bne.n	801327a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013184:	687a      	ldr	r2, [r7, #4]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	699b      	ldr	r3, [r3, #24]
 801318a:	4619      	mov	r1, r3
 801318c:	4610      	mov	r0, r2
 801318e:	f7ff fc80 	bl	8012a92 <get_fat>
 8013192:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013194:	697b      	ldr	r3, [r7, #20]
 8013196:	2b01      	cmp	r3, #1
 8013198:	d801      	bhi.n	801319e <dir_next+0x8c>
 801319a:	2302      	movs	r3, #2
 801319c:	e07a      	b.n	8013294 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801319e:	697b      	ldr	r3, [r7, #20]
 80131a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131a4:	d101      	bne.n	80131aa <dir_next+0x98>
 80131a6:	2301      	movs	r3, #1
 80131a8:	e074      	b.n	8013294 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	695b      	ldr	r3, [r3, #20]
 80131ae:	697a      	ldr	r2, [r7, #20]
 80131b0:	429a      	cmp	r2, r3
 80131b2:	d358      	bcc.n	8013266 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d104      	bne.n	80131c4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2200      	movs	r2, #0
 80131be:	61da      	str	r2, [r3, #28]
 80131c0:	2304      	movs	r3, #4
 80131c2:	e067      	b.n	8013294 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80131c4:	687a      	ldr	r2, [r7, #4]
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	699b      	ldr	r3, [r3, #24]
 80131ca:	4619      	mov	r1, r3
 80131cc:	4610      	mov	r0, r2
 80131ce:	f7ff fe59 	bl	8012e84 <create_chain>
 80131d2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d101      	bne.n	80131de <dir_next+0xcc>
 80131da:	2307      	movs	r3, #7
 80131dc:	e05a      	b.n	8013294 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80131de:	697b      	ldr	r3, [r7, #20]
 80131e0:	2b01      	cmp	r3, #1
 80131e2:	d101      	bne.n	80131e8 <dir_next+0xd6>
 80131e4:	2302      	movs	r3, #2
 80131e6:	e055      	b.n	8013294 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131ee:	d101      	bne.n	80131f4 <dir_next+0xe2>
 80131f0:	2301      	movs	r3, #1
 80131f2:	e04f      	b.n	8013294 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80131f4:	68f8      	ldr	r0, [r7, #12]
 80131f6:	f7ff fb4d 	bl	8012894 <sync_window>
 80131fa:	4603      	mov	r3, r0
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d001      	beq.n	8013204 <dir_next+0xf2>
 8013200:	2301      	movs	r3, #1
 8013202:	e047      	b.n	8013294 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	3330      	adds	r3, #48	; 0x30
 8013208:	f44f 7200 	mov.w	r2, #512	; 0x200
 801320c:	2100      	movs	r1, #0
 801320e:	4618      	mov	r0, r3
 8013210:	f7ff f977 	bl	8012502 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013214:	2300      	movs	r3, #0
 8013216:	613b      	str	r3, [r7, #16]
 8013218:	6979      	ldr	r1, [r7, #20]
 801321a:	68f8      	ldr	r0, [r7, #12]
 801321c:	f7ff fc1a 	bl	8012a54 <clust2sect>
 8013220:	4602      	mov	r2, r0
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	62da      	str	r2, [r3, #44]	; 0x2c
 8013226:	e012      	b.n	801324e <dir_next+0x13c>
						fs->wflag = 1;
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	2201      	movs	r2, #1
 801322c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801322e:	68f8      	ldr	r0, [r7, #12]
 8013230:	f7ff fb30 	bl	8012894 <sync_window>
 8013234:	4603      	mov	r3, r0
 8013236:	2b00      	cmp	r3, #0
 8013238:	d001      	beq.n	801323e <dir_next+0x12c>
 801323a:	2301      	movs	r3, #1
 801323c:	e02a      	b.n	8013294 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801323e:	693b      	ldr	r3, [r7, #16]
 8013240:	3301      	adds	r3, #1
 8013242:	613b      	str	r3, [r7, #16]
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013248:	1c5a      	adds	r2, r3, #1
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	62da      	str	r2, [r3, #44]	; 0x2c
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	895b      	ldrh	r3, [r3, #10]
 8013252:	461a      	mov	r2, r3
 8013254:	693b      	ldr	r3, [r7, #16]
 8013256:	4293      	cmp	r3, r2
 8013258:	d3e6      	bcc.n	8013228 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801325e:	693b      	ldr	r3, [r7, #16]
 8013260:	1ad2      	subs	r2, r2, r3
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	697a      	ldr	r2, [r7, #20]
 801326a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801326c:	6979      	ldr	r1, [r7, #20]
 801326e:	68f8      	ldr	r0, [r7, #12]
 8013270:	f7ff fbf0 	bl	8012a54 <clust2sect>
 8013274:	4602      	mov	r2, r0
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	68ba      	ldr	r2, [r7, #8]
 801327e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801328c:	441a      	add	r2, r3
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013292:	2300      	movs	r3, #0
}
 8013294:	4618      	mov	r0, r3
 8013296:	3718      	adds	r7, #24
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}

0801329c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b086      	sub	sp, #24
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
 80132a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80132ac:	2100      	movs	r1, #0
 80132ae:	6878      	ldr	r0, [r7, #4]
 80132b0:	f7ff feb4 	bl	801301c <dir_sdi>
 80132b4:	4603      	mov	r3, r0
 80132b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80132b8:	7dfb      	ldrb	r3, [r7, #23]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d12b      	bne.n	8013316 <dir_alloc+0x7a>
		n = 0;
 80132be:	2300      	movs	r3, #0
 80132c0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	69db      	ldr	r3, [r3, #28]
 80132c6:	4619      	mov	r1, r3
 80132c8:	68f8      	ldr	r0, [r7, #12]
 80132ca:	f7ff fb27 	bl	801291c <move_window>
 80132ce:	4603      	mov	r3, r0
 80132d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80132d2:	7dfb      	ldrb	r3, [r7, #23]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d11d      	bne.n	8013314 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6a1b      	ldr	r3, [r3, #32]
 80132dc:	781b      	ldrb	r3, [r3, #0]
 80132de:	2be5      	cmp	r3, #229	; 0xe5
 80132e0:	d004      	beq.n	80132ec <dir_alloc+0x50>
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	6a1b      	ldr	r3, [r3, #32]
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d107      	bne.n	80132fc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	3301      	adds	r3, #1
 80132f0:	613b      	str	r3, [r7, #16]
 80132f2:	693a      	ldr	r2, [r7, #16]
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d102      	bne.n	8013300 <dir_alloc+0x64>
 80132fa:	e00c      	b.n	8013316 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80132fc:	2300      	movs	r3, #0
 80132fe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013300:	2101      	movs	r1, #1
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f7ff ff05 	bl	8013112 <dir_next>
 8013308:	4603      	mov	r3, r0
 801330a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801330c:	7dfb      	ldrb	r3, [r7, #23]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d0d7      	beq.n	80132c2 <dir_alloc+0x26>
 8013312:	e000      	b.n	8013316 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013314:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013316:	7dfb      	ldrb	r3, [r7, #23]
 8013318:	2b04      	cmp	r3, #4
 801331a:	d101      	bne.n	8013320 <dir_alloc+0x84>
 801331c:	2307      	movs	r3, #7
 801331e:	75fb      	strb	r3, [r7, #23]
	return res;
 8013320:	7dfb      	ldrb	r3, [r7, #23]
}
 8013322:	4618      	mov	r0, r3
 8013324:	3718      	adds	r7, #24
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}

0801332a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801332a:	b580      	push	{r7, lr}
 801332c:	b084      	sub	sp, #16
 801332e:	af00      	add	r7, sp, #0
 8013330:	6078      	str	r0, [r7, #4]
 8013332:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	331a      	adds	r3, #26
 8013338:	4618      	mov	r0, r3
 801333a:	f7ff f83f 	bl	80123bc <ld_word>
 801333e:	4603      	mov	r3, r0
 8013340:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	781b      	ldrb	r3, [r3, #0]
 8013346:	2b03      	cmp	r3, #3
 8013348:	d109      	bne.n	801335e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	3314      	adds	r3, #20
 801334e:	4618      	mov	r0, r3
 8013350:	f7ff f834 	bl	80123bc <ld_word>
 8013354:	4603      	mov	r3, r0
 8013356:	041b      	lsls	r3, r3, #16
 8013358:	68fa      	ldr	r2, [r7, #12]
 801335a:	4313      	orrs	r3, r2
 801335c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801335e:	68fb      	ldr	r3, [r7, #12]
}
 8013360:	4618      	mov	r0, r3
 8013362:	3710      	adds	r7, #16
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}

08013368 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b084      	sub	sp, #16
 801336c:	af00      	add	r7, sp, #0
 801336e:	60f8      	str	r0, [r7, #12]
 8013370:	60b9      	str	r1, [r7, #8]
 8013372:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	331a      	adds	r3, #26
 8013378:	687a      	ldr	r2, [r7, #4]
 801337a:	b292      	uxth	r2, r2
 801337c:	4611      	mov	r1, r2
 801337e:	4618      	mov	r0, r3
 8013380:	f7ff f857 	bl	8012432 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	2b03      	cmp	r3, #3
 801338a:	d109      	bne.n	80133a0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801338c:	68bb      	ldr	r3, [r7, #8]
 801338e:	f103 0214 	add.w	r2, r3, #20
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	0c1b      	lsrs	r3, r3, #16
 8013396:	b29b      	uxth	r3, r3
 8013398:	4619      	mov	r1, r3
 801339a:	4610      	mov	r0, r2
 801339c:	f7ff f849 	bl	8012432 <st_word>
	}
}
 80133a0:	bf00      	nop
 80133a2:	3710      	adds	r7, #16
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}

080133a8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b086      	sub	sp, #24
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80133b6:	2100      	movs	r1, #0
 80133b8:	6878      	ldr	r0, [r7, #4]
 80133ba:	f7ff fe2f 	bl	801301c <dir_sdi>
 80133be:	4603      	mov	r3, r0
 80133c0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80133c2:	7dfb      	ldrb	r3, [r7, #23]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d001      	beq.n	80133cc <dir_find+0x24>
 80133c8:	7dfb      	ldrb	r3, [r7, #23]
 80133ca:	e03e      	b.n	801344a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	69db      	ldr	r3, [r3, #28]
 80133d0:	4619      	mov	r1, r3
 80133d2:	6938      	ldr	r0, [r7, #16]
 80133d4:	f7ff faa2 	bl	801291c <move_window>
 80133d8:	4603      	mov	r3, r0
 80133da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80133dc:	7dfb      	ldrb	r3, [r7, #23]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d12f      	bne.n	8013442 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	6a1b      	ldr	r3, [r3, #32]
 80133e6:	781b      	ldrb	r3, [r3, #0]
 80133e8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80133ea:	7bfb      	ldrb	r3, [r7, #15]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d102      	bne.n	80133f6 <dir_find+0x4e>
 80133f0:	2304      	movs	r3, #4
 80133f2:	75fb      	strb	r3, [r7, #23]
 80133f4:	e028      	b.n	8013448 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	6a1b      	ldr	r3, [r3, #32]
 80133fa:	330b      	adds	r3, #11
 80133fc:	781b      	ldrb	r3, [r3, #0]
 80133fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013402:	b2da      	uxtb	r2, r3
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	6a1b      	ldr	r3, [r3, #32]
 801340c:	330b      	adds	r3, #11
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	f003 0308 	and.w	r3, r3, #8
 8013414:	2b00      	cmp	r3, #0
 8013416:	d10a      	bne.n	801342e <dir_find+0x86>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6a18      	ldr	r0, [r3, #32]
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	3324      	adds	r3, #36	; 0x24
 8013420:	220b      	movs	r2, #11
 8013422:	4619      	mov	r1, r3
 8013424:	f7ff f888 	bl	8012538 <mem_cmp>
 8013428:	4603      	mov	r3, r0
 801342a:	2b00      	cmp	r3, #0
 801342c:	d00b      	beq.n	8013446 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801342e:	2100      	movs	r1, #0
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f7ff fe6e 	bl	8013112 <dir_next>
 8013436:	4603      	mov	r3, r0
 8013438:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801343a:	7dfb      	ldrb	r3, [r7, #23]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d0c5      	beq.n	80133cc <dir_find+0x24>
 8013440:	e002      	b.n	8013448 <dir_find+0xa0>
		if (res != FR_OK) break;
 8013442:	bf00      	nop
 8013444:	e000      	b.n	8013448 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013446:	bf00      	nop

	return res;
 8013448:	7dfb      	ldrb	r3, [r7, #23]
}
 801344a:	4618      	mov	r0, r3
 801344c:	3718      	adds	r7, #24
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}

08013452 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013452:	b580      	push	{r7, lr}
 8013454:	b084      	sub	sp, #16
 8013456:	af00      	add	r7, sp, #0
 8013458:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013460:	2101      	movs	r1, #1
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f7ff ff1a 	bl	801329c <dir_alloc>
 8013468:	4603      	mov	r3, r0
 801346a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801346c:	7bfb      	ldrb	r3, [r7, #15]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d11c      	bne.n	80134ac <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	69db      	ldr	r3, [r3, #28]
 8013476:	4619      	mov	r1, r3
 8013478:	68b8      	ldr	r0, [r7, #8]
 801347a:	f7ff fa4f 	bl	801291c <move_window>
 801347e:	4603      	mov	r3, r0
 8013480:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013482:	7bfb      	ldrb	r3, [r7, #15]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d111      	bne.n	80134ac <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	6a1b      	ldr	r3, [r3, #32]
 801348c:	2220      	movs	r2, #32
 801348e:	2100      	movs	r1, #0
 8013490:	4618      	mov	r0, r3
 8013492:	f7ff f836 	bl	8012502 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	6a18      	ldr	r0, [r3, #32]
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	3324      	adds	r3, #36	; 0x24
 801349e:	220b      	movs	r2, #11
 80134a0:	4619      	mov	r1, r3
 80134a2:	f7ff f80d 	bl	80124c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	2201      	movs	r2, #1
 80134aa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80134ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3710      	adds	r7, #16
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
	...

080134b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b088      	sub	sp, #32
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
 80134c0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80134c2:	683b      	ldr	r3, [r7, #0]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	60fb      	str	r3, [r7, #12]
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	3324      	adds	r3, #36	; 0x24
 80134cc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80134ce:	220b      	movs	r2, #11
 80134d0:	2120      	movs	r1, #32
 80134d2:	68b8      	ldr	r0, [r7, #8]
 80134d4:	f7ff f815 	bl	8012502 <mem_set>
	si = i = 0; ni = 8;
 80134d8:	2300      	movs	r3, #0
 80134da:	613b      	str	r3, [r7, #16]
 80134dc:	693b      	ldr	r3, [r7, #16]
 80134de:	61fb      	str	r3, [r7, #28]
 80134e0:	2308      	movs	r3, #8
 80134e2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80134e4:	69fb      	ldr	r3, [r7, #28]
 80134e6:	1c5a      	adds	r2, r3, #1
 80134e8:	61fa      	str	r2, [r7, #28]
 80134ea:	68fa      	ldr	r2, [r7, #12]
 80134ec:	4413      	add	r3, r2
 80134ee:	781b      	ldrb	r3, [r3, #0]
 80134f0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80134f2:	7efb      	ldrb	r3, [r7, #27]
 80134f4:	2b20      	cmp	r3, #32
 80134f6:	d94e      	bls.n	8013596 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80134f8:	7efb      	ldrb	r3, [r7, #27]
 80134fa:	2b2f      	cmp	r3, #47	; 0x2f
 80134fc:	d006      	beq.n	801350c <create_name+0x54>
 80134fe:	7efb      	ldrb	r3, [r7, #27]
 8013500:	2b5c      	cmp	r3, #92	; 0x5c
 8013502:	d110      	bne.n	8013526 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013504:	e002      	b.n	801350c <create_name+0x54>
 8013506:	69fb      	ldr	r3, [r7, #28]
 8013508:	3301      	adds	r3, #1
 801350a:	61fb      	str	r3, [r7, #28]
 801350c:	68fa      	ldr	r2, [r7, #12]
 801350e:	69fb      	ldr	r3, [r7, #28]
 8013510:	4413      	add	r3, r2
 8013512:	781b      	ldrb	r3, [r3, #0]
 8013514:	2b2f      	cmp	r3, #47	; 0x2f
 8013516:	d0f6      	beq.n	8013506 <create_name+0x4e>
 8013518:	68fa      	ldr	r2, [r7, #12]
 801351a:	69fb      	ldr	r3, [r7, #28]
 801351c:	4413      	add	r3, r2
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	2b5c      	cmp	r3, #92	; 0x5c
 8013522:	d0f0      	beq.n	8013506 <create_name+0x4e>
			break;
 8013524:	e038      	b.n	8013598 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013526:	7efb      	ldrb	r3, [r7, #27]
 8013528:	2b2e      	cmp	r3, #46	; 0x2e
 801352a:	d003      	beq.n	8013534 <create_name+0x7c>
 801352c:	693a      	ldr	r2, [r7, #16]
 801352e:	697b      	ldr	r3, [r7, #20]
 8013530:	429a      	cmp	r2, r3
 8013532:	d30c      	bcc.n	801354e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013534:	697b      	ldr	r3, [r7, #20]
 8013536:	2b0b      	cmp	r3, #11
 8013538:	d002      	beq.n	8013540 <create_name+0x88>
 801353a:	7efb      	ldrb	r3, [r7, #27]
 801353c:	2b2e      	cmp	r3, #46	; 0x2e
 801353e:	d001      	beq.n	8013544 <create_name+0x8c>
 8013540:	2306      	movs	r3, #6
 8013542:	e044      	b.n	80135ce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013544:	2308      	movs	r3, #8
 8013546:	613b      	str	r3, [r7, #16]
 8013548:	230b      	movs	r3, #11
 801354a:	617b      	str	r3, [r7, #20]
			continue;
 801354c:	e022      	b.n	8013594 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801354e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013552:	2b00      	cmp	r3, #0
 8013554:	da04      	bge.n	8013560 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013556:	7efb      	ldrb	r3, [r7, #27]
 8013558:	3b80      	subs	r3, #128	; 0x80
 801355a:	4a1f      	ldr	r2, [pc, #124]	; (80135d8 <create_name+0x120>)
 801355c:	5cd3      	ldrb	r3, [r2, r3]
 801355e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013560:	7efb      	ldrb	r3, [r7, #27]
 8013562:	4619      	mov	r1, r3
 8013564:	481d      	ldr	r0, [pc, #116]	; (80135dc <create_name+0x124>)
 8013566:	f7ff f80e 	bl	8012586 <chk_chr>
 801356a:	4603      	mov	r3, r0
 801356c:	2b00      	cmp	r3, #0
 801356e:	d001      	beq.n	8013574 <create_name+0xbc>
 8013570:	2306      	movs	r3, #6
 8013572:	e02c      	b.n	80135ce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013574:	7efb      	ldrb	r3, [r7, #27]
 8013576:	2b60      	cmp	r3, #96	; 0x60
 8013578:	d905      	bls.n	8013586 <create_name+0xce>
 801357a:	7efb      	ldrb	r3, [r7, #27]
 801357c:	2b7a      	cmp	r3, #122	; 0x7a
 801357e:	d802      	bhi.n	8013586 <create_name+0xce>
 8013580:	7efb      	ldrb	r3, [r7, #27]
 8013582:	3b20      	subs	r3, #32
 8013584:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8013586:	693b      	ldr	r3, [r7, #16]
 8013588:	1c5a      	adds	r2, r3, #1
 801358a:	613a      	str	r2, [r7, #16]
 801358c:	68ba      	ldr	r2, [r7, #8]
 801358e:	4413      	add	r3, r2
 8013590:	7efa      	ldrb	r2, [r7, #27]
 8013592:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013594:	e7a6      	b.n	80134e4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013596:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013598:	68fa      	ldr	r2, [r7, #12]
 801359a:	69fb      	ldr	r3, [r7, #28]
 801359c:	441a      	add	r2, r3
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80135a2:	693b      	ldr	r3, [r7, #16]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d101      	bne.n	80135ac <create_name+0xf4>
 80135a8:	2306      	movs	r3, #6
 80135aa:	e010      	b.n	80135ce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	781b      	ldrb	r3, [r3, #0]
 80135b0:	2be5      	cmp	r3, #229	; 0xe5
 80135b2:	d102      	bne.n	80135ba <create_name+0x102>
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	2205      	movs	r2, #5
 80135b8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80135ba:	7efb      	ldrb	r3, [r7, #27]
 80135bc:	2b20      	cmp	r3, #32
 80135be:	d801      	bhi.n	80135c4 <create_name+0x10c>
 80135c0:	2204      	movs	r2, #4
 80135c2:	e000      	b.n	80135c6 <create_name+0x10e>
 80135c4:	2200      	movs	r2, #0
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	330b      	adds	r3, #11
 80135ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80135cc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80135ce:	4618      	mov	r0, r3
 80135d0:	3720      	adds	r7, #32
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}
 80135d6:	bf00      	nop
 80135d8:	08017d5c 	.word	0x08017d5c
 80135dc:	08017cc4 	.word	0x08017cc4

080135e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b086      	sub	sp, #24
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
 80135e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80135f4:	e002      	b.n	80135fc <follow_path+0x1c>
 80135f6:	683b      	ldr	r3, [r7, #0]
 80135f8:	3301      	adds	r3, #1
 80135fa:	603b      	str	r3, [r7, #0]
 80135fc:	683b      	ldr	r3, [r7, #0]
 80135fe:	781b      	ldrb	r3, [r3, #0]
 8013600:	2b2f      	cmp	r3, #47	; 0x2f
 8013602:	d0f8      	beq.n	80135f6 <follow_path+0x16>
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	781b      	ldrb	r3, [r3, #0]
 8013608:	2b5c      	cmp	r3, #92	; 0x5c
 801360a:	d0f4      	beq.n	80135f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	2200      	movs	r2, #0
 8013610:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013612:	683b      	ldr	r3, [r7, #0]
 8013614:	781b      	ldrb	r3, [r3, #0]
 8013616:	2b1f      	cmp	r3, #31
 8013618:	d80a      	bhi.n	8013630 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2280      	movs	r2, #128	; 0x80
 801361e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013622:	2100      	movs	r1, #0
 8013624:	6878      	ldr	r0, [r7, #4]
 8013626:	f7ff fcf9 	bl	801301c <dir_sdi>
 801362a:	4603      	mov	r3, r0
 801362c:	75fb      	strb	r3, [r7, #23]
 801362e:	e043      	b.n	80136b8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013630:	463b      	mov	r3, r7
 8013632:	4619      	mov	r1, r3
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f7ff ff3f 	bl	80134b8 <create_name>
 801363a:	4603      	mov	r3, r0
 801363c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801363e:	7dfb      	ldrb	r3, [r7, #23]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d134      	bne.n	80136ae <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f7ff feaf 	bl	80133a8 <dir_find>
 801364a:	4603      	mov	r3, r0
 801364c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013654:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013656:	7dfb      	ldrb	r3, [r7, #23]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d00a      	beq.n	8013672 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801365c:	7dfb      	ldrb	r3, [r7, #23]
 801365e:	2b04      	cmp	r3, #4
 8013660:	d127      	bne.n	80136b2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013662:	7afb      	ldrb	r3, [r7, #11]
 8013664:	f003 0304 	and.w	r3, r3, #4
 8013668:	2b00      	cmp	r3, #0
 801366a:	d122      	bne.n	80136b2 <follow_path+0xd2>
 801366c:	2305      	movs	r3, #5
 801366e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013670:	e01f      	b.n	80136b2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013672:	7afb      	ldrb	r3, [r7, #11]
 8013674:	f003 0304 	and.w	r3, r3, #4
 8013678:	2b00      	cmp	r3, #0
 801367a:	d11c      	bne.n	80136b6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801367c:	693b      	ldr	r3, [r7, #16]
 801367e:	799b      	ldrb	r3, [r3, #6]
 8013680:	f003 0310 	and.w	r3, r3, #16
 8013684:	2b00      	cmp	r3, #0
 8013686:	d102      	bne.n	801368e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013688:	2305      	movs	r3, #5
 801368a:	75fb      	strb	r3, [r7, #23]
 801368c:	e014      	b.n	80136b8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	695b      	ldr	r3, [r3, #20]
 8013698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801369c:	4413      	add	r3, r2
 801369e:	4619      	mov	r1, r3
 80136a0:	68f8      	ldr	r0, [r7, #12]
 80136a2:	f7ff fe42 	bl	801332a <ld_clust>
 80136a6:	4602      	mov	r2, r0
 80136a8:	693b      	ldr	r3, [r7, #16]
 80136aa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80136ac:	e7c0      	b.n	8013630 <follow_path+0x50>
			if (res != FR_OK) break;
 80136ae:	bf00      	nop
 80136b0:	e002      	b.n	80136b8 <follow_path+0xd8>
				break;
 80136b2:	bf00      	nop
 80136b4:	e000      	b.n	80136b8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80136b6:	bf00      	nop
			}
		}
	}

	return res;
 80136b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80136ba:	4618      	mov	r0, r3
 80136bc:	3718      	adds	r7, #24
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}

080136c2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80136c2:	b480      	push	{r7}
 80136c4:	b087      	sub	sp, #28
 80136c6:	af00      	add	r7, sp, #0
 80136c8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80136ca:	f04f 33ff 	mov.w	r3, #4294967295
 80136ce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d031      	beq.n	801373c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	617b      	str	r3, [r7, #20]
 80136de:	e002      	b.n	80136e6 <get_ldnumber+0x24>
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	3301      	adds	r3, #1
 80136e4:	617b      	str	r3, [r7, #20]
 80136e6:	697b      	ldr	r3, [r7, #20]
 80136e8:	781b      	ldrb	r3, [r3, #0]
 80136ea:	2b20      	cmp	r3, #32
 80136ec:	d903      	bls.n	80136f6 <get_ldnumber+0x34>
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	781b      	ldrb	r3, [r3, #0]
 80136f2:	2b3a      	cmp	r3, #58	; 0x3a
 80136f4:	d1f4      	bne.n	80136e0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80136f6:	697b      	ldr	r3, [r7, #20]
 80136f8:	781b      	ldrb	r3, [r3, #0]
 80136fa:	2b3a      	cmp	r3, #58	; 0x3a
 80136fc:	d11c      	bne.n	8013738 <get_ldnumber+0x76>
			tp = *path;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	1c5a      	adds	r2, r3, #1
 8013708:	60fa      	str	r2, [r7, #12]
 801370a:	781b      	ldrb	r3, [r3, #0]
 801370c:	3b30      	subs	r3, #48	; 0x30
 801370e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	2b09      	cmp	r3, #9
 8013714:	d80e      	bhi.n	8013734 <get_ldnumber+0x72>
 8013716:	68fa      	ldr	r2, [r7, #12]
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	429a      	cmp	r2, r3
 801371c:	d10a      	bne.n	8013734 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d107      	bne.n	8013734 <get_ldnumber+0x72>
					vol = (int)i;
 8013724:	68bb      	ldr	r3, [r7, #8]
 8013726:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013728:	697b      	ldr	r3, [r7, #20]
 801372a:	3301      	adds	r3, #1
 801372c:	617b      	str	r3, [r7, #20]
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	697a      	ldr	r2, [r7, #20]
 8013732:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	e002      	b.n	801373e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013738:	2300      	movs	r3, #0
 801373a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801373c:	693b      	ldr	r3, [r7, #16]
}
 801373e:	4618      	mov	r0, r3
 8013740:	371c      	adds	r7, #28
 8013742:	46bd      	mov	sp, r7
 8013744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013748:	4770      	bx	lr
	...

0801374c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b082      	sub	sp, #8
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2200      	movs	r2, #0
 801375a:	70da      	strb	r2, [r3, #3]
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f04f 32ff 	mov.w	r2, #4294967295
 8013762:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013764:	6839      	ldr	r1, [r7, #0]
 8013766:	6878      	ldr	r0, [r7, #4]
 8013768:	f7ff f8d8 	bl	801291c <move_window>
 801376c:	4603      	mov	r3, r0
 801376e:	2b00      	cmp	r3, #0
 8013770:	d001      	beq.n	8013776 <check_fs+0x2a>
 8013772:	2304      	movs	r3, #4
 8013774:	e038      	b.n	80137e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	3330      	adds	r3, #48	; 0x30
 801377a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801377e:	4618      	mov	r0, r3
 8013780:	f7fe fe1c 	bl	80123bc <ld_word>
 8013784:	4603      	mov	r3, r0
 8013786:	461a      	mov	r2, r3
 8013788:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801378c:	429a      	cmp	r2, r3
 801378e:	d001      	beq.n	8013794 <check_fs+0x48>
 8013790:	2303      	movs	r3, #3
 8013792:	e029      	b.n	80137e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801379a:	2be9      	cmp	r3, #233	; 0xe9
 801379c:	d009      	beq.n	80137b2 <check_fs+0x66>
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80137a4:	2beb      	cmp	r3, #235	; 0xeb
 80137a6:	d11e      	bne.n	80137e6 <check_fs+0x9a>
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80137ae:	2b90      	cmp	r3, #144	; 0x90
 80137b0:	d119      	bne.n	80137e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	3330      	adds	r3, #48	; 0x30
 80137b6:	3336      	adds	r3, #54	; 0x36
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7fe fe17 	bl	80123ec <ld_dword>
 80137be:	4603      	mov	r3, r0
 80137c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80137c4:	4a0a      	ldr	r2, [pc, #40]	; (80137f0 <check_fs+0xa4>)
 80137c6:	4293      	cmp	r3, r2
 80137c8:	d101      	bne.n	80137ce <check_fs+0x82>
 80137ca:	2300      	movs	r3, #0
 80137cc:	e00c      	b.n	80137e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	3330      	adds	r3, #48	; 0x30
 80137d2:	3352      	adds	r3, #82	; 0x52
 80137d4:	4618      	mov	r0, r3
 80137d6:	f7fe fe09 	bl	80123ec <ld_dword>
 80137da:	4603      	mov	r3, r0
 80137dc:	4a05      	ldr	r2, [pc, #20]	; (80137f4 <check_fs+0xa8>)
 80137de:	4293      	cmp	r3, r2
 80137e0:	d101      	bne.n	80137e6 <check_fs+0x9a>
 80137e2:	2300      	movs	r3, #0
 80137e4:	e000      	b.n	80137e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80137e6:	2302      	movs	r3, #2
}
 80137e8:	4618      	mov	r0, r3
 80137ea:	3708      	adds	r7, #8
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}
 80137f0:	00544146 	.word	0x00544146
 80137f4:	33544146 	.word	0x33544146

080137f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b096      	sub	sp, #88	; 0x58
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	60f8      	str	r0, [r7, #12]
 8013800:	60b9      	str	r1, [r7, #8]
 8013802:	4613      	mov	r3, r2
 8013804:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	2200      	movs	r2, #0
 801380a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801380c:	68f8      	ldr	r0, [r7, #12]
 801380e:	f7ff ff58 	bl	80136c2 <get_ldnumber>
 8013812:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013816:	2b00      	cmp	r3, #0
 8013818:	da01      	bge.n	801381e <find_volume+0x26>
 801381a:	230b      	movs	r3, #11
 801381c:	e22d      	b.n	8013c7a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801381e:	4aa1      	ldr	r2, [pc, #644]	; (8013aa4 <find_volume+0x2ac>)
 8013820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013826:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801382a:	2b00      	cmp	r3, #0
 801382c:	d101      	bne.n	8013832 <find_volume+0x3a>
 801382e:	230c      	movs	r3, #12
 8013830:	e223      	b.n	8013c7a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013832:	68bb      	ldr	r3, [r7, #8]
 8013834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013836:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013838:	79fb      	ldrb	r3, [r7, #7]
 801383a:	f023 0301 	bic.w	r3, r3, #1
 801383e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d01a      	beq.n	801387e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801384a:	785b      	ldrb	r3, [r3, #1]
 801384c:	4618      	mov	r0, r3
 801384e:	f7fe fd17 	bl	8012280 <disk_status>
 8013852:	4603      	mov	r3, r0
 8013854:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013858:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801385c:	f003 0301 	and.w	r3, r3, #1
 8013860:	2b00      	cmp	r3, #0
 8013862:	d10c      	bne.n	801387e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013864:	79fb      	ldrb	r3, [r7, #7]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d007      	beq.n	801387a <find_volume+0x82>
 801386a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801386e:	f003 0304 	and.w	r3, r3, #4
 8013872:	2b00      	cmp	r3, #0
 8013874:	d001      	beq.n	801387a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013876:	230a      	movs	r3, #10
 8013878:	e1ff      	b.n	8013c7a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801387a:	2300      	movs	r3, #0
 801387c:	e1fd      	b.n	8013c7a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013880:	2200      	movs	r2, #0
 8013882:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013886:	b2da      	uxtb	r2, r3
 8013888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801388a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801388c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801388e:	785b      	ldrb	r3, [r3, #1]
 8013890:	4618      	mov	r0, r3
 8013892:	f7fe fd0f 	bl	80122b4 <disk_initialize>
 8013896:	4603      	mov	r3, r0
 8013898:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801389c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80138a0:	f003 0301 	and.w	r3, r3, #1
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d001      	beq.n	80138ac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80138a8:	2303      	movs	r3, #3
 80138aa:	e1e6      	b.n	8013c7a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80138ac:	79fb      	ldrb	r3, [r7, #7]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d007      	beq.n	80138c2 <find_volume+0xca>
 80138b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80138b6:	f003 0304 	and.w	r3, r3, #4
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d001      	beq.n	80138c2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80138be:	230a      	movs	r3, #10
 80138c0:	e1db      	b.n	8013c7a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80138c2:	2300      	movs	r3, #0
 80138c4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80138c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80138c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80138ca:	f7ff ff3f 	bl	801374c <check_fs>
 80138ce:	4603      	mov	r3, r0
 80138d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80138d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138d8:	2b02      	cmp	r3, #2
 80138da:	d149      	bne.n	8013970 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80138dc:	2300      	movs	r3, #0
 80138de:	643b      	str	r3, [r7, #64]	; 0x40
 80138e0:	e01e      	b.n	8013920 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80138e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80138e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138ea:	011b      	lsls	r3, r3, #4
 80138ec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80138f0:	4413      	add	r3, r2
 80138f2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80138f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f6:	3304      	adds	r3, #4
 80138f8:	781b      	ldrb	r3, [r3, #0]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d006      	beq.n	801390c <find_volume+0x114>
 80138fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013900:	3308      	adds	r3, #8
 8013902:	4618      	mov	r0, r3
 8013904:	f7fe fd72 	bl	80123ec <ld_dword>
 8013908:	4602      	mov	r2, r0
 801390a:	e000      	b.n	801390e <find_volume+0x116>
 801390c:	2200      	movs	r2, #0
 801390e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013910:	009b      	lsls	r3, r3, #2
 8013912:	3358      	adds	r3, #88	; 0x58
 8013914:	443b      	add	r3, r7
 8013916:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801391a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801391c:	3301      	adds	r3, #1
 801391e:	643b      	str	r3, [r7, #64]	; 0x40
 8013920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013922:	2b03      	cmp	r3, #3
 8013924:	d9dd      	bls.n	80138e2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013926:	2300      	movs	r3, #0
 8013928:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801392a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801392c:	2b00      	cmp	r3, #0
 801392e:	d002      	beq.n	8013936 <find_volume+0x13e>
 8013930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013932:	3b01      	subs	r3, #1
 8013934:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013938:	009b      	lsls	r3, r3, #2
 801393a:	3358      	adds	r3, #88	; 0x58
 801393c:	443b      	add	r3, r7
 801393e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013942:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013946:	2b00      	cmp	r3, #0
 8013948:	d005      	beq.n	8013956 <find_volume+0x15e>
 801394a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801394c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801394e:	f7ff fefd 	bl	801374c <check_fs>
 8013952:	4603      	mov	r3, r0
 8013954:	e000      	b.n	8013958 <find_volume+0x160>
 8013956:	2303      	movs	r3, #3
 8013958:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801395c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013960:	2b01      	cmp	r3, #1
 8013962:	d905      	bls.n	8013970 <find_volume+0x178>
 8013964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013966:	3301      	adds	r3, #1
 8013968:	643b      	str	r3, [r7, #64]	; 0x40
 801396a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801396c:	2b03      	cmp	r3, #3
 801396e:	d9e2      	bls.n	8013936 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013970:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013974:	2b04      	cmp	r3, #4
 8013976:	d101      	bne.n	801397c <find_volume+0x184>
 8013978:	2301      	movs	r3, #1
 801397a:	e17e      	b.n	8013c7a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801397c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013980:	2b01      	cmp	r3, #1
 8013982:	d901      	bls.n	8013988 <find_volume+0x190>
 8013984:	230d      	movs	r3, #13
 8013986:	e178      	b.n	8013c7a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801398a:	3330      	adds	r3, #48	; 0x30
 801398c:	330b      	adds	r3, #11
 801398e:	4618      	mov	r0, r3
 8013990:	f7fe fd14 	bl	80123bc <ld_word>
 8013994:	4603      	mov	r3, r0
 8013996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801399a:	d001      	beq.n	80139a0 <find_volume+0x1a8>
 801399c:	230d      	movs	r3, #13
 801399e:	e16c      	b.n	8013c7a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80139a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a2:	3330      	adds	r3, #48	; 0x30
 80139a4:	3316      	adds	r3, #22
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7fe fd08 	bl	80123bc <ld_word>
 80139ac:	4603      	mov	r3, r0
 80139ae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80139b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d106      	bne.n	80139c4 <find_volume+0x1cc>
 80139b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b8:	3330      	adds	r3, #48	; 0x30
 80139ba:	3324      	adds	r3, #36	; 0x24
 80139bc:	4618      	mov	r0, r3
 80139be:	f7fe fd15 	bl	80123ec <ld_dword>
 80139c2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80139c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80139c8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80139ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139cc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80139d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80139d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139d6:	789b      	ldrb	r3, [r3, #2]
 80139d8:	2b01      	cmp	r3, #1
 80139da:	d005      	beq.n	80139e8 <find_volume+0x1f0>
 80139dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139de:	789b      	ldrb	r3, [r3, #2]
 80139e0:	2b02      	cmp	r3, #2
 80139e2:	d001      	beq.n	80139e8 <find_volume+0x1f0>
 80139e4:	230d      	movs	r3, #13
 80139e6:	e148      	b.n	8013c7a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80139e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ea:	789b      	ldrb	r3, [r3, #2]
 80139ec:	461a      	mov	r2, r3
 80139ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139f0:	fb02 f303 	mul.w	r3, r2, r3
 80139f4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80139f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80139fc:	b29a      	uxth	r2, r3
 80139fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a00:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a04:	895b      	ldrh	r3, [r3, #10]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d008      	beq.n	8013a1c <find_volume+0x224>
 8013a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a0c:	895b      	ldrh	r3, [r3, #10]
 8013a0e:	461a      	mov	r2, r3
 8013a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a12:	895b      	ldrh	r3, [r3, #10]
 8013a14:	3b01      	subs	r3, #1
 8013a16:	4013      	ands	r3, r2
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d001      	beq.n	8013a20 <find_volume+0x228>
 8013a1c:	230d      	movs	r3, #13
 8013a1e:	e12c      	b.n	8013c7a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a22:	3330      	adds	r3, #48	; 0x30
 8013a24:	3311      	adds	r3, #17
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7fe fcc8 	bl	80123bc <ld_word>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	461a      	mov	r2, r3
 8013a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a32:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a36:	891b      	ldrh	r3, [r3, #8]
 8013a38:	f003 030f 	and.w	r3, r3, #15
 8013a3c:	b29b      	uxth	r3, r3
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d001      	beq.n	8013a46 <find_volume+0x24e>
 8013a42:	230d      	movs	r3, #13
 8013a44:	e119      	b.n	8013c7a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a48:	3330      	adds	r3, #48	; 0x30
 8013a4a:	3313      	adds	r3, #19
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7fe fcb5 	bl	80123bc <ld_word>
 8013a52:	4603      	mov	r3, r0
 8013a54:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d106      	bne.n	8013a6a <find_volume+0x272>
 8013a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a5e:	3330      	adds	r3, #48	; 0x30
 8013a60:	3320      	adds	r3, #32
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7fe fcc2 	bl	80123ec <ld_dword>
 8013a68:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a6c:	3330      	adds	r3, #48	; 0x30
 8013a6e:	330e      	adds	r3, #14
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7fe fca3 	bl	80123bc <ld_word>
 8013a76:	4603      	mov	r3, r0
 8013a78:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013a7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d101      	bne.n	8013a84 <find_volume+0x28c>
 8013a80:	230d      	movs	r3, #13
 8013a82:	e0fa      	b.n	8013c7a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013a84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a88:	4413      	add	r3, r2
 8013a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a8c:	8912      	ldrh	r2, [r2, #8]
 8013a8e:	0912      	lsrs	r2, r2, #4
 8013a90:	b292      	uxth	r2, r2
 8013a92:	4413      	add	r3, r2
 8013a94:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d204      	bcs.n	8013aa8 <find_volume+0x2b0>
 8013a9e:	230d      	movs	r3, #13
 8013aa0:	e0eb      	b.n	8013c7a <find_volume+0x482>
 8013aa2:	bf00      	nop
 8013aa4:	24008df0 	.word	0x24008df0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013aa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aac:	1ad3      	subs	r3, r2, r3
 8013aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ab0:	8952      	ldrh	r2, [r2, #10]
 8013ab2:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ab6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d101      	bne.n	8013ac2 <find_volume+0x2ca>
 8013abe:	230d      	movs	r3, #13
 8013ac0:	e0db      	b.n	8013c7a <find_volume+0x482>
		fmt = FS_FAT32;
 8013ac2:	2303      	movs	r3, #3
 8013ac4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aca:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013ace:	4293      	cmp	r3, r2
 8013ad0:	d802      	bhi.n	8013ad8 <find_volume+0x2e0>
 8013ad2:	2302      	movs	r3, #2
 8013ad4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ada:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013ade:	4293      	cmp	r3, r2
 8013ae0:	d802      	bhi.n	8013ae8 <find_volume+0x2f0>
 8013ae2:	2301      	movs	r3, #1
 8013ae4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aea:	1c9a      	adds	r2, r3, #2
 8013aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aee:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8013af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013af4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013af6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013afa:	441a      	add	r2, r3
 8013afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013afe:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8013b00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b04:	441a      	add	r2, r3
 8013b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b08:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8013b0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b0e:	2b03      	cmp	r3, #3
 8013b10:	d11e      	bne.n	8013b50 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b14:	3330      	adds	r3, #48	; 0x30
 8013b16:	332a      	adds	r3, #42	; 0x2a
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7fe fc4f 	bl	80123bc <ld_word>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d001      	beq.n	8013b28 <find_volume+0x330>
 8013b24:	230d      	movs	r3, #13
 8013b26:	e0a8      	b.n	8013c7a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b2a:	891b      	ldrh	r3, [r3, #8]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d001      	beq.n	8013b34 <find_volume+0x33c>
 8013b30:	230d      	movs	r3, #13
 8013b32:	e0a2      	b.n	8013c7a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b36:	3330      	adds	r3, #48	; 0x30
 8013b38:	332c      	adds	r3, #44	; 0x2c
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f7fe fc56 	bl	80123ec <ld_dword>
 8013b40:	4602      	mov	r2, r0
 8013b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b44:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b48:	695b      	ldr	r3, [r3, #20]
 8013b4a:	009b      	lsls	r3, r3, #2
 8013b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8013b4e:	e01f      	b.n	8013b90 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b52:	891b      	ldrh	r3, [r3, #8]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d101      	bne.n	8013b5c <find_volume+0x364>
 8013b58:	230d      	movs	r3, #13
 8013b5a:	e08e      	b.n	8013c7a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b5e:	6a1a      	ldr	r2, [r3, #32]
 8013b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b62:	441a      	add	r2, r3
 8013b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b66:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013b68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b6c:	2b02      	cmp	r3, #2
 8013b6e:	d103      	bne.n	8013b78 <find_volume+0x380>
 8013b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b72:	695b      	ldr	r3, [r3, #20]
 8013b74:	005b      	lsls	r3, r3, #1
 8013b76:	e00a      	b.n	8013b8e <find_volume+0x396>
 8013b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b7a:	695a      	ldr	r2, [r3, #20]
 8013b7c:	4613      	mov	r3, r2
 8013b7e:	005b      	lsls	r3, r3, #1
 8013b80:	4413      	add	r3, r2
 8013b82:	085a      	lsrs	r2, r3, #1
 8013b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b86:	695b      	ldr	r3, [r3, #20]
 8013b88:	f003 0301 	and.w	r3, r3, #1
 8013b8c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013b8e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b92:	699a      	ldr	r2, [r3, #24]
 8013b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b96:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013b9a:	0a5b      	lsrs	r3, r3, #9
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	d201      	bcs.n	8013ba4 <find_volume+0x3ac>
 8013ba0:	230d      	movs	r3, #13
 8013ba2:	e06a      	b.n	8013c7a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8013baa:	611a      	str	r2, [r3, #16]
 8013bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bae:	691a      	ldr	r2, [r3, #16]
 8013bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bb2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bb6:	2280      	movs	r2, #128	; 0x80
 8013bb8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013bba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013bbe:	2b03      	cmp	r3, #3
 8013bc0:	d149      	bne.n	8013c56 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc4:	3330      	adds	r3, #48	; 0x30
 8013bc6:	3330      	adds	r3, #48	; 0x30
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7fe fbf7 	bl	80123bc <ld_word>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	2b01      	cmp	r3, #1
 8013bd2:	d140      	bne.n	8013c56 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bd6:	3301      	adds	r3, #1
 8013bd8:	4619      	mov	r1, r3
 8013bda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013bdc:	f7fe fe9e 	bl	801291c <move_window>
 8013be0:	4603      	mov	r3, r0
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d137      	bne.n	8013c56 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8013be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013be8:	2200      	movs	r2, #0
 8013bea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bee:	3330      	adds	r3, #48	; 0x30
 8013bf0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f7fe fbe1 	bl	80123bc <ld_word>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	461a      	mov	r2, r3
 8013bfe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d127      	bne.n	8013c56 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c08:	3330      	adds	r3, #48	; 0x30
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7fe fbee 	bl	80123ec <ld_dword>
 8013c10:	4603      	mov	r3, r0
 8013c12:	4a1c      	ldr	r2, [pc, #112]	; (8013c84 <find_volume+0x48c>)
 8013c14:	4293      	cmp	r3, r2
 8013c16:	d11e      	bne.n	8013c56 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c1a:	3330      	adds	r3, #48	; 0x30
 8013c1c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7fe fbe3 	bl	80123ec <ld_dword>
 8013c26:	4603      	mov	r3, r0
 8013c28:	4a17      	ldr	r2, [pc, #92]	; (8013c88 <find_volume+0x490>)
 8013c2a:	4293      	cmp	r3, r2
 8013c2c:	d113      	bne.n	8013c56 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c30:	3330      	adds	r3, #48	; 0x30
 8013c32:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7fe fbd8 	bl	80123ec <ld_dword>
 8013c3c:	4602      	mov	r2, r0
 8013c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c40:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c44:	3330      	adds	r3, #48	; 0x30
 8013c46:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f7fe fbce 	bl	80123ec <ld_dword>
 8013c50:	4602      	mov	r2, r0
 8013c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c54:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c58:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013c5c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013c5e:	4b0b      	ldr	r3, [pc, #44]	; (8013c8c <find_volume+0x494>)
 8013c60:	881b      	ldrh	r3, [r3, #0]
 8013c62:	3301      	adds	r3, #1
 8013c64:	b29a      	uxth	r2, r3
 8013c66:	4b09      	ldr	r3, [pc, #36]	; (8013c8c <find_volume+0x494>)
 8013c68:	801a      	strh	r2, [r3, #0]
 8013c6a:	4b08      	ldr	r3, [pc, #32]	; (8013c8c <find_volume+0x494>)
 8013c6c:	881a      	ldrh	r2, [r3, #0]
 8013c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c70:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013c72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013c74:	f7fe fdea 	bl	801284c <clear_lock>
#endif
	return FR_OK;
 8013c78:	2300      	movs	r3, #0
}
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	3758      	adds	r7, #88	; 0x58
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}
 8013c82:	bf00      	nop
 8013c84:	41615252 	.word	0x41615252
 8013c88:	61417272 	.word	0x61417272
 8013c8c:	24008df4 	.word	0x24008df4

08013c90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
 8013c98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013c9a:	2309      	movs	r3, #9
 8013c9c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d01c      	beq.n	8013cde <validate+0x4e>
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d018      	beq.n	8013cde <validate+0x4e>
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	781b      	ldrb	r3, [r3, #0]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d013      	beq.n	8013cde <validate+0x4e>
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	889a      	ldrh	r2, [r3, #4]
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	88db      	ldrh	r3, [r3, #6]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d10c      	bne.n	8013cde <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	785b      	ldrb	r3, [r3, #1]
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f7fe fad8 	bl	8012280 <disk_status>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	f003 0301 	and.w	r3, r3, #1
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d101      	bne.n	8013cde <validate+0x4e>
			res = FR_OK;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013cde:	7bfb      	ldrb	r3, [r7, #15]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d102      	bne.n	8013cea <validate+0x5a>
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	e000      	b.n	8013cec <validate+0x5c>
 8013cea:	2300      	movs	r3, #0
 8013cec:	683a      	ldr	r2, [r7, #0]
 8013cee:	6013      	str	r3, [r2, #0]
	return res;
 8013cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	3710      	adds	r7, #16
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	bd80      	pop	{r7, pc}
	...

08013cfc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b088      	sub	sp, #32
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	60f8      	str	r0, [r7, #12]
 8013d04:	60b9      	str	r1, [r7, #8]
 8013d06:	4613      	mov	r3, r2
 8013d08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013d0e:	f107 0310 	add.w	r3, r7, #16
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7ff fcd5 	bl	80136c2 <get_ldnumber>
 8013d18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013d1a:	69fb      	ldr	r3, [r7, #28]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	da01      	bge.n	8013d24 <f_mount+0x28>
 8013d20:	230b      	movs	r3, #11
 8013d22:	e02b      	b.n	8013d7c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013d24:	4a17      	ldr	r2, [pc, #92]	; (8013d84 <f_mount+0x88>)
 8013d26:	69fb      	ldr	r3, [r7, #28]
 8013d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013d2e:	69bb      	ldr	r3, [r7, #24]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d005      	beq.n	8013d40 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013d34:	69b8      	ldr	r0, [r7, #24]
 8013d36:	f7fe fd89 	bl	801284c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013d3a:	69bb      	ldr	r3, [r7, #24]
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d002      	beq.n	8013d4c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	2200      	movs	r2, #0
 8013d4a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013d4c:	68fa      	ldr	r2, [r7, #12]
 8013d4e:	490d      	ldr	r1, [pc, #52]	; (8013d84 <f_mount+0x88>)
 8013d50:	69fb      	ldr	r3, [r7, #28]
 8013d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d002      	beq.n	8013d62 <f_mount+0x66>
 8013d5c:	79fb      	ldrb	r3, [r7, #7]
 8013d5e:	2b01      	cmp	r3, #1
 8013d60:	d001      	beq.n	8013d66 <f_mount+0x6a>
 8013d62:	2300      	movs	r3, #0
 8013d64:	e00a      	b.n	8013d7c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013d66:	f107 010c 	add.w	r1, r7, #12
 8013d6a:	f107 0308 	add.w	r3, r7, #8
 8013d6e:	2200      	movs	r2, #0
 8013d70:	4618      	mov	r0, r3
 8013d72:	f7ff fd41 	bl	80137f8 <find_volume>
 8013d76:	4603      	mov	r3, r0
 8013d78:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3720      	adds	r7, #32
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	24008df0 	.word	0x24008df0

08013d88 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b098      	sub	sp, #96	; 0x60
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	60f8      	str	r0, [r7, #12]
 8013d90:	60b9      	str	r1, [r7, #8]
 8013d92:	4613      	mov	r3, r2
 8013d94:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d101      	bne.n	8013da0 <f_open+0x18>
 8013d9c:	2309      	movs	r3, #9
 8013d9e:	e1ad      	b.n	80140fc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013da0:	79fb      	ldrb	r3, [r7, #7]
 8013da2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013da6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013da8:	79fa      	ldrb	r2, [r7, #7]
 8013daa:	f107 0110 	add.w	r1, r7, #16
 8013dae:	f107 0308 	add.w	r3, r7, #8
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7ff fd20 	bl	80137f8 <find_volume>
 8013db8:	4603      	mov	r3, r0
 8013dba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013dbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	f040 8191 	bne.w	80140ea <f_open+0x362>
		dj.obj.fs = fs;
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013dcc:	68ba      	ldr	r2, [r7, #8]
 8013dce:	f107 0314 	add.w	r3, r7, #20
 8013dd2:	4611      	mov	r1, r2
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f7ff fc03 	bl	80135e0 <follow_path>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013de0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d11a      	bne.n	8013e1e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013de8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013dec:	b25b      	sxtb	r3, r3
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	da03      	bge.n	8013dfa <f_open+0x72>
				res = FR_INVALID_NAME;
 8013df2:	2306      	movs	r3, #6
 8013df4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013df8:	e011      	b.n	8013e1e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013dfa:	79fb      	ldrb	r3, [r7, #7]
 8013dfc:	f023 0301 	bic.w	r3, r3, #1
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	bf14      	ite	ne
 8013e04:	2301      	movne	r3, #1
 8013e06:	2300      	moveq	r3, #0
 8013e08:	b2db      	uxtb	r3, r3
 8013e0a:	461a      	mov	r2, r3
 8013e0c:	f107 0314 	add.w	r3, r7, #20
 8013e10:	4611      	mov	r1, r2
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7fe fbd2 	bl	80125bc <chk_lock>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013e1e:	79fb      	ldrb	r3, [r7, #7]
 8013e20:	f003 031c 	and.w	r3, r3, #28
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d07f      	beq.n	8013f28 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013e28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d017      	beq.n	8013e60 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013e30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e34:	2b04      	cmp	r3, #4
 8013e36:	d10e      	bne.n	8013e56 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013e38:	f7fe fc1c 	bl	8012674 <enq_lock>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d006      	beq.n	8013e50 <f_open+0xc8>
 8013e42:	f107 0314 	add.w	r3, r7, #20
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7ff fb03 	bl	8013452 <dir_register>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	e000      	b.n	8013e52 <f_open+0xca>
 8013e50:	2312      	movs	r3, #18
 8013e52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013e56:	79fb      	ldrb	r3, [r7, #7]
 8013e58:	f043 0308 	orr.w	r3, r3, #8
 8013e5c:	71fb      	strb	r3, [r7, #7]
 8013e5e:	e010      	b.n	8013e82 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013e60:	7ebb      	ldrb	r3, [r7, #26]
 8013e62:	f003 0311 	and.w	r3, r3, #17
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d003      	beq.n	8013e72 <f_open+0xea>
					res = FR_DENIED;
 8013e6a:	2307      	movs	r3, #7
 8013e6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013e70:	e007      	b.n	8013e82 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013e72:	79fb      	ldrb	r3, [r7, #7]
 8013e74:	f003 0304 	and.w	r3, r3, #4
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d002      	beq.n	8013e82 <f_open+0xfa>
 8013e7c:	2308      	movs	r3, #8
 8013e7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013e82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d168      	bne.n	8013f5c <f_open+0x1d4>
 8013e8a:	79fb      	ldrb	r3, [r7, #7]
 8013e8c:	f003 0308 	and.w	r3, r3, #8
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d063      	beq.n	8013f5c <f_open+0x1d4>
				dw = GET_FATTIME();
 8013e94:	f7fd ffd2 	bl	8011e3c <get_fattime>
 8013e98:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e9c:	330e      	adds	r3, #14
 8013e9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	f7fe fae1 	bl	8012468 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ea8:	3316      	adds	r3, #22
 8013eaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7fe fadb 	bl	8012468 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eb4:	330b      	adds	r3, #11
 8013eb6:	2220      	movs	r2, #32
 8013eb8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ebe:	4611      	mov	r1, r2
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f7ff fa32 	bl	801332a <ld_clust>
 8013ec6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013ec8:	693b      	ldr	r3, [r7, #16]
 8013eca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013ecc:	2200      	movs	r2, #0
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f7ff fa4a 	bl	8013368 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ed6:	331c      	adds	r3, #28
 8013ed8:	2100      	movs	r1, #0
 8013eda:	4618      	mov	r0, r3
 8013edc:	f7fe fac4 	bl	8012468 <st_dword>
					fs->wflag = 1;
 8013ee0:	693b      	ldr	r3, [r7, #16]
 8013ee2:	2201      	movs	r2, #1
 8013ee4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d037      	beq.n	8013f5c <f_open+0x1d4>
						dw = fs->winsect;
 8013eec:	693b      	ldr	r3, [r7, #16]
 8013eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ef0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013ef2:	f107 0314 	add.w	r3, r7, #20
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7fe ff5d 	bl	8012dba <remove_chain>
 8013f00:	4603      	mov	r3, r0
 8013f02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013f06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d126      	bne.n	8013f5c <f_open+0x1d4>
							res = move_window(fs, dw);
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013f12:	4618      	mov	r0, r3
 8013f14:	f7fe fd02 	bl	801291c <move_window>
 8013f18:	4603      	mov	r3, r0
 8013f1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013f22:	3a01      	subs	r2, #1
 8013f24:	60da      	str	r2, [r3, #12]
 8013f26:	e019      	b.n	8013f5c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013f28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d115      	bne.n	8013f5c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013f30:	7ebb      	ldrb	r3, [r7, #26]
 8013f32:	f003 0310 	and.w	r3, r3, #16
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d003      	beq.n	8013f42 <f_open+0x1ba>
					res = FR_NO_FILE;
 8013f3a:	2304      	movs	r3, #4
 8013f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013f40:	e00c      	b.n	8013f5c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013f42:	79fb      	ldrb	r3, [r7, #7]
 8013f44:	f003 0302 	and.w	r3, r3, #2
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d007      	beq.n	8013f5c <f_open+0x1d4>
 8013f4c:	7ebb      	ldrb	r3, [r7, #26]
 8013f4e:	f003 0301 	and.w	r3, r3, #1
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d002      	beq.n	8013f5c <f_open+0x1d4>
						res = FR_DENIED;
 8013f56:	2307      	movs	r3, #7
 8013f58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013f5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d128      	bne.n	8013fb6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013f64:	79fb      	ldrb	r3, [r7, #7]
 8013f66:	f003 0308 	and.w	r3, r3, #8
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d003      	beq.n	8013f76 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8013f6e:	79fb      	ldrb	r3, [r7, #7]
 8013f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f74:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013f84:	79fb      	ldrb	r3, [r7, #7]
 8013f86:	f023 0301 	bic.w	r3, r3, #1
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	bf14      	ite	ne
 8013f8e:	2301      	movne	r3, #1
 8013f90:	2300      	moveq	r3, #0
 8013f92:	b2db      	uxtb	r3, r3
 8013f94:	461a      	mov	r2, r3
 8013f96:	f107 0314 	add.w	r3, r7, #20
 8013f9a:	4611      	mov	r1, r2
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f7fe fb8b 	bl	80126b8 <inc_lock>
 8013fa2:	4602      	mov	r2, r0
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	691b      	ldr	r3, [r3, #16]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d102      	bne.n	8013fb6 <f_open+0x22e>
 8013fb0:	2302      	movs	r3, #2
 8013fb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013fb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	f040 8095 	bne.w	80140ea <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013fc0:	693b      	ldr	r3, [r7, #16]
 8013fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fc4:	4611      	mov	r1, r2
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7ff f9af 	bl	801332a <ld_clust>
 8013fcc:	4602      	mov	r2, r0
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fd4:	331c      	adds	r3, #28
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7fe fa08 	bl	80123ec <ld_dword>
 8013fdc:	4602      	mov	r2, r0
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013fe8:	693a      	ldr	r2, [r7, #16]
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	88da      	ldrh	r2, [r3, #6]
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	79fa      	ldrb	r2, [r7, #7]
 8013ffa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	2200      	movs	r2, #0
 8014000:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	2200      	movs	r2, #0
 8014006:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	2200      	movs	r2, #0
 801400c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	3330      	adds	r3, #48	; 0x30
 8014012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014016:	2100      	movs	r1, #0
 8014018:	4618      	mov	r0, r3
 801401a:	f7fe fa72 	bl	8012502 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801401e:	79fb      	ldrb	r3, [r7, #7]
 8014020:	f003 0320 	and.w	r3, r3, #32
 8014024:	2b00      	cmp	r3, #0
 8014026:	d060      	beq.n	80140ea <f_open+0x362>
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	68db      	ldr	r3, [r3, #12]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d05c      	beq.n	80140ea <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	68da      	ldr	r2, [r3, #12]
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014038:	693b      	ldr	r3, [r7, #16]
 801403a:	895b      	ldrh	r3, [r3, #10]
 801403c:	025b      	lsls	r3, r3, #9
 801403e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	689b      	ldr	r3, [r3, #8]
 8014044:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	68db      	ldr	r3, [r3, #12]
 801404a:	657b      	str	r3, [r7, #84]	; 0x54
 801404c:	e016      	b.n	801407c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014052:	4618      	mov	r0, r3
 8014054:	f7fe fd1d 	bl	8012a92 <get_fat>
 8014058:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801405a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801405c:	2b01      	cmp	r3, #1
 801405e:	d802      	bhi.n	8014066 <f_open+0x2de>
 8014060:	2302      	movs	r3, #2
 8014062:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014066:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014068:	f1b3 3fff 	cmp.w	r3, #4294967295
 801406c:	d102      	bne.n	8014074 <f_open+0x2ec>
 801406e:	2301      	movs	r3, #1
 8014070:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014074:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014078:	1ad3      	subs	r3, r2, r3
 801407a:	657b      	str	r3, [r7, #84]	; 0x54
 801407c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014080:	2b00      	cmp	r3, #0
 8014082:	d103      	bne.n	801408c <f_open+0x304>
 8014084:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014088:	429a      	cmp	r2, r3
 801408a:	d8e0      	bhi.n	801404e <f_open+0x2c6>
				}
				fp->clust = clst;
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014090:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014092:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014096:	2b00      	cmp	r3, #0
 8014098:	d127      	bne.n	80140ea <f_open+0x362>
 801409a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801409c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d022      	beq.n	80140ea <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80140a4:	693b      	ldr	r3, [r7, #16]
 80140a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80140a8:	4618      	mov	r0, r3
 80140aa:	f7fe fcd3 	bl	8012a54 <clust2sect>
 80140ae:	6478      	str	r0, [r7, #68]	; 0x44
 80140b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d103      	bne.n	80140be <f_open+0x336>
						res = FR_INT_ERR;
 80140b6:	2302      	movs	r3, #2
 80140b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80140bc:	e015      	b.n	80140ea <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80140be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80140c0:	0a5a      	lsrs	r2, r3, #9
 80140c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140c4:	441a      	add	r2, r3
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80140ca:	693b      	ldr	r3, [r7, #16]
 80140cc:	7858      	ldrb	r0, [r3, #1]
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	6a1a      	ldr	r2, [r3, #32]
 80140d8:	2301      	movs	r3, #1
 80140da:	f7fe f911 	bl	8012300 <disk_read>
 80140de:	4603      	mov	r3, r0
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d002      	beq.n	80140ea <f_open+0x362>
 80140e4:	2301      	movs	r3, #1
 80140e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80140ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d002      	beq.n	80140f8 <f_open+0x370>
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	2200      	movs	r2, #0
 80140f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80140f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80140fc:	4618      	mov	r0, r3
 80140fe:	3760      	adds	r7, #96	; 0x60
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}

08014104 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b08e      	sub	sp, #56	; 0x38
 8014108:	af00      	add	r7, sp, #0
 801410a:	60f8      	str	r0, [r7, #12]
 801410c:	60b9      	str	r1, [r7, #8]
 801410e:	607a      	str	r2, [r7, #4]
 8014110:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	2200      	movs	r2, #0
 801411a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	f107 0214 	add.w	r2, r7, #20
 8014122:	4611      	mov	r1, r2
 8014124:	4618      	mov	r0, r3
 8014126:	f7ff fdb3 	bl	8013c90 <validate>
 801412a:	4603      	mov	r3, r0
 801412c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014130:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014134:	2b00      	cmp	r3, #0
 8014136:	d107      	bne.n	8014148 <f_read+0x44>
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	7d5b      	ldrb	r3, [r3, #21]
 801413c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014140:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014144:	2b00      	cmp	r3, #0
 8014146:	d002      	beq.n	801414e <f_read+0x4a>
 8014148:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801414c:	e115      	b.n	801437a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	7d1b      	ldrb	r3, [r3, #20]
 8014152:	f003 0301 	and.w	r3, r3, #1
 8014156:	2b00      	cmp	r3, #0
 8014158:	d101      	bne.n	801415e <f_read+0x5a>
 801415a:	2307      	movs	r3, #7
 801415c:	e10d      	b.n	801437a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	68da      	ldr	r2, [r3, #12]
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	699b      	ldr	r3, [r3, #24]
 8014166:	1ad3      	subs	r3, r2, r3
 8014168:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801416a:	687a      	ldr	r2, [r7, #4]
 801416c:	6a3b      	ldr	r3, [r7, #32]
 801416e:	429a      	cmp	r2, r3
 8014170:	f240 80fe 	bls.w	8014370 <f_read+0x26c>
 8014174:	6a3b      	ldr	r3, [r7, #32]
 8014176:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014178:	e0fa      	b.n	8014370 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	699b      	ldr	r3, [r3, #24]
 801417e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014182:	2b00      	cmp	r3, #0
 8014184:	f040 80c6 	bne.w	8014314 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	699b      	ldr	r3, [r3, #24]
 801418c:	0a5b      	lsrs	r3, r3, #9
 801418e:	697a      	ldr	r2, [r7, #20]
 8014190:	8952      	ldrh	r2, [r2, #10]
 8014192:	3a01      	subs	r2, #1
 8014194:	4013      	ands	r3, r2
 8014196:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014198:	69fb      	ldr	r3, [r7, #28]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d12f      	bne.n	80141fe <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	699b      	ldr	r3, [r3, #24]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d103      	bne.n	80141ae <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	689b      	ldr	r3, [r3, #8]
 80141aa:	633b      	str	r3, [r7, #48]	; 0x30
 80141ac:	e013      	b.n	80141d6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d007      	beq.n	80141c6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	699b      	ldr	r3, [r3, #24]
 80141ba:	4619      	mov	r1, r3
 80141bc:	68f8      	ldr	r0, [r7, #12]
 80141be:	f7fe fef9 	bl	8012fb4 <clmt_clust>
 80141c2:	6338      	str	r0, [r7, #48]	; 0x30
 80141c4:	e007      	b.n	80141d6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80141c6:	68fa      	ldr	r2, [r7, #12]
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	69db      	ldr	r3, [r3, #28]
 80141cc:	4619      	mov	r1, r3
 80141ce:	4610      	mov	r0, r2
 80141d0:	f7fe fc5f 	bl	8012a92 <get_fat>
 80141d4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80141d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d8:	2b01      	cmp	r3, #1
 80141da:	d804      	bhi.n	80141e6 <f_read+0xe2>
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	2202      	movs	r2, #2
 80141e0:	755a      	strb	r2, [r3, #21]
 80141e2:	2302      	movs	r3, #2
 80141e4:	e0c9      	b.n	801437a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80141e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141ec:	d104      	bne.n	80141f8 <f_read+0xf4>
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	2201      	movs	r2, #1
 80141f2:	755a      	strb	r2, [r3, #21]
 80141f4:	2301      	movs	r3, #1
 80141f6:	e0c0      	b.n	801437a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141fc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80141fe:	697a      	ldr	r2, [r7, #20]
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	69db      	ldr	r3, [r3, #28]
 8014204:	4619      	mov	r1, r3
 8014206:	4610      	mov	r0, r2
 8014208:	f7fe fc24 	bl	8012a54 <clust2sect>
 801420c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801420e:	69bb      	ldr	r3, [r7, #24]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d104      	bne.n	801421e <f_read+0x11a>
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	2202      	movs	r2, #2
 8014218:	755a      	strb	r2, [r3, #21]
 801421a:	2302      	movs	r3, #2
 801421c:	e0ad      	b.n	801437a <f_read+0x276>
			sect += csect;
 801421e:	69ba      	ldr	r2, [r7, #24]
 8014220:	69fb      	ldr	r3, [r7, #28]
 8014222:	4413      	add	r3, r2
 8014224:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	0a5b      	lsrs	r3, r3, #9
 801422a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801422e:	2b00      	cmp	r3, #0
 8014230:	d039      	beq.n	80142a6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014232:	69fa      	ldr	r2, [r7, #28]
 8014234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014236:	4413      	add	r3, r2
 8014238:	697a      	ldr	r2, [r7, #20]
 801423a:	8952      	ldrh	r2, [r2, #10]
 801423c:	4293      	cmp	r3, r2
 801423e:	d905      	bls.n	801424c <f_read+0x148>
					cc = fs->csize - csect;
 8014240:	697b      	ldr	r3, [r7, #20]
 8014242:	895b      	ldrh	r3, [r3, #10]
 8014244:	461a      	mov	r2, r3
 8014246:	69fb      	ldr	r3, [r7, #28]
 8014248:	1ad3      	subs	r3, r2, r3
 801424a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	7858      	ldrb	r0, [r3, #1]
 8014250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014252:	69ba      	ldr	r2, [r7, #24]
 8014254:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014256:	f7fe f853 	bl	8012300 <disk_read>
 801425a:	4603      	mov	r3, r0
 801425c:	2b00      	cmp	r3, #0
 801425e:	d004      	beq.n	801426a <f_read+0x166>
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	2201      	movs	r2, #1
 8014264:	755a      	strb	r2, [r3, #21]
 8014266:	2301      	movs	r3, #1
 8014268:	e087      	b.n	801437a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	7d1b      	ldrb	r3, [r3, #20]
 801426e:	b25b      	sxtb	r3, r3
 8014270:	2b00      	cmp	r3, #0
 8014272:	da14      	bge.n	801429e <f_read+0x19a>
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	6a1a      	ldr	r2, [r3, #32]
 8014278:	69bb      	ldr	r3, [r7, #24]
 801427a:	1ad3      	subs	r3, r2, r3
 801427c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801427e:	429a      	cmp	r2, r3
 8014280:	d90d      	bls.n	801429e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	6a1a      	ldr	r2, [r3, #32]
 8014286:	69bb      	ldr	r3, [r7, #24]
 8014288:	1ad3      	subs	r3, r2, r3
 801428a:	025b      	lsls	r3, r3, #9
 801428c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801428e:	18d0      	adds	r0, r2, r3
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	3330      	adds	r3, #48	; 0x30
 8014294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014298:	4619      	mov	r1, r3
 801429a:	f7fe f911 	bl	80124c0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a0:	025b      	lsls	r3, r3, #9
 80142a2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80142a4:	e050      	b.n	8014348 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	6a1b      	ldr	r3, [r3, #32]
 80142aa:	69ba      	ldr	r2, [r7, #24]
 80142ac:	429a      	cmp	r2, r3
 80142ae:	d02e      	beq.n	801430e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	7d1b      	ldrb	r3, [r3, #20]
 80142b4:	b25b      	sxtb	r3, r3
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	da18      	bge.n	80142ec <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80142ba:	697b      	ldr	r3, [r7, #20]
 80142bc:	7858      	ldrb	r0, [r3, #1]
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	6a1a      	ldr	r2, [r3, #32]
 80142c8:	2301      	movs	r3, #1
 80142ca:	f7fe f839 	bl	8012340 <disk_write>
 80142ce:	4603      	mov	r3, r0
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d004      	beq.n	80142de <f_read+0x1da>
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	2201      	movs	r2, #1
 80142d8:	755a      	strb	r2, [r3, #21]
 80142da:	2301      	movs	r3, #1
 80142dc:	e04d      	b.n	801437a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	7d1b      	ldrb	r3, [r3, #20]
 80142e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80142e6:	b2da      	uxtb	r2, r3
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80142ec:	697b      	ldr	r3, [r7, #20]
 80142ee:	7858      	ldrb	r0, [r3, #1]
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80142f6:	2301      	movs	r3, #1
 80142f8:	69ba      	ldr	r2, [r7, #24]
 80142fa:	f7fe f801 	bl	8012300 <disk_read>
 80142fe:	4603      	mov	r3, r0
 8014300:	2b00      	cmp	r3, #0
 8014302:	d004      	beq.n	801430e <f_read+0x20a>
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	2201      	movs	r2, #1
 8014308:	755a      	strb	r2, [r3, #21]
 801430a:	2301      	movs	r3, #1
 801430c:	e035      	b.n	801437a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	69ba      	ldr	r2, [r7, #24]
 8014312:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	699b      	ldr	r3, [r3, #24]
 8014318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801431c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014320:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	429a      	cmp	r2, r3
 8014328:	d901      	bls.n	801432e <f_read+0x22a>
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	699b      	ldr	r3, [r3, #24]
 8014338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801433c:	4413      	add	r3, r2
 801433e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014340:	4619      	mov	r1, r3
 8014342:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014344:	f7fe f8bc 	bl	80124c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801434c:	4413      	add	r3, r2
 801434e:	627b      	str	r3, [r7, #36]	; 0x24
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	699a      	ldr	r2, [r3, #24]
 8014354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014356:	441a      	add	r2, r3
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	619a      	str	r2, [r3, #24]
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	681a      	ldr	r2, [r3, #0]
 8014360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014362:	441a      	add	r2, r3
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	601a      	str	r2, [r3, #0]
 8014368:	687a      	ldr	r2, [r7, #4]
 801436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801436c:	1ad3      	subs	r3, r2, r3
 801436e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	2b00      	cmp	r3, #0
 8014374:	f47f af01 	bne.w	801417a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014378:	2300      	movs	r3, #0
}
 801437a:	4618      	mov	r0, r3
 801437c:	3738      	adds	r7, #56	; 0x38
 801437e:	46bd      	mov	sp, r7
 8014380:	bd80      	pop	{r7, pc}

08014382 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014382:	b580      	push	{r7, lr}
 8014384:	b08c      	sub	sp, #48	; 0x30
 8014386:	af00      	add	r7, sp, #0
 8014388:	60f8      	str	r0, [r7, #12]
 801438a:	60b9      	str	r1, [r7, #8]
 801438c:	607a      	str	r2, [r7, #4]
 801438e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	2200      	movs	r2, #0
 8014398:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	f107 0210 	add.w	r2, r7, #16
 80143a0:	4611      	mov	r1, r2
 80143a2:	4618      	mov	r0, r3
 80143a4:	f7ff fc74 	bl	8013c90 <validate>
 80143a8:	4603      	mov	r3, r0
 80143aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80143ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d107      	bne.n	80143c6 <f_write+0x44>
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	7d5b      	ldrb	r3, [r3, #21]
 80143ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80143be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d002      	beq.n	80143cc <f_write+0x4a>
 80143c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143ca:	e14b      	b.n	8014664 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	7d1b      	ldrb	r3, [r3, #20]
 80143d0:	f003 0302 	and.w	r3, r3, #2
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d101      	bne.n	80143dc <f_write+0x5a>
 80143d8:	2307      	movs	r3, #7
 80143da:	e143      	b.n	8014664 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	699a      	ldr	r2, [r3, #24]
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	441a      	add	r2, r3
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	699b      	ldr	r3, [r3, #24]
 80143e8:	429a      	cmp	r2, r3
 80143ea:	f080 812d 	bcs.w	8014648 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	699b      	ldr	r3, [r3, #24]
 80143f2:	43db      	mvns	r3, r3
 80143f4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80143f6:	e127      	b.n	8014648 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	699b      	ldr	r3, [r3, #24]
 80143fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014400:	2b00      	cmp	r3, #0
 8014402:	f040 80e3 	bne.w	80145cc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	699b      	ldr	r3, [r3, #24]
 801440a:	0a5b      	lsrs	r3, r3, #9
 801440c:	693a      	ldr	r2, [r7, #16]
 801440e:	8952      	ldrh	r2, [r2, #10]
 8014410:	3a01      	subs	r2, #1
 8014412:	4013      	ands	r3, r2
 8014414:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014416:	69bb      	ldr	r3, [r7, #24]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d143      	bne.n	80144a4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	699b      	ldr	r3, [r3, #24]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d10c      	bne.n	801443e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	689b      	ldr	r3, [r3, #8]
 8014428:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801442c:	2b00      	cmp	r3, #0
 801442e:	d11a      	bne.n	8014466 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	2100      	movs	r1, #0
 8014434:	4618      	mov	r0, r3
 8014436:	f7fe fd25 	bl	8012e84 <create_chain>
 801443a:	62b8      	str	r0, [r7, #40]	; 0x28
 801443c:	e013      	b.n	8014466 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014442:	2b00      	cmp	r3, #0
 8014444:	d007      	beq.n	8014456 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	699b      	ldr	r3, [r3, #24]
 801444a:	4619      	mov	r1, r3
 801444c:	68f8      	ldr	r0, [r7, #12]
 801444e:	f7fe fdb1 	bl	8012fb4 <clmt_clust>
 8014452:	62b8      	str	r0, [r7, #40]	; 0x28
 8014454:	e007      	b.n	8014466 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014456:	68fa      	ldr	r2, [r7, #12]
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	69db      	ldr	r3, [r3, #28]
 801445c:	4619      	mov	r1, r3
 801445e:	4610      	mov	r0, r2
 8014460:	f7fe fd10 	bl	8012e84 <create_chain>
 8014464:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014468:	2b00      	cmp	r3, #0
 801446a:	f000 80f2 	beq.w	8014652 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014470:	2b01      	cmp	r3, #1
 8014472:	d104      	bne.n	801447e <f_write+0xfc>
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	2202      	movs	r2, #2
 8014478:	755a      	strb	r2, [r3, #21]
 801447a:	2302      	movs	r3, #2
 801447c:	e0f2      	b.n	8014664 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014484:	d104      	bne.n	8014490 <f_write+0x10e>
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	2201      	movs	r2, #1
 801448a:	755a      	strb	r2, [r3, #21]
 801448c:	2301      	movs	r3, #1
 801448e:	e0e9      	b.n	8014664 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014494:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	689b      	ldr	r3, [r3, #8]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d102      	bne.n	80144a4 <f_write+0x122>
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144a2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	7d1b      	ldrb	r3, [r3, #20]
 80144a8:	b25b      	sxtb	r3, r3
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	da18      	bge.n	80144e0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	7858      	ldrb	r0, [r3, #1]
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	6a1a      	ldr	r2, [r3, #32]
 80144bc:	2301      	movs	r3, #1
 80144be:	f7fd ff3f 	bl	8012340 <disk_write>
 80144c2:	4603      	mov	r3, r0
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d004      	beq.n	80144d2 <f_write+0x150>
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	2201      	movs	r2, #1
 80144cc:	755a      	strb	r2, [r3, #21]
 80144ce:	2301      	movs	r3, #1
 80144d0:	e0c8      	b.n	8014664 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	7d1b      	ldrb	r3, [r3, #20]
 80144d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144da:	b2da      	uxtb	r2, r3
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80144e0:	693a      	ldr	r2, [r7, #16]
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	69db      	ldr	r3, [r3, #28]
 80144e6:	4619      	mov	r1, r3
 80144e8:	4610      	mov	r0, r2
 80144ea:	f7fe fab3 	bl	8012a54 <clust2sect>
 80144ee:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80144f0:	697b      	ldr	r3, [r7, #20]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d104      	bne.n	8014500 <f_write+0x17e>
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	2202      	movs	r2, #2
 80144fa:	755a      	strb	r2, [r3, #21]
 80144fc:	2302      	movs	r3, #2
 80144fe:	e0b1      	b.n	8014664 <f_write+0x2e2>
			sect += csect;
 8014500:	697a      	ldr	r2, [r7, #20]
 8014502:	69bb      	ldr	r3, [r7, #24]
 8014504:	4413      	add	r3, r2
 8014506:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	0a5b      	lsrs	r3, r3, #9
 801450c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801450e:	6a3b      	ldr	r3, [r7, #32]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d03c      	beq.n	801458e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014514:	69ba      	ldr	r2, [r7, #24]
 8014516:	6a3b      	ldr	r3, [r7, #32]
 8014518:	4413      	add	r3, r2
 801451a:	693a      	ldr	r2, [r7, #16]
 801451c:	8952      	ldrh	r2, [r2, #10]
 801451e:	4293      	cmp	r3, r2
 8014520:	d905      	bls.n	801452e <f_write+0x1ac>
					cc = fs->csize - csect;
 8014522:	693b      	ldr	r3, [r7, #16]
 8014524:	895b      	ldrh	r3, [r3, #10]
 8014526:	461a      	mov	r2, r3
 8014528:	69bb      	ldr	r3, [r7, #24]
 801452a:	1ad3      	subs	r3, r2, r3
 801452c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801452e:	693b      	ldr	r3, [r7, #16]
 8014530:	7858      	ldrb	r0, [r3, #1]
 8014532:	6a3b      	ldr	r3, [r7, #32]
 8014534:	697a      	ldr	r2, [r7, #20]
 8014536:	69f9      	ldr	r1, [r7, #28]
 8014538:	f7fd ff02 	bl	8012340 <disk_write>
 801453c:	4603      	mov	r3, r0
 801453e:	2b00      	cmp	r3, #0
 8014540:	d004      	beq.n	801454c <f_write+0x1ca>
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	2201      	movs	r2, #1
 8014546:	755a      	strb	r2, [r3, #21]
 8014548:	2301      	movs	r3, #1
 801454a:	e08b      	b.n	8014664 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	6a1a      	ldr	r2, [r3, #32]
 8014550:	697b      	ldr	r3, [r7, #20]
 8014552:	1ad3      	subs	r3, r2, r3
 8014554:	6a3a      	ldr	r2, [r7, #32]
 8014556:	429a      	cmp	r2, r3
 8014558:	d915      	bls.n	8014586 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	6a1a      	ldr	r2, [r3, #32]
 8014564:	697b      	ldr	r3, [r7, #20]
 8014566:	1ad3      	subs	r3, r2, r3
 8014568:	025b      	lsls	r3, r3, #9
 801456a:	69fa      	ldr	r2, [r7, #28]
 801456c:	4413      	add	r3, r2
 801456e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014572:	4619      	mov	r1, r3
 8014574:	f7fd ffa4 	bl	80124c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	7d1b      	ldrb	r3, [r3, #20]
 801457c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014580:	b2da      	uxtb	r2, r3
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014586:	6a3b      	ldr	r3, [r7, #32]
 8014588:	025b      	lsls	r3, r3, #9
 801458a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801458c:	e03f      	b.n	801460e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	6a1b      	ldr	r3, [r3, #32]
 8014592:	697a      	ldr	r2, [r7, #20]
 8014594:	429a      	cmp	r2, r3
 8014596:	d016      	beq.n	80145c6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	699a      	ldr	r2, [r3, #24]
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80145a0:	429a      	cmp	r2, r3
 80145a2:	d210      	bcs.n	80145c6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80145a4:	693b      	ldr	r3, [r7, #16]
 80145a6:	7858      	ldrb	r0, [r3, #1]
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80145ae:	2301      	movs	r3, #1
 80145b0:	697a      	ldr	r2, [r7, #20]
 80145b2:	f7fd fea5 	bl	8012300 <disk_read>
 80145b6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d004      	beq.n	80145c6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	2201      	movs	r2, #1
 80145c0:	755a      	strb	r2, [r3, #21]
 80145c2:	2301      	movs	r3, #1
 80145c4:	e04e      	b.n	8014664 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	697a      	ldr	r2, [r7, #20]
 80145ca:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	699b      	ldr	r3, [r3, #24]
 80145d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145d4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80145d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80145da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	429a      	cmp	r2, r3
 80145e0:	d901      	bls.n	80145e6 <f_write+0x264>
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	699b      	ldr	r3, [r3, #24]
 80145f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145f4:	4413      	add	r3, r2
 80145f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145f8:	69f9      	ldr	r1, [r7, #28]
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7fd ff60 	bl	80124c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	7d1b      	ldrb	r3, [r3, #20]
 8014604:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014608:	b2da      	uxtb	r2, r3
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801460e:	69fa      	ldr	r2, [r7, #28]
 8014610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014612:	4413      	add	r3, r2
 8014614:	61fb      	str	r3, [r7, #28]
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	699a      	ldr	r2, [r3, #24]
 801461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801461c:	441a      	add	r2, r3
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	619a      	str	r2, [r3, #24]
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	68da      	ldr	r2, [r3, #12]
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	699b      	ldr	r3, [r3, #24]
 801462a:	429a      	cmp	r2, r3
 801462c:	bf38      	it	cc
 801462e:	461a      	movcc	r2, r3
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	60da      	str	r2, [r3, #12]
 8014634:	683b      	ldr	r3, [r7, #0]
 8014636:	681a      	ldr	r2, [r3, #0]
 8014638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801463a:	441a      	add	r2, r3
 801463c:	683b      	ldr	r3, [r7, #0]
 801463e:	601a      	str	r2, [r3, #0]
 8014640:	687a      	ldr	r2, [r7, #4]
 8014642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014644:	1ad3      	subs	r3, r2, r3
 8014646:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2b00      	cmp	r3, #0
 801464c:	f47f aed4 	bne.w	80143f8 <f_write+0x76>
 8014650:	e000      	b.n	8014654 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014652:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	7d1b      	ldrb	r3, [r3, #20]
 8014658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801465c:	b2da      	uxtb	r2, r3
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014662:	2300      	movs	r3, #0
}
 8014664:	4618      	mov	r0, r3
 8014666:	3730      	adds	r7, #48	; 0x30
 8014668:	46bd      	mov	sp, r7
 801466a:	bd80      	pop	{r7, pc}

0801466c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b086      	sub	sp, #24
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	f107 0208 	add.w	r2, r7, #8
 801467a:	4611      	mov	r1, r2
 801467c:	4618      	mov	r0, r3
 801467e:	f7ff fb07 	bl	8013c90 <validate>
 8014682:	4603      	mov	r3, r0
 8014684:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014686:	7dfb      	ldrb	r3, [r7, #23]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d168      	bne.n	801475e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	7d1b      	ldrb	r3, [r3, #20]
 8014690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014694:	2b00      	cmp	r3, #0
 8014696:	d062      	beq.n	801475e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	7d1b      	ldrb	r3, [r3, #20]
 801469c:	b25b      	sxtb	r3, r3
 801469e:	2b00      	cmp	r3, #0
 80146a0:	da15      	bge.n	80146ce <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80146a2:	68bb      	ldr	r3, [r7, #8]
 80146a4:	7858      	ldrb	r0, [r3, #1]
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	6a1a      	ldr	r2, [r3, #32]
 80146b0:	2301      	movs	r3, #1
 80146b2:	f7fd fe45 	bl	8012340 <disk_write>
 80146b6:	4603      	mov	r3, r0
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d001      	beq.n	80146c0 <f_sync+0x54>
 80146bc:	2301      	movs	r3, #1
 80146be:	e04f      	b.n	8014760 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	7d1b      	ldrb	r3, [r3, #20]
 80146c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80146c8:	b2da      	uxtb	r2, r3
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80146ce:	f7fd fbb5 	bl	8011e3c <get_fattime>
 80146d2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80146d4:	68ba      	ldr	r2, [r7, #8]
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146da:	4619      	mov	r1, r3
 80146dc:	4610      	mov	r0, r2
 80146de:	f7fe f91d 	bl	801291c <move_window>
 80146e2:	4603      	mov	r3, r0
 80146e4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80146e6:	7dfb      	ldrb	r3, [r7, #23]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d138      	bne.n	801475e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146f0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	330b      	adds	r3, #11
 80146f6:	781a      	ldrb	r2, [r3, #0]
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	330b      	adds	r3, #11
 80146fc:	f042 0220 	orr.w	r2, r2, #32
 8014700:	b2d2      	uxtb	r2, r2
 8014702:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	6818      	ldr	r0, [r3, #0]
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	689b      	ldr	r3, [r3, #8]
 801470c:	461a      	mov	r2, r3
 801470e:	68f9      	ldr	r1, [r7, #12]
 8014710:	f7fe fe2a 	bl	8013368 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	f103 021c 	add.w	r2, r3, #28
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	68db      	ldr	r3, [r3, #12]
 801471e:	4619      	mov	r1, r3
 8014720:	4610      	mov	r0, r2
 8014722:	f7fd fea1 	bl	8012468 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	3316      	adds	r3, #22
 801472a:	6939      	ldr	r1, [r7, #16]
 801472c:	4618      	mov	r0, r3
 801472e:	f7fd fe9b 	bl	8012468 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	3312      	adds	r3, #18
 8014736:	2100      	movs	r1, #0
 8014738:	4618      	mov	r0, r3
 801473a:	f7fd fe7a 	bl	8012432 <st_word>
					fs->wflag = 1;
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	2201      	movs	r2, #1
 8014742:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	4618      	mov	r0, r3
 8014748:	f7fe f916 	bl	8012978 <sync_fs>
 801474c:	4603      	mov	r3, r0
 801474e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	7d1b      	ldrb	r3, [r3, #20]
 8014754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014758:	b2da      	uxtb	r2, r3
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801475e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014760:	4618      	mov	r0, r3
 8014762:	3718      	adds	r7, #24
 8014764:	46bd      	mov	sp, r7
 8014766:	bd80      	pop	{r7, pc}

08014768 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b084      	sub	sp, #16
 801476c:	af00      	add	r7, sp, #0
 801476e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f7ff ff7b 	bl	801466c <f_sync>
 8014776:	4603      	mov	r3, r0
 8014778:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801477a:	7bfb      	ldrb	r3, [r7, #15]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d118      	bne.n	80147b2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	f107 0208 	add.w	r2, r7, #8
 8014786:	4611      	mov	r1, r2
 8014788:	4618      	mov	r0, r3
 801478a:	f7ff fa81 	bl	8013c90 <validate>
 801478e:	4603      	mov	r3, r0
 8014790:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014792:	7bfb      	ldrb	r3, [r7, #15]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d10c      	bne.n	80147b2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	691b      	ldr	r3, [r3, #16]
 801479c:	4618      	mov	r0, r3
 801479e:	f7fe f819 	bl	80127d4 <dec_lock>
 80147a2:	4603      	mov	r3, r0
 80147a4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80147a6:	7bfb      	ldrb	r3, [r7, #15]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d102      	bne.n	80147b2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	2200      	movs	r2, #0
 80147b0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80147b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80147b4:	4618      	mov	r0, r3
 80147b6:	3710      	adds	r7, #16
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}

080147bc <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b088      	sub	sp, #32
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	60f8      	str	r0, [r7, #12]
 80147c4:	60b9      	str	r1, [r7, #8]
 80147c6:	607a      	str	r2, [r7, #4]
	int n = 0;
 80147c8:	2300      	movs	r3, #0
 80147ca:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80147d0:	e01b      	b.n	801480a <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80147d2:	f107 0310 	add.w	r3, r7, #16
 80147d6:	f107 0114 	add.w	r1, r7, #20
 80147da:	2201      	movs	r2, #1
 80147dc:	6878      	ldr	r0, [r7, #4]
 80147de:	f7ff fc91 	bl	8014104 <f_read>
		if (rc != 1) break;
 80147e2:	693b      	ldr	r3, [r7, #16]
 80147e4:	2b01      	cmp	r3, #1
 80147e6:	d116      	bne.n	8014816 <f_gets+0x5a>
		c = s[0];
 80147e8:	7d3b      	ldrb	r3, [r7, #20]
 80147ea:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80147ec:	7dfb      	ldrb	r3, [r7, #23]
 80147ee:	2b0d      	cmp	r3, #13
 80147f0:	d100      	bne.n	80147f4 <f_gets+0x38>
 80147f2:	e00a      	b.n	801480a <f_gets+0x4e>
		*p++ = c;
 80147f4:	69bb      	ldr	r3, [r7, #24]
 80147f6:	1c5a      	adds	r2, r3, #1
 80147f8:	61ba      	str	r2, [r7, #24]
 80147fa:	7dfa      	ldrb	r2, [r7, #23]
 80147fc:	701a      	strb	r2, [r3, #0]
		n++;
 80147fe:	69fb      	ldr	r3, [r7, #28]
 8014800:	3301      	adds	r3, #1
 8014802:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014804:	7dfb      	ldrb	r3, [r7, #23]
 8014806:	2b0a      	cmp	r3, #10
 8014808:	d007      	beq.n	801481a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801480a:	68bb      	ldr	r3, [r7, #8]
 801480c:	3b01      	subs	r3, #1
 801480e:	69fa      	ldr	r2, [r7, #28]
 8014810:	429a      	cmp	r2, r3
 8014812:	dbde      	blt.n	80147d2 <f_gets+0x16>
 8014814:	e002      	b.n	801481c <f_gets+0x60>
		if (rc != 1) break;
 8014816:	bf00      	nop
 8014818:	e000      	b.n	801481c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 801481a:	bf00      	nop
	}
	*p = 0;
 801481c:	69bb      	ldr	r3, [r7, #24]
 801481e:	2200      	movs	r2, #0
 8014820:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8014822:	69fb      	ldr	r3, [r7, #28]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d001      	beq.n	801482c <f_gets+0x70>
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	e000      	b.n	801482e <f_gets+0x72>
 801482c:	2300      	movs	r3, #0
}
 801482e:	4618      	mov	r0, r3
 8014830:	3720      	adds	r7, #32
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}
	...

08014838 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014838:	b480      	push	{r7}
 801483a:	b087      	sub	sp, #28
 801483c:	af00      	add	r7, sp, #0
 801483e:	60f8      	str	r0, [r7, #12]
 8014840:	60b9      	str	r1, [r7, #8]
 8014842:	4613      	mov	r3, r2
 8014844:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014846:	2301      	movs	r3, #1
 8014848:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801484a:	2300      	movs	r3, #0
 801484c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801484e:	4b1f      	ldr	r3, [pc, #124]	; (80148cc <FATFS_LinkDriverEx+0x94>)
 8014850:	7a5b      	ldrb	r3, [r3, #9]
 8014852:	b2db      	uxtb	r3, r3
 8014854:	2b00      	cmp	r3, #0
 8014856:	d131      	bne.n	80148bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014858:	4b1c      	ldr	r3, [pc, #112]	; (80148cc <FATFS_LinkDriverEx+0x94>)
 801485a:	7a5b      	ldrb	r3, [r3, #9]
 801485c:	b2db      	uxtb	r3, r3
 801485e:	461a      	mov	r2, r3
 8014860:	4b1a      	ldr	r3, [pc, #104]	; (80148cc <FATFS_LinkDriverEx+0x94>)
 8014862:	2100      	movs	r1, #0
 8014864:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014866:	4b19      	ldr	r3, [pc, #100]	; (80148cc <FATFS_LinkDriverEx+0x94>)
 8014868:	7a5b      	ldrb	r3, [r3, #9]
 801486a:	b2db      	uxtb	r3, r3
 801486c:	4a17      	ldr	r2, [pc, #92]	; (80148cc <FATFS_LinkDriverEx+0x94>)
 801486e:	009b      	lsls	r3, r3, #2
 8014870:	4413      	add	r3, r2
 8014872:	68fa      	ldr	r2, [r7, #12]
 8014874:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014876:	4b15      	ldr	r3, [pc, #84]	; (80148cc <FATFS_LinkDriverEx+0x94>)
 8014878:	7a5b      	ldrb	r3, [r3, #9]
 801487a:	b2db      	uxtb	r3, r3
 801487c:	461a      	mov	r2, r3
 801487e:	4b13      	ldr	r3, [pc, #76]	; (80148cc <FATFS_LinkDriverEx+0x94>)
 8014880:	4413      	add	r3, r2
 8014882:	79fa      	ldrb	r2, [r7, #7]
 8014884:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014886:	4b11      	ldr	r3, [pc, #68]	; (80148cc <FATFS_LinkDriverEx+0x94>)
 8014888:	7a5b      	ldrb	r3, [r3, #9]
 801488a:	b2db      	uxtb	r3, r3
 801488c:	1c5a      	adds	r2, r3, #1
 801488e:	b2d1      	uxtb	r1, r2
 8014890:	4a0e      	ldr	r2, [pc, #56]	; (80148cc <FATFS_LinkDriverEx+0x94>)
 8014892:	7251      	strb	r1, [r2, #9]
 8014894:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014896:	7dbb      	ldrb	r3, [r7, #22]
 8014898:	3330      	adds	r3, #48	; 0x30
 801489a:	b2da      	uxtb	r2, r3
 801489c:	68bb      	ldr	r3, [r7, #8]
 801489e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80148a0:	68bb      	ldr	r3, [r7, #8]
 80148a2:	3301      	adds	r3, #1
 80148a4:	223a      	movs	r2, #58	; 0x3a
 80148a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80148a8:	68bb      	ldr	r3, [r7, #8]
 80148aa:	3302      	adds	r3, #2
 80148ac:	222f      	movs	r2, #47	; 0x2f
 80148ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	3303      	adds	r3, #3
 80148b4:	2200      	movs	r2, #0
 80148b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80148b8:	2300      	movs	r3, #0
 80148ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80148bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80148be:	4618      	mov	r0, r3
 80148c0:	371c      	adds	r7, #28
 80148c2:	46bd      	mov	sp, r7
 80148c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c8:	4770      	bx	lr
 80148ca:	bf00      	nop
 80148cc:	24008e18 	.word	0x24008e18

080148d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b082      	sub	sp, #8
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80148da:	2200      	movs	r2, #0
 80148dc:	6839      	ldr	r1, [r7, #0]
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f7ff ffaa 	bl	8014838 <FATFS_LinkDriverEx>
 80148e4:	4603      	mov	r3, r0
}
 80148e6:	4618      	mov	r0, r3
 80148e8:	3708      	adds	r7, #8
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bd80      	pop	{r7, pc}

080148ee <atof>:
 80148ee:	2100      	movs	r1, #0
 80148f0:	f000 be28 	b.w	8015544 <strtod>

080148f4 <atoi>:
 80148f4:	220a      	movs	r2, #10
 80148f6:	2100      	movs	r1, #0
 80148f8:	f000 bf0e 	b.w	8015718 <strtol>

080148fc <__errno>:
 80148fc:	4b01      	ldr	r3, [pc, #4]	; (8014904 <__errno+0x8>)
 80148fe:	6818      	ldr	r0, [r3, #0]
 8014900:	4770      	bx	lr
 8014902:	bf00      	nop
 8014904:	2400001c 	.word	0x2400001c

08014908 <__libc_init_array>:
 8014908:	b570      	push	{r4, r5, r6, lr}
 801490a:	4d0d      	ldr	r5, [pc, #52]	; (8014940 <__libc_init_array+0x38>)
 801490c:	4c0d      	ldr	r4, [pc, #52]	; (8014944 <__libc_init_array+0x3c>)
 801490e:	1b64      	subs	r4, r4, r5
 8014910:	10a4      	asrs	r4, r4, #2
 8014912:	2600      	movs	r6, #0
 8014914:	42a6      	cmp	r6, r4
 8014916:	d109      	bne.n	801492c <__libc_init_array+0x24>
 8014918:	4d0b      	ldr	r5, [pc, #44]	; (8014948 <__libc_init_array+0x40>)
 801491a:	4c0c      	ldr	r4, [pc, #48]	; (801494c <__libc_init_array+0x44>)
 801491c:	f003 f93c 	bl	8017b98 <_init>
 8014920:	1b64      	subs	r4, r4, r5
 8014922:	10a4      	asrs	r4, r4, #2
 8014924:	2600      	movs	r6, #0
 8014926:	42a6      	cmp	r6, r4
 8014928:	d105      	bne.n	8014936 <__libc_init_array+0x2e>
 801492a:	bd70      	pop	{r4, r5, r6, pc}
 801492c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014930:	4798      	blx	r3
 8014932:	3601      	adds	r6, #1
 8014934:	e7ee      	b.n	8014914 <__libc_init_array+0xc>
 8014936:	f855 3b04 	ldr.w	r3, [r5], #4
 801493a:	4798      	blx	r3
 801493c:	3601      	adds	r6, #1
 801493e:	e7f2      	b.n	8014926 <__libc_init_array+0x1e>
 8014940:	08018270 	.word	0x08018270
 8014944:	08018270 	.word	0x08018270
 8014948:	08018270 	.word	0x08018270
 801494c:	08018274 	.word	0x08018274

08014950 <memset>:
 8014950:	4402      	add	r2, r0
 8014952:	4603      	mov	r3, r0
 8014954:	4293      	cmp	r3, r2
 8014956:	d100      	bne.n	801495a <memset+0xa>
 8014958:	4770      	bx	lr
 801495a:	f803 1b01 	strb.w	r1, [r3], #1
 801495e:	e7f9      	b.n	8014954 <memset+0x4>

08014960 <siprintf>:
 8014960:	b40e      	push	{r1, r2, r3}
 8014962:	b500      	push	{lr}
 8014964:	b09c      	sub	sp, #112	; 0x70
 8014966:	ab1d      	add	r3, sp, #116	; 0x74
 8014968:	9002      	str	r0, [sp, #8]
 801496a:	9006      	str	r0, [sp, #24]
 801496c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014970:	4809      	ldr	r0, [pc, #36]	; (8014998 <siprintf+0x38>)
 8014972:	9107      	str	r1, [sp, #28]
 8014974:	9104      	str	r1, [sp, #16]
 8014976:	4909      	ldr	r1, [pc, #36]	; (801499c <siprintf+0x3c>)
 8014978:	f853 2b04 	ldr.w	r2, [r3], #4
 801497c:	9105      	str	r1, [sp, #20]
 801497e:	6800      	ldr	r0, [r0, #0]
 8014980:	9301      	str	r3, [sp, #4]
 8014982:	a902      	add	r1, sp, #8
 8014984:	f002 f8aa 	bl	8016adc <_svfiprintf_r>
 8014988:	9b02      	ldr	r3, [sp, #8]
 801498a:	2200      	movs	r2, #0
 801498c:	701a      	strb	r2, [r3, #0]
 801498e:	b01c      	add	sp, #112	; 0x70
 8014990:	f85d eb04 	ldr.w	lr, [sp], #4
 8014994:	b003      	add	sp, #12
 8014996:	4770      	bx	lr
 8014998:	2400001c 	.word	0x2400001c
 801499c:	ffff0208 	.word	0xffff0208

080149a0 <sulp>:
 80149a0:	b570      	push	{r4, r5, r6, lr}
 80149a2:	4604      	mov	r4, r0
 80149a4:	460d      	mov	r5, r1
 80149a6:	4616      	mov	r6, r2
 80149a8:	ec45 4b10 	vmov	d0, r4, r5
 80149ac:	f001 fdf8 	bl	80165a0 <__ulp>
 80149b0:	b17e      	cbz	r6, 80149d2 <sulp+0x32>
 80149b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80149b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	dd09      	ble.n	80149d2 <sulp+0x32>
 80149be:	051b      	lsls	r3, r3, #20
 80149c0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80149c4:	2000      	movs	r0, #0
 80149c6:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80149ca:	ec41 0b17 	vmov	d7, r0, r1
 80149ce:	ee20 0b07 	vmul.f64	d0, d0, d7
 80149d2:	bd70      	pop	{r4, r5, r6, pc}
 80149d4:	0000      	movs	r0, r0
	...

080149d8 <_strtod_l>:
 80149d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149dc:	ed2d 8b0e 	vpush	{d8-d14}
 80149e0:	b097      	sub	sp, #92	; 0x5c
 80149e2:	461f      	mov	r7, r3
 80149e4:	2300      	movs	r3, #0
 80149e6:	9312      	str	r3, [sp, #72]	; 0x48
 80149e8:	4ba1      	ldr	r3, [pc, #644]	; (8014c70 <_strtod_l+0x298>)
 80149ea:	920d      	str	r2, [sp, #52]	; 0x34
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	9307      	str	r3, [sp, #28]
 80149f0:	4604      	mov	r4, r0
 80149f2:	4618      	mov	r0, r3
 80149f4:	468b      	mov	fp, r1
 80149f6:	f7eb fc85 	bl	8000304 <strlen>
 80149fa:	f04f 0800 	mov.w	r8, #0
 80149fe:	4605      	mov	r5, r0
 8014a00:	f04f 0900 	mov.w	r9, #0
 8014a04:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8014a08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014a0a:	7813      	ldrb	r3, [r2, #0]
 8014a0c:	2b2b      	cmp	r3, #43	; 0x2b
 8014a0e:	d04d      	beq.n	8014aac <_strtod_l+0xd4>
 8014a10:	d83a      	bhi.n	8014a88 <_strtod_l+0xb0>
 8014a12:	2b0d      	cmp	r3, #13
 8014a14:	d833      	bhi.n	8014a7e <_strtod_l+0xa6>
 8014a16:	2b08      	cmp	r3, #8
 8014a18:	d833      	bhi.n	8014a82 <_strtod_l+0xaa>
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d03d      	beq.n	8014a9a <_strtod_l+0xc2>
 8014a1e:	2300      	movs	r3, #0
 8014a20:	9308      	str	r3, [sp, #32]
 8014a22:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014a24:	7833      	ldrb	r3, [r6, #0]
 8014a26:	2b30      	cmp	r3, #48	; 0x30
 8014a28:	f040 80b0 	bne.w	8014b8c <_strtod_l+0x1b4>
 8014a2c:	7873      	ldrb	r3, [r6, #1]
 8014a2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014a32:	2b58      	cmp	r3, #88	; 0x58
 8014a34:	d167      	bne.n	8014b06 <_strtod_l+0x12e>
 8014a36:	9b08      	ldr	r3, [sp, #32]
 8014a38:	9301      	str	r3, [sp, #4]
 8014a3a:	ab12      	add	r3, sp, #72	; 0x48
 8014a3c:	9702      	str	r7, [sp, #8]
 8014a3e:	9300      	str	r3, [sp, #0]
 8014a40:	4a8c      	ldr	r2, [pc, #560]	; (8014c74 <_strtod_l+0x29c>)
 8014a42:	ab13      	add	r3, sp, #76	; 0x4c
 8014a44:	a911      	add	r1, sp, #68	; 0x44
 8014a46:	4620      	mov	r0, r4
 8014a48:	f000 ff08 	bl	801585c <__gethex>
 8014a4c:	f010 0507 	ands.w	r5, r0, #7
 8014a50:	4607      	mov	r7, r0
 8014a52:	d005      	beq.n	8014a60 <_strtod_l+0x88>
 8014a54:	2d06      	cmp	r5, #6
 8014a56:	d12b      	bne.n	8014ab0 <_strtod_l+0xd8>
 8014a58:	3601      	adds	r6, #1
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	9611      	str	r6, [sp, #68]	; 0x44
 8014a5e:	9308      	str	r3, [sp, #32]
 8014a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	f040 854e 	bne.w	8015504 <_strtod_l+0xb2c>
 8014a68:	9b08      	ldr	r3, [sp, #32]
 8014a6a:	b1e3      	cbz	r3, 8014aa6 <_strtod_l+0xce>
 8014a6c:	ec49 8b17 	vmov	d7, r8, r9
 8014a70:	eeb1 0b47 	vneg.f64	d0, d7
 8014a74:	b017      	add	sp, #92	; 0x5c
 8014a76:	ecbd 8b0e 	vpop	{d8-d14}
 8014a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a7e:	2b20      	cmp	r3, #32
 8014a80:	d1cd      	bne.n	8014a1e <_strtod_l+0x46>
 8014a82:	3201      	adds	r2, #1
 8014a84:	9211      	str	r2, [sp, #68]	; 0x44
 8014a86:	e7bf      	b.n	8014a08 <_strtod_l+0x30>
 8014a88:	2b2d      	cmp	r3, #45	; 0x2d
 8014a8a:	d1c8      	bne.n	8014a1e <_strtod_l+0x46>
 8014a8c:	2301      	movs	r3, #1
 8014a8e:	9308      	str	r3, [sp, #32]
 8014a90:	1c53      	adds	r3, r2, #1
 8014a92:	9311      	str	r3, [sp, #68]	; 0x44
 8014a94:	7853      	ldrb	r3, [r2, #1]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d1c3      	bne.n	8014a22 <_strtod_l+0x4a>
 8014a9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a9c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	f040 852d 	bne.w	8015500 <_strtod_l+0xb28>
 8014aa6:	ec49 8b10 	vmov	d0, r8, r9
 8014aaa:	e7e3      	b.n	8014a74 <_strtod_l+0x9c>
 8014aac:	2300      	movs	r3, #0
 8014aae:	e7ee      	b.n	8014a8e <_strtod_l+0xb6>
 8014ab0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ab2:	b13a      	cbz	r2, 8014ac4 <_strtod_l+0xec>
 8014ab4:	2135      	movs	r1, #53	; 0x35
 8014ab6:	a814      	add	r0, sp, #80	; 0x50
 8014ab8:	f001 fe7a 	bl	80167b0 <__copybits>
 8014abc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014abe:	4620      	mov	r0, r4
 8014ac0:	f001 fa3c 	bl	8015f3c <_Bfree>
 8014ac4:	3d01      	subs	r5, #1
 8014ac6:	2d04      	cmp	r5, #4
 8014ac8:	d806      	bhi.n	8014ad8 <_strtod_l+0x100>
 8014aca:	e8df f005 	tbb	[pc, r5]
 8014ace:	030a      	.short	0x030a
 8014ad0:	1714      	.short	0x1714
 8014ad2:	0a          	.byte	0x0a
 8014ad3:	00          	.byte	0x00
 8014ad4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8014ad8:	073f      	lsls	r7, r7, #28
 8014ada:	d5c1      	bpl.n	8014a60 <_strtod_l+0x88>
 8014adc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8014ae0:	e7be      	b.n	8014a60 <_strtod_l+0x88>
 8014ae2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8014ae6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014ae8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014aec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014af0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014af4:	e7f0      	b.n	8014ad8 <_strtod_l+0x100>
 8014af6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8014c78 <_strtod_l+0x2a0>
 8014afa:	e7ed      	b.n	8014ad8 <_strtod_l+0x100>
 8014afc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014b00:	f04f 38ff 	mov.w	r8, #4294967295
 8014b04:	e7e8      	b.n	8014ad8 <_strtod_l+0x100>
 8014b06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014b08:	1c5a      	adds	r2, r3, #1
 8014b0a:	9211      	str	r2, [sp, #68]	; 0x44
 8014b0c:	785b      	ldrb	r3, [r3, #1]
 8014b0e:	2b30      	cmp	r3, #48	; 0x30
 8014b10:	d0f9      	beq.n	8014b06 <_strtod_l+0x12e>
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d0a4      	beq.n	8014a60 <_strtod_l+0x88>
 8014b16:	2301      	movs	r3, #1
 8014b18:	f04f 0a00 	mov.w	sl, #0
 8014b1c:	9304      	str	r3, [sp, #16]
 8014b1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014b20:	930a      	str	r3, [sp, #40]	; 0x28
 8014b22:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014b26:	f8cd a018 	str.w	sl, [sp, #24]
 8014b2a:	220a      	movs	r2, #10
 8014b2c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014b2e:	7807      	ldrb	r7, [r0, #0]
 8014b30:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8014b34:	b2d9      	uxtb	r1, r3
 8014b36:	2909      	cmp	r1, #9
 8014b38:	d92a      	bls.n	8014b90 <_strtod_l+0x1b8>
 8014b3a:	9907      	ldr	r1, [sp, #28]
 8014b3c:	462a      	mov	r2, r5
 8014b3e:	f002 fbd3 	bl	80172e8 <strncmp>
 8014b42:	2800      	cmp	r0, #0
 8014b44:	d033      	beq.n	8014bae <_strtod_l+0x1d6>
 8014b46:	2000      	movs	r0, #0
 8014b48:	9b06      	ldr	r3, [sp, #24]
 8014b4a:	463a      	mov	r2, r7
 8014b4c:	4601      	mov	r1, r0
 8014b4e:	4607      	mov	r7, r0
 8014b50:	2a65      	cmp	r2, #101	; 0x65
 8014b52:	d001      	beq.n	8014b58 <_strtod_l+0x180>
 8014b54:	2a45      	cmp	r2, #69	; 0x45
 8014b56:	d117      	bne.n	8014b88 <_strtod_l+0x1b0>
 8014b58:	b91b      	cbnz	r3, 8014b62 <_strtod_l+0x18a>
 8014b5a:	9b04      	ldr	r3, [sp, #16]
 8014b5c:	4303      	orrs	r3, r0
 8014b5e:	d09c      	beq.n	8014a9a <_strtod_l+0xc2>
 8014b60:	2300      	movs	r3, #0
 8014b62:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8014b66:	f10b 0201 	add.w	r2, fp, #1
 8014b6a:	9211      	str	r2, [sp, #68]	; 0x44
 8014b6c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8014b70:	2a2b      	cmp	r2, #43	; 0x2b
 8014b72:	d071      	beq.n	8014c58 <_strtod_l+0x280>
 8014b74:	2a2d      	cmp	r2, #45	; 0x2d
 8014b76:	d077      	beq.n	8014c68 <_strtod_l+0x290>
 8014b78:	f04f 0e00 	mov.w	lr, #0
 8014b7c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8014b80:	2d09      	cmp	r5, #9
 8014b82:	d97f      	bls.n	8014c84 <_strtod_l+0x2ac>
 8014b84:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8014b88:	2500      	movs	r5, #0
 8014b8a:	e09b      	b.n	8014cc4 <_strtod_l+0x2ec>
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	e7c3      	b.n	8014b18 <_strtod_l+0x140>
 8014b90:	9906      	ldr	r1, [sp, #24]
 8014b92:	2908      	cmp	r1, #8
 8014b94:	bfdd      	ittte	le
 8014b96:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014b98:	fb02 3301 	mlale	r3, r2, r1, r3
 8014b9c:	9309      	strle	r3, [sp, #36]	; 0x24
 8014b9e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014ba2:	9b06      	ldr	r3, [sp, #24]
 8014ba4:	3001      	adds	r0, #1
 8014ba6:	3301      	adds	r3, #1
 8014ba8:	9306      	str	r3, [sp, #24]
 8014baa:	9011      	str	r0, [sp, #68]	; 0x44
 8014bac:	e7be      	b.n	8014b2c <_strtod_l+0x154>
 8014bae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014bb0:	195a      	adds	r2, r3, r5
 8014bb2:	9211      	str	r2, [sp, #68]	; 0x44
 8014bb4:	5d5a      	ldrb	r2, [r3, r5]
 8014bb6:	9b06      	ldr	r3, [sp, #24]
 8014bb8:	b3a3      	cbz	r3, 8014c24 <_strtod_l+0x24c>
 8014bba:	4607      	mov	r7, r0
 8014bbc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014bc0:	2909      	cmp	r1, #9
 8014bc2:	d912      	bls.n	8014bea <_strtod_l+0x212>
 8014bc4:	2101      	movs	r1, #1
 8014bc6:	e7c3      	b.n	8014b50 <_strtod_l+0x178>
 8014bc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014bca:	1c5a      	adds	r2, r3, #1
 8014bcc:	9211      	str	r2, [sp, #68]	; 0x44
 8014bce:	785a      	ldrb	r2, [r3, #1]
 8014bd0:	3001      	adds	r0, #1
 8014bd2:	2a30      	cmp	r2, #48	; 0x30
 8014bd4:	d0f8      	beq.n	8014bc8 <_strtod_l+0x1f0>
 8014bd6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014bda:	2b08      	cmp	r3, #8
 8014bdc:	f200 8497 	bhi.w	801550e <_strtod_l+0xb36>
 8014be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014be2:	930a      	str	r3, [sp, #40]	; 0x28
 8014be4:	4607      	mov	r7, r0
 8014be6:	2000      	movs	r0, #0
 8014be8:	4603      	mov	r3, r0
 8014bea:	3a30      	subs	r2, #48	; 0x30
 8014bec:	f100 0101 	add.w	r1, r0, #1
 8014bf0:	d012      	beq.n	8014c18 <_strtod_l+0x240>
 8014bf2:	440f      	add	r7, r1
 8014bf4:	eb00 0c03 	add.w	ip, r0, r3
 8014bf8:	4619      	mov	r1, r3
 8014bfa:	250a      	movs	r5, #10
 8014bfc:	4561      	cmp	r1, ip
 8014bfe:	d113      	bne.n	8014c28 <_strtod_l+0x250>
 8014c00:	1819      	adds	r1, r3, r0
 8014c02:	2908      	cmp	r1, #8
 8014c04:	f103 0301 	add.w	r3, r3, #1
 8014c08:	4403      	add	r3, r0
 8014c0a:	dc1c      	bgt.n	8014c46 <_strtod_l+0x26e>
 8014c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c0e:	210a      	movs	r1, #10
 8014c10:	fb01 2200 	mla	r2, r1, r0, r2
 8014c14:	9209      	str	r2, [sp, #36]	; 0x24
 8014c16:	2100      	movs	r1, #0
 8014c18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014c1a:	1c50      	adds	r0, r2, #1
 8014c1c:	9011      	str	r0, [sp, #68]	; 0x44
 8014c1e:	7852      	ldrb	r2, [r2, #1]
 8014c20:	4608      	mov	r0, r1
 8014c22:	e7cb      	b.n	8014bbc <_strtod_l+0x1e4>
 8014c24:	9806      	ldr	r0, [sp, #24]
 8014c26:	e7d4      	b.n	8014bd2 <_strtod_l+0x1fa>
 8014c28:	2908      	cmp	r1, #8
 8014c2a:	dc04      	bgt.n	8014c36 <_strtod_l+0x25e>
 8014c2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014c2e:	436e      	muls	r6, r5
 8014c30:	9609      	str	r6, [sp, #36]	; 0x24
 8014c32:	3101      	adds	r1, #1
 8014c34:	e7e2      	b.n	8014bfc <_strtod_l+0x224>
 8014c36:	f101 0e01 	add.w	lr, r1, #1
 8014c3a:	f1be 0f10 	cmp.w	lr, #16
 8014c3e:	bfd8      	it	le
 8014c40:	fb05 fa0a 	mulle.w	sl, r5, sl
 8014c44:	e7f5      	b.n	8014c32 <_strtod_l+0x25a>
 8014c46:	2b10      	cmp	r3, #16
 8014c48:	bfdc      	itt	le
 8014c4a:	210a      	movle	r1, #10
 8014c4c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8014c50:	e7e1      	b.n	8014c16 <_strtod_l+0x23e>
 8014c52:	2700      	movs	r7, #0
 8014c54:	2101      	movs	r1, #1
 8014c56:	e780      	b.n	8014b5a <_strtod_l+0x182>
 8014c58:	f04f 0e00 	mov.w	lr, #0
 8014c5c:	f10b 0202 	add.w	r2, fp, #2
 8014c60:	9211      	str	r2, [sp, #68]	; 0x44
 8014c62:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8014c66:	e789      	b.n	8014b7c <_strtod_l+0x1a4>
 8014c68:	f04f 0e01 	mov.w	lr, #1
 8014c6c:	e7f6      	b.n	8014c5c <_strtod_l+0x284>
 8014c6e:	bf00      	nop
 8014c70:	08018068 	.word	0x08018068
 8014c74:	08017dec 	.word	0x08017dec
 8014c78:	7ff00000 	.word	0x7ff00000
 8014c7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014c7e:	1c55      	adds	r5, r2, #1
 8014c80:	9511      	str	r5, [sp, #68]	; 0x44
 8014c82:	7852      	ldrb	r2, [r2, #1]
 8014c84:	2a30      	cmp	r2, #48	; 0x30
 8014c86:	d0f9      	beq.n	8014c7c <_strtod_l+0x2a4>
 8014c88:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8014c8c:	2d08      	cmp	r5, #8
 8014c8e:	f63f af7b 	bhi.w	8014b88 <_strtod_l+0x1b0>
 8014c92:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8014c96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014c98:	9207      	str	r2, [sp, #28]
 8014c9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014c9c:	1c55      	adds	r5, r2, #1
 8014c9e:	9511      	str	r5, [sp, #68]	; 0x44
 8014ca0:	7852      	ldrb	r2, [r2, #1]
 8014ca2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8014ca6:	2e09      	cmp	r6, #9
 8014ca8:	d937      	bls.n	8014d1a <_strtod_l+0x342>
 8014caa:	9e07      	ldr	r6, [sp, #28]
 8014cac:	1bad      	subs	r5, r5, r6
 8014cae:	2d08      	cmp	r5, #8
 8014cb0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8014cb4:	dc02      	bgt.n	8014cbc <_strtod_l+0x2e4>
 8014cb6:	4565      	cmp	r5, ip
 8014cb8:	bfa8      	it	ge
 8014cba:	4665      	movge	r5, ip
 8014cbc:	f1be 0f00 	cmp.w	lr, #0
 8014cc0:	d000      	beq.n	8014cc4 <_strtod_l+0x2ec>
 8014cc2:	426d      	negs	r5, r5
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d14d      	bne.n	8014d64 <_strtod_l+0x38c>
 8014cc8:	9b04      	ldr	r3, [sp, #16]
 8014cca:	4303      	orrs	r3, r0
 8014ccc:	f47f aec8 	bne.w	8014a60 <_strtod_l+0x88>
 8014cd0:	2900      	cmp	r1, #0
 8014cd2:	f47f aee2 	bne.w	8014a9a <_strtod_l+0xc2>
 8014cd6:	2a69      	cmp	r2, #105	; 0x69
 8014cd8:	d027      	beq.n	8014d2a <_strtod_l+0x352>
 8014cda:	dc24      	bgt.n	8014d26 <_strtod_l+0x34e>
 8014cdc:	2a49      	cmp	r2, #73	; 0x49
 8014cde:	d024      	beq.n	8014d2a <_strtod_l+0x352>
 8014ce0:	2a4e      	cmp	r2, #78	; 0x4e
 8014ce2:	f47f aeda 	bne.w	8014a9a <_strtod_l+0xc2>
 8014ce6:	4996      	ldr	r1, [pc, #600]	; (8014f40 <_strtod_l+0x568>)
 8014ce8:	a811      	add	r0, sp, #68	; 0x44
 8014cea:	f001 f80f 	bl	8015d0c <__match>
 8014cee:	2800      	cmp	r0, #0
 8014cf0:	f43f aed3 	beq.w	8014a9a <_strtod_l+0xc2>
 8014cf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014cf6:	781b      	ldrb	r3, [r3, #0]
 8014cf8:	2b28      	cmp	r3, #40	; 0x28
 8014cfa:	d12d      	bne.n	8014d58 <_strtod_l+0x380>
 8014cfc:	4991      	ldr	r1, [pc, #580]	; (8014f44 <_strtod_l+0x56c>)
 8014cfe:	aa14      	add	r2, sp, #80	; 0x50
 8014d00:	a811      	add	r0, sp, #68	; 0x44
 8014d02:	f001 f817 	bl	8015d34 <__hexnan>
 8014d06:	2805      	cmp	r0, #5
 8014d08:	d126      	bne.n	8014d58 <_strtod_l+0x380>
 8014d0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d0c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8014d10:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014d14:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014d18:	e6a2      	b.n	8014a60 <_strtod_l+0x88>
 8014d1a:	250a      	movs	r5, #10
 8014d1c:	fb05 250c 	mla	r5, r5, ip, r2
 8014d20:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8014d24:	e7b9      	b.n	8014c9a <_strtod_l+0x2c2>
 8014d26:	2a6e      	cmp	r2, #110	; 0x6e
 8014d28:	e7db      	b.n	8014ce2 <_strtod_l+0x30a>
 8014d2a:	4987      	ldr	r1, [pc, #540]	; (8014f48 <_strtod_l+0x570>)
 8014d2c:	a811      	add	r0, sp, #68	; 0x44
 8014d2e:	f000 ffed 	bl	8015d0c <__match>
 8014d32:	2800      	cmp	r0, #0
 8014d34:	f43f aeb1 	beq.w	8014a9a <_strtod_l+0xc2>
 8014d38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d3a:	4984      	ldr	r1, [pc, #528]	; (8014f4c <_strtod_l+0x574>)
 8014d3c:	3b01      	subs	r3, #1
 8014d3e:	a811      	add	r0, sp, #68	; 0x44
 8014d40:	9311      	str	r3, [sp, #68]	; 0x44
 8014d42:	f000 ffe3 	bl	8015d0c <__match>
 8014d46:	b910      	cbnz	r0, 8014d4e <_strtod_l+0x376>
 8014d48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d4a:	3301      	adds	r3, #1
 8014d4c:	9311      	str	r3, [sp, #68]	; 0x44
 8014d4e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8014f60 <_strtod_l+0x588>
 8014d52:	f04f 0800 	mov.w	r8, #0
 8014d56:	e683      	b.n	8014a60 <_strtod_l+0x88>
 8014d58:	487d      	ldr	r0, [pc, #500]	; (8014f50 <_strtod_l+0x578>)
 8014d5a:	f002 faad 	bl	80172b8 <nan>
 8014d5e:	ec59 8b10 	vmov	r8, r9, d0
 8014d62:	e67d      	b.n	8014a60 <_strtod_l+0x88>
 8014d64:	1bea      	subs	r2, r5, r7
 8014d66:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8014d6a:	9207      	str	r2, [sp, #28]
 8014d6c:	9a06      	ldr	r2, [sp, #24]
 8014d6e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014d72:	2a00      	cmp	r2, #0
 8014d74:	bf08      	it	eq
 8014d76:	461a      	moveq	r2, r3
 8014d78:	2b10      	cmp	r3, #16
 8014d7a:	9206      	str	r2, [sp, #24]
 8014d7c:	461a      	mov	r2, r3
 8014d7e:	bfa8      	it	ge
 8014d80:	2210      	movge	r2, #16
 8014d82:	2b09      	cmp	r3, #9
 8014d84:	ec59 8b17 	vmov	r8, r9, d7
 8014d88:	dd0c      	ble.n	8014da4 <_strtod_l+0x3cc>
 8014d8a:	4972      	ldr	r1, [pc, #456]	; (8014f54 <_strtod_l+0x57c>)
 8014d8c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014d90:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8014d94:	ee06 aa90 	vmov	s13, sl
 8014d98:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8014d9c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014da0:	ec59 8b16 	vmov	r8, r9, d6
 8014da4:	2b0f      	cmp	r3, #15
 8014da6:	dc36      	bgt.n	8014e16 <_strtod_l+0x43e>
 8014da8:	9907      	ldr	r1, [sp, #28]
 8014daa:	2900      	cmp	r1, #0
 8014dac:	f43f ae58 	beq.w	8014a60 <_strtod_l+0x88>
 8014db0:	dd23      	ble.n	8014dfa <_strtod_l+0x422>
 8014db2:	2916      	cmp	r1, #22
 8014db4:	dc0b      	bgt.n	8014dce <_strtod_l+0x3f6>
 8014db6:	4b67      	ldr	r3, [pc, #412]	; (8014f54 <_strtod_l+0x57c>)
 8014db8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8014dbc:	ed93 7b00 	vldr	d7, [r3]
 8014dc0:	ec49 8b16 	vmov	d6, r8, r9
 8014dc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014dc8:	ec59 8b17 	vmov	r8, r9, d7
 8014dcc:	e648      	b.n	8014a60 <_strtod_l+0x88>
 8014dce:	9807      	ldr	r0, [sp, #28]
 8014dd0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8014dd4:	4281      	cmp	r1, r0
 8014dd6:	db1e      	blt.n	8014e16 <_strtod_l+0x43e>
 8014dd8:	4a5e      	ldr	r2, [pc, #376]	; (8014f54 <_strtod_l+0x57c>)
 8014dda:	f1c3 030f 	rsb	r3, r3, #15
 8014dde:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8014de2:	ed91 7b00 	vldr	d7, [r1]
 8014de6:	ec49 8b16 	vmov	d6, r8, r9
 8014dea:	1ac3      	subs	r3, r0, r3
 8014dec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014df0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014df4:	ed92 6b00 	vldr	d6, [r2]
 8014df8:	e7e4      	b.n	8014dc4 <_strtod_l+0x3ec>
 8014dfa:	9907      	ldr	r1, [sp, #28]
 8014dfc:	3116      	adds	r1, #22
 8014dfe:	db0a      	blt.n	8014e16 <_strtod_l+0x43e>
 8014e00:	4b54      	ldr	r3, [pc, #336]	; (8014f54 <_strtod_l+0x57c>)
 8014e02:	1b7d      	subs	r5, r7, r5
 8014e04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014e08:	ed95 7b00 	vldr	d7, [r5]
 8014e0c:	ec49 8b16 	vmov	d6, r8, r9
 8014e10:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014e14:	e7d8      	b.n	8014dc8 <_strtod_l+0x3f0>
 8014e16:	9907      	ldr	r1, [sp, #28]
 8014e18:	1a9a      	subs	r2, r3, r2
 8014e1a:	440a      	add	r2, r1
 8014e1c:	2a00      	cmp	r2, #0
 8014e1e:	dd6f      	ble.n	8014f00 <_strtod_l+0x528>
 8014e20:	f012 000f 	ands.w	r0, r2, #15
 8014e24:	d00a      	beq.n	8014e3c <_strtod_l+0x464>
 8014e26:	494b      	ldr	r1, [pc, #300]	; (8014f54 <_strtod_l+0x57c>)
 8014e28:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014e2c:	ed91 7b00 	vldr	d7, [r1]
 8014e30:	ec49 8b16 	vmov	d6, r8, r9
 8014e34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014e38:	ec59 8b17 	vmov	r8, r9, d7
 8014e3c:	f032 020f 	bics.w	r2, r2, #15
 8014e40:	d04f      	beq.n	8014ee2 <_strtod_l+0x50a>
 8014e42:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8014e46:	dd22      	ble.n	8014e8e <_strtod_l+0x4b6>
 8014e48:	2500      	movs	r5, #0
 8014e4a:	462e      	mov	r6, r5
 8014e4c:	9506      	str	r5, [sp, #24]
 8014e4e:	462f      	mov	r7, r5
 8014e50:	2322      	movs	r3, #34	; 0x22
 8014e52:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8014f60 <_strtod_l+0x588>
 8014e56:	6023      	str	r3, [r4, #0]
 8014e58:	f04f 0800 	mov.w	r8, #0
 8014e5c:	9b06      	ldr	r3, [sp, #24]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	f43f adfe 	beq.w	8014a60 <_strtod_l+0x88>
 8014e64:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014e66:	4620      	mov	r0, r4
 8014e68:	f001 f868 	bl	8015f3c <_Bfree>
 8014e6c:	4639      	mov	r1, r7
 8014e6e:	4620      	mov	r0, r4
 8014e70:	f001 f864 	bl	8015f3c <_Bfree>
 8014e74:	4631      	mov	r1, r6
 8014e76:	4620      	mov	r0, r4
 8014e78:	f001 f860 	bl	8015f3c <_Bfree>
 8014e7c:	9906      	ldr	r1, [sp, #24]
 8014e7e:	4620      	mov	r0, r4
 8014e80:	f001 f85c 	bl	8015f3c <_Bfree>
 8014e84:	4629      	mov	r1, r5
 8014e86:	4620      	mov	r0, r4
 8014e88:	f001 f858 	bl	8015f3c <_Bfree>
 8014e8c:	e5e8      	b.n	8014a60 <_strtod_l+0x88>
 8014e8e:	2000      	movs	r0, #0
 8014e90:	ec49 8b17 	vmov	d7, r8, r9
 8014e94:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8014f58 <_strtod_l+0x580>
 8014e98:	1112      	asrs	r2, r2, #4
 8014e9a:	4601      	mov	r1, r0
 8014e9c:	2a01      	cmp	r2, #1
 8014e9e:	dc23      	bgt.n	8014ee8 <_strtod_l+0x510>
 8014ea0:	b108      	cbz	r0, 8014ea6 <_strtod_l+0x4ce>
 8014ea2:	ec59 8b17 	vmov	r8, r9, d7
 8014ea6:	4a2c      	ldr	r2, [pc, #176]	; (8014f58 <_strtod_l+0x580>)
 8014ea8:	482c      	ldr	r0, [pc, #176]	; (8014f5c <_strtod_l+0x584>)
 8014eaa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8014eae:	ed92 7b00 	vldr	d7, [r2]
 8014eb2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014eb6:	ec49 8b16 	vmov	d6, r8, r9
 8014eba:	4a29      	ldr	r2, [pc, #164]	; (8014f60 <_strtod_l+0x588>)
 8014ebc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014ec0:	ee17 1a90 	vmov	r1, s15
 8014ec4:	400a      	ands	r2, r1
 8014ec6:	4282      	cmp	r2, r0
 8014ec8:	ec59 8b17 	vmov	r8, r9, d7
 8014ecc:	d8bc      	bhi.n	8014e48 <_strtod_l+0x470>
 8014ece:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8014ed2:	4282      	cmp	r2, r0
 8014ed4:	bf86      	itte	hi
 8014ed6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8014f64 <_strtod_l+0x58c>
 8014eda:	f04f 38ff 	movhi.w	r8, #4294967295
 8014ede:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	9204      	str	r2, [sp, #16]
 8014ee6:	e078      	b.n	8014fda <_strtod_l+0x602>
 8014ee8:	07d6      	lsls	r6, r2, #31
 8014eea:	d504      	bpl.n	8014ef6 <_strtod_l+0x51e>
 8014eec:	ed9c 6b00 	vldr	d6, [ip]
 8014ef0:	2001      	movs	r0, #1
 8014ef2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014ef6:	3101      	adds	r1, #1
 8014ef8:	1052      	asrs	r2, r2, #1
 8014efa:	f10c 0c08 	add.w	ip, ip, #8
 8014efe:	e7cd      	b.n	8014e9c <_strtod_l+0x4c4>
 8014f00:	d0ef      	beq.n	8014ee2 <_strtod_l+0x50a>
 8014f02:	4252      	negs	r2, r2
 8014f04:	f012 000f 	ands.w	r0, r2, #15
 8014f08:	d00a      	beq.n	8014f20 <_strtod_l+0x548>
 8014f0a:	4912      	ldr	r1, [pc, #72]	; (8014f54 <_strtod_l+0x57c>)
 8014f0c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014f10:	ed91 7b00 	vldr	d7, [r1]
 8014f14:	ec49 8b16 	vmov	d6, r8, r9
 8014f18:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014f1c:	ec59 8b17 	vmov	r8, r9, d7
 8014f20:	1112      	asrs	r2, r2, #4
 8014f22:	d0de      	beq.n	8014ee2 <_strtod_l+0x50a>
 8014f24:	2a1f      	cmp	r2, #31
 8014f26:	dd1f      	ble.n	8014f68 <_strtod_l+0x590>
 8014f28:	2500      	movs	r5, #0
 8014f2a:	462e      	mov	r6, r5
 8014f2c:	9506      	str	r5, [sp, #24]
 8014f2e:	462f      	mov	r7, r5
 8014f30:	2322      	movs	r3, #34	; 0x22
 8014f32:	f04f 0800 	mov.w	r8, #0
 8014f36:	f04f 0900 	mov.w	r9, #0
 8014f3a:	6023      	str	r3, [r4, #0]
 8014f3c:	e78e      	b.n	8014e5c <_strtod_l+0x484>
 8014f3e:	bf00      	nop
 8014f40:	08017de9 	.word	0x08017de9
 8014f44:	08017e00 	.word	0x08017e00
 8014f48:	08017de0 	.word	0x08017de0
 8014f4c:	08017de3 	.word	0x08017de3
 8014f50:	08017eef 	.word	0x08017eef
 8014f54:	08018100 	.word	0x08018100
 8014f58:	080180d8 	.word	0x080180d8
 8014f5c:	7ca00000 	.word	0x7ca00000
 8014f60:	7ff00000 	.word	0x7ff00000
 8014f64:	7fefffff 	.word	0x7fefffff
 8014f68:	f012 0110 	ands.w	r1, r2, #16
 8014f6c:	bf18      	it	ne
 8014f6e:	216a      	movne	r1, #106	; 0x6a
 8014f70:	9104      	str	r1, [sp, #16]
 8014f72:	ec49 8b17 	vmov	d7, r8, r9
 8014f76:	49be      	ldr	r1, [pc, #760]	; (8015270 <_strtod_l+0x898>)
 8014f78:	2000      	movs	r0, #0
 8014f7a:	07d6      	lsls	r6, r2, #31
 8014f7c:	d504      	bpl.n	8014f88 <_strtod_l+0x5b0>
 8014f7e:	ed91 6b00 	vldr	d6, [r1]
 8014f82:	2001      	movs	r0, #1
 8014f84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014f88:	1052      	asrs	r2, r2, #1
 8014f8a:	f101 0108 	add.w	r1, r1, #8
 8014f8e:	d1f4      	bne.n	8014f7a <_strtod_l+0x5a2>
 8014f90:	b108      	cbz	r0, 8014f96 <_strtod_l+0x5be>
 8014f92:	ec59 8b17 	vmov	r8, r9, d7
 8014f96:	9a04      	ldr	r2, [sp, #16]
 8014f98:	b1c2      	cbz	r2, 8014fcc <_strtod_l+0x5f4>
 8014f9a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8014f9e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8014fa2:	2a00      	cmp	r2, #0
 8014fa4:	4648      	mov	r0, r9
 8014fa6:	dd11      	ble.n	8014fcc <_strtod_l+0x5f4>
 8014fa8:	2a1f      	cmp	r2, #31
 8014faa:	f340 812e 	ble.w	801520a <_strtod_l+0x832>
 8014fae:	2a34      	cmp	r2, #52	; 0x34
 8014fb0:	bfde      	ittt	le
 8014fb2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8014fb6:	f04f 32ff 	movle.w	r2, #4294967295
 8014fba:	fa02 f101 	lslle.w	r1, r2, r1
 8014fbe:	f04f 0800 	mov.w	r8, #0
 8014fc2:	bfcc      	ite	gt
 8014fc4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8014fc8:	ea01 0900 	andle.w	r9, r1, r0
 8014fcc:	ec49 8b17 	vmov	d7, r8, r9
 8014fd0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fd8:	d0a6      	beq.n	8014f28 <_strtod_l+0x550>
 8014fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fdc:	9200      	str	r2, [sp, #0]
 8014fde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014fe0:	9a06      	ldr	r2, [sp, #24]
 8014fe2:	4620      	mov	r0, r4
 8014fe4:	f001 f812 	bl	801600c <__s2b>
 8014fe8:	9006      	str	r0, [sp, #24]
 8014fea:	2800      	cmp	r0, #0
 8014fec:	f43f af2c 	beq.w	8014e48 <_strtod_l+0x470>
 8014ff0:	9b07      	ldr	r3, [sp, #28]
 8014ff2:	1b7d      	subs	r5, r7, r5
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	bfb4      	ite	lt
 8014ff8:	462b      	movlt	r3, r5
 8014ffa:	2300      	movge	r3, #0
 8014ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8014ffe:	9b07      	ldr	r3, [sp, #28]
 8015000:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8015250 <_strtod_l+0x878>
 8015004:	ed9f ab94 	vldr	d10, [pc, #592]	; 8015258 <_strtod_l+0x880>
 8015008:	ed9f bb95 	vldr	d11, [pc, #596]	; 8015260 <_strtod_l+0x888>
 801500c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015010:	2500      	movs	r5, #0
 8015012:	930c      	str	r3, [sp, #48]	; 0x30
 8015014:	462e      	mov	r6, r5
 8015016:	9b06      	ldr	r3, [sp, #24]
 8015018:	4620      	mov	r0, r4
 801501a:	6859      	ldr	r1, [r3, #4]
 801501c:	f000 ff4e 	bl	8015ebc <_Balloc>
 8015020:	4607      	mov	r7, r0
 8015022:	2800      	cmp	r0, #0
 8015024:	f43f af14 	beq.w	8014e50 <_strtod_l+0x478>
 8015028:	9b06      	ldr	r3, [sp, #24]
 801502a:	691a      	ldr	r2, [r3, #16]
 801502c:	3202      	adds	r2, #2
 801502e:	f103 010c 	add.w	r1, r3, #12
 8015032:	0092      	lsls	r2, r2, #2
 8015034:	300c      	adds	r0, #12
 8015036:	f000 ff33 	bl	8015ea0 <memcpy>
 801503a:	ec49 8b10 	vmov	d0, r8, r9
 801503e:	aa14      	add	r2, sp, #80	; 0x50
 8015040:	a913      	add	r1, sp, #76	; 0x4c
 8015042:	4620      	mov	r0, r4
 8015044:	f001 fb28 	bl	8016698 <__d2b>
 8015048:	ec49 8b18 	vmov	d8, r8, r9
 801504c:	9012      	str	r0, [sp, #72]	; 0x48
 801504e:	2800      	cmp	r0, #0
 8015050:	f43f aefe 	beq.w	8014e50 <_strtod_l+0x478>
 8015054:	2101      	movs	r1, #1
 8015056:	4620      	mov	r0, r4
 8015058:	f001 f872 	bl	8016140 <__i2b>
 801505c:	4606      	mov	r6, r0
 801505e:	2800      	cmp	r0, #0
 8015060:	f43f aef6 	beq.w	8014e50 <_strtod_l+0x478>
 8015064:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015066:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015068:	2b00      	cmp	r3, #0
 801506a:	bfab      	itete	ge
 801506c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801506e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8015070:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8015074:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8015078:	bfac      	ite	ge
 801507a:	eb03 0b02 	addge.w	fp, r3, r2
 801507e:	eba2 0a03 	sublt.w	sl, r2, r3
 8015082:	9a04      	ldr	r2, [sp, #16]
 8015084:	1a9b      	subs	r3, r3, r2
 8015086:	440b      	add	r3, r1
 8015088:	4a7a      	ldr	r2, [pc, #488]	; (8015274 <_strtod_l+0x89c>)
 801508a:	3b01      	subs	r3, #1
 801508c:	4293      	cmp	r3, r2
 801508e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8015092:	f280 80cd 	bge.w	8015230 <_strtod_l+0x858>
 8015096:	1ad2      	subs	r2, r2, r3
 8015098:	2a1f      	cmp	r2, #31
 801509a:	eba1 0102 	sub.w	r1, r1, r2
 801509e:	f04f 0001 	mov.w	r0, #1
 80150a2:	f300 80b9 	bgt.w	8015218 <_strtod_l+0x840>
 80150a6:	fa00 f302 	lsl.w	r3, r0, r2
 80150aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80150ac:	2300      	movs	r3, #0
 80150ae:	930a      	str	r3, [sp, #40]	; 0x28
 80150b0:	eb0b 0301 	add.w	r3, fp, r1
 80150b4:	9a04      	ldr	r2, [sp, #16]
 80150b6:	459b      	cmp	fp, r3
 80150b8:	448a      	add	sl, r1
 80150ba:	4492      	add	sl, r2
 80150bc:	465a      	mov	r2, fp
 80150be:	bfa8      	it	ge
 80150c0:	461a      	movge	r2, r3
 80150c2:	4552      	cmp	r2, sl
 80150c4:	bfa8      	it	ge
 80150c6:	4652      	movge	r2, sl
 80150c8:	2a00      	cmp	r2, #0
 80150ca:	bfc2      	ittt	gt
 80150cc:	1a9b      	subgt	r3, r3, r2
 80150ce:	ebaa 0a02 	subgt.w	sl, sl, r2
 80150d2:	ebab 0b02 	subgt.w	fp, fp, r2
 80150d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80150d8:	2a00      	cmp	r2, #0
 80150da:	dd18      	ble.n	801510e <_strtod_l+0x736>
 80150dc:	4631      	mov	r1, r6
 80150de:	4620      	mov	r0, r4
 80150e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80150e2:	f001 f8ed 	bl	80162c0 <__pow5mult>
 80150e6:	4606      	mov	r6, r0
 80150e8:	2800      	cmp	r0, #0
 80150ea:	f43f aeb1 	beq.w	8014e50 <_strtod_l+0x478>
 80150ee:	4601      	mov	r1, r0
 80150f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80150f2:	4620      	mov	r0, r4
 80150f4:	f001 f83a 	bl	801616c <__multiply>
 80150f8:	900e      	str	r0, [sp, #56]	; 0x38
 80150fa:	2800      	cmp	r0, #0
 80150fc:	f43f aea8 	beq.w	8014e50 <_strtod_l+0x478>
 8015100:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015102:	4620      	mov	r0, r4
 8015104:	f000 ff1a 	bl	8015f3c <_Bfree>
 8015108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801510a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801510c:	9212      	str	r2, [sp, #72]	; 0x48
 801510e:	2b00      	cmp	r3, #0
 8015110:	f300 8093 	bgt.w	801523a <_strtod_l+0x862>
 8015114:	9b07      	ldr	r3, [sp, #28]
 8015116:	2b00      	cmp	r3, #0
 8015118:	dd08      	ble.n	801512c <_strtod_l+0x754>
 801511a:	4639      	mov	r1, r7
 801511c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801511e:	4620      	mov	r0, r4
 8015120:	f001 f8ce 	bl	80162c0 <__pow5mult>
 8015124:	4607      	mov	r7, r0
 8015126:	2800      	cmp	r0, #0
 8015128:	f43f ae92 	beq.w	8014e50 <_strtod_l+0x478>
 801512c:	f1ba 0f00 	cmp.w	sl, #0
 8015130:	dd08      	ble.n	8015144 <_strtod_l+0x76c>
 8015132:	4639      	mov	r1, r7
 8015134:	4652      	mov	r2, sl
 8015136:	4620      	mov	r0, r4
 8015138:	f001 f91c 	bl	8016374 <__lshift>
 801513c:	4607      	mov	r7, r0
 801513e:	2800      	cmp	r0, #0
 8015140:	f43f ae86 	beq.w	8014e50 <_strtod_l+0x478>
 8015144:	f1bb 0f00 	cmp.w	fp, #0
 8015148:	dd08      	ble.n	801515c <_strtod_l+0x784>
 801514a:	4631      	mov	r1, r6
 801514c:	465a      	mov	r2, fp
 801514e:	4620      	mov	r0, r4
 8015150:	f001 f910 	bl	8016374 <__lshift>
 8015154:	4606      	mov	r6, r0
 8015156:	2800      	cmp	r0, #0
 8015158:	f43f ae7a 	beq.w	8014e50 <_strtod_l+0x478>
 801515c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801515e:	463a      	mov	r2, r7
 8015160:	4620      	mov	r0, r4
 8015162:	f001 f993 	bl	801648c <__mdiff>
 8015166:	4605      	mov	r5, r0
 8015168:	2800      	cmp	r0, #0
 801516a:	f43f ae71 	beq.w	8014e50 <_strtod_l+0x478>
 801516e:	2300      	movs	r3, #0
 8015170:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8015174:	60c3      	str	r3, [r0, #12]
 8015176:	4631      	mov	r1, r6
 8015178:	f001 f96c 	bl	8016454 <__mcmp>
 801517c:	2800      	cmp	r0, #0
 801517e:	da7d      	bge.n	801527c <_strtod_l+0x8a4>
 8015180:	ea5a 0308 	orrs.w	r3, sl, r8
 8015184:	f040 80a3 	bne.w	80152ce <_strtod_l+0x8f6>
 8015188:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801518c:	2b00      	cmp	r3, #0
 801518e:	f040 809e 	bne.w	80152ce <_strtod_l+0x8f6>
 8015192:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015196:	0d1b      	lsrs	r3, r3, #20
 8015198:	051b      	lsls	r3, r3, #20
 801519a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801519e:	f240 8096 	bls.w	80152ce <_strtod_l+0x8f6>
 80151a2:	696b      	ldr	r3, [r5, #20]
 80151a4:	b91b      	cbnz	r3, 80151ae <_strtod_l+0x7d6>
 80151a6:	692b      	ldr	r3, [r5, #16]
 80151a8:	2b01      	cmp	r3, #1
 80151aa:	f340 8090 	ble.w	80152ce <_strtod_l+0x8f6>
 80151ae:	4629      	mov	r1, r5
 80151b0:	2201      	movs	r2, #1
 80151b2:	4620      	mov	r0, r4
 80151b4:	f001 f8de 	bl	8016374 <__lshift>
 80151b8:	4631      	mov	r1, r6
 80151ba:	4605      	mov	r5, r0
 80151bc:	f001 f94a 	bl	8016454 <__mcmp>
 80151c0:	2800      	cmp	r0, #0
 80151c2:	f340 8084 	ble.w	80152ce <_strtod_l+0x8f6>
 80151c6:	9904      	ldr	r1, [sp, #16]
 80151c8:	4a2b      	ldr	r2, [pc, #172]	; (8015278 <_strtod_l+0x8a0>)
 80151ca:	464b      	mov	r3, r9
 80151cc:	2900      	cmp	r1, #0
 80151ce:	f000 809d 	beq.w	801530c <_strtod_l+0x934>
 80151d2:	ea02 0109 	and.w	r1, r2, r9
 80151d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80151da:	f300 8097 	bgt.w	801530c <_strtod_l+0x934>
 80151de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80151e2:	f77f aea5 	ble.w	8014f30 <_strtod_l+0x558>
 80151e6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8015268 <_strtod_l+0x890>
 80151ea:	ec49 8b16 	vmov	d6, r8, r9
 80151ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80151f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80151f6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80151fa:	4313      	orrs	r3, r2
 80151fc:	bf08      	it	eq
 80151fe:	2322      	moveq	r3, #34	; 0x22
 8015200:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8015204:	bf08      	it	eq
 8015206:	6023      	streq	r3, [r4, #0]
 8015208:	e62c      	b.n	8014e64 <_strtod_l+0x48c>
 801520a:	f04f 31ff 	mov.w	r1, #4294967295
 801520e:	fa01 f202 	lsl.w	r2, r1, r2
 8015212:	ea02 0808 	and.w	r8, r2, r8
 8015216:	e6d9      	b.n	8014fcc <_strtod_l+0x5f4>
 8015218:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801521c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8015220:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8015224:	33e2      	adds	r3, #226	; 0xe2
 8015226:	fa00 f303 	lsl.w	r3, r0, r3
 801522a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801522e:	e73f      	b.n	80150b0 <_strtod_l+0x6d8>
 8015230:	2200      	movs	r2, #0
 8015232:	2301      	movs	r3, #1
 8015234:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015238:	e73a      	b.n	80150b0 <_strtod_l+0x6d8>
 801523a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801523c:	461a      	mov	r2, r3
 801523e:	4620      	mov	r0, r4
 8015240:	f001 f898 	bl	8016374 <__lshift>
 8015244:	9012      	str	r0, [sp, #72]	; 0x48
 8015246:	2800      	cmp	r0, #0
 8015248:	f47f af64 	bne.w	8015114 <_strtod_l+0x73c>
 801524c:	e600      	b.n	8014e50 <_strtod_l+0x478>
 801524e:	bf00      	nop
 8015250:	94a03595 	.word	0x94a03595
 8015254:	3fcfffff 	.word	0x3fcfffff
 8015258:	94a03595 	.word	0x94a03595
 801525c:	3fdfffff 	.word	0x3fdfffff
 8015260:	35afe535 	.word	0x35afe535
 8015264:	3fe00000 	.word	0x3fe00000
 8015268:	00000000 	.word	0x00000000
 801526c:	39500000 	.word	0x39500000
 8015270:	08017e18 	.word	0x08017e18
 8015274:	fffffc02 	.word	0xfffffc02
 8015278:	7ff00000 	.word	0x7ff00000
 801527c:	46cb      	mov	fp, r9
 801527e:	d15f      	bne.n	8015340 <_strtod_l+0x968>
 8015280:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015284:	f1ba 0f00 	cmp.w	sl, #0
 8015288:	d02a      	beq.n	80152e0 <_strtod_l+0x908>
 801528a:	4aa7      	ldr	r2, [pc, #668]	; (8015528 <_strtod_l+0xb50>)
 801528c:	4293      	cmp	r3, r2
 801528e:	d12b      	bne.n	80152e8 <_strtod_l+0x910>
 8015290:	9b04      	ldr	r3, [sp, #16]
 8015292:	4642      	mov	r2, r8
 8015294:	b1fb      	cbz	r3, 80152d6 <_strtod_l+0x8fe>
 8015296:	4ba5      	ldr	r3, [pc, #660]	; (801552c <_strtod_l+0xb54>)
 8015298:	ea09 0303 	and.w	r3, r9, r3
 801529c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80152a0:	f04f 31ff 	mov.w	r1, #4294967295
 80152a4:	d81a      	bhi.n	80152dc <_strtod_l+0x904>
 80152a6:	0d1b      	lsrs	r3, r3, #20
 80152a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80152ac:	fa01 f303 	lsl.w	r3, r1, r3
 80152b0:	429a      	cmp	r2, r3
 80152b2:	d119      	bne.n	80152e8 <_strtod_l+0x910>
 80152b4:	4b9e      	ldr	r3, [pc, #632]	; (8015530 <_strtod_l+0xb58>)
 80152b6:	459b      	cmp	fp, r3
 80152b8:	d102      	bne.n	80152c0 <_strtod_l+0x8e8>
 80152ba:	3201      	adds	r2, #1
 80152bc:	f43f adc8 	beq.w	8014e50 <_strtod_l+0x478>
 80152c0:	4b9a      	ldr	r3, [pc, #616]	; (801552c <_strtod_l+0xb54>)
 80152c2:	ea0b 0303 	and.w	r3, fp, r3
 80152c6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80152ca:	f04f 0800 	mov.w	r8, #0
 80152ce:	9b04      	ldr	r3, [sp, #16]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d188      	bne.n	80151e6 <_strtod_l+0x80e>
 80152d4:	e5c6      	b.n	8014e64 <_strtod_l+0x48c>
 80152d6:	f04f 33ff 	mov.w	r3, #4294967295
 80152da:	e7e9      	b.n	80152b0 <_strtod_l+0x8d8>
 80152dc:	460b      	mov	r3, r1
 80152de:	e7e7      	b.n	80152b0 <_strtod_l+0x8d8>
 80152e0:	ea53 0308 	orrs.w	r3, r3, r8
 80152e4:	f43f af6f 	beq.w	80151c6 <_strtod_l+0x7ee>
 80152e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152ea:	b1cb      	cbz	r3, 8015320 <_strtod_l+0x948>
 80152ec:	ea13 0f0b 	tst.w	r3, fp
 80152f0:	d0ed      	beq.n	80152ce <_strtod_l+0x8f6>
 80152f2:	9a04      	ldr	r2, [sp, #16]
 80152f4:	4640      	mov	r0, r8
 80152f6:	4649      	mov	r1, r9
 80152f8:	f1ba 0f00 	cmp.w	sl, #0
 80152fc:	d014      	beq.n	8015328 <_strtod_l+0x950>
 80152fe:	f7ff fb4f 	bl	80149a0 <sulp>
 8015302:	ee38 7b00 	vadd.f64	d7, d8, d0
 8015306:	ec59 8b17 	vmov	r8, r9, d7
 801530a:	e7e0      	b.n	80152ce <_strtod_l+0x8f6>
 801530c:	4013      	ands	r3, r2
 801530e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015312:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8015316:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801531a:	f04f 38ff 	mov.w	r8, #4294967295
 801531e:	e7d6      	b.n	80152ce <_strtod_l+0x8f6>
 8015320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015322:	ea13 0f08 	tst.w	r3, r8
 8015326:	e7e3      	b.n	80152f0 <_strtod_l+0x918>
 8015328:	f7ff fb3a 	bl	80149a0 <sulp>
 801532c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8015330:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8015334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015338:	ec59 8b10 	vmov	r8, r9, d0
 801533c:	d1c7      	bne.n	80152ce <_strtod_l+0x8f6>
 801533e:	e5f7      	b.n	8014f30 <_strtod_l+0x558>
 8015340:	4631      	mov	r1, r6
 8015342:	4628      	mov	r0, r5
 8015344:	f001 fa04 	bl	8016750 <__ratio>
 8015348:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801534c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015354:	d865      	bhi.n	8015422 <_strtod_l+0xa4a>
 8015356:	f1ba 0f00 	cmp.w	sl, #0
 801535a:	d042      	beq.n	80153e2 <_strtod_l+0xa0a>
 801535c:	4b75      	ldr	r3, [pc, #468]	; (8015534 <_strtod_l+0xb5c>)
 801535e:	2200      	movs	r2, #0
 8015360:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8015364:	4871      	ldr	r0, [pc, #452]	; (801552c <_strtod_l+0xb54>)
 8015366:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8015540 <_strtod_l+0xb68>
 801536a:	ea0b 0100 	and.w	r1, fp, r0
 801536e:	4561      	cmp	r1, ip
 8015370:	f040 808e 	bne.w	8015490 <_strtod_l+0xab8>
 8015374:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8015378:	ec49 8b10 	vmov	d0, r8, r9
 801537c:	ec43 2b1c 	vmov	d12, r2, r3
 8015380:	910a      	str	r1, [sp, #40]	; 0x28
 8015382:	f001 f90d 	bl	80165a0 <__ulp>
 8015386:	ec49 8b1e 	vmov	d14, r8, r9
 801538a:	4868      	ldr	r0, [pc, #416]	; (801552c <_strtod_l+0xb54>)
 801538c:	eeac eb00 	vfma.f64	d14, d12, d0
 8015390:	ee1e 3a90 	vmov	r3, s29
 8015394:	4a68      	ldr	r2, [pc, #416]	; (8015538 <_strtod_l+0xb60>)
 8015396:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015398:	4018      	ands	r0, r3
 801539a:	4290      	cmp	r0, r2
 801539c:	ec59 8b1e 	vmov	r8, r9, d14
 80153a0:	d94e      	bls.n	8015440 <_strtod_l+0xa68>
 80153a2:	ee18 3a90 	vmov	r3, s17
 80153a6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80153aa:	4293      	cmp	r3, r2
 80153ac:	d104      	bne.n	80153b8 <_strtod_l+0x9e0>
 80153ae:	ee18 3a10 	vmov	r3, s16
 80153b2:	3301      	adds	r3, #1
 80153b4:	f43f ad4c 	beq.w	8014e50 <_strtod_l+0x478>
 80153b8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8015530 <_strtod_l+0xb58>
 80153bc:	f04f 38ff 	mov.w	r8, #4294967295
 80153c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80153c2:	4620      	mov	r0, r4
 80153c4:	f000 fdba 	bl	8015f3c <_Bfree>
 80153c8:	4639      	mov	r1, r7
 80153ca:	4620      	mov	r0, r4
 80153cc:	f000 fdb6 	bl	8015f3c <_Bfree>
 80153d0:	4631      	mov	r1, r6
 80153d2:	4620      	mov	r0, r4
 80153d4:	f000 fdb2 	bl	8015f3c <_Bfree>
 80153d8:	4629      	mov	r1, r5
 80153da:	4620      	mov	r0, r4
 80153dc:	f000 fdae 	bl	8015f3c <_Bfree>
 80153e0:	e619      	b.n	8015016 <_strtod_l+0x63e>
 80153e2:	f1b8 0f00 	cmp.w	r8, #0
 80153e6:	d112      	bne.n	801540e <_strtod_l+0xa36>
 80153e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80153ec:	b9b3      	cbnz	r3, 801541c <_strtod_l+0xa44>
 80153ee:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80153f2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80153f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153fa:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80153fe:	bf58      	it	pl
 8015400:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8015404:	eeb1 7b4d 	vneg.f64	d7, d13
 8015408:	ec53 2b17 	vmov	r2, r3, d7
 801540c:	e7aa      	b.n	8015364 <_strtod_l+0x98c>
 801540e:	f1b8 0f01 	cmp.w	r8, #1
 8015412:	d103      	bne.n	801541c <_strtod_l+0xa44>
 8015414:	f1b9 0f00 	cmp.w	r9, #0
 8015418:	f43f ad8a 	beq.w	8014f30 <_strtod_l+0x558>
 801541c:	4b47      	ldr	r3, [pc, #284]	; (801553c <_strtod_l+0xb64>)
 801541e:	2200      	movs	r2, #0
 8015420:	e79e      	b.n	8015360 <_strtod_l+0x988>
 8015422:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8015426:	ee20 db0d 	vmul.f64	d13, d0, d13
 801542a:	f1ba 0f00 	cmp.w	sl, #0
 801542e:	d104      	bne.n	801543a <_strtod_l+0xa62>
 8015430:	eeb1 7b4d 	vneg.f64	d7, d13
 8015434:	ec53 2b17 	vmov	r2, r3, d7
 8015438:	e794      	b.n	8015364 <_strtod_l+0x98c>
 801543a:	eeb0 7b4d 	vmov.f64	d7, d13
 801543e:	e7f9      	b.n	8015434 <_strtod_l+0xa5c>
 8015440:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8015444:	9b04      	ldr	r3, [sp, #16]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d1ba      	bne.n	80153c0 <_strtod_l+0x9e8>
 801544a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801544e:	0d1b      	lsrs	r3, r3, #20
 8015450:	051b      	lsls	r3, r3, #20
 8015452:	4299      	cmp	r1, r3
 8015454:	d1b4      	bne.n	80153c0 <_strtod_l+0x9e8>
 8015456:	ec51 0b1d 	vmov	r0, r1, d13
 801545a:	f7eb f985 	bl	8000768 <__aeabi_d2lz>
 801545e:	f7eb f93d 	bl	80006dc <__aeabi_l2d>
 8015462:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015466:	ec41 0b17 	vmov	d7, r0, r1
 801546a:	ea43 0308 	orr.w	r3, r3, r8
 801546e:	ea53 030a 	orrs.w	r3, r3, sl
 8015472:	ee3d db47 	vsub.f64	d13, d13, d7
 8015476:	d03c      	beq.n	80154f2 <_strtod_l+0xb1a>
 8015478:	eeb4 dbca 	vcmpe.f64	d13, d10
 801547c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015480:	f53f acf0 	bmi.w	8014e64 <_strtod_l+0x48c>
 8015484:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8015488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801548c:	dd98      	ble.n	80153c0 <_strtod_l+0x9e8>
 801548e:	e4e9      	b.n	8014e64 <_strtod_l+0x48c>
 8015490:	9804      	ldr	r0, [sp, #16]
 8015492:	b1f0      	cbz	r0, 80154d2 <_strtod_l+0xafa>
 8015494:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8015498:	d81b      	bhi.n	80154d2 <_strtod_l+0xafa>
 801549a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8015520 <_strtod_l+0xb48>
 801549e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80154a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154a6:	d811      	bhi.n	80154cc <_strtod_l+0xaf4>
 80154a8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80154ac:	ee1d 3a10 	vmov	r3, s26
 80154b0:	2b01      	cmp	r3, #1
 80154b2:	bf38      	it	cc
 80154b4:	2301      	movcc	r3, #1
 80154b6:	ee0d 3a10 	vmov	s26, r3
 80154ba:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80154be:	f1ba 0f00 	cmp.w	sl, #0
 80154c2:	d113      	bne.n	80154ec <_strtod_l+0xb14>
 80154c4:	eeb1 7b4d 	vneg.f64	d7, d13
 80154c8:	ec53 2b17 	vmov	r2, r3, d7
 80154cc:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80154d0:	1a43      	subs	r3, r0, r1
 80154d2:	eeb0 0b48 	vmov.f64	d0, d8
 80154d6:	ec43 2b1c 	vmov	d12, r2, r3
 80154da:	910a      	str	r1, [sp, #40]	; 0x28
 80154dc:	f001 f860 	bl	80165a0 <__ulp>
 80154e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80154e2:	eeac 8b00 	vfma.f64	d8, d12, d0
 80154e6:	ec59 8b18 	vmov	r8, r9, d8
 80154ea:	e7ab      	b.n	8015444 <_strtod_l+0xa6c>
 80154ec:	eeb0 7b4d 	vmov.f64	d7, d13
 80154f0:	e7ea      	b.n	80154c8 <_strtod_l+0xaf0>
 80154f2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80154f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154fa:	f57f af61 	bpl.w	80153c0 <_strtod_l+0x9e8>
 80154fe:	e4b1      	b.n	8014e64 <_strtod_l+0x48c>
 8015500:	2300      	movs	r3, #0
 8015502:	9308      	str	r3, [sp, #32]
 8015504:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015506:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015508:	6013      	str	r3, [r2, #0]
 801550a:	f7ff baad 	b.w	8014a68 <_strtod_l+0x90>
 801550e:	2a65      	cmp	r2, #101	; 0x65
 8015510:	f43f ab9f 	beq.w	8014c52 <_strtod_l+0x27a>
 8015514:	2a45      	cmp	r2, #69	; 0x45
 8015516:	f43f ab9c 	beq.w	8014c52 <_strtod_l+0x27a>
 801551a:	2101      	movs	r1, #1
 801551c:	f7ff bbd4 	b.w	8014cc8 <_strtod_l+0x2f0>
 8015520:	ffc00000 	.word	0xffc00000
 8015524:	41dfffff 	.word	0x41dfffff
 8015528:	000fffff 	.word	0x000fffff
 801552c:	7ff00000 	.word	0x7ff00000
 8015530:	7fefffff 	.word	0x7fefffff
 8015534:	3ff00000 	.word	0x3ff00000
 8015538:	7c9fffff 	.word	0x7c9fffff
 801553c:	bff00000 	.word	0xbff00000
 8015540:	7fe00000 	.word	0x7fe00000

08015544 <strtod>:
 8015544:	460a      	mov	r2, r1
 8015546:	4601      	mov	r1, r0
 8015548:	4802      	ldr	r0, [pc, #8]	; (8015554 <strtod+0x10>)
 801554a:	4b03      	ldr	r3, [pc, #12]	; (8015558 <strtod+0x14>)
 801554c:	6800      	ldr	r0, [r0, #0]
 801554e:	f7ff ba43 	b.w	80149d8 <_strtod_l>
 8015552:	bf00      	nop
 8015554:	2400001c 	.word	0x2400001c
 8015558:	24000084 	.word	0x24000084

0801555c <strtok>:
 801555c:	4b16      	ldr	r3, [pc, #88]	; (80155b8 <strtok+0x5c>)
 801555e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015560:	681e      	ldr	r6, [r3, #0]
 8015562:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8015564:	4605      	mov	r5, r0
 8015566:	b9fc      	cbnz	r4, 80155a8 <strtok+0x4c>
 8015568:	2050      	movs	r0, #80	; 0x50
 801556a:	9101      	str	r1, [sp, #4]
 801556c:	f000 fc7e 	bl	8015e6c <malloc>
 8015570:	9901      	ldr	r1, [sp, #4]
 8015572:	65b0      	str	r0, [r6, #88]	; 0x58
 8015574:	4602      	mov	r2, r0
 8015576:	b920      	cbnz	r0, 8015582 <strtok+0x26>
 8015578:	4b10      	ldr	r3, [pc, #64]	; (80155bc <strtok+0x60>)
 801557a:	4811      	ldr	r0, [pc, #68]	; (80155c0 <strtok+0x64>)
 801557c:	2157      	movs	r1, #87	; 0x57
 801557e:	f000 f8d5 	bl	801572c <__assert_func>
 8015582:	e9c0 4400 	strd	r4, r4, [r0]
 8015586:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801558a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801558e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8015592:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8015596:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801559a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801559e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80155a2:	6184      	str	r4, [r0, #24]
 80155a4:	7704      	strb	r4, [r0, #28]
 80155a6:	6244      	str	r4, [r0, #36]	; 0x24
 80155a8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80155aa:	2301      	movs	r3, #1
 80155ac:	4628      	mov	r0, r5
 80155ae:	b002      	add	sp, #8
 80155b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155b4:	f000 b806 	b.w	80155c4 <__strtok_r>
 80155b8:	2400001c 	.word	0x2400001c
 80155bc:	08017e40 	.word	0x08017e40
 80155c0:	08017e57 	.word	0x08017e57

080155c4 <__strtok_r>:
 80155c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155c6:	b908      	cbnz	r0, 80155cc <__strtok_r+0x8>
 80155c8:	6810      	ldr	r0, [r2, #0]
 80155ca:	b188      	cbz	r0, 80155f0 <__strtok_r+0x2c>
 80155cc:	4604      	mov	r4, r0
 80155ce:	4620      	mov	r0, r4
 80155d0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80155d4:	460f      	mov	r7, r1
 80155d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80155da:	b91e      	cbnz	r6, 80155e4 <__strtok_r+0x20>
 80155dc:	b965      	cbnz	r5, 80155f8 <__strtok_r+0x34>
 80155de:	6015      	str	r5, [r2, #0]
 80155e0:	4628      	mov	r0, r5
 80155e2:	e005      	b.n	80155f0 <__strtok_r+0x2c>
 80155e4:	42b5      	cmp	r5, r6
 80155e6:	d1f6      	bne.n	80155d6 <__strtok_r+0x12>
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d1f0      	bne.n	80155ce <__strtok_r+0xa>
 80155ec:	6014      	str	r4, [r2, #0]
 80155ee:	7003      	strb	r3, [r0, #0]
 80155f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155f2:	461c      	mov	r4, r3
 80155f4:	e00c      	b.n	8015610 <__strtok_r+0x4c>
 80155f6:	b915      	cbnz	r5, 80155fe <__strtok_r+0x3a>
 80155f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80155fc:	460e      	mov	r6, r1
 80155fe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8015602:	42ab      	cmp	r3, r5
 8015604:	d1f7      	bne.n	80155f6 <__strtok_r+0x32>
 8015606:	2b00      	cmp	r3, #0
 8015608:	d0f3      	beq.n	80155f2 <__strtok_r+0x2e>
 801560a:	2300      	movs	r3, #0
 801560c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8015610:	6014      	str	r4, [r2, #0]
 8015612:	e7ed      	b.n	80155f0 <__strtok_r+0x2c>

08015614 <_strtol_l.constprop.0>:
 8015614:	2b01      	cmp	r3, #1
 8015616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801561a:	d001      	beq.n	8015620 <_strtol_l.constprop.0+0xc>
 801561c:	2b24      	cmp	r3, #36	; 0x24
 801561e:	d906      	bls.n	801562e <_strtol_l.constprop.0+0x1a>
 8015620:	f7ff f96c 	bl	80148fc <__errno>
 8015624:	2316      	movs	r3, #22
 8015626:	6003      	str	r3, [r0, #0]
 8015628:	2000      	movs	r0, #0
 801562a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801562e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015714 <_strtol_l.constprop.0+0x100>
 8015632:	460d      	mov	r5, r1
 8015634:	462e      	mov	r6, r5
 8015636:	f815 4b01 	ldrb.w	r4, [r5], #1
 801563a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801563e:	f017 0708 	ands.w	r7, r7, #8
 8015642:	d1f7      	bne.n	8015634 <_strtol_l.constprop.0+0x20>
 8015644:	2c2d      	cmp	r4, #45	; 0x2d
 8015646:	d132      	bne.n	80156ae <_strtol_l.constprop.0+0x9a>
 8015648:	782c      	ldrb	r4, [r5, #0]
 801564a:	2701      	movs	r7, #1
 801564c:	1cb5      	adds	r5, r6, #2
 801564e:	2b00      	cmp	r3, #0
 8015650:	d05b      	beq.n	801570a <_strtol_l.constprop.0+0xf6>
 8015652:	2b10      	cmp	r3, #16
 8015654:	d109      	bne.n	801566a <_strtol_l.constprop.0+0x56>
 8015656:	2c30      	cmp	r4, #48	; 0x30
 8015658:	d107      	bne.n	801566a <_strtol_l.constprop.0+0x56>
 801565a:	782c      	ldrb	r4, [r5, #0]
 801565c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015660:	2c58      	cmp	r4, #88	; 0x58
 8015662:	d14d      	bne.n	8015700 <_strtol_l.constprop.0+0xec>
 8015664:	786c      	ldrb	r4, [r5, #1]
 8015666:	2310      	movs	r3, #16
 8015668:	3502      	adds	r5, #2
 801566a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801566e:	f108 38ff 	add.w	r8, r8, #4294967295
 8015672:	f04f 0c00 	mov.w	ip, #0
 8015676:	fbb8 f9f3 	udiv	r9, r8, r3
 801567a:	4666      	mov	r6, ip
 801567c:	fb03 8a19 	mls	sl, r3, r9, r8
 8015680:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8015684:	f1be 0f09 	cmp.w	lr, #9
 8015688:	d816      	bhi.n	80156b8 <_strtol_l.constprop.0+0xa4>
 801568a:	4674      	mov	r4, lr
 801568c:	42a3      	cmp	r3, r4
 801568e:	dd24      	ble.n	80156da <_strtol_l.constprop.0+0xc6>
 8015690:	f1bc 0f00 	cmp.w	ip, #0
 8015694:	db1e      	blt.n	80156d4 <_strtol_l.constprop.0+0xc0>
 8015696:	45b1      	cmp	r9, r6
 8015698:	d31c      	bcc.n	80156d4 <_strtol_l.constprop.0+0xc0>
 801569a:	d101      	bne.n	80156a0 <_strtol_l.constprop.0+0x8c>
 801569c:	45a2      	cmp	sl, r4
 801569e:	db19      	blt.n	80156d4 <_strtol_l.constprop.0+0xc0>
 80156a0:	fb06 4603 	mla	r6, r6, r3, r4
 80156a4:	f04f 0c01 	mov.w	ip, #1
 80156a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80156ac:	e7e8      	b.n	8015680 <_strtol_l.constprop.0+0x6c>
 80156ae:	2c2b      	cmp	r4, #43	; 0x2b
 80156b0:	bf04      	itt	eq
 80156b2:	782c      	ldrbeq	r4, [r5, #0]
 80156b4:	1cb5      	addeq	r5, r6, #2
 80156b6:	e7ca      	b.n	801564e <_strtol_l.constprop.0+0x3a>
 80156b8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80156bc:	f1be 0f19 	cmp.w	lr, #25
 80156c0:	d801      	bhi.n	80156c6 <_strtol_l.constprop.0+0xb2>
 80156c2:	3c37      	subs	r4, #55	; 0x37
 80156c4:	e7e2      	b.n	801568c <_strtol_l.constprop.0+0x78>
 80156c6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80156ca:	f1be 0f19 	cmp.w	lr, #25
 80156ce:	d804      	bhi.n	80156da <_strtol_l.constprop.0+0xc6>
 80156d0:	3c57      	subs	r4, #87	; 0x57
 80156d2:	e7db      	b.n	801568c <_strtol_l.constprop.0+0x78>
 80156d4:	f04f 3cff 	mov.w	ip, #4294967295
 80156d8:	e7e6      	b.n	80156a8 <_strtol_l.constprop.0+0x94>
 80156da:	f1bc 0f00 	cmp.w	ip, #0
 80156de:	da05      	bge.n	80156ec <_strtol_l.constprop.0+0xd8>
 80156e0:	2322      	movs	r3, #34	; 0x22
 80156e2:	6003      	str	r3, [r0, #0]
 80156e4:	4646      	mov	r6, r8
 80156e6:	b942      	cbnz	r2, 80156fa <_strtol_l.constprop.0+0xe6>
 80156e8:	4630      	mov	r0, r6
 80156ea:	e79e      	b.n	801562a <_strtol_l.constprop.0+0x16>
 80156ec:	b107      	cbz	r7, 80156f0 <_strtol_l.constprop.0+0xdc>
 80156ee:	4276      	negs	r6, r6
 80156f0:	2a00      	cmp	r2, #0
 80156f2:	d0f9      	beq.n	80156e8 <_strtol_l.constprop.0+0xd4>
 80156f4:	f1bc 0f00 	cmp.w	ip, #0
 80156f8:	d000      	beq.n	80156fc <_strtol_l.constprop.0+0xe8>
 80156fa:	1e69      	subs	r1, r5, #1
 80156fc:	6011      	str	r1, [r2, #0]
 80156fe:	e7f3      	b.n	80156e8 <_strtol_l.constprop.0+0xd4>
 8015700:	2430      	movs	r4, #48	; 0x30
 8015702:	2b00      	cmp	r3, #0
 8015704:	d1b1      	bne.n	801566a <_strtol_l.constprop.0+0x56>
 8015706:	2308      	movs	r3, #8
 8015708:	e7af      	b.n	801566a <_strtol_l.constprop.0+0x56>
 801570a:	2c30      	cmp	r4, #48	; 0x30
 801570c:	d0a5      	beq.n	801565a <_strtol_l.constprop.0+0x46>
 801570e:	230a      	movs	r3, #10
 8015710:	e7ab      	b.n	801566a <_strtol_l.constprop.0+0x56>
 8015712:	bf00      	nop
 8015714:	08017ef1 	.word	0x08017ef1

08015718 <strtol>:
 8015718:	4613      	mov	r3, r2
 801571a:	460a      	mov	r2, r1
 801571c:	4601      	mov	r1, r0
 801571e:	4802      	ldr	r0, [pc, #8]	; (8015728 <strtol+0x10>)
 8015720:	6800      	ldr	r0, [r0, #0]
 8015722:	f7ff bf77 	b.w	8015614 <_strtol_l.constprop.0>
 8015726:	bf00      	nop
 8015728:	2400001c 	.word	0x2400001c

0801572c <__assert_func>:
 801572c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801572e:	4614      	mov	r4, r2
 8015730:	461a      	mov	r2, r3
 8015732:	4b09      	ldr	r3, [pc, #36]	; (8015758 <__assert_func+0x2c>)
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	4605      	mov	r5, r0
 8015738:	68d8      	ldr	r0, [r3, #12]
 801573a:	b14c      	cbz	r4, 8015750 <__assert_func+0x24>
 801573c:	4b07      	ldr	r3, [pc, #28]	; (801575c <__assert_func+0x30>)
 801573e:	9100      	str	r1, [sp, #0]
 8015740:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015744:	4906      	ldr	r1, [pc, #24]	; (8015760 <__assert_func+0x34>)
 8015746:	462b      	mov	r3, r5
 8015748:	f000 f80e 	bl	8015768 <fiprintf>
 801574c:	f001 feae 	bl	80174ac <abort>
 8015750:	4b04      	ldr	r3, [pc, #16]	; (8015764 <__assert_func+0x38>)
 8015752:	461c      	mov	r4, r3
 8015754:	e7f3      	b.n	801573e <__assert_func+0x12>
 8015756:	bf00      	nop
 8015758:	2400001c 	.word	0x2400001c
 801575c:	08017eb4 	.word	0x08017eb4
 8015760:	08017ec1 	.word	0x08017ec1
 8015764:	08017eef 	.word	0x08017eef

08015768 <fiprintf>:
 8015768:	b40e      	push	{r1, r2, r3}
 801576a:	b503      	push	{r0, r1, lr}
 801576c:	4601      	mov	r1, r0
 801576e:	ab03      	add	r3, sp, #12
 8015770:	4805      	ldr	r0, [pc, #20]	; (8015788 <fiprintf+0x20>)
 8015772:	f853 2b04 	ldr.w	r2, [r3], #4
 8015776:	6800      	ldr	r0, [r0, #0]
 8015778:	9301      	str	r3, [sp, #4]
 801577a:	f001 fad9 	bl	8016d30 <_vfiprintf_r>
 801577e:	b002      	add	sp, #8
 8015780:	f85d eb04 	ldr.w	lr, [sp], #4
 8015784:	b003      	add	sp, #12
 8015786:	4770      	bx	lr
 8015788:	2400001c 	.word	0x2400001c

0801578c <rshift>:
 801578c:	6903      	ldr	r3, [r0, #16]
 801578e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015792:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015796:	ea4f 1261 	mov.w	r2, r1, asr #5
 801579a:	f100 0414 	add.w	r4, r0, #20
 801579e:	dd45      	ble.n	801582c <rshift+0xa0>
 80157a0:	f011 011f 	ands.w	r1, r1, #31
 80157a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80157a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80157ac:	d10c      	bne.n	80157c8 <rshift+0x3c>
 80157ae:	f100 0710 	add.w	r7, r0, #16
 80157b2:	4629      	mov	r1, r5
 80157b4:	42b1      	cmp	r1, r6
 80157b6:	d334      	bcc.n	8015822 <rshift+0x96>
 80157b8:	1a9b      	subs	r3, r3, r2
 80157ba:	009b      	lsls	r3, r3, #2
 80157bc:	1eea      	subs	r2, r5, #3
 80157be:	4296      	cmp	r6, r2
 80157c0:	bf38      	it	cc
 80157c2:	2300      	movcc	r3, #0
 80157c4:	4423      	add	r3, r4
 80157c6:	e015      	b.n	80157f4 <rshift+0x68>
 80157c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80157cc:	f1c1 0820 	rsb	r8, r1, #32
 80157d0:	40cf      	lsrs	r7, r1
 80157d2:	f105 0e04 	add.w	lr, r5, #4
 80157d6:	46a1      	mov	r9, r4
 80157d8:	4576      	cmp	r6, lr
 80157da:	46f4      	mov	ip, lr
 80157dc:	d815      	bhi.n	801580a <rshift+0x7e>
 80157de:	1a9a      	subs	r2, r3, r2
 80157e0:	0092      	lsls	r2, r2, #2
 80157e2:	3a04      	subs	r2, #4
 80157e4:	3501      	adds	r5, #1
 80157e6:	42ae      	cmp	r6, r5
 80157e8:	bf38      	it	cc
 80157ea:	2200      	movcc	r2, #0
 80157ec:	18a3      	adds	r3, r4, r2
 80157ee:	50a7      	str	r7, [r4, r2]
 80157f0:	b107      	cbz	r7, 80157f4 <rshift+0x68>
 80157f2:	3304      	adds	r3, #4
 80157f4:	1b1a      	subs	r2, r3, r4
 80157f6:	42a3      	cmp	r3, r4
 80157f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80157fc:	bf08      	it	eq
 80157fe:	2300      	moveq	r3, #0
 8015800:	6102      	str	r2, [r0, #16]
 8015802:	bf08      	it	eq
 8015804:	6143      	streq	r3, [r0, #20]
 8015806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801580a:	f8dc c000 	ldr.w	ip, [ip]
 801580e:	fa0c fc08 	lsl.w	ip, ip, r8
 8015812:	ea4c 0707 	orr.w	r7, ip, r7
 8015816:	f849 7b04 	str.w	r7, [r9], #4
 801581a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801581e:	40cf      	lsrs	r7, r1
 8015820:	e7da      	b.n	80157d8 <rshift+0x4c>
 8015822:	f851 cb04 	ldr.w	ip, [r1], #4
 8015826:	f847 cf04 	str.w	ip, [r7, #4]!
 801582a:	e7c3      	b.n	80157b4 <rshift+0x28>
 801582c:	4623      	mov	r3, r4
 801582e:	e7e1      	b.n	80157f4 <rshift+0x68>

08015830 <__hexdig_fun>:
 8015830:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015834:	2b09      	cmp	r3, #9
 8015836:	d802      	bhi.n	801583e <__hexdig_fun+0xe>
 8015838:	3820      	subs	r0, #32
 801583a:	b2c0      	uxtb	r0, r0
 801583c:	4770      	bx	lr
 801583e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015842:	2b05      	cmp	r3, #5
 8015844:	d801      	bhi.n	801584a <__hexdig_fun+0x1a>
 8015846:	3847      	subs	r0, #71	; 0x47
 8015848:	e7f7      	b.n	801583a <__hexdig_fun+0xa>
 801584a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801584e:	2b05      	cmp	r3, #5
 8015850:	d801      	bhi.n	8015856 <__hexdig_fun+0x26>
 8015852:	3827      	subs	r0, #39	; 0x27
 8015854:	e7f1      	b.n	801583a <__hexdig_fun+0xa>
 8015856:	2000      	movs	r0, #0
 8015858:	4770      	bx	lr
	...

0801585c <__gethex>:
 801585c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015860:	ed2d 8b02 	vpush	{d8}
 8015864:	b089      	sub	sp, #36	; 0x24
 8015866:	ee08 0a10 	vmov	s16, r0
 801586a:	9304      	str	r3, [sp, #16]
 801586c:	4bb4      	ldr	r3, [pc, #720]	; (8015b40 <__gethex+0x2e4>)
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	9301      	str	r3, [sp, #4]
 8015872:	4618      	mov	r0, r3
 8015874:	468b      	mov	fp, r1
 8015876:	4690      	mov	r8, r2
 8015878:	f7ea fd44 	bl	8000304 <strlen>
 801587c:	9b01      	ldr	r3, [sp, #4]
 801587e:	f8db 2000 	ldr.w	r2, [fp]
 8015882:	4403      	add	r3, r0
 8015884:	4682      	mov	sl, r0
 8015886:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801588a:	9305      	str	r3, [sp, #20]
 801588c:	1c93      	adds	r3, r2, #2
 801588e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015892:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015896:	32fe      	adds	r2, #254	; 0xfe
 8015898:	18d1      	adds	r1, r2, r3
 801589a:	461f      	mov	r7, r3
 801589c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80158a0:	9100      	str	r1, [sp, #0]
 80158a2:	2830      	cmp	r0, #48	; 0x30
 80158a4:	d0f8      	beq.n	8015898 <__gethex+0x3c>
 80158a6:	f7ff ffc3 	bl	8015830 <__hexdig_fun>
 80158aa:	4604      	mov	r4, r0
 80158ac:	2800      	cmp	r0, #0
 80158ae:	d13a      	bne.n	8015926 <__gethex+0xca>
 80158b0:	9901      	ldr	r1, [sp, #4]
 80158b2:	4652      	mov	r2, sl
 80158b4:	4638      	mov	r0, r7
 80158b6:	f001 fd17 	bl	80172e8 <strncmp>
 80158ba:	4605      	mov	r5, r0
 80158bc:	2800      	cmp	r0, #0
 80158be:	d168      	bne.n	8015992 <__gethex+0x136>
 80158c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80158c4:	eb07 060a 	add.w	r6, r7, sl
 80158c8:	f7ff ffb2 	bl	8015830 <__hexdig_fun>
 80158cc:	2800      	cmp	r0, #0
 80158ce:	d062      	beq.n	8015996 <__gethex+0x13a>
 80158d0:	4633      	mov	r3, r6
 80158d2:	7818      	ldrb	r0, [r3, #0]
 80158d4:	2830      	cmp	r0, #48	; 0x30
 80158d6:	461f      	mov	r7, r3
 80158d8:	f103 0301 	add.w	r3, r3, #1
 80158dc:	d0f9      	beq.n	80158d2 <__gethex+0x76>
 80158de:	f7ff ffa7 	bl	8015830 <__hexdig_fun>
 80158e2:	2301      	movs	r3, #1
 80158e4:	fab0 f480 	clz	r4, r0
 80158e8:	0964      	lsrs	r4, r4, #5
 80158ea:	4635      	mov	r5, r6
 80158ec:	9300      	str	r3, [sp, #0]
 80158ee:	463a      	mov	r2, r7
 80158f0:	4616      	mov	r6, r2
 80158f2:	3201      	adds	r2, #1
 80158f4:	7830      	ldrb	r0, [r6, #0]
 80158f6:	f7ff ff9b 	bl	8015830 <__hexdig_fun>
 80158fa:	2800      	cmp	r0, #0
 80158fc:	d1f8      	bne.n	80158f0 <__gethex+0x94>
 80158fe:	9901      	ldr	r1, [sp, #4]
 8015900:	4652      	mov	r2, sl
 8015902:	4630      	mov	r0, r6
 8015904:	f001 fcf0 	bl	80172e8 <strncmp>
 8015908:	b980      	cbnz	r0, 801592c <__gethex+0xd0>
 801590a:	b94d      	cbnz	r5, 8015920 <__gethex+0xc4>
 801590c:	eb06 050a 	add.w	r5, r6, sl
 8015910:	462a      	mov	r2, r5
 8015912:	4616      	mov	r6, r2
 8015914:	3201      	adds	r2, #1
 8015916:	7830      	ldrb	r0, [r6, #0]
 8015918:	f7ff ff8a 	bl	8015830 <__hexdig_fun>
 801591c:	2800      	cmp	r0, #0
 801591e:	d1f8      	bne.n	8015912 <__gethex+0xb6>
 8015920:	1bad      	subs	r5, r5, r6
 8015922:	00ad      	lsls	r5, r5, #2
 8015924:	e004      	b.n	8015930 <__gethex+0xd4>
 8015926:	2400      	movs	r4, #0
 8015928:	4625      	mov	r5, r4
 801592a:	e7e0      	b.n	80158ee <__gethex+0x92>
 801592c:	2d00      	cmp	r5, #0
 801592e:	d1f7      	bne.n	8015920 <__gethex+0xc4>
 8015930:	7833      	ldrb	r3, [r6, #0]
 8015932:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015936:	2b50      	cmp	r3, #80	; 0x50
 8015938:	d13b      	bne.n	80159b2 <__gethex+0x156>
 801593a:	7873      	ldrb	r3, [r6, #1]
 801593c:	2b2b      	cmp	r3, #43	; 0x2b
 801593e:	d02c      	beq.n	801599a <__gethex+0x13e>
 8015940:	2b2d      	cmp	r3, #45	; 0x2d
 8015942:	d02e      	beq.n	80159a2 <__gethex+0x146>
 8015944:	1c71      	adds	r1, r6, #1
 8015946:	f04f 0900 	mov.w	r9, #0
 801594a:	7808      	ldrb	r0, [r1, #0]
 801594c:	f7ff ff70 	bl	8015830 <__hexdig_fun>
 8015950:	1e43      	subs	r3, r0, #1
 8015952:	b2db      	uxtb	r3, r3
 8015954:	2b18      	cmp	r3, #24
 8015956:	d82c      	bhi.n	80159b2 <__gethex+0x156>
 8015958:	f1a0 0210 	sub.w	r2, r0, #16
 801595c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015960:	f7ff ff66 	bl	8015830 <__hexdig_fun>
 8015964:	1e43      	subs	r3, r0, #1
 8015966:	b2db      	uxtb	r3, r3
 8015968:	2b18      	cmp	r3, #24
 801596a:	d91d      	bls.n	80159a8 <__gethex+0x14c>
 801596c:	f1b9 0f00 	cmp.w	r9, #0
 8015970:	d000      	beq.n	8015974 <__gethex+0x118>
 8015972:	4252      	negs	r2, r2
 8015974:	4415      	add	r5, r2
 8015976:	f8cb 1000 	str.w	r1, [fp]
 801597a:	b1e4      	cbz	r4, 80159b6 <__gethex+0x15a>
 801597c:	9b00      	ldr	r3, [sp, #0]
 801597e:	2b00      	cmp	r3, #0
 8015980:	bf14      	ite	ne
 8015982:	2700      	movne	r7, #0
 8015984:	2706      	moveq	r7, #6
 8015986:	4638      	mov	r0, r7
 8015988:	b009      	add	sp, #36	; 0x24
 801598a:	ecbd 8b02 	vpop	{d8}
 801598e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015992:	463e      	mov	r6, r7
 8015994:	4625      	mov	r5, r4
 8015996:	2401      	movs	r4, #1
 8015998:	e7ca      	b.n	8015930 <__gethex+0xd4>
 801599a:	f04f 0900 	mov.w	r9, #0
 801599e:	1cb1      	adds	r1, r6, #2
 80159a0:	e7d3      	b.n	801594a <__gethex+0xee>
 80159a2:	f04f 0901 	mov.w	r9, #1
 80159a6:	e7fa      	b.n	801599e <__gethex+0x142>
 80159a8:	230a      	movs	r3, #10
 80159aa:	fb03 0202 	mla	r2, r3, r2, r0
 80159ae:	3a10      	subs	r2, #16
 80159b0:	e7d4      	b.n	801595c <__gethex+0x100>
 80159b2:	4631      	mov	r1, r6
 80159b4:	e7df      	b.n	8015976 <__gethex+0x11a>
 80159b6:	1bf3      	subs	r3, r6, r7
 80159b8:	3b01      	subs	r3, #1
 80159ba:	4621      	mov	r1, r4
 80159bc:	2b07      	cmp	r3, #7
 80159be:	dc0b      	bgt.n	80159d8 <__gethex+0x17c>
 80159c0:	ee18 0a10 	vmov	r0, s16
 80159c4:	f000 fa7a 	bl	8015ebc <_Balloc>
 80159c8:	4604      	mov	r4, r0
 80159ca:	b940      	cbnz	r0, 80159de <__gethex+0x182>
 80159cc:	4b5d      	ldr	r3, [pc, #372]	; (8015b44 <__gethex+0x2e8>)
 80159ce:	4602      	mov	r2, r0
 80159d0:	21de      	movs	r1, #222	; 0xde
 80159d2:	485d      	ldr	r0, [pc, #372]	; (8015b48 <__gethex+0x2ec>)
 80159d4:	f7ff feaa 	bl	801572c <__assert_func>
 80159d8:	3101      	adds	r1, #1
 80159da:	105b      	asrs	r3, r3, #1
 80159dc:	e7ee      	b.n	80159bc <__gethex+0x160>
 80159de:	f100 0914 	add.w	r9, r0, #20
 80159e2:	f04f 0b00 	mov.w	fp, #0
 80159e6:	f1ca 0301 	rsb	r3, sl, #1
 80159ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80159ee:	f8cd b000 	str.w	fp, [sp]
 80159f2:	9306      	str	r3, [sp, #24]
 80159f4:	42b7      	cmp	r7, r6
 80159f6:	d340      	bcc.n	8015a7a <__gethex+0x21e>
 80159f8:	9802      	ldr	r0, [sp, #8]
 80159fa:	9b00      	ldr	r3, [sp, #0]
 80159fc:	f840 3b04 	str.w	r3, [r0], #4
 8015a00:	eba0 0009 	sub.w	r0, r0, r9
 8015a04:	1080      	asrs	r0, r0, #2
 8015a06:	0146      	lsls	r6, r0, #5
 8015a08:	6120      	str	r0, [r4, #16]
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	f000 fb48 	bl	80160a0 <__hi0bits>
 8015a10:	1a30      	subs	r0, r6, r0
 8015a12:	f8d8 6000 	ldr.w	r6, [r8]
 8015a16:	42b0      	cmp	r0, r6
 8015a18:	dd63      	ble.n	8015ae2 <__gethex+0x286>
 8015a1a:	1b87      	subs	r7, r0, r6
 8015a1c:	4639      	mov	r1, r7
 8015a1e:	4620      	mov	r0, r4
 8015a20:	f000 fee9 	bl	80167f6 <__any_on>
 8015a24:	4682      	mov	sl, r0
 8015a26:	b1a8      	cbz	r0, 8015a54 <__gethex+0x1f8>
 8015a28:	1e7b      	subs	r3, r7, #1
 8015a2a:	1159      	asrs	r1, r3, #5
 8015a2c:	f003 021f 	and.w	r2, r3, #31
 8015a30:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015a34:	f04f 0a01 	mov.w	sl, #1
 8015a38:	fa0a f202 	lsl.w	r2, sl, r2
 8015a3c:	420a      	tst	r2, r1
 8015a3e:	d009      	beq.n	8015a54 <__gethex+0x1f8>
 8015a40:	4553      	cmp	r3, sl
 8015a42:	dd05      	ble.n	8015a50 <__gethex+0x1f4>
 8015a44:	1eb9      	subs	r1, r7, #2
 8015a46:	4620      	mov	r0, r4
 8015a48:	f000 fed5 	bl	80167f6 <__any_on>
 8015a4c:	2800      	cmp	r0, #0
 8015a4e:	d145      	bne.n	8015adc <__gethex+0x280>
 8015a50:	f04f 0a02 	mov.w	sl, #2
 8015a54:	4639      	mov	r1, r7
 8015a56:	4620      	mov	r0, r4
 8015a58:	f7ff fe98 	bl	801578c <rshift>
 8015a5c:	443d      	add	r5, r7
 8015a5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015a62:	42ab      	cmp	r3, r5
 8015a64:	da4c      	bge.n	8015b00 <__gethex+0x2a4>
 8015a66:	ee18 0a10 	vmov	r0, s16
 8015a6a:	4621      	mov	r1, r4
 8015a6c:	f000 fa66 	bl	8015f3c <_Bfree>
 8015a70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a72:	2300      	movs	r3, #0
 8015a74:	6013      	str	r3, [r2, #0]
 8015a76:	27a3      	movs	r7, #163	; 0xa3
 8015a78:	e785      	b.n	8015986 <__gethex+0x12a>
 8015a7a:	1e73      	subs	r3, r6, #1
 8015a7c:	9a05      	ldr	r2, [sp, #20]
 8015a7e:	9303      	str	r3, [sp, #12]
 8015a80:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015a84:	4293      	cmp	r3, r2
 8015a86:	d019      	beq.n	8015abc <__gethex+0x260>
 8015a88:	f1bb 0f20 	cmp.w	fp, #32
 8015a8c:	d107      	bne.n	8015a9e <__gethex+0x242>
 8015a8e:	9b02      	ldr	r3, [sp, #8]
 8015a90:	9a00      	ldr	r2, [sp, #0]
 8015a92:	f843 2b04 	str.w	r2, [r3], #4
 8015a96:	9302      	str	r3, [sp, #8]
 8015a98:	2300      	movs	r3, #0
 8015a9a:	9300      	str	r3, [sp, #0]
 8015a9c:	469b      	mov	fp, r3
 8015a9e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015aa2:	f7ff fec5 	bl	8015830 <__hexdig_fun>
 8015aa6:	9b00      	ldr	r3, [sp, #0]
 8015aa8:	f000 000f 	and.w	r0, r0, #15
 8015aac:	fa00 f00b 	lsl.w	r0, r0, fp
 8015ab0:	4303      	orrs	r3, r0
 8015ab2:	9300      	str	r3, [sp, #0]
 8015ab4:	f10b 0b04 	add.w	fp, fp, #4
 8015ab8:	9b03      	ldr	r3, [sp, #12]
 8015aba:	e00d      	b.n	8015ad8 <__gethex+0x27c>
 8015abc:	9b03      	ldr	r3, [sp, #12]
 8015abe:	9a06      	ldr	r2, [sp, #24]
 8015ac0:	4413      	add	r3, r2
 8015ac2:	42bb      	cmp	r3, r7
 8015ac4:	d3e0      	bcc.n	8015a88 <__gethex+0x22c>
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	9901      	ldr	r1, [sp, #4]
 8015aca:	9307      	str	r3, [sp, #28]
 8015acc:	4652      	mov	r2, sl
 8015ace:	f001 fc0b 	bl	80172e8 <strncmp>
 8015ad2:	9b07      	ldr	r3, [sp, #28]
 8015ad4:	2800      	cmp	r0, #0
 8015ad6:	d1d7      	bne.n	8015a88 <__gethex+0x22c>
 8015ad8:	461e      	mov	r6, r3
 8015ada:	e78b      	b.n	80159f4 <__gethex+0x198>
 8015adc:	f04f 0a03 	mov.w	sl, #3
 8015ae0:	e7b8      	b.n	8015a54 <__gethex+0x1f8>
 8015ae2:	da0a      	bge.n	8015afa <__gethex+0x29e>
 8015ae4:	1a37      	subs	r7, r6, r0
 8015ae6:	4621      	mov	r1, r4
 8015ae8:	ee18 0a10 	vmov	r0, s16
 8015aec:	463a      	mov	r2, r7
 8015aee:	f000 fc41 	bl	8016374 <__lshift>
 8015af2:	1bed      	subs	r5, r5, r7
 8015af4:	4604      	mov	r4, r0
 8015af6:	f100 0914 	add.w	r9, r0, #20
 8015afa:	f04f 0a00 	mov.w	sl, #0
 8015afe:	e7ae      	b.n	8015a5e <__gethex+0x202>
 8015b00:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015b04:	42a8      	cmp	r0, r5
 8015b06:	dd72      	ble.n	8015bee <__gethex+0x392>
 8015b08:	1b45      	subs	r5, r0, r5
 8015b0a:	42ae      	cmp	r6, r5
 8015b0c:	dc36      	bgt.n	8015b7c <__gethex+0x320>
 8015b0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015b12:	2b02      	cmp	r3, #2
 8015b14:	d02a      	beq.n	8015b6c <__gethex+0x310>
 8015b16:	2b03      	cmp	r3, #3
 8015b18:	d02c      	beq.n	8015b74 <__gethex+0x318>
 8015b1a:	2b01      	cmp	r3, #1
 8015b1c:	d11c      	bne.n	8015b58 <__gethex+0x2fc>
 8015b1e:	42ae      	cmp	r6, r5
 8015b20:	d11a      	bne.n	8015b58 <__gethex+0x2fc>
 8015b22:	2e01      	cmp	r6, #1
 8015b24:	d112      	bne.n	8015b4c <__gethex+0x2f0>
 8015b26:	9a04      	ldr	r2, [sp, #16]
 8015b28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015b2c:	6013      	str	r3, [r2, #0]
 8015b2e:	2301      	movs	r3, #1
 8015b30:	6123      	str	r3, [r4, #16]
 8015b32:	f8c9 3000 	str.w	r3, [r9]
 8015b36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015b38:	2762      	movs	r7, #98	; 0x62
 8015b3a:	601c      	str	r4, [r3, #0]
 8015b3c:	e723      	b.n	8015986 <__gethex+0x12a>
 8015b3e:	bf00      	nop
 8015b40:	08018068 	.word	0x08018068
 8015b44:	08017ff1 	.word	0x08017ff1
 8015b48:	08018002 	.word	0x08018002
 8015b4c:	1e71      	subs	r1, r6, #1
 8015b4e:	4620      	mov	r0, r4
 8015b50:	f000 fe51 	bl	80167f6 <__any_on>
 8015b54:	2800      	cmp	r0, #0
 8015b56:	d1e6      	bne.n	8015b26 <__gethex+0x2ca>
 8015b58:	ee18 0a10 	vmov	r0, s16
 8015b5c:	4621      	mov	r1, r4
 8015b5e:	f000 f9ed 	bl	8015f3c <_Bfree>
 8015b62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015b64:	2300      	movs	r3, #0
 8015b66:	6013      	str	r3, [r2, #0]
 8015b68:	2750      	movs	r7, #80	; 0x50
 8015b6a:	e70c      	b.n	8015986 <__gethex+0x12a>
 8015b6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d1f2      	bne.n	8015b58 <__gethex+0x2fc>
 8015b72:	e7d8      	b.n	8015b26 <__gethex+0x2ca>
 8015b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d1d5      	bne.n	8015b26 <__gethex+0x2ca>
 8015b7a:	e7ed      	b.n	8015b58 <__gethex+0x2fc>
 8015b7c:	1e6f      	subs	r7, r5, #1
 8015b7e:	f1ba 0f00 	cmp.w	sl, #0
 8015b82:	d131      	bne.n	8015be8 <__gethex+0x38c>
 8015b84:	b127      	cbz	r7, 8015b90 <__gethex+0x334>
 8015b86:	4639      	mov	r1, r7
 8015b88:	4620      	mov	r0, r4
 8015b8a:	f000 fe34 	bl	80167f6 <__any_on>
 8015b8e:	4682      	mov	sl, r0
 8015b90:	117b      	asrs	r3, r7, #5
 8015b92:	2101      	movs	r1, #1
 8015b94:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015b98:	f007 071f 	and.w	r7, r7, #31
 8015b9c:	fa01 f707 	lsl.w	r7, r1, r7
 8015ba0:	421f      	tst	r7, r3
 8015ba2:	4629      	mov	r1, r5
 8015ba4:	4620      	mov	r0, r4
 8015ba6:	bf18      	it	ne
 8015ba8:	f04a 0a02 	orrne.w	sl, sl, #2
 8015bac:	1b76      	subs	r6, r6, r5
 8015bae:	f7ff fded 	bl	801578c <rshift>
 8015bb2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015bb6:	2702      	movs	r7, #2
 8015bb8:	f1ba 0f00 	cmp.w	sl, #0
 8015bbc:	d048      	beq.n	8015c50 <__gethex+0x3f4>
 8015bbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015bc2:	2b02      	cmp	r3, #2
 8015bc4:	d015      	beq.n	8015bf2 <__gethex+0x396>
 8015bc6:	2b03      	cmp	r3, #3
 8015bc8:	d017      	beq.n	8015bfa <__gethex+0x39e>
 8015bca:	2b01      	cmp	r3, #1
 8015bcc:	d109      	bne.n	8015be2 <__gethex+0x386>
 8015bce:	f01a 0f02 	tst.w	sl, #2
 8015bd2:	d006      	beq.n	8015be2 <__gethex+0x386>
 8015bd4:	f8d9 0000 	ldr.w	r0, [r9]
 8015bd8:	ea4a 0a00 	orr.w	sl, sl, r0
 8015bdc:	f01a 0f01 	tst.w	sl, #1
 8015be0:	d10e      	bne.n	8015c00 <__gethex+0x3a4>
 8015be2:	f047 0710 	orr.w	r7, r7, #16
 8015be6:	e033      	b.n	8015c50 <__gethex+0x3f4>
 8015be8:	f04f 0a01 	mov.w	sl, #1
 8015bec:	e7d0      	b.n	8015b90 <__gethex+0x334>
 8015bee:	2701      	movs	r7, #1
 8015bf0:	e7e2      	b.n	8015bb8 <__gethex+0x35c>
 8015bf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015bf4:	f1c3 0301 	rsb	r3, r3, #1
 8015bf8:	9315      	str	r3, [sp, #84]	; 0x54
 8015bfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d0f0      	beq.n	8015be2 <__gethex+0x386>
 8015c00:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015c04:	f104 0314 	add.w	r3, r4, #20
 8015c08:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015c0c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015c10:	f04f 0c00 	mov.w	ip, #0
 8015c14:	4618      	mov	r0, r3
 8015c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c1a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015c1e:	d01c      	beq.n	8015c5a <__gethex+0x3fe>
 8015c20:	3201      	adds	r2, #1
 8015c22:	6002      	str	r2, [r0, #0]
 8015c24:	2f02      	cmp	r7, #2
 8015c26:	f104 0314 	add.w	r3, r4, #20
 8015c2a:	d13f      	bne.n	8015cac <__gethex+0x450>
 8015c2c:	f8d8 2000 	ldr.w	r2, [r8]
 8015c30:	3a01      	subs	r2, #1
 8015c32:	42b2      	cmp	r2, r6
 8015c34:	d10a      	bne.n	8015c4c <__gethex+0x3f0>
 8015c36:	1171      	asrs	r1, r6, #5
 8015c38:	2201      	movs	r2, #1
 8015c3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015c3e:	f006 061f 	and.w	r6, r6, #31
 8015c42:	fa02 f606 	lsl.w	r6, r2, r6
 8015c46:	421e      	tst	r6, r3
 8015c48:	bf18      	it	ne
 8015c4a:	4617      	movne	r7, r2
 8015c4c:	f047 0720 	orr.w	r7, r7, #32
 8015c50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c52:	601c      	str	r4, [r3, #0]
 8015c54:	9b04      	ldr	r3, [sp, #16]
 8015c56:	601d      	str	r5, [r3, #0]
 8015c58:	e695      	b.n	8015986 <__gethex+0x12a>
 8015c5a:	4299      	cmp	r1, r3
 8015c5c:	f843 cc04 	str.w	ip, [r3, #-4]
 8015c60:	d8d8      	bhi.n	8015c14 <__gethex+0x3b8>
 8015c62:	68a3      	ldr	r3, [r4, #8]
 8015c64:	459b      	cmp	fp, r3
 8015c66:	db19      	blt.n	8015c9c <__gethex+0x440>
 8015c68:	6861      	ldr	r1, [r4, #4]
 8015c6a:	ee18 0a10 	vmov	r0, s16
 8015c6e:	3101      	adds	r1, #1
 8015c70:	f000 f924 	bl	8015ebc <_Balloc>
 8015c74:	4681      	mov	r9, r0
 8015c76:	b918      	cbnz	r0, 8015c80 <__gethex+0x424>
 8015c78:	4b1a      	ldr	r3, [pc, #104]	; (8015ce4 <__gethex+0x488>)
 8015c7a:	4602      	mov	r2, r0
 8015c7c:	2184      	movs	r1, #132	; 0x84
 8015c7e:	e6a8      	b.n	80159d2 <__gethex+0x176>
 8015c80:	6922      	ldr	r2, [r4, #16]
 8015c82:	3202      	adds	r2, #2
 8015c84:	f104 010c 	add.w	r1, r4, #12
 8015c88:	0092      	lsls	r2, r2, #2
 8015c8a:	300c      	adds	r0, #12
 8015c8c:	f000 f908 	bl	8015ea0 <memcpy>
 8015c90:	4621      	mov	r1, r4
 8015c92:	ee18 0a10 	vmov	r0, s16
 8015c96:	f000 f951 	bl	8015f3c <_Bfree>
 8015c9a:	464c      	mov	r4, r9
 8015c9c:	6923      	ldr	r3, [r4, #16]
 8015c9e:	1c5a      	adds	r2, r3, #1
 8015ca0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015ca4:	6122      	str	r2, [r4, #16]
 8015ca6:	2201      	movs	r2, #1
 8015ca8:	615a      	str	r2, [r3, #20]
 8015caa:	e7bb      	b.n	8015c24 <__gethex+0x3c8>
 8015cac:	6922      	ldr	r2, [r4, #16]
 8015cae:	455a      	cmp	r2, fp
 8015cb0:	dd0b      	ble.n	8015cca <__gethex+0x46e>
 8015cb2:	2101      	movs	r1, #1
 8015cb4:	4620      	mov	r0, r4
 8015cb6:	f7ff fd69 	bl	801578c <rshift>
 8015cba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015cbe:	3501      	adds	r5, #1
 8015cc0:	42ab      	cmp	r3, r5
 8015cc2:	f6ff aed0 	blt.w	8015a66 <__gethex+0x20a>
 8015cc6:	2701      	movs	r7, #1
 8015cc8:	e7c0      	b.n	8015c4c <__gethex+0x3f0>
 8015cca:	f016 061f 	ands.w	r6, r6, #31
 8015cce:	d0fa      	beq.n	8015cc6 <__gethex+0x46a>
 8015cd0:	4453      	add	r3, sl
 8015cd2:	f1c6 0620 	rsb	r6, r6, #32
 8015cd6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015cda:	f000 f9e1 	bl	80160a0 <__hi0bits>
 8015cde:	42b0      	cmp	r0, r6
 8015ce0:	dbe7      	blt.n	8015cb2 <__gethex+0x456>
 8015ce2:	e7f0      	b.n	8015cc6 <__gethex+0x46a>
 8015ce4:	08017ff1 	.word	0x08017ff1

08015ce8 <L_shift>:
 8015ce8:	f1c2 0208 	rsb	r2, r2, #8
 8015cec:	0092      	lsls	r2, r2, #2
 8015cee:	b570      	push	{r4, r5, r6, lr}
 8015cf0:	f1c2 0620 	rsb	r6, r2, #32
 8015cf4:	6843      	ldr	r3, [r0, #4]
 8015cf6:	6804      	ldr	r4, [r0, #0]
 8015cf8:	fa03 f506 	lsl.w	r5, r3, r6
 8015cfc:	432c      	orrs	r4, r5
 8015cfe:	40d3      	lsrs	r3, r2
 8015d00:	6004      	str	r4, [r0, #0]
 8015d02:	f840 3f04 	str.w	r3, [r0, #4]!
 8015d06:	4288      	cmp	r0, r1
 8015d08:	d3f4      	bcc.n	8015cf4 <L_shift+0xc>
 8015d0a:	bd70      	pop	{r4, r5, r6, pc}

08015d0c <__match>:
 8015d0c:	b530      	push	{r4, r5, lr}
 8015d0e:	6803      	ldr	r3, [r0, #0]
 8015d10:	3301      	adds	r3, #1
 8015d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d16:	b914      	cbnz	r4, 8015d1e <__match+0x12>
 8015d18:	6003      	str	r3, [r0, #0]
 8015d1a:	2001      	movs	r0, #1
 8015d1c:	bd30      	pop	{r4, r5, pc}
 8015d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015d26:	2d19      	cmp	r5, #25
 8015d28:	bf98      	it	ls
 8015d2a:	3220      	addls	r2, #32
 8015d2c:	42a2      	cmp	r2, r4
 8015d2e:	d0f0      	beq.n	8015d12 <__match+0x6>
 8015d30:	2000      	movs	r0, #0
 8015d32:	e7f3      	b.n	8015d1c <__match+0x10>

08015d34 <__hexnan>:
 8015d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d38:	680b      	ldr	r3, [r1, #0]
 8015d3a:	115e      	asrs	r6, r3, #5
 8015d3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015d40:	f013 031f 	ands.w	r3, r3, #31
 8015d44:	b087      	sub	sp, #28
 8015d46:	bf18      	it	ne
 8015d48:	3604      	addne	r6, #4
 8015d4a:	2500      	movs	r5, #0
 8015d4c:	1f37      	subs	r7, r6, #4
 8015d4e:	4690      	mov	r8, r2
 8015d50:	6802      	ldr	r2, [r0, #0]
 8015d52:	9301      	str	r3, [sp, #4]
 8015d54:	4682      	mov	sl, r0
 8015d56:	f846 5c04 	str.w	r5, [r6, #-4]
 8015d5a:	46b9      	mov	r9, r7
 8015d5c:	463c      	mov	r4, r7
 8015d5e:	9502      	str	r5, [sp, #8]
 8015d60:	46ab      	mov	fp, r5
 8015d62:	7851      	ldrb	r1, [r2, #1]
 8015d64:	1c53      	adds	r3, r2, #1
 8015d66:	9303      	str	r3, [sp, #12]
 8015d68:	b341      	cbz	r1, 8015dbc <__hexnan+0x88>
 8015d6a:	4608      	mov	r0, r1
 8015d6c:	9205      	str	r2, [sp, #20]
 8015d6e:	9104      	str	r1, [sp, #16]
 8015d70:	f7ff fd5e 	bl	8015830 <__hexdig_fun>
 8015d74:	2800      	cmp	r0, #0
 8015d76:	d14f      	bne.n	8015e18 <__hexnan+0xe4>
 8015d78:	9904      	ldr	r1, [sp, #16]
 8015d7a:	9a05      	ldr	r2, [sp, #20]
 8015d7c:	2920      	cmp	r1, #32
 8015d7e:	d818      	bhi.n	8015db2 <__hexnan+0x7e>
 8015d80:	9b02      	ldr	r3, [sp, #8]
 8015d82:	459b      	cmp	fp, r3
 8015d84:	dd13      	ble.n	8015dae <__hexnan+0x7a>
 8015d86:	454c      	cmp	r4, r9
 8015d88:	d206      	bcs.n	8015d98 <__hexnan+0x64>
 8015d8a:	2d07      	cmp	r5, #7
 8015d8c:	dc04      	bgt.n	8015d98 <__hexnan+0x64>
 8015d8e:	462a      	mov	r2, r5
 8015d90:	4649      	mov	r1, r9
 8015d92:	4620      	mov	r0, r4
 8015d94:	f7ff ffa8 	bl	8015ce8 <L_shift>
 8015d98:	4544      	cmp	r4, r8
 8015d9a:	d950      	bls.n	8015e3e <__hexnan+0x10a>
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	f1a4 0904 	sub.w	r9, r4, #4
 8015da2:	f844 3c04 	str.w	r3, [r4, #-4]
 8015da6:	f8cd b008 	str.w	fp, [sp, #8]
 8015daa:	464c      	mov	r4, r9
 8015dac:	461d      	mov	r5, r3
 8015dae:	9a03      	ldr	r2, [sp, #12]
 8015db0:	e7d7      	b.n	8015d62 <__hexnan+0x2e>
 8015db2:	2929      	cmp	r1, #41	; 0x29
 8015db4:	d156      	bne.n	8015e64 <__hexnan+0x130>
 8015db6:	3202      	adds	r2, #2
 8015db8:	f8ca 2000 	str.w	r2, [sl]
 8015dbc:	f1bb 0f00 	cmp.w	fp, #0
 8015dc0:	d050      	beq.n	8015e64 <__hexnan+0x130>
 8015dc2:	454c      	cmp	r4, r9
 8015dc4:	d206      	bcs.n	8015dd4 <__hexnan+0xa0>
 8015dc6:	2d07      	cmp	r5, #7
 8015dc8:	dc04      	bgt.n	8015dd4 <__hexnan+0xa0>
 8015dca:	462a      	mov	r2, r5
 8015dcc:	4649      	mov	r1, r9
 8015dce:	4620      	mov	r0, r4
 8015dd0:	f7ff ff8a 	bl	8015ce8 <L_shift>
 8015dd4:	4544      	cmp	r4, r8
 8015dd6:	d934      	bls.n	8015e42 <__hexnan+0x10e>
 8015dd8:	f1a8 0204 	sub.w	r2, r8, #4
 8015ddc:	4623      	mov	r3, r4
 8015dde:	f853 1b04 	ldr.w	r1, [r3], #4
 8015de2:	f842 1f04 	str.w	r1, [r2, #4]!
 8015de6:	429f      	cmp	r7, r3
 8015de8:	d2f9      	bcs.n	8015dde <__hexnan+0xaa>
 8015dea:	1b3b      	subs	r3, r7, r4
 8015dec:	f023 0303 	bic.w	r3, r3, #3
 8015df0:	3304      	adds	r3, #4
 8015df2:	3401      	adds	r4, #1
 8015df4:	3e03      	subs	r6, #3
 8015df6:	42b4      	cmp	r4, r6
 8015df8:	bf88      	it	hi
 8015dfa:	2304      	movhi	r3, #4
 8015dfc:	4443      	add	r3, r8
 8015dfe:	2200      	movs	r2, #0
 8015e00:	f843 2b04 	str.w	r2, [r3], #4
 8015e04:	429f      	cmp	r7, r3
 8015e06:	d2fb      	bcs.n	8015e00 <__hexnan+0xcc>
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	b91b      	cbnz	r3, 8015e14 <__hexnan+0xe0>
 8015e0c:	4547      	cmp	r7, r8
 8015e0e:	d127      	bne.n	8015e60 <__hexnan+0x12c>
 8015e10:	2301      	movs	r3, #1
 8015e12:	603b      	str	r3, [r7, #0]
 8015e14:	2005      	movs	r0, #5
 8015e16:	e026      	b.n	8015e66 <__hexnan+0x132>
 8015e18:	3501      	adds	r5, #1
 8015e1a:	2d08      	cmp	r5, #8
 8015e1c:	f10b 0b01 	add.w	fp, fp, #1
 8015e20:	dd06      	ble.n	8015e30 <__hexnan+0xfc>
 8015e22:	4544      	cmp	r4, r8
 8015e24:	d9c3      	bls.n	8015dae <__hexnan+0x7a>
 8015e26:	2300      	movs	r3, #0
 8015e28:	f844 3c04 	str.w	r3, [r4, #-4]
 8015e2c:	2501      	movs	r5, #1
 8015e2e:	3c04      	subs	r4, #4
 8015e30:	6822      	ldr	r2, [r4, #0]
 8015e32:	f000 000f 	and.w	r0, r0, #15
 8015e36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015e3a:	6022      	str	r2, [r4, #0]
 8015e3c:	e7b7      	b.n	8015dae <__hexnan+0x7a>
 8015e3e:	2508      	movs	r5, #8
 8015e40:	e7b5      	b.n	8015dae <__hexnan+0x7a>
 8015e42:	9b01      	ldr	r3, [sp, #4]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d0df      	beq.n	8015e08 <__hexnan+0xd4>
 8015e48:	f04f 32ff 	mov.w	r2, #4294967295
 8015e4c:	f1c3 0320 	rsb	r3, r3, #32
 8015e50:	fa22 f303 	lsr.w	r3, r2, r3
 8015e54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015e58:	401a      	ands	r2, r3
 8015e5a:	f846 2c04 	str.w	r2, [r6, #-4]
 8015e5e:	e7d3      	b.n	8015e08 <__hexnan+0xd4>
 8015e60:	3f04      	subs	r7, #4
 8015e62:	e7d1      	b.n	8015e08 <__hexnan+0xd4>
 8015e64:	2004      	movs	r0, #4
 8015e66:	b007      	add	sp, #28
 8015e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015e6c <malloc>:
 8015e6c:	4b02      	ldr	r3, [pc, #8]	; (8015e78 <malloc+0xc>)
 8015e6e:	4601      	mov	r1, r0
 8015e70:	6818      	ldr	r0, [r3, #0]
 8015e72:	f000 bd63 	b.w	801693c <_malloc_r>
 8015e76:	bf00      	nop
 8015e78:	2400001c 	.word	0x2400001c

08015e7c <__ascii_mbtowc>:
 8015e7c:	b082      	sub	sp, #8
 8015e7e:	b901      	cbnz	r1, 8015e82 <__ascii_mbtowc+0x6>
 8015e80:	a901      	add	r1, sp, #4
 8015e82:	b142      	cbz	r2, 8015e96 <__ascii_mbtowc+0x1a>
 8015e84:	b14b      	cbz	r3, 8015e9a <__ascii_mbtowc+0x1e>
 8015e86:	7813      	ldrb	r3, [r2, #0]
 8015e88:	600b      	str	r3, [r1, #0]
 8015e8a:	7812      	ldrb	r2, [r2, #0]
 8015e8c:	1e10      	subs	r0, r2, #0
 8015e8e:	bf18      	it	ne
 8015e90:	2001      	movne	r0, #1
 8015e92:	b002      	add	sp, #8
 8015e94:	4770      	bx	lr
 8015e96:	4610      	mov	r0, r2
 8015e98:	e7fb      	b.n	8015e92 <__ascii_mbtowc+0x16>
 8015e9a:	f06f 0001 	mvn.w	r0, #1
 8015e9e:	e7f8      	b.n	8015e92 <__ascii_mbtowc+0x16>

08015ea0 <memcpy>:
 8015ea0:	440a      	add	r2, r1
 8015ea2:	4291      	cmp	r1, r2
 8015ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8015ea8:	d100      	bne.n	8015eac <memcpy+0xc>
 8015eaa:	4770      	bx	lr
 8015eac:	b510      	push	{r4, lr}
 8015eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015eb6:	4291      	cmp	r1, r2
 8015eb8:	d1f9      	bne.n	8015eae <memcpy+0xe>
 8015eba:	bd10      	pop	{r4, pc}

08015ebc <_Balloc>:
 8015ebc:	b570      	push	{r4, r5, r6, lr}
 8015ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015ec0:	4604      	mov	r4, r0
 8015ec2:	460d      	mov	r5, r1
 8015ec4:	b976      	cbnz	r6, 8015ee4 <_Balloc+0x28>
 8015ec6:	2010      	movs	r0, #16
 8015ec8:	f7ff ffd0 	bl	8015e6c <malloc>
 8015ecc:	4602      	mov	r2, r0
 8015ece:	6260      	str	r0, [r4, #36]	; 0x24
 8015ed0:	b920      	cbnz	r0, 8015edc <_Balloc+0x20>
 8015ed2:	4b18      	ldr	r3, [pc, #96]	; (8015f34 <_Balloc+0x78>)
 8015ed4:	4818      	ldr	r0, [pc, #96]	; (8015f38 <_Balloc+0x7c>)
 8015ed6:	2166      	movs	r1, #102	; 0x66
 8015ed8:	f7ff fc28 	bl	801572c <__assert_func>
 8015edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015ee0:	6006      	str	r6, [r0, #0]
 8015ee2:	60c6      	str	r6, [r0, #12]
 8015ee4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015ee6:	68f3      	ldr	r3, [r6, #12]
 8015ee8:	b183      	cbz	r3, 8015f0c <_Balloc+0x50>
 8015eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015eec:	68db      	ldr	r3, [r3, #12]
 8015eee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015ef2:	b9b8      	cbnz	r0, 8015f24 <_Balloc+0x68>
 8015ef4:	2101      	movs	r1, #1
 8015ef6:	fa01 f605 	lsl.w	r6, r1, r5
 8015efa:	1d72      	adds	r2, r6, #5
 8015efc:	0092      	lsls	r2, r2, #2
 8015efe:	4620      	mov	r0, r4
 8015f00:	f000 fc9a 	bl	8016838 <_calloc_r>
 8015f04:	b160      	cbz	r0, 8015f20 <_Balloc+0x64>
 8015f06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015f0a:	e00e      	b.n	8015f2a <_Balloc+0x6e>
 8015f0c:	2221      	movs	r2, #33	; 0x21
 8015f0e:	2104      	movs	r1, #4
 8015f10:	4620      	mov	r0, r4
 8015f12:	f000 fc91 	bl	8016838 <_calloc_r>
 8015f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015f18:	60f0      	str	r0, [r6, #12]
 8015f1a:	68db      	ldr	r3, [r3, #12]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d1e4      	bne.n	8015eea <_Balloc+0x2e>
 8015f20:	2000      	movs	r0, #0
 8015f22:	bd70      	pop	{r4, r5, r6, pc}
 8015f24:	6802      	ldr	r2, [r0, #0]
 8015f26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015f30:	e7f7      	b.n	8015f22 <_Balloc+0x66>
 8015f32:	bf00      	nop
 8015f34:	08017e40 	.word	0x08017e40
 8015f38:	0801807c 	.word	0x0801807c

08015f3c <_Bfree>:
 8015f3c:	b570      	push	{r4, r5, r6, lr}
 8015f3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015f40:	4605      	mov	r5, r0
 8015f42:	460c      	mov	r4, r1
 8015f44:	b976      	cbnz	r6, 8015f64 <_Bfree+0x28>
 8015f46:	2010      	movs	r0, #16
 8015f48:	f7ff ff90 	bl	8015e6c <malloc>
 8015f4c:	4602      	mov	r2, r0
 8015f4e:	6268      	str	r0, [r5, #36]	; 0x24
 8015f50:	b920      	cbnz	r0, 8015f5c <_Bfree+0x20>
 8015f52:	4b09      	ldr	r3, [pc, #36]	; (8015f78 <_Bfree+0x3c>)
 8015f54:	4809      	ldr	r0, [pc, #36]	; (8015f7c <_Bfree+0x40>)
 8015f56:	218a      	movs	r1, #138	; 0x8a
 8015f58:	f7ff fbe8 	bl	801572c <__assert_func>
 8015f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015f60:	6006      	str	r6, [r0, #0]
 8015f62:	60c6      	str	r6, [r0, #12]
 8015f64:	b13c      	cbz	r4, 8015f76 <_Bfree+0x3a>
 8015f66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015f68:	6862      	ldr	r2, [r4, #4]
 8015f6a:	68db      	ldr	r3, [r3, #12]
 8015f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015f70:	6021      	str	r1, [r4, #0]
 8015f72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015f76:	bd70      	pop	{r4, r5, r6, pc}
 8015f78:	08017e40 	.word	0x08017e40
 8015f7c:	0801807c 	.word	0x0801807c

08015f80 <__multadd>:
 8015f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f84:	690d      	ldr	r5, [r1, #16]
 8015f86:	4607      	mov	r7, r0
 8015f88:	460c      	mov	r4, r1
 8015f8a:	461e      	mov	r6, r3
 8015f8c:	f101 0c14 	add.w	ip, r1, #20
 8015f90:	2000      	movs	r0, #0
 8015f92:	f8dc 3000 	ldr.w	r3, [ip]
 8015f96:	b299      	uxth	r1, r3
 8015f98:	fb02 6101 	mla	r1, r2, r1, r6
 8015f9c:	0c1e      	lsrs	r6, r3, #16
 8015f9e:	0c0b      	lsrs	r3, r1, #16
 8015fa0:	fb02 3306 	mla	r3, r2, r6, r3
 8015fa4:	b289      	uxth	r1, r1
 8015fa6:	3001      	adds	r0, #1
 8015fa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015fac:	4285      	cmp	r5, r0
 8015fae:	f84c 1b04 	str.w	r1, [ip], #4
 8015fb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015fb6:	dcec      	bgt.n	8015f92 <__multadd+0x12>
 8015fb8:	b30e      	cbz	r6, 8015ffe <__multadd+0x7e>
 8015fba:	68a3      	ldr	r3, [r4, #8]
 8015fbc:	42ab      	cmp	r3, r5
 8015fbe:	dc19      	bgt.n	8015ff4 <__multadd+0x74>
 8015fc0:	6861      	ldr	r1, [r4, #4]
 8015fc2:	4638      	mov	r0, r7
 8015fc4:	3101      	adds	r1, #1
 8015fc6:	f7ff ff79 	bl	8015ebc <_Balloc>
 8015fca:	4680      	mov	r8, r0
 8015fcc:	b928      	cbnz	r0, 8015fda <__multadd+0x5a>
 8015fce:	4602      	mov	r2, r0
 8015fd0:	4b0c      	ldr	r3, [pc, #48]	; (8016004 <__multadd+0x84>)
 8015fd2:	480d      	ldr	r0, [pc, #52]	; (8016008 <__multadd+0x88>)
 8015fd4:	21b5      	movs	r1, #181	; 0xb5
 8015fd6:	f7ff fba9 	bl	801572c <__assert_func>
 8015fda:	6922      	ldr	r2, [r4, #16]
 8015fdc:	3202      	adds	r2, #2
 8015fde:	f104 010c 	add.w	r1, r4, #12
 8015fe2:	0092      	lsls	r2, r2, #2
 8015fe4:	300c      	adds	r0, #12
 8015fe6:	f7ff ff5b 	bl	8015ea0 <memcpy>
 8015fea:	4621      	mov	r1, r4
 8015fec:	4638      	mov	r0, r7
 8015fee:	f7ff ffa5 	bl	8015f3c <_Bfree>
 8015ff2:	4644      	mov	r4, r8
 8015ff4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015ff8:	3501      	adds	r5, #1
 8015ffa:	615e      	str	r6, [r3, #20]
 8015ffc:	6125      	str	r5, [r4, #16]
 8015ffe:	4620      	mov	r0, r4
 8016000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016004:	08017ff1 	.word	0x08017ff1
 8016008:	0801807c 	.word	0x0801807c

0801600c <__s2b>:
 801600c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016010:	460c      	mov	r4, r1
 8016012:	4615      	mov	r5, r2
 8016014:	461f      	mov	r7, r3
 8016016:	2209      	movs	r2, #9
 8016018:	3308      	adds	r3, #8
 801601a:	4606      	mov	r6, r0
 801601c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016020:	2100      	movs	r1, #0
 8016022:	2201      	movs	r2, #1
 8016024:	429a      	cmp	r2, r3
 8016026:	db09      	blt.n	801603c <__s2b+0x30>
 8016028:	4630      	mov	r0, r6
 801602a:	f7ff ff47 	bl	8015ebc <_Balloc>
 801602e:	b940      	cbnz	r0, 8016042 <__s2b+0x36>
 8016030:	4602      	mov	r2, r0
 8016032:	4b19      	ldr	r3, [pc, #100]	; (8016098 <__s2b+0x8c>)
 8016034:	4819      	ldr	r0, [pc, #100]	; (801609c <__s2b+0x90>)
 8016036:	21ce      	movs	r1, #206	; 0xce
 8016038:	f7ff fb78 	bl	801572c <__assert_func>
 801603c:	0052      	lsls	r2, r2, #1
 801603e:	3101      	adds	r1, #1
 8016040:	e7f0      	b.n	8016024 <__s2b+0x18>
 8016042:	9b08      	ldr	r3, [sp, #32]
 8016044:	6143      	str	r3, [r0, #20]
 8016046:	2d09      	cmp	r5, #9
 8016048:	f04f 0301 	mov.w	r3, #1
 801604c:	6103      	str	r3, [r0, #16]
 801604e:	dd16      	ble.n	801607e <__s2b+0x72>
 8016050:	f104 0909 	add.w	r9, r4, #9
 8016054:	46c8      	mov	r8, r9
 8016056:	442c      	add	r4, r5
 8016058:	f818 3b01 	ldrb.w	r3, [r8], #1
 801605c:	4601      	mov	r1, r0
 801605e:	3b30      	subs	r3, #48	; 0x30
 8016060:	220a      	movs	r2, #10
 8016062:	4630      	mov	r0, r6
 8016064:	f7ff ff8c 	bl	8015f80 <__multadd>
 8016068:	45a0      	cmp	r8, r4
 801606a:	d1f5      	bne.n	8016058 <__s2b+0x4c>
 801606c:	f1a5 0408 	sub.w	r4, r5, #8
 8016070:	444c      	add	r4, r9
 8016072:	1b2d      	subs	r5, r5, r4
 8016074:	1963      	adds	r3, r4, r5
 8016076:	42bb      	cmp	r3, r7
 8016078:	db04      	blt.n	8016084 <__s2b+0x78>
 801607a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801607e:	340a      	adds	r4, #10
 8016080:	2509      	movs	r5, #9
 8016082:	e7f6      	b.n	8016072 <__s2b+0x66>
 8016084:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016088:	4601      	mov	r1, r0
 801608a:	3b30      	subs	r3, #48	; 0x30
 801608c:	220a      	movs	r2, #10
 801608e:	4630      	mov	r0, r6
 8016090:	f7ff ff76 	bl	8015f80 <__multadd>
 8016094:	e7ee      	b.n	8016074 <__s2b+0x68>
 8016096:	bf00      	nop
 8016098:	08017ff1 	.word	0x08017ff1
 801609c:	0801807c 	.word	0x0801807c

080160a0 <__hi0bits>:
 80160a0:	0c03      	lsrs	r3, r0, #16
 80160a2:	041b      	lsls	r3, r3, #16
 80160a4:	b9d3      	cbnz	r3, 80160dc <__hi0bits+0x3c>
 80160a6:	0400      	lsls	r0, r0, #16
 80160a8:	2310      	movs	r3, #16
 80160aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80160ae:	bf04      	itt	eq
 80160b0:	0200      	lsleq	r0, r0, #8
 80160b2:	3308      	addeq	r3, #8
 80160b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80160b8:	bf04      	itt	eq
 80160ba:	0100      	lsleq	r0, r0, #4
 80160bc:	3304      	addeq	r3, #4
 80160be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80160c2:	bf04      	itt	eq
 80160c4:	0080      	lsleq	r0, r0, #2
 80160c6:	3302      	addeq	r3, #2
 80160c8:	2800      	cmp	r0, #0
 80160ca:	db05      	blt.n	80160d8 <__hi0bits+0x38>
 80160cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80160d0:	f103 0301 	add.w	r3, r3, #1
 80160d4:	bf08      	it	eq
 80160d6:	2320      	moveq	r3, #32
 80160d8:	4618      	mov	r0, r3
 80160da:	4770      	bx	lr
 80160dc:	2300      	movs	r3, #0
 80160de:	e7e4      	b.n	80160aa <__hi0bits+0xa>

080160e0 <__lo0bits>:
 80160e0:	6803      	ldr	r3, [r0, #0]
 80160e2:	f013 0207 	ands.w	r2, r3, #7
 80160e6:	4601      	mov	r1, r0
 80160e8:	d00b      	beq.n	8016102 <__lo0bits+0x22>
 80160ea:	07da      	lsls	r2, r3, #31
 80160ec:	d423      	bmi.n	8016136 <__lo0bits+0x56>
 80160ee:	0798      	lsls	r0, r3, #30
 80160f0:	bf49      	itett	mi
 80160f2:	085b      	lsrmi	r3, r3, #1
 80160f4:	089b      	lsrpl	r3, r3, #2
 80160f6:	2001      	movmi	r0, #1
 80160f8:	600b      	strmi	r3, [r1, #0]
 80160fa:	bf5c      	itt	pl
 80160fc:	600b      	strpl	r3, [r1, #0]
 80160fe:	2002      	movpl	r0, #2
 8016100:	4770      	bx	lr
 8016102:	b298      	uxth	r0, r3
 8016104:	b9a8      	cbnz	r0, 8016132 <__lo0bits+0x52>
 8016106:	0c1b      	lsrs	r3, r3, #16
 8016108:	2010      	movs	r0, #16
 801610a:	b2da      	uxtb	r2, r3
 801610c:	b90a      	cbnz	r2, 8016112 <__lo0bits+0x32>
 801610e:	3008      	adds	r0, #8
 8016110:	0a1b      	lsrs	r3, r3, #8
 8016112:	071a      	lsls	r2, r3, #28
 8016114:	bf04      	itt	eq
 8016116:	091b      	lsreq	r3, r3, #4
 8016118:	3004      	addeq	r0, #4
 801611a:	079a      	lsls	r2, r3, #30
 801611c:	bf04      	itt	eq
 801611e:	089b      	lsreq	r3, r3, #2
 8016120:	3002      	addeq	r0, #2
 8016122:	07da      	lsls	r2, r3, #31
 8016124:	d403      	bmi.n	801612e <__lo0bits+0x4e>
 8016126:	085b      	lsrs	r3, r3, #1
 8016128:	f100 0001 	add.w	r0, r0, #1
 801612c:	d005      	beq.n	801613a <__lo0bits+0x5a>
 801612e:	600b      	str	r3, [r1, #0]
 8016130:	4770      	bx	lr
 8016132:	4610      	mov	r0, r2
 8016134:	e7e9      	b.n	801610a <__lo0bits+0x2a>
 8016136:	2000      	movs	r0, #0
 8016138:	4770      	bx	lr
 801613a:	2020      	movs	r0, #32
 801613c:	4770      	bx	lr
	...

08016140 <__i2b>:
 8016140:	b510      	push	{r4, lr}
 8016142:	460c      	mov	r4, r1
 8016144:	2101      	movs	r1, #1
 8016146:	f7ff feb9 	bl	8015ebc <_Balloc>
 801614a:	4602      	mov	r2, r0
 801614c:	b928      	cbnz	r0, 801615a <__i2b+0x1a>
 801614e:	4b05      	ldr	r3, [pc, #20]	; (8016164 <__i2b+0x24>)
 8016150:	4805      	ldr	r0, [pc, #20]	; (8016168 <__i2b+0x28>)
 8016152:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016156:	f7ff fae9 	bl	801572c <__assert_func>
 801615a:	2301      	movs	r3, #1
 801615c:	6144      	str	r4, [r0, #20]
 801615e:	6103      	str	r3, [r0, #16]
 8016160:	bd10      	pop	{r4, pc}
 8016162:	bf00      	nop
 8016164:	08017ff1 	.word	0x08017ff1
 8016168:	0801807c 	.word	0x0801807c

0801616c <__multiply>:
 801616c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016170:	4691      	mov	r9, r2
 8016172:	690a      	ldr	r2, [r1, #16]
 8016174:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016178:	429a      	cmp	r2, r3
 801617a:	bfb8      	it	lt
 801617c:	460b      	movlt	r3, r1
 801617e:	460c      	mov	r4, r1
 8016180:	bfbc      	itt	lt
 8016182:	464c      	movlt	r4, r9
 8016184:	4699      	movlt	r9, r3
 8016186:	6927      	ldr	r7, [r4, #16]
 8016188:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801618c:	68a3      	ldr	r3, [r4, #8]
 801618e:	6861      	ldr	r1, [r4, #4]
 8016190:	eb07 060a 	add.w	r6, r7, sl
 8016194:	42b3      	cmp	r3, r6
 8016196:	b085      	sub	sp, #20
 8016198:	bfb8      	it	lt
 801619a:	3101      	addlt	r1, #1
 801619c:	f7ff fe8e 	bl	8015ebc <_Balloc>
 80161a0:	b930      	cbnz	r0, 80161b0 <__multiply+0x44>
 80161a2:	4602      	mov	r2, r0
 80161a4:	4b44      	ldr	r3, [pc, #272]	; (80162b8 <__multiply+0x14c>)
 80161a6:	4845      	ldr	r0, [pc, #276]	; (80162bc <__multiply+0x150>)
 80161a8:	f240 115d 	movw	r1, #349	; 0x15d
 80161ac:	f7ff fabe 	bl	801572c <__assert_func>
 80161b0:	f100 0514 	add.w	r5, r0, #20
 80161b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80161b8:	462b      	mov	r3, r5
 80161ba:	2200      	movs	r2, #0
 80161bc:	4543      	cmp	r3, r8
 80161be:	d321      	bcc.n	8016204 <__multiply+0x98>
 80161c0:	f104 0314 	add.w	r3, r4, #20
 80161c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80161c8:	f109 0314 	add.w	r3, r9, #20
 80161cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80161d0:	9202      	str	r2, [sp, #8]
 80161d2:	1b3a      	subs	r2, r7, r4
 80161d4:	3a15      	subs	r2, #21
 80161d6:	f022 0203 	bic.w	r2, r2, #3
 80161da:	3204      	adds	r2, #4
 80161dc:	f104 0115 	add.w	r1, r4, #21
 80161e0:	428f      	cmp	r7, r1
 80161e2:	bf38      	it	cc
 80161e4:	2204      	movcc	r2, #4
 80161e6:	9201      	str	r2, [sp, #4]
 80161e8:	9a02      	ldr	r2, [sp, #8]
 80161ea:	9303      	str	r3, [sp, #12]
 80161ec:	429a      	cmp	r2, r3
 80161ee:	d80c      	bhi.n	801620a <__multiply+0x9e>
 80161f0:	2e00      	cmp	r6, #0
 80161f2:	dd03      	ble.n	80161fc <__multiply+0x90>
 80161f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d05a      	beq.n	80162b2 <__multiply+0x146>
 80161fc:	6106      	str	r6, [r0, #16]
 80161fe:	b005      	add	sp, #20
 8016200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016204:	f843 2b04 	str.w	r2, [r3], #4
 8016208:	e7d8      	b.n	80161bc <__multiply+0x50>
 801620a:	f8b3 a000 	ldrh.w	sl, [r3]
 801620e:	f1ba 0f00 	cmp.w	sl, #0
 8016212:	d024      	beq.n	801625e <__multiply+0xf2>
 8016214:	f104 0e14 	add.w	lr, r4, #20
 8016218:	46a9      	mov	r9, r5
 801621a:	f04f 0c00 	mov.w	ip, #0
 801621e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016222:	f8d9 1000 	ldr.w	r1, [r9]
 8016226:	fa1f fb82 	uxth.w	fp, r2
 801622a:	b289      	uxth	r1, r1
 801622c:	fb0a 110b 	mla	r1, sl, fp, r1
 8016230:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016234:	f8d9 2000 	ldr.w	r2, [r9]
 8016238:	4461      	add	r1, ip
 801623a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801623e:	fb0a c20b 	mla	r2, sl, fp, ip
 8016242:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016246:	b289      	uxth	r1, r1
 8016248:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801624c:	4577      	cmp	r7, lr
 801624e:	f849 1b04 	str.w	r1, [r9], #4
 8016252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016256:	d8e2      	bhi.n	801621e <__multiply+0xb2>
 8016258:	9a01      	ldr	r2, [sp, #4]
 801625a:	f845 c002 	str.w	ip, [r5, r2]
 801625e:	9a03      	ldr	r2, [sp, #12]
 8016260:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016264:	3304      	adds	r3, #4
 8016266:	f1b9 0f00 	cmp.w	r9, #0
 801626a:	d020      	beq.n	80162ae <__multiply+0x142>
 801626c:	6829      	ldr	r1, [r5, #0]
 801626e:	f104 0c14 	add.w	ip, r4, #20
 8016272:	46ae      	mov	lr, r5
 8016274:	f04f 0a00 	mov.w	sl, #0
 8016278:	f8bc b000 	ldrh.w	fp, [ip]
 801627c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016280:	fb09 220b 	mla	r2, r9, fp, r2
 8016284:	4492      	add	sl, r2
 8016286:	b289      	uxth	r1, r1
 8016288:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801628c:	f84e 1b04 	str.w	r1, [lr], #4
 8016290:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016294:	f8be 1000 	ldrh.w	r1, [lr]
 8016298:	0c12      	lsrs	r2, r2, #16
 801629a:	fb09 1102 	mla	r1, r9, r2, r1
 801629e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80162a2:	4567      	cmp	r7, ip
 80162a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80162a8:	d8e6      	bhi.n	8016278 <__multiply+0x10c>
 80162aa:	9a01      	ldr	r2, [sp, #4]
 80162ac:	50a9      	str	r1, [r5, r2]
 80162ae:	3504      	adds	r5, #4
 80162b0:	e79a      	b.n	80161e8 <__multiply+0x7c>
 80162b2:	3e01      	subs	r6, #1
 80162b4:	e79c      	b.n	80161f0 <__multiply+0x84>
 80162b6:	bf00      	nop
 80162b8:	08017ff1 	.word	0x08017ff1
 80162bc:	0801807c 	.word	0x0801807c

080162c0 <__pow5mult>:
 80162c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162c4:	4615      	mov	r5, r2
 80162c6:	f012 0203 	ands.w	r2, r2, #3
 80162ca:	4606      	mov	r6, r0
 80162cc:	460f      	mov	r7, r1
 80162ce:	d007      	beq.n	80162e0 <__pow5mult+0x20>
 80162d0:	4c25      	ldr	r4, [pc, #148]	; (8016368 <__pow5mult+0xa8>)
 80162d2:	3a01      	subs	r2, #1
 80162d4:	2300      	movs	r3, #0
 80162d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80162da:	f7ff fe51 	bl	8015f80 <__multadd>
 80162de:	4607      	mov	r7, r0
 80162e0:	10ad      	asrs	r5, r5, #2
 80162e2:	d03d      	beq.n	8016360 <__pow5mult+0xa0>
 80162e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80162e6:	b97c      	cbnz	r4, 8016308 <__pow5mult+0x48>
 80162e8:	2010      	movs	r0, #16
 80162ea:	f7ff fdbf 	bl	8015e6c <malloc>
 80162ee:	4602      	mov	r2, r0
 80162f0:	6270      	str	r0, [r6, #36]	; 0x24
 80162f2:	b928      	cbnz	r0, 8016300 <__pow5mult+0x40>
 80162f4:	4b1d      	ldr	r3, [pc, #116]	; (801636c <__pow5mult+0xac>)
 80162f6:	481e      	ldr	r0, [pc, #120]	; (8016370 <__pow5mult+0xb0>)
 80162f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80162fc:	f7ff fa16 	bl	801572c <__assert_func>
 8016300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016304:	6004      	str	r4, [r0, #0]
 8016306:	60c4      	str	r4, [r0, #12]
 8016308:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801630c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016310:	b94c      	cbnz	r4, 8016326 <__pow5mult+0x66>
 8016312:	f240 2171 	movw	r1, #625	; 0x271
 8016316:	4630      	mov	r0, r6
 8016318:	f7ff ff12 	bl	8016140 <__i2b>
 801631c:	2300      	movs	r3, #0
 801631e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016322:	4604      	mov	r4, r0
 8016324:	6003      	str	r3, [r0, #0]
 8016326:	f04f 0900 	mov.w	r9, #0
 801632a:	07eb      	lsls	r3, r5, #31
 801632c:	d50a      	bpl.n	8016344 <__pow5mult+0x84>
 801632e:	4639      	mov	r1, r7
 8016330:	4622      	mov	r2, r4
 8016332:	4630      	mov	r0, r6
 8016334:	f7ff ff1a 	bl	801616c <__multiply>
 8016338:	4639      	mov	r1, r7
 801633a:	4680      	mov	r8, r0
 801633c:	4630      	mov	r0, r6
 801633e:	f7ff fdfd 	bl	8015f3c <_Bfree>
 8016342:	4647      	mov	r7, r8
 8016344:	106d      	asrs	r5, r5, #1
 8016346:	d00b      	beq.n	8016360 <__pow5mult+0xa0>
 8016348:	6820      	ldr	r0, [r4, #0]
 801634a:	b938      	cbnz	r0, 801635c <__pow5mult+0x9c>
 801634c:	4622      	mov	r2, r4
 801634e:	4621      	mov	r1, r4
 8016350:	4630      	mov	r0, r6
 8016352:	f7ff ff0b 	bl	801616c <__multiply>
 8016356:	6020      	str	r0, [r4, #0]
 8016358:	f8c0 9000 	str.w	r9, [r0]
 801635c:	4604      	mov	r4, r0
 801635e:	e7e4      	b.n	801632a <__pow5mult+0x6a>
 8016360:	4638      	mov	r0, r7
 8016362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016366:	bf00      	nop
 8016368:	080181c8 	.word	0x080181c8
 801636c:	08017e40 	.word	0x08017e40
 8016370:	0801807c 	.word	0x0801807c

08016374 <__lshift>:
 8016374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016378:	460c      	mov	r4, r1
 801637a:	6849      	ldr	r1, [r1, #4]
 801637c:	6923      	ldr	r3, [r4, #16]
 801637e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016382:	68a3      	ldr	r3, [r4, #8]
 8016384:	4607      	mov	r7, r0
 8016386:	4691      	mov	r9, r2
 8016388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801638c:	f108 0601 	add.w	r6, r8, #1
 8016390:	42b3      	cmp	r3, r6
 8016392:	db0b      	blt.n	80163ac <__lshift+0x38>
 8016394:	4638      	mov	r0, r7
 8016396:	f7ff fd91 	bl	8015ebc <_Balloc>
 801639a:	4605      	mov	r5, r0
 801639c:	b948      	cbnz	r0, 80163b2 <__lshift+0x3e>
 801639e:	4602      	mov	r2, r0
 80163a0:	4b2a      	ldr	r3, [pc, #168]	; (801644c <__lshift+0xd8>)
 80163a2:	482b      	ldr	r0, [pc, #172]	; (8016450 <__lshift+0xdc>)
 80163a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80163a8:	f7ff f9c0 	bl	801572c <__assert_func>
 80163ac:	3101      	adds	r1, #1
 80163ae:	005b      	lsls	r3, r3, #1
 80163b0:	e7ee      	b.n	8016390 <__lshift+0x1c>
 80163b2:	2300      	movs	r3, #0
 80163b4:	f100 0114 	add.w	r1, r0, #20
 80163b8:	f100 0210 	add.w	r2, r0, #16
 80163bc:	4618      	mov	r0, r3
 80163be:	4553      	cmp	r3, sl
 80163c0:	db37      	blt.n	8016432 <__lshift+0xbe>
 80163c2:	6920      	ldr	r0, [r4, #16]
 80163c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80163c8:	f104 0314 	add.w	r3, r4, #20
 80163cc:	f019 091f 	ands.w	r9, r9, #31
 80163d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80163d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80163d8:	d02f      	beq.n	801643a <__lshift+0xc6>
 80163da:	f1c9 0e20 	rsb	lr, r9, #32
 80163de:	468a      	mov	sl, r1
 80163e0:	f04f 0c00 	mov.w	ip, #0
 80163e4:	681a      	ldr	r2, [r3, #0]
 80163e6:	fa02 f209 	lsl.w	r2, r2, r9
 80163ea:	ea42 020c 	orr.w	r2, r2, ip
 80163ee:	f84a 2b04 	str.w	r2, [sl], #4
 80163f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80163f6:	4298      	cmp	r0, r3
 80163f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80163fc:	d8f2      	bhi.n	80163e4 <__lshift+0x70>
 80163fe:	1b03      	subs	r3, r0, r4
 8016400:	3b15      	subs	r3, #21
 8016402:	f023 0303 	bic.w	r3, r3, #3
 8016406:	3304      	adds	r3, #4
 8016408:	f104 0215 	add.w	r2, r4, #21
 801640c:	4290      	cmp	r0, r2
 801640e:	bf38      	it	cc
 8016410:	2304      	movcc	r3, #4
 8016412:	f841 c003 	str.w	ip, [r1, r3]
 8016416:	f1bc 0f00 	cmp.w	ip, #0
 801641a:	d001      	beq.n	8016420 <__lshift+0xac>
 801641c:	f108 0602 	add.w	r6, r8, #2
 8016420:	3e01      	subs	r6, #1
 8016422:	4638      	mov	r0, r7
 8016424:	612e      	str	r6, [r5, #16]
 8016426:	4621      	mov	r1, r4
 8016428:	f7ff fd88 	bl	8015f3c <_Bfree>
 801642c:	4628      	mov	r0, r5
 801642e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016432:	f842 0f04 	str.w	r0, [r2, #4]!
 8016436:	3301      	adds	r3, #1
 8016438:	e7c1      	b.n	80163be <__lshift+0x4a>
 801643a:	3904      	subs	r1, #4
 801643c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016440:	f841 2f04 	str.w	r2, [r1, #4]!
 8016444:	4298      	cmp	r0, r3
 8016446:	d8f9      	bhi.n	801643c <__lshift+0xc8>
 8016448:	e7ea      	b.n	8016420 <__lshift+0xac>
 801644a:	bf00      	nop
 801644c:	08017ff1 	.word	0x08017ff1
 8016450:	0801807c 	.word	0x0801807c

08016454 <__mcmp>:
 8016454:	b530      	push	{r4, r5, lr}
 8016456:	6902      	ldr	r2, [r0, #16]
 8016458:	690c      	ldr	r4, [r1, #16]
 801645a:	1b12      	subs	r2, r2, r4
 801645c:	d10e      	bne.n	801647c <__mcmp+0x28>
 801645e:	f100 0314 	add.w	r3, r0, #20
 8016462:	3114      	adds	r1, #20
 8016464:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016468:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801646c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016470:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016474:	42a5      	cmp	r5, r4
 8016476:	d003      	beq.n	8016480 <__mcmp+0x2c>
 8016478:	d305      	bcc.n	8016486 <__mcmp+0x32>
 801647a:	2201      	movs	r2, #1
 801647c:	4610      	mov	r0, r2
 801647e:	bd30      	pop	{r4, r5, pc}
 8016480:	4283      	cmp	r3, r0
 8016482:	d3f3      	bcc.n	801646c <__mcmp+0x18>
 8016484:	e7fa      	b.n	801647c <__mcmp+0x28>
 8016486:	f04f 32ff 	mov.w	r2, #4294967295
 801648a:	e7f7      	b.n	801647c <__mcmp+0x28>

0801648c <__mdiff>:
 801648c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016490:	460c      	mov	r4, r1
 8016492:	4606      	mov	r6, r0
 8016494:	4611      	mov	r1, r2
 8016496:	4620      	mov	r0, r4
 8016498:	4690      	mov	r8, r2
 801649a:	f7ff ffdb 	bl	8016454 <__mcmp>
 801649e:	1e05      	subs	r5, r0, #0
 80164a0:	d110      	bne.n	80164c4 <__mdiff+0x38>
 80164a2:	4629      	mov	r1, r5
 80164a4:	4630      	mov	r0, r6
 80164a6:	f7ff fd09 	bl	8015ebc <_Balloc>
 80164aa:	b930      	cbnz	r0, 80164ba <__mdiff+0x2e>
 80164ac:	4b3a      	ldr	r3, [pc, #232]	; (8016598 <__mdiff+0x10c>)
 80164ae:	4602      	mov	r2, r0
 80164b0:	f240 2132 	movw	r1, #562	; 0x232
 80164b4:	4839      	ldr	r0, [pc, #228]	; (801659c <__mdiff+0x110>)
 80164b6:	f7ff f939 	bl	801572c <__assert_func>
 80164ba:	2301      	movs	r3, #1
 80164bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80164c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164c4:	bfa4      	itt	ge
 80164c6:	4643      	movge	r3, r8
 80164c8:	46a0      	movge	r8, r4
 80164ca:	4630      	mov	r0, r6
 80164cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80164d0:	bfa6      	itte	ge
 80164d2:	461c      	movge	r4, r3
 80164d4:	2500      	movge	r5, #0
 80164d6:	2501      	movlt	r5, #1
 80164d8:	f7ff fcf0 	bl	8015ebc <_Balloc>
 80164dc:	b920      	cbnz	r0, 80164e8 <__mdiff+0x5c>
 80164de:	4b2e      	ldr	r3, [pc, #184]	; (8016598 <__mdiff+0x10c>)
 80164e0:	4602      	mov	r2, r0
 80164e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80164e6:	e7e5      	b.n	80164b4 <__mdiff+0x28>
 80164e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80164ec:	6926      	ldr	r6, [r4, #16]
 80164ee:	60c5      	str	r5, [r0, #12]
 80164f0:	f104 0914 	add.w	r9, r4, #20
 80164f4:	f108 0514 	add.w	r5, r8, #20
 80164f8:	f100 0e14 	add.w	lr, r0, #20
 80164fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016500:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016504:	f108 0210 	add.w	r2, r8, #16
 8016508:	46f2      	mov	sl, lr
 801650a:	2100      	movs	r1, #0
 801650c:	f859 3b04 	ldr.w	r3, [r9], #4
 8016510:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016514:	fa1f f883 	uxth.w	r8, r3
 8016518:	fa11 f18b 	uxtah	r1, r1, fp
 801651c:	0c1b      	lsrs	r3, r3, #16
 801651e:	eba1 0808 	sub.w	r8, r1, r8
 8016522:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016526:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801652a:	fa1f f888 	uxth.w	r8, r8
 801652e:	1419      	asrs	r1, r3, #16
 8016530:	454e      	cmp	r6, r9
 8016532:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016536:	f84a 3b04 	str.w	r3, [sl], #4
 801653a:	d8e7      	bhi.n	801650c <__mdiff+0x80>
 801653c:	1b33      	subs	r3, r6, r4
 801653e:	3b15      	subs	r3, #21
 8016540:	f023 0303 	bic.w	r3, r3, #3
 8016544:	3304      	adds	r3, #4
 8016546:	3415      	adds	r4, #21
 8016548:	42a6      	cmp	r6, r4
 801654a:	bf38      	it	cc
 801654c:	2304      	movcc	r3, #4
 801654e:	441d      	add	r5, r3
 8016550:	4473      	add	r3, lr
 8016552:	469e      	mov	lr, r3
 8016554:	462e      	mov	r6, r5
 8016556:	4566      	cmp	r6, ip
 8016558:	d30e      	bcc.n	8016578 <__mdiff+0xec>
 801655a:	f10c 0203 	add.w	r2, ip, #3
 801655e:	1b52      	subs	r2, r2, r5
 8016560:	f022 0203 	bic.w	r2, r2, #3
 8016564:	3d03      	subs	r5, #3
 8016566:	45ac      	cmp	ip, r5
 8016568:	bf38      	it	cc
 801656a:	2200      	movcc	r2, #0
 801656c:	441a      	add	r2, r3
 801656e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016572:	b17b      	cbz	r3, 8016594 <__mdiff+0x108>
 8016574:	6107      	str	r7, [r0, #16]
 8016576:	e7a3      	b.n	80164c0 <__mdiff+0x34>
 8016578:	f856 8b04 	ldr.w	r8, [r6], #4
 801657c:	fa11 f288 	uxtah	r2, r1, r8
 8016580:	1414      	asrs	r4, r2, #16
 8016582:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016586:	b292      	uxth	r2, r2
 8016588:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801658c:	f84e 2b04 	str.w	r2, [lr], #4
 8016590:	1421      	asrs	r1, r4, #16
 8016592:	e7e0      	b.n	8016556 <__mdiff+0xca>
 8016594:	3f01      	subs	r7, #1
 8016596:	e7ea      	b.n	801656e <__mdiff+0xe2>
 8016598:	08017ff1 	.word	0x08017ff1
 801659c:	0801807c 	.word	0x0801807c

080165a0 <__ulp>:
 80165a0:	b082      	sub	sp, #8
 80165a2:	ed8d 0b00 	vstr	d0, [sp]
 80165a6:	9b01      	ldr	r3, [sp, #4]
 80165a8:	4912      	ldr	r1, [pc, #72]	; (80165f4 <__ulp+0x54>)
 80165aa:	4019      	ands	r1, r3
 80165ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80165b0:	2900      	cmp	r1, #0
 80165b2:	dd05      	ble.n	80165c0 <__ulp+0x20>
 80165b4:	2200      	movs	r2, #0
 80165b6:	460b      	mov	r3, r1
 80165b8:	ec43 2b10 	vmov	d0, r2, r3
 80165bc:	b002      	add	sp, #8
 80165be:	4770      	bx	lr
 80165c0:	4249      	negs	r1, r1
 80165c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80165c6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80165ca:	f04f 0200 	mov.w	r2, #0
 80165ce:	f04f 0300 	mov.w	r3, #0
 80165d2:	da04      	bge.n	80165de <__ulp+0x3e>
 80165d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80165d8:	fa41 f300 	asr.w	r3, r1, r0
 80165dc:	e7ec      	b.n	80165b8 <__ulp+0x18>
 80165de:	f1a0 0114 	sub.w	r1, r0, #20
 80165e2:	291e      	cmp	r1, #30
 80165e4:	bfda      	itte	le
 80165e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80165ea:	fa20 f101 	lsrle.w	r1, r0, r1
 80165ee:	2101      	movgt	r1, #1
 80165f0:	460a      	mov	r2, r1
 80165f2:	e7e1      	b.n	80165b8 <__ulp+0x18>
 80165f4:	7ff00000 	.word	0x7ff00000

080165f8 <__b2d>:
 80165f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165fa:	6905      	ldr	r5, [r0, #16]
 80165fc:	f100 0714 	add.w	r7, r0, #20
 8016600:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016604:	1f2e      	subs	r6, r5, #4
 8016606:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801660a:	4620      	mov	r0, r4
 801660c:	f7ff fd48 	bl	80160a0 <__hi0bits>
 8016610:	f1c0 0320 	rsb	r3, r0, #32
 8016614:	280a      	cmp	r0, #10
 8016616:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016694 <__b2d+0x9c>
 801661a:	600b      	str	r3, [r1, #0]
 801661c:	dc14      	bgt.n	8016648 <__b2d+0x50>
 801661e:	f1c0 0e0b 	rsb	lr, r0, #11
 8016622:	fa24 f10e 	lsr.w	r1, r4, lr
 8016626:	42b7      	cmp	r7, r6
 8016628:	ea41 030c 	orr.w	r3, r1, ip
 801662c:	bf34      	ite	cc
 801662e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016632:	2100      	movcs	r1, #0
 8016634:	3015      	adds	r0, #21
 8016636:	fa04 f000 	lsl.w	r0, r4, r0
 801663a:	fa21 f10e 	lsr.w	r1, r1, lr
 801663e:	ea40 0201 	orr.w	r2, r0, r1
 8016642:	ec43 2b10 	vmov	d0, r2, r3
 8016646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016648:	42b7      	cmp	r7, r6
 801664a:	bf3a      	itte	cc
 801664c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016650:	f1a5 0608 	subcc.w	r6, r5, #8
 8016654:	2100      	movcs	r1, #0
 8016656:	380b      	subs	r0, #11
 8016658:	d017      	beq.n	801668a <__b2d+0x92>
 801665a:	f1c0 0c20 	rsb	ip, r0, #32
 801665e:	fa04 f500 	lsl.w	r5, r4, r0
 8016662:	42be      	cmp	r6, r7
 8016664:	fa21 f40c 	lsr.w	r4, r1, ip
 8016668:	ea45 0504 	orr.w	r5, r5, r4
 801666c:	bf8c      	ite	hi
 801666e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016672:	2400      	movls	r4, #0
 8016674:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016678:	fa01 f000 	lsl.w	r0, r1, r0
 801667c:	fa24 f40c 	lsr.w	r4, r4, ip
 8016680:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016684:	ea40 0204 	orr.w	r2, r0, r4
 8016688:	e7db      	b.n	8016642 <__b2d+0x4a>
 801668a:	ea44 030c 	orr.w	r3, r4, ip
 801668e:	460a      	mov	r2, r1
 8016690:	e7d7      	b.n	8016642 <__b2d+0x4a>
 8016692:	bf00      	nop
 8016694:	3ff00000 	.word	0x3ff00000

08016698 <__d2b>:
 8016698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801669c:	4689      	mov	r9, r1
 801669e:	2101      	movs	r1, #1
 80166a0:	ec57 6b10 	vmov	r6, r7, d0
 80166a4:	4690      	mov	r8, r2
 80166a6:	f7ff fc09 	bl	8015ebc <_Balloc>
 80166aa:	4604      	mov	r4, r0
 80166ac:	b930      	cbnz	r0, 80166bc <__d2b+0x24>
 80166ae:	4602      	mov	r2, r0
 80166b0:	4b25      	ldr	r3, [pc, #148]	; (8016748 <__d2b+0xb0>)
 80166b2:	4826      	ldr	r0, [pc, #152]	; (801674c <__d2b+0xb4>)
 80166b4:	f240 310a 	movw	r1, #778	; 0x30a
 80166b8:	f7ff f838 	bl	801572c <__assert_func>
 80166bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80166c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80166c4:	bb35      	cbnz	r5, 8016714 <__d2b+0x7c>
 80166c6:	2e00      	cmp	r6, #0
 80166c8:	9301      	str	r3, [sp, #4]
 80166ca:	d028      	beq.n	801671e <__d2b+0x86>
 80166cc:	4668      	mov	r0, sp
 80166ce:	9600      	str	r6, [sp, #0]
 80166d0:	f7ff fd06 	bl	80160e0 <__lo0bits>
 80166d4:	9900      	ldr	r1, [sp, #0]
 80166d6:	b300      	cbz	r0, 801671a <__d2b+0x82>
 80166d8:	9a01      	ldr	r2, [sp, #4]
 80166da:	f1c0 0320 	rsb	r3, r0, #32
 80166de:	fa02 f303 	lsl.w	r3, r2, r3
 80166e2:	430b      	orrs	r3, r1
 80166e4:	40c2      	lsrs	r2, r0
 80166e6:	6163      	str	r3, [r4, #20]
 80166e8:	9201      	str	r2, [sp, #4]
 80166ea:	9b01      	ldr	r3, [sp, #4]
 80166ec:	61a3      	str	r3, [r4, #24]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	bf14      	ite	ne
 80166f2:	2202      	movne	r2, #2
 80166f4:	2201      	moveq	r2, #1
 80166f6:	6122      	str	r2, [r4, #16]
 80166f8:	b1d5      	cbz	r5, 8016730 <__d2b+0x98>
 80166fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80166fe:	4405      	add	r5, r0
 8016700:	f8c9 5000 	str.w	r5, [r9]
 8016704:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016708:	f8c8 0000 	str.w	r0, [r8]
 801670c:	4620      	mov	r0, r4
 801670e:	b003      	add	sp, #12
 8016710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016718:	e7d5      	b.n	80166c6 <__d2b+0x2e>
 801671a:	6161      	str	r1, [r4, #20]
 801671c:	e7e5      	b.n	80166ea <__d2b+0x52>
 801671e:	a801      	add	r0, sp, #4
 8016720:	f7ff fcde 	bl	80160e0 <__lo0bits>
 8016724:	9b01      	ldr	r3, [sp, #4]
 8016726:	6163      	str	r3, [r4, #20]
 8016728:	2201      	movs	r2, #1
 801672a:	6122      	str	r2, [r4, #16]
 801672c:	3020      	adds	r0, #32
 801672e:	e7e3      	b.n	80166f8 <__d2b+0x60>
 8016730:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016734:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016738:	f8c9 0000 	str.w	r0, [r9]
 801673c:	6918      	ldr	r0, [r3, #16]
 801673e:	f7ff fcaf 	bl	80160a0 <__hi0bits>
 8016742:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016746:	e7df      	b.n	8016708 <__d2b+0x70>
 8016748:	08017ff1 	.word	0x08017ff1
 801674c:	0801807c 	.word	0x0801807c

08016750 <__ratio>:
 8016750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016754:	4688      	mov	r8, r1
 8016756:	4669      	mov	r1, sp
 8016758:	4681      	mov	r9, r0
 801675a:	f7ff ff4d 	bl	80165f8 <__b2d>
 801675e:	a901      	add	r1, sp, #4
 8016760:	4640      	mov	r0, r8
 8016762:	ec55 4b10 	vmov	r4, r5, d0
 8016766:	ee10 aa10 	vmov	sl, s0
 801676a:	f7ff ff45 	bl	80165f8 <__b2d>
 801676e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016772:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016776:	1a59      	subs	r1, r3, r1
 8016778:	e9dd 2300 	ldrd	r2, r3, [sp]
 801677c:	1ad3      	subs	r3, r2, r3
 801677e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016782:	ec57 6b10 	vmov	r6, r7, d0
 8016786:	2b00      	cmp	r3, #0
 8016788:	bfd6      	itet	le
 801678a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801678e:	462a      	movgt	r2, r5
 8016790:	463a      	movle	r2, r7
 8016792:	46ab      	mov	fp, r5
 8016794:	bfd6      	itet	le
 8016796:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801679a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801679e:	ee00 3a90 	vmovle	s1, r3
 80167a2:	ec4b ab17 	vmov	d7, sl, fp
 80167a6:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80167aa:	b003      	add	sp, #12
 80167ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080167b0 <__copybits>:
 80167b0:	3901      	subs	r1, #1
 80167b2:	b570      	push	{r4, r5, r6, lr}
 80167b4:	1149      	asrs	r1, r1, #5
 80167b6:	6914      	ldr	r4, [r2, #16]
 80167b8:	3101      	adds	r1, #1
 80167ba:	f102 0314 	add.w	r3, r2, #20
 80167be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80167c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80167c6:	1f05      	subs	r5, r0, #4
 80167c8:	42a3      	cmp	r3, r4
 80167ca:	d30c      	bcc.n	80167e6 <__copybits+0x36>
 80167cc:	1aa3      	subs	r3, r4, r2
 80167ce:	3b11      	subs	r3, #17
 80167d0:	f023 0303 	bic.w	r3, r3, #3
 80167d4:	3211      	adds	r2, #17
 80167d6:	42a2      	cmp	r2, r4
 80167d8:	bf88      	it	hi
 80167da:	2300      	movhi	r3, #0
 80167dc:	4418      	add	r0, r3
 80167de:	2300      	movs	r3, #0
 80167e0:	4288      	cmp	r0, r1
 80167e2:	d305      	bcc.n	80167f0 <__copybits+0x40>
 80167e4:	bd70      	pop	{r4, r5, r6, pc}
 80167e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80167ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80167ee:	e7eb      	b.n	80167c8 <__copybits+0x18>
 80167f0:	f840 3b04 	str.w	r3, [r0], #4
 80167f4:	e7f4      	b.n	80167e0 <__copybits+0x30>

080167f6 <__any_on>:
 80167f6:	f100 0214 	add.w	r2, r0, #20
 80167fa:	6900      	ldr	r0, [r0, #16]
 80167fc:	114b      	asrs	r3, r1, #5
 80167fe:	4298      	cmp	r0, r3
 8016800:	b510      	push	{r4, lr}
 8016802:	db11      	blt.n	8016828 <__any_on+0x32>
 8016804:	dd0a      	ble.n	801681c <__any_on+0x26>
 8016806:	f011 011f 	ands.w	r1, r1, #31
 801680a:	d007      	beq.n	801681c <__any_on+0x26>
 801680c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016810:	fa24 f001 	lsr.w	r0, r4, r1
 8016814:	fa00 f101 	lsl.w	r1, r0, r1
 8016818:	428c      	cmp	r4, r1
 801681a:	d10b      	bne.n	8016834 <__any_on+0x3e>
 801681c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016820:	4293      	cmp	r3, r2
 8016822:	d803      	bhi.n	801682c <__any_on+0x36>
 8016824:	2000      	movs	r0, #0
 8016826:	bd10      	pop	{r4, pc}
 8016828:	4603      	mov	r3, r0
 801682a:	e7f7      	b.n	801681c <__any_on+0x26>
 801682c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016830:	2900      	cmp	r1, #0
 8016832:	d0f5      	beq.n	8016820 <__any_on+0x2a>
 8016834:	2001      	movs	r0, #1
 8016836:	e7f6      	b.n	8016826 <__any_on+0x30>

08016838 <_calloc_r>:
 8016838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801683a:	fba1 2402 	umull	r2, r4, r1, r2
 801683e:	b94c      	cbnz	r4, 8016854 <_calloc_r+0x1c>
 8016840:	4611      	mov	r1, r2
 8016842:	9201      	str	r2, [sp, #4]
 8016844:	f000 f87a 	bl	801693c <_malloc_r>
 8016848:	9a01      	ldr	r2, [sp, #4]
 801684a:	4605      	mov	r5, r0
 801684c:	b930      	cbnz	r0, 801685c <_calloc_r+0x24>
 801684e:	4628      	mov	r0, r5
 8016850:	b003      	add	sp, #12
 8016852:	bd30      	pop	{r4, r5, pc}
 8016854:	220c      	movs	r2, #12
 8016856:	6002      	str	r2, [r0, #0]
 8016858:	2500      	movs	r5, #0
 801685a:	e7f8      	b.n	801684e <_calloc_r+0x16>
 801685c:	4621      	mov	r1, r4
 801685e:	f7fe f877 	bl	8014950 <memset>
 8016862:	e7f4      	b.n	801684e <_calloc_r+0x16>

08016864 <_free_r>:
 8016864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016866:	2900      	cmp	r1, #0
 8016868:	d044      	beq.n	80168f4 <_free_r+0x90>
 801686a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801686e:	9001      	str	r0, [sp, #4]
 8016870:	2b00      	cmp	r3, #0
 8016872:	f1a1 0404 	sub.w	r4, r1, #4
 8016876:	bfb8      	it	lt
 8016878:	18e4      	addlt	r4, r4, r3
 801687a:	f001 f859 	bl	8017930 <__malloc_lock>
 801687e:	4a1e      	ldr	r2, [pc, #120]	; (80168f8 <_free_r+0x94>)
 8016880:	9801      	ldr	r0, [sp, #4]
 8016882:	6813      	ldr	r3, [r2, #0]
 8016884:	b933      	cbnz	r3, 8016894 <_free_r+0x30>
 8016886:	6063      	str	r3, [r4, #4]
 8016888:	6014      	str	r4, [r2, #0]
 801688a:	b003      	add	sp, #12
 801688c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016890:	f001 b854 	b.w	801793c <__malloc_unlock>
 8016894:	42a3      	cmp	r3, r4
 8016896:	d908      	bls.n	80168aa <_free_r+0x46>
 8016898:	6825      	ldr	r5, [r4, #0]
 801689a:	1961      	adds	r1, r4, r5
 801689c:	428b      	cmp	r3, r1
 801689e:	bf01      	itttt	eq
 80168a0:	6819      	ldreq	r1, [r3, #0]
 80168a2:	685b      	ldreq	r3, [r3, #4]
 80168a4:	1949      	addeq	r1, r1, r5
 80168a6:	6021      	streq	r1, [r4, #0]
 80168a8:	e7ed      	b.n	8016886 <_free_r+0x22>
 80168aa:	461a      	mov	r2, r3
 80168ac:	685b      	ldr	r3, [r3, #4]
 80168ae:	b10b      	cbz	r3, 80168b4 <_free_r+0x50>
 80168b0:	42a3      	cmp	r3, r4
 80168b2:	d9fa      	bls.n	80168aa <_free_r+0x46>
 80168b4:	6811      	ldr	r1, [r2, #0]
 80168b6:	1855      	adds	r5, r2, r1
 80168b8:	42a5      	cmp	r5, r4
 80168ba:	d10b      	bne.n	80168d4 <_free_r+0x70>
 80168bc:	6824      	ldr	r4, [r4, #0]
 80168be:	4421      	add	r1, r4
 80168c0:	1854      	adds	r4, r2, r1
 80168c2:	42a3      	cmp	r3, r4
 80168c4:	6011      	str	r1, [r2, #0]
 80168c6:	d1e0      	bne.n	801688a <_free_r+0x26>
 80168c8:	681c      	ldr	r4, [r3, #0]
 80168ca:	685b      	ldr	r3, [r3, #4]
 80168cc:	6053      	str	r3, [r2, #4]
 80168ce:	4421      	add	r1, r4
 80168d0:	6011      	str	r1, [r2, #0]
 80168d2:	e7da      	b.n	801688a <_free_r+0x26>
 80168d4:	d902      	bls.n	80168dc <_free_r+0x78>
 80168d6:	230c      	movs	r3, #12
 80168d8:	6003      	str	r3, [r0, #0]
 80168da:	e7d6      	b.n	801688a <_free_r+0x26>
 80168dc:	6825      	ldr	r5, [r4, #0]
 80168de:	1961      	adds	r1, r4, r5
 80168e0:	428b      	cmp	r3, r1
 80168e2:	bf04      	itt	eq
 80168e4:	6819      	ldreq	r1, [r3, #0]
 80168e6:	685b      	ldreq	r3, [r3, #4]
 80168e8:	6063      	str	r3, [r4, #4]
 80168ea:	bf04      	itt	eq
 80168ec:	1949      	addeq	r1, r1, r5
 80168ee:	6021      	streq	r1, [r4, #0]
 80168f0:	6054      	str	r4, [r2, #4]
 80168f2:	e7ca      	b.n	801688a <_free_r+0x26>
 80168f4:	b003      	add	sp, #12
 80168f6:	bd30      	pop	{r4, r5, pc}
 80168f8:	24008e24 	.word	0x24008e24

080168fc <sbrk_aligned>:
 80168fc:	b570      	push	{r4, r5, r6, lr}
 80168fe:	4e0e      	ldr	r6, [pc, #56]	; (8016938 <sbrk_aligned+0x3c>)
 8016900:	460c      	mov	r4, r1
 8016902:	6831      	ldr	r1, [r6, #0]
 8016904:	4605      	mov	r5, r0
 8016906:	b911      	cbnz	r1, 801690e <sbrk_aligned+0x12>
 8016908:	f000 fcde 	bl	80172c8 <_sbrk_r>
 801690c:	6030      	str	r0, [r6, #0]
 801690e:	4621      	mov	r1, r4
 8016910:	4628      	mov	r0, r5
 8016912:	f000 fcd9 	bl	80172c8 <_sbrk_r>
 8016916:	1c43      	adds	r3, r0, #1
 8016918:	d00a      	beq.n	8016930 <sbrk_aligned+0x34>
 801691a:	1cc4      	adds	r4, r0, #3
 801691c:	f024 0403 	bic.w	r4, r4, #3
 8016920:	42a0      	cmp	r0, r4
 8016922:	d007      	beq.n	8016934 <sbrk_aligned+0x38>
 8016924:	1a21      	subs	r1, r4, r0
 8016926:	4628      	mov	r0, r5
 8016928:	f000 fcce 	bl	80172c8 <_sbrk_r>
 801692c:	3001      	adds	r0, #1
 801692e:	d101      	bne.n	8016934 <sbrk_aligned+0x38>
 8016930:	f04f 34ff 	mov.w	r4, #4294967295
 8016934:	4620      	mov	r0, r4
 8016936:	bd70      	pop	{r4, r5, r6, pc}
 8016938:	24008e28 	.word	0x24008e28

0801693c <_malloc_r>:
 801693c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016940:	1ccd      	adds	r5, r1, #3
 8016942:	f025 0503 	bic.w	r5, r5, #3
 8016946:	3508      	adds	r5, #8
 8016948:	2d0c      	cmp	r5, #12
 801694a:	bf38      	it	cc
 801694c:	250c      	movcc	r5, #12
 801694e:	2d00      	cmp	r5, #0
 8016950:	4607      	mov	r7, r0
 8016952:	db01      	blt.n	8016958 <_malloc_r+0x1c>
 8016954:	42a9      	cmp	r1, r5
 8016956:	d905      	bls.n	8016964 <_malloc_r+0x28>
 8016958:	230c      	movs	r3, #12
 801695a:	603b      	str	r3, [r7, #0]
 801695c:	2600      	movs	r6, #0
 801695e:	4630      	mov	r0, r6
 8016960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016964:	4e2e      	ldr	r6, [pc, #184]	; (8016a20 <_malloc_r+0xe4>)
 8016966:	f000 ffe3 	bl	8017930 <__malloc_lock>
 801696a:	6833      	ldr	r3, [r6, #0]
 801696c:	461c      	mov	r4, r3
 801696e:	bb34      	cbnz	r4, 80169be <_malloc_r+0x82>
 8016970:	4629      	mov	r1, r5
 8016972:	4638      	mov	r0, r7
 8016974:	f7ff ffc2 	bl	80168fc <sbrk_aligned>
 8016978:	1c43      	adds	r3, r0, #1
 801697a:	4604      	mov	r4, r0
 801697c:	d14d      	bne.n	8016a1a <_malloc_r+0xde>
 801697e:	6834      	ldr	r4, [r6, #0]
 8016980:	4626      	mov	r6, r4
 8016982:	2e00      	cmp	r6, #0
 8016984:	d140      	bne.n	8016a08 <_malloc_r+0xcc>
 8016986:	6823      	ldr	r3, [r4, #0]
 8016988:	4631      	mov	r1, r6
 801698a:	4638      	mov	r0, r7
 801698c:	eb04 0803 	add.w	r8, r4, r3
 8016990:	f000 fc9a 	bl	80172c8 <_sbrk_r>
 8016994:	4580      	cmp	r8, r0
 8016996:	d13a      	bne.n	8016a0e <_malloc_r+0xd2>
 8016998:	6821      	ldr	r1, [r4, #0]
 801699a:	3503      	adds	r5, #3
 801699c:	1a6d      	subs	r5, r5, r1
 801699e:	f025 0503 	bic.w	r5, r5, #3
 80169a2:	3508      	adds	r5, #8
 80169a4:	2d0c      	cmp	r5, #12
 80169a6:	bf38      	it	cc
 80169a8:	250c      	movcc	r5, #12
 80169aa:	4629      	mov	r1, r5
 80169ac:	4638      	mov	r0, r7
 80169ae:	f7ff ffa5 	bl	80168fc <sbrk_aligned>
 80169b2:	3001      	adds	r0, #1
 80169b4:	d02b      	beq.n	8016a0e <_malloc_r+0xd2>
 80169b6:	6823      	ldr	r3, [r4, #0]
 80169b8:	442b      	add	r3, r5
 80169ba:	6023      	str	r3, [r4, #0]
 80169bc:	e00e      	b.n	80169dc <_malloc_r+0xa0>
 80169be:	6822      	ldr	r2, [r4, #0]
 80169c0:	1b52      	subs	r2, r2, r5
 80169c2:	d41e      	bmi.n	8016a02 <_malloc_r+0xc6>
 80169c4:	2a0b      	cmp	r2, #11
 80169c6:	d916      	bls.n	80169f6 <_malloc_r+0xba>
 80169c8:	1961      	adds	r1, r4, r5
 80169ca:	42a3      	cmp	r3, r4
 80169cc:	6025      	str	r5, [r4, #0]
 80169ce:	bf18      	it	ne
 80169d0:	6059      	strne	r1, [r3, #4]
 80169d2:	6863      	ldr	r3, [r4, #4]
 80169d4:	bf08      	it	eq
 80169d6:	6031      	streq	r1, [r6, #0]
 80169d8:	5162      	str	r2, [r4, r5]
 80169da:	604b      	str	r3, [r1, #4]
 80169dc:	4638      	mov	r0, r7
 80169de:	f104 060b 	add.w	r6, r4, #11
 80169e2:	f000 ffab 	bl	801793c <__malloc_unlock>
 80169e6:	f026 0607 	bic.w	r6, r6, #7
 80169ea:	1d23      	adds	r3, r4, #4
 80169ec:	1af2      	subs	r2, r6, r3
 80169ee:	d0b6      	beq.n	801695e <_malloc_r+0x22>
 80169f0:	1b9b      	subs	r3, r3, r6
 80169f2:	50a3      	str	r3, [r4, r2]
 80169f4:	e7b3      	b.n	801695e <_malloc_r+0x22>
 80169f6:	6862      	ldr	r2, [r4, #4]
 80169f8:	42a3      	cmp	r3, r4
 80169fa:	bf0c      	ite	eq
 80169fc:	6032      	streq	r2, [r6, #0]
 80169fe:	605a      	strne	r2, [r3, #4]
 8016a00:	e7ec      	b.n	80169dc <_malloc_r+0xa0>
 8016a02:	4623      	mov	r3, r4
 8016a04:	6864      	ldr	r4, [r4, #4]
 8016a06:	e7b2      	b.n	801696e <_malloc_r+0x32>
 8016a08:	4634      	mov	r4, r6
 8016a0a:	6876      	ldr	r6, [r6, #4]
 8016a0c:	e7b9      	b.n	8016982 <_malloc_r+0x46>
 8016a0e:	230c      	movs	r3, #12
 8016a10:	603b      	str	r3, [r7, #0]
 8016a12:	4638      	mov	r0, r7
 8016a14:	f000 ff92 	bl	801793c <__malloc_unlock>
 8016a18:	e7a1      	b.n	801695e <_malloc_r+0x22>
 8016a1a:	6025      	str	r5, [r4, #0]
 8016a1c:	e7de      	b.n	80169dc <_malloc_r+0xa0>
 8016a1e:	bf00      	nop
 8016a20:	24008e24 	.word	0x24008e24

08016a24 <__ssputs_r>:
 8016a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a28:	688e      	ldr	r6, [r1, #8]
 8016a2a:	429e      	cmp	r6, r3
 8016a2c:	4682      	mov	sl, r0
 8016a2e:	460c      	mov	r4, r1
 8016a30:	4690      	mov	r8, r2
 8016a32:	461f      	mov	r7, r3
 8016a34:	d838      	bhi.n	8016aa8 <__ssputs_r+0x84>
 8016a36:	898a      	ldrh	r2, [r1, #12]
 8016a38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016a3c:	d032      	beq.n	8016aa4 <__ssputs_r+0x80>
 8016a3e:	6825      	ldr	r5, [r4, #0]
 8016a40:	6909      	ldr	r1, [r1, #16]
 8016a42:	eba5 0901 	sub.w	r9, r5, r1
 8016a46:	6965      	ldr	r5, [r4, #20]
 8016a48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016a50:	3301      	adds	r3, #1
 8016a52:	444b      	add	r3, r9
 8016a54:	106d      	asrs	r5, r5, #1
 8016a56:	429d      	cmp	r5, r3
 8016a58:	bf38      	it	cc
 8016a5a:	461d      	movcc	r5, r3
 8016a5c:	0553      	lsls	r3, r2, #21
 8016a5e:	d531      	bpl.n	8016ac4 <__ssputs_r+0xa0>
 8016a60:	4629      	mov	r1, r5
 8016a62:	f7ff ff6b 	bl	801693c <_malloc_r>
 8016a66:	4606      	mov	r6, r0
 8016a68:	b950      	cbnz	r0, 8016a80 <__ssputs_r+0x5c>
 8016a6a:	230c      	movs	r3, #12
 8016a6c:	f8ca 3000 	str.w	r3, [sl]
 8016a70:	89a3      	ldrh	r3, [r4, #12]
 8016a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a76:	81a3      	strh	r3, [r4, #12]
 8016a78:	f04f 30ff 	mov.w	r0, #4294967295
 8016a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a80:	6921      	ldr	r1, [r4, #16]
 8016a82:	464a      	mov	r2, r9
 8016a84:	f7ff fa0c 	bl	8015ea0 <memcpy>
 8016a88:	89a3      	ldrh	r3, [r4, #12]
 8016a8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a92:	81a3      	strh	r3, [r4, #12]
 8016a94:	6126      	str	r6, [r4, #16]
 8016a96:	6165      	str	r5, [r4, #20]
 8016a98:	444e      	add	r6, r9
 8016a9a:	eba5 0509 	sub.w	r5, r5, r9
 8016a9e:	6026      	str	r6, [r4, #0]
 8016aa0:	60a5      	str	r5, [r4, #8]
 8016aa2:	463e      	mov	r6, r7
 8016aa4:	42be      	cmp	r6, r7
 8016aa6:	d900      	bls.n	8016aaa <__ssputs_r+0x86>
 8016aa8:	463e      	mov	r6, r7
 8016aaa:	6820      	ldr	r0, [r4, #0]
 8016aac:	4632      	mov	r2, r6
 8016aae:	4641      	mov	r1, r8
 8016ab0:	f000 ff24 	bl	80178fc <memmove>
 8016ab4:	68a3      	ldr	r3, [r4, #8]
 8016ab6:	1b9b      	subs	r3, r3, r6
 8016ab8:	60a3      	str	r3, [r4, #8]
 8016aba:	6823      	ldr	r3, [r4, #0]
 8016abc:	4433      	add	r3, r6
 8016abe:	6023      	str	r3, [r4, #0]
 8016ac0:	2000      	movs	r0, #0
 8016ac2:	e7db      	b.n	8016a7c <__ssputs_r+0x58>
 8016ac4:	462a      	mov	r2, r5
 8016ac6:	f000 ff3f 	bl	8017948 <_realloc_r>
 8016aca:	4606      	mov	r6, r0
 8016acc:	2800      	cmp	r0, #0
 8016ace:	d1e1      	bne.n	8016a94 <__ssputs_r+0x70>
 8016ad0:	6921      	ldr	r1, [r4, #16]
 8016ad2:	4650      	mov	r0, sl
 8016ad4:	f7ff fec6 	bl	8016864 <_free_r>
 8016ad8:	e7c7      	b.n	8016a6a <__ssputs_r+0x46>
	...

08016adc <_svfiprintf_r>:
 8016adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ae0:	4698      	mov	r8, r3
 8016ae2:	898b      	ldrh	r3, [r1, #12]
 8016ae4:	061b      	lsls	r3, r3, #24
 8016ae6:	b09d      	sub	sp, #116	; 0x74
 8016ae8:	4607      	mov	r7, r0
 8016aea:	460d      	mov	r5, r1
 8016aec:	4614      	mov	r4, r2
 8016aee:	d50e      	bpl.n	8016b0e <_svfiprintf_r+0x32>
 8016af0:	690b      	ldr	r3, [r1, #16]
 8016af2:	b963      	cbnz	r3, 8016b0e <_svfiprintf_r+0x32>
 8016af4:	2140      	movs	r1, #64	; 0x40
 8016af6:	f7ff ff21 	bl	801693c <_malloc_r>
 8016afa:	6028      	str	r0, [r5, #0]
 8016afc:	6128      	str	r0, [r5, #16]
 8016afe:	b920      	cbnz	r0, 8016b0a <_svfiprintf_r+0x2e>
 8016b00:	230c      	movs	r3, #12
 8016b02:	603b      	str	r3, [r7, #0]
 8016b04:	f04f 30ff 	mov.w	r0, #4294967295
 8016b08:	e0d1      	b.n	8016cae <_svfiprintf_r+0x1d2>
 8016b0a:	2340      	movs	r3, #64	; 0x40
 8016b0c:	616b      	str	r3, [r5, #20]
 8016b0e:	2300      	movs	r3, #0
 8016b10:	9309      	str	r3, [sp, #36]	; 0x24
 8016b12:	2320      	movs	r3, #32
 8016b14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8016b1c:	2330      	movs	r3, #48	; 0x30
 8016b1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016cc8 <_svfiprintf_r+0x1ec>
 8016b22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016b26:	f04f 0901 	mov.w	r9, #1
 8016b2a:	4623      	mov	r3, r4
 8016b2c:	469a      	mov	sl, r3
 8016b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b32:	b10a      	cbz	r2, 8016b38 <_svfiprintf_r+0x5c>
 8016b34:	2a25      	cmp	r2, #37	; 0x25
 8016b36:	d1f9      	bne.n	8016b2c <_svfiprintf_r+0x50>
 8016b38:	ebba 0b04 	subs.w	fp, sl, r4
 8016b3c:	d00b      	beq.n	8016b56 <_svfiprintf_r+0x7a>
 8016b3e:	465b      	mov	r3, fp
 8016b40:	4622      	mov	r2, r4
 8016b42:	4629      	mov	r1, r5
 8016b44:	4638      	mov	r0, r7
 8016b46:	f7ff ff6d 	bl	8016a24 <__ssputs_r>
 8016b4a:	3001      	adds	r0, #1
 8016b4c:	f000 80aa 	beq.w	8016ca4 <_svfiprintf_r+0x1c8>
 8016b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b52:	445a      	add	r2, fp
 8016b54:	9209      	str	r2, [sp, #36]	; 0x24
 8016b56:	f89a 3000 	ldrb.w	r3, [sl]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	f000 80a2 	beq.w	8016ca4 <_svfiprintf_r+0x1c8>
 8016b60:	2300      	movs	r3, #0
 8016b62:	f04f 32ff 	mov.w	r2, #4294967295
 8016b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b6a:	f10a 0a01 	add.w	sl, sl, #1
 8016b6e:	9304      	str	r3, [sp, #16]
 8016b70:	9307      	str	r3, [sp, #28]
 8016b72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016b76:	931a      	str	r3, [sp, #104]	; 0x68
 8016b78:	4654      	mov	r4, sl
 8016b7a:	2205      	movs	r2, #5
 8016b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b80:	4851      	ldr	r0, [pc, #324]	; (8016cc8 <_svfiprintf_r+0x1ec>)
 8016b82:	f7e9 fbcd 	bl	8000320 <memchr>
 8016b86:	9a04      	ldr	r2, [sp, #16]
 8016b88:	b9d8      	cbnz	r0, 8016bc2 <_svfiprintf_r+0xe6>
 8016b8a:	06d0      	lsls	r0, r2, #27
 8016b8c:	bf44      	itt	mi
 8016b8e:	2320      	movmi	r3, #32
 8016b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b94:	0711      	lsls	r1, r2, #28
 8016b96:	bf44      	itt	mi
 8016b98:	232b      	movmi	r3, #43	; 0x2b
 8016b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8016ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8016ba4:	d015      	beq.n	8016bd2 <_svfiprintf_r+0xf6>
 8016ba6:	9a07      	ldr	r2, [sp, #28]
 8016ba8:	4654      	mov	r4, sl
 8016baa:	2000      	movs	r0, #0
 8016bac:	f04f 0c0a 	mov.w	ip, #10
 8016bb0:	4621      	mov	r1, r4
 8016bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016bb6:	3b30      	subs	r3, #48	; 0x30
 8016bb8:	2b09      	cmp	r3, #9
 8016bba:	d94e      	bls.n	8016c5a <_svfiprintf_r+0x17e>
 8016bbc:	b1b0      	cbz	r0, 8016bec <_svfiprintf_r+0x110>
 8016bbe:	9207      	str	r2, [sp, #28]
 8016bc0:	e014      	b.n	8016bec <_svfiprintf_r+0x110>
 8016bc2:	eba0 0308 	sub.w	r3, r0, r8
 8016bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8016bca:	4313      	orrs	r3, r2
 8016bcc:	9304      	str	r3, [sp, #16]
 8016bce:	46a2      	mov	sl, r4
 8016bd0:	e7d2      	b.n	8016b78 <_svfiprintf_r+0x9c>
 8016bd2:	9b03      	ldr	r3, [sp, #12]
 8016bd4:	1d19      	adds	r1, r3, #4
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	9103      	str	r1, [sp, #12]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	bfbb      	ittet	lt
 8016bde:	425b      	neglt	r3, r3
 8016be0:	f042 0202 	orrlt.w	r2, r2, #2
 8016be4:	9307      	strge	r3, [sp, #28]
 8016be6:	9307      	strlt	r3, [sp, #28]
 8016be8:	bfb8      	it	lt
 8016bea:	9204      	strlt	r2, [sp, #16]
 8016bec:	7823      	ldrb	r3, [r4, #0]
 8016bee:	2b2e      	cmp	r3, #46	; 0x2e
 8016bf0:	d10c      	bne.n	8016c0c <_svfiprintf_r+0x130>
 8016bf2:	7863      	ldrb	r3, [r4, #1]
 8016bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8016bf6:	d135      	bne.n	8016c64 <_svfiprintf_r+0x188>
 8016bf8:	9b03      	ldr	r3, [sp, #12]
 8016bfa:	1d1a      	adds	r2, r3, #4
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	9203      	str	r2, [sp, #12]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	bfb8      	it	lt
 8016c04:	f04f 33ff 	movlt.w	r3, #4294967295
 8016c08:	3402      	adds	r4, #2
 8016c0a:	9305      	str	r3, [sp, #20]
 8016c0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016cd8 <_svfiprintf_r+0x1fc>
 8016c10:	7821      	ldrb	r1, [r4, #0]
 8016c12:	2203      	movs	r2, #3
 8016c14:	4650      	mov	r0, sl
 8016c16:	f7e9 fb83 	bl	8000320 <memchr>
 8016c1a:	b140      	cbz	r0, 8016c2e <_svfiprintf_r+0x152>
 8016c1c:	2340      	movs	r3, #64	; 0x40
 8016c1e:	eba0 000a 	sub.w	r0, r0, sl
 8016c22:	fa03 f000 	lsl.w	r0, r3, r0
 8016c26:	9b04      	ldr	r3, [sp, #16]
 8016c28:	4303      	orrs	r3, r0
 8016c2a:	3401      	adds	r4, #1
 8016c2c:	9304      	str	r3, [sp, #16]
 8016c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c32:	4826      	ldr	r0, [pc, #152]	; (8016ccc <_svfiprintf_r+0x1f0>)
 8016c34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016c38:	2206      	movs	r2, #6
 8016c3a:	f7e9 fb71 	bl	8000320 <memchr>
 8016c3e:	2800      	cmp	r0, #0
 8016c40:	d038      	beq.n	8016cb4 <_svfiprintf_r+0x1d8>
 8016c42:	4b23      	ldr	r3, [pc, #140]	; (8016cd0 <_svfiprintf_r+0x1f4>)
 8016c44:	bb1b      	cbnz	r3, 8016c8e <_svfiprintf_r+0x1b2>
 8016c46:	9b03      	ldr	r3, [sp, #12]
 8016c48:	3307      	adds	r3, #7
 8016c4a:	f023 0307 	bic.w	r3, r3, #7
 8016c4e:	3308      	adds	r3, #8
 8016c50:	9303      	str	r3, [sp, #12]
 8016c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c54:	4433      	add	r3, r6
 8016c56:	9309      	str	r3, [sp, #36]	; 0x24
 8016c58:	e767      	b.n	8016b2a <_svfiprintf_r+0x4e>
 8016c5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8016c5e:	460c      	mov	r4, r1
 8016c60:	2001      	movs	r0, #1
 8016c62:	e7a5      	b.n	8016bb0 <_svfiprintf_r+0xd4>
 8016c64:	2300      	movs	r3, #0
 8016c66:	3401      	adds	r4, #1
 8016c68:	9305      	str	r3, [sp, #20]
 8016c6a:	4619      	mov	r1, r3
 8016c6c:	f04f 0c0a 	mov.w	ip, #10
 8016c70:	4620      	mov	r0, r4
 8016c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c76:	3a30      	subs	r2, #48	; 0x30
 8016c78:	2a09      	cmp	r2, #9
 8016c7a:	d903      	bls.n	8016c84 <_svfiprintf_r+0x1a8>
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d0c5      	beq.n	8016c0c <_svfiprintf_r+0x130>
 8016c80:	9105      	str	r1, [sp, #20]
 8016c82:	e7c3      	b.n	8016c0c <_svfiprintf_r+0x130>
 8016c84:	fb0c 2101 	mla	r1, ip, r1, r2
 8016c88:	4604      	mov	r4, r0
 8016c8a:	2301      	movs	r3, #1
 8016c8c:	e7f0      	b.n	8016c70 <_svfiprintf_r+0x194>
 8016c8e:	ab03      	add	r3, sp, #12
 8016c90:	9300      	str	r3, [sp, #0]
 8016c92:	462a      	mov	r2, r5
 8016c94:	4b0f      	ldr	r3, [pc, #60]	; (8016cd4 <_svfiprintf_r+0x1f8>)
 8016c96:	a904      	add	r1, sp, #16
 8016c98:	4638      	mov	r0, r7
 8016c9a:	f3af 8000 	nop.w
 8016c9e:	1c42      	adds	r2, r0, #1
 8016ca0:	4606      	mov	r6, r0
 8016ca2:	d1d6      	bne.n	8016c52 <_svfiprintf_r+0x176>
 8016ca4:	89ab      	ldrh	r3, [r5, #12]
 8016ca6:	065b      	lsls	r3, r3, #25
 8016ca8:	f53f af2c 	bmi.w	8016b04 <_svfiprintf_r+0x28>
 8016cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016cae:	b01d      	add	sp, #116	; 0x74
 8016cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cb4:	ab03      	add	r3, sp, #12
 8016cb6:	9300      	str	r3, [sp, #0]
 8016cb8:	462a      	mov	r2, r5
 8016cba:	4b06      	ldr	r3, [pc, #24]	; (8016cd4 <_svfiprintf_r+0x1f8>)
 8016cbc:	a904      	add	r1, sp, #16
 8016cbe:	4638      	mov	r0, r7
 8016cc0:	f000 f9d4 	bl	801706c <_printf_i>
 8016cc4:	e7eb      	b.n	8016c9e <_svfiprintf_r+0x1c2>
 8016cc6:	bf00      	nop
 8016cc8:	080181d4 	.word	0x080181d4
 8016ccc:	080181de 	.word	0x080181de
 8016cd0:	00000000 	.word	0x00000000
 8016cd4:	08016a25 	.word	0x08016a25
 8016cd8:	080181da 	.word	0x080181da

08016cdc <__sfputc_r>:
 8016cdc:	6893      	ldr	r3, [r2, #8]
 8016cde:	3b01      	subs	r3, #1
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	b410      	push	{r4}
 8016ce4:	6093      	str	r3, [r2, #8]
 8016ce6:	da08      	bge.n	8016cfa <__sfputc_r+0x1e>
 8016ce8:	6994      	ldr	r4, [r2, #24]
 8016cea:	42a3      	cmp	r3, r4
 8016cec:	db01      	blt.n	8016cf2 <__sfputc_r+0x16>
 8016cee:	290a      	cmp	r1, #10
 8016cf0:	d103      	bne.n	8016cfa <__sfputc_r+0x1e>
 8016cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016cf6:	f000 bb0b 	b.w	8017310 <__swbuf_r>
 8016cfa:	6813      	ldr	r3, [r2, #0]
 8016cfc:	1c58      	adds	r0, r3, #1
 8016cfe:	6010      	str	r0, [r2, #0]
 8016d00:	7019      	strb	r1, [r3, #0]
 8016d02:	4608      	mov	r0, r1
 8016d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d08:	4770      	bx	lr

08016d0a <__sfputs_r>:
 8016d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d0c:	4606      	mov	r6, r0
 8016d0e:	460f      	mov	r7, r1
 8016d10:	4614      	mov	r4, r2
 8016d12:	18d5      	adds	r5, r2, r3
 8016d14:	42ac      	cmp	r4, r5
 8016d16:	d101      	bne.n	8016d1c <__sfputs_r+0x12>
 8016d18:	2000      	movs	r0, #0
 8016d1a:	e007      	b.n	8016d2c <__sfputs_r+0x22>
 8016d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d20:	463a      	mov	r2, r7
 8016d22:	4630      	mov	r0, r6
 8016d24:	f7ff ffda 	bl	8016cdc <__sfputc_r>
 8016d28:	1c43      	adds	r3, r0, #1
 8016d2a:	d1f3      	bne.n	8016d14 <__sfputs_r+0xa>
 8016d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016d30 <_vfiprintf_r>:
 8016d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d34:	460d      	mov	r5, r1
 8016d36:	b09d      	sub	sp, #116	; 0x74
 8016d38:	4614      	mov	r4, r2
 8016d3a:	4698      	mov	r8, r3
 8016d3c:	4606      	mov	r6, r0
 8016d3e:	b118      	cbz	r0, 8016d48 <_vfiprintf_r+0x18>
 8016d40:	6983      	ldr	r3, [r0, #24]
 8016d42:	b90b      	cbnz	r3, 8016d48 <_vfiprintf_r+0x18>
 8016d44:	f000 fcd4 	bl	80176f0 <__sinit>
 8016d48:	4b89      	ldr	r3, [pc, #548]	; (8016f70 <_vfiprintf_r+0x240>)
 8016d4a:	429d      	cmp	r5, r3
 8016d4c:	d11b      	bne.n	8016d86 <_vfiprintf_r+0x56>
 8016d4e:	6875      	ldr	r5, [r6, #4]
 8016d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016d52:	07d9      	lsls	r1, r3, #31
 8016d54:	d405      	bmi.n	8016d62 <_vfiprintf_r+0x32>
 8016d56:	89ab      	ldrh	r3, [r5, #12]
 8016d58:	059a      	lsls	r2, r3, #22
 8016d5a:	d402      	bmi.n	8016d62 <_vfiprintf_r+0x32>
 8016d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016d5e:	f000 fd65 	bl	801782c <__retarget_lock_acquire_recursive>
 8016d62:	89ab      	ldrh	r3, [r5, #12]
 8016d64:	071b      	lsls	r3, r3, #28
 8016d66:	d501      	bpl.n	8016d6c <_vfiprintf_r+0x3c>
 8016d68:	692b      	ldr	r3, [r5, #16]
 8016d6a:	b9eb      	cbnz	r3, 8016da8 <_vfiprintf_r+0x78>
 8016d6c:	4629      	mov	r1, r5
 8016d6e:	4630      	mov	r0, r6
 8016d70:	f000 fb2e 	bl	80173d0 <__swsetup_r>
 8016d74:	b1c0      	cbz	r0, 8016da8 <_vfiprintf_r+0x78>
 8016d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016d78:	07dc      	lsls	r4, r3, #31
 8016d7a:	d50e      	bpl.n	8016d9a <_vfiprintf_r+0x6a>
 8016d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8016d80:	b01d      	add	sp, #116	; 0x74
 8016d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d86:	4b7b      	ldr	r3, [pc, #492]	; (8016f74 <_vfiprintf_r+0x244>)
 8016d88:	429d      	cmp	r5, r3
 8016d8a:	d101      	bne.n	8016d90 <_vfiprintf_r+0x60>
 8016d8c:	68b5      	ldr	r5, [r6, #8]
 8016d8e:	e7df      	b.n	8016d50 <_vfiprintf_r+0x20>
 8016d90:	4b79      	ldr	r3, [pc, #484]	; (8016f78 <_vfiprintf_r+0x248>)
 8016d92:	429d      	cmp	r5, r3
 8016d94:	bf08      	it	eq
 8016d96:	68f5      	ldreq	r5, [r6, #12]
 8016d98:	e7da      	b.n	8016d50 <_vfiprintf_r+0x20>
 8016d9a:	89ab      	ldrh	r3, [r5, #12]
 8016d9c:	0598      	lsls	r0, r3, #22
 8016d9e:	d4ed      	bmi.n	8016d7c <_vfiprintf_r+0x4c>
 8016da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016da2:	f000 fd44 	bl	801782e <__retarget_lock_release_recursive>
 8016da6:	e7e9      	b.n	8016d7c <_vfiprintf_r+0x4c>
 8016da8:	2300      	movs	r3, #0
 8016daa:	9309      	str	r3, [sp, #36]	; 0x24
 8016dac:	2320      	movs	r3, #32
 8016dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8016db6:	2330      	movs	r3, #48	; 0x30
 8016db8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016f7c <_vfiprintf_r+0x24c>
 8016dbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016dc0:	f04f 0901 	mov.w	r9, #1
 8016dc4:	4623      	mov	r3, r4
 8016dc6:	469a      	mov	sl, r3
 8016dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016dcc:	b10a      	cbz	r2, 8016dd2 <_vfiprintf_r+0xa2>
 8016dce:	2a25      	cmp	r2, #37	; 0x25
 8016dd0:	d1f9      	bne.n	8016dc6 <_vfiprintf_r+0x96>
 8016dd2:	ebba 0b04 	subs.w	fp, sl, r4
 8016dd6:	d00b      	beq.n	8016df0 <_vfiprintf_r+0xc0>
 8016dd8:	465b      	mov	r3, fp
 8016dda:	4622      	mov	r2, r4
 8016ddc:	4629      	mov	r1, r5
 8016dde:	4630      	mov	r0, r6
 8016de0:	f7ff ff93 	bl	8016d0a <__sfputs_r>
 8016de4:	3001      	adds	r0, #1
 8016de6:	f000 80aa 	beq.w	8016f3e <_vfiprintf_r+0x20e>
 8016dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016dec:	445a      	add	r2, fp
 8016dee:	9209      	str	r2, [sp, #36]	; 0x24
 8016df0:	f89a 3000 	ldrb.w	r3, [sl]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	f000 80a2 	beq.w	8016f3e <_vfiprintf_r+0x20e>
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8016e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e04:	f10a 0a01 	add.w	sl, sl, #1
 8016e08:	9304      	str	r3, [sp, #16]
 8016e0a:	9307      	str	r3, [sp, #28]
 8016e0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016e10:	931a      	str	r3, [sp, #104]	; 0x68
 8016e12:	4654      	mov	r4, sl
 8016e14:	2205      	movs	r2, #5
 8016e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e1a:	4858      	ldr	r0, [pc, #352]	; (8016f7c <_vfiprintf_r+0x24c>)
 8016e1c:	f7e9 fa80 	bl	8000320 <memchr>
 8016e20:	9a04      	ldr	r2, [sp, #16]
 8016e22:	b9d8      	cbnz	r0, 8016e5c <_vfiprintf_r+0x12c>
 8016e24:	06d1      	lsls	r1, r2, #27
 8016e26:	bf44      	itt	mi
 8016e28:	2320      	movmi	r3, #32
 8016e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016e2e:	0713      	lsls	r3, r2, #28
 8016e30:	bf44      	itt	mi
 8016e32:	232b      	movmi	r3, #43	; 0x2b
 8016e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016e38:	f89a 3000 	ldrb.w	r3, [sl]
 8016e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8016e3e:	d015      	beq.n	8016e6c <_vfiprintf_r+0x13c>
 8016e40:	9a07      	ldr	r2, [sp, #28]
 8016e42:	4654      	mov	r4, sl
 8016e44:	2000      	movs	r0, #0
 8016e46:	f04f 0c0a 	mov.w	ip, #10
 8016e4a:	4621      	mov	r1, r4
 8016e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e50:	3b30      	subs	r3, #48	; 0x30
 8016e52:	2b09      	cmp	r3, #9
 8016e54:	d94e      	bls.n	8016ef4 <_vfiprintf_r+0x1c4>
 8016e56:	b1b0      	cbz	r0, 8016e86 <_vfiprintf_r+0x156>
 8016e58:	9207      	str	r2, [sp, #28]
 8016e5a:	e014      	b.n	8016e86 <_vfiprintf_r+0x156>
 8016e5c:	eba0 0308 	sub.w	r3, r0, r8
 8016e60:	fa09 f303 	lsl.w	r3, r9, r3
 8016e64:	4313      	orrs	r3, r2
 8016e66:	9304      	str	r3, [sp, #16]
 8016e68:	46a2      	mov	sl, r4
 8016e6a:	e7d2      	b.n	8016e12 <_vfiprintf_r+0xe2>
 8016e6c:	9b03      	ldr	r3, [sp, #12]
 8016e6e:	1d19      	adds	r1, r3, #4
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	9103      	str	r1, [sp, #12]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	bfbb      	ittet	lt
 8016e78:	425b      	neglt	r3, r3
 8016e7a:	f042 0202 	orrlt.w	r2, r2, #2
 8016e7e:	9307      	strge	r3, [sp, #28]
 8016e80:	9307      	strlt	r3, [sp, #28]
 8016e82:	bfb8      	it	lt
 8016e84:	9204      	strlt	r2, [sp, #16]
 8016e86:	7823      	ldrb	r3, [r4, #0]
 8016e88:	2b2e      	cmp	r3, #46	; 0x2e
 8016e8a:	d10c      	bne.n	8016ea6 <_vfiprintf_r+0x176>
 8016e8c:	7863      	ldrb	r3, [r4, #1]
 8016e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8016e90:	d135      	bne.n	8016efe <_vfiprintf_r+0x1ce>
 8016e92:	9b03      	ldr	r3, [sp, #12]
 8016e94:	1d1a      	adds	r2, r3, #4
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	9203      	str	r2, [sp, #12]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	bfb8      	it	lt
 8016e9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ea2:	3402      	adds	r4, #2
 8016ea4:	9305      	str	r3, [sp, #20]
 8016ea6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016f8c <_vfiprintf_r+0x25c>
 8016eaa:	7821      	ldrb	r1, [r4, #0]
 8016eac:	2203      	movs	r2, #3
 8016eae:	4650      	mov	r0, sl
 8016eb0:	f7e9 fa36 	bl	8000320 <memchr>
 8016eb4:	b140      	cbz	r0, 8016ec8 <_vfiprintf_r+0x198>
 8016eb6:	2340      	movs	r3, #64	; 0x40
 8016eb8:	eba0 000a 	sub.w	r0, r0, sl
 8016ebc:	fa03 f000 	lsl.w	r0, r3, r0
 8016ec0:	9b04      	ldr	r3, [sp, #16]
 8016ec2:	4303      	orrs	r3, r0
 8016ec4:	3401      	adds	r4, #1
 8016ec6:	9304      	str	r3, [sp, #16]
 8016ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ecc:	482c      	ldr	r0, [pc, #176]	; (8016f80 <_vfiprintf_r+0x250>)
 8016ece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ed2:	2206      	movs	r2, #6
 8016ed4:	f7e9 fa24 	bl	8000320 <memchr>
 8016ed8:	2800      	cmp	r0, #0
 8016eda:	d03f      	beq.n	8016f5c <_vfiprintf_r+0x22c>
 8016edc:	4b29      	ldr	r3, [pc, #164]	; (8016f84 <_vfiprintf_r+0x254>)
 8016ede:	bb1b      	cbnz	r3, 8016f28 <_vfiprintf_r+0x1f8>
 8016ee0:	9b03      	ldr	r3, [sp, #12]
 8016ee2:	3307      	adds	r3, #7
 8016ee4:	f023 0307 	bic.w	r3, r3, #7
 8016ee8:	3308      	adds	r3, #8
 8016eea:	9303      	str	r3, [sp, #12]
 8016eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016eee:	443b      	add	r3, r7
 8016ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8016ef2:	e767      	b.n	8016dc4 <_vfiprintf_r+0x94>
 8016ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8016ef8:	460c      	mov	r4, r1
 8016efa:	2001      	movs	r0, #1
 8016efc:	e7a5      	b.n	8016e4a <_vfiprintf_r+0x11a>
 8016efe:	2300      	movs	r3, #0
 8016f00:	3401      	adds	r4, #1
 8016f02:	9305      	str	r3, [sp, #20]
 8016f04:	4619      	mov	r1, r3
 8016f06:	f04f 0c0a 	mov.w	ip, #10
 8016f0a:	4620      	mov	r0, r4
 8016f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f10:	3a30      	subs	r2, #48	; 0x30
 8016f12:	2a09      	cmp	r2, #9
 8016f14:	d903      	bls.n	8016f1e <_vfiprintf_r+0x1ee>
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d0c5      	beq.n	8016ea6 <_vfiprintf_r+0x176>
 8016f1a:	9105      	str	r1, [sp, #20]
 8016f1c:	e7c3      	b.n	8016ea6 <_vfiprintf_r+0x176>
 8016f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f22:	4604      	mov	r4, r0
 8016f24:	2301      	movs	r3, #1
 8016f26:	e7f0      	b.n	8016f0a <_vfiprintf_r+0x1da>
 8016f28:	ab03      	add	r3, sp, #12
 8016f2a:	9300      	str	r3, [sp, #0]
 8016f2c:	462a      	mov	r2, r5
 8016f2e:	4b16      	ldr	r3, [pc, #88]	; (8016f88 <_vfiprintf_r+0x258>)
 8016f30:	a904      	add	r1, sp, #16
 8016f32:	4630      	mov	r0, r6
 8016f34:	f3af 8000 	nop.w
 8016f38:	4607      	mov	r7, r0
 8016f3a:	1c78      	adds	r0, r7, #1
 8016f3c:	d1d6      	bne.n	8016eec <_vfiprintf_r+0x1bc>
 8016f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016f40:	07d9      	lsls	r1, r3, #31
 8016f42:	d405      	bmi.n	8016f50 <_vfiprintf_r+0x220>
 8016f44:	89ab      	ldrh	r3, [r5, #12]
 8016f46:	059a      	lsls	r2, r3, #22
 8016f48:	d402      	bmi.n	8016f50 <_vfiprintf_r+0x220>
 8016f4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016f4c:	f000 fc6f 	bl	801782e <__retarget_lock_release_recursive>
 8016f50:	89ab      	ldrh	r3, [r5, #12]
 8016f52:	065b      	lsls	r3, r3, #25
 8016f54:	f53f af12 	bmi.w	8016d7c <_vfiprintf_r+0x4c>
 8016f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f5a:	e711      	b.n	8016d80 <_vfiprintf_r+0x50>
 8016f5c:	ab03      	add	r3, sp, #12
 8016f5e:	9300      	str	r3, [sp, #0]
 8016f60:	462a      	mov	r2, r5
 8016f62:	4b09      	ldr	r3, [pc, #36]	; (8016f88 <_vfiprintf_r+0x258>)
 8016f64:	a904      	add	r1, sp, #16
 8016f66:	4630      	mov	r0, r6
 8016f68:	f000 f880 	bl	801706c <_printf_i>
 8016f6c:	e7e4      	b.n	8016f38 <_vfiprintf_r+0x208>
 8016f6e:	bf00      	nop
 8016f70:	08018228 	.word	0x08018228
 8016f74:	08018248 	.word	0x08018248
 8016f78:	08018208 	.word	0x08018208
 8016f7c:	080181d4 	.word	0x080181d4
 8016f80:	080181de 	.word	0x080181de
 8016f84:	00000000 	.word	0x00000000
 8016f88:	08016d0b 	.word	0x08016d0b
 8016f8c:	080181da 	.word	0x080181da

08016f90 <_printf_common>:
 8016f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f94:	4616      	mov	r6, r2
 8016f96:	4699      	mov	r9, r3
 8016f98:	688a      	ldr	r2, [r1, #8]
 8016f9a:	690b      	ldr	r3, [r1, #16]
 8016f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016fa0:	4293      	cmp	r3, r2
 8016fa2:	bfb8      	it	lt
 8016fa4:	4613      	movlt	r3, r2
 8016fa6:	6033      	str	r3, [r6, #0]
 8016fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016fac:	4607      	mov	r7, r0
 8016fae:	460c      	mov	r4, r1
 8016fb0:	b10a      	cbz	r2, 8016fb6 <_printf_common+0x26>
 8016fb2:	3301      	adds	r3, #1
 8016fb4:	6033      	str	r3, [r6, #0]
 8016fb6:	6823      	ldr	r3, [r4, #0]
 8016fb8:	0699      	lsls	r1, r3, #26
 8016fba:	bf42      	ittt	mi
 8016fbc:	6833      	ldrmi	r3, [r6, #0]
 8016fbe:	3302      	addmi	r3, #2
 8016fc0:	6033      	strmi	r3, [r6, #0]
 8016fc2:	6825      	ldr	r5, [r4, #0]
 8016fc4:	f015 0506 	ands.w	r5, r5, #6
 8016fc8:	d106      	bne.n	8016fd8 <_printf_common+0x48>
 8016fca:	f104 0a19 	add.w	sl, r4, #25
 8016fce:	68e3      	ldr	r3, [r4, #12]
 8016fd0:	6832      	ldr	r2, [r6, #0]
 8016fd2:	1a9b      	subs	r3, r3, r2
 8016fd4:	42ab      	cmp	r3, r5
 8016fd6:	dc26      	bgt.n	8017026 <_printf_common+0x96>
 8016fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016fdc:	1e13      	subs	r3, r2, #0
 8016fde:	6822      	ldr	r2, [r4, #0]
 8016fe0:	bf18      	it	ne
 8016fe2:	2301      	movne	r3, #1
 8016fe4:	0692      	lsls	r2, r2, #26
 8016fe6:	d42b      	bmi.n	8017040 <_printf_common+0xb0>
 8016fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016fec:	4649      	mov	r1, r9
 8016fee:	4638      	mov	r0, r7
 8016ff0:	47c0      	blx	r8
 8016ff2:	3001      	adds	r0, #1
 8016ff4:	d01e      	beq.n	8017034 <_printf_common+0xa4>
 8016ff6:	6823      	ldr	r3, [r4, #0]
 8016ff8:	68e5      	ldr	r5, [r4, #12]
 8016ffa:	6832      	ldr	r2, [r6, #0]
 8016ffc:	f003 0306 	and.w	r3, r3, #6
 8017000:	2b04      	cmp	r3, #4
 8017002:	bf08      	it	eq
 8017004:	1aad      	subeq	r5, r5, r2
 8017006:	68a3      	ldr	r3, [r4, #8]
 8017008:	6922      	ldr	r2, [r4, #16]
 801700a:	bf0c      	ite	eq
 801700c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017010:	2500      	movne	r5, #0
 8017012:	4293      	cmp	r3, r2
 8017014:	bfc4      	itt	gt
 8017016:	1a9b      	subgt	r3, r3, r2
 8017018:	18ed      	addgt	r5, r5, r3
 801701a:	2600      	movs	r6, #0
 801701c:	341a      	adds	r4, #26
 801701e:	42b5      	cmp	r5, r6
 8017020:	d11a      	bne.n	8017058 <_printf_common+0xc8>
 8017022:	2000      	movs	r0, #0
 8017024:	e008      	b.n	8017038 <_printf_common+0xa8>
 8017026:	2301      	movs	r3, #1
 8017028:	4652      	mov	r2, sl
 801702a:	4649      	mov	r1, r9
 801702c:	4638      	mov	r0, r7
 801702e:	47c0      	blx	r8
 8017030:	3001      	adds	r0, #1
 8017032:	d103      	bne.n	801703c <_printf_common+0xac>
 8017034:	f04f 30ff 	mov.w	r0, #4294967295
 8017038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801703c:	3501      	adds	r5, #1
 801703e:	e7c6      	b.n	8016fce <_printf_common+0x3e>
 8017040:	18e1      	adds	r1, r4, r3
 8017042:	1c5a      	adds	r2, r3, #1
 8017044:	2030      	movs	r0, #48	; 0x30
 8017046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801704a:	4422      	add	r2, r4
 801704c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017054:	3302      	adds	r3, #2
 8017056:	e7c7      	b.n	8016fe8 <_printf_common+0x58>
 8017058:	2301      	movs	r3, #1
 801705a:	4622      	mov	r2, r4
 801705c:	4649      	mov	r1, r9
 801705e:	4638      	mov	r0, r7
 8017060:	47c0      	blx	r8
 8017062:	3001      	adds	r0, #1
 8017064:	d0e6      	beq.n	8017034 <_printf_common+0xa4>
 8017066:	3601      	adds	r6, #1
 8017068:	e7d9      	b.n	801701e <_printf_common+0x8e>
	...

0801706c <_printf_i>:
 801706c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017070:	7e0f      	ldrb	r7, [r1, #24]
 8017072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017074:	2f78      	cmp	r7, #120	; 0x78
 8017076:	4691      	mov	r9, r2
 8017078:	4680      	mov	r8, r0
 801707a:	460c      	mov	r4, r1
 801707c:	469a      	mov	sl, r3
 801707e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017082:	d807      	bhi.n	8017094 <_printf_i+0x28>
 8017084:	2f62      	cmp	r7, #98	; 0x62
 8017086:	d80a      	bhi.n	801709e <_printf_i+0x32>
 8017088:	2f00      	cmp	r7, #0
 801708a:	f000 80d8 	beq.w	801723e <_printf_i+0x1d2>
 801708e:	2f58      	cmp	r7, #88	; 0x58
 8017090:	f000 80a3 	beq.w	80171da <_printf_i+0x16e>
 8017094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801709c:	e03a      	b.n	8017114 <_printf_i+0xa8>
 801709e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80170a2:	2b15      	cmp	r3, #21
 80170a4:	d8f6      	bhi.n	8017094 <_printf_i+0x28>
 80170a6:	a101      	add	r1, pc, #4	; (adr r1, 80170ac <_printf_i+0x40>)
 80170a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80170ac:	08017105 	.word	0x08017105
 80170b0:	08017119 	.word	0x08017119
 80170b4:	08017095 	.word	0x08017095
 80170b8:	08017095 	.word	0x08017095
 80170bc:	08017095 	.word	0x08017095
 80170c0:	08017095 	.word	0x08017095
 80170c4:	08017119 	.word	0x08017119
 80170c8:	08017095 	.word	0x08017095
 80170cc:	08017095 	.word	0x08017095
 80170d0:	08017095 	.word	0x08017095
 80170d4:	08017095 	.word	0x08017095
 80170d8:	08017225 	.word	0x08017225
 80170dc:	08017149 	.word	0x08017149
 80170e0:	08017207 	.word	0x08017207
 80170e4:	08017095 	.word	0x08017095
 80170e8:	08017095 	.word	0x08017095
 80170ec:	08017247 	.word	0x08017247
 80170f0:	08017095 	.word	0x08017095
 80170f4:	08017149 	.word	0x08017149
 80170f8:	08017095 	.word	0x08017095
 80170fc:	08017095 	.word	0x08017095
 8017100:	0801720f 	.word	0x0801720f
 8017104:	682b      	ldr	r3, [r5, #0]
 8017106:	1d1a      	adds	r2, r3, #4
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	602a      	str	r2, [r5, #0]
 801710c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017114:	2301      	movs	r3, #1
 8017116:	e0a3      	b.n	8017260 <_printf_i+0x1f4>
 8017118:	6820      	ldr	r0, [r4, #0]
 801711a:	6829      	ldr	r1, [r5, #0]
 801711c:	0606      	lsls	r6, r0, #24
 801711e:	f101 0304 	add.w	r3, r1, #4
 8017122:	d50a      	bpl.n	801713a <_printf_i+0xce>
 8017124:	680e      	ldr	r6, [r1, #0]
 8017126:	602b      	str	r3, [r5, #0]
 8017128:	2e00      	cmp	r6, #0
 801712a:	da03      	bge.n	8017134 <_printf_i+0xc8>
 801712c:	232d      	movs	r3, #45	; 0x2d
 801712e:	4276      	negs	r6, r6
 8017130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017134:	485e      	ldr	r0, [pc, #376]	; (80172b0 <_printf_i+0x244>)
 8017136:	230a      	movs	r3, #10
 8017138:	e019      	b.n	801716e <_printf_i+0x102>
 801713a:	680e      	ldr	r6, [r1, #0]
 801713c:	602b      	str	r3, [r5, #0]
 801713e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017142:	bf18      	it	ne
 8017144:	b236      	sxthne	r6, r6
 8017146:	e7ef      	b.n	8017128 <_printf_i+0xbc>
 8017148:	682b      	ldr	r3, [r5, #0]
 801714a:	6820      	ldr	r0, [r4, #0]
 801714c:	1d19      	adds	r1, r3, #4
 801714e:	6029      	str	r1, [r5, #0]
 8017150:	0601      	lsls	r1, r0, #24
 8017152:	d501      	bpl.n	8017158 <_printf_i+0xec>
 8017154:	681e      	ldr	r6, [r3, #0]
 8017156:	e002      	b.n	801715e <_printf_i+0xf2>
 8017158:	0646      	lsls	r6, r0, #25
 801715a:	d5fb      	bpl.n	8017154 <_printf_i+0xe8>
 801715c:	881e      	ldrh	r6, [r3, #0]
 801715e:	4854      	ldr	r0, [pc, #336]	; (80172b0 <_printf_i+0x244>)
 8017160:	2f6f      	cmp	r7, #111	; 0x6f
 8017162:	bf0c      	ite	eq
 8017164:	2308      	moveq	r3, #8
 8017166:	230a      	movne	r3, #10
 8017168:	2100      	movs	r1, #0
 801716a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801716e:	6865      	ldr	r5, [r4, #4]
 8017170:	60a5      	str	r5, [r4, #8]
 8017172:	2d00      	cmp	r5, #0
 8017174:	bfa2      	ittt	ge
 8017176:	6821      	ldrge	r1, [r4, #0]
 8017178:	f021 0104 	bicge.w	r1, r1, #4
 801717c:	6021      	strge	r1, [r4, #0]
 801717e:	b90e      	cbnz	r6, 8017184 <_printf_i+0x118>
 8017180:	2d00      	cmp	r5, #0
 8017182:	d04d      	beq.n	8017220 <_printf_i+0x1b4>
 8017184:	4615      	mov	r5, r2
 8017186:	fbb6 f1f3 	udiv	r1, r6, r3
 801718a:	fb03 6711 	mls	r7, r3, r1, r6
 801718e:	5dc7      	ldrb	r7, [r0, r7]
 8017190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017194:	4637      	mov	r7, r6
 8017196:	42bb      	cmp	r3, r7
 8017198:	460e      	mov	r6, r1
 801719a:	d9f4      	bls.n	8017186 <_printf_i+0x11a>
 801719c:	2b08      	cmp	r3, #8
 801719e:	d10b      	bne.n	80171b8 <_printf_i+0x14c>
 80171a0:	6823      	ldr	r3, [r4, #0]
 80171a2:	07de      	lsls	r6, r3, #31
 80171a4:	d508      	bpl.n	80171b8 <_printf_i+0x14c>
 80171a6:	6923      	ldr	r3, [r4, #16]
 80171a8:	6861      	ldr	r1, [r4, #4]
 80171aa:	4299      	cmp	r1, r3
 80171ac:	bfde      	ittt	le
 80171ae:	2330      	movle	r3, #48	; 0x30
 80171b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80171b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80171b8:	1b52      	subs	r2, r2, r5
 80171ba:	6122      	str	r2, [r4, #16]
 80171bc:	f8cd a000 	str.w	sl, [sp]
 80171c0:	464b      	mov	r3, r9
 80171c2:	aa03      	add	r2, sp, #12
 80171c4:	4621      	mov	r1, r4
 80171c6:	4640      	mov	r0, r8
 80171c8:	f7ff fee2 	bl	8016f90 <_printf_common>
 80171cc:	3001      	adds	r0, #1
 80171ce:	d14c      	bne.n	801726a <_printf_i+0x1fe>
 80171d0:	f04f 30ff 	mov.w	r0, #4294967295
 80171d4:	b004      	add	sp, #16
 80171d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171da:	4835      	ldr	r0, [pc, #212]	; (80172b0 <_printf_i+0x244>)
 80171dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80171e0:	6829      	ldr	r1, [r5, #0]
 80171e2:	6823      	ldr	r3, [r4, #0]
 80171e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80171e8:	6029      	str	r1, [r5, #0]
 80171ea:	061d      	lsls	r5, r3, #24
 80171ec:	d514      	bpl.n	8017218 <_printf_i+0x1ac>
 80171ee:	07df      	lsls	r7, r3, #31
 80171f0:	bf44      	itt	mi
 80171f2:	f043 0320 	orrmi.w	r3, r3, #32
 80171f6:	6023      	strmi	r3, [r4, #0]
 80171f8:	b91e      	cbnz	r6, 8017202 <_printf_i+0x196>
 80171fa:	6823      	ldr	r3, [r4, #0]
 80171fc:	f023 0320 	bic.w	r3, r3, #32
 8017200:	6023      	str	r3, [r4, #0]
 8017202:	2310      	movs	r3, #16
 8017204:	e7b0      	b.n	8017168 <_printf_i+0xfc>
 8017206:	6823      	ldr	r3, [r4, #0]
 8017208:	f043 0320 	orr.w	r3, r3, #32
 801720c:	6023      	str	r3, [r4, #0]
 801720e:	2378      	movs	r3, #120	; 0x78
 8017210:	4828      	ldr	r0, [pc, #160]	; (80172b4 <_printf_i+0x248>)
 8017212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017216:	e7e3      	b.n	80171e0 <_printf_i+0x174>
 8017218:	0659      	lsls	r1, r3, #25
 801721a:	bf48      	it	mi
 801721c:	b2b6      	uxthmi	r6, r6
 801721e:	e7e6      	b.n	80171ee <_printf_i+0x182>
 8017220:	4615      	mov	r5, r2
 8017222:	e7bb      	b.n	801719c <_printf_i+0x130>
 8017224:	682b      	ldr	r3, [r5, #0]
 8017226:	6826      	ldr	r6, [r4, #0]
 8017228:	6961      	ldr	r1, [r4, #20]
 801722a:	1d18      	adds	r0, r3, #4
 801722c:	6028      	str	r0, [r5, #0]
 801722e:	0635      	lsls	r5, r6, #24
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	d501      	bpl.n	8017238 <_printf_i+0x1cc>
 8017234:	6019      	str	r1, [r3, #0]
 8017236:	e002      	b.n	801723e <_printf_i+0x1d2>
 8017238:	0670      	lsls	r0, r6, #25
 801723a:	d5fb      	bpl.n	8017234 <_printf_i+0x1c8>
 801723c:	8019      	strh	r1, [r3, #0]
 801723e:	2300      	movs	r3, #0
 8017240:	6123      	str	r3, [r4, #16]
 8017242:	4615      	mov	r5, r2
 8017244:	e7ba      	b.n	80171bc <_printf_i+0x150>
 8017246:	682b      	ldr	r3, [r5, #0]
 8017248:	1d1a      	adds	r2, r3, #4
 801724a:	602a      	str	r2, [r5, #0]
 801724c:	681d      	ldr	r5, [r3, #0]
 801724e:	6862      	ldr	r2, [r4, #4]
 8017250:	2100      	movs	r1, #0
 8017252:	4628      	mov	r0, r5
 8017254:	f7e9 f864 	bl	8000320 <memchr>
 8017258:	b108      	cbz	r0, 801725e <_printf_i+0x1f2>
 801725a:	1b40      	subs	r0, r0, r5
 801725c:	6060      	str	r0, [r4, #4]
 801725e:	6863      	ldr	r3, [r4, #4]
 8017260:	6123      	str	r3, [r4, #16]
 8017262:	2300      	movs	r3, #0
 8017264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017268:	e7a8      	b.n	80171bc <_printf_i+0x150>
 801726a:	6923      	ldr	r3, [r4, #16]
 801726c:	462a      	mov	r2, r5
 801726e:	4649      	mov	r1, r9
 8017270:	4640      	mov	r0, r8
 8017272:	47d0      	blx	sl
 8017274:	3001      	adds	r0, #1
 8017276:	d0ab      	beq.n	80171d0 <_printf_i+0x164>
 8017278:	6823      	ldr	r3, [r4, #0]
 801727a:	079b      	lsls	r3, r3, #30
 801727c:	d413      	bmi.n	80172a6 <_printf_i+0x23a>
 801727e:	68e0      	ldr	r0, [r4, #12]
 8017280:	9b03      	ldr	r3, [sp, #12]
 8017282:	4298      	cmp	r0, r3
 8017284:	bfb8      	it	lt
 8017286:	4618      	movlt	r0, r3
 8017288:	e7a4      	b.n	80171d4 <_printf_i+0x168>
 801728a:	2301      	movs	r3, #1
 801728c:	4632      	mov	r2, r6
 801728e:	4649      	mov	r1, r9
 8017290:	4640      	mov	r0, r8
 8017292:	47d0      	blx	sl
 8017294:	3001      	adds	r0, #1
 8017296:	d09b      	beq.n	80171d0 <_printf_i+0x164>
 8017298:	3501      	adds	r5, #1
 801729a:	68e3      	ldr	r3, [r4, #12]
 801729c:	9903      	ldr	r1, [sp, #12]
 801729e:	1a5b      	subs	r3, r3, r1
 80172a0:	42ab      	cmp	r3, r5
 80172a2:	dcf2      	bgt.n	801728a <_printf_i+0x21e>
 80172a4:	e7eb      	b.n	801727e <_printf_i+0x212>
 80172a6:	2500      	movs	r5, #0
 80172a8:	f104 0619 	add.w	r6, r4, #25
 80172ac:	e7f5      	b.n	801729a <_printf_i+0x22e>
 80172ae:	bf00      	nop
 80172b0:	080181e5 	.word	0x080181e5
 80172b4:	080181f6 	.word	0x080181f6

080172b8 <nan>:
 80172b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80172c0 <nan+0x8>
 80172bc:	4770      	bx	lr
 80172be:	bf00      	nop
 80172c0:	00000000 	.word	0x00000000
 80172c4:	7ff80000 	.word	0x7ff80000

080172c8 <_sbrk_r>:
 80172c8:	b538      	push	{r3, r4, r5, lr}
 80172ca:	4d06      	ldr	r5, [pc, #24]	; (80172e4 <_sbrk_r+0x1c>)
 80172cc:	2300      	movs	r3, #0
 80172ce:	4604      	mov	r4, r0
 80172d0:	4608      	mov	r0, r1
 80172d2:	602b      	str	r3, [r5, #0]
 80172d4:	f7ec fbb6 	bl	8003a44 <_sbrk>
 80172d8:	1c43      	adds	r3, r0, #1
 80172da:	d102      	bne.n	80172e2 <_sbrk_r+0x1a>
 80172dc:	682b      	ldr	r3, [r5, #0]
 80172de:	b103      	cbz	r3, 80172e2 <_sbrk_r+0x1a>
 80172e0:	6023      	str	r3, [r4, #0]
 80172e2:	bd38      	pop	{r3, r4, r5, pc}
 80172e4:	24008e30 	.word	0x24008e30

080172e8 <strncmp>:
 80172e8:	b510      	push	{r4, lr}
 80172ea:	b17a      	cbz	r2, 801730c <strncmp+0x24>
 80172ec:	4603      	mov	r3, r0
 80172ee:	3901      	subs	r1, #1
 80172f0:	1884      	adds	r4, r0, r2
 80172f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80172f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80172fa:	4290      	cmp	r0, r2
 80172fc:	d101      	bne.n	8017302 <strncmp+0x1a>
 80172fe:	42a3      	cmp	r3, r4
 8017300:	d101      	bne.n	8017306 <strncmp+0x1e>
 8017302:	1a80      	subs	r0, r0, r2
 8017304:	bd10      	pop	{r4, pc}
 8017306:	2800      	cmp	r0, #0
 8017308:	d1f3      	bne.n	80172f2 <strncmp+0xa>
 801730a:	e7fa      	b.n	8017302 <strncmp+0x1a>
 801730c:	4610      	mov	r0, r2
 801730e:	e7f9      	b.n	8017304 <strncmp+0x1c>

08017310 <__swbuf_r>:
 8017310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017312:	460e      	mov	r6, r1
 8017314:	4614      	mov	r4, r2
 8017316:	4605      	mov	r5, r0
 8017318:	b118      	cbz	r0, 8017322 <__swbuf_r+0x12>
 801731a:	6983      	ldr	r3, [r0, #24]
 801731c:	b90b      	cbnz	r3, 8017322 <__swbuf_r+0x12>
 801731e:	f000 f9e7 	bl	80176f0 <__sinit>
 8017322:	4b21      	ldr	r3, [pc, #132]	; (80173a8 <__swbuf_r+0x98>)
 8017324:	429c      	cmp	r4, r3
 8017326:	d12b      	bne.n	8017380 <__swbuf_r+0x70>
 8017328:	686c      	ldr	r4, [r5, #4]
 801732a:	69a3      	ldr	r3, [r4, #24]
 801732c:	60a3      	str	r3, [r4, #8]
 801732e:	89a3      	ldrh	r3, [r4, #12]
 8017330:	071a      	lsls	r2, r3, #28
 8017332:	d52f      	bpl.n	8017394 <__swbuf_r+0x84>
 8017334:	6923      	ldr	r3, [r4, #16]
 8017336:	b36b      	cbz	r3, 8017394 <__swbuf_r+0x84>
 8017338:	6923      	ldr	r3, [r4, #16]
 801733a:	6820      	ldr	r0, [r4, #0]
 801733c:	1ac0      	subs	r0, r0, r3
 801733e:	6963      	ldr	r3, [r4, #20]
 8017340:	b2f6      	uxtb	r6, r6
 8017342:	4283      	cmp	r3, r0
 8017344:	4637      	mov	r7, r6
 8017346:	dc04      	bgt.n	8017352 <__swbuf_r+0x42>
 8017348:	4621      	mov	r1, r4
 801734a:	4628      	mov	r0, r5
 801734c:	f000 f93c 	bl	80175c8 <_fflush_r>
 8017350:	bb30      	cbnz	r0, 80173a0 <__swbuf_r+0x90>
 8017352:	68a3      	ldr	r3, [r4, #8]
 8017354:	3b01      	subs	r3, #1
 8017356:	60a3      	str	r3, [r4, #8]
 8017358:	6823      	ldr	r3, [r4, #0]
 801735a:	1c5a      	adds	r2, r3, #1
 801735c:	6022      	str	r2, [r4, #0]
 801735e:	701e      	strb	r6, [r3, #0]
 8017360:	6963      	ldr	r3, [r4, #20]
 8017362:	3001      	adds	r0, #1
 8017364:	4283      	cmp	r3, r0
 8017366:	d004      	beq.n	8017372 <__swbuf_r+0x62>
 8017368:	89a3      	ldrh	r3, [r4, #12]
 801736a:	07db      	lsls	r3, r3, #31
 801736c:	d506      	bpl.n	801737c <__swbuf_r+0x6c>
 801736e:	2e0a      	cmp	r6, #10
 8017370:	d104      	bne.n	801737c <__swbuf_r+0x6c>
 8017372:	4621      	mov	r1, r4
 8017374:	4628      	mov	r0, r5
 8017376:	f000 f927 	bl	80175c8 <_fflush_r>
 801737a:	b988      	cbnz	r0, 80173a0 <__swbuf_r+0x90>
 801737c:	4638      	mov	r0, r7
 801737e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017380:	4b0a      	ldr	r3, [pc, #40]	; (80173ac <__swbuf_r+0x9c>)
 8017382:	429c      	cmp	r4, r3
 8017384:	d101      	bne.n	801738a <__swbuf_r+0x7a>
 8017386:	68ac      	ldr	r4, [r5, #8]
 8017388:	e7cf      	b.n	801732a <__swbuf_r+0x1a>
 801738a:	4b09      	ldr	r3, [pc, #36]	; (80173b0 <__swbuf_r+0xa0>)
 801738c:	429c      	cmp	r4, r3
 801738e:	bf08      	it	eq
 8017390:	68ec      	ldreq	r4, [r5, #12]
 8017392:	e7ca      	b.n	801732a <__swbuf_r+0x1a>
 8017394:	4621      	mov	r1, r4
 8017396:	4628      	mov	r0, r5
 8017398:	f000 f81a 	bl	80173d0 <__swsetup_r>
 801739c:	2800      	cmp	r0, #0
 801739e:	d0cb      	beq.n	8017338 <__swbuf_r+0x28>
 80173a0:	f04f 37ff 	mov.w	r7, #4294967295
 80173a4:	e7ea      	b.n	801737c <__swbuf_r+0x6c>
 80173a6:	bf00      	nop
 80173a8:	08018228 	.word	0x08018228
 80173ac:	08018248 	.word	0x08018248
 80173b0:	08018208 	.word	0x08018208

080173b4 <__ascii_wctomb>:
 80173b4:	b149      	cbz	r1, 80173ca <__ascii_wctomb+0x16>
 80173b6:	2aff      	cmp	r2, #255	; 0xff
 80173b8:	bf85      	ittet	hi
 80173ba:	238a      	movhi	r3, #138	; 0x8a
 80173bc:	6003      	strhi	r3, [r0, #0]
 80173be:	700a      	strbls	r2, [r1, #0]
 80173c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80173c4:	bf98      	it	ls
 80173c6:	2001      	movls	r0, #1
 80173c8:	4770      	bx	lr
 80173ca:	4608      	mov	r0, r1
 80173cc:	4770      	bx	lr
	...

080173d0 <__swsetup_r>:
 80173d0:	4b32      	ldr	r3, [pc, #200]	; (801749c <__swsetup_r+0xcc>)
 80173d2:	b570      	push	{r4, r5, r6, lr}
 80173d4:	681d      	ldr	r5, [r3, #0]
 80173d6:	4606      	mov	r6, r0
 80173d8:	460c      	mov	r4, r1
 80173da:	b125      	cbz	r5, 80173e6 <__swsetup_r+0x16>
 80173dc:	69ab      	ldr	r3, [r5, #24]
 80173de:	b913      	cbnz	r3, 80173e6 <__swsetup_r+0x16>
 80173e0:	4628      	mov	r0, r5
 80173e2:	f000 f985 	bl	80176f0 <__sinit>
 80173e6:	4b2e      	ldr	r3, [pc, #184]	; (80174a0 <__swsetup_r+0xd0>)
 80173e8:	429c      	cmp	r4, r3
 80173ea:	d10f      	bne.n	801740c <__swsetup_r+0x3c>
 80173ec:	686c      	ldr	r4, [r5, #4]
 80173ee:	89a3      	ldrh	r3, [r4, #12]
 80173f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80173f4:	0719      	lsls	r1, r3, #28
 80173f6:	d42c      	bmi.n	8017452 <__swsetup_r+0x82>
 80173f8:	06dd      	lsls	r5, r3, #27
 80173fa:	d411      	bmi.n	8017420 <__swsetup_r+0x50>
 80173fc:	2309      	movs	r3, #9
 80173fe:	6033      	str	r3, [r6, #0]
 8017400:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017404:	81a3      	strh	r3, [r4, #12]
 8017406:	f04f 30ff 	mov.w	r0, #4294967295
 801740a:	e03e      	b.n	801748a <__swsetup_r+0xba>
 801740c:	4b25      	ldr	r3, [pc, #148]	; (80174a4 <__swsetup_r+0xd4>)
 801740e:	429c      	cmp	r4, r3
 8017410:	d101      	bne.n	8017416 <__swsetup_r+0x46>
 8017412:	68ac      	ldr	r4, [r5, #8]
 8017414:	e7eb      	b.n	80173ee <__swsetup_r+0x1e>
 8017416:	4b24      	ldr	r3, [pc, #144]	; (80174a8 <__swsetup_r+0xd8>)
 8017418:	429c      	cmp	r4, r3
 801741a:	bf08      	it	eq
 801741c:	68ec      	ldreq	r4, [r5, #12]
 801741e:	e7e6      	b.n	80173ee <__swsetup_r+0x1e>
 8017420:	0758      	lsls	r0, r3, #29
 8017422:	d512      	bpl.n	801744a <__swsetup_r+0x7a>
 8017424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017426:	b141      	cbz	r1, 801743a <__swsetup_r+0x6a>
 8017428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801742c:	4299      	cmp	r1, r3
 801742e:	d002      	beq.n	8017436 <__swsetup_r+0x66>
 8017430:	4630      	mov	r0, r6
 8017432:	f7ff fa17 	bl	8016864 <_free_r>
 8017436:	2300      	movs	r3, #0
 8017438:	6363      	str	r3, [r4, #52]	; 0x34
 801743a:	89a3      	ldrh	r3, [r4, #12]
 801743c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017440:	81a3      	strh	r3, [r4, #12]
 8017442:	2300      	movs	r3, #0
 8017444:	6063      	str	r3, [r4, #4]
 8017446:	6923      	ldr	r3, [r4, #16]
 8017448:	6023      	str	r3, [r4, #0]
 801744a:	89a3      	ldrh	r3, [r4, #12]
 801744c:	f043 0308 	orr.w	r3, r3, #8
 8017450:	81a3      	strh	r3, [r4, #12]
 8017452:	6923      	ldr	r3, [r4, #16]
 8017454:	b94b      	cbnz	r3, 801746a <__swsetup_r+0x9a>
 8017456:	89a3      	ldrh	r3, [r4, #12]
 8017458:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801745c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017460:	d003      	beq.n	801746a <__swsetup_r+0x9a>
 8017462:	4621      	mov	r1, r4
 8017464:	4630      	mov	r0, r6
 8017466:	f000 fa09 	bl	801787c <__smakebuf_r>
 801746a:	89a0      	ldrh	r0, [r4, #12]
 801746c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017470:	f010 0301 	ands.w	r3, r0, #1
 8017474:	d00a      	beq.n	801748c <__swsetup_r+0xbc>
 8017476:	2300      	movs	r3, #0
 8017478:	60a3      	str	r3, [r4, #8]
 801747a:	6963      	ldr	r3, [r4, #20]
 801747c:	425b      	negs	r3, r3
 801747e:	61a3      	str	r3, [r4, #24]
 8017480:	6923      	ldr	r3, [r4, #16]
 8017482:	b943      	cbnz	r3, 8017496 <__swsetup_r+0xc6>
 8017484:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017488:	d1ba      	bne.n	8017400 <__swsetup_r+0x30>
 801748a:	bd70      	pop	{r4, r5, r6, pc}
 801748c:	0781      	lsls	r1, r0, #30
 801748e:	bf58      	it	pl
 8017490:	6963      	ldrpl	r3, [r4, #20]
 8017492:	60a3      	str	r3, [r4, #8]
 8017494:	e7f4      	b.n	8017480 <__swsetup_r+0xb0>
 8017496:	2000      	movs	r0, #0
 8017498:	e7f7      	b.n	801748a <__swsetup_r+0xba>
 801749a:	bf00      	nop
 801749c:	2400001c 	.word	0x2400001c
 80174a0:	08018228 	.word	0x08018228
 80174a4:	08018248 	.word	0x08018248
 80174a8:	08018208 	.word	0x08018208

080174ac <abort>:
 80174ac:	b508      	push	{r3, lr}
 80174ae:	2006      	movs	r0, #6
 80174b0:	f000 faa2 	bl	80179f8 <raise>
 80174b4:	2001      	movs	r0, #1
 80174b6:	f7ec fa4e 	bl	8003956 <_exit>
	...

080174bc <__sflush_r>:
 80174bc:	898a      	ldrh	r2, [r1, #12]
 80174be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174c2:	4605      	mov	r5, r0
 80174c4:	0710      	lsls	r0, r2, #28
 80174c6:	460c      	mov	r4, r1
 80174c8:	d458      	bmi.n	801757c <__sflush_r+0xc0>
 80174ca:	684b      	ldr	r3, [r1, #4]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	dc05      	bgt.n	80174dc <__sflush_r+0x20>
 80174d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	dc02      	bgt.n	80174dc <__sflush_r+0x20>
 80174d6:	2000      	movs	r0, #0
 80174d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80174de:	2e00      	cmp	r6, #0
 80174e0:	d0f9      	beq.n	80174d6 <__sflush_r+0x1a>
 80174e2:	2300      	movs	r3, #0
 80174e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80174e8:	682f      	ldr	r7, [r5, #0]
 80174ea:	602b      	str	r3, [r5, #0]
 80174ec:	d032      	beq.n	8017554 <__sflush_r+0x98>
 80174ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80174f0:	89a3      	ldrh	r3, [r4, #12]
 80174f2:	075a      	lsls	r2, r3, #29
 80174f4:	d505      	bpl.n	8017502 <__sflush_r+0x46>
 80174f6:	6863      	ldr	r3, [r4, #4]
 80174f8:	1ac0      	subs	r0, r0, r3
 80174fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80174fc:	b10b      	cbz	r3, 8017502 <__sflush_r+0x46>
 80174fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017500:	1ac0      	subs	r0, r0, r3
 8017502:	2300      	movs	r3, #0
 8017504:	4602      	mov	r2, r0
 8017506:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017508:	6a21      	ldr	r1, [r4, #32]
 801750a:	4628      	mov	r0, r5
 801750c:	47b0      	blx	r6
 801750e:	1c43      	adds	r3, r0, #1
 8017510:	89a3      	ldrh	r3, [r4, #12]
 8017512:	d106      	bne.n	8017522 <__sflush_r+0x66>
 8017514:	6829      	ldr	r1, [r5, #0]
 8017516:	291d      	cmp	r1, #29
 8017518:	d82c      	bhi.n	8017574 <__sflush_r+0xb8>
 801751a:	4a2a      	ldr	r2, [pc, #168]	; (80175c4 <__sflush_r+0x108>)
 801751c:	40ca      	lsrs	r2, r1
 801751e:	07d6      	lsls	r6, r2, #31
 8017520:	d528      	bpl.n	8017574 <__sflush_r+0xb8>
 8017522:	2200      	movs	r2, #0
 8017524:	6062      	str	r2, [r4, #4]
 8017526:	04d9      	lsls	r1, r3, #19
 8017528:	6922      	ldr	r2, [r4, #16]
 801752a:	6022      	str	r2, [r4, #0]
 801752c:	d504      	bpl.n	8017538 <__sflush_r+0x7c>
 801752e:	1c42      	adds	r2, r0, #1
 8017530:	d101      	bne.n	8017536 <__sflush_r+0x7a>
 8017532:	682b      	ldr	r3, [r5, #0]
 8017534:	b903      	cbnz	r3, 8017538 <__sflush_r+0x7c>
 8017536:	6560      	str	r0, [r4, #84]	; 0x54
 8017538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801753a:	602f      	str	r7, [r5, #0]
 801753c:	2900      	cmp	r1, #0
 801753e:	d0ca      	beq.n	80174d6 <__sflush_r+0x1a>
 8017540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017544:	4299      	cmp	r1, r3
 8017546:	d002      	beq.n	801754e <__sflush_r+0x92>
 8017548:	4628      	mov	r0, r5
 801754a:	f7ff f98b 	bl	8016864 <_free_r>
 801754e:	2000      	movs	r0, #0
 8017550:	6360      	str	r0, [r4, #52]	; 0x34
 8017552:	e7c1      	b.n	80174d8 <__sflush_r+0x1c>
 8017554:	6a21      	ldr	r1, [r4, #32]
 8017556:	2301      	movs	r3, #1
 8017558:	4628      	mov	r0, r5
 801755a:	47b0      	blx	r6
 801755c:	1c41      	adds	r1, r0, #1
 801755e:	d1c7      	bne.n	80174f0 <__sflush_r+0x34>
 8017560:	682b      	ldr	r3, [r5, #0]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d0c4      	beq.n	80174f0 <__sflush_r+0x34>
 8017566:	2b1d      	cmp	r3, #29
 8017568:	d001      	beq.n	801756e <__sflush_r+0xb2>
 801756a:	2b16      	cmp	r3, #22
 801756c:	d101      	bne.n	8017572 <__sflush_r+0xb6>
 801756e:	602f      	str	r7, [r5, #0]
 8017570:	e7b1      	b.n	80174d6 <__sflush_r+0x1a>
 8017572:	89a3      	ldrh	r3, [r4, #12]
 8017574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017578:	81a3      	strh	r3, [r4, #12]
 801757a:	e7ad      	b.n	80174d8 <__sflush_r+0x1c>
 801757c:	690f      	ldr	r7, [r1, #16]
 801757e:	2f00      	cmp	r7, #0
 8017580:	d0a9      	beq.n	80174d6 <__sflush_r+0x1a>
 8017582:	0793      	lsls	r3, r2, #30
 8017584:	680e      	ldr	r6, [r1, #0]
 8017586:	bf08      	it	eq
 8017588:	694b      	ldreq	r3, [r1, #20]
 801758a:	600f      	str	r7, [r1, #0]
 801758c:	bf18      	it	ne
 801758e:	2300      	movne	r3, #0
 8017590:	eba6 0807 	sub.w	r8, r6, r7
 8017594:	608b      	str	r3, [r1, #8]
 8017596:	f1b8 0f00 	cmp.w	r8, #0
 801759a:	dd9c      	ble.n	80174d6 <__sflush_r+0x1a>
 801759c:	6a21      	ldr	r1, [r4, #32]
 801759e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80175a0:	4643      	mov	r3, r8
 80175a2:	463a      	mov	r2, r7
 80175a4:	4628      	mov	r0, r5
 80175a6:	47b0      	blx	r6
 80175a8:	2800      	cmp	r0, #0
 80175aa:	dc06      	bgt.n	80175ba <__sflush_r+0xfe>
 80175ac:	89a3      	ldrh	r3, [r4, #12]
 80175ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175b2:	81a3      	strh	r3, [r4, #12]
 80175b4:	f04f 30ff 	mov.w	r0, #4294967295
 80175b8:	e78e      	b.n	80174d8 <__sflush_r+0x1c>
 80175ba:	4407      	add	r7, r0
 80175bc:	eba8 0800 	sub.w	r8, r8, r0
 80175c0:	e7e9      	b.n	8017596 <__sflush_r+0xda>
 80175c2:	bf00      	nop
 80175c4:	20400001 	.word	0x20400001

080175c8 <_fflush_r>:
 80175c8:	b538      	push	{r3, r4, r5, lr}
 80175ca:	690b      	ldr	r3, [r1, #16]
 80175cc:	4605      	mov	r5, r0
 80175ce:	460c      	mov	r4, r1
 80175d0:	b913      	cbnz	r3, 80175d8 <_fflush_r+0x10>
 80175d2:	2500      	movs	r5, #0
 80175d4:	4628      	mov	r0, r5
 80175d6:	bd38      	pop	{r3, r4, r5, pc}
 80175d8:	b118      	cbz	r0, 80175e2 <_fflush_r+0x1a>
 80175da:	6983      	ldr	r3, [r0, #24]
 80175dc:	b90b      	cbnz	r3, 80175e2 <_fflush_r+0x1a>
 80175de:	f000 f887 	bl	80176f0 <__sinit>
 80175e2:	4b14      	ldr	r3, [pc, #80]	; (8017634 <_fflush_r+0x6c>)
 80175e4:	429c      	cmp	r4, r3
 80175e6:	d11b      	bne.n	8017620 <_fflush_r+0x58>
 80175e8:	686c      	ldr	r4, [r5, #4]
 80175ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d0ef      	beq.n	80175d2 <_fflush_r+0xa>
 80175f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80175f4:	07d0      	lsls	r0, r2, #31
 80175f6:	d404      	bmi.n	8017602 <_fflush_r+0x3a>
 80175f8:	0599      	lsls	r1, r3, #22
 80175fa:	d402      	bmi.n	8017602 <_fflush_r+0x3a>
 80175fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80175fe:	f000 f915 	bl	801782c <__retarget_lock_acquire_recursive>
 8017602:	4628      	mov	r0, r5
 8017604:	4621      	mov	r1, r4
 8017606:	f7ff ff59 	bl	80174bc <__sflush_r>
 801760a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801760c:	07da      	lsls	r2, r3, #31
 801760e:	4605      	mov	r5, r0
 8017610:	d4e0      	bmi.n	80175d4 <_fflush_r+0xc>
 8017612:	89a3      	ldrh	r3, [r4, #12]
 8017614:	059b      	lsls	r3, r3, #22
 8017616:	d4dd      	bmi.n	80175d4 <_fflush_r+0xc>
 8017618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801761a:	f000 f908 	bl	801782e <__retarget_lock_release_recursive>
 801761e:	e7d9      	b.n	80175d4 <_fflush_r+0xc>
 8017620:	4b05      	ldr	r3, [pc, #20]	; (8017638 <_fflush_r+0x70>)
 8017622:	429c      	cmp	r4, r3
 8017624:	d101      	bne.n	801762a <_fflush_r+0x62>
 8017626:	68ac      	ldr	r4, [r5, #8]
 8017628:	e7df      	b.n	80175ea <_fflush_r+0x22>
 801762a:	4b04      	ldr	r3, [pc, #16]	; (801763c <_fflush_r+0x74>)
 801762c:	429c      	cmp	r4, r3
 801762e:	bf08      	it	eq
 8017630:	68ec      	ldreq	r4, [r5, #12]
 8017632:	e7da      	b.n	80175ea <_fflush_r+0x22>
 8017634:	08018228 	.word	0x08018228
 8017638:	08018248 	.word	0x08018248
 801763c:	08018208 	.word	0x08018208

08017640 <std>:
 8017640:	2300      	movs	r3, #0
 8017642:	b510      	push	{r4, lr}
 8017644:	4604      	mov	r4, r0
 8017646:	e9c0 3300 	strd	r3, r3, [r0]
 801764a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801764e:	6083      	str	r3, [r0, #8]
 8017650:	8181      	strh	r1, [r0, #12]
 8017652:	6643      	str	r3, [r0, #100]	; 0x64
 8017654:	81c2      	strh	r2, [r0, #14]
 8017656:	6183      	str	r3, [r0, #24]
 8017658:	4619      	mov	r1, r3
 801765a:	2208      	movs	r2, #8
 801765c:	305c      	adds	r0, #92	; 0x5c
 801765e:	f7fd f977 	bl	8014950 <memset>
 8017662:	4b05      	ldr	r3, [pc, #20]	; (8017678 <std+0x38>)
 8017664:	6263      	str	r3, [r4, #36]	; 0x24
 8017666:	4b05      	ldr	r3, [pc, #20]	; (801767c <std+0x3c>)
 8017668:	62a3      	str	r3, [r4, #40]	; 0x28
 801766a:	4b05      	ldr	r3, [pc, #20]	; (8017680 <std+0x40>)
 801766c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801766e:	4b05      	ldr	r3, [pc, #20]	; (8017684 <std+0x44>)
 8017670:	6224      	str	r4, [r4, #32]
 8017672:	6323      	str	r3, [r4, #48]	; 0x30
 8017674:	bd10      	pop	{r4, pc}
 8017676:	bf00      	nop
 8017678:	08017a31 	.word	0x08017a31
 801767c:	08017a53 	.word	0x08017a53
 8017680:	08017a8b 	.word	0x08017a8b
 8017684:	08017aaf 	.word	0x08017aaf

08017688 <_cleanup_r>:
 8017688:	4901      	ldr	r1, [pc, #4]	; (8017690 <_cleanup_r+0x8>)
 801768a:	f000 b8af 	b.w	80177ec <_fwalk_reent>
 801768e:	bf00      	nop
 8017690:	080175c9 	.word	0x080175c9

08017694 <__sfmoreglue>:
 8017694:	b570      	push	{r4, r5, r6, lr}
 8017696:	2268      	movs	r2, #104	; 0x68
 8017698:	1e4d      	subs	r5, r1, #1
 801769a:	4355      	muls	r5, r2
 801769c:	460e      	mov	r6, r1
 801769e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80176a2:	f7ff f94b 	bl	801693c <_malloc_r>
 80176a6:	4604      	mov	r4, r0
 80176a8:	b140      	cbz	r0, 80176bc <__sfmoreglue+0x28>
 80176aa:	2100      	movs	r1, #0
 80176ac:	e9c0 1600 	strd	r1, r6, [r0]
 80176b0:	300c      	adds	r0, #12
 80176b2:	60a0      	str	r0, [r4, #8]
 80176b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80176b8:	f7fd f94a 	bl	8014950 <memset>
 80176bc:	4620      	mov	r0, r4
 80176be:	bd70      	pop	{r4, r5, r6, pc}

080176c0 <__sfp_lock_acquire>:
 80176c0:	4801      	ldr	r0, [pc, #4]	; (80176c8 <__sfp_lock_acquire+0x8>)
 80176c2:	f000 b8b3 	b.w	801782c <__retarget_lock_acquire_recursive>
 80176c6:	bf00      	nop
 80176c8:	24008e2d 	.word	0x24008e2d

080176cc <__sfp_lock_release>:
 80176cc:	4801      	ldr	r0, [pc, #4]	; (80176d4 <__sfp_lock_release+0x8>)
 80176ce:	f000 b8ae 	b.w	801782e <__retarget_lock_release_recursive>
 80176d2:	bf00      	nop
 80176d4:	24008e2d 	.word	0x24008e2d

080176d8 <__sinit_lock_acquire>:
 80176d8:	4801      	ldr	r0, [pc, #4]	; (80176e0 <__sinit_lock_acquire+0x8>)
 80176da:	f000 b8a7 	b.w	801782c <__retarget_lock_acquire_recursive>
 80176de:	bf00      	nop
 80176e0:	24008e2e 	.word	0x24008e2e

080176e4 <__sinit_lock_release>:
 80176e4:	4801      	ldr	r0, [pc, #4]	; (80176ec <__sinit_lock_release+0x8>)
 80176e6:	f000 b8a2 	b.w	801782e <__retarget_lock_release_recursive>
 80176ea:	bf00      	nop
 80176ec:	24008e2e 	.word	0x24008e2e

080176f0 <__sinit>:
 80176f0:	b510      	push	{r4, lr}
 80176f2:	4604      	mov	r4, r0
 80176f4:	f7ff fff0 	bl	80176d8 <__sinit_lock_acquire>
 80176f8:	69a3      	ldr	r3, [r4, #24]
 80176fa:	b11b      	cbz	r3, 8017704 <__sinit+0x14>
 80176fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017700:	f7ff bff0 	b.w	80176e4 <__sinit_lock_release>
 8017704:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017708:	6523      	str	r3, [r4, #80]	; 0x50
 801770a:	4b13      	ldr	r3, [pc, #76]	; (8017758 <__sinit+0x68>)
 801770c:	4a13      	ldr	r2, [pc, #76]	; (801775c <__sinit+0x6c>)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	62a2      	str	r2, [r4, #40]	; 0x28
 8017712:	42a3      	cmp	r3, r4
 8017714:	bf04      	itt	eq
 8017716:	2301      	moveq	r3, #1
 8017718:	61a3      	streq	r3, [r4, #24]
 801771a:	4620      	mov	r0, r4
 801771c:	f000 f820 	bl	8017760 <__sfp>
 8017720:	6060      	str	r0, [r4, #4]
 8017722:	4620      	mov	r0, r4
 8017724:	f000 f81c 	bl	8017760 <__sfp>
 8017728:	60a0      	str	r0, [r4, #8]
 801772a:	4620      	mov	r0, r4
 801772c:	f000 f818 	bl	8017760 <__sfp>
 8017730:	2200      	movs	r2, #0
 8017732:	60e0      	str	r0, [r4, #12]
 8017734:	2104      	movs	r1, #4
 8017736:	6860      	ldr	r0, [r4, #4]
 8017738:	f7ff ff82 	bl	8017640 <std>
 801773c:	68a0      	ldr	r0, [r4, #8]
 801773e:	2201      	movs	r2, #1
 8017740:	2109      	movs	r1, #9
 8017742:	f7ff ff7d 	bl	8017640 <std>
 8017746:	68e0      	ldr	r0, [r4, #12]
 8017748:	2202      	movs	r2, #2
 801774a:	2112      	movs	r1, #18
 801774c:	f7ff ff78 	bl	8017640 <std>
 8017750:	2301      	movs	r3, #1
 8017752:	61a3      	str	r3, [r4, #24]
 8017754:	e7d2      	b.n	80176fc <__sinit+0xc>
 8017756:	bf00      	nop
 8017758:	08017ddc 	.word	0x08017ddc
 801775c:	08017689 	.word	0x08017689

08017760 <__sfp>:
 8017760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017762:	4607      	mov	r7, r0
 8017764:	f7ff ffac 	bl	80176c0 <__sfp_lock_acquire>
 8017768:	4b1e      	ldr	r3, [pc, #120]	; (80177e4 <__sfp+0x84>)
 801776a:	681e      	ldr	r6, [r3, #0]
 801776c:	69b3      	ldr	r3, [r6, #24]
 801776e:	b913      	cbnz	r3, 8017776 <__sfp+0x16>
 8017770:	4630      	mov	r0, r6
 8017772:	f7ff ffbd 	bl	80176f0 <__sinit>
 8017776:	3648      	adds	r6, #72	; 0x48
 8017778:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801777c:	3b01      	subs	r3, #1
 801777e:	d503      	bpl.n	8017788 <__sfp+0x28>
 8017780:	6833      	ldr	r3, [r6, #0]
 8017782:	b30b      	cbz	r3, 80177c8 <__sfp+0x68>
 8017784:	6836      	ldr	r6, [r6, #0]
 8017786:	e7f7      	b.n	8017778 <__sfp+0x18>
 8017788:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801778c:	b9d5      	cbnz	r5, 80177c4 <__sfp+0x64>
 801778e:	4b16      	ldr	r3, [pc, #88]	; (80177e8 <__sfp+0x88>)
 8017790:	60e3      	str	r3, [r4, #12]
 8017792:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017796:	6665      	str	r5, [r4, #100]	; 0x64
 8017798:	f000 f847 	bl	801782a <__retarget_lock_init_recursive>
 801779c:	f7ff ff96 	bl	80176cc <__sfp_lock_release>
 80177a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80177a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80177a8:	6025      	str	r5, [r4, #0]
 80177aa:	61a5      	str	r5, [r4, #24]
 80177ac:	2208      	movs	r2, #8
 80177ae:	4629      	mov	r1, r5
 80177b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80177b4:	f7fd f8cc 	bl	8014950 <memset>
 80177b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80177bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80177c0:	4620      	mov	r0, r4
 80177c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177c4:	3468      	adds	r4, #104	; 0x68
 80177c6:	e7d9      	b.n	801777c <__sfp+0x1c>
 80177c8:	2104      	movs	r1, #4
 80177ca:	4638      	mov	r0, r7
 80177cc:	f7ff ff62 	bl	8017694 <__sfmoreglue>
 80177d0:	4604      	mov	r4, r0
 80177d2:	6030      	str	r0, [r6, #0]
 80177d4:	2800      	cmp	r0, #0
 80177d6:	d1d5      	bne.n	8017784 <__sfp+0x24>
 80177d8:	f7ff ff78 	bl	80176cc <__sfp_lock_release>
 80177dc:	230c      	movs	r3, #12
 80177de:	603b      	str	r3, [r7, #0]
 80177e0:	e7ee      	b.n	80177c0 <__sfp+0x60>
 80177e2:	bf00      	nop
 80177e4:	08017ddc 	.word	0x08017ddc
 80177e8:	ffff0001 	.word	0xffff0001

080177ec <_fwalk_reent>:
 80177ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177f0:	4606      	mov	r6, r0
 80177f2:	4688      	mov	r8, r1
 80177f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80177f8:	2700      	movs	r7, #0
 80177fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80177fe:	f1b9 0901 	subs.w	r9, r9, #1
 8017802:	d505      	bpl.n	8017810 <_fwalk_reent+0x24>
 8017804:	6824      	ldr	r4, [r4, #0]
 8017806:	2c00      	cmp	r4, #0
 8017808:	d1f7      	bne.n	80177fa <_fwalk_reent+0xe>
 801780a:	4638      	mov	r0, r7
 801780c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017810:	89ab      	ldrh	r3, [r5, #12]
 8017812:	2b01      	cmp	r3, #1
 8017814:	d907      	bls.n	8017826 <_fwalk_reent+0x3a>
 8017816:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801781a:	3301      	adds	r3, #1
 801781c:	d003      	beq.n	8017826 <_fwalk_reent+0x3a>
 801781e:	4629      	mov	r1, r5
 8017820:	4630      	mov	r0, r6
 8017822:	47c0      	blx	r8
 8017824:	4307      	orrs	r7, r0
 8017826:	3568      	adds	r5, #104	; 0x68
 8017828:	e7e9      	b.n	80177fe <_fwalk_reent+0x12>

0801782a <__retarget_lock_init_recursive>:
 801782a:	4770      	bx	lr

0801782c <__retarget_lock_acquire_recursive>:
 801782c:	4770      	bx	lr

0801782e <__retarget_lock_release_recursive>:
 801782e:	4770      	bx	lr

08017830 <__swhatbuf_r>:
 8017830:	b570      	push	{r4, r5, r6, lr}
 8017832:	460e      	mov	r6, r1
 8017834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017838:	2900      	cmp	r1, #0
 801783a:	b096      	sub	sp, #88	; 0x58
 801783c:	4614      	mov	r4, r2
 801783e:	461d      	mov	r5, r3
 8017840:	da08      	bge.n	8017854 <__swhatbuf_r+0x24>
 8017842:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017846:	2200      	movs	r2, #0
 8017848:	602a      	str	r2, [r5, #0]
 801784a:	061a      	lsls	r2, r3, #24
 801784c:	d410      	bmi.n	8017870 <__swhatbuf_r+0x40>
 801784e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017852:	e00e      	b.n	8017872 <__swhatbuf_r+0x42>
 8017854:	466a      	mov	r2, sp
 8017856:	f000 f951 	bl	8017afc <_fstat_r>
 801785a:	2800      	cmp	r0, #0
 801785c:	dbf1      	blt.n	8017842 <__swhatbuf_r+0x12>
 801785e:	9a01      	ldr	r2, [sp, #4]
 8017860:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017864:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017868:	425a      	negs	r2, r3
 801786a:	415a      	adcs	r2, r3
 801786c:	602a      	str	r2, [r5, #0]
 801786e:	e7ee      	b.n	801784e <__swhatbuf_r+0x1e>
 8017870:	2340      	movs	r3, #64	; 0x40
 8017872:	2000      	movs	r0, #0
 8017874:	6023      	str	r3, [r4, #0]
 8017876:	b016      	add	sp, #88	; 0x58
 8017878:	bd70      	pop	{r4, r5, r6, pc}
	...

0801787c <__smakebuf_r>:
 801787c:	898b      	ldrh	r3, [r1, #12]
 801787e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017880:	079d      	lsls	r5, r3, #30
 8017882:	4606      	mov	r6, r0
 8017884:	460c      	mov	r4, r1
 8017886:	d507      	bpl.n	8017898 <__smakebuf_r+0x1c>
 8017888:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801788c:	6023      	str	r3, [r4, #0]
 801788e:	6123      	str	r3, [r4, #16]
 8017890:	2301      	movs	r3, #1
 8017892:	6163      	str	r3, [r4, #20]
 8017894:	b002      	add	sp, #8
 8017896:	bd70      	pop	{r4, r5, r6, pc}
 8017898:	ab01      	add	r3, sp, #4
 801789a:	466a      	mov	r2, sp
 801789c:	f7ff ffc8 	bl	8017830 <__swhatbuf_r>
 80178a0:	9900      	ldr	r1, [sp, #0]
 80178a2:	4605      	mov	r5, r0
 80178a4:	4630      	mov	r0, r6
 80178a6:	f7ff f849 	bl	801693c <_malloc_r>
 80178aa:	b948      	cbnz	r0, 80178c0 <__smakebuf_r+0x44>
 80178ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178b0:	059a      	lsls	r2, r3, #22
 80178b2:	d4ef      	bmi.n	8017894 <__smakebuf_r+0x18>
 80178b4:	f023 0303 	bic.w	r3, r3, #3
 80178b8:	f043 0302 	orr.w	r3, r3, #2
 80178bc:	81a3      	strh	r3, [r4, #12]
 80178be:	e7e3      	b.n	8017888 <__smakebuf_r+0xc>
 80178c0:	4b0d      	ldr	r3, [pc, #52]	; (80178f8 <__smakebuf_r+0x7c>)
 80178c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80178c4:	89a3      	ldrh	r3, [r4, #12]
 80178c6:	6020      	str	r0, [r4, #0]
 80178c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178cc:	81a3      	strh	r3, [r4, #12]
 80178ce:	9b00      	ldr	r3, [sp, #0]
 80178d0:	6163      	str	r3, [r4, #20]
 80178d2:	9b01      	ldr	r3, [sp, #4]
 80178d4:	6120      	str	r0, [r4, #16]
 80178d6:	b15b      	cbz	r3, 80178f0 <__smakebuf_r+0x74>
 80178d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178dc:	4630      	mov	r0, r6
 80178de:	f000 f91f 	bl	8017b20 <_isatty_r>
 80178e2:	b128      	cbz	r0, 80178f0 <__smakebuf_r+0x74>
 80178e4:	89a3      	ldrh	r3, [r4, #12]
 80178e6:	f023 0303 	bic.w	r3, r3, #3
 80178ea:	f043 0301 	orr.w	r3, r3, #1
 80178ee:	81a3      	strh	r3, [r4, #12]
 80178f0:	89a0      	ldrh	r0, [r4, #12]
 80178f2:	4305      	orrs	r5, r0
 80178f4:	81a5      	strh	r5, [r4, #12]
 80178f6:	e7cd      	b.n	8017894 <__smakebuf_r+0x18>
 80178f8:	08017689 	.word	0x08017689

080178fc <memmove>:
 80178fc:	4288      	cmp	r0, r1
 80178fe:	b510      	push	{r4, lr}
 8017900:	eb01 0402 	add.w	r4, r1, r2
 8017904:	d902      	bls.n	801790c <memmove+0x10>
 8017906:	4284      	cmp	r4, r0
 8017908:	4623      	mov	r3, r4
 801790a:	d807      	bhi.n	801791c <memmove+0x20>
 801790c:	1e43      	subs	r3, r0, #1
 801790e:	42a1      	cmp	r1, r4
 8017910:	d008      	beq.n	8017924 <memmove+0x28>
 8017912:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017916:	f803 2f01 	strb.w	r2, [r3, #1]!
 801791a:	e7f8      	b.n	801790e <memmove+0x12>
 801791c:	4402      	add	r2, r0
 801791e:	4601      	mov	r1, r0
 8017920:	428a      	cmp	r2, r1
 8017922:	d100      	bne.n	8017926 <memmove+0x2a>
 8017924:	bd10      	pop	{r4, pc}
 8017926:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801792a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801792e:	e7f7      	b.n	8017920 <memmove+0x24>

08017930 <__malloc_lock>:
 8017930:	4801      	ldr	r0, [pc, #4]	; (8017938 <__malloc_lock+0x8>)
 8017932:	f7ff bf7b 	b.w	801782c <__retarget_lock_acquire_recursive>
 8017936:	bf00      	nop
 8017938:	24008e2c 	.word	0x24008e2c

0801793c <__malloc_unlock>:
 801793c:	4801      	ldr	r0, [pc, #4]	; (8017944 <__malloc_unlock+0x8>)
 801793e:	f7ff bf76 	b.w	801782e <__retarget_lock_release_recursive>
 8017942:	bf00      	nop
 8017944:	24008e2c 	.word	0x24008e2c

08017948 <_realloc_r>:
 8017948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801794c:	4680      	mov	r8, r0
 801794e:	4614      	mov	r4, r2
 8017950:	460e      	mov	r6, r1
 8017952:	b921      	cbnz	r1, 801795e <_realloc_r+0x16>
 8017954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017958:	4611      	mov	r1, r2
 801795a:	f7fe bfef 	b.w	801693c <_malloc_r>
 801795e:	b92a      	cbnz	r2, 801796c <_realloc_r+0x24>
 8017960:	f7fe ff80 	bl	8016864 <_free_r>
 8017964:	4625      	mov	r5, r4
 8017966:	4628      	mov	r0, r5
 8017968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801796c:	f000 f8fa 	bl	8017b64 <_malloc_usable_size_r>
 8017970:	4284      	cmp	r4, r0
 8017972:	4607      	mov	r7, r0
 8017974:	d802      	bhi.n	801797c <_realloc_r+0x34>
 8017976:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801797a:	d812      	bhi.n	80179a2 <_realloc_r+0x5a>
 801797c:	4621      	mov	r1, r4
 801797e:	4640      	mov	r0, r8
 8017980:	f7fe ffdc 	bl	801693c <_malloc_r>
 8017984:	4605      	mov	r5, r0
 8017986:	2800      	cmp	r0, #0
 8017988:	d0ed      	beq.n	8017966 <_realloc_r+0x1e>
 801798a:	42bc      	cmp	r4, r7
 801798c:	4622      	mov	r2, r4
 801798e:	4631      	mov	r1, r6
 8017990:	bf28      	it	cs
 8017992:	463a      	movcs	r2, r7
 8017994:	f7fe fa84 	bl	8015ea0 <memcpy>
 8017998:	4631      	mov	r1, r6
 801799a:	4640      	mov	r0, r8
 801799c:	f7fe ff62 	bl	8016864 <_free_r>
 80179a0:	e7e1      	b.n	8017966 <_realloc_r+0x1e>
 80179a2:	4635      	mov	r5, r6
 80179a4:	e7df      	b.n	8017966 <_realloc_r+0x1e>

080179a6 <_raise_r>:
 80179a6:	291f      	cmp	r1, #31
 80179a8:	b538      	push	{r3, r4, r5, lr}
 80179aa:	4604      	mov	r4, r0
 80179ac:	460d      	mov	r5, r1
 80179ae:	d904      	bls.n	80179ba <_raise_r+0x14>
 80179b0:	2316      	movs	r3, #22
 80179b2:	6003      	str	r3, [r0, #0]
 80179b4:	f04f 30ff 	mov.w	r0, #4294967295
 80179b8:	bd38      	pop	{r3, r4, r5, pc}
 80179ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80179bc:	b112      	cbz	r2, 80179c4 <_raise_r+0x1e>
 80179be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80179c2:	b94b      	cbnz	r3, 80179d8 <_raise_r+0x32>
 80179c4:	4620      	mov	r0, r4
 80179c6:	f000 f831 	bl	8017a2c <_getpid_r>
 80179ca:	462a      	mov	r2, r5
 80179cc:	4601      	mov	r1, r0
 80179ce:	4620      	mov	r0, r4
 80179d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179d4:	f000 b818 	b.w	8017a08 <_kill_r>
 80179d8:	2b01      	cmp	r3, #1
 80179da:	d00a      	beq.n	80179f2 <_raise_r+0x4c>
 80179dc:	1c59      	adds	r1, r3, #1
 80179de:	d103      	bne.n	80179e8 <_raise_r+0x42>
 80179e0:	2316      	movs	r3, #22
 80179e2:	6003      	str	r3, [r0, #0]
 80179e4:	2001      	movs	r0, #1
 80179e6:	e7e7      	b.n	80179b8 <_raise_r+0x12>
 80179e8:	2400      	movs	r4, #0
 80179ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80179ee:	4628      	mov	r0, r5
 80179f0:	4798      	blx	r3
 80179f2:	2000      	movs	r0, #0
 80179f4:	e7e0      	b.n	80179b8 <_raise_r+0x12>
	...

080179f8 <raise>:
 80179f8:	4b02      	ldr	r3, [pc, #8]	; (8017a04 <raise+0xc>)
 80179fa:	4601      	mov	r1, r0
 80179fc:	6818      	ldr	r0, [r3, #0]
 80179fe:	f7ff bfd2 	b.w	80179a6 <_raise_r>
 8017a02:	bf00      	nop
 8017a04:	2400001c 	.word	0x2400001c

08017a08 <_kill_r>:
 8017a08:	b538      	push	{r3, r4, r5, lr}
 8017a0a:	4d07      	ldr	r5, [pc, #28]	; (8017a28 <_kill_r+0x20>)
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	4604      	mov	r4, r0
 8017a10:	4608      	mov	r0, r1
 8017a12:	4611      	mov	r1, r2
 8017a14:	602b      	str	r3, [r5, #0]
 8017a16:	f7eb ff8e 	bl	8003936 <_kill>
 8017a1a:	1c43      	adds	r3, r0, #1
 8017a1c:	d102      	bne.n	8017a24 <_kill_r+0x1c>
 8017a1e:	682b      	ldr	r3, [r5, #0]
 8017a20:	b103      	cbz	r3, 8017a24 <_kill_r+0x1c>
 8017a22:	6023      	str	r3, [r4, #0]
 8017a24:	bd38      	pop	{r3, r4, r5, pc}
 8017a26:	bf00      	nop
 8017a28:	24008e30 	.word	0x24008e30

08017a2c <_getpid_r>:
 8017a2c:	f7eb bf7b 	b.w	8003926 <_getpid>

08017a30 <__sread>:
 8017a30:	b510      	push	{r4, lr}
 8017a32:	460c      	mov	r4, r1
 8017a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a38:	f000 f89c 	bl	8017b74 <_read_r>
 8017a3c:	2800      	cmp	r0, #0
 8017a3e:	bfab      	itete	ge
 8017a40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017a42:	89a3      	ldrhlt	r3, [r4, #12]
 8017a44:	181b      	addge	r3, r3, r0
 8017a46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017a4a:	bfac      	ite	ge
 8017a4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8017a4e:	81a3      	strhlt	r3, [r4, #12]
 8017a50:	bd10      	pop	{r4, pc}

08017a52 <__swrite>:
 8017a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a56:	461f      	mov	r7, r3
 8017a58:	898b      	ldrh	r3, [r1, #12]
 8017a5a:	05db      	lsls	r3, r3, #23
 8017a5c:	4605      	mov	r5, r0
 8017a5e:	460c      	mov	r4, r1
 8017a60:	4616      	mov	r6, r2
 8017a62:	d505      	bpl.n	8017a70 <__swrite+0x1e>
 8017a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a68:	2302      	movs	r3, #2
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	f000 f868 	bl	8017b40 <_lseek_r>
 8017a70:	89a3      	ldrh	r3, [r4, #12]
 8017a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017a7a:	81a3      	strh	r3, [r4, #12]
 8017a7c:	4632      	mov	r2, r6
 8017a7e:	463b      	mov	r3, r7
 8017a80:	4628      	mov	r0, r5
 8017a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a86:	f000 b817 	b.w	8017ab8 <_write_r>

08017a8a <__sseek>:
 8017a8a:	b510      	push	{r4, lr}
 8017a8c:	460c      	mov	r4, r1
 8017a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a92:	f000 f855 	bl	8017b40 <_lseek_r>
 8017a96:	1c43      	adds	r3, r0, #1
 8017a98:	89a3      	ldrh	r3, [r4, #12]
 8017a9a:	bf15      	itete	ne
 8017a9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8017a9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017aa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017aa6:	81a3      	strheq	r3, [r4, #12]
 8017aa8:	bf18      	it	ne
 8017aaa:	81a3      	strhne	r3, [r4, #12]
 8017aac:	bd10      	pop	{r4, pc}

08017aae <__sclose>:
 8017aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ab2:	f000 b813 	b.w	8017adc <_close_r>
	...

08017ab8 <_write_r>:
 8017ab8:	b538      	push	{r3, r4, r5, lr}
 8017aba:	4d07      	ldr	r5, [pc, #28]	; (8017ad8 <_write_r+0x20>)
 8017abc:	4604      	mov	r4, r0
 8017abe:	4608      	mov	r0, r1
 8017ac0:	4611      	mov	r1, r2
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	602a      	str	r2, [r5, #0]
 8017ac6:	461a      	mov	r2, r3
 8017ac8:	f7eb ff6c 	bl	80039a4 <_write>
 8017acc:	1c43      	adds	r3, r0, #1
 8017ace:	d102      	bne.n	8017ad6 <_write_r+0x1e>
 8017ad0:	682b      	ldr	r3, [r5, #0]
 8017ad2:	b103      	cbz	r3, 8017ad6 <_write_r+0x1e>
 8017ad4:	6023      	str	r3, [r4, #0]
 8017ad6:	bd38      	pop	{r3, r4, r5, pc}
 8017ad8:	24008e30 	.word	0x24008e30

08017adc <_close_r>:
 8017adc:	b538      	push	{r3, r4, r5, lr}
 8017ade:	4d06      	ldr	r5, [pc, #24]	; (8017af8 <_close_r+0x1c>)
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	4604      	mov	r4, r0
 8017ae4:	4608      	mov	r0, r1
 8017ae6:	602b      	str	r3, [r5, #0]
 8017ae8:	f7eb ff78 	bl	80039dc <_close>
 8017aec:	1c43      	adds	r3, r0, #1
 8017aee:	d102      	bne.n	8017af6 <_close_r+0x1a>
 8017af0:	682b      	ldr	r3, [r5, #0]
 8017af2:	b103      	cbz	r3, 8017af6 <_close_r+0x1a>
 8017af4:	6023      	str	r3, [r4, #0]
 8017af6:	bd38      	pop	{r3, r4, r5, pc}
 8017af8:	24008e30 	.word	0x24008e30

08017afc <_fstat_r>:
 8017afc:	b538      	push	{r3, r4, r5, lr}
 8017afe:	4d07      	ldr	r5, [pc, #28]	; (8017b1c <_fstat_r+0x20>)
 8017b00:	2300      	movs	r3, #0
 8017b02:	4604      	mov	r4, r0
 8017b04:	4608      	mov	r0, r1
 8017b06:	4611      	mov	r1, r2
 8017b08:	602b      	str	r3, [r5, #0]
 8017b0a:	f7eb ff73 	bl	80039f4 <_fstat>
 8017b0e:	1c43      	adds	r3, r0, #1
 8017b10:	d102      	bne.n	8017b18 <_fstat_r+0x1c>
 8017b12:	682b      	ldr	r3, [r5, #0]
 8017b14:	b103      	cbz	r3, 8017b18 <_fstat_r+0x1c>
 8017b16:	6023      	str	r3, [r4, #0]
 8017b18:	bd38      	pop	{r3, r4, r5, pc}
 8017b1a:	bf00      	nop
 8017b1c:	24008e30 	.word	0x24008e30

08017b20 <_isatty_r>:
 8017b20:	b538      	push	{r3, r4, r5, lr}
 8017b22:	4d06      	ldr	r5, [pc, #24]	; (8017b3c <_isatty_r+0x1c>)
 8017b24:	2300      	movs	r3, #0
 8017b26:	4604      	mov	r4, r0
 8017b28:	4608      	mov	r0, r1
 8017b2a:	602b      	str	r3, [r5, #0]
 8017b2c:	f7eb ff72 	bl	8003a14 <_isatty>
 8017b30:	1c43      	adds	r3, r0, #1
 8017b32:	d102      	bne.n	8017b3a <_isatty_r+0x1a>
 8017b34:	682b      	ldr	r3, [r5, #0]
 8017b36:	b103      	cbz	r3, 8017b3a <_isatty_r+0x1a>
 8017b38:	6023      	str	r3, [r4, #0]
 8017b3a:	bd38      	pop	{r3, r4, r5, pc}
 8017b3c:	24008e30 	.word	0x24008e30

08017b40 <_lseek_r>:
 8017b40:	b538      	push	{r3, r4, r5, lr}
 8017b42:	4d07      	ldr	r5, [pc, #28]	; (8017b60 <_lseek_r+0x20>)
 8017b44:	4604      	mov	r4, r0
 8017b46:	4608      	mov	r0, r1
 8017b48:	4611      	mov	r1, r2
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	602a      	str	r2, [r5, #0]
 8017b4e:	461a      	mov	r2, r3
 8017b50:	f7eb ff6b 	bl	8003a2a <_lseek>
 8017b54:	1c43      	adds	r3, r0, #1
 8017b56:	d102      	bne.n	8017b5e <_lseek_r+0x1e>
 8017b58:	682b      	ldr	r3, [r5, #0]
 8017b5a:	b103      	cbz	r3, 8017b5e <_lseek_r+0x1e>
 8017b5c:	6023      	str	r3, [r4, #0]
 8017b5e:	bd38      	pop	{r3, r4, r5, pc}
 8017b60:	24008e30 	.word	0x24008e30

08017b64 <_malloc_usable_size_r>:
 8017b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b68:	1f18      	subs	r0, r3, #4
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	bfbc      	itt	lt
 8017b6e:	580b      	ldrlt	r3, [r1, r0]
 8017b70:	18c0      	addlt	r0, r0, r3
 8017b72:	4770      	bx	lr

08017b74 <_read_r>:
 8017b74:	b538      	push	{r3, r4, r5, lr}
 8017b76:	4d07      	ldr	r5, [pc, #28]	; (8017b94 <_read_r+0x20>)
 8017b78:	4604      	mov	r4, r0
 8017b7a:	4608      	mov	r0, r1
 8017b7c:	4611      	mov	r1, r2
 8017b7e:	2200      	movs	r2, #0
 8017b80:	602a      	str	r2, [r5, #0]
 8017b82:	461a      	mov	r2, r3
 8017b84:	f7eb fef1 	bl	800396a <_read>
 8017b88:	1c43      	adds	r3, r0, #1
 8017b8a:	d102      	bne.n	8017b92 <_read_r+0x1e>
 8017b8c:	682b      	ldr	r3, [r5, #0]
 8017b8e:	b103      	cbz	r3, 8017b92 <_read_r+0x1e>
 8017b90:	6023      	str	r3, [r4, #0]
 8017b92:	bd38      	pop	{r3, r4, r5, pc}
 8017b94:	24008e30 	.word	0x24008e30

08017b98 <_init>:
 8017b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b9a:	bf00      	nop
 8017b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b9e:	bc08      	pop	{r3}
 8017ba0:	469e      	mov	lr, r3
 8017ba2:	4770      	bx	lr

08017ba4 <_fini>:
 8017ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ba6:	bf00      	nop
 8017ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017baa:	bc08      	pop	{r3}
 8017bac:	469e      	mov	lr, r3
 8017bae:	4770      	bx	lr
